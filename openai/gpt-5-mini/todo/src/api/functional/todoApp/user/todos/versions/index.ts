import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppTodoSnapshot } from "../../../../../structures/ITodoAppTodoSnapshot";
import { IPageITodoAppTodoSnapshot } from "../../../../../structures/IPageITodoAppTodoSnapshot";

/**
 * List paginated snapshot versions for a specific todo
 * (todo_app_todo_snapshots).
 *
 * Retrieve snapshot history for a given todo item.
 *
 * Purpose and overview: This operation returns historical snapshots stored in
 * todo_app_todo_snapshots for the specified todo (todo_app_todo_id). Snapshots
 * capture the todo state at snapshot_at and are useful for audit and
 * user-facing "version history" views.
 *
 * Security considerations and user permissions: Only the todo owner (or an
 * authorized admin via separate audit endpoints) should be permitted to view
 * snapshot history. The service must validate ownership by joining
 * todo_app_todo_snapshots.todo_app_todo_id -> todo_app_todos.id ->
 * todo_app_todos.user_id and comparing to the calling user.
 *
 * Validation rules and business logic: Accepts pagination, sort, and optional
 * filter parameters (e.g., snapshot_at range, is_completed). Defaults: sort by
 * snapshot_at desc, default page size 20, enforce a reasonable max page size to
 * prevent large payloads. Return paginated container with metadata (page,
 * pageSize, total). Handle empty results gracefully.
 *
 * @param props.connection
 * @param props.todoId Unique identifier (UUID) of the parent todo
 *   (todo_app_todos.id) to list snapshots for
 * @param props.body Search, filter, sort and pagination parameters for todo
 *   snapshot listing
 * @path /todoApp/user/todos/:todoId/versions
 * @accessor api.functional.todoApp.user.todos.versions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the parent todo (todo_app_todos.id) to
     * list snapshots for
     */
    todoId: string & tags.Format<"uuid">;

    /**
     * Search, filter, sort and pagination parameters for todo snapshot
     * listing
     */
    body: ITodoAppTodoSnapshot.IRequest;
  };
  export type Body = ITodoAppTodoSnapshot.IRequest;
  export type Response = IPageITodoAppTodoSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/user/todos/:todoId/versions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/user/todos/${encodeURIComponent(props.todoId ?? "null")}/versions`;
  export const random = (): IPageITodoAppTodoSnapshot =>
    typia.random<IPageITodoAppTodoSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific todo snapshot (version) from todo_app_todo_snapshots.
 *
 * Retrieve a specific todo snapshot (version) from the todo_app_todo_snapshots
 * table.
 *
 * Purpose and overview: This operation returns the stored snapshot representing
 * the state of a todo at a past point in time. The data is sourced from the
 * Prisma model `todo_app_todo_snapshots` and exposes fields captured at the
 * snapshot moment (id, todo_app_todo_id, title, description, is_completed,
 * completed_at, position, created_at, updated_at, deleted_at, snapshot_at). It
 * is read-only and intended for history, audit, and owner support usage.
 *
 * Security and permissions: This endpoint is accessible to the owning user
 * only. Implementations MUST verify ownership by ensuring the parent todo
 * (todo_app_todos.id) has user_id equal to the requesting user. Admins should
 * use the admin-scoped endpoint instead. Under no circumstances should this
 * endpoint return authentication secrets or sensitive fields from other
 * models.
 *
 * Relationship to database entities: Maps directly to
 * `todo_app_todo_snapshots`. The path parameter `todoId` corresponds to the
 * source todo id (todo_app_todo_snapshots.todo_app_todo_id) and `versionId`
 * corresponds to snapshot primary key (todo_app_todo_snapshots.id).
 *
 * Validation and error handling: Both path parameters MUST be valid UUIDs. If
 * the snapshot is not found or does not belong to the provided todoId, return
 * 404. If ownership check fails, return 403.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the parent todo (references
 *   todo_app_todos.id).
 * @param props.versionId Unique identifier of the snapshot record
 *   (todo_app_todo_snapshots.id).
 * @path /todoApp/user/todos/:todoId/versions/:versionId
 * @accessor api.functional.todoApp.user.todos.versions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent todo (references todo_app_todos.id). */
    todoId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the snapshot record
     * (todo_app_todo_snapshots.id).
     */
    versionId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppTodoSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/user/todos/:todoId/versions/:versionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/user/todos/${encodeURIComponent(props.todoId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): ITodoAppTodoSnapshot =>
    typia.random<ITodoAppTodoSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.param("versionId")(() => typia.assert(props.versionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
