import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppUser } from "../../../../structures/ITodoAppUser";

/**
 * Retrieve a user account by ID (todo_app_user).
 *
 * Purpose and overview:
 *
 * Retrieve the requested user account from the `todo_app_user` table by
 * `userId`. The response contains public profile fields: `id`, `email`,
 * `display_name`, `account_status`, `created_at`, `updated_at`, and
 * `last_active_at`. The endpoint MUST NOT return `password_hash` or any
 * internal secrets.
 *
 * Security and permissions:
 *
 * - Access policy: Owner or admin only. If the caller is the owner, return the
 *   full profile (excluding secrets). If the caller is an admin, return the
 *   profile and create an audit record in `todo_app_audit_records` with
 *   `actor_role='admin'` and `action_type='read_user'` and include optional
 *   reason when provided.
 * - Validation: `userId` must be a UUID. Return 400 for malformed, 404 if not
 *   found, 403 if unauthorized.
 *
 * Schema relationship and notes:
 *
 * This operation maps to Prisma model `todo_app_user`. Use only the documented
 * safe fields in responses; do not expose `password_hash`. Any derived flags
 * (e.g., `isVerified`) must be computed server-side and documented separately.
 *
 * Error handling:
 *
 * - 400 Bad Request: invalid UUID
 * - 403 Forbidden: not owner or not admin
 * - 404 Not Found: user does not exist
 * - 500 Internal Server Error: unexpected failures
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user (UUID).
 * @path /todoApp/user/users/:userId
 * @accessor api.functional.todoApp.user.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user (UUID). */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppUser;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/user/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/user/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoAppUser => typia.random<ITodoAppUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a user account (todo_app_user) â€” owner.
 *
 * Purpose and overview:
 *
 * Update mutable profile attributes for the specified user. Intended for
 * owner-initiated updates such as `display_name`. System-managed fields (`id`,
 * `created_at`, `updated_at`, `password_hash`) MUST NOT be accepted from
 * clients. The server will set `updated_at` on successful update.
 *
 * Security and permissions:
 *
 * - Access policy: Only the resource owner may update their own profile via this
 *   path. Attempts to modify another user's profile MUST be rejected with 403.
 *   Admins should use the admin update endpoint.
 * - Validation: `userId` must be a UUID. Validate `display_name` length
 *   (suggested <=255). If `email` changes are allowed by policy, require
 *   separate verification flow; otherwise reject email change attempts and
 *   return a clear error.
 *
 * Schema mapping and writable fields:
 *
 * - Writable by owner: `display_name` (optional).
 * - Server-side only / disallowed: `id`, `created_at`, `updated_at`,
 *   `password_hash`.
 *
 * Responses and errors:
 *
 * - 200: updated user representation (safe fields only)
 * - 400: invalid input or malformed UUID
 * - 403: unauthorized (not owner)
 * - 404: user not found
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user (UUID).
 * @param props.body Owner-updatable user fields. Clients MUST NOT provide
 *   `password_hash`. Typical allowed property: `display_name` (optional).
 * @path /todoApp/user/users/:userId
 * @accessor api.functional.todoApp.user.users.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target user (UUID). */
    userId: string & tags.Format<"uuid">;

    /**
     * Owner-updatable user fields. Clients MUST NOT provide
     * `password_hash`. Typical allowed property: `display_name`
     * (optional).
     */
    body: ITodoAppUser.IUpdate;
  };
  export type Body = ITodoAppUser.IUpdate;
  export type Response = ITodoAppUser;

  export const METADATA = {
    method: "PUT",
    path: "/todoApp/user/users/:userId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/user/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoAppUser => typia.random<ITodoAppUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
