import { tags } from "typia";

/**
 * Subscription entity representing a user's subscription to a community.
 *
 * This schema corresponds directly to the Prisma model
 * `community_portal_subscriptions`. It contains the canonical persisted
 * attributes used by the API to represent subscriptions. Fields that are
 * managed by the server (id, created_at, updated_at) are included in the
 * response but MUST NOT be supplied by clients when creating subscriptions. The
 * presence of `x-autobe-prisma-schema` enforces that every listed property
 * exists in the referenced Prisma model.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPortalSubscription = {
  /**
   * Primary key of the subscription record as stored in the
   * community_portal_subscriptions table.
   *
   * This value is the canonical identifier for the subscription and matches
   * the Prisma model's `id` column (type: UUID). It is used to reference the
   * subscription in subsequent API calls and audit records.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the subscribing user (references
   * community_portal_users.id).
   *
   * This property maps to the `user_id` FK column in the Prisma model. In API
   * responses it identifies the account that owns the subscription. For
   * security, mutation APIs typically derive this value from the
   * authenticated session rather than accepting it from clients.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the subscribed community (references
   * community_portal_communities.id).
   *
   * This property corresponds to the `community_id` column in the Prisma
   * model and indicates which community the user has subscribed to. The value
   * is required for identifying the subscription target in both UI and
   * backend logic.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Timestamp (UTC) when the subscription record was created.
   *
   * This property maps to the Prisma `created_at` column. It is provided in
   * responses for auditing and sorting subscriptions by creation time.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (UTC) of the last update to the subscription record.
   *
   * This maps to the Prisma `updated_at` column and is useful for
   * synchronization and optimistic concurrency checks.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp (UTC) for the subscription record.
   *
   * This property maps to the Prisma `deleted_at` column. When null the
   * subscription is active; when set it indicates the record was
   * revoked/soft-deleted and preserved for audit purposes.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPortalSubscription {
  /**
   * Request DTO for listing subscriptions
   * (ICommunityPortalSubscription.IRequest).
   *
   * Provides filtering, pagination, and simple sorting for subscription
   * listing endpoints. Direct user_id filters are forbidden in request DTOs;
   * use the boolean flag myItems to request the authenticated user's
   * subscriptions. When communityId differs from the authenticated user's
   * communities, the server must enforce authorization and may return 403 if
   * the caller lacks privileges.
   */
  export type IRequest = {
    /**
     * Filter by community id (UUID). Returns subscriptions for the
     * specified community. Server MUST canonicalize and validate the UUID;
     * unauthorized access to other users' subscriptions is not allowed.
     */
    communityId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * When true return only subscriptions belonging to the authenticated
     * caller. This avoids sending direct user IDs from the client and
     * enforces that the server derive the user identity from the
     * authentication context.
     */
    myItems?: boolean | undefined;

    /**
     * When true return only active (non-soft-deleted) subscriptions. When
     * false or omitted, results may include revoked subscriptions if the
     * caller is authorized to view them.
     */
    activeOnly?: boolean | undefined;

    /**
     * Maximum number of subscription records to return. A reasonable upper
     * bound protects the endpoint from large responses.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Zero-based pagination offset. */
    offset?: (number & tags.Type<"int32"> & tags.Minimum<0>) | undefined;

    /**
     * Sort order for subscription results by created_at. Use exact enum
     * values: 'created_at.asc' or 'created_at.desc'.
     */
    sort?: "created_at.asc" | "created_at.desc" | undefined;
  };

  /**
   * Create DTO for a subscription record.
   *
   * This schema is the request body used to create a new subscription and
   * maps to the Prisma model `community_portal_subscriptions`. The only
   * required client-supplied property is `community_id`. The server-side
   * logic derives the authenticated `user_id` and populates id/timestamps.
   * Because this type references the Prisma model via
   * `x-autobe-prisma-schema`, all properties included here must exist on that
   * model; additional client-only properties are intentionally omitted to
   * maintain DB-interface consistency.
   */
  export type ICreate = {
    /**
     * Target community identifier to subscribe to (maps to
     * community_portal_subscriptions.community_id).
     *
     * When creating a subscription the client supplies the community_id of
     * the community to join. The server will derive the subscribing user
     * (user_id) from the authenticated session and will set server-managed
     * fields such as id, created_at, updated_at. Do not include user_id in
     * the request body.
     */
    community_id: string & tags.Format<"uuid">;
  };

  /**
   * Subscription summary view mapped to the Prisma model
   * community_portal_subscriptions.
   *
   * This summary is intended for list displays (for example: a user's
   * subscriptions) and includes only non-sensitive fields that exist in the
   * Prisma model. The record preserves the link to the owning user (user_id)
   * for administrative and self-service scenarios. The schema intentionally
   * omits deleted_at from the public summary to avoid exposing internal
   * revocation flags in default list responses.
   *
   * X-autobe-prisma-schema is provided to assert the direct mapping to the
   * Prisma model and to ensure that downstream generation tools validate
   * property existence against the database model.
   */
  export type ISummary = {
    /**
     * Primary key of the subscription record (Prisma:
     * community_portal_subscriptions.id).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Subscriber's user id (Prisma:
     * community_portal_subscriptions.user_id). Present to identify the
     * owner of the subscription in administrative or self-service views.
     */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Identifier of the subscribed community (Prisma:
     * community_portal_subscriptions.community_id).
     */
    community_id: string & tags.Format<"uuid">;

    /**
     * Timestamp when the subscription was created (Prisma:
     * community_portal_subscriptions.created_at). Provided for ordering and
     * display in subscription lists.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
