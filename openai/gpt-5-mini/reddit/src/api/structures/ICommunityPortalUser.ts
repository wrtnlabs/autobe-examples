import { tags } from "typia";

/**
 * Public representation of a CommunityPortal user.
 *
 * This schema maps to the Prisma model community_portal_users and intentionally
 * exposes only non-sensitive, public-facing fields. Sensitive authentication
 * fields such as password_hash are deliberately excluded from this
 * representation.
 *
 * Properties included here exist in the Prisma model and are documented with
 * references to the corresponding columns.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPortalUser = {
  /**
   * Primary key of the user. Corresponds to community_portal_users.id in the
   * Prisma schema.
   *
   * This property is a UUID assigned by the system at user creation and is
   * used to reference the user across related records such as posts,
   * comments, subscriptions, and reports. It is immutable once created.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique login handle for the account. Corresponds to
   * community_portal_users.username in the Prisma schema.
   *
   * This value is used for public attribution of content and for
   * authentication login identifiers. It must be unique across the system and
   * is canonicalized/case rules are enforced by the backend.
   */
  username: string;

  /**
   * Optional human-friendly display name shown in UI. Maps to
   * community_portal_users.display_name in the Prisma schema.
   *
   * This value is intended for presentation and may differ from the unique
   * username. It can be null when a user has not set a display name. Keep
   * this field concise to fit profile layouts.
   */
  display_name?: string | null | undefined;

  /**
   * Optional profile biography text for the user (community_portal_users.bio
   * in Prisma).
   *
   * Use this free-text field to present a short biography. The platform may
   * index this field for fuzzy search (GIN trigram index at the DB level), so
   * avoid extremely large blobs. Can be null if not provided.
   */
  bio?: string | null | undefined;

  /**
   * Optional avatar image URI (community_portal_users.avatar_uri in the
   * Prisma schema).
   *
   * This is a client-displayable URI referencing the user's avatar image. The
   * backend should validate and sanitize stored URIs. The property may be
   * null if the user has no avatar.
   */
  avatar_uri?: (string & tags.Format<"uri">) | null | undefined;

  /**
   * Aggregated integer karma score for the user as stored in
   * community_portal_users.karma.
   *
   * This value represents the persisted reputation metric and is used for
   * display and gating decisions. It is updated by backend processes in
   * response to vote events and moderation actions.
   */
  karma: number & tags.Type<"int32">;

  /**
   * Record creation timestamp in UTC corresponding to
   * community_portal_users.created_at.
   *
   * This timestamp is assigned at account creation and is useful for sorting,
   * auditing, and calculating account age-based rules.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last modification timestamp in UTC corresponding to
   * community_portal_users.updated_at.
   *
   * Reflects the most recent profile or account metadata change and is useful
   * for optimistic concurrency and audit displays.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPortalUser {
  /**
   * Public summary view of a user (ICommunityPortalUser.ISummary).
   *
   * This DTO represents the safe, public-facing subset of the
   * community_portal_users Prisma model suitable for list and profile summary
   * displays. It intentionally omits sensitive fields such as email and
   * password_hash. The schema maps directly to the Prisma model fields and is
   * intended for use wherever a compact user representation is required
   * (author attribution, lists, leaderboards).
   *
   * Property notes:
   *
   * - Id and username are required to uniquely identify a user in lists.
   * - Karma is included for reputation display and gating checks in the UI.
   * - Optional fields (display_name, bio, avatar_uri) may be null when absent.
   */
  export type ISummary = {
    /**
     * Primary identifier of the user as stored in the Prisma model
     * community_portal_users.id.
     *
     * This value is the canonical UUID used across the platform to
     * reference the user. It is generated by the system and never supplied
     * by clients when creating resources.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique login handle for the user (community_portal_users.username).
     *
     * This is the primary display handle used in list views and
     * attribution. It must be unique across the system and is suitable for
     * use in URLs and mentions.
     */
    username: string;

    /**
     * Optional human-friendly display name
     * (community_portal_users.display_name).
     *
     * This value is shown in UIs where a more readable name than the
     * username is preferred. It may be null if the user did not provide a
     * display name.
     */
    display_name?: string | null | undefined;

    /**
     * Optional profile biography text (community_portal_users.bio).
     *
     * This short free-text field may be indexed for fuzzy search (as
     * indicated by the Prisma trigram index) and can be null when the user
     * has not provided a biography.
     */
    bio?: string | null | undefined;

    /**
     * Optional avatar image URI for the user's profile
     * (community_portal_users.avatar_uri).
     *
     * When present, this should be a publicly accessible URI suitable for
     * displaying the user's avatar. It may be null when no avatar is set.
     */
    avatar_uri?: (string & tags.Format<"uri">) | null | undefined;

    /**
     * Aggregated reputation score for the user
     * (community_portal_users.karma).
     *
     * This integer reflects the user's reputation as stored in the Prisma
     * model. The authoritative calculation may be driven by vote events,
     * but this field holds the persisted aggregate used for display and
     * gating.
     */
    karma: number & tags.Type<"int32">;

    /**
     * Record creation timestamp in UTC (community_portal_users.created_at).
     *
     * Used to show join date and for sorting/filtering in admin or
     * analytics views.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last modification timestamp in UTC
     * (community_portal_users.updated_at).
     *
     * Indicates when the user record was last changed (profile edit, karma
     * update, etc.).
     */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Query and pagination parameters used to search and list user profiles.
   *
   * This request DTO supports free-text search, exact or partial field
   * filters, karma and date-range filtering, sorting, and control over
   * whether archived or unverified accounts are included. Fields that
   * reference sensitive data (for example `includeArchived` or
   * `includeUnverified`) require appropriate authorization on the server
   * side.
   */
  export type IRequest = {
    /**
     * Page number for paginated results.
     *
     * This value is 1-based in typical UI flows. Use it together with
     * `limit` to page through results.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of items to return in the page.
     *
     * Implementations SHOULD enforce a sensible maximum (for example, 100)
     * for performance and abuse protection.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Free-text search query applied to searchable profile fields such as
     * username, display_name, and bio.
     *
     * When provided, the backend performs fuzzy/partial matching based on
     * configured search indices.
     */
    q?: string | undefined;

    /**
     * Exact or partial username filter.
     *
     * Use this field to restrict results to accounts whose username matches
     * the supplied value (case-insensitive depending on implementation).
     */
    username?: string | undefined;

    /**
     * Exact or partial display name filter.
     *
     * Useful for searching human-facing names separate from the canonical
     * username.
     */
    display_name?: string | undefined;

    /**
     * Minimum karma filter.
     *
     * When supplied, only users with karma greater than or equal to this
     * value are returned.
     */
    min_karma?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum karma filter.
     *
     * When supplied, only users with karma less than or equal to this value
     * are returned.
     */
    max_karma?: (number & tags.Type<"int32">) | undefined;

    /**
     * Start of creation date range (inclusive) in ISO 8601 format.
     *
     * When provided, only users created at or after this timestamp are
     * returned.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End of creation date range (inclusive) in ISO 8601 format.
     *
     * When provided, only users created at or before this timestamp are
     * returned.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * When true, include soft-deleted/archived user records
     * (community_portal_users.deleted_at IS NOT NULL) in the results.
     *
     * Access to archived records is typically restricted and requires
     * elevated authorization; unauthenticated callers should not set this
     * flag.
     */
    includeArchived?: boolean | undefined;

    /**
     * Field to sort results by. Typical supported values: 'username',
     * 'created_at', 'karma'.
     *
     * The backend should document the allowed values; if an unsupported
     * value is supplied a 400 Bad Request is appropriate.
     */
    sort_by?: string | undefined;

    /**
     * Sort direction. Allowed values: 'asc' or 'desc'.
     *
     * When omitted, implementations typically default to 'desc' for dates
     * and 'asc' for alphabetical sorts.
     */
    order?: string | undefined;

    /**
     * When true, include users who are not email-verified
     * (community_portal_members.is_email_verified == false).
     *
     * Access to unverified-user filtering may be restricted to authorized
     * callers depending on privacy policy.
     */
    includeUnverified?: boolean | undefined;
  };

  /**
   * Update DTO for CommunityPortal user profile
   * (ICommunityPortalUser.IUpdate).
   *
   * All fields are optional and intended for account owners to update
   * editable profile attributes. This DTO maps to the writable subset of the
   * Prisma model community_portal_users and deliberately excludes protected
   * fields such as username, email, karma, created_at, deleted_at, and
   * password_hash. Use explicit null to clear optional fields.
   */
  export type IUpdate = {
    /**
     * Optional new display name for the user (writes to
     * community_portal_users.display_name).
     *
     * When provided, the server updates the stored display_name. Null
     * indicates clearing the field. The backend enforces allowed length and
     * character rules.
     */
    display_name?: string | null | undefined;

    /**
     * Optional biography text to update (writes to
     * community_portal_users.bio).
     *
     * Clients may submit a shorter or longer bio; backend enforces
     * configured length limits. Use explicit null to clear the bio.
     */
    bio?: string | null | undefined;

    /**
     * Optional avatar URI to update (writes to
     * community_portal_users.avatar_uri).
     *
     * Provide a validated, safe URI or null to clear the existing avatar.
     * The server validates formats and may reject unsupported schemes.
     */
    avatar_uri?: (string & tags.Format<"uri">) | null | undefined;
  };
}
