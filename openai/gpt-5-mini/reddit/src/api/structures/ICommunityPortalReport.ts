import { tags } from "typia";

/**
 * Complete representation of a moderation report.
 *
 * This schema is the authoritative API representation of the Prisma model
 * community_portal_reports. It contains all public-facing fields mapped from
 * the database model and includes nullable references for preserved
 * auditability. Sensitive or moderator-only fields (for example resolutionNotes
 * or reporterContactEmail) should be returned only to authorized callers per
 * application rules.
 *
 * The descriptions reference the corresponding Prisma model columns and explain
 * nullability and business meaning. Use this type for detailed report responses
 * returned by report retrieval endpoints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPortalReport = {
  /**
   * Primary identifier of the report.
   *
   * This value corresponds to the Prisma model community_portal_reports.id
   * and is the canonical UUID for the report record.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the reporting user, if the report was filed by an
   * authenticated member.
   *
   * Maps to community_portal_reports.reporter_user_id in the Prisma schema
   * and may be null for anonymous reports. When present this value MUST
   * reference an existing user id.
   */
  reporterUserId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Community identifier related to the report, if applicable.
   *
   * This maps to community_portal_reports.community_id in Prisma and is
   * nullable because some reports may target cross-community items or be
   * filed without a specific community reference.
   */
  communityId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Post identifier targeted by this report when the report concerns a post.
   *
   * Corresponds to community_portal_reports.post_id in the Prisma model.
   * Nullable when the report targets a comment or community-level issue.
   */
  postId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Comment identifier targeted by this report when the report concerns a
   * comment.
   *
   * Corresponds to community_portal_reports.comment_id in the Prisma model.
   * Nullable when the report targets a post or community-level issue.
   */
  commentId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Moderator-assignment identifier indicating which moderator is assigned to
   * triage this report.
   *
   * Maps to community_portal_reports.assigned_moderator_id in Prisma.
   * Nullable until assignment occurs.
   */
  assignedModeratorId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Moderator identifier who closed or resolved the report.
   *
   * Corresponds to community_portal_reports.closed_by_moderator_id in Prisma
   * and is nullable until the report is closed.
   */
  closedByModeratorId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Controlled reason code describing why the report was filed (for example:
   * 'spam', 'harassment', 'hate', 'illegal', 'other').
   *
   * This maps to community_portal_reports.reason_code and should be selected
   * from the platform's controlled taxonomy. The application enforces allowed
   * values; the schema stores the canonical code.
   */
  reasonCode: string;

  /**
   * Optional free-text details provided by the reporter to explain the
   * report.
   *
   * Maps to community_portal_reports.reason_text in Prisma. Useful for
   * moderator context and search; nullable when the reporter supplies no
   * extra detail.
   */
  reasonText?: string | null | undefined;

  /**
   * Lifecycle state of the report (application-level vocabulary such as
   * 'OPEN', 'IN_REVIEW', 'REQUIRES_ACTION', 'DISMISSED', 'CLOSED').
   *
   * This field maps to community_portal_reports.status in Prisma and
   * indicates current processing state of the report. Allowed values are
   * controlled by the application workflow.
   */
  status: string;

  /**
   * Flag indicating whether the reporter marked this report as urgent and
   * requiring prioritized handling.
   *
   * Corresponds to community_portal_reports.is_urgent in the Prisma model.
   */
  isUrgent: boolean;

  /**
   * Optional severity level for triage (for example: 'low', 'medium',
   * 'high').
   *
   * Maps to community_portal_reports.severity in Prisma and may be used
   * alongside isUrgent to prioritize handling.
   */
  severity?: string | null | undefined;

  /**
   * Optional contact email provided by the reporter for follow-up. Must be a
   * valid email address when supplied.
   *
   * This maps to community_portal_reports.reporter_contact_email in the
   * Prisma model and is nullable when not provided.
   */
  reporterContactEmail?: (string & tags.Format<"email">) | null | undefined;

  /**
   * Timestamp when the report was created (UTC).
   *
   * Corresponds to community_portal_reports.created_at in Prisma and is
   * recorded by the system when the report is filed.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Timestamp when a moderator first reviewed the report.
   *
   * Maps to community_portal_reports.reviewed_at in Prisma and is nullable
   * until review occurs.
   */
  reviewedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when the report was resolved or closed.
   *
   * Corresponds to community_portal_reports.closed_at in the Prisma model and
   * is nullable until closure.
   */
  closedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Optional moderator notes describing the resolution or actions taken for
   * the report.
   *
   * Maps to community_portal_reports.resolution_notes in Prisma. Because this
   * field may contain moderator-only information, callers must be authorized
   * to view it.
   */
  resolutionNotes?: string | null | undefined;
};
export namespace ICommunityPortalReport {
  /**
   * Request DTO for listing moderation reports. All fields are optional
   * filters. This DTO is NOT permitted to include direct user_id filters in
   * public request types; admin-scoped request DTOs must be defined
   * separately with stricter authorization.
   */
  export type IRequest = {
    /**
     * Filter by community UUID. Matches
     * community_portal_reports.community_id. Nullable to allow omission.
     */
    communityId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by post UUID (community_portal_reports.post_id). Nullable to
     * allow omission.
     */
    postId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by comment UUID (community_portal_reports.comment_id).
     * Nullable to allow omission.
     */
    commentId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by report lifecycle status (e.g.,
     * 'OPEN','IN_REVIEW','REQUIRES_ACTION','DISMISSED','CLOSED').
     */
    status?: string | null | undefined;

    /** Filter by urgency flag. When true, return urgent reports. */
    isUrgent?: boolean | null | undefined;

    /** Filter by severity (e.g., 'low','medium','high'). */
    severity?: string | null | undefined;

    /** Filter reports created at or after this ISO-8601 timestamp. */
    createdFrom?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter reports created at or before this ISO-8601 timestamp. */
    createdTo?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sort key for results. Backend may support direction via a separate
     * parameter. Allowed sample keys: 'createdAt', 'severity', 'isUrgent'.
     */
    sort?: "createdAt" | "severity" | "isUrgent" | undefined;

    /** Maximum number of records to return (pagination). */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Record offset for pagination (zero-based). */
    offset?: (number & tags.Type<"int32"> & tags.Minimum<0>) | undefined;

    /**
     * When true and caller is authorized, include soft-deleted reports
     * (records with deleted_at set). Default: false.
     */
    includeDeleted?: boolean | null | undefined;
  };

  /**
   * Client-writable report creation DTO mapping to the
   * community_portal_reports Prisma model. Server-managed fields (id,
   * reporter_user_id for authenticated callers, status, created_at,
   * reviewed_at, closed_at, assigned_moderator_id, closed_by_moderator_id,
   * resolution_notes) are not accepted from clients and will be ignored if
   * provided. At least one target identifier (community_id OR post_id OR
   * comment_id) must be provided.
   */
  export type ICreate = any | any | any;

  /**
   * Report update DTO for communityPortal.
   *
   * This object represents fields that authorized moderators may update on an
   * existing moderation report. It maps to mutable columns on the
   * community_portal_reports Prisma model. Fields are optional to support
   * partial updates (PATCH/PUT semantics) and any field set by the client
   * will be validated against the model's expectations (UUID formats, allowed
   * status values, ISO 8601 timestamps).
   *
   * Audit and workflow notes:
   *
   * - The application MUST record the acting moderator's identity and an audit
   *   entry when assignment, status, or closure fields change.
   * - Status transitions should follow configured workflow rules; invalid
   *   transitions are rejected by the server with 400 Bad Request.
   * - Assigned_moderator_id and closed_by_moderator_id accept null to clear
   *   those relationships; when provided they must reference existing
   *   moderator assignments.
   */
  export type IUpdate = {
    /**
     * Report lifecycle state. Allowed application-level values: 'OPEN',
     * 'IN_REVIEW', 'REQUIRES_ACTION', 'DISMISSED', 'CLOSED'. Use exact enum
     * values enforced by the application.
     */
    status?:
      | "OPEN"
      | "IN_REVIEW"
      | "REQUIRES_ACTION"
      | "DISMISSED"
      | "CLOSED"
      | undefined;

    /**
     * Optional moderator assignment. Nullable: clear assignment by sending
     * null. Maps to assigned_moderator_id in the Prisma model and must
     * reference a community_portal_moderators.id when provided.
     */
    assigned_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Moderator who closed/resolved the report. Nullable. Maps to
     * closed_by_moderator_id in the Prisma model.
     */
    closed_by_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional moderator notes describing the resolution or actions taken.
     * Maps to resolution_notes in the Prisma model. Returned only to
     * authorized moderator/admin callers when reading.
     */
    resolution_notes?: string | undefined;

    /**
     * Timestamp when a moderator first reviewed the report. Use ISO 8601
     * date-time format in UTC. Maps to reviewed_at in the Prisma model.
     */
    reviewed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the report was resolved/closed. Use ISO 8601 date-time
     * format in UTC. Maps to closed_at in the Prisma model.
     */
    closed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Flag indicating whether the report requires prioritized handling.
     * Maps to is_urgent in the Prisma model.
     */
    is_urgent?: boolean | undefined;

    /**
     * Optional severity level used for triage. Maps to severity in the
     * Prisma model.
     */
    severity?: string | undefined;

    /**
     * Optional contact email captured at report submission for follow-up.
     * Nullable to allow redaction. Maps to reporter_contact_email in the
     * Prisma model.
     */
    reporter_contact_email?: (string & tags.Format<"email">) | null | undefined;
  };

  /**
   * Summary view of a moderation report.
   *
   * This schema represents the concise, API-facing summary of a moderation
   * report as stored in the Prisma model community_portal_reports. It
   * includes identifiers for the report and optional references to the
   * reporter, community, post, and comment targets, as well as lifecycle and
   * triage metadata (status, is_urgent, severity, timestamps). Nullable
   * relation fields are represented using oneOf with explicit null to
   * preserve JSON Schema correctness and client clarity.
   *
   * Field-level privacy notes: contact data (reporter_contact_email) and
   * resolution_notes are sensitive and should be exposed only to authorized
   * moderation or admin clients according to platform policies. The schema
   * intentionally includes these fields because they exist on the Prisma
   * model; service implementations MUST enforce field-level authorization
   * when producing responses.
   */
  export type ISummary = {
    /**
     * Primary identifier of the report record.
     *
     * This UUID uniquely identifies the moderation report (maps to
     * community_portal_reports.id). It is used to fetch, update, or
     * reference the report in moderation workflows.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the reporting user, if authenticated, otherwise null.
     *
     * This field maps to community_portal_reports.reporter_user_id and is
     * nullable to allow anonymous reports. When present it references
     * community_portal_users.id and provides attribution for the report;
     * when null the report was submitted anonymously.
     */
    reporter_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * UUID of the related community, if applicable.
     *
     * Maps to community_portal_reports.community_id. Nullable because some
     * reports target cross-community items or references that do not map to
     * a single community.
     */
    community_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * UUID of the reported post when the report targets a post.
     *
     * This references community_portal_posts.id and is nullable when the
     * report targets a comment or a community-level issue. Use oneOf to
     * explicitly represent null when there is no post target.
     */
    post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * UUID of the reported comment when the report targets a comment.
     *
     * This references community_portal_comments.id and is nullable when the
     * report targets a post or community-level issue. Exactly one of
     * post_id or comment_id is typically set for content-level reports.
     */
    comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Moderator assignment identifier (nullable).
     *
     * Maps to community_portal_reports.assigned_moderator_id. This field is
     * null until a moderator is assigned for triage. When populated it
     * references community_portal_moderators.id and indicates the moderator
     * responsible for the initial review.
     */
    assigned_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Moderator identifier who closed/resolved the report (nullable).
     *
     * This maps to community_portal_reports.closed_by_moderator_id and is
     * null until the report is resolved. When present it references
     * community_portal_moderators.id and provides an auditable reference to
     * the actor who closed the report.
     */
    closed_by_moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Controlled reason code for the report (for example: 'spam',
     * 'harassment', 'hate', 'illegal', 'other').
     *
     * This field maps to community_portal_reports.reason_code and is
     * expected to be one value from the platform's controlled vocabulary.
     * The application layer enforces allowed values; the schema type is
     * string to allow the service to document and validate the allowed
     * set.
     */
    reason_code: string;

    /**
     * Optional free-text details provided by the reporter.
     *
     * Maps to community_portal_reports.reason_text. This field offers
     * contextual information to moderators and may be indexed for fuzzy
     * search; it is nullable and should be provided only when the reporter
     * includes additional details.
     */
    reason_text?: string | null | undefined;

    /**
     * Lifecycle state of the report (for example: 'OPEN', 'IN_REVIEW',
     * 'REQUIRES_ACTION', 'DISMISSED', 'CLOSED').
     *
     * This maps to community_portal_reports.status. The application
     * enforces the allowed values and transitions; clients should treat
     * this as an opaque string with documented possible states at the API
     * level.
     */
    status: string;

    /**
     * Flag indicating whether the reporter marked this report as urgent.
     *
     * Maps to community_portal_reports.is_urgent and is used to prioritize
     * triage queues. True indicates prioritized handling.
     */
    is_urgent: boolean;

    /**
     * Optional severity level for triage (for example: 'low', 'medium',
     * 'high').
     *
     * This maps to community_portal_reports.severity and is nullable. Use
     * the platform's controlled vocabulary for severity when provided.
     */
    severity?: string | null | undefined;

    /**
     * Optional contact email provided by the reporter for follow-up.
     *
     * Maps to community_portal_reports.reporter_contact_email. When present
     * it should be a valid email address and treated as PII: return it only
     * to authorized moderation viewers and protect it in transit and at
     * rest.
     */
    reporter_contact_email?: (string & tags.Format<"email">) | null | undefined;

    /**
     * Timestamp when the report was created (ISO 8601, UTC).
     *
     * Maps to community_portal_reports.created_at and serves as the
     * authoritative creation time for audit and queue ordering.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when a moderator first reviewed the report (nullable).
     *
     * Maps to community_portal_reports.reviewed_at. Null indicates the
     * report has not yet been reviewed.
     */
    reviewed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the report was resolved/closed (nullable).
     *
     * Maps to community_portal_reports.closed_at and is null for
     * open/in-review reports.
     */
    closed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional moderator notes describing the resolution or actions taken
     * (nullable).
     *
     * Maps to community_portal_reports.resolution_notes. This is an
     * auditable text field and may contain sensitive moderation context.
     * Only authorized moderator or admin clients should receive this field
     * in responses.
     */
    resolution_notes?: string | null | undefined;
  };
}
