import { tags } from "typia";

import { IEPostSortMode } from "./IEPostSortMode";

/**
 * Canonical representation of a CommunityPortal post.
 *
 * This schema mirrors the Prisma model `community_portal_posts` and includes
 * all public-facing fields that exist in the model. Sensitive data is
 * intentionally omitted. All properties are validated against the database
 * model; no phantom properties were added.
 *
 * Use this schema for single-item GET responses (detailed views).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPortalPost = {
  /**
   * Unique identifier of the post.
   *
   * This corresponds to the primary key column `id` in the Prisma model
   * `community_portal_posts`. It is a UUID used to reference the post across
   * the API and database.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the community that owns this post.
   *
   * This maps to `community_id` in the Prisma model and MUST reference an
   * existing community_portal_communities.id.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Author user id (nullable).
   *
   * Maps to `author_user_id` in Prisma. Nullable to preserve posts when the
   * author account is removed. When present it references
   * community_portal_users.id.
   */
  author_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Post type indicator such as 'text', 'link', or 'image'.
   *
   * This field maps to `post_type` in the Prisma model and determines which
   * content field (body/link_url/image_url) is expected to be populated.
   */
  post_type: string;

  /**
   * User-facing title of the post.
   *
   * Maps to `title` in Prisma. Recommended max length enforced at application
   * level (e.g., 300 characters).
   */
  title: string;

  /**
   * Text body for text posts. Nullable for link/image posts.
   *
   * Corresponds to `body` in the Prisma model.
   */
  body?: string | null | undefined;

  /**
   * External link URL for link-type posts.
   *
   * Corresponds to `link_url` in the Prisma model. When present the value
   * MUST be a valid http/https URI.
   */
  link_url?: (string & tags.Format<"uri">) | null | undefined;

  /**
   * Representative image URL for image-type posts.
   *
   * Corresponds to `image_url` in the Prisma model. For multi-image posts use
   * a dedicated media table (not modeled here).
   */
  image_url?: (string & tags.Format<"uri">) | null | undefined;

  /**
   * Moderation state of the post (for example 'published', 'pending',
   * 'removed').
   *
   * This maps to the `status` column in Prisma and is enforced at application
   * level.
   */
  status: string;

  /**
   * Creation timestamp in ISO 8601 format (UTC).
   *
   * This maps to `created_at` in Prisma and is set by the server upon insert.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp in ISO 8601 format (UTC).
   *
   * This maps to `updated_at` in Prisma and is updated by the server when the
   * post changes.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp (nullable).
   *
   * When set, the post is archived/hidden. This maps to `deleted_at` in the
   * Prisma model.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPortalPost {
  /**
   * Request DTO for searching and listing posts. Contains filter, sort and
   * pagination parameters. All properties are optional; nullable-capable
   * fields allow explicit null values.
   */
  export type IRequest = {
    /**
     * Filter by community id (UUID). Nullable to explicitly indicate no
     * community filter.
     */
    communityId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by post type (for example 'text','link','image'). Nullable
     * means no type filter.
     */
    postType?: string | null | undefined;

    /**
     * Filter by moderation status (for example
     * 'published','pending','removed'). Nullable indicates no status
     * filter.
     */
    status?: string | null | undefined;

    /**
     * Full-text search query applied to title and body. Nullable to
     * indicate no search term.
     */
    q?: string | null | undefined;

    /**
     * Filter: include posts with created_at >= this ISO 8601 datetime.
     * Nullable for no lower bound.
     */
    createdFrom?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter: include posts with created_at <= this ISO 8601 datetime.
     * Nullable for no upper bound.
     */
    createdTo?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Requested sort mode. Backend implements ordering; 'hot' and
     * 'controversial' algorithms are implementation-defined.
     */
    sort?: IEPostSortMode | undefined;

    /**
     * Maximum number of items to return. Server enforces an upper bound
     * (recommended max 100).
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Zero-based offset for pagination. */
    offset?: (number & tags.Type<"int32"> & tags.Minimum<0>) | undefined;

    /**
     * When true, include soft-deleted posts (deleted_at not null) if the
     * caller is authorized. Default false.
     */
    includeDeleted?: boolean | undefined;
  };

  /**
   * Post type discriminator for community_portal_posts. Allowed values:
   * 'text' (text post), 'link' (external link post), 'image' (image post).
   */
  export type IEPostType = "text" | "link" | "image";

  /**
   * Polymorphic create DTO for community_portal_posts. The payload MUST match
   * exactly one variant depending on post_type ('text'|'link'|'image'). Each
   * variant contains a const 'post_type' discriminator. Server will set
   * author_user_id and timestamps and must ignore client-supplied
   * server-managed fields.
   */
  export type ICreate =
    | ICommunityPortalPost.ICreate.IText
    | ICommunityPortalPost.ICreate.ILink
    | ICommunityPortalPost.ICreate.IImage;
  export namespace ICreate {
    /**
     * Create DTO for a text post mapped to the community_portal_posts
     * Prisma model. Server MUST set id, author_user_id, created_at,
     * updated_at and ignore client-supplied server-managed fields.
     */
    export type IText = {
      /** Target community UUID (community_portal_communities.id). */
      community_id: string & tags.Format<"uuid">;

      /** Discriminator for text post variant; must be 'text'. */
      post_type: "text";

      /** Post title. Required. */
      title: string & tags.MaxLength<300>;

      /** Text body for text posts. Required for 'text' post_type. */
      body: string & tags.MaxLength<40000>;
    };

    /**
     * Create DTO for a link post mapped to the community_portal_posts
     * Prisma model. Server MUST set id, author_user_id, created_at,
     * updated_at and ignore client-supplied server-managed fields.
     */
    export type ILink = {
      /** Target community UUID (community_portal_communities.id). */
      community_id: string & tags.Format<"uuid">;

      /** Discriminator for link post variant; must be 'link'. */
      post_type: "link";

      /** Post title. Required. */
      title: string & tags.MaxLength<300>;

      /** External link URL for link posts. Required for 'link' post_type. */
      link_url: string & tags.MaxLength<80000> & tags.Format<"uri">;

      /** Optional body/summary for link posts. */
      body?: (string & tags.MaxLength<40000>) | undefined;
    };

    /**
     * Create DTO for an image post mapped to the community_portal_posts
     * Prisma model. For multi-image posts use media upload APIs (outside
     * this schema). Server MUST set id, author_user_id, created_at,
     * updated_at and ignore client-supplied server-managed fields.
     */
    export type IImage = {
      /** Target community UUID (community_portal_communities.id). */
      community_id: string & tags.Format<"uuid">;

      /** Discriminator for image post variant; must be 'image'. */
      post_type: "image";

      /** Post title. Required. */
      title: string & tags.MaxLength<300>;

      /**
       * Representative image URL for image posts. Required for
       * single-image flow.
       */
      image_url: string & tags.MaxLength<80000> & tags.Format<"uri">;

      /** Optional caption or description for the image post. */
      body?: (string & tags.MaxLength<40000>) | undefined;
    };
  }

  /**
   * Update DTO for community_portal_posts. All fields optional. Immutable and
   * server-managed fields such as id, author_user_id, created_at, updated_at
   * and deleted_at are excluded from this DTO.
   */
  export type IUpdate = {
    /** Editable post title. Optional in updates. */
    title?: (string & tags.MaxLength<300>) | undefined;

    /**
     * Editable text body. Optional; may be used to replace or clear
     * existing body.
     */
    body?: (string & tags.MaxLength<40000>) | undefined;

    /** Editable link URL for link posts. */
    link_url?:
      | (string & tags.MaxLength<80000> & tags.Format<"uri">)
      | undefined;

    /** Editable representative image URL for image posts. */
    image_url?:
      | (string & tags.MaxLength<80000> & tags.Format<"uri">)
      | undefined;

    /**
     * Moderation state (e.g., 'published','pending','removed'). Allowed
     * values enforced by application logic.
     */
    status?: string | undefined;

    /**
     * Post type. Changing post_type requires appropriate content fields for
     * the new type and may be restricted by server policy.
     */
    post_type?: ICommunityPortalPost.IEPostType | undefined;
  };

  /**
   * Summary representation of a CommunityPortal post optimized for list
   * views.
   *
   * This summary omits large content fields (body, link_url, image_url) and
   * internal fields. It maps to the Prisma model `community_portal_posts` and
   * includes only fields that exist in the model.
   */
  export type ISummary = {
    /** Unique identifier of the post (UUID). */
    id: string & tags.Format<"uuid">;

    /** Post title used as primary display field in lists. */
    title: string;

    /** Post type: 'text' | 'link' | 'image'. */
    post_type: string;

    /** Identifier of the community that owns this post. */
    community_id: string & tags.Format<"uuid">;

    /**
     * Author's user id (nullable). Presented as an id only in summary
     * views.
     */
    author_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Creation timestamp of the post in ISO 8601 UTC. */
    created_at: string & tags.Format<"date-time">;
  };
}
