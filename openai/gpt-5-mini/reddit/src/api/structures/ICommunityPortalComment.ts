import { tags } from "typia";

/**
 * Canonical representation of a comment.
 *
 * This schema maps directly to the Prisma model community_portal_comments and
 * includes all persistent fields that are safe to expose in API responses.
 * Property descriptions reference the underlying Prisma columns and provide
 * business context for each field. Nullable fields are represented using oneOf
 * with a null alternative to align with JSON Schema nullable handling.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPortalComment = {
  /**
   * Primary identifier of the comment.
   *
   * Corresponds to community_portal_comments.id in the Prisma schema. This
   * UUID uniquely identifies the comment record and is stable across reads.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the parent post's id.
   *
   * Maps to community_portal_comments.post_id. Every comment belongs to a
   * post; this field is required and used to scope comment threads and
   * enforce visibility rules.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Optional parent comment identifier for nested replies.
   *
   * Maps to community_portal_comments.parent_comment_id. Null indicates a
   * top-level comment. When present, it references another comment.id in the
   * same post and enables nested threading.
   */
  parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional author user id referencing the comment's author.
   *
   * Maps to community_portal_comments.author_user_id. This field is nullable
   * to preserve comment audit trails when user accounts are removed; a null
   * value indicates the author record is no longer available.
   */
  author_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * The text body of the comment.
   *
   * Maps to community_portal_comments.body. This is the primary content field
   * for the comment and is required for a valid comment. Implementations
   * should enforce configured max lengths and apply sanitization before
   * returning this field.
   */
  body: string;

  /**
   * Timestamp when the comment was created (UTC).
   *
   * Corresponds to community_portal_comments.created_at in the Prisma schema.
   * Timestamps are expressed in ISO 8601 / RFC 3339 format in UTC.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the comment was last updated (UTC).
   *
   * Corresponds to community_portal_comments.updated_at. Use this field for
   * optimistic concurrency checks and client-side caching.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp; when set the comment is considered
   * deleted/archived.
   *
   * Maps to community_portal_comments.deleted_at. Public APIs normally
   * exclude records with deleted_at != null; this field is included for audit
   * and moderator views.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPortalComment {
  /**
   * Request parameters for listing comments.
   *
   * This request object is used to filter, sort, and page comment lists. It
   * maps to the business-level listing requirements for the
   * community_portal_comments entity and only contains query/query-body
   * parameters (pagination, filtering, and optional search).
   */
  export type IRequest = {
    /**
     * Maximum number of comment items to return in the page.
     *
     * This parameter controls the page size for comment listings. Use
     * sensible limits to avoid large payloads. Implementations may enforce
     * a server-side maximum. Example: 20.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Default<20> & tags.Minimum<1>)
      | undefined;

    /**
     * Zero-based offset for pagination.
     *
     * Use offset to page through results. For large result sets consider
     * switching to cursor-based pagination. Example: 0 for first page.
     */
    offset?:
      | (number & tags.Type<"int32"> & tags.Default<0> & tags.Minimum<0>)
      | undefined;

    /**
     * Optional parent comment UUID to filter replies of a specific parent
     * comment.
     *
     * When provided, the API returns comments whose parent_comment_id
     * equals this UUID. If null, no parent-based filtering is applied. The
     * value must be a valid UUID when supplied.
     */
    parentCommentId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * When true, include soft-deleted comments (deleted_at IS NOT NULL) in
     * results if the caller is authorized.
     *
     * Default behavior is to exclude deleted comments. Only privileged
     * callers (moderators/admins) should be allowed to set this to true;
     * otherwise the server must ignore or reject the flag.
     */
    includeDeleted?: boolean | undefined;

    /**
     * Sorting mode for comment listings.
     *
     * Common values: 'new' (newest first), 'old' (oldest first). Other
     * modes are backend-defined. The server accepts the parameter but the
     * precise ordering semantics for non-standard modes are
     * implementation-defined.
     */
    sort?: "new" | "old" | undefined;

    /**
     * Optional full-text search query to match against comment body.
     *
     * When provided the backend may perform fuzzy or trigram search against
     * the body field and return matching comments. Use with care for
     * performance; the server may restrict its use.
     */
    q?: string | null | undefined;
  };

  /**
   * DTO for creating a new comment.
   *
   * This request object is used when a member creates a comment on a post or
   * replies to another comment. It maps directly to the writable fields of
   * the community_portal_comments Prisma model while intentionally excluding
   * server-managed or sensitive fields (id, author_user_id, created_at,
   * updated_at, deleted_at). The server is expected to derive author_user_id
   * from the authenticated session and to set timestamps.
   *
   * Business notes:
   *
   * - Post_id is required and must point to an existing post; the server
   *   validates existence and permissions.
   * - Parent_comment_id is optional; include it to create a nested reply. Use
   *   null for top-level comments.
   * - Body is required and must contain the comment text. The server enforces
   *   length and nesting-depth rules according to platform policy.
   */
  export type ICreate = {
    /**
     * Identifier of the parent post to which this comment will belong. This
     * corresponds to community_portal_comments.post_id and must reference
     * an existing community_portal_posts.id. The server uses this value to
     * attach the comment to the correct post. Provide a valid UUID.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * Optional identifier of the parent comment for nested replies.
     * Corresponds to community_portal_comments.parent_comment_id. Use a
     * UUID to attach this comment as a reply to an existing comment, or
     * null if creating a top-level comment.
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The text body of the comment. This maps to the
     * community_portal_comments.body column in the Prisma model. Provide
     * the full comment text; empty bodies are not valid for creation.
     */
    body: string & tags.MinLength<1>;
  };

  /**
   * DTO for updating a comment (partial). All fields are optional. This
   * request maps to mutable properties of the Prisma model
   * community_portal_comments while intentionally excluding system-managed
   * and immutable fields (id, post_id, parent_comment_id, author_user_id,
   * created_at, updated_at, deleted_at). The server MUST derive author
   * identity from authentication and must not accept author_user_id in this
   * DTO.
   */
  export type IUpdate = {
    /**
     * Updated text body for the comment.
     *
     * Business rules: This is the only mutable field allowed via the
     * general comment update endpoint. The server enforces max length and
     * sanitization. This field is optional in the update DTO to follow the
     * Partial<T> pattern; if omitted, no change is applied.
     */
    body?: string | undefined;
  };

  /**
   * Compact summary representation of a comment for list views. This schema
   * omits large text bodies to keep payloads lightweight. It maps directly to
   * fields present in the Prisma model community_portal_comments and is safe
   * to expose in public list endpoints.
   */
  export type ISummary = {
    /** Primary identifier of the comment (community_portal_comments.id). */
    id: string & tags.Format<"uuid">;

    /** Identifier of the parent post (community_portal_comments.post_id). */
    post_id: string & tags.Format<"uuid">;

    /**
     * Optional parent comment id for nested replies
     * (community_portal_comments.parent_comment_id). Null denotes a
     * top-level comment.
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional author user id (community_portal_comments.author_user_id).
     * Nullable to preserve audit trails when the author account is
     * removed.
     */
    author_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Creation timestamp in ISO 8601 format (UTC). Maps to
     * community_portal_comments.created_at.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
