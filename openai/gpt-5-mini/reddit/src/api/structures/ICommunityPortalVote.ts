import { tags } from "typia";

/**
 * Main Vote DTO (ICommunityPortalVote) representing the persisted vote record
 * mapped to the Prisma model community_portal_votes.
 *
 * This object is the canonical representation returned by read operations and
 * contains identifiers, the vote value, and audit timestamps. The `post_id` and
 * `comment_id` properties are nullable to reflect the XOR relationship in the
 * database: a vote targets either a post or a comment. The `deleted_at`
 * property is nullable and used to indicate soft-deletion; active votes have
 * deleted_at == null.
 *
 * All properties in this schema correspond directly to columns on the
 * community_portal_votes model and must not reference fields that do not exist
 * in the Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPortalVote = {
  /**
   * Primary key (UUID) of the vote record as stored in
   * community_portal_votes.id. This value uniquely identifies the vote.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the voting user (community_portal_users.id). This field is
   * populated by the server based on the authenticated principal and is
   * required for auditability.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Nullable UUID reference to the post (community_portal_posts.id) targeted
   * by the vote. Null when the vote targets a comment. Use nullable
   * representation to reflect the underlying Prisma column semantics.
   */
  post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Nullable UUID reference to the comment (community_portal_comments.id)
   * targeted by the vote. Null when the vote targets a post.
   */
  comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Vote value stored as integer. Allowed values are exactly +1 for an upvote
   * and -1 for a downvote. This field is authoritative for scoring and karma
   * calculations.
   */
  value: 1 | -1;

  /**
   * Timestamp (ISO 8601) when the vote was first created. Stored in UTC in
   * the database (community_portal_votes.created_at).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (ISO 8601) of the last update to the vote record
   * (community_portal_votes.updated_at).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Nullable soft-delete timestamp. When non-null the vote is considered
   * removed/archived for active aggregates but retained for audit
   * (community_portal_votes.deleted_at).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPortalVote {
  /**
   * Request DTO for creating a vote on either a post or a comment. Exactly
   * one target MUST be specified: either `post_id` OR `comment_id` (XOR). The
   * `value` property is required and must be 1 or -1. The voter (user_id) is
   * derived from the authenticated session and MUST NOT be provided by the
   * client. The server is responsible for enforcing eligibility (e.g.,
   * community_portal_members.is_email_verified, not suspended) and for
   * enforcing one active vote per (user,target) via DB constraints or
   * application logic.
   */
  export type ICreate = any | any;

  /**
   * Update DTO for a vote record.
   *
   * This schema represents the allowable request body when updating an
   * existing community_portal_votes record. Only mutable, client-editable
   * properties are present. The server MUST derive the actor (user_id) from
   * the authenticated session and MUST validate ownership before applying
   * changes. The schema is intentionally minimal: changing the vote target or
   * user is not permitted via this DTO.
   *
   * Security note: The API SHOULD verify that the authenticated caller is the
   * vote owner (vote.user_id) and that the member is eligible to vote (e.g.,
   * verified and not suspended) before applying updates.
   */
  export type IUpdate = {
    /**
     * Vote value to apply to the target vote record.
     *
     * This property maps to community_portal_votes.value in the Prisma
     * schema and must be either 1 (upvote) or -1 (downvote). Use exactly
     * the numeric values 1 or -1. Do not attempt to change vote target
     * (post_id/comment_id) or actor (user_id) through this DTO. This DTO is
     * intended for updating an existing vote's value (for example switching
     * +1 to -1).
     */
    value?: 1 | -1 | undefined;
  };

  /**
   * Request DTO for searching and listing vote events.
   *
   * This schema is intended for list/filter endpoints over
   * community_portal_votes. All properties are optional filters and
   * pagination controls. The server MUST enforce XOR semantics between postId
   * and commentId (only one of them may be provided) and must validate UUID
   * and date-time formats. By default the server excludes soft-deleted
   * records unless includeDeleted=true and the caller has the required
   * authorization.
   *
   * Notes on authorization and visibility:
   *
   * - Use myItems=true to request the authenticated caller's votes; do not
   *   allow arbitrary user id filtering in request DTOs.
   * - The API must not expose sensitive fields (such as password_hash) through
   *   joined user objects; only minimal public profile fields may be returned
   *   when enriching results.
   */
  export type IRequest = {
    /**
     * Filter votes by the target post id (community_portal_posts.id).
     * Provide either postId or commentId to scope results to a single
     * target type. The API enforces XOR semantics: do not supply both
     * postId and commentId simultaneously.
     */
    postId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter votes by the target comment id (community_portal_comments.id).
     * Provide either commentId or postId, not both. The service validates
     * that the referenced comment exists and belongs to the expected post
     * when applicable.
     */
    commentId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * When true, restrict results to votes cast by the authenticated caller
     * (the server derives the user id from the auth context). Use this
     * instead of providing a direct user id in the request to avoid
     * exposing or allowing arbitrary user_id filters.
     */
    myItems?: boolean | undefined;

    /**
     * Filter by vote value. Allowed values are 1 (upvote) and -1
     * (downvote).
     */
    value?: 1 | -1 | undefined;

    /**
     * Inclusive lower bound (ISO 8601) for vote.created_at. Use this to
     * filter votes created on or after the given timestamp.
     */
    createdFrom?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Inclusive upper bound (ISO 8601) for vote.created_at. Use this to
     * filter votes created on or before the given timestamp.
     */
    createdTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort key for results. Supported values: 'createdAt' (chronological)
     * or 'value' (group by vote value). The API accepts this parameter and
     * orders results accordingly; direction (asc/desc) can be handled via
     * convention or a separate parameter (not defined here).
     */
    sort?: "createdAt" | "value" | undefined;

    /**
     * Pagination limit â€” maximum number of records to return. Recommended
     * maximum is 100 to protect backend resources.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Pagination offset (zero-based). Use in combination with limit for
     * page navigation.
     */
    offset?: (number & tags.Type<"int32"> & tags.Minimum<0>) | undefined;

    /**
     * When true and the caller is authorized, include soft-deleted vote
     * records (community_portal_votes.deleted_at is not null). By default
     * this is false and deleted votes are excluded from results.
     */
    includeDeleted?: boolean | undefined;
  };

  /**
   * Summary view of a vote record.
   *
   * This compact representation of a community vote is intended for list and
   * summary responses where full vote audit details are not required. It maps
   * directly to the Prisma model community_portal_votes and includes the core
   * identifying and relational fields (id, user_id, post_id, comment_id), the
   * vote value, and timestamps for creation and last update. Nullable
   * relations (post_id/comment_id, deleted_at) are represented using oneOf to
   * allow explicit null values.
   *
   * Do not include sensitive authentication fields in this schema. When used
   * in public responses, consider access-control requirements for exposing
   * user_id and related attribution fields.
   */
  export type ISummary = {
    /**
     * Primary identifier of the vote record.
     *
     * This is the unique UUID assigned to the vote when it was created in
     * the database (maps to community_portal_votes.id). It is used to
     * reference the vote in updates or deletion operations and must be
     * treated as an immutable identifier for the life of the vote.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the user who cast the vote.
     *
     * This references community_portal_users.id. In the persisted model
     * this field is required and identifies the actor who performed the
     * vote. For public-facing summaries this field is included to enable UI
     * attribution or linking to the voter's public profile (subject to
     * privacy rules).
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * If the vote targets a post, the UUID of that post.
     *
     * This property references community_portal_posts.id when the vote
     * targets a post. It is nullable because a vote may instead target a
     * comment (in which case comment_id will be set). Use oneOf to
     * represent the nullable relationship explicitly.
     */
    post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If the vote targets a comment, the UUID of that comment.
     *
     * This property references community_portal_comments.id when the vote
     * targets a comment. It is nullable because a vote may instead target a
     * post (in which case post_id will be set). Exactly one of post_id or
     * comment_id is expected to be non-null at the data model level; the
     * API representation preserves that distinction.
     */
    comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Vote value. Integer representing the user's vote.
     *
     * Allowed values are +1 for an upvote and -1 for a downvote as defined
     * by the data model. The backend enforces these semantics; clients
     * should only submit or expect +1/-1 values.
     */
    value: number & tags.Type<"int32">;

    /**
     * Creation timestamp of the vote in ISO 8601 format (UTC).
     *
     * This field maps to community_portal_votes.created_at and indicates
     * when the vote was recorded. Timestamps are expressed in date-time
     * format and should be treated as authoritative for ordering and
     * auditing purposes.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last-modified timestamp for the vote record in ISO 8601 format (UTC).
     *
     * Maps to community_portal_votes.updated_at and is updated on vote
     * changes (for example, when a user changes +1 to -1). Use this field
     * for concurrency checks or UI freshness indicators.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft-delete timestamp (nullable).
     *
     * When set, this vote has been soft-deleted and should be excluded from
     * active tallies and feeds. This maps to
     * community_portal_votes.deleted_at and is null for active votes. Use
     * oneOf to represent the nullable timestamp explicitly.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
