import { tags } from "typia";

/**
 * Full community representation returned by read endpoints for a single
 * community.
 *
 * This schema maps directly to the Prisma model `community_portal_communities`.
 * All properties in this schema correspond to columns in that model. The
 * representation includes public-facing attributes (name, slug, description),
 * visibility and privacy flags, the optional creator reference, and
 * system-managed timestamps. Deleted communities set `deleted_at` and should be
 * treated as archived by clients.
 *
 * Design notes:
 *
 * - All object properties are named and typed to match the Prisma model.
 * - Nullable fields are represented using oneOf to explicitly allow null.
 * - This type deliberately does not include relation objects (e.g., nested arrays
 *   of posts or moderators). Relations are returned as separate referenced
 *   resources where needed.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPortalCommunity = {
  /**
   * Primary key of the community record as defined in the Prisma model. This
   * is the canonical UUID used to reference the community across the
   * platform.
   *
   * This value is generated by the system and is immutable once created. Use
   * this identifier for linking posts, subscriptions, moderators, and
   * reports.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the creating user's community_portal_users.id. Per the
   * Prisma schema this field is nullable to avoid cascade-delete when a user
   * is removed.
   *
   * When present it identifies the user who created the community. When null,
   * the community has no current creator assignment (for example, if the
   * original creator account was removed or ownership was reassigned).
   */
  creator_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Human-readable community title used for display. This corresponds to the
   * community_portal_communities.name column in the Prisma schema.
   *
   * Business guidance: This is the primary display name shown to users in
   * lists and headers and should be treated as plain text (validation rules,
   * length and allowed characters are enforced by application logic).
   */
  name: string;

  /**
   * URL-friendly unique identifier for the community (slug). The Prisma model
   * enforces uniqueness on slug (@@unique([slug])).
   *
   * The slug is typically canonicalized on write (lowercased, sanitized) and
   * is suitable for use in URLs and client routing. Clients may provide a
   * suggested slug or allow the server to derive one from the name.
   */
  slug: string;

  /**
   * Optional short community description or purpose statement mapped to
   * community_portal_communities.description.
   *
   * This field is intended for a succinct summary shown in community listings
   * and discovery views. It may be null when no description is provided.
   */
  description?: string | null | undefined;

  /**
   * Whether the community is private (invite-only) as represented by
   * community_portal_communities.is_private in the Prisma schema.
   *
   * True indicates membership is restricted; false indicates public
   * membership. The application enforces membership gating and visibility for
   * private communities.
   */
  is_private: boolean;

  /**
   * Visibility policy for the community (stored in
   * community_portal_communities.visibility).
   *
   * The Prisma schema stores this as a string; application-level code may
   * restrict allowed values (for example 'public' or 'private'). Clients
   * should treat this as an opaque string and rely on server-side
   * documentation for permitted values.
   */
  visibility: string;

  /**
   * Record creation timestamp (UTC) as stored in
   * community_portal_communities.created_at. This timestamp is system-managed
   * and indicates when the community record was created.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp (UTC) as stored in
   * community_portal_communities.updated_at. This is managed by the system
   * and updated whenever the community record is modified.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp (nullable) corresponding to
   * community_portal_communities.deleted_at in the Prisma schema.
   *
   * When null the community is active; when set the community is considered
   * archived/removed from normal listings. This is system-managed and should
   * not be modified directly by clients.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPortalCommunity {
  /**
   * Request DTO for listing and searching communities
   * (ICommunityPortalCommunity.IRequest).
   *
   * This request type is used by community listing/search endpoints and
   * contains pagination, filtering, and sort options. It is not directly
   * linked to a single Prisma model as an x-autobe-prisma-schema because it
   * represents query parameters rather than a persisted record.
   *
   * Guidance:
   *
   * - Servers SHOULD ignore null properties and apply defaults when necessary.
   * - Provide either page/limit or offset for pagination (both may be accepted
   *   but prefer one strategy per client request).
   * - The server MUST validate UUID formats for creator_user_id and return 400
   *   for malformed values.
   */
  export type IRequest = {
    /**
     * Optional full-text search query applied to community name and
     * description.
     *
     * When provided, servers SHOULD apply case-insensitive/trigram-fuzzy
     * matching (the Prisma model includes GIN trigram indexes on name and
     * description) to improve discovery. Null indicates no free-text
     * filter.
     */
    q?: string | null | undefined;

    /**
     * Optional canonical slug filter for exact community lookup
     * (community_portal_communities.slug).
     *
     * Provide the community slug to restrict results to the matching
     * community. The slug is typically canonicalized to lowercase on write;
     * callers should pass the canonical form where possible.
     */
    slug?: string | null | undefined;

    /**
     * Optional name filter (case-insensitive). Use for matching community
     * titles or performing name-based discovery.
     *
     * Service implementations may apply normalized matching
     * (lowercasing/trigram) when evaluating this field.
     */
    name?: string | null | undefined;

    /**
     * Optional visibility filter for communities (e.g., 'public' or
     * 'private' as stored in community_portal_communities.visibility).
     *
     * The Prisma model stores visibility as a string; allowed values are
     * controlled by application policy. When supplied, the server SHOULD
     * validate the value against supported visibility modes.
     */
    visibility?: string | null | undefined;

    /**
     * Optional boolean filter to include only private (true) or non-private
     * (false) communities.
     *
     * This maps to the community_portal_communities.is_private boolean
     * column. Null indicates no filter.
     */
    is_private?: boolean | null | undefined;

    /**
     * Optional 1-based page number for pagination. If omitted or null,
     * server defaults apply (e.g., page 1).
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Optional page size limit for pagination. Servers SHOULD enforce a
     * maximum allowed limit to protect performance. Null allows server
     * default.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Optional zero-based offset for pagination alternatives to page/limit.
     * Use only one pagination strategy per request. Null indicates not
     * provided.
     */
    offset?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /**
     * Optional sort key for results (for example: 'created_at' or 'name').
     *
     * Note: ranking modes such as 'hot' or 'top' are typically used for
     * posts; community listing sort keys are implementation-defined. When
     * provided, the server validates the key and applies the requested
     * ordering.
     */
    sort_by?: string | null | undefined;
  };

  /**
   * Create DTO for community_portal_communities. Used as the request body
   * when creating a new community via POST endpoints.
   *
   * Rules and constraints:
   *
   * - Do NOT include system-managed fields such as id, creator_user_id,
   *   created_at, updated_at or deleted_at in this payload. Those are set by
   *   the server.
   * - `name`, `is_private`, and `visibility` are required to satisfy the Prisma
   *   model non-nullable columns. `slug` is optional because the server may
   *   derive it; if provided it must be unique and valid per platform rules.
   * - `description` is optional and may be omitted or set to null explicitly.
   *
   * Security note: Creator is derived from the authenticated session; clients
   * must not attempt to set creator_user_id in create payloads.
   */
  export type ICreate = {
    /**
     * Human-readable community title. Required when creating a community.
     * The server may apply additional validation (length, disallowed
     * characters) and may canonicalize casing.
     */
    name: string;

    /**
     * Optional URL-friendly slug proposing the canonical identifier for the
     * community. If omitted the server will derive a slug from `name` and
     * ensure uniqueness (Prisma model enforces unique slug). Clients may
     * provide a preferred slug but must accept server-side
     * canonicalization.
     */
    slug?: string | undefined;

    /**
     * Optional short description or purpose statement for the community.
     * May be null if no description is provided.
     */
    description?: string | null | undefined;

    /**
     * Indicates whether the community is private (invite-only). Required
     * for creation and stored as community_portal_communities.is_private.
     * The server enforces membership gating for private communities.
     */
    is_private: boolean;

    /**
     * Visibility policy for the community. This string maps to
     * community_portal_communities.visibility. Valid values are defined by
     * the application (for example 'public' or 'private'); clients should
     * supply the desired visibility value per platform documentation.
     */
    visibility: string;
  };

  /**
   * DTO used to update a community (ICommunityPortalCommunity.IUpdate).
   *
   * This object contains only the mutable fields that clients may supply when
   * updating a community. Each property directly maps to a column on the
   * Prisma model community_portal_communities. All fields are optional;
   * include only the fields you intend to change. To clear the description
   * explicitly set it to null. Server-managed fields (id, creator_user_id,
   * created_at, updated_at, deleted_at) must NOT be supplied by clients.
   */
  export type IUpdate = {
    /**
     * Human-readable community title corresponding to
     * community_portal_communities.name.
     *
     * Provide a concise, display-friendly community title. When supplied
     * the server will validate allowed characters and apply
     * uniqueness/normalization rules as required by the platform.
     */
    name?: string | undefined;

    /**
     * URL-friendly canonical identifier for the community that maps to
     * community_portal_communities.slug.
     *
     * The slug should be lowercase and URL-safe. If omitted, the server may
     * derive a slug from the provided name. When provided, the server
     * validates uniqueness and accepted characters.
     */
    slug?: string | undefined;

    /**
     * Optional short community description mapping to
     * community_portal_communities.description.
     *
     * Set this to a brief statement of the community's purpose. To clear
     * the description explicitly set this property to null.
     */
    description?: string | null | undefined;

    /**
     * Boolean flag that indicates whether the community is invite-only
     * (maps to community_portal_communities.is_private).
     *
     * Changing this flag may affect membership and visibility rules for the
     * community.
     */
    is_private?: boolean | undefined;

    /**
     * Visibility policy string for the community (maps to
     * community_portal_communities.visibility).
     *
     * Typical values are platform-defined (for example: 'public' or
     * 'private'). The server enforces allowed values.
     */
    visibility?: string | undefined;
  };

  /**
   * Community summary view mapped to the Prisma model
   * community_portal_communities.
   *
   * This summary is optimized for list displays and discovery endpoints. It
   * intentionally includes only the public, non-sensitive fields that exist
   * on the underlying Prisma model and omits internal or sensitive fields
   * (for example, deleted_at is omitted from summary to avoid exposing
   * internal soft-delete flags in list views).
   *
   * The schema includes x-autobe-prisma-schema to indicate direct
   * correspondence to the Prisma model and to enable automated verification
   * that all included properties exist in the database model. All properties
   * included here are present in the referenced Prisma model.
   */
  export type ISummary = {
    /**
     * Primary key of the community (Prisma:
     * community_portal_communities.id). This is the canonical identifier
     * used to reference the community in API operations and relationships.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Human-readable community title (Prisma:
     * community_portal_communities.name). Used as the primary display value
     * in lists and search results. This field is intentionally concise for
     * list views.
     */
    name: string;

    /**
     * URL-friendly canonical slug for the community (Prisma:
     * community_portal_communities.slug). Slug values are canonicalized on
     * write and used for client-friendly routing and lookup.
     */
    slug: string;

    /**
     * Short community description or purpose statement (Prisma:
     * community_portal_communities.description). In summary views this may
     * be truncated by the UI to keep list payloads compact.
     */
    description?: string | undefined;

    /**
     * Indicates whether the community is private/invite-only (Prisma:
     * community_portal_communities.is_private). Clients should use this
     * flag to control discoverability and membership UX.
     */
    is_private?: boolean | undefined;

    /**
     * Visibility policy for the community (Prisma:
     * community_portal_communities.visibility). Expected values are managed
     * by application logic; the summary exposes the value for client
     * routing and filtering.
     */
    visibility?: string | undefined;

    /**
     * Record creation timestamp in UTC (Prisma:
     * community_portal_communities.created_at). Provided for sorting and
     * display; included only because the Prisma model defines this column.
     */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Last update timestamp in UTC (Prisma:
     * community_portal_communities.updated_at). Provided for UI freshness
     * indicators; only included because the Prisma model defines this
     * column.
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
