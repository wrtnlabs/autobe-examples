import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Permanently remove a moderation report (hard delete).
 *
 * Permanently remove the specified moderation report from the
 * community_portal_reports table.
 *
 * This operation performs a hard delete because the Prisma model lacks a
 * soft-delete column for reports. Before deletion the application SHOULD verify
 * that deletion is permitted (no legal hold, retention policy constraints, or
 * required archival). The operation MUST record an audit entry capturing the
 * deletion actor, timestamp, and justification.
 *
 * Security and permissions: Only authorized admins may call this endpoint. The
 * application MUST enforce strict authorization and return 403 Forbidden for
 * unauthorized attempts. Deletion is irreversible and MUST be guarded by policy
 * checks in application logic.
 *
 * Validation and business logic:
 *
 * - Verify the report exists; if not, return 404 Not Found.
 * - If retention or legal hold blocks deletion, return 409 Conflict.
 * - Record an audit entry with actor identity and provided justification
 *   (application-level requirement) before performing the hard delete.
 *
 * Related operations:
 *
 * - PUT /reports/{reportId} to update report state instead of deleting when
 *   preservation is desired.
 *
 * @param props.connection
 * @param props.reportId Target report's ID
 * @path /communityPortal/admin/reports/:reportId
 * @accessor api.functional.communityPortal.admin.reports.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target report's ID */
    reportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPortal/admin/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPortal/admin/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
