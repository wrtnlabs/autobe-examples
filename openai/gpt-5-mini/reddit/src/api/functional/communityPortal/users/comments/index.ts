import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalComment } from "../../../../structures/ICommunityPortalComment";
import { IPageICommunityPortalComment } from "../../../../structures/IPageICommunityPortalComment";

/**
 * Search and retrieve a paginated list of comments authored by a given user
 * (profile comments).
 *
 * Purpose and overview: Return a filtered and paginated list of comments
 * created by the specified user for profile views and moderation summaries.
 * This operation is centered on the community_portal_comments Prisma model.
 *
 * Security considerations and user permissions: This read operation is public
 * by default for non-deleted comments but must respect comment visibility and
 * the deleted_at soft-delete marker. By default, comments with deleted_at set
 * are omitted. If includeDeleted=true is provided, the implementation MUST
 * check permissions and only return deleted comments to authorized callers
 * (moderators/admins); unauthenticated or unauthorized includeDeleted requests
 * must be rejected with 403 Forbidden.
 *
 * Relationship to underlying database entities: This operation directly
 * references fields on community_portal_comments: id, post_id,
 * parent_comment_id, author_user_id, body, created_at, updated_at, deleted_at.
 * It may include contextual post identifiers (post_id) and, where helpful, the
 * community context via post->community_id joins, but must not assume fields
 * outside the defined Prisma models.
 *
 * Validation rules and business logic:
 *
 * - UserId path parameter must be a UUID referring to community_portal_users.id.
 * - Request body may include pagination parameters (limit, offset), optional
 *   postId filter to narrow comments to a specific post, a flag to request only
 *   top-level comments (parent_comment_id IS NULL) or only replies, and
 *   includeDeleted boolean. By default includeDeleted=false and deleted
 *   comments MUST be excluded.
 *
 * Related API operations:
 *
 * - GET /posts/{postId}/comments (comments by post)
 * - GET /comments/{commentId} (single comment detail)
 *
 * Expected behavior and error handling:
 *
 * - Returns a paginated list of comment summaries. If the userId does not exist,
 *   return 404 Not Found. If request parameters are invalid, return 400 Bad
 *   Request. If includeDeleted is requested without adequate permission, return
 *   403 Forbidden.
 *
 * @param props.connection
 * @param props.userId Unique identifier (UUID) of the target user whose
 *   comments are being requested
 * @param props.body Search, filter and pagination parameters for retrieving a
 *   user's comments
 * @path /communityPortal/users/:userId/comments
 * @accessor api.functional.communityPortal.users.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target user whose comments are being
     * requested
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Search, filter and pagination parameters for retrieving a user's
     * comments
     */
    body: ICommunityPortalComment.IRequest;
  };
  export type Body = ICommunityPortalComment.IRequest;
  export type Response = IPageICommunityPortalComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPortal/users/:userId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPortal/users/${encodeURIComponent(props.userId ?? "null")}/comments`;
  export const random = (): IPageICommunityPortalComment.ISummary =>
    typia.random<IPageICommunityPortalComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
