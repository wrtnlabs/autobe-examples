import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalSubscription } from "../../../../../structures/ICommunityPortalSubscription";

/**
 * Subscribe the authenticated member to a community.
 *
 * Create a subscription that links the authenticated member to the target
 * community.
 *
 * This operation creates a community_portal_subscriptions record with
 * created_at/updated_at timestamps and deleted_at = NULL. If a soft-deleted
 * subscription exists for the same (user_id, community_id) the service MAY
 * reactivate it (clear deleted_at) rather than inserting a duplicate, according
 * to platform policy. The service MUST validate the target community exists and
 * enforce community visibility and membership rules (e.g., private community
 * invitations or approval workflows).
 *
 * Security and permissions: Requires an authenticated member. The service
 * verifies the caller is permitted to subscribe to the community; for private
 * communities additional checks apply. On success the created subscription (or
 * reactivated subscription) is returned with minimal related community data for
 * UI consumption.
 *
 * Validation and errors: Path parameter communityId MUST be a UUID referencing
 * an existing community_portal_communities.id. Return 401 Unauthorized when the
 * caller is unauthenticated, 403 Forbidden when the caller is not permitted to
 * subscribe, 404 Not Found when the communityId does not exist, 409 Conflict
 * when an active subscription already exists and duplicates are disallowed, and
 * 400 Bad Request for invalid inputs.
 *
 * @param props.connection
 * @param props.communityId UUID of the community to subscribe to
 * @param props.body Subscription creation request. Minimal payload because the
 *   authenticated user's id is derived from the auth context. Use this to
 *   provide optional client preferences (e.g., notification preferences).
 * @path /communityPortal/member/communities/:communityId/subscriptions
 * @accessor api.functional.communityPortal.member.communities.subscriptions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the community to subscribe to */
    communityId: string & tags.Format<"uuid">;

    /**
     * Subscription creation request. Minimal payload because the
     * authenticated user's id is derived from the auth context. Use this to
     * provide optional client preferences (e.g., notification
     * preferences).
     */
    body: ICommunityPortalSubscription.ICreate;
  };
  export type Body = ICommunityPortalSubscription.ICreate;
  export type Response = ICommunityPortalSubscription;

  export const METADATA = {
    method: "POST",
    path: "/communityPortal/member/communities/:communityId/subscriptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPortal/member/communities/${encodeURIComponent(props.communityId ?? "null")}/subscriptions`;
  export const random = (): ICommunityPortalSubscription =>
    typia.random<ICommunityPortalSubscription>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
