import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalReport } from "../../../../structures/ICommunityPortalReport";
import { IPageICommunityPortalReport } from "../../../../structures/IPageICommunityPortalReport";

/**
 * Create a new moderation report (community_portal_reports).
 *
 * Create a new report record in the community_portal_reports table.
 *
 * Purpose and overview: Allows a caller to file a report about a community,
 * post, or comment. Client-provided fields MUST be limited to: one or more
 * target references (community_id, post_id, comment_id — at least one
 * required), reason_code (controlled vocabulary), optional reason_text,
 * optional is_urgent flag, optional severity, and optional
 * reporter_contact_email. The server MUST validate targets exist and must set
 * `created_at` and initial `status` (e.g., 'OPEN'). The server MUST NOT accept
 * or honor client-supplied server-managed fields such as `created_at`,
 * `reviewed_at`, `closed_at`, `status`, `assigned_moderator_id`, or
 * `resolution_notes`.
 *
 * Security and permissions: Requires an authenticated member context for
 * authenticated reports. If anonymous reports are supported, the server SHOULD
 * expose a separate public endpoint or accept null reporter_user_id but MUST
 * enforce stricter anti-abuse controls (rate-limiting, CAPTCHA). For
 * authenticated callers, the service MUST set `reporter_user_id` to the
 * authenticated principal and ignore any client-supplied `reporter_user_id` to
 * preserve audit integrity.
 *
 * Validation rules and business logic: The server MUST validate that at least
 * one of community_id, post_id, or comment_id is present and that any provided
 * reference exists (404 if a referenced target does not exist). Validate
 * `reason_code` against the allowed taxonomy. On success, server returns 201
 * Created with the created report record (including server-managed fields). On
 * validation error return 400 with field-level messages; on authentication
 * failure return 401.
 *
 * @param props.connection
 * @param props.body Report creation payload. Allowed client fields:
 *   community_id (nullable), post_id (nullable), comment_id (nullable) — at
 *   least one required; reason_code (string, required); reason_text (string,
 *   optional); is_urgent (boolean, optional); severity (string, optional);
 *   reporter_contact_email (string, optional). The server will derive
 *   reporter_user_id from authenticated caller (if present) and set
 *   server-managed fields.
 * @path /communityPortal/member/reports
 * @accessor api.functional.communityPortal.member.reports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Report creation payload. Allowed client fields: community_id
     * (nullable), post_id (nullable), comment_id (nullable) — at least one
     * required; reason_code (string, required); reason_text (string,
     * optional); is_urgent (boolean, optional); severity (string,
     * optional); reporter_contact_email (string, optional). The server will
     * derive reporter_user_id from authenticated caller (if present) and
     * set server-managed fields.
     */
    body: ICommunityPortalReport.ICreate;
  };
  export type Body = ICommunityPortalReport.ICreate;
  export type Response = ICommunityPortalReport;

  export const METADATA = {
    method: "POST",
    path: "/communityPortal/member/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPortal/member/reports";
  export const random = (): ICommunityPortalReport =>
    typia.random<ICommunityPortalReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of moderation reports
 * (community_portal_reports).
 *
 * Retrieve a filtered, sorted, and paginated list of moderation report records
 * from the community_portal_reports table.
 *
 * Purpose and overview: This operation provides listing capabilities for report
 * records that capture user-submitted complaints about posts, comments, or
 * community issues. Responses contain report metadata used for inbox displays
 * and status tracking: id, reporterUserId (nullable), communityId (nullable),
 * postId (nullable), commentId (nullable), reasonCode, reasonText, status,
 * isUrgent, severity, createdAt, reviewedAt, closedAt. Sensitive fields such as
 * resolutionNotes may be returned only to authorized moderator/admin clients.
 *
 * Security and authorization: Authenticated members may list reports they
 * submitted (reporter_user_id). Moderators/admins require appropriate
 * authorization to list community-scoped or assigned queues; the API accepts
 * the filters but server-side enforcement MUST restrict access. When a caller
 * lacks permission to view private moderator fields, those fields MUST be
 * omitted from the response.
 *
 * Validation and business logic: The API must validate UUID filters and
 * restrict status filter values to the known application vocabulary (OPEN,
 * IN_REVIEW, REQUIRES_ACTION, DISMISSED, CLOSED). Requests with malformed IDs
 * or invalid status values return 400. Unauthorized attempts to query others'
 * reports return 403. Empty result sets return an empty page with pagination
 * metadata.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for report
 *   listing. Filters: reporterUserId (uuid), communityId (uuid), postId (uuid),
 *   commentId (uuid), status (enum), isUrgent (boolean), severity (string),
 *   createdFrom/createdTo (ISO datetime), sort (createdAt|severity), limit,
 *   offset. Note: member-scoped callers may only query their own
 *   reporterUserId; moderator/admin callers can use broader filters and receive
 *   moderator-only fields.
 * @path /communityPortal/member/reports
 * @accessor api.functional.communityPortal.member.reports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for report listing.
     * Filters: reporterUserId (uuid), communityId (uuid), postId (uuid),
     * commentId (uuid), status (enum), isUrgent (boolean), severity
     * (string), createdFrom/createdTo (ISO datetime), sort
     * (createdAt|severity), limit, offset. Note: member-scoped callers may
     * only query their own reporterUserId; moderator/admin callers can use
     * broader filters and receive moderator-only fields.
     */
    body: ICommunityPortalReport.IRequest;
  };
  export type Body = ICommunityPortalReport.IRequest;
  export type Response = IPageICommunityPortalReport.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPortal/member/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPortal/member/reports";
  export const random = (): IPageICommunityPortalReport.ISummary =>
    typia.random<IPageICommunityPortalReport.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a moderation report by ID (community_portal_reports).
 *
 * Retrieve a single moderation report and its metadata from the
 * community_portal_reports table.
 *
 * Purpose and overview: Returns one report record identified by the path
 * parameter `reportId`. The response includes business attributes captured in
 * the Prisma model: reporter_user_id (nullable for anonymous reports),
 * community_id, post_id, comment_id, assigned_moderator_id,
 * closed_by_moderator_id, reason_code, reason_text, status, is_urgent,
 * severity, reporter_contact_email, created_at, reviewed_at, closed_at, and
 * resolution_notes. When related references are null (e.g., referenced user or
 * content deleted), the corresponding fields MUST be null in the response.
 *
 * Security and permissions: Requires an authenticated member context.
 * Authorization rules (enforced by the service) MUST be implemented as follows:
 * the reporting user may view their own report; assigned moderators or
 * moderators of the referenced community may view reports for triage; platform
 * staff/admins may view any report. Field-level visibility:
 * `reporter_contact_email` and `resolution_notes` are sensitive and MUST only
 * be returned to authorized viewers (author, assigned moderator, admin) — the
 * service MUST enforce this.
 *
 * Validation rules and business logic: Validate `reportId` is a UUID; if
 * malformed return 400. If report not found return 404. If the caller is not
 * authenticated return 401; if authenticated but not authorized to view this
 * report return 403. Server errors return 500. Do not expose
 * internal/moderator-only fields to unauthorized callers.
 *
 * @param props.connection
 * @param props.reportId UUID of the target report (community_portal_reports.id)
 * @path /communityPortal/member/reports/:reportId
 * @accessor api.functional.communityPortal.member.reports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the target report (community_portal_reports.id) */
    reportId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPortalReport;

  export const METADATA = {
    method: "GET",
    path: "/communityPortal/member/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPortal/member/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): ICommunityPortalReport =>
    typia.random<ICommunityPortalReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
