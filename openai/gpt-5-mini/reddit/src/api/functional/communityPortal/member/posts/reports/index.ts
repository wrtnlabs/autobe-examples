import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalReport } from "../../../../../structures/ICommunityPortalReport";

/**
 * Create a report for a post (community_portal_reports).
 *
 * Create a moderation report for a post and persist it to
 * community_portal_reports.
 *
 * Purpose and overview: This endpoint allows an authenticated member to report
 * a post. The API inserts a record into community_portal_reports linking to the
 * target post via post_id. Reports are intended to be auditable evidence and
 * should remain even if the referenced post or users are later removed.
 *
 * Security and permissions: Caller must be authenticated as a member. The
 * server sets reporter_user_id from the authenticated context. The
 * implementation must not expose sensitive fields (password_hash, secrets) in
 * the response. Access control ensures the reporter has visibility to the
 * target post.
 *
 * Validation and behavior:
 *
 * - Validate path parameter postId is a UUID and that the post exists; otherwise
 *   respond 404.
 * - Request body MUST include reason_code (controlled vocabulary enforced at
 *   application level). Optional fields: reason_text, is_urgent (boolean),
 *   severity, reporter_contact_email (email format validated if provided).
 * - On success return HTTP 201 Created with the created report resource.
 *
 * Errors: 400 Bad Request (validation), 401 Unauthorized (not authenticated),
 * 404 Not Found (post not found), 409 Conflict (duplicate-report policy if
 * implemented).
 *
 * @param props.connection
 * @param props.postId Target post's ID (community_portal_posts.id)
 * @param props.body Report creation payload: required: reason_code. Optional:
 *   reason_text, is_urgent (boolean), severity, reporter_contact_email. The
 *   server sets reporter_user_id from the authenticated member.
 * @path /communityPortal/member/posts/:postId/reports
 * @accessor api.functional.communityPortal.member.posts.reports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target post's ID (community_portal_posts.id) */
    postId: string & tags.Format<"uuid">;

    /**
     * Report creation payload: required: reason_code. Optional:
     * reason_text, is_urgent (boolean), severity, reporter_contact_email.
     * The server sets reporter_user_id from the authenticated member.
     */
    body: ICommunityPortalReport.ICreate;
  };
  export type Body = ICommunityPortalReport.ICreate;
  export type Response = ICommunityPortalReport;

  export const METADATA = {
    method: "POST",
    path: "/communityPortal/member/posts/:postId/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPortal/member/posts/${encodeURIComponent(props.postId ?? "null")}/reports`;
  export const random = (): ICommunityPortalReport =>
    typia.random<ICommunityPortalReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
