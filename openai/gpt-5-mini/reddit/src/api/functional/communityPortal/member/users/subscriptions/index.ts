import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageICommunityPortalSubscription } from "../../../../../structures/IPageICommunityPortalSubscription";

/**
 * List subscriptions for a user (paginated).
 *
 * Return a paginated list of the specified user's community subscriptions.
 *
 * This operation retrieves subscription summaries sourced from the
 * community_portal_subscriptions Prisma model and includes minimal related
 * community fields (id, slug, name, visibility) to aid UI presentation. By
 * default only active subscriptions (community_portal_subscriptions.deleted_at
 * IS NULL) are returned; archived/revoked subscriptions may be included only
 * when the caller is authorized and supplies the includeArchived query flag.
 *
 * Security and permissions: Requires an authenticated member context. By
 * default a user may retrieve only their own subscriptions; platform policy may
 * allow moderators/admins to fetch other users' subscriptions (authorization
 * enforced in the service layer). The implementation must enforce community
 * visibility rules so that private communities appear only when the requester
 * has access.
 *
 * Validation and errors: Path parameter userId MUST be a UUID corresponding to
 * an existing community_portal_users.id. Query-based pagination parameters
 * (limit, offset) and optional includeArchived are supported by the service
 * (documented as query params), but only the path parameter is required at the
 * API surface. Return 401 for unauthenticated requests, 403 if the caller is
 * not authorized to view the target user's subscriptions, 404 if the user does
 * not exist or no visible subscriptions are found for the caller, and 400 for
 * malformed parameters.
 *
 * @param props.connection
 * @param props.userId UUID of the user whose subscriptions are requested
 * @path /communityPortal/member/users/:userId/subscriptions
 * @accessor api.functional.communityPortal.member.users.subscriptions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** UUID of the user whose subscriptions are requested */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IPageICommunityPortalSubscription.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/communityPortal/member/users/:userId/subscriptions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPortal/member/users/${encodeURIComponent(props.userId ?? "null")}/subscriptions`;
  export const random = (): IPageICommunityPortalSubscription.ISummary =>
    typia.random<IPageICommunityPortalSubscription.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
