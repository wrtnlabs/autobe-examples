import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalReport } from "../../../../structures/ICommunityPortalReport";

/**
 * Update an existing moderation report (community_portal_reports).
 *
 * Update an existing moderation report in the community_portal_reports table.
 *
 * This operation updates only mutable fields on an existing report. It accepts
 * any subset of the updatable properties defined by the Prisma model (for
 * example: status, assigned_moderator_id, closed_by_moderator_id,
 * resolution_notes, reviewed_at, closed_at, is_urgent, severity,
 * reporter_contact_email). The endpoint does not allow changing immutable audit
 * fields such as id or created_at. Implementations MUST validate that supplied
 * UUIDs exist in their corresponding tables and that state transitions are
 * permitted by workflow rules.
 *
 * Security and permissions: Only authenticated moderators may call this
 * endpoint. The application MUST perform authorization checks (for example,
 * moderator scoped to the relevant community or elevated global moderator
 * privileges) and return 403 Forbidden for unauthorized attempts. All
 * assignment and closure changes MUST be recorded with actor identity in audit
 * logs.
 *
 * Validation and business logic:
 *
 * - Allowed status values and reason_code vocabulary are enforced by application
 *   logic; invalid values must result in 400 Bad Request.
 * - Status transitions should follow configured workflow rules (e.g., OPEN ->
 *   IN_REVIEW -> REQUIRES_ACTION -> CLOSED); invalid transitions must be
 *   rejected.
 * - Timestamps (reviewed_at, closed_at) must be ISO 8601 UTC and validated
 *   server-side.
 * - Any provided moderator IDs must refer to active moderator assignments;
 *   otherwise return 400.
 *
 * Related operations:
 *
 * - GET /reports/{reportId} to fetch report details.
 * - DELETE /reports/{reportId} to remove a report (hard delete).
 *
 * @param props.connection
 * @param props.reportId Target report's ID
 * @param props.body Partial report update payload. Only fields defined on the
 *   community_portal_reports model are accepted. Example updatable fields:
 *   status, assigned_moderator_id, closed_by_moderator_id, resolution_notes,
 *   reviewed_at, closed_at, is_urgent, severity, reporter_contact_email.
 * @path /communityPortal/moderator/reports/:reportId
 * @accessor api.functional.communityPortal.moderator.reports.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target report's ID */
    reportId: string & tags.Format<"uuid">;

    /**
     * Partial report update payload. Only fields defined on the
     * community_portal_reports model are accepted. Example updatable
     * fields: status, assigned_moderator_id, closed_by_moderator_id,
     * resolution_notes, reviewed_at, closed_at, is_urgent, severity,
     * reporter_contact_email.
     */
    body: ICommunityPortalReport.IUpdate;
  };
  export type Body = ICommunityPortalReport.IUpdate;
  export type Response = ICommunityPortalReport;

  export const METADATA = {
    method: "PUT",
    path: "/communityPortal/moderator/reports/:reportId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPortal/moderator/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): ICommunityPortalReport =>
    typia.random<ICommunityPortalReport>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
