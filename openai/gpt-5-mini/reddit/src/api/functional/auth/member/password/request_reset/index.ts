import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalMember } from "../../../../../structures/ICommunityPortalMember";

/**
 * Initiate a password reset flow by email for a member (no direct DB mutation
 * until reset is applied).
 *
 * Purpose and functionality: This endpoint initiates a password reset flow for
 * a member by accepting an email address that maps to
 * community_portal_users.email. The server generates a single-use reset
 * artifact (token) and sends it to the provided address. No persistent changes
 * to community_portal_users are made until the reset is completed.
 *
 * Implementation details and required fields: The client provides the email
 * (community_portal_users.email). The server looks up the user and, if found,
 * issues a time-limited reset token sent to that address. For privacy, the
 * endpoint returns a generic confirmation message regardless of whether the
 * email exists to avoid account enumeration.
 *
 * Role-specific integration and business context: This is a public endpoint
 * used when members forget credentials. The reset token allows the user to call
 * a subsequent changePassword operation or a token-based password update
 * endpoint. The implementation should reference community_portal_users.email
 * and community_portal_users.id for token binding.
 *
 * Security considerations within schema constraints: Always treat this flow as
 * sensitive: send tokens only to the verified email address
 * (community_portal_users.email) and limit token lifetime. Do not leak whether
 * the email exists in community_portal_users; return a generic response
 * message.
 *
 * Related operations and workflow integration: This operation pairs with a
 * password-apply operation (changePassword) that consumes the reset token to
 * update community_portal_users.password_hash. It references the
 * community_portal_users table for lookup and token binding.
 *
 * @param props.connection
 * @param props.body Password reset request containing the target email address.
 * @path /auth/member/password/request-reset
 * @accessor api.functional.auth.member.password.request_reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Password reset request containing the target email address. */
    body: ICommunityPortalMember.IRequestPasswordReset;
  };
  export type Body = ICommunityPortalMember.IRequestPasswordReset;
  export type Response = ICommunityPortalMember.IPasswordResetRequested;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/password/request-reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/request-reset";
  export const random = (): ICommunityPortalMember.IPasswordResetRequested =>
    typia.random<ICommunityPortalMember.IPasswordResetRequested>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
