import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalMember } from "../../../../../structures/ICommunityPortalMember";

/**
 * Set a new password for a member either via reset token or authenticated
 * current-password flow; updates community_portal_users.password_hash.
 *
 * Purpose and functionality: This endpoint sets a new password for a member by
 * updating community_portal_users.password_hash for the targeted user. It
 * accepts either an authenticated member session or a valid reset token issued
 * by the requestPasswordReset flow and updates the stored password hash
 * accordingly.
 *
 * Implementation details and required fields: The request MUST include either
 * the reset token and desired new password (token flow) or the currentPassword
 * and newPassword when the user is authenticated (session flow). On validation,
 * the server computes a new password hash and updates
 * community_portal_users.password_hash for the corresponding
 * community_portal_users.id.
 *
 * Role-specific integration and business context: Changing a password is a
 * security-sensitive operation that ties directly to the community_portal_users
 * table. If the authenticated (authorizationRole="member") path is used, the
 * server should verify the provided current password against
 * community_portal_users.password_hash before allowing an update. If the
 * reset-token path is used, verify the token is valid and bound to
 * community_portal_users.id.
 *
 * Security considerations within schema constraints: Never accept pre-hashed
 * passwords from clients. Use secure hashing and rotate any refresh tokens on
 * password change. Record an audit event tied to community_portal_users.id when
 * the password is changed.
 *
 * Related operations and workflow integration: This operation is used after
 * requestPasswordReset or as an authenticated change-password endpoint. It
 * updates community_portal_users.password_hash and may trigger session
 * invalidation for active tokens.
 *
 * @param props.connection
 * @param props.body Password change payload: either { resetToken, newPassword }
 *   or { currentPassword, newPassword } depending on flow.
 * @path /auth/member/password/change
 * @accessor api.functional.auth.member.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /**
     * Password change payload: either { resetToken, newPassword } or {
     * currentPassword, newPassword } depending on flow.
     */
    body: ICommunityPortalMember.IChangePassword;
  };
  export type Body = ICommunityPortalMember.IChangePassword;
  export type Response = ICommunityPortalMember.IChangePasswordResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/change";
  export const random = (): ICommunityPortalMember.IChangePasswordResult =>
    typia.random<ICommunityPortalMember.IChangePasswordResult>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
