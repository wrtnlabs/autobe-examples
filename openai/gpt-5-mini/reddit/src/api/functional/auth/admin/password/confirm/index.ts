import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalAdmin } from "../../../../../structures/ICommunityPortalAdmin";

/**
 * Confirm admin password reset and set new password (relates to
 * community_portal_users.password_hash).
 *
 * Purpose and overview: This endpoint finalizes a password reset by accepting a
 * one-time reset token and a new password, validating the token, and updating
 * community_portal_users.password_hash for the referenced user. It ensures the
 * token maps to a valid community_portal_users.id before performing the
 * update.
 *
 * Implementation details and field usage: The request payload includes the
 * reset token and the desired new password. The server validates the token,
 * resolves it to community_portal_users.id, and replaces the stored
 * community_portal_users.password_hash with a secure hash of the new password.
 * The operation updates community_portal_users.updated_at for auditability.
 *
 * Role-specific integration and business context: This operation is typically
 * used when an admin user cannot authenticate and has used POST
 * /auth/admin/password/reset to request assistance. After successfully changing
 * the password, the user may be redirected to POST /auth/admin/login. If the
 * user also has a community_portal_admins record, the system may optionally
 * re-evaluate community_portal_admins.is_active as part of post-reset checks.
 *
 * Security considerations: Validate the reset token for expiry and single-use
 * semantics. After a successful reset, revoke other active refresh tokens for
 * that user to prevent session fixation. Record the password change event for
 * audit referencing community_portal_users.id and the timestamp in
 * community_portal_users.updated_at.
 *
 * Related operations and workflow: Token issuance occurs in POST
 * /auth/admin/password/reset; after confirmation clients authenticate via POST
 * /auth/admin/login. For privileged accounts, consider requiring
 * reauthentication or MFA after password reset for sensitive admin actions.
 *
 * @param props.connection
 * @param props.body Reset confirm payload containing token and new password.
 * @path /auth/admin/password/confirm
 * @accessor api.functional.auth.admin.password.confirm.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Reset confirm payload containing token and new password. */
    body: ICommunityPortalAdmin.IResetConfirm;
  };
  export type Body = ICommunityPortalAdmin.IResetConfirm;
  export type Response = ICommunityPortalAdmin.IResetConfirmResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/password/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/confirm";
  export const random = (): ICommunityPortalAdmin.IResetConfirmResponse =>
    typia.random<ICommunityPortalAdmin.IResetConfirmResponse>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
