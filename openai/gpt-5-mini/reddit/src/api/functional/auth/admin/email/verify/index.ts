import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalAdmin } from "../../../../../structures/ICommunityPortalAdmin";

/**
 * Verify admin email using token (relates to
 * community_portal_members.is_email_verified and
 * community_portal_users.email).
 *
 * Purpose and overview: This endpoint accepts an email verification token and,
 * when valid, updates community_portal_members.is_email_verified for the linked
 * user record. The operation references community_portal_users.email to locate
 * the account and community_portal_members.user_id/is_email_verified to record
 * verification state.
 *
 * Implementation details and field usage: The request receives a verification
 * token (usually issued at registration) and resolves it to
 * community_portal_users.id. The server then updates the related
 * community_portal_members.is_email_verified to true and sets
 * community_portal_members.updated_at. The verification event may also be
 * recorded in community_portal_users.updated_at for auditing.
 *
 * Role-specific integration and business context: Email verification is
 * required by many flows (e.g., allowing token issuance or gating admin
 * privileges). For admin accounts, callers should be aware that
 * community_portal_admins.is_active may be contingent on verification; the
 * platform can choose to enforce community_portal_members.is_email_verified
 * before enabling admin-scoped tokens.
 *
 * Security considerations: Tokens must be single-use and time-limited. The
 * endpoint should not disclose extraneous account data. Successful verification
 * should be auditable and linked to community_portal_users.id and
 * community_portal_members.user_id. If the account is suspended
 * (community_portal_members.is_suspended), verification may be recorded but
 * should not automatically lift suspension.
 *
 * Related operations and workflow: Tokens are typically issued during POST
 * /auth/admin/join or during user invitation flows. After verification, the
 * client proceeds to authenticate via POST /auth/admin/login to obtain admin
 * tokens.
 *
 * @param props.connection
 * @param props.body Email verification payload containing the verification
 *   token.
 * @path /auth/admin/email/verify
 * @accessor api.functional.auth.admin.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification payload containing the verification token. */
    body: ICommunityPortalAdmin.IVerifyEmail;
  };
  export type Body = ICommunityPortalAdmin.IVerifyEmail;
  export type Response = ICommunityPortalAdmin.IVerifyEmailResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/email/verify";
  export const random = (): ICommunityPortalAdmin.IVerifyEmailResponse =>
    typia.random<ICommunityPortalAdmin.IVerifyEmailResponse>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
