import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalAdmin } from "../../../../../structures/ICommunityPortalAdmin";

/**
 * Request admin password reset (relates to community_portal_users.email).
 *
 * Purpose and overview: This endpoint initiates an admin password reset flow by
 * accepting an email address and, if a matching community_portal_users record
 * exists, creating a one-time reset token and delivering it to
 * community_portal_users.email. The operation references the
 * community_portal_users.email field and the reset flow will ultimately update
 * community_portal_users.password_hash.
 *
 * Implementation details and field usage: The request contains the admin's
 * email (community_portal_users.email). The server generates a single-use reset
 * token tied to the user id and records the issuance for audit. The email sent
 * to the address references community_portal_users.id indirectly via the secure
 * token; the endpoint does not reveal whether the email exists to callers for
 * privacy.
 *
 * Role-specific integration and business context: Although this is an
 * unauthenticated request, it targets admin accounts and therefore tooling that
 * processes the reset must respect admin lifecycle fields such as
 * community_portal_admins.is_active (to decide whether to allow reset flows for
 * deactivated admin accounts). The reset confirmation step will update
 * community_portal_users.password_hash.
 *
 * Security considerations: Do not disclose account existence; return a generic
 * success response regardless of whether a matching email exists. Rate-limit
 * requests to this endpoint to protect against enumeration and abuse. Record
 * reset request events with timestamps and the target community_portal_users.id
 * when applicable.
 *
 * Related operations and workflow: Follow-up endpoint POST
 * /auth/admin/password/confirm completes the reset by accepting the token and
 * new password and updating community_portal_users.password_hash. After reset,
 * clients typically POST /auth/admin/login to authenticate with new
 * credentials.
 *
 * @param props.connection
 * @param props.body Password reset request containing the admin email address.
 * @path /auth/admin/password/reset
 * @accessor api.functional.auth.admin.password.reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Password reset request containing the admin email address. */
    body: ICommunityPortalAdmin.IResetRequest;
  };
  export type Body = ICommunityPortalAdmin.IResetRequest;
  export type Response = ICommunityPortalAdmin.IResetRequestResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/reset";
  export const random = (): ICommunityPortalAdmin.IResetRequestResponse =>
    typia.random<ICommunityPortalAdmin.IResetRequestResponse>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
