import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalAdmin } from "../../../../structures/ICommunityPortalAdmin";
export * as reset from "./reset/index";
export * as confirm from "./confirm/index";

/**
 * Change password for authenticated admin (relates to
 * community_portal_users.password_hash and community_portal_admins.is_active).
 *
 * Purpose and overview: This endpoint allows an authenticated admin
 * (represented by community_portal_users.id and linked community_portal_admins
 * record) to change their password by providing the current password and a new
 * password. The operation updates community_portal_users.password_hash and
 * community_portal_users.updated_at.
 *
 * Implementation details and field usage: The request body contains
 * currentPassword and newPassword. The server validates the current password
 * against community_portal_users.password_hash and, if valid, stores a secure
 * hash of newPassword in community_portal_users.password_hash. Before
 * performing the change, the server may verify the admin has an active
 * community_portal_admins entry (community_portal_admins.is_active) to ensure
 * only active admins perform this operation.
 *
 * Role-specific integration and business context: This endpoint requires an
 * authenticated admin context; the controller must verify the bearer token maps
 * to a community_portal_users.id that has an associated community_portal_admins
 * record. The change updates the user's credential record and is auditable via
 * community_portal_users.updated_at.
 *
 * Security considerations: Require the current password to mitigate token theft
 * scenarios. Upon successful change, rotate or revoke refresh tokens and log
 * the event with reference to community_portal_admins.user_id. Enforce password
 * strength rules and prevent reuse of recent passwords if the platform enforces
 * such history.
 *
 * Related operations and workflow: This operation complements the reset flows
 * (POST /auth/admin/password/reset and POST /auth/admin/password/confirm).
 * After changing the password, the client should reauthenticate via POST
 * /auth/admin/login if tokens were revoked.
 *
 * @param props.connection
 * @param props.body Payload with currentPassword and newPassword for
 *   authenticated admin.
 * @path /auth/admin/password
 * @accessor api.functional.auth.admin.password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Payload with currentPassword and newPassword for authenticated admin. */
    body: ICommunityPortalAdmin.IChangePassword;
  };
  export type Body = ICommunityPortalAdmin.IChangePassword;
  export type Response = ICommunityPortalAdmin.IChangePasswordResponse;

  export const METADATA = {
    method: "PUT",
    path: "/auth/admin/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password";
  export const random = (): ICommunityPortalAdmin.IChangePasswordResponse =>
    typia.random<ICommunityPortalAdmin.IChangePasswordResponse>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
