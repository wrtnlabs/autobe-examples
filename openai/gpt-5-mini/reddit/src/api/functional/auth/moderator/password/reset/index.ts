import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalModerator } from "../../../../../structures/ICommunityPortalModerator";

/**
 * Complete password reset and update stored password hash.
 *
 * Purpose and overview: Finalize a password reset for a moderator by consuming
 * a time-limited token and setting a new password hash in
 * community_portal_users.password_hash. This operation ensures the account can
 * be recovered securely and that the reset is auditable against the user id.
 *
 * Implementation details using confirmed schema fields: Request payload SHOULD
 * include the reset token and the new password. The server validates the token,
 * locates the community_portal_users row, computes a secure hash for the
 * provided password, and updates community_portal_users.password_hash. The
 * response confirms completion without returning sensitive data.
 *
 * Role-specific integration and business context: This operation completes the
 * account recovery flow for moderators. After a successful reset, clients
 * should call login to obtain fresh tokens. Implementations should also
 * invalidate existing refresh tokens for the user to prevent token reuse after
 * a password change.
 *
 * Security considerations constrained by schema: Never return the password_hash
 * in responses. Ensure token consumption is single-use and that
 * community_portal_users.deleted_at and community_portal_members.is_suspended
 * are consideredâ€”deny resets for deleted accounts or log and surface
 * appropriate guidance.
 *
 * Related operations and workflow integration: Preceded by requestPasswordReset
 * and typically followed by login and refresh operations.
 *
 * @param props.connection
 * @param props.body Reset token and new password to update the stored password
 *   hash.
 * @path /auth/moderator/password/reset
 * @accessor api.functional.auth.moderator.password.reset.resetPassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPassword(
  connection: IConnection,
  props: resetPassword.Props,
): Promise<resetPassword.Response> {
  return true === connection.simulate
    ? resetPassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPassword.METADATA,
          path: resetPassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resetPassword {
  export type Props = {
    /** Reset token and new password to update the stored password hash. */
    body: ICommunityPortalModerator.IResetPassword;
  };
  export type Body = ICommunityPortalModerator.IResetPassword;
  export type Response = ICommunityPortalModerator.IResetPasswordResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/password/reset";
  export const random = (): ICommunityPortalModerator.IResetPasswordResponse =>
    typia.random<ICommunityPortalModerator.IResetPasswordResponse>();
  export const simulate = (
    connection: IConnection,
    props: resetPassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
