import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalModerator } from "../../../../../structures/ICommunityPortalModerator";

/**
 * Authenticated moderator changes their password.
 *
 * Purpose and overview: Enable an authenticated moderator to change their
 * password. The operation targets community_portal_users.password_hash for the
 * calling user and requires current password verification before applying the
 * new hash. This is a security-sensitive user operation scoped to authenticated
 * moderators.
 *
 * Implementation details using confirmed schema fields: Request payload SHOULD
 * include the current password and the new password. The server validates the
 * current password against community_portal_users.password_hash, computes the
 * new hash, and updates community_portal_users.password_hash. The endpoint
 * should also record an audit event tied to community_portal_users.id.
 *
 * Role-specific integration and business context: This endpoint is restricted
 * to authenticated moderators (authorizationRole="moderator"). It supports
 * user-initiated credential rotation and should invalidate existing refresh
 * tokens after a successful change to protect sessions.
 *
 * Security considerations constrained by schema: Do not expose
 * community_portal_users.password_hash. Require reauthentication or MFA for
 * high-risk changes if platform policy dictates. Log the password change event
 * with user id and timestamp for audit (linked to community_portal_users.id).
 *
 * Related operations and workflow integration: After changePassword completes,
 * clients may need to reauthenticate (login) or use refreshed tokens depending
 * on token invalidation policy.
 *
 * @param props.connection
 * @param props.body Current password and new password for the authenticated
 *   moderator.
 * @path /auth/moderator/password/change
 * @accessor api.functional.auth.moderator.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Current password and new password for the authenticated moderator. */
    body: ICommunityPortalModerator.IChangePassword;
  };
  export type Body = ICommunityPortalModerator.IChangePassword;
  export type Response = ICommunityPortalModerator.IChangePasswordResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/password/change";
  export const random = (): ICommunityPortalModerator.IChangePasswordResponse =>
    typia.random<ICommunityPortalModerator.IChangePasswordResponse>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
