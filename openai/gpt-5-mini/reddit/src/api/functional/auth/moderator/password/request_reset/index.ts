import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalModerator } from "../../../../../structures/ICommunityPortalModerator";

/**
 * Request password reset email for a moderator account.
 *
 * Purpose and overview: Initiate a password reset process for a moderator
 * account. The endpoint accepts an email address (community_portal_users.email)
 * and, if a matching account exists, sends a one-time password reset token to
 * that address. The response is a generic acknowledgement to avoid account
 * enumeration.
 *
 * Implementation details using confirmed schema fields: The request body SHOULD
 * include the email addressing which the reset is requested. The implementation
 * locates the community_portal_users row by email and generates a time-limited
 * token. The token exchange to set a new password is performed in
 * resetPassword. The operation does not return user-specific details in order
 * to preserve privacy.
 *
 * Role-specific integration and business context: This operation is
 * public-facing and supports moderator account recovery. Because
 * community_portal_users.email is unique per schema, the system can reliably
 * generate and send a reset token when appropriate but must not disclose
 * account presence in responses.
 *
 * Security considerations constrained by schema: Always respond with a neutral
 * acknowledgment regardless of whether an account exists for the supplied
 * email. Ensure the reset token workflow ultimately results in replacing the
 * stored community_portal_users.password_hash and log reset events against the
 * user id when applicable.
 *
 * Related operations and workflow integration: Sequence: requestPasswordReset
 * -> resetPassword. After a successful reset, the user should be able to login
 * and obtain tokens.
 *
 * @param props.connection
 * @param props.body Email payload to request a password reset link or token.
 * @path /auth/moderator/password/request-reset
 * @accessor api.functional.auth.moderator.password.request_reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Email payload to request a password reset link or token. */
    body: ICommunityPortalModerator.IRequestPasswordReset;
  };
  export type Body = ICommunityPortalModerator.IRequestPasswordReset;
  export type Response =
    ICommunityPortalModerator.IRequestPasswordResetResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/password/request-reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/password/request-reset";
  export const random =
    (): ICommunityPortalModerator.IRequestPasswordResetResponse =>
      typia.random<ICommunityPortalModerator.IRequestPasswordResetResponse>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
