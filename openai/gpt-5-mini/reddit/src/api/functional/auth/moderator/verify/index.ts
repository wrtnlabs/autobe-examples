import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPortalModerator } from "../../../../structures/ICommunityPortalModerator";

/**
 * Verify moderator email and activate membership record.
 *
 * Purpose and overview: Confirm a moderator's email address and flip
 * community_portal_members.is_email_verified to true for the associated user.
 * This operation accepts a verification token tied to a
 * community_portal_users.id and updates the membership record's
 * is_email_verified and member_since as appropriate.
 *
 * Implementation details using confirmed schema fields: The request payload
 * SHOULD include a one-time verification token and the target user identifier
 * (or token-bound lookup). Once validated, the implementation MUST set
 * community_portal_members.is_email_verified=true and record the current
 * timestamp in member_since if not already set. The response indicates success
 * and may optionally return a lightweight user summary (id, username).
 *
 * Role-specific integration and business context: Email verification is
 * required before granting full moderator responsibilities in many workflows;
 * the UI should surface guidance if verification is pending. The existence of
 * community_portal_members.is_suspended should be consideredâ€”verification does
 * not override suspension.
 *
 * Security considerations constrained by schema: Verification tokens must be
 * single-use and time-limited. Do not expose the
 * community_portal_users.password_hash. If community_portal_users.deleted_at is
 * set, reject verification attempts and advise account recreation.
 *
 * Related operations and workflow integration: Typical sequence: join -> verify
 * (this operation) -> login -> refresh. After verification the client may call
 * login to obtain tokens.
 *
 * @param props.connection
 * @param props.body Payload containing the verification token (and optionally
 *   user id) to confirm email.
 * @path /auth/moderator/verify
 * @accessor api.functional.auth.moderator.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /**
     * Payload containing the verification token (and optionally user id) to
     * confirm email.
     */
    body: ICommunityPortalModerator.IVerifyEmailRequest;
  };
  export type Body = ICommunityPortalModerator.IVerifyEmailRequest;
  export type Response = ICommunityPortalModerator.IVerifyEmailResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/verify";
  export const random = (): ICommunityPortalModerator.IVerifyEmailResponse =>
    typia.random<ICommunityPortalModerator.IVerifyEmailResponse>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
