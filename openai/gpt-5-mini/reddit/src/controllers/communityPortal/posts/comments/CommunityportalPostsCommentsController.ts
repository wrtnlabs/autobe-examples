import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPortalPostsPostIdComments } from "../../../../providers/patchCommunityPortalPostsPostIdComments";
import { getCommunityPortalPostsPostIdCommentsCommentId } from "../../../../providers/getCommunityPortalPostsPostIdCommentsCommentId";

import { IPageICommunityPortalComment } from "../../../../api/structures/IPageICommunityPortalComment";
import { ICommunityPortalComment } from "../../../../api/structures/ICommunityPortalComment";

@Controller("/communityPortal/posts/:postId/comments")
export class CommunityportalPostsCommentsController {
  /**
   * List comments for a post with pagination and optional parent-thread
   * filtering (community_portal_comments).
   *
   * Purpose and overview:
   *
   * Return a paginated list of comments associated with a single post. This
   * operation queries the community_portal_comments Prisma model for comments
   * with the given post_id, excluding comments whose deleted_at is set. It
   * supports retrieving top-level comments or replies by accepting an optional
   * parentCommentId filter in the request body.
   *
   * Security considerations and permissions:
   *
   * Comments for posts in public communities are readable by unauthenticated
   * callers. For posts in private communities, the service MUST verify the
   * requesting user's access and return 403 Forbidden for unauthorized
   * requests. The operation must respect post status (e.g., hidden/removed) and
   * not return comments for posts that are not visible to the caller.
   *
   * Relationship to database entities:
   *
   * This operation is directly associated with community_portal_comments.
   * Returned summaries should include id, author_user_id (nullable if user was
   * deleted), parent_comment_id, body (truncated for summaries where
   * applicable), created_at, and any UI-friendly metadata like reply_count.
   *
   * Validation rules and business logic:
   *
   * - PostId path parameter MUST be a UUID and refer to an existing
   *   community_portal_posts record.
   * - ParentCommentId, if supplied in the request, MUST reference a comment that
   *   belongs to the same post; otherwise return 400 Bad Request.
   * - Deleted comments (deleted_at IS NOT NULL) MUST be excluded from results.
   * - Pagination and sorting parameters MUST be supported in the request body
   *   (limit, offset, sort).
   *
   * Related operations:
   *
   * - To list posts for the parent community use PATCH
   *   /communityPortal/communities/{communityId}/posts.
   * - To cast votes on comments use POST/PUT on
   *   /communityPortal/comments/{commentId}/votes or the votes endpoints
   *   defined elsewhere.
   *
   * Error handling and edge cases:
   *
   * - If the postId does not exist, return 404 Not Found.
   * - If parentCommentId does not belong to the specified post, return 400 Bad
   *   Request.
   * - If the post is not visible to the caller due to privacy or moderation
   *   state, return 403 Forbidden.
   *
   * @param connection
   * @param postId UUID of the target post (community_portal_posts.id)
   * @param body Search, filter and pagination parameters for post comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPortalComment.IRequest,
  ): Promise<IPageICommunityPortalComment.ISummary> {
    try {
      return await patchCommunityPortalPostsPostIdComments({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific comment for a post (community_portal_comments).
   *
   * Purpose and overview: Retrieve a single comment that belongs to a specific
   * post. This endpoint returns the canonical comment record from the
   * community_portal_comments Prisma model. The response includes the comment
   * fields: id, post_id, parent_comment_id (nullable), author_user_id
   * (nullable), body, created_at, updated_at, and deleted_at (nullable).
   *
   * Important behavior and visibility: Only active (non-deleted) comments are
   * returned. Although deleted_at is part of the model and present in the
   * response schema, this endpoint will only return comments where deleted_at
   * == null. If a comment has deleted_at != null the endpoint MUST respond with
   * 404 Not Found to avoid exposing deleted content.
   *
   * Security and permissions: This is a read operation that may be publicly
   * accessible for public communities. For private communities, the caller must
   * be an authorized member/subscriber or otherwise granted access; otherwise
   * return 403 Forbidden. If the implementation enriches the response with
   * author profile details, include only non-sensitive author fields (for
   * example: display_name, avatar_uri). Do NOT include password_hash, email, or
   * other sensitive data.
   *
   * Validation and relationship checks:
   *
   * - Validate postId and commentId are valid UUIDs; return 400 Bad Request for
   *   malformed UUIDs.
   * - Confirm the comment exists and comment.post_id equals the supplied postId;
   *   if not, return 404 Not Found.
   * - If the containing community is private and caller lacks access, return 403
   *   Forbidden.
   *
   * Responses and error handling:
   *
   * - 200 OK: comment payload when found and visible.
   * - 400 Bad Request: invalid UUID format for path parameters.
   * - 403 Forbidden: caller lacks access to the containing community/post
   *   (private community).
   * - 404 Not Found: comment not found, does not belong to the specified post, or
   *   has been soft-deleted (deleted_at != null).
   *
   * @param connection
   * @param postId Target post's unique identifier (UUID). The comment must
   *   belong to this post.
   * @param commentId Target comment's unique identifier (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPortalComment> {
    try {
      return await getCommunityPortalPostsPostIdCommentsCommentId({
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
