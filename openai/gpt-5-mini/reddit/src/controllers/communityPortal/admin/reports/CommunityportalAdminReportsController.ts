import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteCommunityPortalAdminReportsReportId } from "../../../../providers/deleteCommunityPortalAdminReportsReportId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

@Controller("/communityPortal/admin/reports/:reportId")
export class CommunityportalAdminReportsController {
  /**
   * Permanently remove a moderation report (hard delete).
   *
   * Permanently remove the specified moderation report from the
   * community_portal_reports table.
   *
   * This operation performs a hard delete because the Prisma model lacks a
   * soft-delete column for reports. Before deletion the application SHOULD
   * verify that deletion is permitted (no legal hold, retention policy
   * constraints, or required archival). The operation MUST record an audit
   * entry capturing the deletion actor, timestamp, and justification.
   *
   * Security and permissions: Only authorized admins may call this endpoint.
   * The application MUST enforce strict authorization and return 403 Forbidden
   * for unauthorized attempts. Deletion is irreversible and MUST be guarded by
   * policy checks in application logic.
   *
   * Validation and business logic:
   *
   * - Verify the report exists; if not, return 404 Not Found.
   * - If retention or legal hold blocks deletion, return 409 Conflict.
   * - Record an audit entry with actor identity and provided justification
   *   (application-level requirement) before performing the hard delete.
   *
   * Related operations:
   *
   * - PUT /reports/{reportId} to update report state instead of deleting when
   *   preservation is desired.
   *
   * @param connection
   * @param reportId Target report's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPortalAdminReportsReportId({
        admin,
        reportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
