import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPortalCommunities } from "../../../providers/patchCommunityPortalCommunities";
import { getCommunityPortalCommunitiesCommunityId } from "../../../providers/getCommunityPortalCommunitiesCommunityId";

import { IPageICommunityPortalCommunity } from "../../../api/structures/IPageICommunityPortalCommunity";
import { ICommunityPortalCommunity } from "../../../api/structures/ICommunityPortalCommunity";

@Controller("/communityPortal/communities")
export class CommunityportalCommunitiesController {
  /**
   * Search and retrieve a filtered, paginated list of communities.
   *
   * Retrieve a filtered and paginated list of communities from the system. This
   * operation supports name/slug search, visibility filtering, pagination, and
   * sorting. It returns community summary information optimized for list
   * displays (slug, name, short description, is_private, visibility, creator
   * reference and timestamps).
   *
   * Security considerations and permissions: public communities are visible to
   * unauthenticated callers; private communities are only included when the
   * requesting user is authorized to view them (membership, subscription, or
   * explicit access). The endpoint returns only communities with deleted_at set
   * to null (archived records are omitted). When clients request extra detail
   * (e.g., includeModeratorSummary), results may be restricted to authorized
   * callers.
   *
   * Relationship to the Prisma schema: maps to the community_portal_communities
   * model. The slug field is unique and suitable for canonical lookups;
   * creator_user_id is nullable per schema comments and must be handled
   * accordingly in result shaping. Use the provided DB indexes (created_at,
   * visibility, name trigram) to implement performant listing and search.
   *
   * Validation and business logic: validate pagination params (limit, offset),
   * enforce maximum allowed page size, validate sort mode values, and
   * canonicalize slug filters. If a caller supplies an invalid visibility
   * filter or unsupported sort value, return 400 with validation details.
   *
   * Related API operations: GET /communities/{communityId} for detail
   * retrieval. Error behavior: 400 for invalid inputs, 401 when requesting
   * private data without authentication, 500 for server errors.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for community
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPortalCommunity.IRequest,
  ): Promise<IPageICommunityPortalCommunity.ISummary> {
    try {
      return await patchCommunityPortalCommunities({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve community details by ID.
   *
   * Fetch detailed information for a single community identified by its UUID.
   * The response includes canonical fields: id, name, slug, description,
   * is_private, visibility, creator reference (if present), and timestamps. The
   * API handles nullable creator_user_id per schema guidance and returns a
   * normalized representation suitable for community detail pages.
   *
   * Security considerations and user permissions: Public communities are
   * viewable by any caller. Private communities are visible only to authorized
   * members or subscribers; unauthenticated callers will receive a 401 or a 403
   * according to policy. The endpoint excludes archived records (deleted_at not
   * null) from normal results; attempts to access archived communities without
   * elevated privileges should yield 404 to avoid information leakage.
   *
   * Relationship to underlying DB entity: maps directly to
   * community_portal_communities in the Prisma schema. The slug field is
   * suitable for alternate lookups (frontend-friendly); however, this endpoint
   * is specifically by UUID. Validation rules: communityId must be a UUID;
   * return 400 for invalid format.
   *
   * Validation and error handling: 400 for invalid UUID format, 404 when
   * community does not exist or is not visible to caller, 401 for
   * unauthenticated requests to private communities, and 500 for server errors.
   * Related API operations: PATCH /communities for searching and listing
   * communities.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":communityId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPortalCommunity> {
    try {
      return await getCommunityPortalCommunitiesCommunityId({
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
