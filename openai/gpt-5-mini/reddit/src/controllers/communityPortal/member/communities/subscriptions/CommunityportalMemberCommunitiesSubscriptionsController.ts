import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPortalMemberCommunitiesCommunityIdSubscriptions } from "../../../../../providers/postCommunityPortalMemberCommunitiesCommunityIdSubscriptions";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { ICommunityPortalSubscription } from "../../../../../api/structures/ICommunityPortalSubscription";

@Controller("/communityPortal/member/communities/:communityId/subscriptions")
export class CommunityportalMemberCommunitiesSubscriptionsController {
  /**
   * Subscribe the authenticated member to a community.
   *
   * Create a subscription that links the authenticated member to the target
   * community.
   *
   * This operation creates a community_portal_subscriptions record with
   * created_at/updated_at timestamps and deleted_at = NULL. If a soft-deleted
   * subscription exists for the same (user_id, community_id) the service MAY
   * reactivate it (clear deleted_at) rather than inserting a duplicate,
   * according to platform policy. The service MUST validate the target
   * community exists and enforce community visibility and membership rules
   * (e.g., private community invitations or approval workflows).
   *
   * Security and permissions: Requires an authenticated member. The service
   * verifies the caller is permitted to subscribe to the community; for private
   * communities additional checks apply. On success the created subscription
   * (or reactivated subscription) is returned with minimal related community
   * data for UI consumption.
   *
   * Validation and errors: Path parameter communityId MUST be a UUID
   * referencing an existing community_portal_communities.id. Return 401
   * Unauthorized when the caller is unauthenticated, 403 Forbidden when the
   * caller is not permitted to subscribe, 404 Not Found when the communityId
   * does not exist, 409 Conflict when an active subscription already exists and
   * duplicates are disallowed, and 400 Bad Request for invalid inputs.
   *
   * @param connection
   * @param communityId UUID of the community to subscribe to
   * @param body Subscription creation request. Minimal payload because the
   *   authenticated user's id is derived from the auth context. Use this to
   *   provide optional client preferences (e.g., notification preferences).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPortalSubscription.ICreate,
  ): Promise<ICommunityPortalSubscription> {
    try {
      return await postCommunityPortalMemberCommunitiesCommunityIdSubscriptions(
        {
          member,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
