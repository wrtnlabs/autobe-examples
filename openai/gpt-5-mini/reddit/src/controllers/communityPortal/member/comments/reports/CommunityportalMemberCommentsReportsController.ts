import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPortalMemberCommentsCommentIdReports } from "../../../../../providers/postCommunityPortalMemberCommentsCommentIdReports";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { ICommunityPortalReport } from "../../../../../api/structures/ICommunityPortalReport";

@Controller("/communityPortal/member/comments/:commentId/reports")
export class CommunityportalMemberCommentsReportsController {
  /**
   * Create a report for a comment (community_portal_reports).
   *
   * Create a moderation report for a comment and persist it to
   * community_portal_reports.
   *
   * Purpose and overview: This endpoint allows an authenticated member to
   * report a comment. The API inserts a record into community_portal_reports
   * linking to the target comment via comment_id. Reports are intended to be
   * auditable evidence and should remain even if the referenced comment or
   * users are later removed.
   *
   * Security and permissions: Caller must be authenticated as a member. The
   * server sets reporter_user_id from the authenticated context. The
   * implementation must not expose sensitive fields (password_hash, secrets) in
   * the response. Access control ensures the reporter has visibility to the
   * target comment.
   *
   * Validation and behavior:
   *
   * - Validate path parameter commentId is a UUID and that the comment exists;
   *   otherwise respond 404.
   * - Request body MUST include reason_code (controlled vocabulary enforced at
   *   application level). Optional fields: reason_text, is_urgent (boolean),
   *   severity, reporter_contact_email (email format validated if provided).
   * - On success return HTTP 201 Created with the created report resource.
   *
   * Errors: 400 Bad Request (validation), 401 Unauthorized (not authenticated),
   * 404 Not Found (comment not found), 409 Conflict (duplicate-report policy if
   * implemented).
   *
   * @param connection
   * @param commentId Target comment's ID (community_portal_comments.id)
   * @param body Report creation payload: required: reason_code. Optional:
   *   reason_text, is_urgent (boolean), severity, reporter_contact_email. The
   *   server sets reporter_user_id from the authenticated member.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPortalReport.ICreate,
  ): Promise<ICommunityPortalReport> {
    try {
      return await postCommunityPortalMemberCommentsCommentIdReports({
        member,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
