import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPortalMemberSubscriptions } from "../../../../providers/patchCommunityPortalMemberSubscriptions";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { getCommunityPortalMemberSubscriptionsSubscriptionId } from "../../../../providers/getCommunityPortalMemberSubscriptionsSubscriptionId";
import { deleteCommunityPortalMemberSubscriptionsSubscriptionId } from "../../../../providers/deleteCommunityPortalMemberSubscriptionsSubscriptionId";

import { IPageICommunityPortalSubscription } from "../../../../api/structures/IPageICommunityPortalSubscription";
import { ICommunityPortalSubscription } from "../../../../api/structures/ICommunityPortalSubscription";

@Controller("/communityPortal/member/subscriptions")
export class CommunityportalMemberSubscriptionsController {
  /**
   * List subscriptions with filters, sorting, and pagination
   * (community_portal_subscriptions).
   *
   * Purpose and overview: Return a paginated, filterable list of community
   * subscriptions (Prisma model: community_portal_subscriptions). Intended
   * primarily for "My subscriptions" UI but supports admin-scoped queries with
   * appropriate authorization.
   *
   * Security and privacy:
   *
   * - The endpoint requires authentication. By default it returns subscriptions
   *   for the authenticated user only.
   * - If the request includes a userId filter that differs from the authenticated
   *   user's id, the server MUST return 403 Forbidden unless the caller has
   *   admin privileges.
   * - The operation must never leak other users' subscription lists to
   *   unauthorized callers.
   *
   * Filtering, sorting, and pagination:
   *
   * - Filters supported: userId (UUID), communityId (UUID), activeOnly (boolean
   *   to exclude soft-deleted rows).
   * - Sorting: created_at asc/desc.
   * - Pagination: limit (positive integer), offset (non-negative integer).
   * - Implementers may optimize the common case (authenticated user's
   *   subscriptions) using indexes on user_id and community_id.
   *
   * Validation and errors:
   *
   * - 400 Bad Request: invalid UUIDs, negative offset, non-positive limit
   * - 401 Unauthorized: unauthenticated request
   * - 403 Forbidden: requesting another user's subscriptions without admin
   *   privileges
   * - 500 Internal Server Error: unexpected failures
   *
   * Response behavior: Return a paginated container: { total: number, limit:
   * number, offset: number, data: [ { id, user_id, community_id, created_at } ]
   * }
   *
   * @param connection
   * @param body Search and pagination parameters for subscription listing
   *   (filters: userId, communityId, activeOnly; pagination: limit, offset;
   *   sort: created_at asc/desc)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPortalSubscription.IRequest,
  ): Promise<IPageICommunityPortalSubscription.ISummary> {
    try {
      return await patchCommunityPortalMemberSubscriptions({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a subscription by ID.
   *
   * Purpose and overview: Return a subscription entry from the
   * community_portal_subscriptions table by its UUID identifier. The response
   * includes the subscription's id, user_id, community_id, created_at,
   * updated_at, and deleted_at so the authenticated owner can determine active
   * vs revoked status.
   *
   * Security and permissions: Requires an authenticated member. The service
   * MUST verify the requesting member is the owner of the subscription (match
   * on user_id) before returning the resource to avoid exposing other users'
   * subscriptions. If not authorized, return 403 Forbidden or 404 per policy.
   *
   * Relationship to DB entities: Operates on the Prisma model
   * community_portal_subscriptions. The response DTO corresponds to
   * ICommunityPortalSubscription and reflects the model attributes.
   *
   * Validation and business rules: Path parameter subscriptionId must be a
   * UUID. If the subscription does not exist return 404 Not Found. If the
   * subscription exists but is soft-deleted, this endpoint returns the record
   * including deleted_at for the owner to allow audit; product policy may
   * choose to hide revoked subscriptions (in which case return 404) â€” be
   * explicit in implementation.
   *
   * @param connection
   * @param subscriptionId Unique identifier of the target subscription (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":subscriptionId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPortalSubscription> {
    try {
      return await getCommunityPortalMemberSubscriptionsSubscriptionId({
        member,
        subscriptionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Revoke (soft-delete) a subscription.
   *
   * Purpose and overview: Mark a subscription as revoked by updating its
   * deleted_at timestamp. This preserves the subscription record in the
   * community_portal_subscriptions table for auditing and potential recovery.
   *
   * Security and permissions: Requires an authenticated member. The service
   * MUST verify the requesting member is the owner of the subscription
   * (user_id) before revoking it. This endpoint is for self-service
   * revocation.
   *
   * Behavior and business rules: Path parameter subscriptionId must be a UUID.
   * If the subscription is already soft-deleted (deleted_at non-null) the
   * endpoint should be idempotent and return 204 No Content. If the
   * subscription is not found, return 404 Not Found. On successful revoke,
   * return 204 No Content. IMPORTANT: because the model enforces
   *
   * @param connection
   * @param subscriptionId Unique identifier of the target subscription (UUID)
   * @@unique([user_id,
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":subscriptionId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPortalMemberSubscriptionsSubscriptionId({
        member,
        subscriptionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
