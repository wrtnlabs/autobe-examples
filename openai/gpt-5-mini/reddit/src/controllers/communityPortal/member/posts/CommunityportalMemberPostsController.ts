import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPortalMemberPosts } from "../../../../providers/postCommunityPortalMemberPosts";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putCommunityPortalMemberPostsPostId } from "../../../../providers/putCommunityPortalMemberPostsPostId";
import { deleteCommunityPortalMemberPostsPostId } from "../../../../providers/deleteCommunityPortalMemberPostsPostId";

import { ICommunityPortalPost } from "../../../../api/structures/ICommunityPortalPost";

@Controller("/communityPortal/member/posts")
export class CommunityportalMemberPostsController {
  /**
   * Create a post in a community (community_portal_posts).
   *
   * Create a new post in a specified community. This endpoint persists a
   * community_portal_posts record and supports three post types (text, link,
   * image) as defined by the Prisma model.
   *
   * Only authenticated, verified members may create posts. The server MUST
   * verify the caller's identity and membership/verification state and set
   * author_user_id to the authenticated user's id. The payload MUST include
   * community_id (target community), post_type ("text" | "link" | "image"), and
   * title. Depending on post_type, include the appropriate content field: for
   * "text" include body; for "link" include link_url (valid http/https URL);
   * for "image" include image_url or use a media upload pipeline. The server
   * MUST sanitize and validate all inputs (title, body, link_url, image_url)
   * and enforce configured size/format limits for media.
   *
   * Business behavior: If the target community requires moderator pre-approval,
   * the server SHOULD create the post with status "pending" and notify
   * moderators. created_at and updated_at are recorded by the server. The
   * client MUST NOT provide deleted_at. On success the created post
   * representation is returned.
   *
   * @param connection
   * @param body Post creation payload. Required fields: community_id (uuid),
   *   post_type ('text'|'link'|'image'), title (string). Include body for text
   *   posts, link_url for link posts, or image_url for image posts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPortalPost.ICreate,
  ): Promise<ICommunityPortalPost> {
    try {
      return await postCommunityPortalMemberPosts({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing post (community_portal_posts).
   *
   * Update fields of an existing post record. This operation permits editing
   * mutable fields such as title, body, link_url, image_url, and status for the
   * post identified by postId.
   *
   * Authentication and authorization: Caller must be authenticated and
   * authorized to update the specified post (commonly the original author or a
   * permitted moderator/role as defined by platform policy). The server MUST
   * verify the post exists and is not soft-deleted (deleted_at is null) before
   * applying updates. created_at MUST be preserved by the server; updated_at
   * MUST be set to the current timestamp on successful update.
   *
   * Validation: If post_type is changed, the server MUST validate presence of
   * appropriate content for the new type. Status transitions (for example,
   * 'pending'â†’'published' or marking 'removed') may trigger audit records,
   * notifications, or moderation actions. The server MUST return 404 if postId
   * does not exist or is deleted, 403 if caller is not authorized, 400 for
   * validation errors, and 409 for business-rule conflicts.
   *
   * @param connection
   * @param postId Target post's ID
   * @param body Post update payload. Include only fields to be changed (title,
   *   body, link_url, image_url, status). Do not include created_at or
   *   deleted_at.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPortalPost.IUpdate,
  ): Promise<ICommunityPortalPost> {
    try {
      return await putCommunityPortalMemberPostsPostId({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a post (community_portal_posts) by ID.
   *
   * This endpoint marks a post as deleted by setting the
   * community_portal_posts.deleted_at timestamp. It operates on the
   * community_portal_posts model and preserves the post record for audit,
   * moderation, and historical integrity. The caller must be authenticated and
   * authorized: the author (owner) may delete their own post, and
   * community-scoped moderators or platform admins may delete posts within
   * their scope. The server implementation MUST enforce ownership checks and
   * moderator scope before setting deleted_at.
   *
   * Validation: Validate path parameter postId as a UUID. If the post does not
   * exist or deleted_at is already set, return 404. If the post's status or
   * business rules prevent deletion, return 409 Conflict. On success set
   * deleted_at to current UTC timestamp, persist audit entry (actor id, reason)
   * at application level, and return 204 No Content.
   *
   * Security: Do not expose password_hash or other secrets. Ensure
   * authorization check enforces owner-or-scope-moderator/admin policy. Log the
   * action for audit.
   *
   * @param connection
   * @param postId Target post's ID (community_portal_posts.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPortalMemberPostsPostId({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
