import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPortalMemberUsersUserId } from "../../../../providers/putCommunityPortalMemberUsersUserId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { deleteCommunityPortalMemberUsersUserId } from "../../../../providers/deleteCommunityPortalMemberUsersUserId";

import { ICommunityPortalUser } from "../../../../api/structures/ICommunityPortalUser";

@Controller("/communityPortal/member/users/:userId")
export class CommunityportalMemberUsersController {
  /**
   * Update an existing user's editable profile fields (community_portal_users).
   *
   * This endpoint allows an authenticated account owner to update their own
   * editable profile fields stored in community_portal_users. It accepts
   * profile fields and an optional plaintext password to be hashed by the
   * server. The response returns the public view of the updated user and MUST
   * NOT include password_hash or any secret fields.
   *
   * Security and authorization: Only the authenticated account owner may call
   * this endpoint for their userId. The server MUST authenticate the request
   * and verify ownership (authenticated user id must equal path userId).
   * Admin-level overrides, if allowed, must be explicitly modeled in separate
   * admin endpoints.
   *
   * Database relation and behavior: Maps to the Prisma model
   * community_portal_users. The presence of deleted_at indicates soft-deletion;
   * updates to soft-deleted accounts are rejected with 404. The server must not
   * cascade-delete related resources; related posts/comments/votes remain and
   * should be handled by separate moderation processes.
   *
   * Validation and business logic:
   *
   * - Path parameter userId (UUID) is required and must reference an existing,
   *   non-deleted user.
   * - Writable body fields: display_name (string | null), bio (string | null),
   *   avatar_uri (string | null), password (string | null) â€” password triggers
   *   server-side hashing and storage in password_hash; plaintext password MUST
   *   NOT be returned.
   * - Protected fields: username, email, karma, created_at, deleted_at are not
   *   writable via this endpoint and must be rejected if present in the
   *   request.
   * - The server SHOULD validate password strength and apply optimistic
   *   concurrency via updated_at where feasible.
   *
   * Errors and edge cases:
   *
   * - 400 Bad Request: invalid payload or attempt to modify protected fields.
   * - 401 Unauthorized: caller not authenticated.
   * - 403 Forbidden: authenticated caller not the account owner.
   * - 404 Not Found: userId does not exist or account already soft-deleted.
   * - 429 Too Many Requests: rate limits exceeded for password changes.
   * - 500 Internal Server Error: unexpected failures.
   *
   * @param connection
   * @param userId Target user's ID (UUID) to update
   * @param body Editable user profile fields. Provide only fields to change. If
   *   password is provided, server will hash it; plaintext password is never
   *   returned.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPortalUser.IUpdate,
  ): Promise<ICommunityPortalUser.ISummary> {
    try {
      return await putCommunityPortalMemberUsersUserId({
        member,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (mark deleted_at) a user account in community_portal_users.
   *
   * This endpoint marks the specified user account as deleted by setting
   * deleted_at on the community_portal_users record. It preserves the row for
   * audit, moderation, and legal traceability and does not cascade-remove
   * related posts/comments/votes.
   *
   * Security and permissions: Only the authenticated account owner may request
   * this soft-delete. The server MUST authenticate and verify ownership.
   * Admin-level permanent deletion or legal holds are outside the scope of this
   * user-facing endpoint.
   *
   * Database relation and behavior: Maps to community_portal_users. The
   * operation MUST not cascade-delete related content as a side-effect; content
   * references should remain for audit. If deleted_at is already set, the
   * server SHOULD return 404 Not Found or 204 No Content according to
   * platform-wide idempotency policy (recommend documenting one behavior and
   * applying it consistently).
   *
   * Business rules and validation:
   *
   * - Path parameter userId (UUID) is required and must reference an existing
   *   user.
   * - If the record's deleted_at is already set, return 404 Not Found (or 204 if
   *   idempotent semantics are chosen).
   * - The server MUST create an auditable entry recording actor id, timestamp,
   *   and optional reason.
   *
   * Errors and edge cases:
   *
   * - 401 Unauthorized when the caller is not authenticated.
   * - 403 Forbidden when authenticated but not the account owner.
   * - 404 Not Found when userId not found or already deleted (if 404 semantics
   *   chosen).
   * - 500 Internal Server Error for unexpected failures.
   *
   * @param connection
   * @param userId Target user's ID (UUID) to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPortalMemberUsersUserId({
        member,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
