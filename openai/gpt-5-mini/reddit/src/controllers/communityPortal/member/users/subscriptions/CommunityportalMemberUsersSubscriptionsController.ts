import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPortalMemberUsersUserIdSubscriptions } from "../../../../../providers/getCommunityPortalMemberUsersUserIdSubscriptions";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IPageICommunityPortalSubscription } from "../../../../../api/structures/IPageICommunityPortalSubscription";

@Controller("/communityPortal/member/users/:userId/subscriptions")
export class CommunityportalMemberUsersSubscriptionsController {
  /**
   * List subscriptions for a user (paginated).
   *
   * Return a paginated list of the specified user's community subscriptions.
   *
   * This operation retrieves subscription summaries sourced from the
   * community_portal_subscriptions Prisma model and includes minimal related
   * community fields (id, slug, name, visibility) to aid UI presentation. By
   * default only active subscriptions
   * (community_portal_subscriptions.deleted_at IS NULL) are returned;
   * archived/revoked subscriptions may be included only when the caller is
   * authorized and supplies the includeArchived query flag.
   *
   * Security and permissions: Requires an authenticated member context. By
   * default a user may retrieve only their own subscriptions; platform policy
   * may allow moderators/admins to fetch other users' subscriptions
   * (authorization enforced in the service layer). The implementation must
   * enforce community visibility rules so that private communities appear only
   * when the requester has access.
   *
   * Validation and errors: Path parameter userId MUST be a UUID corresponding
   * to an existing community_portal_users.id. Query-based pagination parameters
   * (limit, offset) and optional includeArchived are supported by the service
   * (documented as query params), but only the path parameter is required at
   * the API surface. Return 401 for unauthenticated requests, 403 if the caller
   * is not authorized to view the target user's subscriptions, 404 if the user
   * does not exist or no visible subscriptions are found for the caller, and
   * 400 for malformed parameters.
   *
   * @param connection
   * @param userId UUID of the user whose subscriptions are requested
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IPageICommunityPortalSubscription.ISummary> {
    try {
      return await getCommunityPortalMemberUsersUserIdSubscriptions({
        member,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
