import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchCommunityPortalMemberVotes } from "../../../../providers/patchCommunityPortalMemberVotes";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { IPageICommunityPortalVote } from "../../../../api/structures/IPageICommunityPortalVote";
import { ICommunityPortalVote } from "../../../../api/structures/ICommunityPortalVote";

@Controller("/communityPortal/member/votes")
export class CommunityportalMemberVotesController {
  /**
   * Search and retrieve a paginated list of vote events
   * (community_portal_votes).
   *
   * Retrieve a filtered, sorted, and paginated list of vote events from the
   * community_portal_votes table.
   *
   * Purpose and overview: This operation enables clients to search vote events
   * by voter (user_id), by target (post_id or comment_id), by date ranges, and
   * to page and sort results. Typical use cases include a user reviewing their
   * own vote history on their profile and authorized audit/analytics views.
   * Returned items include id, userId, postId (nullable), commentId (nullable),
   * value (+1 or -1), createdAt, and updatedAt.
   *
   * Security considerations and permissions: This endpoint requires an
   * authenticated member context. The server MUST ensure that user-scoped
   * queries (for example filtering by userId) return only records the caller is
   * permitted to view (commonly the caller's own votes). Aggregated or
   * cross-user queries require additional authorization checks implemented
   * server-side. The operation excludes soft-deleted votes by default
   * (deleted_at not null) unless includeDeleted=true is explicitly requested.
   *
   * Relationship to underlying DB entity: Maps directly to the
   * community_portal_votes Prisma model and uses the model fields and semantics
   * described in the schema. The API enforces XOR semantics at request
   * validation time by rejecting requests that provide both postId and
   * commentId filters simultaneously. Pagination and sorting operate over
   * created_at and value fields. Error handling: malformed UUIDs/date formats
   * return 400; unauthenticated calls return 401; attempts to query other
   * users' votes without authorization return 403.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for votes listing.
   *   Filters: userId (uuid), postId (uuid), commentId (uuid), value (+1/-1),
   *   date range (createdFrom, createdTo), sort (createdAt|value), limit,
   *   offset. Note: provide either postId or commentId, not both (XOR).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPortalVote.IRequest,
  ): Promise<IPageICommunityPortalVote.ISummary> {
    try {
      return await patchCommunityPortalMemberVotes({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
