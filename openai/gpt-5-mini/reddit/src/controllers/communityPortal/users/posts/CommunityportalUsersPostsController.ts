import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPortalUsersUserIdPosts } from "../../../../providers/patchCommunityPortalUsersUserIdPosts";

import { IPageICommunityPortalPost } from "../../../../api/structures/IPageICommunityPortalPost";
import { ICommunityPortalPost } from "../../../../api/structures/ICommunityPortalPost";

@Controller("/communityPortal/users/:userId/posts")
export class CommunityportalUsersPostsController {
  /**
   * Search and retrieve a paginated list of posts authored by a given user
   * (profile posts).
   *
   * Purpose and overview: Retrieve a filtered, sorted, and paginated list of
   * posts created by the specified user. This operation is intended for user
   * profile pages and for building user-centric feeds that show a user's public
   * contributions. It operates on the community_portal_posts table as defined
   * in the Prisma schema.
   *
   * Security considerations and user permissions: This is a read operation and
   * is public by default for published content. Visibility of specific posts is
   * subject to the post.status and community visibility rules. By default,
   * posts with deleted_at set (soft-deleted) are excluded. If includeDeleted is
   * requested, the implementation MUST validate the requesting user's
   * permissions: only community moderators and admins shall be permitted to
   * view soft-deleted records; unauthorized callers must receive 403
   * Forbidden.
   *
   * Relationship to underlying database entities: This operation maps directly
   * to the community_portal_posts model. Relevant columns include: id,
   * community_id, author_user_id, post_type, title, body, link_url, image_url,
   * status, created_at, updated_at, deleted_at. The operation may join or
   * reference community metadata where needed for display (e.g.,
   * community.slug/name) but must not assume additional columns beyond those
   * defined in the Prisma model.
   *
   * Validation rules and business logic:
   *
   * - UserId path parameter must be a UUID corresponding to
   *   community_portal_users.id.
   * - Request body may include pagination (limit, offset), sort mode
   *   (hot|new|top|controversial), post_type filter (text|link|image), status
   *   filter (published|pending|removed), and includeDeleted boolean. By
   *   default (includeDeleted=false) records where deleted_at IS NOT NULL MUST
   *   be omitted.
   * - If includeDeleted=true, the server MUST check caller authorization and only
   *   return deleted records to authorized roles (moderator/admin). Sorting
   *   modes "hot" and "controversial" are accepted as parameters but their
   *   algorithmic definitions are implementation details.
   *
   * Related API operations:
   *
   * - GET /communities/{communityId}/posts (list posts by community)
   * - GET /posts/{postId} (retrieve single post detail)
   *
   * Expected behavior and error handling:
   *
   * - Returns a paginated result set with post summaries. If userId does not
   *   exist, return 404 Not Found. If request validation fails (invalid
   *   pagination or filter values), return 400 Bad Request with field-level
   *   errors. If includeDeleted is true and the caller lacks permission to view
   *   deleted records, return 403 Forbidden.
   *
   * @param connection
   * @param userId Unique identifier (UUID) of the target user whose posts are
   *   being requested
   * @param body Search, filter, sort and pagination parameters for retrieving a
   *   user's posts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPortalPost.IRequest,
  ): Promise<IPageICommunityPortalPost.ISummary> {
    try {
      return await patchCommunityPortalUsersUserIdPosts({
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
