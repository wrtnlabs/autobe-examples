import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPortalUsersUserIdComments } from "../../../../providers/patchCommunityPortalUsersUserIdComments";

import { IPageICommunityPortalComment } from "../../../../api/structures/IPageICommunityPortalComment";
import { ICommunityPortalComment } from "../../../../api/structures/ICommunityPortalComment";

@Controller("/communityPortal/users/:userId/comments")
export class CommunityportalUsersCommentsController {
  /**
   * Search and retrieve a paginated list of comments authored by a given user
   * (profile comments).
   *
   * Purpose and overview: Return a filtered and paginated list of comments
   * created by the specified user for profile views and moderation summaries.
   * This operation is centered on the community_portal_comments Prisma model.
   *
   * Security considerations and user permissions: This read operation is public
   * by default for non-deleted comments but must respect comment visibility and
   * the deleted_at soft-delete marker. By default, comments with deleted_at set
   * are omitted. If includeDeleted=true is provided, the implementation MUST
   * check permissions and only return deleted comments to authorized callers
   * (moderators/admins); unauthenticated or unauthorized includeDeleted
   * requests must be rejected with 403 Forbidden.
   *
   * Relationship to underlying database entities: This operation directly
   * references fields on community_portal_comments: id, post_id,
   * parent_comment_id, author_user_id, body, created_at, updated_at,
   * deleted_at. It may include contextual post identifiers (post_id) and, where
   * helpful, the community context via post->community_id joins, but must not
   * assume fields outside the defined Prisma models.
   *
   * Validation rules and business logic:
   *
   * - UserId path parameter must be a UUID referring to
   *   community_portal_users.id.
   * - Request body may include pagination parameters (limit, offset), optional
   *   postId filter to narrow comments to a specific post, a flag to request
   *   only top-level comments (parent_comment_id IS NULL) or only replies, and
   *   includeDeleted boolean. By default includeDeleted=false and deleted
   *   comments MUST be excluded.
   *
   * Related API operations:
   *
   * - GET /posts/{postId}/comments (comments by post)
   * - GET /comments/{commentId} (single comment detail)
   *
   * Expected behavior and error handling:
   *
   * - Returns a paginated list of comment summaries. If the userId does not
   *   exist, return 404 Not Found. If request parameters are invalid, return
   *   400 Bad Request. If includeDeleted is requested without adequate
   *   permission, return 403 Forbidden.
   *
   * @param connection
   * @param userId Unique identifier (UUID) of the target user whose comments
   *   are being requested
   * @param body Search, filter and pagination parameters for retrieving a
   *   user's comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPortalComment.IRequest,
  ): Promise<IPageICommunityPortalComment.ISummary> {
    try {
      return await patchCommunityPortalUsersUserIdComments({
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
