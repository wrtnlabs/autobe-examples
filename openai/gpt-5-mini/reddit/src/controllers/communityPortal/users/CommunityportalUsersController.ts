import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPortalUsers } from "../../../providers/patchCommunityPortalUsers";
import { getCommunityPortalUsersUserId } from "../../../providers/getCommunityPortalUsersUserId";

import { IPageICommunityPortalUser } from "../../../api/structures/IPageICommunityPortalUser";
import { ICommunityPortalUser } from "../../../api/structures/ICommunityPortalUser";

@Controller("/communityPortal/users")
export class CommunityportalUsersController {
  /**
   * Search and retrieve a filtered, paginated list of CommunityPortal users.
   *
   * Retrieve a filtered and paginated list of user profiles from the
   * community_portal_users table. This operation supports complex queries such
   * as partial username/display_name matching, karma range filtering, sorting
   * by karma or creation date, and pagination. By default the operation
   * excludes soft-deleted users (community_portal_users.deleted_at IS NULL) and
   * does not expose sensitive fields such as password_hash.
   *
   * Security and permissions: Basic discovery of public profile summaries may
   * be permitted for unauthenticated callers, but any request that requests
   * sensitive fields (email), performs email-based lookup, requests
   * includeArchived=true, or requests bulk export must require authentication
   * and explicit authorization. Audit access to email-based searches is
   * REQUIRED. Returned user summaries include only public profile fields (id,
   * username, display_name, bio, avatar_uri, karma, created_at) unless the
   * caller is authorized to receive more details.
   *
   * Relationship to DB entity: This operation directly references the
   * community_portal_users Prisma model. The model's fields such as id,
   * username, email, password_hash, display_name, bio, avatar_uri, karma,
   * created_at, updated_at, deleted_at are present in schema. The operation may
   * optionally join to community_portal_members to restrict to verified members
   * (is_email_verified) when requested and authorized.
   *
   * Validation and error handling: The request body must conform to
   * ICommunityPortalUser.IRequest schema (search filters, pagination). Requests
   * with invalid pagination/sort parameters SHOULD return 400 Bad Request. If
   * the operation is rate-limited, return 429 with retry information. On
   * internal errors return 500. Empty result sets return an empty data array
   * with pagination meta.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for user filtering
   *   (ICommunityPortalUser.IRequest). Implementations MUST include controls
   *   for includeArchived and sensitive filters to enforce authorization.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPortalUser.IRequest,
  ): Promise<IPageICommunityPortalUser.ISummary> {
    try {
      return await patchCommunityPortalUsers({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single CommunityPortal user profile by ID.
   *
   * Return the public profile for a single user from the community_portal_users
   * table identified by the path parameter userId.
   *
   * Purpose and overview: This endpoint is intended for profile pages and
   * content attribution. It returns public profile fields (id, username,
   * display_name, bio, avatar_uri, karma, created_at, updated_at). It
   * references the Prisma schema comments that document these fields and the
   * soft-delete behavior (deleted_at).
   *
   * Security and user permissions: Public callers may retrieve basic profile
   * data. Any request that attempts to access sensitive details (email,
   * membership flags, internal notes) must require authentication and explicit
   * authorization. The API MUST NOT return password_hash under any
   * circumstance.
   *
   * Relationship to DB entity and validation: The endpoint maps directly to the
   * community_portal_users model. Validate userId as a UUID and exclude records
   * where deleted_at is set by default. If not found, return 404 with a clear
   * message.
   *
   * Error handling: 400 for invalid UUID format, 404 when user not found or
   * soft-deleted (policy-dependent), 500 for internal errors. 401 when the
   * implementation requires authentication for this resource and the caller is
   * unauthenticated.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userId")
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPortalUser> {
    try {
      return await getCommunityPortalUsersUserId({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
