import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPortalModeratorReportsReportId } from "../../../../providers/putCommunityPortalModeratorReportsReportId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { ICommunityPortalReport } from "../../../../api/structures/ICommunityPortalReport";

@Controller("/communityPortal/moderator/reports/:reportId")
export class CommunityportalModeratorReportsController {
  /**
   * Update an existing moderation report (community_portal_reports).
   *
   * Update an existing moderation report in the community_portal_reports table.
   *
   * This operation updates only mutable fields on an existing report. It
   * accepts any subset of the updatable properties defined by the Prisma model
   * (for example: status, assigned_moderator_id, closed_by_moderator_id,
   * resolution_notes, reviewed_at, closed_at, is_urgent, severity,
   * reporter_contact_email). The endpoint does not allow changing immutable
   * audit fields such as id or created_at. Implementations MUST validate that
   * supplied UUIDs exist in their corresponding tables and that state
   * transitions are permitted by workflow rules.
   *
   * Security and permissions: Only authenticated moderators may call this
   * endpoint. The application MUST perform authorization checks (for example,
   * moderator scoped to the relevant community or elevated global moderator
   * privileges) and return 403 Forbidden for unauthorized attempts. All
   * assignment and closure changes MUST be recorded with actor identity in
   * audit logs.
   *
   * Validation and business logic:
   *
   * - Allowed status values and reason_code vocabulary are enforced by
   *   application logic; invalid values must result in 400 Bad Request.
   * - Status transitions should follow configured workflow rules (e.g., OPEN ->
   *   IN_REVIEW -> REQUIRES_ACTION -> CLOSED); invalid transitions must be
   *   rejected.
   * - Timestamps (reviewed_at, closed_at) must be ISO 8601 UTC and validated
   *   server-side.
   * - Any provided moderator IDs must refer to active moderator assignments;
   *   otherwise return 400.
   *
   * Related operations:
   *
   * - GET /reports/{reportId} to fetch report details.
   * - DELETE /reports/{reportId} to remove a report (hard delete).
   *
   * @param connection
   * @param reportId Target report's ID
   * @param body Partial report update payload. Only fields defined on the
   *   community_portal_reports model are accepted. Example updatable fields:
   *   status, assigned_moderator_id, closed_by_moderator_id, resolution_notes,
   *   reviewed_at, closed_at, is_urgent, severity, reporter_contact_email.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPortalReport.IUpdate,
  ): Promise<ICommunityPortalReport> {
    try {
      return await putCommunityPortalModeratorReportsReportId({
        moderator,
        reportId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
