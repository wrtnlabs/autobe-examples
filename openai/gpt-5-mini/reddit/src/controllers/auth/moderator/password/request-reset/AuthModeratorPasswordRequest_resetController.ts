import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorPasswordRequestReset } from "../../../../../providers/postAuthModeratorPasswordRequestReset";

import { ICommunityPortalModerator } from "../../../../../api/structures/ICommunityPortalModerator";

@Controller("/auth/moderator/password/request-reset")
export class AuthModeratorPasswordRequest_resetController {
  /**
   * Request password reset email for a moderator account.
   *
   * Purpose and overview: Initiate a password reset process for a moderator
   * account. The endpoint accepts an email address
   * (community_portal_users.email) and, if a matching account exists, sends a
   * one-time password reset token to that address. The response is a generic
   * acknowledgement to avoid account enumeration.
   *
   * Implementation details using confirmed schema fields: The request body
   * SHOULD include the email addressing which the reset is requested. The
   * implementation locates the community_portal_users row by email and
   * generates a time-limited token. The token exchange to set a new password is
   * performed in resetPassword. The operation does not return user-specific
   * details in order to preserve privacy.
   *
   * Role-specific integration and business context: This operation is
   * public-facing and supports moderator account recovery. Because
   * community_portal_users.email is unique per schema, the system can reliably
   * generate and send a reset token when appropriate but must not disclose
   * account presence in responses.
   *
   * Security considerations constrained by schema: Always respond with a
   * neutral acknowledgment regardless of whether an account exists for the
   * supplied email. Ensure the reset token workflow ultimately results in
   * replacing the stored community_portal_users.password_hash and log reset
   * events against the user id when applicable.
   *
   * Related operations and workflow integration: Sequence: requestPasswordReset
   * -> resetPassword. After a successful reset, the user should be able to
   * login and obtain tokens.
   *
   * @param connection
   * @param body Email payload to request a password reset link or token.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ICommunityPortalModerator.IRequestPasswordReset,
  ): Promise<ICommunityPortalModerator.IRequestPasswordResetResponse> {
    try {
      return await postAuthModeratorPasswordRequestReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
