import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorPasswordReset } from "../../../../../providers/postAuthModeratorPasswordReset";

import { ICommunityPortalModerator } from "../../../../../api/structures/ICommunityPortalModerator";

@Controller("/auth/moderator/password/reset")
export class AuthModeratorPasswordResetController {
  /**
   * Complete password reset and update stored password hash.
   *
   * Purpose and overview: Finalize a password reset for a moderator by
   * consuming a time-limited token and setting a new password hash in
   * community_portal_users.password_hash. This operation ensures the account
   * can be recovered securely and that the reset is auditable against the user
   * id.
   *
   * Implementation details using confirmed schema fields: Request payload
   * SHOULD include the reset token and the new password. The server validates
   * the token, locates the community_portal_users row, computes a secure hash
   * for the provided password, and updates
   * community_portal_users.password_hash. The response confirms completion
   * without returning sensitive data.
   *
   * Role-specific integration and business context: This operation completes
   * the account recovery flow for moderators. After a successful reset, clients
   * should call login to obtain fresh tokens. Implementations should also
   * invalidate existing refresh tokens for the user to prevent token reuse
   * after a password change.
   *
   * Security considerations constrained by schema: Never return the
   * password_hash in responses. Ensure token consumption is single-use and that
   * community_portal_users.deleted_at and community_portal_members.is_suspended
   * are consideredâ€”deny resets for deleted accounts or log and surface
   * appropriate guidance.
   *
   * Related operations and workflow integration: Preceded by
   * requestPasswordReset and typically followed by login and refresh
   * operations.
   *
   * @param connection
   * @param body Reset token and new password to update the stored password
   *   hash.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resetPassword(
    @TypedBody()
    body: ICommunityPortalModerator.IResetPassword,
  ): Promise<ICommunityPortalModerator.IResetPasswordResponse> {
    try {
      return await postAuthModeratorPasswordReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
