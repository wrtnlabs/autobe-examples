import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminEmailVerify } from "../../../../../providers/postAuthAdminEmailVerify";

import { ICommunityPortalAdmin } from "../../../../../api/structures/ICommunityPortalAdmin";

@Controller("/auth/admin/email/verify")
export class AuthAdminEmailVerifyController {
  /**
   * Verify admin email using token (relates to
   * community_portal_members.is_email_verified and
   * community_portal_users.email).
   *
   * Purpose and overview: This endpoint accepts an email verification token
   * and, when valid, updates community_portal_members.is_email_verified for the
   * linked user record. The operation references community_portal_users.email
   * to locate the account and
   * community_portal_members.user_id/is_email_verified to record verification
   * state.
   *
   * Implementation details and field usage: The request receives a verification
   * token (usually issued at registration) and resolves it to
   * community_portal_users.id. The server then updates the related
   * community_portal_members.is_email_verified to true and sets
   * community_portal_members.updated_at. The verification event may also be
   * recorded in community_portal_users.updated_at for auditing.
   *
   * Role-specific integration and business context: Email verification is
   * required by many flows (e.g., allowing token issuance or gating admin
   * privileges). For admin accounts, callers should be aware that
   * community_portal_admins.is_active may be contingent on verification; the
   * platform can choose to enforce community_portal_members.is_email_verified
   * before enabling admin-scoped tokens.
   *
   * Security considerations: Tokens must be single-use and time-limited. The
   * endpoint should not disclose extraneous account data. Successful
   * verification should be auditable and linked to community_portal_users.id
   * and community_portal_members.user_id. If the account is suspended
   * (community_portal_members.is_suspended), verification may be recorded but
   * should not automatically lift suspension.
   *
   * Related operations and workflow: Tokens are typically issued during POST
   * /auth/admin/join or during user invitation flows. After verification, the
   * client proceeds to authenticate via POST /auth/admin/login to obtain admin
   * tokens.
   *
   * @param connection
   * @param body Email verification payload containing the verification token.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: ICommunityPortalAdmin.IVerifyEmail,
  ): Promise<ICommunityPortalAdmin.IVerifyEmailResponse> {
    try {
      return await postAuthAdminEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
