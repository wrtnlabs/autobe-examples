import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminPasswordConfirm } from "../../../../../providers/postAuthAdminPasswordConfirm";

import { ICommunityPortalAdmin } from "../../../../../api/structures/ICommunityPortalAdmin";

@Controller("/auth/admin/password/confirm")
export class AuthAdminPasswordConfirmController {
  /**
   * Confirm admin password reset and set new password (relates to
   * community_portal_users.password_hash).
   *
   * Purpose and overview: This endpoint finalizes a password reset by accepting
   * a one-time reset token and a new password, validating the token, and
   * updating community_portal_users.password_hash for the referenced user. It
   * ensures the token maps to a valid community_portal_users.id before
   * performing the update.
   *
   * Implementation details and field usage: The request payload includes the
   * reset token and the desired new password. The server validates the token,
   * resolves it to community_portal_users.id, and replaces the stored
   * community_portal_users.password_hash with a secure hash of the new
   * password. The operation updates community_portal_users.updated_at for
   * auditability.
   *
   * Role-specific integration and business context: This operation is typically
   * used when an admin user cannot authenticate and has used POST
   * /auth/admin/password/reset to request assistance. After successfully
   * changing the password, the user may be redirected to POST
   * /auth/admin/login. If the user also has a community_portal_admins record,
   * the system may optionally re-evaluate community_portal_admins.is_active as
   * part of post-reset checks.
   *
   * Security considerations: Validate the reset token for expiry and single-use
   * semantics. After a successful reset, revoke other active refresh tokens for
   * that user to prevent session fixation. Record the password change event for
   * audit referencing community_portal_users.id and the timestamp in
   * community_portal_users.updated_at.
   *
   * Related operations and workflow: Token issuance occurs in POST
   * /auth/admin/password/reset; after confirmation clients authenticate via
   * POST /auth/admin/login. For privileged accounts, consider requiring
   * reauthentication or MFA after password reset for sensitive admin actions.
   *
   * @param connection
   * @param body Reset confirm payload containing token and new password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: ICommunityPortalAdmin.IResetConfirm,
  ): Promise<ICommunityPortalAdmin.IResetConfirmResponse> {
    try {
      return await postAuthAdminPasswordConfirm({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
