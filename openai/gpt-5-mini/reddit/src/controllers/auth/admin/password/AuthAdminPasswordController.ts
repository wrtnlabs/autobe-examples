import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthAdminPassword } from "../../../../providers/putAuthAdminPassword";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ICommunityPortalAdmin } from "../../../../api/structures/ICommunityPortalAdmin";

@Controller("/auth/admin/password")
export class AuthAdminPasswordController {
  /**
   * Change password for authenticated admin (relates to
   * community_portal_users.password_hash and
   * community_portal_admins.is_active).
   *
   * Purpose and overview: This endpoint allows an authenticated admin
   * (represented by community_portal_users.id and linked
   * community_portal_admins record) to change their password by providing the
   * current password and a new password. The operation updates
   * community_portal_users.password_hash and
   * community_portal_users.updated_at.
   *
   * Implementation details and field usage: The request body contains
   * currentPassword and newPassword. The server validates the current password
   * against community_portal_users.password_hash and, if valid, stores a secure
   * hash of newPassword in community_portal_users.password_hash. Before
   * performing the change, the server may verify the admin has an active
   * community_portal_admins entry (community_portal_admins.is_active) to ensure
   * only active admins perform this operation.
   *
   * Role-specific integration and business context: This endpoint requires an
   * authenticated admin context; the controller must verify the bearer token
   * maps to a community_portal_users.id that has an associated
   * community_portal_admins record. The change updates the user's credential
   * record and is auditable via community_portal_users.updated_at.
   *
   * Security considerations: Require the current password to mitigate token
   * theft scenarios. Upon successful change, rotate or revoke refresh tokens
   * and log the event with reference to community_portal_admins.user_id.
   * Enforce password strength rules and prevent reuse of recent passwords if
   * the platform enforces such history.
   *
   * Related operations and workflow: This operation complements the reset flows
   * (POST /auth/admin/password/reset and POST /auth/admin/password/confirm).
   * After changing the password, the client should reauthenticate via POST
   * /auth/admin/login if tokens were revoked.
   *
   * @param connection
   * @param body Payload with currentPassword and newPassword for authenticated
   *   admin.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPortalAdmin.IChangePassword,
  ): Promise<ICommunityPortalAdmin.IChangePasswordResponse> {
    try {
      return await putAuthAdminPassword({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
