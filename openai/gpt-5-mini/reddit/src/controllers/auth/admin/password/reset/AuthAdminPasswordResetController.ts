import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminPasswordReset } from "../../../../../providers/postAuthAdminPasswordReset";

import { ICommunityPortalAdmin } from "../../../../../api/structures/ICommunityPortalAdmin";

@Controller("/auth/admin/password/reset")
export class AuthAdminPasswordResetController {
  /**
   * Request admin password reset (relates to community_portal_users.email).
   *
   * Purpose and overview: This endpoint initiates an admin password reset flow
   * by accepting an email address and, if a matching community_portal_users
   * record exists, creating a one-time reset token and delivering it to
   * community_portal_users.email. The operation references the
   * community_portal_users.email field and the reset flow will ultimately
   * update community_portal_users.password_hash.
   *
   * Implementation details and field usage: The request contains the admin's
   * email (community_portal_users.email). The server generates a single-use
   * reset token tied to the user id and records the issuance for audit. The
   * email sent to the address references community_portal_users.id indirectly
   * via the secure token; the endpoint does not reveal whether the email exists
   * to callers for privacy.
   *
   * Role-specific integration and business context: Although this is an
   * unauthenticated request, it targets admin accounts and therefore tooling
   * that processes the reset must respect admin lifecycle fields such as
   * community_portal_admins.is_active (to decide whether to allow reset flows
   * for deactivated admin accounts). The reset confirmation step will update
   * community_portal_users.password_hash.
   *
   * Security considerations: Do not disclose account existence; return a
   * generic success response regardless of whether a matching email exists.
   * Rate-limit requests to this endpoint to protect against enumeration and
   * abuse. Record reset request events with timestamps and the target
   * community_portal_users.id when applicable.
   *
   * Related operations and workflow: Follow-up endpoint POST
   * /auth/admin/password/confirm completes the reset by accepting the token and
   * new password and updating community_portal_users.password_hash. After
   * reset, clients typically POST /auth/admin/login to authenticate with new
   * credentials.
   *
   * @param connection
   * @param body Password reset request containing the admin email address.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ICommunityPortalAdmin.IResetRequest,
  ): Promise<ICommunityPortalAdmin.IResetRequestResponse> {
    try {
      return await postAuthAdminPasswordReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
