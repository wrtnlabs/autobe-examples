import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberVerifyEmail } from "../../../../providers/postAuthMemberVerifyEmail";

import { ICommunityPortalMember } from "../../../../api/structures/ICommunityPortalMember";

@Controller("/auth/member/verify-email")
export class AuthMemberVerify_emailController {
  /**
   * Verify a member's email by consuming a verification token and setting
   * community_portal_members.is_email_verified to true.
   *
   * Purpose and functionality: This endpoint verifies a member's email by
   * accepting a verification token issued at registration. When the token is
   * validated, the implementation sets
   * community_portal_members.is_email_verified = true for the corresponding
   * membership record and records the verification event (member_since and
   * updated_at may be referenced).
   *
   * Implementation details and required fields: The request includes a
   * verification token that the server validates and maps to a
   * community_portal_users.id / community_portal_members record. On success the
   * server updates community_portal_members.is_email_verified to true and
   * returns the authorized view of the user or a simple success response.
   *
   * Role-specific integration and business context: Email verification unlocks
   * member capabilities that gate content creation and voting. The endpoint
   * ties the verification artifact to community_portal_users.email and the
   * membership record (community_portal_members.is_email_verified). The client
   * may subsequently call login to obtain tokens that reflect verified
   * membership privileges.
   *
   * Security considerations within schema constraints: Treat verification
   * tokens as single-use and time-limited. Do not expose whether the token maps
   * to which internal id on failure; return a generic invalid/expired response.
   * Ensure the update is auditable and tied to community_portal_users.id.
   *
   * Related operations and workflow integration: This operation complements the
   * join flow and allows the member to obtain full privileges (posting, voting)
   * once community_portal_members.is_email_verified is true. It references
   * community_portal_members and community_portal_users in the Prisma schema.
   *
   * @param connection
   * @param body Verification request containing the verification token issued
   *   at registration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: ICommunityPortalMember.IVerifyEmail,
  ): Promise<ICommunityPortalMember.IVerifyEmailResult> {
    try {
      return await postAuthMemberVerifyEmail({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
