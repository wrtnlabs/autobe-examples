import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberPasswordRequestReset } from "../../../../../providers/postAuthMemberPasswordRequestReset";

import { ICommunityPortalMember } from "../../../../../api/structures/ICommunityPortalMember";

@Controller("/auth/member/password/request-reset")
export class AuthMemberPasswordRequest_resetController {
  /**
   * Initiate a password reset flow by email for a member (no direct DB mutation
   * until reset is applied).
   *
   * Purpose and functionality: This endpoint initiates a password reset flow
   * for a member by accepting an email address that maps to
   * community_portal_users.email. The server generates a single-use reset
   * artifact (token) and sends it to the provided address. No persistent
   * changes to community_portal_users are made until the reset is completed.
   *
   * Implementation details and required fields: The client provides the email
   * (community_portal_users.email). The server looks up the user and, if found,
   * issues a time-limited reset token sent to that address. For privacy, the
   * endpoint returns a generic confirmation message regardless of whether the
   * email exists to avoid account enumeration.
   *
   * Role-specific integration and business context: This is a public endpoint
   * used when members forget credentials. The reset token allows the user to
   * call a subsequent changePassword operation or a token-based password update
   * endpoint. The implementation should reference community_portal_users.email
   * and community_portal_users.id for token binding.
   *
   * Security considerations within schema constraints: Always treat this flow
   * as sensitive: send tokens only to the verified email address
   * (community_portal_users.email) and limit token lifetime. Do not leak
   * whether the email exists in community_portal_users; return a generic
   * response message.
   *
   * Related operations and workflow integration: This operation pairs with a
   * password-apply operation (changePassword) that consumes the reset token to
   * update community_portal_users.password_hash. It references the
   * community_portal_users table for lookup and token binding.
   *
   * @param connection
   * @param body Password reset request containing the target email address.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ICommunityPortalMember.IRequestPasswordReset,
  ): Promise<ICommunityPortalMember.IPasswordResetRequested> {
    try {
      return await postAuthMemberPasswordRequestReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
