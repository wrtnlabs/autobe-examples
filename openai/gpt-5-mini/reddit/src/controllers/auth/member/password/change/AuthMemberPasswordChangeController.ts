import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberPasswordChange } from "../../../../../providers/postAuthMemberPasswordChange";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { ICommunityPortalMember } from "../../../../../api/structures/ICommunityPortalMember";

@Controller("/auth/member/password/change")
export class AuthMemberPasswordChangeController {
  /**
   * Set a new password for a member either via reset token or authenticated
   * current-password flow; updates community_portal_users.password_hash.
   *
   * Purpose and functionality: This endpoint sets a new password for a member
   * by updating community_portal_users.password_hash for the targeted user. It
   * accepts either an authenticated member session or a valid reset token
   * issued by the requestPasswordReset flow and updates the stored password
   * hash accordingly.
   *
   * Implementation details and required fields: The request MUST include either
   * the reset token and desired new password (token flow) or the
   * currentPassword and newPassword when the user is authenticated (session
   * flow). On validation, the server computes a new password hash and updates
   * community_portal_users.password_hash for the corresponding
   * community_portal_users.id.
   *
   * Role-specific integration and business context: Changing a password is a
   * security-sensitive operation that ties directly to the
   * community_portal_users table. If the authenticated
   * (authorizationRole="member") path is used, the server should verify the
   * provided current password against community_portal_users.password_hash
   * before allowing an update. If the reset-token path is used, verify the
   * token is valid and bound to community_portal_users.id.
   *
   * Security considerations within schema constraints: Never accept pre-hashed
   * passwords from clients. Use secure hashing and rotate any refresh tokens on
   * password change. Record an audit event tied to community_portal_users.id
   * when the password is changed.
   *
   * Related operations and workflow integration: This operation is used after
   * requestPasswordReset or as an authenticated change-password endpoint. It
   * updates community_portal_users.password_hash and may trigger session
   * invalidation for active tokens.
   *
   * @param connection
   * @param body Password change payload: either { resetToken, newPassword } or
   *   { currentPassword, newPassword } depending on flow.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async changePassword(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPortalMember.IChangePassword,
  ): Promise<ICommunityPortalMember.IChangePasswordResult> {
    try {
      return await postAuthMemberPasswordChange({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
