{"files":[{"filename":"schema-01-systematic.prisma","namespace":"Systematic","models":[{"name":"community_portal_communities","description":"Community records for communityPortal. Primary business entity representing a topic-focused community where members create posts, subscribe, and moderate content. Key relationships: creator user ({@link community_portal_users.id}). Contains temporal fields for auditing and soft-delete. Adjusted creator foreign key to be nullable to avoid cascade-delete of communities when a user is removed. Use application-level reassignment workflows or DB ON DELETE SET NULL.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"creator_user_id","type":"uuid","description":"Creator user's {@link community_portal_users.id}. Nullable to avoid cascade-deleting communities when the creator account is removed.","relation":{"name":"creator","targetModel":"community_portal_users"},"unique":false,"nullable":true}],"plainFields":[{"name":"name","type":"string","nullable":false,"description":"Human-readable community title."},{"name":"slug","type":"string","nullable":false,"description":"URL-friendly unique identifier (slug) for the community; enforce case-insensitive uniqueness at DB-level (e.g., unique index on lower(slug)) or canonicalize on write."},{"name":"description","type":"string","nullable":true,"description":"Short community description or purpose statement."},{"name":"is_private","type":"boolean","nullable":false,"description":"Whether the community is private (invite-only)."},{"name":"visibility","type":"string","nullable":false,"description":"Visibility policy (e.g., 'public' or 'private'). Consider converting to an enum or check constraint to ensure consistent values."},{"name":"created_at","type":"datetime","nullable":false,"description":"Record creation timestamp (UTC)."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Last update timestamp (UTC)."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft-delete timestamp; null when record is active."}],"uniqueIndexes":[{"fieldNames":["slug"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["visibility","created_at"]},{"fieldNames":["creator_user_id","created_at"]}],"ginIndexes":[{"fieldName":"name"},{"fieldName":"description"}]}]},{"filename":"schema-02-actors.prisma","namespace":"Actors","models":[{"name":"community_portal_users","description":"Primary user accounts for communityPortal. Stores authentication and profile data referenced by role tables and content entities. Key relationships: referenced by {@\\link community_portal_members.id}, {@\\link community_portal_moderators.id}, {@\\link community_portal_admins.id}, and content tables (posts, comments, votes) in other components. Use soft-delete (deleted_at) in practice; primary operations should prefer soft-delete to preserve audit trails.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"username","type":"string","nullable":false,"description":"Unique login handle used for authentication and public identity."},{"name":"email","type":"string","nullable":false,"description":"Primary email address for the account. Must be unique. Used for verification and notifications."},{"name":"password_hash","type":"string","nullable":false,"description":"Password hash using secure algorithm (never store plain passwords)."},{"name":"display_name","type":"string","nullable":true,"description":"Optional human-friendly display name shown in the UI."},{"name":"bio","type":"string","nullable":true,"description":"Optional profile biography text. Indexed for text search (GIN) to support fuzzy matching."},{"name":"avatar_uri","type":"uri","nullable":true,"description":"Optional avatar image URI for the user profile."},{"name":"karma","type":"int","nullable":false,"description":"Aggregated user karma score used for reputation and gating. Stored as integer; authoritative calculation may be driven by vote events in other components."},{"name":"created_at","type":"datetime","nullable":false,"description":"Record creation timestamp."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Last modification timestamp for the user record."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft-delete timestamp. When set, the user is considered deleted/archived for business logic while preserving audit trails."}],"uniqueIndexes":[{"fieldNames":["username"],"unique":true},{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["karma","updated_at"]}],"ginIndexes":[{"fieldName":"bio"},{"fieldName":"display_name"}]},{"name":"community_portal_guests","description":"Subsidiary table capturing guest-specific metadata linked to a primary user account. Guests are lightweight accounts with limited privileges; this table exists to track guest enrollment or ephemeral metadata without polluting the main user record.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Belonged user's {@\\link community_portal_users.id}.","relation":{"name":"user","targetModel":"community_portal_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"guest_token","type":"string","nullable":true,"description":"Optional short-lived token or metadata for guest sessions or invitations."},{"name":"created_at","type":"datetime","nullable":false,"description":"When the guest record was created."},{"name":"expired_at","type":"datetime","nullable":true,"description":"Optional expiration timestamp for guest status or token."}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[]},{"name":"community_portal_members","description":"Subsidiary table for member-specific attributes tied to a primary user account. Holds membership metadata such as verification and suspension state and membership start date. One-to-one with community_portal_users to support member-only attributes without bloating the core user table.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Belonged user's {@\\link community_portal_users.id}.","relation":{"name":"user","targetModel":"community_portal_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"member_since","type":"datetime","nullable":false,"description":"Timestamp when the user became a member (verified)."},{"name":"is_email_verified","type":"boolean","nullable":false,"description":"Whether the member's email has been verified."},{"name":"is_suspended","type":"boolean","nullable":false,"description":"Flag indicating whether the member account is suspended (platform action)."},{"name":"created_at","type":"datetime","nullable":false,"description":"Record creation timestamp for membership record."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Last update timestamp for membership record."}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["member_since","is_suspended"]}],"ginIndexes":[]},{"name":"community_portal_moderators","description":"Moderator assignments with robust auditability. Each appointment references the moderator user and the appointing user. The model preserves timestamps and activation flags. Appointing actor is a foreign key to community_portal_users to ensure referential integrity and easier audit queries. Community reference is nullable to support global moderators.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Moderator's user reference. {@link community_portal_users.id}.","relation":{"name":"user","targetModel":"community_portal_users","mappingName":"community_portal_moderators_of_user_id"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Assigned community's {@link community_portal_communities.id}. Nullable to allow global moderators without single-community assignment.","relation":{"name":"community","targetModel":"community_portal_communities"},"unique":false,"nullable":true},{"name":"appointed_by_user_id","type":"uuid","description":"Appointing user's {@link community_portal_users.id}. Nullable when appointed by system or for legacy/backfill records.","relation":{"name":"appointedByUser","targetModel":"community_portal_users","mappingName":"community_portal_moderators_of_appointed_by_user_id"},"unique":false,"nullable":true}],"plainFields":[{"name":"appointed_at","type":"datetime","nullable":false,"description":"Timestamp when the moderator appointment was made."},{"name":"is_active","type":"boolean","nullable":false,"description":"Whether the moderator assignment is currently active."},{"name":"created_at","type":"datetime","nullable":false,"description":"Record creation timestamp for the moderator assignment."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Last update timestamp for the moderator assignment."}],"uniqueIndexes":[{"fieldNames":["user_id","community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id","is_active"]},{"fieldNames":["user_id","appointed_at"]},{"fieldNames":["appointed_by_user_id","appointed_at"]}],"ginIndexes":[]},{"name":"community_portal_admins","description":"Subsidiary table for platform admin accounts and admin-scoped metadata. One-to-one with the primary user record. Stores admin level and activation flag for elevated privileges; admin actions should always be audited in external audit logs.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Belonged user's {@\\link community_portal_users.id}.","relation":{"name":"user","targetModel":"community_portal_users"},"unique":true,"nullable":false}],"plainFields":[{"name":"admin_level","type":"string","nullable":false,"description":"Admin level or role string (e.g., 'super', 'moderator_coordinator'). Defines scope of privileges; exact semantics are platform-defined."},{"name":"is_active","type":"boolean","nullable":false,"description":"Whether the admin account is active and may perform admin actions."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when admin role was granted."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Last updated timestamp for admin record."}],"uniqueIndexes":[{"fieldNames":["user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["admin_level","is_active"]}],"ginIndexes":[]}]},{"filename":"schema-03-content.prisma","namespace":"Content","models":[{"name":"community_portal_posts","description":"Primary entity for community posts. Stores canonical post data (type, title, body/link/image), community membership, author reference, and temporal audit fields. Aggregated ranking signals (score, upvote_count, downvote_count) MUST NOT be stored here per normalization rules; instead, compute/store them in materialized views (mv_) or event-driven aggregate tables. Author reference is nullable and should use SET NULL on user deletion to preserve content auditability. {@link community_portal_communities.id} {@link community_portal_users.id}.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Belonged community's {@link community_portal_communities.id}. Required; a post must belong to a community.","relation":{"name":"community","targetModel":"community_portal_communities"},"unique":false,"nullable":false},{"name":"author_user_id","type":"uuid","description":"Authoring user's {@link community_portal_users.id}. Nullable to allow account deletion while preserving post content (SET NULL on user delete recommended).","relation":{"name":"author","targetModel":"community_portal_users"},"unique":false,"nullable":true}],"plainFields":[{"name":"post_type","type":"string","nullable":false,"description":"Post type indicator: 'text', 'link', or 'image'. Determines which content field is expected to be populated."},{"name":"title","type":"string","nullable":false,"description":"User-facing title of the post. Use for listing and search. Recommend max 300 chars at application level."},{"name":"body","type":"string","nullable":true,"description":"Text body for text posts. Nullable for link/image posts."},{"name":"link_url","type":"uri","nullable":true,"description":"External link URL for link posts. Nullable for other post types."},{"name":"image_url","type":"uri","nullable":true,"description":"Representative image URL for image posts (for multi-image support use a separate media table)."},{"name":"status","type":"string","nullable":false,"description":"Moderation state of the post (e.g., 'published', 'pending', 'removed'). Application enforces allowed values."},{"name":"created_at","type":"datetime","nullable":false,"description":"Record creation timestamp (UTC)."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Last update timestamp (UTC)."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft-delete timestamp. Null when not deleted."}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["community_id","created_at"]},{"fieldNames":["author_user_id","created_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body"}]},{"name":"community_portal_comments","description":"Primary entity for comments and nested replies. Stores canonical comment text, parent/post references, author reference, and temporal audit fields. Aggregated vote counters MUST NOT be stored here; surface aggregates via materialized views or event-driven aggregate tables. Preserve comments for audit on user deletion by using nullable author reference and SET NULL semantics. {@link community_portal_posts.id} {@link community_portal_users.id}.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Parent post's {@link community_portal_posts.id}. Comment must belong to a post.","relation":{"name":"post","targetModel":"community_portal_posts"},"unique":false,"nullable":false},{"name":"parent_comment_id","type":"uuid","description":"Optional parent comment's {@link community_portal_comments.id} for nested replies. Nullable for top-level comments.","relation":{"name":"parent","targetModel":"community_portal_comments","mappingName":"recursive"},"unique":false,"nullable":true},{"name":"author_user_id","type":"uuid","description":"Authoring user's {@link community_portal_users.id}. Nullable to allow account deletion while preserving comment audit trail (SET NULL recommended).","relation":{"name":"author","targetModel":"community_portal_users"},"unique":false,"nullable":true}],"plainFields":[{"name":"body","type":"string","nullable":false,"description":"Comment text body. Required for a valid comment."},{"name":"created_at","type":"datetime","nullable":false,"description":"Comment creation timestamp (UTC)."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Last update timestamp (UTC)."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft-delete timestamp. Null when not deleted."}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["post_id","created_at"]},{"fieldNames":["author_user_id","created_at"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"body"}]}]},{"filename":"schema-04-interactions.prisma","namespace":"Interactions","models":[{"name":"community_portal_votes","description":"Vote records for the communityPortal. Stores individual user votes on posts or comments. IMPORTANT: enforce DB-level constraints to guarantee a vote targets exactly one entity (post XOR comment) and to enforce one active vote per (user,target) using partial unique indexes. Because Prisma PSL does not support partial indexes or CHECK constraints natively, implement the CHECK constraint and partial unique indexes via a raw SQL migration. Also prefer soft-delete semantics for parent entities to preserve vote audit.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Voter's {@link community_portal_users.id}.","relation":{"name":"user","targetModel":"community_portal_users"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"Target post {@link community_portal_posts.id}. Nullable — a vote targets either a post OR a comment. Enforce XOR at DB level.","relation":{"name":"post","targetModel":"community_portal_posts"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"Target comment {@link community_portal_comments.id}. Nullable — a vote targets either a comment OR a post. Enforce XOR at DB level.","relation":{"name":"comment","targetModel":"community_portal_comments"},"unique":false,"nullable":true}],"plainFields":[{"name":"value","type":"int","nullable":false,"description":"Vote value: +1 for upvote, -1 for downvote."},{"name":"created_at","type":"datetime","nullable":false,"description":"Record creation timestamp."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Record last updated timestamp."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft-delete timestamp. Null when active."}],"uniqueIndexes":[{"fieldNames":["user_id","post_id"],"unique":true},{"fieldNames":["user_id","comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id","created_at"]},{"fieldNames":["comment_id","created_at"]},{"fieldNames":["user_id","created_at"]}],"ginIndexes":[]},{"name":"community_portal_subscriptions","description":"Subscription records linking users to communities. Represents a user's subscription to a community so it can be included in personalized feeds and notifications. Each subscription references the subscriber ({@\\link community_portal_users.id}) and the community ({@\\link community_portal_communities.id}). Enforces uniqueness on (user_id, community_id) to prevent duplicate subscriptions. Includes timestamps and deleted_at for soft-delete/revocation auditing. Indexes support lookup by user and by community.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"user_id","type":"uuid","description":"Subscriber's {@\\link community_portal_users.id}.","relation":{"name":"user","targetModel":"community_portal_users"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Subscribed community {@\\link community_portal_communities.id}.","relation":{"name":"community","targetModel":"community_portal_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","nullable":false,"description":"Subscription creation timestamp."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Subscription last updated timestamp."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft-delete timestamp for revoked subscriptions."}],"uniqueIndexes":[{"fieldNames":["user_id","community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["user_id","created_at"]},{"fieldNames":["community_id","created_at"]}],"ginIndexes":[]}]},{"filename":"schema-05-moderation.prisma","namespace":"Moderation","models":[{"name":"community_portal_reports","description":"Moderation reports for communityPortal. Records user-submitted reports about posts, comments, or community-level issues. Designed to be an auditable, appendable evidence record: reports must survive deletion of related content or actors. This revised model enforces nullable FKs for audit preservation, documents status semantics, and includes indexing improvements to support moderator inbox and urgent-queue queries.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"reporter_user_id","type":"uuid","description":"Reporting user's {@link community_portal_users.id}. Nullable for anonymous reports. Set NULL on referenced user deletion to preserve audit.","relation":{"name":"reporter","targetModel":"community_portal_users"},"unique":false,"nullable":true},{"name":"community_id","type":"uuid","description":"Related community {@link community_portal_communities.id}. Nullable when the report targets a cross-community item. Set NULL on community deletion to preserve report history.","relation":{"name":"community","targetModel":"community_portal_communities"},"unique":false,"nullable":true},{"name":"post_id","type":"uuid","description":"Target post {@link community_portal_posts.id}. Nullable when the report targets a comment or community-level issue. Set NULL on post deletion to preserve the report record as evidence.","relation":{"name":"post","targetModel":"community_portal_posts"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"Target comment {@link community_portal_comments.id}. Nullable when the report targets a post or community-level issue. Set NULL on comment deletion to preserve the report record as evidence.","relation":{"name":"comment","targetModel":"community_portal_comments"},"unique":false,"nullable":true},{"name":"assigned_moderator_id","type":"uuid","description":"Assigned moderator responsible for initial triage {@link community_portal_moderators.id}. Nullable until assignment. Set NULL if moderator account/assignment is removed to maintain report availability.","relation":{"name":"assignedModerator","targetModel":"community_portal_moderators","mappingName":"community_portal_reports_of_assigned_moderator_id"},"unique":false,"nullable":true},{"name":"closed_by_moderator_id","type":"uuid","description":"Moderator who closed or resolved the report {@link community_portal_moderators.id}. Nullable until the report is closed. Set NULL on moderator deletion to preserve audit trail referencing a historical ID.","relation":{"name":"closedByModerator","targetModel":"community_portal_moderators","mappingName":"community_portal_reports_of_closed_by_moderator_id"},"unique":false,"nullable":true}],"plainFields":[{"name":"reason_code","type":"string","nullable":false,"description":"Controlled reason code for the report (e.g., 'spam', 'harassment', 'hate', 'illegal', 'other'). Application SHOULD enforce a controlled vocabulary; consider DB CHECK or enum in a later migration."},{"name":"reason_text","type":"string","nullable":true,"description":"Optional free-text details provided by the reporter to explain the reason for the report. Useful for moderation context and fuzzy search."},{"name":"status","type":"string","nullable":false,"description":"Report lifecycle state. Allowed values (application-level): 'OPEN', 'IN_REVIEW', 'REQUIRES_ACTION', 'DISMISSED', 'CLOSED'. Document these values and enforce in application logic; consider DB enum/CHECK in migration."},{"name":"is_urgent","type":"boolean","nullable":false,"description":"Whether the reporter flagged this report as urgent and it requires prioritized handling."},{"name":"severity","type":"string","nullable":true,"description":"Severity level for triage (e.g., 'low', 'medium', 'high'). Use alongside is_urgent for prioritization. Application MUST enforce allowed values."},{"name":"reporter_contact_email","type":"string","nullable":true,"description":"Optional contact email captured at report submission for follow-up or anonymous contact. Recommend limiting length (e.g., 254) and validating format at application layer."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the report was created."},{"name":"reviewed_at","type":"datetime","nullable":true,"description":"Timestamp when a moderator first reviewed the report."},{"name":"closed_at","type":"datetime","nullable":true,"description":"Timestamp when the report was resolved/closed."},{"name":"resolution_notes","type":"string","nullable":true,"description":"Optional moderator notes describing the resolution or actions taken. Auditable text; consider GIN indexing if search is supported."}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["status","created_at"]},{"fieldNames":["community_id","created_at"]},{"fieldNames":["post_id","created_at"]},{"fieldNames":["comment_id","created_at"]},{"fieldNames":["reporter_user_id","created_at"]},{"fieldNames":["is_urgent","status","created_at"]},{"fieldNames":["assigned_moderator_id","status","created_at"]},{"fieldNames":["closed_by_moderator_id","closed_at"]}],"ginIndexes":[{"fieldName":"reason_text"},{"fieldName":"resolution_notes"}]}]}]}