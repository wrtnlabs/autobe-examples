import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumGuest } from "../../../structures/IEconPoliticalForumGuest";

/**
 * Register a temporary guest identity and issue guest JWT tokens (uses
 * econ_political_forum_guest table).
 *
 * Purpose and overview: This endpoint registers a temporary guest identity by
 * creating a row in the econ_political_forum_guest table. The request may
 * supply an optional nickname and the server captures the client user_agent. On
 * success the API returns an authorization payload
 * (IEconPoliticalForumGuest.IAuthorized) containing a short-lived access token
 * and a guest refresh token. The created database fields that this operation
 * uses are: econ_political_forum_guest.id (primary key),
 * econ_political_forum_guest.nickname (optional display label),
 * econ_political_forum_guest.user_agent (captured client UA), and
 * econ_political_forum_guest.created_at / updated_at timestamps.
 *
 * Implementation details using confirmed schema fields: When the join request
 * succeeds, the system inserts a new econ_political_forum_guest record and
 * populates nickname and user_agent where provided. The created_at and
 * updated_at columns are set by the database. The response contains
 * authorization tokens but the Prisma schema does not include token columns for
 * guests — token storage or rotation is an application responsibility outside
 * the guest table and should follow secure JWT-refresh best practices.
 *
 * Role-specific integration and business context: This endpoint is public (no
 * prior authentication). It is intended to let unauthenticated visitors obtain
 * a temporary guest identity and tokens to interact with guest-capable client
 * features (for example, to preserve a short-lived draft or allow limited API
 * access for ephemeral sessions). The returned guest identity includes the id
 * that references econ_political_forum_guest.id for traceability in moderation
 * and audit logs.
 *
 * Security considerations within schema constraints: Because the
 * econ_political_forum_guest table contains only non-sensitive fields
 * (nickname, user_agent, timestamps), the system MUST avoid embedding PII in
 * guest records. Tokens are ephemeral and must be implemented with short access
 * token TTLs and rotating refresh tokens. When honoring refresh requests, the
 * implementation MUST verify that the referenced guest id (if used) is not
 * marked removed: the operation MAY check econ_political_forum_guest.deleted_at
 * and reject refresh for entries where deleted_at is set.
 *
 * Related operations and workflow integration: Typical workflow: client calls
 * POST /auth/guest/join → server creates econ_political_forum_guest row and
 * returns IEconPoliticalForumGuest.IAuthorized → client uses access token for
 * authorized guest flows → when access token expires, client calls POST
 * /auth/guest/refresh to rotate tokens. See the companion refresh operation for
 * the refresh flow and validation rules.
 *
 * @param props.connection
 * @param props.body Guest creation payload. Optional nickname and user agent
 *   context. Mapped to econ_political_forum_guest.nickname and
 *   econ_political_forum_guest.user_agent.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Guest creation payload. Optional nickname and user agent context.
     * Mapped to econ_political_forum_guest.nickname and
     * econ_political_forum_guest.user_agent.
     */
    body: IEconPoliticalForumGuest.ICreate;
  };
  export type Body = IEconPoliticalForumGuest.ICreate;
  export type Response = IEconPoliticalForumGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IEconPoliticalForumGuest.IAuthorized =>
    typia.random<IEconPoliticalForumGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Rotate guest refresh token and issue new access token for a guest identity
 * (validates econ_political_forum_guest record).
 *
 * Purpose and overview: This endpoint accepts a guest refresh token and returns
 * a new access token and a rotated refresh token
 * (IEconPoliticalForumGuest.IAuthorized). It is part of the guest token
 * lifecycle and should validate that the guest identity referenced by the token
 * corresponds to an existing econ_political_forum_guest record. The operation
 * references econ_political_forum_guest.id and may consult
 * econ_political_forum_guest.deleted_at to ensure the guest record is active.
 *
 * Implementation details using confirmed schema fields: The Prisma schema
 * contains the econ_political_forum_guest table with id and timestamps but does
 * not include persistent token fields for guests; therefore the refresh
 * operation must validate the presented refresh token against the token store
 * (or stateless JWT revocation plan) and then, if token is valid, optionally
 * confirm the referenced guest id exists in econ_political_forum_guest and that
 * deleted_at is null. The response returns the
 * IEconPoliticalForumGuest.IAuthorized object with new tokens and minimal guest
 * identity information (id and nickname) for client correlation.
 *
 * Role-specific integration and business context: This operation is intended
 * for guest clients that were previously issued a refresh token by the join
 * endpoint. The endpoint enforces that the refresh token belongs to a guest
 * identity and that the identity has not been removed. After successful
 * rotation, updated_at of the guest row may be modified if the implementation
 * records last-seen metadata; that is optional and must respect the
 * econ_political_forum_guest.updated_at field semantics.
 *
 * Security considerations within schema constraints: Because guest records are
 * ephemeral and do not carry PII, refresh tokens should have conservative
 * lifetimes and be rotated on each refresh. The API MUST reject refresh tokens
 * if the linked guest record shows deleted_at set. Implementations SHOULD log
 * refresh events for audit but avoid persisting tokens in the guest table (no
 * token column exists in Prisma schema).
 *
 * Related operations and workflow integration: Typical workflow: client calls
 * POST /auth/guest/refresh with a refresh token → authentication service
 * validates token and optionally checks econ_political_forum_guest.id exists
 * and deleted_at is null → service returns rotated refresh token and new access
 * token in IEconPoliticalForumGuest.IAuthorized format. This complements POST
 * /auth/guest/join which creates the initial guest identity and tokens.
 *
 * @param props.connection
 * @param props.body Refresh request containing the guest refresh token. No
 *   persistent guest-token fields exist in the database; token validation is
 *   handled by the auth service.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh request containing the guest refresh token. No persistent
     * guest-token fields exist in the database; token validation is handled
     * by the auth service.
     */
    body: IEconPoliticalForumGuest.IRefresh;
  };
  export type Body = IEconPoliticalForumGuest.IRefresh;
  export type Response = IEconPoliticalForumGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): IEconPoliticalForumGuest.IAuthorized =>
    typia.random<IEconPoliticalForumGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
