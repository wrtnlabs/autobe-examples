import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../../../structures/IEconPoliticalForumRegisteredUser";

/**
 * Consume reset token, set new password, mark password reset record used, and
 * optionally revoke sessions.
 *
 * Purpose and functionality: Consume a single-use reset token to set a new
 * `password_hash` on the `econ_political_forum_registereduser` record. This
 * operation marks the corresponding `econ_political_forum_password_resets.used`
 * true and sets `used_at`.
 *
 * Implementation details using confirmed schema fields: Request contains the
 * reset token and new password. The server finds the matching
 * `econ_political_forum_password_resets` by hash comparison, verifies
 * `expires_at` and `used == false`, updates
 * `econ_political_forum_registereduser.password_hash`, and sets `used=true` and
 * `used_at` on the reset record. Optionally invalidate
 * `econ_political_forum_sessions` entries by setting `deleted_at` to prevent
 * reuse of old sessions.
 *
 * Role-specific integration and business context: Public endpoint logically,
 * but it requires possession of the reset token. After reset, the account
 * should be able to login with the new password and old refresh tokens should
 * be rotated or invalidated.
 *
 * Security considerations within schema constraints: Ensure token expiry
 * enforcement using `expires_at`. Invalidate existing sessions (update
 * `econ_political_forum_sessions.deleted_at`) and record an audit entry in
 * `econ_political_forum_audit_logs` for the reset event.
 *
 * Related operations and workflow integration: Works together with
 * `requestPasswordReset` and session revocation endpoints.
 *
 * @param props.connection
 * @param props.body Confirm password reset: token and new password.
 * @path /auth/registeredUser/password/confirm-reset
 * @accessor api.functional.auth.registeredUser.password.confirm_reset.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Confirm password reset: token and new password. */
    body: IEconPoliticalForumRegisteredUser.IConfirmPasswordReset;
  };
  export type Body = IEconPoliticalForumRegisteredUser.IConfirmPasswordReset;
  export type Response = IEconPoliticalForumRegisteredUser.IGenericSuccess;

  export const METADATA = {
    method: "POST",
    path: "/auth/registeredUser/password/confirm-reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/password/confirm-reset";
  export const random = (): IEconPoliticalForumRegisteredUser.IGenericSuccess =>
    typia.random<IEconPoliticalForumRegisteredUser.IGenericSuccess>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
