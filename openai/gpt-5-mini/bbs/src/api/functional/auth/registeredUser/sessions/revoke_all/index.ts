import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IEconPoliticalForumRegisteredUser } from "../../../../../structures/IEconPoliticalForumRegisteredUser";

/**
 * Invalidate all sessions for the authenticated user (update
 * econ_political_forum_sessions.deleted_at).
 *
 * Purpose and functionality: Invalidate all active sessions for the
 * authenticated `registeredUser` by marking all `econ_political_forum_sessions`
 * rows for that `registereduser_id` with `deleted_at` timestamp or deleting
 * them. Useful after password reset or account compromise.
 *
 * Implementation details using confirmed schema fields: Requires authentication
 * (authorizationRole: registeredUser). The server updates
 * `econ_political_forum_sessions` where `registereduser_id` matches the caller
 * and `deleted_at` is null, setting `deleted_at` to current time. Record an
 * audit entry in `econ_political_forum_audit_logs`.
 *
 * Role-specific integration and business context: This operation is recommended
 * after `confirmPasswordReset` or `changePassword` to ensure prior refresh
 * tokens cannot be used.
 *
 * Security considerations within schema constraints: Ensure the operation
 * affects only the calling user's sessions. Consider rate-limiting to prevent
 * abuse and log the action for security auditing.
 *
 * Related operations and workflow integration: Pairs with listSessions and
 * revokeSession.
 *
 * @param props.connection
 * @path /auth/registeredUser/sessions/revoke-all
 * @accessor api.functional.auth.registeredUser.sessions.revoke_all.revokeAllSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function revokeAllSessions(
  connection: IConnection,
): Promise<revokeAllSessions.Response> {
  return true === connection.simulate
    ? revokeAllSessions.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...revokeAllSessions.METADATA,
          path: revokeAllSessions.path(),
          status: null,
        },
      );
}
export namespace revokeAllSessions {
  export type Response = IEconPoliticalForumRegisteredUser.IGenericSuccess;

  export const METADATA = {
    method: "POST",
    path: "/auth/registeredUser/sessions/revoke-all",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/sessions/revoke-all";
  export const random = (): IEconPoliticalForumRegisteredUser.IGenericSuccess =>
    typia.random<IEconPoliticalForumRegisteredUser.IGenericSuccess>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
