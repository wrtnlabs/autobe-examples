import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../../../structures/IEconPoliticalForumRegisteredUser";

/**
 * Authenticated endpoint to change the user's password and optionally revoke
 * other sessions.
 *
 * Purpose and functionality: Allows an authenticated registeredUser to change
 * their password by providing the current password and a new password. The
 * system updates `econ_political_forum_registereduser.password_hash` and may
 * optionally invalidate other sessions by updating
 * `econ_political_forum_sessions.deleted_at` for active sessions.
 *
 * Implementation details using confirmed schema fields: This endpoint requires
 * authentication (registeredUser). It accepts `currentPassword` and
 * `newPassword`. The server validates the `currentPassword` against
 * `password_hash`, updates the stored `password_hash` on success, and may set
 * `deleted_at` on other `econ_political_forum_sessions` records to force
 * re-authentication. Record the event in `econ_political_forum_audit_logs`.
 *
 * Role-specific integration and business context: Requires the caller to be
 * authenticated (authorizationRole: registeredUser). Changing passwords should
 * reset or rotate refresh tokens when appropriate to prevent session fixation.
 *
 * Security considerations within schema constraints: Enforce password strength
 * rules consistent with registration. On change, rotate or revoke refresh
 * tokens (update `refresh_token_hash` or `deleted_at` in
 * `econ_political_forum_sessions`). Log the change event for audit.
 *
 * Related operations and workflow integration: Use in combination with
 * `requestPasswordReset` for lost-password scenarios and with session
 * revocation endpoints for logout-all behavior.
 *
 * @param props.connection
 * @param props.body Change password request (requires current and new
 *   password).
 * @path /auth/registeredUser/password/change
 * @accessor api.functional.auth.registeredUser.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Change password request (requires current and new password). */
    body: IEconPoliticalForumRegisteredUser.IChangePassword;
  };
  export type Body = IEconPoliticalForumRegisteredUser.IChangePassword;
  export type Response = IEconPoliticalForumRegisteredUser.IGenericSuccess;

  export const METADATA = {
    method: "PUT",
    path: "/auth/registeredUser/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/password/change";
  export const random = (): IEconPoliticalForumRegisteredUser.IGenericSuccess =>
    typia.random<IEconPoliticalForumRegisteredUser.IGenericSuccess>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
