import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../../../structures/IEconPoliticalForumRegisteredUser";

/**
 * Resend email verification link to a registered user's email address.
 *
 * Purpose and functionality: Allow a user to request the verification email be
 * resent. This only creates a new verification token and triggers the email
 * send; it does not change `email_verified` until the token is consumed.
 *
 * Implementation details using confirmed schema fields: Request includes
 * `email`. If a matching `econ_political_forum_registereduser` exists and
 * `email_verified` is false, the system generates a new verification token,
 * stores or references it appropriately, and sends the verification email.
 * Always return a generic success response to avoid account enumeration.
 *
 * Role-specific integration and business context: Public endpoint. When
 * categories require verification
 * (`econ_political_forum_categories.requires_verification`), this endpoint
 * supports users who need verification to post in those categories.
 *
 * Security considerations within schema constraints: Rate-limit resend
 * requests. Track resend attempts and optionally store resend events in
 * `econ_political_forum_audit_logs`.
 *
 * Related operations and workflow integration: Complements `join` and
 * `verifyEmail` operations.
 *
 * @param props.connection
 * @param props.body Resend verification request containing the account email.
 * @path /auth/registeredUser/verify-email/resend
 * @accessor api.functional.auth.registeredUser.verify_email.resend.resendVerification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resendVerification(
  connection: IConnection,
  props: resendVerification.Props,
): Promise<resendVerification.Response> {
  return true === connection.simulate
    ? resendVerification.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resendVerification.METADATA,
          path: resendVerification.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resendVerification {
  export type Props = {
    /** Resend verification request containing the account email. */
    body: IEconPoliticalForumRegisteredUser.IResendVerification;
  };
  export type Body = IEconPoliticalForumRegisteredUser.IResendVerification;
  export type Response = IEconPoliticalForumRegisteredUser.IGenericSuccess;

  export const METADATA = {
    method: "POST",
    path: "/auth/registeredUser/verify-email/resend",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/verify-email/resend";
  export const random = (): IEconPoliticalForumRegisteredUser.IGenericSuccess =>
    typia.random<IEconPoliticalForumRegisteredUser.IGenericSuccess>();
  export const simulate = (
    connection: IConnection,
    props: resendVerification.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resendVerification.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
