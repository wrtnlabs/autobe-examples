import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../../../structures/IEconPoliticalForumRegisteredUser";

/**
 * Request a password reset; create a password reset record in
 * econ_political_forum_password_resets.
 *
 * Purpose and functionality: Allows a user to request a password reset. The
 * operation creates a row in `econ_political_forum_password_resets` with a
 * `reset_token_hash`, `expires_at`, and `created_at` and sends a one-time reset
 * link to the registered `email` if the email exists.
 *
 * Implementation details using confirmed schema fields: Request takes an
 * `email`. If a matching `econ_political_forum_registereduser.email` exists,
 * create `econ_political_forum_password_resets` with `reset_token_hash`,
 * `expires_at` (short TTL), and `used` false. For security, always return a
 * generic response to avoid account enumeration.
 *
 * Role-specific integration and business context: Public endpoint. It uses the
 * `registereduser` table to find the account but must never reveal whether the
 * email exists in messaging. The association
 * `econ_political_forum_password_resets.registereduser_id` links the reset
 * request to the user.
 *
 * Security considerations within schema constraints: Store only hashed reset
 * tokens (`reset_token_hash`). Enforce expiry (`expires_at`) and single-use
 * (`used` flag). When consumed, set `used` true and record `used_at`.
 *
 * Related operations and workflow integration: Follow-up operation
 * `confirmPasswordReset` consumes the token and updates
 * `econ_political_forum_registereduser.password_hash` and invalidates sessions
 * in `econ_political_forum_sessions`.
 *
 * @param props.connection
 * @param props.body Password reset request containing the account email.
 * @path /auth/registeredUser/password/request-reset
 * @accessor api.functional.auth.registeredUser.password.request_reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Password reset request containing the account email. */
    body: IEconPoliticalForumRegisteredUser.IRequestPasswordReset;
  };
  export type Body = IEconPoliticalForumRegisteredUser.IRequestPasswordReset;
  export type Response = IEconPoliticalForumRegisteredUser.IGenericSuccess;

  export const METADATA = {
    method: "POST",
    path: "/auth/registeredUser/password/request-reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/password/request-reset";
  export const random = (): IEconPoliticalForumRegisteredUser.IGenericSuccess =>
    typia.random<IEconPoliticalForumRegisteredUser.IGenericSuccess>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
