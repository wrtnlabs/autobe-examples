import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../structures/IEconPoliticalForumRegisteredUser";
export * as password from "./password/index";
export * as verify_email from "./verify_email/index";
export * as sessions from "./sessions/index";

/**
 * Register a new registeredUser and issue initial authorization tokens (uses
 * econ_political_forum_registereduser and econ_political_forum_sessions).
 *
 * Purpose and functionality: This operation registers a new member
 * (registeredUser) by creating a new record in the
 * `econ_political_forum_registereduser` table and, on success, creates an
 * initial session entry in `econ_political_forum_sessions` and returns an
 * authorized response containing access and refresh tokens.
 *
 * Implementation details using confirmed schema fields: The request captures
 * `username`, `email`, optional `display_name`, and `password` (plaintext
 * submitted to API). The backend must store a secure `password_hash` in
 * `econ_political_forum_registereduser.password_hash` and create a session row
 * in `econ_political_forum_sessions` (setting `session_token`,
 * `refresh_token_hash`, `expires_at`, `created_at`). The operation will set
 * `email_verified` to false and leave `verified_at` null until verification
 * occurs.
 *
 * Role-specific integration and business context: Public endpoint for new
 * accounts. New accounts are created with `failed_login_attempts` defaulting to
 * 0 and `locked_until` null. If the category rules require verification for
 * posting, the `requires_verification` category flag will be respected at
 * publish time (this operation only creates the account and session).
 *
 * Security considerations within schema constraints: Do not store plaintext
 * passwords â€” compute and store `password_hash`. Issue short-lived access
 * tokens and longer-lived refresh tokens; store only a hash of the refresh
 * token in `econ_political_forum_sessions.refresh_token_hash`. Record
 * `created_at` and `expires_at` for sessions. Validate email uniqueness against
 * `econ_political_forum_registereduser.email` (unique constraint).
 *
 * Related operations and workflow integration: After join, clients should call
 * verifyEmail (if email verification is used) and may call login/refresh flows.
 * Moderation and site settings (econ_political_forum_site_settings) may affect
 * registration behavior (e.g., registration disabled).
 *
 * @param props.connection
 * @param props.body Registration request for new registeredUser.
 * @setHeader token.access Authorization
 *
 * @path /auth/registeredUser/join
 * @accessor api.functional.auth.registeredUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Registration request for new registeredUser. */
    body: IEconPoliticalForumRegisteredUser.IJoin;
  };
  export type Body = IEconPoliticalForumRegisteredUser.IJoin;
  export type Response = IEconPoliticalForumRegisteredUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/registeredUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/join";
  export const random = (): IEconPoliticalForumRegisteredUser.IAuthorized =>
    typia.random<IEconPoliticalForumRegisteredUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a registeredUser and return authorization tokens (updates
 * econ_political_forum_registereduser.last_login_at and creates
 * econ_political_forum_sessions).
 *
 * Purpose and functionality: Authenticate a registeredUser by verifying
 * submitted credentials against
 * `econ_political_forum_registereduser.password_hash`. On successful
 * authentication, create a session entry in `econ_political_forum_sessions`
 * containing `session_token` (or session id), `refresh_token_hash`,
 * `expires_at`, `created_at`, and `last_active_at` for tracking.
 *
 * Implementation details using confirmed schema fields: The request accepts
 * `usernameOrEmail` and `password`. On success, update `last_login_at` in
 * `econ_political_forum_registereduser` and reset `failed_login_attempts` to 0.
 * Create a new `econ_political_forum_sessions` row with `session_token` and a
 * hashed `refresh_token_hash` and return an authorized response with access and
 * refresh tokens.
 *
 * Role-specific integration and business context: This endpoint is public and
 * intended for registered users with local credentials. The system must enforce
 * `failed_login_attempts` and `locked_until` semantics: if
 * `failed_login_attempts` exceeds configured thresholds, set `locked_until` and
 * refuse authentication until expiry.
 *
 * Security considerations within schema constraints: Do not expose whether the
 * username or email exists in error messages; return a generic authentication
 * failure. On successful authentication, record `last_login_at` and create
 * `econ_political_forum_sessions` entry. Store only hashed refresh tokens in
 * `refresh_token_hash`.
 *
 * Related operations and workflow integration: After login, clients use
 * returned tokens for protected endpoints and may call revokeAllSessions or
 * listSessions to manage active sessions.
 *
 * @param props.connection
 * @param props.body Login payload containing username/email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/registeredUser/login
 * @accessor api.functional.auth.registeredUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login payload containing username/email and password. */
    body: IEconPoliticalForumRegisteredUser.ILogin;
  };
  export type Body = IEconPoliticalForumRegisteredUser.ILogin;
  export type Response = IEconPoliticalForumRegisteredUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/registeredUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/login";
  export const random = (): IEconPoliticalForumRegisteredUser.IAuthorized =>
    typia.random<IEconPoliticalForumRegisteredUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Rotate refresh token and return new access and refresh tokens (validates and
 * updates econ_political_forum_sessions).
 *
 * Purpose and functionality: Accept a refresh token and issue a new short-lived
 * access token and a rotated refresh token. The operation validates the
 * presented refresh token against the stored
 * `econ_political_forum_sessions.refresh_token_hash` and, on success, writes a
 * rotation record (update `refresh_token_hash`, `updated_at`, and
 * `expires_at`).
 *
 * Implementation details using confirmed schema fields: Request contains the
 * refresh token. The server must look up the session by `session_token` or
 * validate by hashed `refresh_token_hash`. On rotation, update
 * `econ_political_forum_sessions.refresh_token_hash`, set a new `expires_at`,
 * and update `last_active_at`.
 *
 * Role-specific integration and business context: Public endpoint in the sense
 * it accepts refresh tokens â€” no bearer access token is required to call it.
 * However, the refresh token must match a valid session in
 * `econ_political_forum_sessions` and not be revoked (`deleted_at` null).
 *
 * Security considerations within schema constraints: Reject reused or
 * invalidated refresh tokens (if a rotated token is reused, treat as suspicious
 * and revoke sessions). Record rotation events in
 * `econ_political_forum_audit_logs` if required for security auditing.
 *
 * Related operations and workflow integration: Clients should call this
 * endpoint before access token expiry. Use revokeSession or revokeAllSessions
 * to invalidate sessions.
 *
 * @param props.connection
 * @param props.body Refresh request containing refresh token.
 * @setHeader token.access Authorization
 *
 * @path /auth/registeredUser/refresh
 * @accessor api.functional.auth.registeredUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh request containing refresh token. */
    body: IEconPoliticalForumRegisteredUser.IRefresh;
  };
  export type Body = IEconPoliticalForumRegisteredUser.IRefresh;
  export type Response = IEconPoliticalForumRegisteredUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/registeredUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/refresh";
  export const random = (): IEconPoliticalForumRegisteredUser.IAuthorized =>
    typia.random<IEconPoliticalForumRegisteredUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
