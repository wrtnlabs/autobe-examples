import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../../structures/IEconPoliticalForumRegisteredUser";
export * as resend from "./resend/index";

/**
 * Mark registered user's email as verified by updating email_verified and
 * verified_at fields.
 *
 * Purpose and functionality: Verifies the user's email address and updates
 * `econ_political_forum_registereduser.email_verified` to true and sets
 * `verified_at` to the verification timestamp.
 *
 * Implementation details using confirmed schema fields: Request contains a
 * verification token (one-time token). On verification, update
 * `econ_political_forum_registereduser.email_verified = true` and set
 * `verified_at` to current timestamp. Do not assume any special verification
 * storage table â€” applications may encode verification tokens that map to the
 * user identity.
 *
 * Role-specific integration and business context: Public endpoint used after
 * registration. Some categories flagged with
 * `econ_political_forum_categories.requires_verification` require
 * `email_verified == true` before content creation; this operation enables
 * those privileges.
 *
 * Security considerations within schema constraints: Tokens must be single-use
 * and short-lived. If token invalid or expired, return an appropriate error and
 * offer resend via `resendVerification`.
 *
 * Related operations and workflow integration: Used after `join`. The system
 * should reconcile `email_verified` state before permitting posts in restricted
 * categories.
 *
 * @param props.connection
 * @param props.body Email verification confirmation containing verification
 *   token.
 * @path /auth/registeredUser/verify-email
 * @accessor api.functional.auth.registeredUser.verify_email.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification confirmation containing verification token. */
    body: IEconPoliticalForumRegisteredUser.IVerifyEmail;
  };
  export type Body = IEconPoliticalForumRegisteredUser.IVerifyEmail;
  export type Response = IEconPoliticalForumRegisteredUser.IGenericSuccess;

  export const METADATA = {
    method: "POST",
    path: "/auth/registeredUser/verify-email",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/verify-email";
  export const random = (): IEconPoliticalForumRegisteredUser.IGenericSuccess =>
    typia.random<IEconPoliticalForumRegisteredUser.IGenericSuccess>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
