import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../../structures/IEconPoliticalForumRegisteredUser";
export * as revoke_all from "./revoke_all/index";

/**
 * Return the authenticated user's active sessions from
 * econ_political_forum_sessions.
 *
 * Purpose and functionality: Return the list of active sessions for the calling
 * `registeredUser` by querying `econ_political_forum_sessions` rows filtered by
 * `registereduser_id` and `deleted_at` null. Provide `created_at`,
 * `last_active_at`, `ip_address` and `user_agent` per session for the user to
 * manage their sessions.
 *
 * Implementation details using confirmed schema fields: This is an
 * authenticated endpoint (authorizationRole: registeredUser). The server
 * queries `econ_political_forum_sessions` where `registereduser_id` matches the
 * caller and `deleted_at` is null. Include `expires_at`, `created_at`,
 * `last_active_at`, and session identifier (id or session_token id) in
 * response.
 *
 * Role-specific integration and business context: Used by users to review and
 * optionally revoke sessions (see revokeSession/revokeAllSessions). Only
 * sessions for the requesting user should be returned.
 *
 * Security considerations within schema constraints: Redact sensitive session
 * data if required. Provide session ids compatible with `revokeSession`
 * endpoint. Paginate results if there are many sessions.
 *
 * Related operations and workflow integration: Pairs with revokeSession and
 * revokeAllSessions endpoints to enable session management.
 *
 * @param props.connection
 * @path /auth/registeredUser/sessions
 * @accessor api.functional.auth.registeredUser.sessions.listSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function listSessions(
  connection: IConnection,
): Promise<listSessions.Response> {
  return true === connection.simulate
    ? listSessions.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...listSessions.METADATA,
          path: listSessions.path(),
          status: null,
        },
      );
}
export namespace listSessions {
  export type Response = IEconPoliticalForumRegisteredUser.ISessionList;

  export const METADATA = {
    method: "GET",
    path: "/auth/registeredUser/sessions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredUser/sessions";
  export const random = (): IEconPoliticalForumRegisteredUser.ISessionList =>
    typia.random<IEconPoliticalForumRegisteredUser.ISessionList>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Revoke a specific session belonging to the authenticated user (update
 * econ_political_forum_sessions.deleted_at).
 *
 * Purpose and functionality: Allow a registeredUser to revoke (sign out) a
 * specific session by session id. The server marks the session row in
 * `econ_political_forum_sessions.deleted_at` (or deletes it) to prevent further
 * token usage.
 *
 * Implementation details using confirmed schema fields: Requires authenticated
 * caller (authorizationRole: registeredUser). Path parameter `sessionId`
 * references `econ_political_forum_sessions.id`. Validate ownership by
 * comparing `registereduser_id`. On success, set `deleted_at` to current
 * timestamp (or delete row) and record an audit entry in
 * `econ_political_forum_audit_logs`.
 *
 * Role-specific integration and business context: Users can remove stale or
 * compromised sessions individually. Administrators and moderators have other
 * workflows for account-wide revocation.
 *
 * Security considerations within schema constraints: Ensure only the owning
 * user can revoke sessions; validate that `sessionId` belongs to the caller.
 * Log revocation action for auditability.
 *
 * Related operations and workflow integration: Works with listSessions and
 * revokeAllSessions for full session management.
 *
 * @param props.connection
 * @param props.sessionId Target session's ID
 * @path /auth/registeredUser/sessions/:sessionId
 * @accessor api.functional.auth.registeredUser.sessions.revokeSession
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function revokeSession(
  connection: IConnection,
  props: revokeSession.Props,
): Promise<revokeSession.Response> {
  return true === connection.simulate
    ? revokeSession.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...revokeSession.METADATA,
          path: revokeSession.path(props),
          status: null,
        },
      );
}
export namespace revokeSession {
  export type Props = {
    /** Target session's ID */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumRegisteredUser.IGenericSuccess;

  export const METADATA = {
    method: "DELETE",
    path: "/auth/registeredUser/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auth/registeredUser/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): IEconPoliticalForumRegisteredUser.IGenericSuccess =>
    typia.random<IEconPoliticalForumRegisteredUser.IGenericSuccess>();
  export const simulate = (
    connection: IConnection,
    props: revokeSession.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: revokeSession.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
