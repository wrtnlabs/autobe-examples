import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumModerator } from "../../../../../structures/IEconPoliticalForumModerator";

/**
 * Confirm password reset and update password (consume
 * econ_political_forum_password_resets token).
 *
 * Purpose and functionality: This endpoint consumes a previously issued
 * password reset token and sets a new password for the account by updating
 * econ_political_forum_registereduser.password_hash. It marks the corresponding
 * econ_political_forum_password_resets record used=true and sets used_at for
 * audit.
 *
 * Implementation details and required fields: The request body must include the
 * reset token and the new password. The implementation must validate the
 * reset_token against reset_token_hash and ensure expires_at has not passed and
 * used is false. On success it must update password_hash on
 * econ_political_forum_registereduser, set
 * econ_political_forum_password_resets.used and used_at, and invalidate active
 * sessions (set deleted_at on relevant econ_political_forum_sessions) to force
 * re-authentication.
 *
 * Role-specific integration and business context: This flow supports both
 * moderators and general registered users; when applied to a moderator account
 * it has immediate effect on their ability to authenticate for moderation
 * actions. The operation should record an audit entry in
 * econ_political_forum_audit_logs indicating the password change event for the
 * account.
 *
 * Security considerations within schema constraints: Reset tokens must be
 * single-use and are stored hashed (reset_token_hash). After a successful
 * reset, refresh tokens and sessions must be invalidated for safety
 * (econ_political_forum_sessions.deleted_at). The password must meet platform
 * password policy before updating password_hash.
 *
 * Related operations and workflow integration: This operation ties back to the
 * requestPasswordReset endpoint and is part of the account recovery workflow;
 * administrators may also perform password resets in exceptional circumstances
 * using admin tools that must record appropriate audit logs.
 *
 * @param props.connection
 * @param props.body Password reset confirmation containing reset token and new
 *   password.
 * @path /auth/moderator/password/confirm
 * @accessor api.functional.auth.moderator.password.confirm.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Password reset confirmation containing reset token and new password. */
    body: IEconPoliticalForumModerator.IPasswordResetConfirm;
  };
  export type Body = IEconPoliticalForumModerator.IPasswordResetConfirm;
  export type Response = IEconPoliticalForumModerator.IPasswordResetConfirmAck;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/password/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/password/confirm";
  export const random =
    (): IEconPoliticalForumModerator.IPasswordResetConfirmAck =>
      typia.random<IEconPoliticalForumModerator.IPasswordResetConfirmAck>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
