import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumModerator } from "../../../../../structures/IEconPoliticalForumModerator";

/**
 * Request password reset (create econ_political_forum_password_resets entry).
 *
 * Purpose and functionality: This endpoint initiates a password recovery flow
 * for a moderator-capable registered user. It creates a new
 * econ_political_forum_password_resets record containing reset_token_hash and
 * expires_at and returns an acknowledgement to the requester. The record
 * references econ_political_forum_registereduser via registereduser_id.
 *
 * Implementation details and required fields: The request body requires the
 * account identifier (email). The implementation must not reveal whether the
 * email exists to callers in public responses; the operation should always
 * return a generic success acknowledgement while creating a password reset
 * record when the account exists. The password reset record fields referenced
 * include reset_token_hash, expires_at, used, used_at, and created_at.
 *
 * Role-specific integration and business context: Even though this endpoint is
 * public, it is used by moderator candidates and moderators alike and must
 * respect rate limits to prevent abuse. After a successful password reset,
 * active sessions in econ_political_forum_sessions should be invalidated to
 * force re-authentication.
 *
 * Security considerations within schema constraints: Reset tokens are stored
 * hashed (reset_token_hash) and expire (expires_at). The implementation must
 * enforce single-use semantics (used boolean and used_at timestamp). Email
 * templates must not leak sensitive information.
 *
 * Related operations and workflow integration: This operation pairs with a
 * confirm/reset-complete endpoint that consumes the token and updates
 * econ_political_forum_registereduser.password_hash and sets
 * econ_political_forum_password_resets.used and used_at.
 *
 * @param props.connection
 * @param props.body Password reset request containing account email for which
 *   to issue a reset token.
 * @path /auth/moderator/password/reset
 * @accessor api.functional.auth.moderator.password.reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /**
     * Password reset request containing account email for which to issue a
     * reset token.
     */
    body: IEconPoliticalForumModerator.IPasswordResetRequest;
  };
  export type Body = IEconPoliticalForumModerator.IPasswordResetRequest;
  export type Response = IEconPoliticalForumModerator.IPasswordResetRequestAck;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/password/reset";
  export const random =
    (): IEconPoliticalForumModerator.IPasswordResetRequestAck =>
      typia.random<IEconPoliticalForumModerator.IPasswordResetRequestAck>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
