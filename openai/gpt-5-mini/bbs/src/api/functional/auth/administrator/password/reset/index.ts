import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumAdministrator } from "../../../../../structures/IEconPoliticalForumAdministrator";
export * as confirm from "./confirm/index";

/**
 * Request a password reset (creates econ_political_forum_password_resets
 * entry).
 *
 * Purpose and overview: Allows an administrator to request a password reset for
 * their account. This operation creates a new row in
 * econ_political_forum_password_resets with reset_token_hash and expires_at,
 * and sends a single-use reset link to the registered email address associated
 * with the econ_political_forum_registereduser record.
 *
 * Implementation details and schema references: Persist only a hash of the
 * issued token (reset_token_hash) and set an expiry in the expires_at field.
 * The password_resets.used and used_at fields will be updated upon successful
 * reset. The action should create an audit entry in
 * econ_political_forum_audit_logs describing the reset request.
 *
 * Role-specific integration and business context: This endpoint is public (for
 * account recovery) but should be rate-limited and protected by anti-abuse
 * checks. The operation references econ_political_forum_registereduser.email to
 * deliver the reset message.
 *
 * Security considerations: Limit resend attempts (e.g., 5 per 24h). Ensure
 * reset_token_hash is unpredictable and single-use. Upon successful password
 * reset, invalidate existing sessions (econ_political_forum_sessions) and
 * record session revocation events.
 *
 * Related operations and workflow integration: Followed by POST
 * /auth/administrator/password/reset/confirm which consumes the reset token and
 * updates econ_political_forum_registereduser.password_hash.
 *
 * @param props.connection
 * @param props.body Password reset request containing the administrator's email
 * @path /auth/administrator/password/reset
 * @accessor api.functional.auth.administrator.password.reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Password reset request containing the administrator's email */
    body: IEconPoliticalForumAdministrator.IRequestPasswordReset;
  };
  export type Body = IEconPoliticalForumAdministrator.IRequestPasswordReset;
  export type Response = IEconPoliticalForumAdministrator.IResetRequestResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/password/reset";
  export const random =
    (): IEconPoliticalForumAdministrator.IResetRequestResponse =>
      typia.random<IEconPoliticalForumAdministrator.IResetRequestResponse>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
