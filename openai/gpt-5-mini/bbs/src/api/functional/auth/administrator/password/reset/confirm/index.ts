import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumAdministrator } from "../../../../../../structures/IEconPoliticalForumAdministrator";

/**
 * Confirm and apply a password reset using a one-time token (updates
 * password_hash).
 *
 * Purpose and overview: This endpoint consumes a single-use reset token and
 * sets a new password for the administrator account. It updates the
 * password_hash field on econ_political_forum_registereduser and marks the
 * corresponding econ_political_forum_password_resets record as used (used =
 * true, used_at timestamp). It should also invalidate active sessions in
 * econ_political_forum_sessions for the account.
 *
 * Implementation details and schema references: Match the provided token
 * against reset_token_hash (compare hashes). On success, set password_hash on
 * registered user, set used and used_at on the password_resets row, and
 * optionally create a new session or require login. Record an audit entry in
 * econ_political_forum_audit_logs.
 *
 * Role-specific integration and business context: This operation finalizes
 * account recovery flows for administrators and must be protected by strict
 * token expiry (password_resets.expires_at) and single-use semantics.
 *
 * Security considerations: Invalidate all existing refresh tokens/sessions for
 * the user after a successful reset. Notify the account email of the reset
 * event. Rate-limit token verification attempts to reduce brute-force risk.
 *
 * Related operations and workflow integration: Invoked after POST
 * /auth/administrator/password/reset. May redirect to POST
 * /auth/administrator/login on success or return tokens depending on security
 * policy.
 *
 * @param props.connection
 * @param props.body Password reset confirmation payload including token and new
 *   password
 * @path /auth/administrator/password/reset/confirm
 * @accessor api.functional.auth.administrator.password.reset.confirm.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Password reset confirmation payload including token and new password */
    body: IEconPoliticalForumAdministrator.IConfirmPasswordReset;
  };
  export type Body = IEconPoliticalForumAdministrator.IConfirmPasswordReset;
  export type Response = IEconPoliticalForumAdministrator.IResetConfirmResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/password/reset/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/password/reset/confirm";
  export const random =
    (): IEconPoliticalForumAdministrator.IResetConfirmResponse =>
      typia.random<IEconPoliticalForumAdministrator.IResetConfirmResponse>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
