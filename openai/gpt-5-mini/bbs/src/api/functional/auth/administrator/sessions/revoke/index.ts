import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumAdministrator } from "../../../../../structures/IEconPoliticalForumAdministrator";

/**
 * List and revoke administrator sessions (manage
 * econ_political_forum_sessions).
 *
 * Purpose and overview: Provide administrators the ability to list their active
 * sessions and revoke sessions for security. The operation reads
 * econ_political_forum_sessions rows related to the requesting administrator's
 * registereduser_id and can soft-revoke sessions by setting deleted_at or
 * clearing refresh_token_hash.
 *
 * Implementation details and schema references: Listing reads fields: id,
 * created_at, last_active_at, ip_address, user_agent, expires_at, deleted_at.
 * Revocation updates econ_political_forum_sessions.deleted_at and updated_at.
 * All changes must be recorded in econ_political_forum_audit_logs for
 * traceability.
 *
 * Role-specific integration and business context: This endpoint requires
 * administrator authorization (authorizationRole: "administrator").
 * Administrators use it to secure their account or investigate suspicious
 * activity. Revoking sessions should cause immediate denial of subsequent
 * refresh attempts that reference rotated/inactivated refresh_token_hash.
 *
 * Security considerations: Ensure the caller can only list/revoke sessions for
 * the target administrator account (or globally if policy allows and caller is
 * a super administrator). Record all revocations in audit logs; consider
 * returning the count of affected sessions.
 *
 * Related operations and workflow integration: Related to POST
 * /auth/administrator/refresh (rotations), POST /auth/administrator/login
 * (issuance), and audit log retrieval endpoints.
 *
 * @param props.connection
 * @param props.body Optional revoke payload (list of session ids to revoke) or
 *   null to only list sessions
 * @path /auth/administrator/sessions/revoke
 * @accessor api.functional.auth.administrator.sessions.revoke.revokeSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function revokeSessions(
  connection: IConnection,
  props: revokeSessions.Props,
): Promise<revokeSessions.Response> {
  return true === connection.simulate
    ? revokeSessions.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...revokeSessions.METADATA,
          path: revokeSessions.path(),
          status: null,
        },
        props.body,
      );
}
export namespace revokeSessions {
  export type Props = {
    /**
     * Optional revoke payload (list of session ids to revoke) or null to
     * only list sessions
     */
    body: IEconPoliticalForumAdministrator.ISessionsRevokeRequest;
  };
  export type Body = IEconPoliticalForumAdministrator.ISessionsRevokeRequest;
  export type Response = IEconPoliticalForumAdministrator.ISessionsListResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/sessions/revoke",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/sessions/revoke";
  export const random =
    (): IEconPoliticalForumAdministrator.ISessionsListResponse =>
      typia.random<IEconPoliticalForumAdministrator.ISessionsListResponse>();
  export const simulate = (
    connection: IConnection,
    props: revokeSessions.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: revokeSessions.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
