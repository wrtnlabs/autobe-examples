import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumAdministrator } from "../../../../../structures/IEconPoliticalForumAdministrator";

/**
 * Change password for authenticated administrator (updates password_hash).
 *
 * Purpose and overview: Allow an authenticated administrator to change their
 * password. This operation updates the password_hash on the associated
 * econ_political_forum_registereduser row and records the change in
 * econ_political_forum_audit_logs. For safety, it also triggers session
 * invalidation according to policy.
 *
 * Implementation details and schema references: Validate the caller is an
 * authenticated administrator (session token mapping to
 * econ_political_forum_sessions and registered user linked to
 * econ_political_forum_administrator). Update registereduser.password_hash, set
 * updated_at, and optionally increment audit entries. Optionally set
 * locked_until to null and reset failed_login_attempts.
 *
 * Role-specific integration and business context: This endpoint is intended for
 * administrators (authorizationRole: "administrator"). It requires the caller
 * to present a valid access token. After password change, implementation should
 * revoke other sessions (update econ_political_forum_sessions.deleted_at) and
 * record revocation in audit logs.
 *
 * Security considerations: Require current password or a valid fresh token.
 * Ensure the new password meets strength rules and do not return password data.
 * Record an audit entry and notify the account email of the change.
 *
 * Related operations and workflow integration: Related to session revocation
 * endpoints and password reset flows; may be used in conjunction with POST
 * /auth/administrator/sessions/revoke.
 *
 * @param props.connection
 * @param props.body Payload containing current password and new password
 * @path /auth/administrator/password/change
 * @accessor api.functional.auth.administrator.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Payload containing current password and new password */
    body: IEconPoliticalForumAdministrator.IChangePassword;
  };
  export type Body = IEconPoliticalForumAdministrator.IChangePassword;
  export type Response =
    IEconPoliticalForumAdministrator.IChangePasswordResponse;

  export const METADATA = {
    method: "PUT",
    path: "/auth/administrator/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/password/change";
  export const random =
    (): IEconPoliticalForumAdministrator.IChangePasswordResponse =>
      typia.random<IEconPoliticalForumAdministrator.IChangePasswordResponse>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
