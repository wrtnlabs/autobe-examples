import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumPost } from "../../../../structures/IEconPoliticalForumPost";
import { IPageIEconPoliticalForumPost } from "../../../../structures/IPageIEconPoliticalForumPost";

/**
 * Search and retrieve posts in a thread with pagination and filters
 * (econ_political_forum_posts).
 *
 * Complex search endpoint for posts in a thread. Accepts a request payload with
 * filters (authorId, parentId, search text, date range), pagination
 * (cursor/limit or page/pageSize), and sort options (newest, oldest,
 * most_voted). By default returns visible posts only.
 * includeHidden/includeDeleted flags are honored only for
 * moderator/administrator callers; unprivileged callers providing those flags
 * SHALL receive 403. Validate threadId as UUID and return 404 if thread not
 * found. Max pageSize = 100.
 *
 * Errors: 400 invalid payload or UUIDs, 401 authentication required for
 * privileged flags, 403 attempting to access restricted content, 404 thread not
 * found, 429 rate limit, 500 server error.
 *
 * @param props.connection
 * @param props.threadId Unique identifier (UUID) of the thread whose posts are
 *   being queried
 * @param props.body Search and pagination parameters for retrieving posts
 *   within the thread
 * @path /econPoliticalForum/threads/:threadId/posts
 * @accessor api.functional.econPoliticalForum.threads.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier (UUID) of the thread whose posts are being queried */
    threadId: string & tags.Format<"uuid">;

    /**
     * Search and pagination parameters for retrieving posts within the
     * thread
     */
    body: IEconPoliticalForumPost.IRequest;
  };
  export type Body = IEconPoliticalForumPost.IRequest;
  export type Response = IPageIEconPoliticalForumPost;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/threads/:threadId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econPoliticalForum/threads/${encodeURIComponent(props.threadId ?? "null")}/posts`;
  export const random = (): IPageIEconPoliticalForumPost =>
    typia.random<IPageIEconPoliticalForumPost>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
