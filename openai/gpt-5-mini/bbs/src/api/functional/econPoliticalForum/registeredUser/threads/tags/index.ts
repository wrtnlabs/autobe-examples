import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumThreadTag } from "../../../../../structures/IEconPoliticalForumThreadTag";

/**
 * Attach an existing tag to a thread (create thread_tag association).
 *
 * Attach an existing tag to a thread.
 *
 * Purpose and overview: This endpoint creates a new mapping between a thread
 * and an existing tag by writing to econ_political_forum_thread_tags. It
 * improves discovery and tag-based filtering.
 *
 * Security and permissions: Caller must be authenticated. Server MUST verify
 * the caller is either the thread author or has a privileged role
 * (moderator/admin) before allowing the attachment. All operations MUST be
 * logged to the moderation/audit log for traceability.
 *
 * Validation and business rules: Validate path parameter threadId and request
 * body tagId as UUIDs. Confirm both thread and tag exist and are not
 * soft-deleted. If an active mapping exists return 200 with the existing
 * mapping. If a soft-deleted mapping exists, reactivate it (set deleted_at =
 * null) and return the reactivated mapping. On unique-constraint conflict due
 * to concurrency, use transactional upsert or return the canonical mapping;
 * clients are encouraged to send an Idempotency-Key header to avoid
 * duplicates.
 *
 * Error handling: 400 for invalid input, 401/403 for auth/permission failures,
 * 404 if thread or tag not found/archived, 409 for unrecoverable
 * unique-constraint failures only, 500 for server errors.
 *
 * @param props.connection
 * @param props.threadId UUID of the target thread
 *   (econ_political_forum_threads.id)
 * @param props.body Creation payload: provide tagId (UUID) to attach to the
 *   thread. Example: { "tagId": "..." }
 * @path /econPoliticalForum/registeredUser/threads/:threadId/tags
 * @accessor api.functional.econPoliticalForum.registeredUser.threads.tags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the target thread (econ_political_forum_threads.id) */
    threadId: string & tags.Format<"uuid">;

    /**
     * Creation payload: provide tagId (UUID) to attach to the thread.
     * Example: { "tagId": "..." }
     */
    body: IEconPoliticalForumThreadTag.ICreate;
  };
  export type Body = IEconPoliticalForumThreadTag.ICreate;
  export type Response = IEconPoliticalForumThreadTag;

  export const METADATA = {
    method: "POST",
    path: "/econPoliticalForum/registeredUser/threads/:threadId/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econPoliticalForum/registeredUser/threads/${encodeURIComponent(props.threadId ?? "null")}/tags`;
  export const random = (): IEconPoliticalForumThreadTag =>
    typia.random<IEconPoliticalForumThreadTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
