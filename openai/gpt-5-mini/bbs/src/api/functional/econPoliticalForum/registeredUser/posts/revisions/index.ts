import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumPostRevision } from "../../../../../structures/IEconPoliticalForumPostRevision";
import { IPageIEconPoliticalForumPostRevision } from "../../../../../structures/IPageIEconPoliticalForumPostRevision";

/**
 * List and filter post revision snapshots
 * (econ_political_forum_post_revisions).
 *
 * Purpose and overview: Returns a paginated list of revision snapshots for the
 * specified post (fields: id, post_id, editor_id, content, note, created_at).
 * The table is append-only and intended for author review and appeals. By
 * default the server may return content excerpts; full snapshots are returned
 * only to authorized callers or when explicitly requested.
 *
 * Security and permissions:
 *
 * - Post authors may view their own revisions (with redaction rules applied as
 *   needed).
 * - Moderators and administrators may view all revisions and editor metadata;
 *   such accesses must be audited.
 *
 * Request and filters:
 *
 * - Supports pagination via cursor or page/limit with defaults (e.g., default
 *   pageSize=20, max=200).
 * - Optional filters: from (ISO datetime), to (ISO datetime), editor_id (UUID).
 * - Sort: created_at asc|desc.
 *
 * Responses:
 *
 * - 200 OK with paginated payload (IPageIEconPoliticalForumPostRevision)
 * - 400 Bad Request for invalid filters
 * - 403 Forbidden for unauthorized access
 * - 404 Not Found if postId is unknown
 *
 * @param props.connection
 * @param props.postId Identifier of the post whose revisions are being queried
 *   (econ_political_forum_posts.id)
 * @param props.body Filtering, sorting and pagination parameters for post
 *   revisions
 * @path /econPoliticalForum/registeredUser/posts/:postId/revisions
 * @accessor api.functional.econPoliticalForum.registeredUser.posts.revisions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Identifier of the post whose revisions are being queried
     * (econ_political_forum_posts.id)
     */
    postId: string & tags.Format<"uuid">;

    /** Filtering, sorting and pagination parameters for post revisions */
    body: IEconPoliticalForumPostRevision.IRequest;
  };
  export type Body = IEconPoliticalForumPostRevision.IRequest;
  export type Response = IPageIEconPoliticalForumPostRevision;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/registeredUser/posts/:postId/revisions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econPoliticalForum/registeredUser/posts/${encodeURIComponent(props.postId ?? "null")}/revisions`;
  export const random = (): IPageIEconPoliticalForumPostRevision =>
    typia.random<IPageIEconPoliticalForumPostRevision>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single post revision.
 *
 * Purpose and overview:
 *
 * Retrieve a specific post revision (historical snapshot) produced by the post
 * revision audit system. Each revision row contains the full post content at
 * the time of the revision, optional editor id, and created_at timestamp as
 * stored in the Prisma table `econ_political_forum_post_revisions`.
 *
 * Security considerations and permissions:
 *
 * Access to revision snapshots is restricted. This role-specific endpoint is
 * intended for the registering user (owner) workflow: the caller must be
 * authenticated as the post author and ownership must be verified server-side.
 * Moderators and administrators must use their respective endpoints.
 * Unauthorized calls must return 401/403 as appropriate. All accesses should be
 * logged in audit records when applicable.
 *
 * Validation rules and business logic:
 *
 * - Validate `postId` and `revisionId` are valid UUIDs.
 * - Confirm the revision belongs to the specified post (revision.post_id ==
 *   postId).
 * - Enforce access control: only the post author may retrieve this endpoint;
 *   moderators/administrators use their endpoints.
 * - If the revision or post is not found, return 404. If found but unauthorized,
 *   return 403.
 *
 * Errors: 400 for invalid parameters, 401 for unauthenticated, 403 for
 * unauthorized, 404 for not found, 500 for server errors.
 *
 * @param props.connection
 * @param props.postId Unique identifier (UUID) of the parent post that the
 *   revision belongs to
 * @param props.revisionId Unique identifier (UUID) of the revision snapshot to
 *   retrieve
 * @path /econPoliticalForum/registeredUser/posts/:postId/revisions/:revisionId
 * @accessor api.functional.econPoliticalForum.registeredUser.posts.revisions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier (UUID) of the parent post that the revision belongs
     * to
     */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the revision snapshot to retrieve */
    revisionId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumPostRevision;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/registeredUser/posts/:postId/revisions/:revisionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/registeredUser/posts/${encodeURIComponent(props.postId ?? "null")}/revisions/${encodeURIComponent(props.revisionId ?? "null")}`;
  export const random = (): IEconPoliticalForumPostRevision =>
    typia.random<IEconPoliticalForumPostRevision>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("revisionId")(() => typia.assert(props.revisionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
