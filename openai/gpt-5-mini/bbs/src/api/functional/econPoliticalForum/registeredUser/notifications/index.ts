import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumNotification } from "../../../../structures/IEconPoliticalForumNotification";
import { IPageIEconPoliticalForumNotification } from "../../../../structures/IPageIEconPoliticalForumNotification";

/**
 * List and search the authenticated user's notifications (paginated,
 * read-only).
 *
 * Purpose and overview:
 *
 * Retrieve a paginated, filterable list of notification summaries for the
 * currently authenticated registered user. Returned items are optimized for
 * list views and include: id, type, title, is_read, created_at, related ids
 * (related_thread_id, related_post_id) and a short payload excerpt. This
 * endpoint only reads stored events and does not mutate notification state.
 *
 * Security and permissions:
 *
 * This endpoint requires an authenticated registered user. The server MUST
 * verify that the authenticated subject's id equals each
 * notification.registereduser_id returned. Any attempt to access another user's
 * notifications MUST result in 403 Forbidden. Administrator-level cross-user
 * access must be implemented separately and requires administrator role and
 * mandatory audit logging.
 *
 * Relationship to database entities:
 *
 * Reads from econ_political_forum_notifications. Important columns used:
 * registereduser_id, actor_registereduser_id, type, title, body, payload,
 * is_read, delivered_at, related_thread_id, related_post_id,
 * related_moderation_case_id, created_at, deleted_at.
 *
 * Validation rules and business logic:
 *
 * - Pagination defaults: page=1, limit=20. Maximum limit = 100.
 * - Filterable fields: is_read (boolean), type (string), related_thread_id
 *   (uuid), related_post_id (uuid), created_from (ISO 8601), created_to (ISO
 *   8601).
 * - Search: server-side sanitized short-text search over title, body, payload;
 *   relevance sorting is optional when q is provided.
 * - Sorting: created_at (default desc), relevance (when q present), or type.
 * - Deleted notifications (deleted_at not null) are excluded unless explicitly
 *   included by an admin-level query (not supported here).
 *
 * Related operations and error handling:
 *
 * - Use GET /econPoliticalForum/registeredUser/notifications/{notificationId} to
 *   fetch single notification details.
 * - Use PATCH /econPoliticalForum/registeredUser/notifications/mark (or
 *   equivalent) to perform bulk mark-as-read/unread operations (separate
 *   endpoint).
 * - Typical errors: 401 Unauthorized if not authenticated, 403 Forbidden if
 *   accessing another user's records, 400 Bad Request for invalid filters, 429
 *   Too Many Requests for rate limiting, 500 Internal Server Error for server
 *   faults.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for notification listing
 *   (read-only). Use IEconPoliticalForumNotification.IRequest to specify
 *   page/cursor, limit, filters (is_read, type, related_thread_id,
 *   related_post_id), search query 'q', sort, and date range. This contract
 *   MUST NOT include any state-changing flags (for example, markAsRead).
 * @path /econPoliticalForum/registeredUser/notifications
 * @accessor api.functional.econPoliticalForum.registeredUser.notifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination parameters for notification listing
     * (read-only). Use IEconPoliticalForumNotification.IRequest to specify
     * page/cursor, limit, filters (is_read, type, related_thread_id,
     * related_post_id), search query 'q', sort, and date range. This
     * contract MUST NOT include any state-changing flags (for example,
     * markAsRead).
     */
    body: IEconPoliticalForumNotification.IRequest;
  };
  export type Body = IEconPoliticalForumNotification.IRequest;
  export type Response = IPageIEconPoliticalForumNotification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/registeredUser/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/registeredUser/notifications";
  export const random = (): IPageIEconPoliticalForumNotification.ISummary =>
    typia.random<IPageIEconPoliticalForumNotification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single notification detail by ID for the authenticated user
 * (read-only).
 *
 * Purpose and overview:
 *
 * Fetch a detailed notification for the authenticated registered user
 * identified by notificationId. Returns full fields: id, type, title, body,
 * payload, is_read, delivered_at, related_thread_id, related_post_id,
 * related_moderation_case_id, created_at and metadata.
 *
 * Security and permissions:
 *
 * Only the notification recipient may retrieve this resource. The server MUST
 * validate that the authenticated user's id matches
 * notification.registereduser_id. If the caller is not the recipient, return
 * 403 Forbidden. Admin cross-user access is out-of-scope here and requires a
 * separate audited endpoint.
 *
 * Relationship to database entities:
 *
 * Reads the row from econ_political_forum_notifications identified by id.
 * Important columns: registereduser_id, actor_registereduser_id, payload,
 * related_moderation_case_id, deleted_at.
 *
 * Validation rules and business logic:
 *
 * - Path parameter notificationId is required and must be a valid UUID.
 * - If notification.deleted_at is set, return 404 Not Found to the recipient.
 * - The endpoint does not mutate is_read; marking read/unread must be done
 *   through a dedicated update endpoint.
 *
 * Related operations and error handling:
 *
 * - Use PATCH /econPoliticalForum/registeredUser/notifications/mark to update
 *   read state.
 * - Typical errors: 400 Bad Request for invalid UUID, 401 Unauthorized if not
 *   authenticated, 403 Forbidden if caller is not recipient, 404 Not Found if
 *   notification does not exist or is deleted, 429 Too Many Requests for rate
 *   limiting, 500 Internal Server Error for server faults.
 *
 * @param props.connection
 * @param props.notificationId Target notification's unique identifier (UUID)
 * @path /econPoliticalForum/registeredUser/notifications/:notificationId
 * @accessor api.functional.econPoliticalForum.registeredUser.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target notification's unique identifier (UUID) */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumNotification;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/registeredUser/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/registeredUser/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IEconPoliticalForumNotification =>
    typia.random<IEconPoliticalForumNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a notification (mark read/unread, update delivered timestamp).
 *
 * Update a single notification by its unique identifier.
 *
 * Purpose and overview: This operation updates mutable fields of a notification
 * stored in the econ_political_forum_notifications table. Typical uses include
 * marking a notification as read/unread, updating the delivered_at timestamp
 * after delivery, or updating small presentation fields (title, body) when
 * server-side adjustments are required. The operation returns the full,
 * up-to-date notification record after the update.
 *
 * Security and permissions: Only an authenticated registered user may call this
 * endpoint to modify notifications. The server MUST enforce that the
 * authenticated user either owns the notification
 * (notification.registereduser_id) or has explicit administrative privileges.
 * The implementation must reject attempts by users to change notifications they
 * do not own with a 403 Forbidden response.
 *
 * Relationship to DB entity: This operation maps to the
 * econ_political_forum_notifications Prisma model. Relevant columns include
 * registereduser_id (recipient), actor_registereduser_id (optional actor),
 * type, title, body, payload, is_read, delivered_at, related_thread_id,
 * related_post_id, related_moderation_case_id, created_at, updated_at, and
 * deleted_at. Do not attempt to update created_at; only mutable fields may be
 * modified.
 *
 * Validation rules and business logic:
 *
 * - NotificationId must be a valid UUID and refer to an existing notification.
 * - Request body must only include fields allowed by
 *   IEconPoliticalForumNotification.IUpdate; server must validate types (e.g.,
 *   is_read is boolean, delivered_at is ISO 8601 timestamp if provided).
 * - Ownership check: the caller must be the recipient (registereduser_id) or an
 *   administrator.
 * - If notification is soft-deleted (deleted_at not null), updates are rejected
 *   unless the caller is an administrator and action explicitly reactivates the
 *   notification.
 * - All successful updates MUST create an audit log entry
 *   (econ_political_forum_audit_logs) recording the acting user,
 *   action_type="update_notification", target_identifier and details
 *   summarizing the change.
 *
 * Related operations: Listing notifications for a user (PATCH
 * /users/{userId}/notifications) and notification delivery endpoints (internal)
 * are typically used together. For programmatic marking-as-read flows, clients
 * should prefer idempotent calls.
 *
 * @param props.connection
 * @param props.notificationId UUID of the target notification to update
 * @param props.body Notification fields to update (for example: is_read,
 *   delivered_at, title, body, payload). Only properties defined on the
 *   econ_political_forum_notifications model are allowed.
 * @path /econPoliticalForum/registeredUser/notifications/:notificationId
 * @accessor api.functional.econPoliticalForum.registeredUser.notifications.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the target notification to update */
    notificationId: string & tags.Format<"uuid">;

    /**
     * Notification fields to update (for example: is_read, delivered_at,
     * title, body, payload). Only properties defined on the
     * econ_political_forum_notifications model are allowed.
     */
    body: IEconPoliticalForumNotification.IUpdate;
  };
  export type Body = IEconPoliticalForumNotification.IUpdate;
  export type Response = IEconPoliticalForumNotification;

  export const METADATA = {
    method: "PUT",
    path: "/econPoliticalForum/registeredUser/notifications/:notificationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econPoliticalForum/registeredUser/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IEconPoliticalForumNotification =>
    typia.random<IEconPoliticalForumNotification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
