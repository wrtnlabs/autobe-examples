import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumBookmark } from "../../../../../structures/IEconPoliticalForumBookmark";
import { IPageIEconPoliticalForumBookmark } from "../../../../../structures/IPageIEconPoliticalForumBookmark";

/**
 * Search and retrieve a user's bookmarks (paginated).
 *
 * Return a filtered, searchable, and paginated list of bookmark summary records
 * for a specific registered user.
 *
 * Purpose and overview: This operation provides clients with the ability to
 * list saved posts (bookmarks) belonging to a user. The response is optimized
 * for list views and includes minimal post/thread metadata to enable quick
 * rendering. The operation references the `econ_political_forum_bookmarks`
 * table and related post/thread entities for enrichment.
 *
 * Security and permissions: Only the owning registered user (authenticated) may
 * retrieve their bookmarks via this endpoint. Server-side checks MUST confirm
 * the caller's identity matches {userId} or the caller holds explicit
 * admin/moderator privileges. Moderators/admins may use admin endpoints for
 * cross-user queries. The default behavior excludes bookmarks where the
 * referenced post is hidden (post.is_hidden = true) and excludes bookmarks with
 * deleted_at set; includeDeleted must be explicitly requested and the caller
 * authorized.
 *
 * Validation rules and business logic: The request body supports pagination
 * (cursor or page/limit), filtering by tagSlug, threadId, postId, categorySlug,
 * and date ranges (from/to). Results default to exclude soft-deleted bookmarks.
 * Sorting options include created_at (default desc) and optional relevance or
 * post-score if available.
 *
 * Error handling: 400 for invalid filters or date ranges, 401 for
 * unauthenticated requests, 403 if the caller is not the owner, 404 if the
 * userId does not exist, and 429 for rate limiting.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target registered user whose
 *   bookmarks are being queried
 * @param props.body Search, filter and pagination parameters for retrieving a
 *   user's bookmarks. Supports page/limit or cursor pagination, filters
 *   (categorySlug, tagSlug, threadId, postId), date range (from,to), sort
 *   (created_at|relevance), and includeDeleted flag for admin queries.
 * @path /econPoliticalForum/registeredUser/users/:userId/bookmarks
 * @accessor api.functional.econPoliticalForum.registeredUser.users.bookmarks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the target registered user whose bookmarks are
     * being queried
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Search, filter and pagination parameters for retrieving a user's
     * bookmarks. Supports page/limit or cursor pagination, filters
     * (categorySlug, tagSlug, threadId, postId), date range (from,to), sort
     * (created_at|relevance), and includeDeleted flag for admin queries.
     */
    body: IEconPoliticalForumBookmark.IRequest;
  };
  export type Body = IEconPoliticalForumBookmark.IRequest;
  export type Response = IPageIEconPoliticalForumBookmark.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/registeredUser/users/:userId/bookmarks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econPoliticalForum/registeredUser/users/${encodeURIComponent(props.userId ?? "null")}/bookmarks`;
  export const random = (): IPageIEconPoliticalForumBookmark.ISummary =>
    typia.random<IPageIEconPoliticalForumBookmark.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single bookmark for a user.
 *
 * Return a single bookmark record with details and references to the saved
 * post/thread.
 *
 * Purpose and overview: This operation fetches the full bookmark object for
 * display in a detail view or when the client needs canonical information about
 * the saved item. It uses the `econ_political_forum_bookmarks` table as the
 * authoritative source for bookmark metadata.
 *
 * Security considerations: Only the owning user or authorized administrative
 * roles should retrieve a bookmark for another user. Implementations MUST
 * enforce ownership checks and return 403 for unauthorized access. If the
 * referenced post is hidden by moderators, the endpoint should either return
 * 403 for non-privileged callers or return a restricted metadata view depending
 * on policy.
 *
 * Validation and error handling: Validate UUID formats for both parameters.
 * Return 400 for malformed UUIDs, 401 for unauthenticated requests, 403 for
 * access to another user's bookmark, 404 when the bookmark cannot be found or
 * is archived (absent includeDeleted authorization), and 500 for server errors.
 * Accesses that return bookmark details should be recorded in audit logs for
 * compliance and tracing.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user who owns the bookmark
 * @param props.bookmarkId Unique identifier of the bookmark to retrieve
 * @path /econPoliticalForum/registeredUser/users/:userId/bookmarks/:bookmarkId
 * @accessor api.functional.econPoliticalForum.registeredUser.users.bookmarks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user who owns the bookmark */
    userId: string & tags.Format<"uuid">;

    /** Unique identifier of the bookmark to retrieve */
    bookmarkId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumBookmark;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/registeredUser/users/:userId/bookmarks/:bookmarkId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/registeredUser/users/${encodeURIComponent(props.userId ?? "null")}/bookmarks/${encodeURIComponent(props.bookmarkId ?? "null")}`;
  export const random = (): IEconPoliticalForumBookmark =>
    typia.random<IEconPoliticalForumBookmark>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.param("bookmarkId")(() => typia.assert(props.bookmarkId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
