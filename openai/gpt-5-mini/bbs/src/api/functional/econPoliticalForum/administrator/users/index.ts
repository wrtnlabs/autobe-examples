import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../../structures/IEconPoliticalForumRegisteredUser";
import { IPageIEconPoliticalForumRegisteredUser } from "../../../../structures/IPageIEconPoliticalForumRegisteredUser";
export * as notificationPreferences from "./notificationPreferences/index";

/**
 * Search and retrieve a filtered, paginated list of registered users (admin
 * only).
 *
 * Purpose and overview:
 *
 * This operation performs complex retrieval of registered user records for
 * administrative user management, moderation, and audit tasks. It maps to the
 * econ_political_forum_registereduser model and returns summarized user
 * information safe for admin dashboards while omitting sensitive fields
 * (password_hash and session/reset token data MUST NOT be returned).
 *
 * Security considerations and permissions:
 *
 * Access is restricted to administrators. Calls must be authenticated and
 * authorized; unauthorized callers receive 403. When filters include PII (for
 * example exact email match), the system MUST record an audit entry in
 * econ_political_forum_audit_logs capturing the admin id, filter parameters
 * used, and timestamp. Results are rate-limited and paginated to prevent large
 * exports.
 *
 * Relationship to underlying database entities and business logic:
 *
 * This operation relies on indexes on username, display_name, created_at, and
 * email_verified for efficient queries. Returned summaries should include id,
 * username, display_name (redacted if deleted_at is set), email_verified flag
 * (redacted if deleted), created_at, last_login_at, and is_banned status. Do
 * NOT return password_hash, failed_login_attempts, locked_until, session
 * tokens, or password reset records in any summary payloads.
 *
 * Validation rules and business logic:
 *
 * - Request body must include pagination (page and limit or a cursor), optional
 *   filters: username (partial), displayName (partial), emailVerified
 *   (boolean), createdAtFrom/To (ISO 8601), isBanned (boolean). Sorting may be
 *   by created_at or username.
 * - Default page size: 20. Maximum page size: 100.
 * - If PII filters are used (email exact match), require additional audit logging
 *   and optional elevated admin confirmation per policy.
 *
 * Related operations:
 *
 * - GET /users/{userId} — retrieve single user detail (admin or owner)
 * - PUT/PATCH /users/{userId} — update user profile (owner or admin)
 * - DELETE /users/{userId} — anonymize or remove user (admin)
 *
 * Expected behavior and error handling:
 *
 * - Success: 200 with a paginated summary payload
 *   (IPageIEconPoliticalForumRegisteredUser.ISummary).
 * - 400: invalid filter or pagination parameters.
 * - 401: unauthenticated.
 * - 403: caller lacks administrator privileges.
 * - 429: rate-limited.
 * - 500: server error or query failure.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for registered
 *   users (filters: username, displayName, emailVerified, createdAt range;
 *   pagination: page/limit or cursor; sorting: created_at, username). DTO
 *   reference: IEconPoliticalForumRegisteredUser.IRequest
 * @path /econPoliticalForum/administrator/users
 * @accessor api.functional.econPoliticalForum.administrator.users.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for registered users
     * (filters: username, displayName, emailVerified, createdAt range;
     * pagination: page/limit or cursor; sorting: created_at, username). DTO
     * reference: IEconPoliticalForumRegisteredUser.IRequest
     */
    body: IEconPoliticalForumRegisteredUser.IRequest;
  };
  export type Body = IEconPoliticalForumRegisteredUser.IRequest;
  export type Response = IPageIEconPoliticalForumRegisteredUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/administrator/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/administrator/users";
  export const random = (): IPageIEconPoliticalForumRegisteredUser.ISummary =>
    typia.random<IPageIEconPoliticalForumRegisteredUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
