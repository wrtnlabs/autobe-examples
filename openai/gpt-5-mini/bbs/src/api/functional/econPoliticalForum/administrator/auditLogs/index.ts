import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumAuditLog } from "../../../../structures/IEconPoliticalForumAuditLog";
import { IPageIEconPoliticalForumAuditLog } from "../../../../structures/IPageIEconPoliticalForumAuditLog";

/**
 * Search and retrieve a paginated list of audit log entries (admin only) from
 * econ_political_forum_audit_logs.
 *
 * Retrieve a filtered, paginated list of audit log entries from the system
 * audit log (econ_political_forum_audit_logs model).
 *
 * Purpose and overview: This operation enables administrators to search and
 * enumerate immutable audit events recorded by the platform for incident
 * investigation, compliance review, and moderation auditing. The returned
 * entries correspond to the Prisma model econ_political_forum_audit_logs and
 * include references to related objects (post, thread, report, moderation_case)
 * when present. The audit log schema is append-only and does not include a
 * soft-delete field; implementers must not rely on deleted_at filtering.
 *
 * Security and permissions: Access to audit logs is restricted to administrator
 * role. The operation MUST validate the caller's administrative privileges and
 * MUST record access to this endpoint in system audit logs (server-side). The
 * `details` field is considered sensitive and MUST be redacted in default
 * responses; viewing raw `details` requires explicit elevated privilege and
 * must be recorded in the audit trail. Exports of audit data require an
 * approved compliance workflow and must follow redaction rules.
 *
 * Validation and business logic: The request body accepts complex search
 * criteria (actor, moderator, action_type, target_type, target_identifier,
 * moderation_case_id, report_id, date range (created_at start/end),
 * created_by_system flag), pagination, and sorting. The server shall enforce
 * reasonable limits on page size and complexity to avoid expensive queries.
 * Invalid UUIDs or malformed date ranges return 400 with field-level details.
 * If filters match no records, return an empty page with pagination metadata.
 *
 * Related operations: Use GET
 * /econPoliticalForum/administrator/auditLogs/{auditLogId} to obtain a single
 * audit entry's detailed record; use moderation/case endpoints to navigate from
 * audit entries to moderation cases and reports.
 *
 * @param props.connection
 * @param props.body Search, filter, sorting and pagination parameters for audit
 *   log retrieval. Supports actor/moderator filters, action_type, target_type,
 *   target_identifier, moderation_case_id, report_id, date range (created_at
 *   start/end), created_by_system flag, sort (created_at asc/desc) and
 *   pagination (page/cursor, pageSize). Default detail view is redacted;
 *   request for raw detail requires elevated privilege and must be explicitly
 *   requested in DTO.
 * @path /econPoliticalForum/administrator/auditLogs
 * @accessor api.functional.econPoliticalForum.administrator.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, sorting and pagination parameters for audit log
     * retrieval. Supports actor/moderator filters, action_type,
     * target_type, target_identifier, moderation_case_id, report_id, date
     * range (created_at start/end), created_by_system flag, sort
     * (created_at asc/desc) and pagination (page/cursor, pageSize). Default
     * detail view is redacted; request for raw detail requires elevated
     * privilege and must be explicitly requested in DTO.
     */
    body: IEconPoliticalForumAuditLog.IRequest;
  };
  export type Body = IEconPoliticalForumAuditLog.IRequest;
  export type Response = IPageIEconPoliticalForumAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/administrator/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/administrator/auditLogs";
  export const random = (): IPageIEconPoliticalForumAuditLog =>
    typia.random<IPageIEconPoliticalForumAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed audit log entry by id (admin only).
 *
 * Retrieve a single immutable audit log entry by id.
 *
 * Purpose and overview: Returns the audit log record stored in
 * econ_political_forum_audit_logs for detailed inspection by administrators.
 * Use this for investigations, appeals, and legal compliance checks. The audit
 * log schema is append-only and has no soft-delete field; deletions are
 * administrative/legal actions and must be handled by separate policy and
 * tooling.
 *
 * Security and permissions: Access restricted to administrator role. By default
 * the `details` field is redacted; raw `details` requires explicit elevated
 * privilege and must be recorded in the audit trail. If the audit entry
 * references a moderation case with legal_hold=true, require additional
 * entitlement to view raw content and log the access. All accesses to this
 * endpoint MUST be logged by server-side audit mechanisms.
 *
 * Validation and expected behavior: Validate the auditLogId path parameter as a
 * UUID. If the caller is not an authorized administrator, return 403. If the
 * record is not found (including permanently removed per legal/admin action),
 * return 404. For malformed UUIDs return 400. For unexpected server errors
 * return 500 with a standard error envelope.
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier (UUID) of the target audit log
 *   entry
 * @path /econPoliticalForum/administrator/auditLogs/:auditLogId
 * @accessor api.functional.econPoliticalForum.administrator.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target audit log entry */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/administrator/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/administrator/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): IEconPoliticalForumAuditLog =>
    typia.random<IEconPoliticalForumAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
