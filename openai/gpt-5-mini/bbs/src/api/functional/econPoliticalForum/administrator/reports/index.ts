import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumReport } from "../../../../structures/IEconPoliticalForumReport";
import { IPageIEconPoliticalForumReport } from "../../../../structures/IPageIEconPoliticalForumReport";

/**
 * Retrieve filtered, paginated list of moderation reports (moderator/admin).
 *
 * Retrieve a filtered and paginated list of moderation reports from the
 * `econ_political_forum_reports` table. This operation is intended for
 * moderators and administrators to triage incoming reports. It supports complex
 * search criteria including full-text search on reporter_text, filters by
 * status and priority, filtering by reported_post_id or reported_thread_id,
 * date ranges (created_at, triaged_at), reporter anonymity filter, and
 * assignment to moderation cases.
 *
 * Security and permissions: Only authenticated moderator or administrator roles
 * should access this endpoint. The service MUST ensure reporter anonymity is
 * honored: when reporter_anonymous is true, reporter identifying fields SHALL
 * be omitted or redacted in responses to non-admin consumers. Pagination
 * results SHOULD be limited for UI performance and rate-limited for safety.
 *
 * Relationship to DB entities: This operation reads the
 * `econ_political_forum_reports` model and may join to related tables (posts,
 * threads, moderation_cases, registereduser) for display purposes. The response
 * SHOULD not expose internal-only fields like internal audit references unless
 * the caller is an administrator.
 *
 * Validation and business rules: Request payload must validate pagination
 * parameters (page/limit or cursor), allowed sort fields (created_at, priority,
 * status), and search string lengths. The backend SHOULD enforce maximum page
 * size and rate limits per user role.
 *
 * Related operations: Use `GET /reports/{reportId}` to retrieve full details
 * for a single report and use moderator endpoints to take actions (dismiss,
 * escalate) on individual reports.
 *
 * Error handling: On validation errors return 400; unauthorized access returns
 * 401/403; rate limiting returns 429; unexpected server errors return 500.
 *
 * @param props.connection
 * @param props.body Filter, pagination, sorting and search parameters for
 *   report listing
 * @path /econPoliticalForum/administrator/reports
 * @accessor api.functional.econPoliticalForum.administrator.reports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, pagination, sorting and search parameters for report listing */
    body: IEconPoliticalForumReport.IRequest;
  };
  export type Body = IEconPoliticalForumReport.IRequest;
  export type Response = IPageIEconPoliticalForumReport;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/administrator/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/administrator/reports";
  export const random = (): IPageIEconPoliticalForumReport =>
    typia.random<IPageIEconPoliticalForumReport>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get moderation report details by ID (moderator/admin).
 *
 * Retrieve full details of a single moderation report by reportId from the
 * `econ_political_forum_reports` model.
 *
 * Purpose and overview: This operation returns a single report record including
 * reporter metadata (reporter_id, reporter_anonymous), the reported target
 * (reported_post_id or reported_thread_id), reason_code, reporter_text, status,
 * priority, triage timestamps (triaged_at, reviewed_at, resolved_at), and links
 * to moderation_case_id and moderator_id where available.
 *
 * Security considerations and permissions: Access restricted to moderators and
 * administrators. The service MUST enforce reporter anonymity: if
 * reporter_anonymous is true, reporter_id and any personally identifying fields
 * MUST be withheld from non-admin consumers. Administrators may receive
 * additional fields for legal and audit workflows.
 *
 * Relationship to underlying DB entities: This operation reads
 * `econ_political_forum_reports` and may join to `econ_political_forum_posts`,
 * `econ_political_forum_threads`, `econ_political_forum_moderation_cases`,
 * `econ_political_forum_moderation_logs`, and
 * `econ_political_forum_registereduser` for a complete view.
 *
 * Validation and business rules: The path parameter `reportId` MUST be a valid
 * UUID. If the report does not exist, return 404. If the report is archived
 * (deleted_at set on the report), the endpoint should indicate archival status
 * and include guidance or links to legal/appeals workflows where applicable.
 *
 * Related API operations: `PATCH /reports` for search/listing; moderator action
 * endpoints (e.g., /moderation/cases) to take actions and record moderation
 * logs.
 *
 * Error handling: Return 400 for invalid UUID format, 401/403 for unauthorized
 * requests, 404 if not found or not visible to the caller, 429 for
 * rate-limiting, and 500 for server errors.
 *
 * @param props.connection
 * @param props.reportId Unique identifier (UUID) of the target report
 * @path /econPoliticalForum/administrator/reports/:reportId
 * @accessor api.functional.econPoliticalForum.administrator.reports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target report */
    reportId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumReport;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/administrator/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/administrator/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): IEconPoliticalForumReport =>
    typia.random<IEconPoliticalForumReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
