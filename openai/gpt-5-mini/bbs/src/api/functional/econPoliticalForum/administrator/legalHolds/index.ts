import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumLegalHold } from "../../../../structures/IEconPoliticalForumLegalHold";
import { IPageIEconPoliticalForumLegalHold } from "../../../../structures/IPageIEconPoliticalForumLegalHold";

/**
 * Search and retrieve paginated legal hold records (administrator only).
 *
 * Retrieve a filtered and paginated list of legal hold records for
 * administrative review.
 *
 * This endpoint allows authorized administrators to search legal holds by
 * holder (registereduser_id), targeted post or thread, associated moderation
 * case, hold reason, active status, and date ranges for hold_start/hold_end.
 * The request supports pagination (page/limit or cursor), sorting by created_at
 * or hold_start, and advanced filter combinations.
 *
 * Security and privacy: Access is limited to users with the `administrator`
 * role; server-side authorization checks are mandatory. Responses may include
 * internal `notes` and holder identifiers; these fields must be redacted or
 * summarized for callers without appropriate privileges. All administrative
 * read actions should be recorded in the audit log for compliance and
 * traceability.
 *
 * Validation: Request fields must use ISO 8601 date formats for date ranges and
 * UUIDs for identifier filters. Invalid parameter formats should return 400
 * with structured error codes.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters: holderId (UUID), postId
 *   (UUID), threadId (UUID), moderationCaseId (UUID), holdReason (string),
 *   isActive (boolean), holdStartFrom (date-time), holdStartTo (date-time),
 *   page (integer), limit (integer), cursor (string), sort (string -
 *   created_at|hold_start).
 * @path /econPoliticalForum/administrator/legalHolds
 * @accessor api.functional.econPoliticalForum.administrator.legalHolds.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination parameters: holderId (UUID), postId (UUID),
     * threadId (UUID), moderationCaseId (UUID), holdReason (string),
     * isActive (boolean), holdStartFrom (date-time), holdStartTo
     * (date-time), page (integer), limit (integer), cursor (string), sort
     * (string - created_at|hold_start).
     */
    body: IEconPoliticalForumLegalHold.IRequest;
  };
  export type Body = IEconPoliticalForumLegalHold.IRequest;
  export type Response = IPageIEconPoliticalForumLegalHold;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/administrator/legalHolds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/administrator/legalHolds";
  export const random = (): IPageIEconPoliticalForumLegalHold =>
    typia.random<IPageIEconPoliticalForumLegalHold>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single legal hold record by ID (administrator only).
 *
 * Fetch detailed information for a single legal hold by UUID. The endpoint
 * validates the path parameter as a UUID (400 for malformed), returns 404 when
 * not found, and 403 when the caller lacks administrator privileges.
 *
 * Security: Only administrators may access full details. Notes and internal
 * evidence references should be redacted unless the calling administrator has
 * elevated permissions. Administrative reads must be logged in the audit trail
 * for compliance.
 *
 * Database relation: Uses the `econ_political_forum_legal_holds` model primary
 * key `id`. Ensure DTO matches model fields.
 *
 * @param props.connection
 * @param props.legalHoldId Unique identifier (UUID) of the target legal hold
 *   record
 * @path /econPoliticalForum/administrator/legalHolds/:legalHoldId
 * @accessor api.functional.econPoliticalForum.administrator.legalHolds.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target legal hold record */
    legalHoldId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumLegalHold;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/administrator/legalHolds/:legalHoldId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/administrator/legalHolds/${encodeURIComponent(props.legalHoldId ?? "null")}`;
  export const random = (): IEconPoliticalForumLegalHold =>
    typia.random<IEconPoliticalForumLegalHold>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("legalHoldId")(() => typia.assert(props.legalHoldId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
