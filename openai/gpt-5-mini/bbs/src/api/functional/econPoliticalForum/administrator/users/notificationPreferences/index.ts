import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumNotificationPreferences } from "../../../../../structures/IEconPoliticalForumNotificationPreferences";

/**
 * Administrator: get a user's notification preferences.
 *
 * Purpose and overview:
 *
 * Administrator view of a user's notification preferences
 * (econ_political_forum_notification_preferences). This endpoint is intended
 * for admin support and audit workflows and returns full preference records
 * including the preferences_payload subject to sanitization rules.
 *
 * Security and permissions:
 *
 * This endpoint requires administrator privileges. All administrator reads MUST
 * create an immutable audit log entry recording admin id, timestamp, target
 * user id, and a short reason. Admin access to preferences_payload MUST be
 * subject to content-sanitization rules to avoid exposing secrets.
 *
 * Relationship to database entity:
 *
 * Operates on econ_political_forum_notification_preferences. Implementation
 * should fetch the record by registereduser_id and return the mapped DTO
 * IEconPoliticalForumNotificationPreferences. If the preferences row is
 * soft-deleted, follow product policy for return behavior and ensure admin
 * access is still logged.
 *
 * Validation and business rules:
 *
 * - Path parameter userId must be a UUID.
 * - Authorization: only administrators may call this endpoint.
 * - Admin reads MUST be logged in audit logs with reason.
 * - Preferences_payload must be validated and sanitized before inclusion in
 *   responses; disallow secrets.
 *
 * Related operations:
 *
 * - GET /econPoliticalForum/registeredUser/users/{userId}/notificationPreferences
 *   (owner view)
 * - PUT /econPoliticalForum/administrator/users/{userId}/notificationPreferences
 *   (admin update - if implemented must follow stricter rules)
 *
 * Error handling:
 *
 * - 400: invalid UUID format
 * - 401: authentication required
 * - 403: caller not authorized (not an administrator)
 * - 404: user or preferences not found
 * - 500: server error
 *
 * @param props.connection
 * @param props.userId Unique identifier (UUID) of the target registered user
 *   whose preferences are requested
 * @path /econPoliticalForum/administrator/users/:userId/notificationPreferences
 * @accessor api.functional.econPoliticalForum.administrator.users.notificationPreferences.atNotificationPreferencesByAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atNotificationPreferencesByAdmin(
  connection: IConnection,
  props: atNotificationPreferencesByAdmin.Props,
): Promise<atNotificationPreferencesByAdmin.Response> {
  return true === connection.simulate
    ? atNotificationPreferencesByAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atNotificationPreferencesByAdmin.METADATA,
          path: atNotificationPreferencesByAdmin.path(props),
          status: null,
        },
      );
}
export namespace atNotificationPreferencesByAdmin {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target registered user whose
     * preferences are requested
     */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumNotificationPreferences;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/administrator/users/:userId/notificationPreferences",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/administrator/users/${encodeURIComponent(props.userId ?? "null")}/notificationPreferences`;
  export const random = (): IEconPoliticalForumNotificationPreferences =>
    typia.random<IEconPoliticalForumNotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: atNotificationPreferencesByAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atNotificationPreferencesByAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
