import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumModerationLog } from "../../../../structures/IEconPoliticalForumModerationLog";
import { IPageIEconPoliticalForumModerationLog } from "../../../../structures/IPageIEconPoliticalForumModerationLog";

/**
 * Search and retrieve a filtered, paginated list of moderation logs
 * (econ_political_forum_moderation_logs) — administrator view (full details,
 * audited).
 *
 * Purpose and overview:
 *
 * Retrieve moderation log entries for auditing and administrative review. Each
 * entry is an immutable moderation event recorded in the
 * `econ_political_forum_moderation_logs` table. The endpoint supports
 * pagination, filtering, free-text search over `rationale` and
 * `evidence_reference`, and sorting. Administrators may retrieve unredacted
 * fields and evidence references; such retrievals must be logged in the access
 * audit trail.
 *
 * Security considerations and permissions:
 *
 * Access restricted to administrators. Returning unredacted free-text and
 * evidence references is allowed only for administrator-level callers and must
 * trigger an audit record including caller id, reason, and correlation id.
 * Evidence references must be tokenized for delivery if they point to stored
 * artifacts.
 *
 * Validation rules and business logic:
 *
 * - Allowed filters: action_type, reason_code, moderator_id, acted_admin_id,
 *   target_post_id, target_thread_id, moderation_case_id, created_at range.
 * - Free-text search: administrator queries may return full fields.
 * - Pagination: support page/limit or cursor; default page size 20; max page size
 *   100 (server enforced).
 * - Sorting: by created_at (default desc), or by moderator_id, action_type.
 * - Soft-delete handling: entries with `deleted_at` != null remain queryable to
 *   administrators; includeDeleted flag supported.
 *
 * Error handling:
 *
 * Return structured errors: 400, 401, 403, 429, 500. Include correlation id for
 * audit and support.
 *
 * @param props.connection
 * @param props.body Search, filter, sort and pagination parameters for
 *   moderation logs retrieval (administrator-scoped request).
 * @path /econPoliticalForum/administrator/moderationLogs
 * @accessor api.functional.econPoliticalForum.administrator.moderationLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, sort and pagination parameters for moderation logs
     * retrieval (administrator-scoped request).
     */
    body: IEconPoliticalForumModerationLog.IRequest;
  };
  export type Body = IEconPoliticalForumModerationLog.IRequest;
  export type Response = IPageIEconPoliticalForumModerationLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/administrator/moderationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/administrator/moderationLogs";
  export const random = (): IPageIEconPoliticalForumModerationLog.ISummary =>
    typia.random<IPageIEconPoliticalForumModerationLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single moderation log entry (econ_political_forum_moderation_logs) by
 * ID — administrator view (full detail).
 *
 * Purpose and overview:
 *
 * Return the complete moderation log entry identified by `logId` for
 * administrative review. The response includes fields present in the Prisma
 * model: moderator_id, target_post_id, target_thread_id, moderation_case_id,
 * acted_admin_id, action_type, reason_code, rationale, evidence_reference,
 * created_at, and deleted_at. Administrators may view unredacted fields; such
 * access must be recorded in the access audit log.
 *
 * Security considerations and user permissions:
 *
 * Access restricted to administrators. Viewing unredacted rationale or evidence
 * references must be logged with caller id and correlation id. Evidence
 * references that point to stored artifacts must be provided as tokenized
 * short-lived URIs rather than direct file system paths.
 *
 * Validation and error handling:
 *
 * - Path parameter `logId` must be a valid UUID; return 404 if not found.
 * - Unauthorized access returns 403; unauthenticated access returns 401.
 *
 * @param props.connection
 * @param props.logId Unique identifier (UUID) of the moderation log entry to
 *   retrieve.
 * @path /econPoliticalForum/administrator/moderationLogs/:logId
 * @accessor api.functional.econPoliticalForum.administrator.moderationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the moderation log entry to retrieve. */
    logId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumModerationLog;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/administrator/moderationLogs/:logId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/administrator/moderationLogs/${encodeURIComponent(props.logId ?? "null")}`;
  export const random = (): IEconPoliticalForumModerationLog =>
    typia.random<IEconPoliticalForumModerationLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("logId")(() => typia.assert(props.logId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
