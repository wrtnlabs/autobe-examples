import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as revisions from "./revisions/index";
export * as legalHolds from "./legalHolds/index";

/**
 * Administrator: Soft-delete a post by ID (econ_political_forum_posts).
 *
 * Purpose and overview: Allows administrators to soft-delete posts by setting
 * econ_political_forum_posts.deleted_at. Administrator actions MUST be recorded
 * in econ_political_forum_audit_logs and moderation logs where applicable. The
 * service MUST check for active legal holds (econ_political_forum_legal_holds)
 * and preserve evidence when holds exist; return 423 Locked and record the
 * attempt.
 *
 * Security and auditing:
 *
 * - Only administrators may call this endpoint. All actions must be logged and
 *   retained per retention policy.
 *
 * Responses:
 *
 * - 204 No Content on success
 * - 403 Forbidden if caller lacks administrator privileges
 * - 423 Locked if legal hold prevents deletion
 * - 404 Not Found if post does not exist
 *
 * @param props.connection
 * @param props.postId Target post's ID (econ_political_forum_posts.id)
 * @path /econPoliticalForum/administrator/posts/:postId
 * @accessor api.functional.econPoliticalForum.administrator.posts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target post's ID (econ_political_forum_posts.id) */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/econPoliticalForum/administrator/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/administrator/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
