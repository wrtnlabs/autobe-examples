import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as legalHolds from "./legalHolds/index";

/**
 * Soft-delete (mark deleted_at) a thread by ID (econ_political_forum_threads) -
 * administrator.
 *
 * Marks the specified thread's deleted_at timestamp. Administrators
 * (authorizationRole=administrator) may perform administrative deletions.
 * Server MUST check for active legal holds and must create audit and moderation
 * logs. On success return 204 No Content. If a legal hold is present, return
 * 403. Permanent purge requires a separate admin-only flow and is not
 * implemented here.
 *
 * Errors: 400 invalid UUID, 401 unauthenticated, 403 legal hold or insufficient
 * privileges, 404 not found, 429 rate limit, 500 server error.
 *
 * @param props.connection
 * @param props.threadId Unique identifier (UUID) of the target thread
 * @path /econPoliticalForum/administrator/threads/:threadId
 * @accessor api.functional.econPoliticalForum.administrator.threads.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the target thread */
    threadId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/econPoliticalForum/administrator/threads/:threadId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/administrator/threads/${encodeURIComponent(props.threadId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
