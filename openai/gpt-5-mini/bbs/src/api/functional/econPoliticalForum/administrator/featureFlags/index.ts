import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumFeatureFlag } from "../../../../structures/IEconPoliticalForumFeatureFlag";
import { IPageIEconPoliticalForumFeatureFlag } from "../../../../structures/IPageIEconPoliticalForumFeatureFlag";

/**
 * Search and retrieve paginated feature flags
 * (IPageIEconPoliticalForumFeatureFlag.ISummary).
 *
 * Search for feature flags with robust filtering, sorting, and pagination
 * support.
 *
 * Purpose and overview: This operation enables administrative UIs and tooling
 * to query the feature flag catalog stored in
 * econ_political_forum_feature_flags. It supports complex criteria (partial key
 * match, enabled boolean, rollout percentage range, environment scoping) and
 * returns paginated summaries for efficient listing.
 *
 * Security considerations and user permissions: Feature flags control runtime
 * behavior; therefore read and write access to the full feature flag objects is
 * restricted to administrators. Only administrator-role callers may include
 * deleted records or request full detail. For general listing,
 * deleted/soft-deleted flags are excluded by default.
 *
 * Relationship to underlying database entity: This operation directly maps to
 * the econ_political_forum_feature_flags Prisma model and returns the flags'
 * key, enabled state, rollout_percentage, description, and timestamps.
 *
 * Validation rules and business logic: Request payload must validate filter
 * fields: key (string, optional), enabled (boolean, optional), environment
 * (string, optional), rolloutMin/rolloutMax (integers between 0 and 100), sort
 * (one of: 'key', 'created_at', 'rollout_percentage'), direction
 * ('asc'|'desc'). Server MUST enforce rolloutMin/rolloutMax bounds (0-100) and
 * return 400/422 for invalid ranges. Pagination may be provided either as
 * page/limit (page starting at 1) or cursor-based: when both provided,
 * page/limit takes precedence. Default page size is 25, maximum allowed page
 * size is 200 (server-enforced). If includeDeleted is true, the caller must be
 * an administrator and results will include records with deleted_at set.
 *
 * Expected behavior and error handling: 200 returns paginated summary results.
 * 400 for invalid filter values, 401/403 if unauthorized, 429 when rate limits
 * are exceeded, 500 for internal errors. Use the standard error envelope for
 * all errors.
 *
 * @param props.connection
 * @param props.body Search criteria, pagination, sorting and filter parameters
 *   for feature flags retrieval
 * @path /econPoliticalForum/administrator/featureFlags
 * @accessor api.functional.econPoliticalForum.administrator.featureFlags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, pagination, sorting and filter parameters for
     * feature flags retrieval
     */
    body: IEconPoliticalForumFeatureFlag.IRequest;
  };
  export type Body = IEconPoliticalForumFeatureFlag.IRequest;
  export type Response = IPageIEconPoliticalForumFeatureFlag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/administrator/featureFlags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/administrator/featureFlags";
  export const random = (): IPageIEconPoliticalForumFeatureFlag.ISummary =>
    typia.random<IPageIEconPoliticalForumFeatureFlag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
