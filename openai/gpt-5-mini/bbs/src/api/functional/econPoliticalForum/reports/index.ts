import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumReport } from "../../../structures/IEconPoliticalForumReport";

/**
 * Create a report for a post or thread (public: guests may file reports).
 *
 * Create a structured report that flags a post or thread for moderator review.
 *
 * Purpose and overview: This endpoint allows visitors (authenticated or not) to
 * notify moderators about content that may violate policy. It creates an
 * immutable record in econ_political_forum_reports and returns the persisted
 * report. Implementation must validate inputs and sanitize reporter_text.
 *
 * Security and permissions: Public endpoint. Unauthenticated requests are
 * allowed but must be subject to anti-abuse controls (rate limiting, CAPTCHA).
 * Authenticated requests will set reporter_id from session. The public response
 * must redact reporter identity for anonymous reports or when the caller is not
 * a moderator/admin.
 *
 * Relationship to the database: Writes to econ_political_forum_reports fields
 * (reported_post_id, reported_thread_id, reason_code, reporter_text,
 * reporter_anonymous, status, priority, created_at, deleted_at). The server
 * must validate that at least one of reported_post_id or reported_thread_id is
 * present and that provided target IDs exist when possible.
 *
 * Validation and business rules: Validate reason_code against allowed values
 * (harassment, doxxing, misinformation, illegal_content, spam, other). Enforce
 * reporter_text max length (e.g., 2000 chars) and sanitize content. Return 400
 * when validation fails, 404 when target not found, 429 for rate limits.
 *
 * @param props.connection
 * @param props.body Report creation payload: specify the target
 *   (reported_post_id OR reported_thread_id), a structured reason_code,
 *   optional reporter_text, and optional anonymity preference.
 * @path /econPoliticalForum/reports
 * @accessor api.functional.econPoliticalForum.reports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Report creation payload: specify the target (reported_post_id OR
     * reported_thread_id), a structured reason_code, optional
     * reporter_text, and optional anonymity preference.
     */
    body: IEconPoliticalForumReport.ICreate;
  };
  export type Body = IEconPoliticalForumReport.ICreate;
  export type Response = IEconPoliticalForumReport;

  export const METADATA = {
    method: "POST",
    path: "/econPoliticalForum/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/reports";
  export const random = (): IEconPoliticalForumReport =>
    typia.random<IEconPoliticalForumReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
