import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumFeatureFlag } from "../../../structures/IEconPoliticalForumFeatureFlag";

/**
 * Retrieve a single feature flag by ID (EconPoliticalForum.feature_flags).
 *
 * Purpose and overview:
 *
 * Retrieve the canonical feature flag record identified by the path parameter
 * featureFlagId. This operation surfaces runtime feature configuration such as
 * the flag key, whether it is enabled, optional rollout percentages,
 * environment scoping, and the human-readable description. The underlying
 * Prisma model is econ_political_forum_feature_flags and the response maps to
 * the IEconPoliticalForumFeatureFlag DTO.
 *
 * Security considerations and permissions:
 *
 * Feature flags include an is_public boolean. Public flags (is_public = true)
 * may be read by unauthenticated clients but the server MUST redact or omit the
 * `value` field for public consumers. Non-public flags (is_public = false)
 * require elevated privileges (for example, admin or internal tooling) to view
 * and MUST be logged when accessed. The API implementation must enforce these
 * rules server-side. Clients MUST NOT use feature flag `value` to carry
 * secrets; sensitive configuration must be stored in a dedicated secrets
 * manager.
 *
 * Relationship to DB entity and validation rules:
 *
 * This operation directly queries the econ_political_forum_feature_flags table.
 * Key columns include: id (UUID), key (unique string), value (string), enabled
 * (boolean), rollout_percentage (Int|null), description (string|null),
 * environment (string|null), is_public (boolean), created_at, updated_at,
 * deleted_at (nullable soft-delete timestamp). The featureFlagId path parameter
 * must be a UUID and will be used to locate the record. If deleted_at is set,
 * behavior should follow retention rules (typically 404).
 *
 * Related operations and error handling:
 *
 * - Use GET /econPoliticalForum/featureFlags/{featureFlagId} to fetch a single
 *   flag; use an admin-only listing endpoint to enumerate non-public flags.
 * - Error responses include 400 for malformed UUIDs, 404 if no active record
 *   exists for the provided id (or the record is soft-deleted and not visible),
 *   and 403 when attempting to read a non-public flag without sufficient
 *   privileges.
 *
 * Expected behavior and edge cases:
 *
 * - If the flag exists but is_public=false and the caller lacks authorization,
 *   return 403.
 * - If the flag is found but has a null rollout_percentage, treat that as "not
 *   set" in client logic.
 * - Servers must redact `value` for public consumers and must audit any access
 *   that returns `value` to authorized callers.
 *
 * @param props.connection
 * @param props.featureFlagId UUID of the target feature flag
 * @path /econPoliticalForum/featureFlags/:featureFlagId
 * @accessor api.functional.econPoliticalForum.featureFlags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the target feature flag */
    featureFlagId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumFeatureFlag;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/featureFlags/:featureFlagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/featureFlags/${encodeURIComponent(props.featureFlagId ?? "null")}`;
  export const random = (): IEconPoliticalForumFeatureFlag =>
    typia.random<IEconPoliticalForumFeatureFlag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("featureFlagId")(() => typia.assert(props.featureFlagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
