import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumPost } from "../../../structures/IEconPoliticalForumPost";
import { IPageIEconPoliticalForumPost } from "../../../structures/IPageIEconPoliticalForumPost";

/**
 * Search and retrieve a paginated list of posts.
 *
 * Retrieve a filtered and paginated list of posts from the
 * econ_political_forum_posts table.
 *
 * This operation supports full-text search on the post content (content),
 * filtering by thread_id, parent_id (replies), author_id, and date ranges
 * (created_at). Results exclude posts with deleted_at set and exclude
 * moderator-hidden posts (is_hidden = true) for ordinary users. Sorting options
 * include newest, oldest, and most_voted (application-provided aggregate).
 * Pagination supports page/limit or cursor-based continuation; default page
 * size is 20 and maximum page size is 100.
 *
 * Security and permissions: this endpoint is public for read operations. When a
 * moderator or administrator calls the endpoint with proper authorization,
 * additional properties (is_hidden, deleted_at) and hidden items may be
 * returned for moderation purposes. The service layer must enforce role-based
 * filtering and redact moderator-only fields for ordinary users.
 *
 * Relationship to database entities: Operates on the econ_political_forum_posts
 * model as defined in the Prisma schema. Use the thread relation (thread_id) to
 * implement category-scoped listings and the author relation (author_id) to
 * implement author-scoped filters. For vote-based sorting, rely on a separate
 * aggregated view or materialized data source since vote counters are
 * intentionally not stored on the posts table.
 *
 * Validation and error handling: invalid UUID formats for
 * thread_id/parent_id/author_id result in 400. Requests with page sizes above
 * 100 result in 400. Long search queries (>500 chars) result in 400. If a
 * referenced thread or parent post does not exist, return 404. Unexpected
 * server errors return 500.
 *
 * @param props.connection
 * @param props.body Search criteria, filters, sort, and pagination parameters
 *   for posts
 * @path /econPoliticalForum/posts
 * @accessor api.functional.econPoliticalForum.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria, filters, sort, and pagination parameters for posts */
    body: IEconPoliticalForumPost.IRequest;
  };
  export type Body = IEconPoliticalForumPost.IRequest;
  export type Response = IPageIEconPoliticalForumPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/posts";
  export const random = (): IPageIEconPoliticalForumPost.ISummary =>
    typia.random<IPageIEconPoliticalForumPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single post by its ID.
 *
 * Return detailed information for a single post stored in
 * econ_political_forum_posts.
 *
 * Purpose and overview: This operation fetches the full canonical post record
 * referenced by id. The returned details include the content, author reference
 * (author_id), parent relationship (parent_id) for replies, edit metadata
 * (is_edited, edited_at), moderation flag (is_hidden), and timestamps
 * (created_at, updated_at). Revision snapshots are maintained in
 * econ_political_forum_post_revisions and are accessible through a separate
 * endpoint.
 *
 * Security and authorization: For ordinary (public) callers, posts with
 * deleted_at set or is_hidden = true are not returned and the endpoint responds
 * with 404 to prevent leaking removed content. Moderators and administrators
 * with appropriate authorizationRoles may see hidden or deleted posts and
 * receive the is_hidden and deleted_at fields in the response; moderator-only
 * rationale or audit content is available only via moderation endpoints and is
 * not included here.
 *
 * Relationship to underlying schema: This operation maps directly to the
 * econ_political_forum_posts model in the Prisma schema. It uses the author
 * relation to surface minimal author metadata (public profile fields) and the
 * thread relation to include context for where the post appears. For full
 * revision history or moderation logs, the caller should use the post revisions
 * and moderation log endpoints.
 *
 * Validation and error handling: postId must be a UUID. Return 400 for
 * malformed IDs, 404 for non-existent or non-visible posts to the caller, and
 * 500 for server errors.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post (UUID)
 * @path /econPoliticalForum/posts/:postId
 * @accessor api.functional.econPoliticalForum.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target post (UUID) */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumPost;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IEconPoliticalForumPost =>
    typia.random<IEconPoliticalForumPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
