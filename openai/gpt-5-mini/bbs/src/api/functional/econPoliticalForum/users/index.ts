import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumRegisteredUser } from "../../../structures/IEconPoliticalForumRegisteredUser";

/**
 * Retrieve public summary of a registered user.
 *
 * Purpose and overview:
 *
 * Retrieve a sanitized public summary for a registered user using the
 * econ_political_forum_registereduser table. This endpoint returns displayable
 * profile information intended for public pages (for example: id, username,
 * display_name, bio, avatar_uri, email_verified, created_at, updated_at). It
 * MUST NOT expose sensitive fields such as password_hash,
 * failed_login_attempts, locked_until, deleted_at, or email in the public
 * view.
 *
 * Security and permissions:
 *
 * This operation is public-read for the public summary. If the caller is
 * authenticated and either the account owner or an administrator, the service
 * MAY return an expanded view containing private fields (for example:
 * verified_at). The service MUST NOT include password_hash,
 * failed_login_attempts, locked_until, or deleted_at in any response. Exposure
 * of email or other contact PII is disallowed in the public summary and allowed
 * only in owner/admin expanded views with explicit authorization.
 *
 * Relationship to database entity:
 *
 * Operates on econ_political_forum_registereduser. The implementation should
 * read the registereduser row by id (UUID) and transform it into the public
 * summary DTO (IEconPoliticalForumRegisteredUser.ISummary). If deleted_at is
 * set, return 404 for public callers; administrators may access archived
 * records subject to audit policy.
 *
 * Validation and business rules:
 *
 * - Path parameter userId must be a UUID.
 * - If the target account has deleted_at set (soft-deleted), return 404 to public
 *   callers; administrators may be allowed to view archived records only if
 *   audit logs are created for the access.
 * - The public summary SHALL NOT include email, password_hash,
 *   failed_login_attempts, locked_until, or deleted_at.
 * - Last_login_at and verified_at are restricted and returned only to the owner
 *   or administrator (not in public summary).
 *
 * Related operations:
 *
 * - GET /econPoliticalForum/users/{userId}/notificationPreferences (owner/admin)
 *   to retrieve preferences
 * - GET /econPoliticalForum/threads and GET /econPoliticalForum/posts to list
 *   content authored by this user
 *
 * Error handling:
 *
 * - 400: invalid UUID format
 * - 401: authentication required for expanded/private views
 * - 403: caller not authorized to view private fields
 * - 404: user not found or soft-deleted (for public callers)
 * - 500: server error
 *
 * @param props.connection
 * @param props.userId Unique identifier (UUID) of the target registered user
 * @path /econPoliticalForum/users/:userId
 * @accessor api.functional.econPoliticalForum.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target registered user */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumRegisteredUser.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): IEconPoliticalForumRegisteredUser.ISummary =>
    typia.random<IEconPoliticalForumRegisteredUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
