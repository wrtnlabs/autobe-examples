import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconPoliticalForumModerationLog } from "../../../../structures/IEconPoliticalForumModerationLog";
import { IPageIEconPoliticalForumModerationLog } from "../../../../structures/IPageIEconPoliticalForumModerationLog";

/**
 * Search and retrieve a filtered, paginated list of moderation logs
 * (econ_political_forum_moderation_logs) — moderator view (redacted excerpts).
 *
 * Purpose and overview:
 *
 * Retrieve moderation log entries for triage and operational review. Each entry
 * corresponds to an immutable moderation event recorded in the
 * `econ_political_forum_moderation_logs` table (fields include moderator_id,
 * target_post_id, target_thread_id, moderation_case_id, acted_admin_id,
 * action_type, reason_code, rationale, evidence_reference, created_at). The
 * endpoint supports pagination, filtering, free-text search over rationale
 * (search returns redacted excerpts by default for moderator role), and sorting
 * so moderators can find relevant actions quickly.
 *
 * Security considerations and permissions:
 *
 * Access to this endpoint is restricted to moderator-level staff. Moderators
 * receive redacted excerpts of free-text fields by default. Any request that
 * requests unredacted fields must be made by an administrator path or include
 * an explicit server-approved flag; such accesses must be audited. Evidence
 * URIs returned in summaries must be tokenized or redacted unless caller has
 * elevated privileges.
 *
 * Validation rules and business logic:
 *
 * - Allowed filters: action_type, reason_code, moderator_id, acted_admin_id,
 *   target_post_id, target_thread_id, moderation_case_id, created_at range (ISO
 *   8601 from/to).
 * - Free-text search: search over `rationale` and `evidence_reference` using the
 *   trigram/GIN index; moderator results return redacted excerpts only.
 * - Pagination: support page/limit or cursor; default page size 20; max page size
 *   100 (server enforced).
 * - Sorting: by created_at (default desc), or by moderator_id, action_type.
 * - Soft-delete handling: entries with `deleted_at` != null are historical;
 *   include only if includeDeleted=true and caller is administrator or
 *   explicitly permitted.
 *
 * Error handling:
 *
 * Return structured error codes: 400 (invalid input), 401 (unauthenticated),
 * 403 (forbidden), 429 (rate-limited), 500 (server error). Provide descriptive
 * messages and correlation id for support.
 *
 * @param props.connection
 * @param props.body Search, filter, sort and pagination parameters for
 *   moderation logs retrieval (moderator-scoped request). Fields include
 *   filters for action_type, reason_code, moderator_id, acted_admin_id,
 *   target_post_id, target_thread_id, moderation_case_id, createdFrom/createdTo
 *   (ISO 8601), query (free-text), page, limit, cursor, sortBy, sortOrder,
 *   includeDeleted (boolean - admins only).
 * @path /econPoliticalForum/moderator/moderationLogs
 * @accessor api.functional.econPoliticalForum.moderator.moderationLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, sort and pagination parameters for moderation logs
     * retrieval (moderator-scoped request). Fields include filters for
     * action_type, reason_code, moderator_id, acted_admin_id,
     * target_post_id, target_thread_id, moderation_case_id,
     * createdFrom/createdTo (ISO 8601), query (free-text), page, limit,
     * cursor, sortBy, sortOrder, includeDeleted (boolean - admins only).
     */
    body: IEconPoliticalForumModerationLog.IRequest;
  };
  export type Body = IEconPoliticalForumModerationLog.IRequest;
  export type Response = IPageIEconPoliticalForumModerationLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econPoliticalForum/moderator/moderationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econPoliticalForum/moderator/moderationLogs";
  export const random = (): IPageIEconPoliticalForumModerationLog.ISummary =>
    typia.random<IPageIEconPoliticalForumModerationLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single moderation log entry (econ_political_forum_moderation_logs) by
 * ID — moderator view (redacted if necessary).
 *
 * Purpose and overview:
 *
 * Return the complete moderation log entry identified by `logId`. Each
 * moderation log is an immutable record created when moderators or system
 * processes take an action. The returned entity includes fields present in the
 * Prisma model such as moderator_id, target_post_id, target_thread_id,
 * moderation_case_id, acted_admin_id, action_type, reason_code, rationale,
 * evidence_reference, and created_at. For moderator callers, sensitive fields
 * may be redacted.
 *
 * Security considerations and user permissions:
 *
 * Access restricted to moderators (redacted view) and administrators (full
 * view). If the log entry is soft-deleted (has `deleted_at`), the endpoint may
 * return 404 for non-admin callers to avoid leaking existence; administrators
 * may view deleted records. Access to unredacted fields must be audited.
 *
 * Validation and error handling:
 *
 * - Path parameter `logId` MUST be a UUID. If not found, return 404.
 * - If the caller lacks privileges, return 403.
 * - If requesting unredacted fields without admin privileges, return 403 or
 *   return a redacted response.
 *
 * @param props.connection
 * @param props.logId Unique identifier (UUID) of the moderation log entry to
 *   retrieve.
 * @path /econPoliticalForum/moderator/moderationLogs/:logId
 * @accessor api.functional.econPoliticalForum.moderator.moderationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the moderation log entry to retrieve. */
    logId: string & tags.Format<"uuid">;
  };
  export type Response = IEconPoliticalForumModerationLog;

  export const METADATA = {
    method: "GET",
    path: "/econPoliticalForum/moderator/moderationLogs/:logId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/moderator/moderationLogs/${encodeURIComponent(props.logId ?? "null")}`;
  export const random = (): IEconPoliticalForumModerationLog =>
    typia.random<IEconPoliticalForumModerationLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("logId")(() => typia.assert(props.logId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
