import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Remove tag from thread (soft-delete thread_tag mapping).
 *
 * Remove a tag from a thread by soft-deleting the mapping record.
 *
 * Purpose and overview: This endpoint updates
 * econ_political_forum_thread_tags.deleted_at to mark the mapping as removed
 * while retaining the record for audit and potential reactivation.
 *
 * Security and permissions: Only authorized moderation roles (moderator or
 * administrator) may perform this action. The server MUST record the action in
 * moderation logs (econ_political_forum_moderation_logs / audit logs) including
 * moderator id, action_type, rationale, and linked report or case id when
 * applicable.
 *
 * Validation and business rules: Validate threadId and tagId as UUIDs. Confirm
 * the mapping exists. Before deletion, check econ_political_forum_legal_holds
 * and related moderation_case for active holds; if present, return 423 Locked
 * and include reference id. The API is idempotent: if the mapping is already
 * soft-deleted, return 204 No Content.
 *
 * Expected behavior and error handling: On success return 204 No Content.
 * Errors: 400 for invalid IDs, 401/403 for auth/permission errors, 404 if
 * thread or tag not found, 423 if locked by legal hold, 500 for server errors.
 *
 * @param props.connection
 * @param props.threadId UUID of the target thread
 *   (econ_political_forum_threads.id)
 * @param props.tagId UUID of the tag to remove (econ_political_forum_tags.id)
 * @path /econPoliticalForum/moderator/threads/:threadId/tags/:tagId
 * @accessor api.functional.econPoliticalForum.moderator.threads.tags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the target thread (econ_political_forum_threads.id) */
    threadId: string & tags.Format<"uuid">;

    /** UUID of the tag to remove (econ_political_forum_tags.id) */
    tagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/econPoliticalForum/moderator/threads/:threadId/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econPoliticalForum/moderator/threads/${encodeURIComponent(props.threadId ?? "null")}/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
