import { tags } from "typia";

/**
 * Thread-Tag mapping record representing the association between a discussion
 * thread and a normalized tag.
 *
 * This schema exactly mirrors the `econ_political_forum_thread_tags` Prisma
 * model: it contains the mapping primary key (`id`), foreign keys (`thread_id`,
 * `tag_id`), creation timestamp (`created_at`), and optional soft-delete
 * timestamp (`deleted_at`).
 *
 * Use: Returned by read endpoints that expose thread-tag associations (for
 * example, listing tags for a thread or listing threads for a tag). Sensitive
 * internal or audit-only fields are not present beyond what the Prisma model
 * exposes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumThreadTag = {
  /**
   * Primary key (UUID) of the thread-tag mapping row in the database. This
   * value is generated by the system when the mapping is created. Corresponds
   * to `econ_political_forum_thread_tags.id` in the Prisma model.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the parent thread's UUID. This value must match an existing
   * `econ_political_forum_threads.id` and denotes which thread the tag is
   * attached to. Maps to the `thread_id` column in the
   * `econ_political_forum_thread_tags` Prisma model.
   *
   * Business note: callers should supply a canonical thread identifier;
   * thread existence and visibility checks are performed by the service
   * layer.
   */
  thread_id: string & tags.Format<"uuid">;

  /**
   * Reference to the canonical tag's UUID. This must reference a valid
   * `econ_political_forum_tags.id` and indicates which tag is attached to the
   * thread. Maps to the `tag_id` column in the
   * `econ_political_forum_thread_tags` Prisma model.
   */
  tag_id: string & tags.Format<"uuid">;

  /**
   * Timestamp (ISO 8601) when the mapping was created. Populated by the
   * system on insert and corresponds to `created_at` in the Prisma model.
   *
   * This value is returned to clients for ordering and audit purposes.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp (ISO 8601) when the mapping was archived. Null when
   * active. Maps to `deleted_at` in the Prisma model.
   *
   * Business note: Soft-deleted mappings are excluded from public lists by
   * default; administrative endpoints may include archived mappings when
   * explicitly requested.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumThreadTag {
  /**
   * Create DTO for attaching a tag to a thread.
   *
   * This request object is used by thread-tag creation endpoints. It
   * intentionally excludes system-managed fields such as `id`, `created_at`,
   * and `deleted_at` which are generated and managed by the server/database.
   * The server enforces uniqueness of (thread_id, tag_id) and will return a
   * conflict error when attempting to create an existing active mapping. If a
   * soft-deleted mapping exists, servers may choose to reactivate it instead
   * of creating a duplicate.
   */
  export type ICreate = {
    /**
     * UUID of the thread to which the tag will be attached. Must reference
     * an existing `econ_political_forum_threads.id`.
     *
     * Business rule: the server will validate that the thread exists and is
     * visible to the caller before creating the mapping.
     */
    thread_id: string & tags.Format<"uuid">;

    /**
     * UUID of the tag to attach to the thread. Must reference an existing
     * `econ_political_forum_tags.id`.
     *
     * Business rule: the server will validate tag existence and enforce
     * uniqueness of the (thread_id, tag_id) pair.
     */
    tag_id: string & tags.Format<"uuid">;
  };
}
