import { tags } from "typia";

/**
 * Bookmark DTO representing a user's saved post.
 *
 * This schema corresponds directly to the Prisma model
 * `econ_political_forum_bookmarks` and includes the canonical fields stored in
 * the database. It intentionally omits any derived or aggregated fields (for
 * example, post title or thread summary) which clients should fetch via
 * separate endpoints. Sensitive or system-managed fields (passwords, tokens)
 * are not present on this DTO.
 *
 * When `x-autobe-prisma-schema` is present, every property in this schema has
 * been validated to exist in the referenced Prisma model.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumBookmark = {
  /**
   * Primary key of the bookmark record.
   *
   * Corresponds to econ_political_forum_bookmarks.id in the Prisma schema.
   * This UUID uniquely identifies the bookmark record in the system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Owning registered user's UUID.
   *
   * References econ_political_forum_registereduser.id. This field identifies
   * the user who created and owns the bookmark. In API responses this is the
   * canonical owner id and should be validated by callers when performing
   * updates or deletes.
   */
  registereduser_id: string & tags.Format<"uuid">;

  /**
   * Target post UUID that the bookmark references.
   *
   * Maps to econ_political_forum_posts.id. This is the canonical link from
   * the bookmark to the saved post. Clients use this id to fetch post/thread
   * context for display.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Creation timestamp of the bookmark in ISO 8601 format (UTC).
   *
   * Corresponds to econ_political_forum_bookmarks.created_at. Used for
   * sorting and auditing when presenting a user's saved items.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last update to the bookmark record.
   *
   * Corresponds to econ_political_forum_bookmarks.updated_at. It is updated
   * when mutable metadata on the bookmark changes.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp. When null the bookmark is active; when set, the
   * bookmark is treated as deleted from public listings.
   *
   * This field maps to econ_political_forum_bookmarks.deleted_at and enables
   * audit-preserving soft-deletes instead of hard removal.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumBookmark {
  /**
   * Request DTO for listing and searching bookmarks.
   *
   * This object models client-provided search and pagination parameters used
   * to query bookmark summaries. It is intentionally conservative: page/limit
   * or cursor-based pagination is supported, filters are provided to scope
   * results by post or thread, and date-range filters allow time-based
   * queries. Administrative-only flags (for example includeDeleted) are
   * included but servers MUST enforce RBAC for them.
   *
   * Use UTC date-time formats for date filters and valid UUIDs for id
   * filters.
   */
  export type IRequest = {
    /**
     * Page number for paginated results.
     *
     * When provided, results are returned for the requested 1-based page.
     * Use either page/limit or cursor for pagination; when both are
     * provided, the server may prefer cursor semantics. Typical clients
     * should default to page=1 when omitted.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /**
     * Maximum number of items to return per page.
     *
     * This controls page size for page-based pagination. Servers SHOULD
     * enforce a maximum limit (for example 100). Clients SHOULD use
     * conservative limits (for example 20) for typical UI lists.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * Opaque continuation cursor for cursor-based pagination.
     *
     * If provided, the server returns the page following this cursor. Use
     * this in preference to page/limit when high-performance pagination or
     * stable ordering is required.
     */
    cursor?: string | null | undefined;

    /**
     * Filter bookmarks by the specific post's UUID.
     *
     * When set, only bookmarks referencing this post_id are returned. The
     * value must be a valid UUID string per the Prisma model's post_id
     * field.
     */
    postId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter to return bookmarks belonging to posts in a specific
     * thread.
     *
     * This is a convenience filter: when provided the server may resolve
     * post->thread relations and return bookmarks whose posts belong to the
     * given thread id.
     */
    threadId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * ISO 8601 start timestamp to filter bookmarks created at or after this
     * time.
     *
     * Provide an inclusive lower bound for created_at. Use UTC date-time
     * strings (for example: 2025-10-03T19:21:50Z).
     */
    createdFrom?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * ISO 8601 end timestamp to filter bookmarks created at or before this
     * time.
     *
     * Provide an inclusive upper bound for created_at. The server will
     * validate that createdFrom <= createdTo when both are present.
     */
    createdTo?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * When true, include soft-deleted bookmark records (deleted_at not
     * null) in results.
     *
     * This flag is typically restricted to administrative clients.
     * Non-admin callers should omit or set to false.
     */
    includeDeleted?: boolean | undefined;

    /**
     * Field to sort results by. Default is 'created_at'.
     *
     * Allowed values: 'created_at', 'updated_at'. Use the companion 'order'
     * property to control direction.
     */
    sort_by?: "created_at" | "updated_at" | undefined;

    /**
     * Sort direction for the selected sort_by field.
     *
     * Allowed values: 'asc' (ascending) or 'desc' (descending). Default is
     * 'desc' to show newest first.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Bookmark creation request DTO.
   *
   * This DTO is used by clients to request creation of a new bookmark that
   * links the authenticated user to an existing post. Clients MUST NOT
   * provide ownership fields (registereduser_id) or system-managed timestamps
   * (id, created_at, updated_at, deleted_at); those are generated and managed
   * by the server.
   *
   * The server will validate that the provided post_id exists and that the
   * caller is authorized to bookmark the referenced post. On success the
   * server persists a new econ_political_forum_bookmarks row and returns the
   * canonical bookmark representation.
   */
  export type ICreate = {
    /**
     * Identifier of the post to bookmark. This maps to
     * econ_political_forum_bookmarks.post_id which references
     * econ_political_forum_posts.id in the Prisma schema. The server
     * derives the owning registered user from the authenticated session and
     * will set registereduser_id; clients MUST supply the target post id
     * only.
     */
    post_id: string & tags.Format<"uuid">;
  };

  /**
   * Bookmark summary DTO representing a saved post reference.
   *
   * This summary maps directly to the Prisma model
   * `econ_political_forum_bookmarks`. It contains the minimal, public-safe
   * fields required to render a user's bookmark list: the bookmark id, the
   * referenced post id, and creation timestamp. Additional internal fields
   * (for example moderation flags or actor identifiers) are intentionally
   * excluded from this summary.
   *
   * Design notes:
   *
   * - When this DTO is used in responses, the server should ensure privacy
   *   rules are applied (for example, redacting owner identifiers when
   *   returning lists to third parties).
   */
  export type ISummary = {
    /**
     * Primary key of the bookmark record in the database
     * (econ_political_forum_bookmarks.id).
     *
     * This is the canonical identifier used for bookmark management and
     * audit references.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the bookmarked post
     * (econ_political_forum_bookmarks.post_id).
     *
     * This is the primary reference used by the client to navigate to the
     * saved content.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * Timestamp when the bookmark record was created
     * (econ_political_forum_bookmarks.created_at).
     *
     * Timestamps are expressed in ISO 8601 / date-time format and are
     * useful for sorting and display in bookmark lists.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the last update to the bookmark record
     * (econ_political_forum_bookmarks.updated_at).
     *
     * Present for completeness; may be equal to created_at when no updates
     * occurred.
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
