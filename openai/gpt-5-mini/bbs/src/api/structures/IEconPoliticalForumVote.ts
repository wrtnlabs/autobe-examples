import { tags } from "typia";

/**
 * Vote record representing a user's vote on a post.
 *
 * This schema directly represents the `econ_political_forum_votes` Prisma
 * model. It includes the primary identifiers linking the vote to the user and
 * post, the domain-limited vote value (1 = upvote, -1 = downvote), and
 * system-managed timestamps used for auditing and history. Sensitive fields are
 * not present in this DTO.
 *
 * Use this type for responses that return the canonical persisted vote record.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumVote = {
  /**
   * Primary key of the vote record.
   *
   * This property maps directly to the `econ_political_forum_votes.id` column
   * in the Prisma schema. It is a UUID assigned by the system when the vote
   * is persisted and is used to reference the vote in moderation and audit
   * logs.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the registered user who cast the vote.
   *
   * This corresponds to `econ_political_forum_votes.registereduser_id` and
   * references `econ_political_forum_registereduser.id`. It is included to
   * attribute the vote to an account for auditing, abuse detection, and
   * enforcement of the one-vote-per-user-per-post rule.
   */
  registereduser_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the post that was voted on.
   *
   * This maps to `econ_political_forum_votes.post_id` and references
   * `econ_political_forum_posts.id`. It ties the vote to the canonical post
   * record for ranking and moderation purposes.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Vote value. Business domain: 1 = upvote, -1 = downvote.
   *
   * This field maps to `econ_political_forum_votes.value` and MUST use the
   * exact integer values defined by the domain. Implementations should
   * validate and enforce that only 1 or -1 are accepted values.
   */
  value: 1 | -1;

  /**
   * Timestamp when the vote was created.
   *
   * This corresponds to `econ_political_forum_votes.created_at` in the Prisma
   * model and is populated by the system when the vote is first recorded. Use
   * ISO 8601 date-time format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the vote was last updated.
   *
   * This corresponds to `econ_political_forum_votes.updated_at` and is
   * updated when a user changes their vote. It is used for audit and
   * change-tracking.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp for the vote. Null when active.
   *
   * This maps to `econ_political_forum_votes.deleted_at`. When set, the vote
   * is considered archived/removed from public aggregates but retained for
   * audit and abuse analysis.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumVote {
  /**
   * Create DTO for casting a vote on a post.
   *
   * This schema corresponds to the create request for the Prisma model
   * econ_political_forum_votes. Required fields are only those necessary to
   * create the vote record; actor identity (registereduser_id) and timestamps
   * are populated by the service using authenticated context and server
   * clock. The API enforces the unique constraint (registereduser_id +
   * post_id) and will update an existing vote if the user has already voted
   * on the target post according to business rules.
   */
  export type ICreate = {
    /**
     * Identifier of the target post to vote on. Maps to
     * econ_political_forum_votes.post_id and references
     * econ_political_forum_posts.id.
     *
     * Business rule: The server derives the voting user (registereduser_id)
     * from the authenticated session; clients MUST NOT supply
     * registereduser_id in the create payload.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * Vote value. Allowed values are 1 (upvote) or -1 (downvote). This
     * enforces the application domain rule that votes are trinary in
     * semantics (here represented as numeric up/down). The server validates
     * this value and enforces one active vote per user per post.
     */
    value: 1 | -1;
  };

  /**
   * Vote update DTO used for changing an existing vote.
   *
   * All properties are optional to follow the Partial<T> update pattern.
   * Clients SHOULD provide the `value` property to change a vote; the server
   * validates ownership, uniqueness (one vote per user-post pair), and
   * business constraints. This DTO maps to the `econ_political_forum_votes`
   * Prisma model.
   */
  export type IUpdate = {
    /**
     * Updated vote value. Allowed integers: 1 = upvote, -1 = downvote.
     *
     * This field maps to `econ_political_forum_votes.value`. Per update DTO
     * rules, fields are optional and the backend will validate ownership
     * and business constraints before applying the change.
     */
    value?: 1 | -1 | undefined;
  };
}
