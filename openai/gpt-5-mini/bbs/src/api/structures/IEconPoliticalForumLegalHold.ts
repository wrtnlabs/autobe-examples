import { tags } from "typia";

/**
 * Canonical representation of a Legal Hold record.
 *
 * This schema maps directly to the Prisma model
 * `econ_political_forum_legal_holds` and includes all persisted columns that
 * are safe to expose to authorized administrative clients. Fields that are
 * nullable in the database are represented using `oneOf` with `null` to clearly
 * indicate optional values.
 *
 * Business notes:
 *
 * - `registereduser_id`, `post_id`, `thread_id`, and `moderation_case_id` are
 *   optional and may be null depending on the hold scope.
 * - `hold_reason` uses a constrained set of values to standardize reporting and
 *   filtering.
 * - Implementations should enforce access control: only administrators may view
 *   full hold records, and access to sensitive `notes` must be audited.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumLegalHold = {
  /**
   * Primary key of the legal hold record. Maps to
   * `econ_political_forum_legal_holds.id` in Prisma.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional identifier of the administrator or legal officer who placed the
   * hold. Corresponds to `registereduser_id` in the Prisma model. Null if
   * placed by system process or not specified.
   */
  registereduser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional reference to the specific post under hold
   * (`econ_political_forum_posts.id`). Null when the hold targets a thread or
   * case instead.
   */
  post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional reference to the thread under hold
   * (`econ_political_forum_threads.id`). Null when the hold applies to a post
   * or a case-level hold.
   */
  thread_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional associated moderation case id
   * (`econ_political_forum_moderation_cases.id`) that motivated the hold.
   * Nullable when not applicable.
   */
  moderation_case_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * The short coded reason for the legal hold. Use one of the predefined
   * values to classify the hold's purpose.
   */
  hold_reason: "subpoena" | "law_enforcement" | "litigation" | "other";

  /**
   * Timestamp when the legal hold became effective (ISO 8601). Maps to
   * `hold_start` in the Prisma model.
   */
  hold_start: string & tags.Format<"date-time">;

  /**
   * Optional timestamp when the hold is scheduled to end. Null indicates an
   * indefinite hold.
   */
  hold_end?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Whether the hold is currently active. Maps to `is_active` in the Prisma
   * model.
   */
  is_active: boolean;

  /**
   * Optional internal notes or case identifiers for administrative use. Do
   * not expose sensitive PII in this field to unprivileged clients.
   */
  notes?: string | null | undefined;

  /**
   * Record creation timestamp in ISO 8601 format. Maps to `created_at` in the
   * Prisma model.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IEconPoliticalForumLegalHold {
  /**
   * Request DTO for searching and listing legal hold records.
   *
   * This type is intended for administrative queries. It supports filtering
   * by holder, post, thread, moderation case, reason, active state, and
   * hold-start date range. Pagination may be expressed through either
   * `page`/`limit` or an opaque `cursor`. Sorting is limited to `created_at`
   * or `hold_start` and a sort `direction` may be provided.
   *
   * Notes:
   *
   * - All identifier filters expect UUID format when provided.
   * - When a field is optional and intentionally not used, clients may provide
   *   `null` explicitly for clarity.
   * - Use of `includeDeleted` or access to archived records is controlled at
   *   the API layer and requires administrator privileges; that behavior is
   *   handled outside this DTO.
   */
  export type IRequest = {
    /**
     * Filter by the administrator or legal officer who placed the hold.
     * This corresponds to the `registereduser_id` field on the Prisma model
     * `econ_political_forum_legal_holds`. Use UUID format. Nullable to
     * indicate no filter.
     */
    holderId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter holds applied to a specific post. Matches the `post_id` column
     * in the Prisma model. Use UUID format or null to omit this filter.
     */
    postId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter holds applied to a specific thread. Matches the `thread_id`
     * column in the Prisma model. Use UUID format or null to omit this
     * filter.
     */
    threadId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter holds associated with a moderation case
     * (`moderation_case_id`). Use UUID format or null to omit.
     */
    moderationCaseId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter by hold reason. Allowed values: 'subpoena',
     * 'law_enforcement', 'litigation', 'other'. Nullable to omit this
     * filter.
     */
    holdReason?:
      | "subpoena"
      | "law_enforcement"
      | "litigation"
      | "other"
      | null
      | undefined;

    /**
     * Optional boolean filter to return only active holds (true) or
     * inactive holds (false). Null means no filter.
     */
    isActive?: boolean | null | undefined;

    /**
     * Optional start of hold_start date range (ISO 8601 date-time). Use to
     * filter holds that began on or after this timestamp. Nullable to
     * omit.
     */
    holdStartFrom?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional end of hold_start date range (ISO 8601 date-time). Use to
     * filter holds that began on or before this timestamp. Nullable to
     * omit.
     */
    holdStartTo?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Page number for page/limit pagination. 1-based. If omitted, the
     * server may use cursor or default to page 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of items to return per page. Server-enforced upper
     * bound is 200. If omitted, server default applies.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * Optional opaque cursor for cursor-based pagination. Provide either
     * cursor or page/limit. Nullable when not used.
     */
    cursor?: string | null | undefined;

    /**
     * Sort field. Allowed values: 'created_at' or 'hold_start'. Null
     * indicates server default sorting.
     */
    sort?: "created_at" | "hold_start" | null | undefined;

    /**
     * Sort direction: 'asc' or 'desc'. Null indicates server default
     * (usually 'desc').
     */
    direction?: "asc" | "desc" | null | undefined;
  };
}
