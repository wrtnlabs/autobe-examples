import { tags } from "typia";

/**
 * Feature flag record for econPoliticalForum.
 *
 * This schema maps directly to the Prisma model
 * `econ_political_forum_feature_flags`. It represents runtime toggles used by
 * the application. Fields:
 *
 * - Id: UUID primary key
 * - Key: unique string key
 * - Enabled: global boolean
 * - Rollout_percentage: optional integer 0–100 for gradual rollout
 * - Description: optional admin-facing text
 * - Created_at / updated_at: timestamps
 * - Deleted_at: optional soft-delete timestamp (null when active)
 *
 * Timestamps use ISO 8601 date-time format and values must be returned in UTC.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumFeatureFlag = {
  /**
   * Primary key (UUID) for the feature flag record as stored in the
   * `econ_political_forum_feature_flags` Prisma model. Used to uniquely
   * identify the flag.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique feature key used by application code to reference the flag
   * (example: 'new_search_ui'). This value is unique within the table and
   * serves as the canonical identifier for the flag.
   */
  key: string;

  /**
   * Indicates whether the feature flag is enabled globally. When true, the
   * feature is considered active subject to rollout rules.
   */
  enabled: boolean;

  /**
   * Optional rollout percentage (0–100) used for progressive exposure. When
   * present, it indicates the percentage of eligible users who should see the
   * feature. Null indicates no partial rollout is configured and the global
   * `enabled` boolean controls exposure.
   */
  rollout_percentage?:
    | (number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<100>)
    | null
    | undefined;

  /**
   * Administrative description of the feature flag purpose and guidance for
   * operators. Use this field to explain the intended behavior, rollout
   * considerations, and any dependencies. Nullable when no description is
   * provided.
   */
  description?: string | null | undefined;

  /**
   * Creation timestamp (ISO 8601) for the feature flag row (Prisma
   * timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp (ISO 8601) when the feature flag row was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft-delete timestamp (ISO 8601). When present, the flag is
   * archived and should be excluded from normal administrative listings
   * unless specifically requested by an administrator.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumFeatureFlag {
  /**
   * Request DTO for searching and listing feature flags. This payload
   * supports filtering by key, enabled state, rollout percentage range,
   * environment scoping, pagination, and sorting. The server must validate
   * numeric bounds (rolloutMin/rolloutMax in 0-100) and enforce page size
   * limits. includeDeleted is admin-only and should be rejected for non-admin
   * callers.
   */
  export type IRequest = {
    /**
     * Optional partial or full key to filter feature flags (for example
     * 'new_search_ui'). Supports prefix or substring matching depending on
     * server implementation.
     */
    key?: string | undefined;

    /** Optional filter to return only flags matching the enabled state. */
    enabled?: boolean | undefined;

    /**
     * Optional minimum rollout percentage (0-100) to filter flags whose
     * rollout_percentage is >= this value.
     */
    rolloutMin?:
      | (number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<100>)
      | undefined;

    /**
     * Optional maximum rollout percentage (0-100) to filter flags whose
     * rollout_percentage is <= this value.
     */
    rolloutMax?:
      | (number & tags.Type<"int32"> & tags.Minimum<0> & tags.Maximum<100>)
      | undefined;

    /**
     * Optional environment to scope the search (for example 'production' or
     * 'staging'). Null means environment-agnostic results.
     */
    environment?: string | null | undefined;

    /**
     * Sort field. Allowed values: 'key', 'created_at',
     * 'rollout_percentage'.
     */
    sort?: "key" | "created_at" | "rollout_percentage" | undefined;

    /** Sort direction: 'asc' or 'desc'. Defaults to 'asc' when omitted. */
    direction?: "asc" | "desc" | undefined;

    /** Page number for page-based pagination (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Maximum items per page. Server enforces a maximum of 200. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * When true, include soft-deleted flags (deleted_at != null). This
     * behavior is typically restricted to administrator callers; public
     * requests should not set this flag.
     */
    includeDeleted?: boolean | undefined;
  };

  /**
   * Feature flag summary DTO used by administrative lists and lightweight
   * management UIs.
   *
   * This object contains the minimal, safe set of fields required to display
   * and manage feature flags without exposing sensitive runtime values. It
   * maps directly to the Prisma model `econ_political_forum_feature_flags`
   * and includes identification, enabled state, optional rollout percentage,
   * human description, and timestamps.
   *
   * Use cases: admin flag lists, audit summaries, feature dashboards, and
   * non-sensitive public cataloging when `is_public` semantics are applied
   * elsewhere.
   */
  export type ISummary = {
    /**
     * Primary key UUID for the feature flag as stored in the Prisma model
     * econ_political_forum_feature_flags.
     *
     * This stable identifier uniquely identifies the feature flag record
     * and is used for administrative operations, linking audit entries, and
     * programmatic lookups.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Canonical unique key of the feature flag (for example:
     * 'new_search_ui' or 'moderation.report_threshold').
     *
     * This key follows a namespace-like pattern and is used by application
     * code to reference the flag. Clients and admin UIs should treat this
     * as the authoritative name for the feature.
     */
    key: string;

    /**
     * Boolean indicating whether the feature flag is globally enabled.
     *
     * When true, the feature is considered active for consumers subject to
     * rollout rules. When false, the feature is disabled by default.
     */
    enabled: boolean;

    /**
     * Optional rollout percentage (0–100) representing progressive exposure
     * to a subset of users. When present, the value indicates the percent
     * of eligible users that should receive the feature. Use 0 for
     * effectively disabled rollout, 100 for full rollout. Implementations
     * MUST enforce bounds (0–100).
     */
    rollout_percentage?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Human-readable description that explains the purpose, intended
     * behavior, and any important rollout or rollback guidance for this
     * feature flag.
     *
     * This text is intended for administrators and operators to understand
     * the flag's intent, safety considerations, and any immediate actions
     * that should follow toggling the flag (for example, cache refresh or
     * background job considerations).
     */
    description?: string | null | undefined;

    /**
     * ISO 8601 timestamp when the feature flag record was created in the
     * database (Prisma field `created_at`).
     *
     * Used for auditing and sorting historical records.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * ISO 8601 timestamp of the most recent update to the feature flag
     * (Prisma field `updated_at`). Nullable when the record has not been
     * modified since creation. Useful for synchronization, cache
     * invalidation, and change-tracking.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
