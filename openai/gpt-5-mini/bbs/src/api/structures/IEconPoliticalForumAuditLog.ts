import { tags } from "typia";

/**
 * Canonical audit log entry representing an immutable event in the system.
 *
 * This schema mirrors the Prisma model `econ_political_forum_audit_logs` and
 * includes all persisted fields that are safe to return from audit endpoints.
 * Fields that are nullable in the Prisma model are expressed using oneOf with a
 * null branch to preserve explicit null semantics in clients.
 *
 * Usage notes:
 *
 * - Audit entries are append-only. Do not attempt to mutate historical entries.
 * - Access to `details` may be restricted or redacted depending on caller
 *   privileges; implementers should enforce access controls and record any
 *   reads of sensitive fields in administrative audit trails.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumAuditLog = {
  /**
   * Primary key of the audit entry. Matches
   * econ_political_forum_audit_logs.id in the Prisma schema.
   *
   * This is the canonical identifier for the immutable audit record and is
   * used for retrieval and legal export.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional acting registered user id (UUID) that triggered the audit event.
   * Null for system actions. Corresponds to
   * econ_political_forum_audit_logs.registereduser_id.
   */
  registereduser_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional moderator id (UUID) associated with the event. Null when the
   * action was not performed by a moderator. Maps to
   * econ_political_forum_audit_logs.moderator_id.
   */
  moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional referenced post id (UUID) related to this audit entry. Null if
   * not applicable. Corresponds to econ_political_forum_audit_logs.post_id.
   */
  post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional referenced thread id (UUID) related to this audit entry. Null if
   * not applicable. Corresponds to
   * econ_political_forum_audit_logs.thread_id.
   */
  thread_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional referenced report id (UUID) for actions tied to a report. Maps
   * to econ_political_forum_audit_logs.report_id.
   */
  report_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional moderation case id (UUID) associated with this audit event.
   * Corresponds to econ_political_forum_audit_logs.moderation_case_id.
   */
  moderation_case_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Categorical action type describing the event (for example:
   * 'create','edit','delete','hide','warn','suspend','escalate','legal_disclosure').
   *
   * This field maps to econ_political_forum_audit_logs.action_type and should
   * use server-defined action literals.
   */
  action_type: string;

  /**
   * Type of the target object acted upon (for example:
   * 'post','thread','user','report','moderation_case').
   *
   * Corresponds to econ_political_forum_audit_logs.target_type in the Prisma
   * schema.
   */
  target_type: string;

  /**
   * Canonical identifier of the target as a string for cross-domain queries;
   * nullable when not applicable. Maps to
   * econ_political_forum_audit_logs.target_identifier.
   */
  target_identifier?: string | null | undefined;

  /**
   * Free-text or JSON-serialized details of the event (for example moderator
   * rationale, evidence snapshot reference). This field is stored in
   * econ_political_forum_audit_logs.details and may be redacted in public
   * summaries. It should remain concise and avoid storing raw sensitive data;
   * heavy binary artifacts should be stored externally and referenced by
   * evidence_reference in moderation logs.
   */
  details?: string | null | undefined;

  /**
   * Timestamp when the audit entry was recorded (ISO 8601 UTC). Corresponds
   * to econ_political_forum_audit_logs.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Flag indicating whether the audit entry was generated by an automated
   * system (true) or by a human actor (false). Maps to
   * econ_political_forum_audit_logs.created_by_system.
   */
  created_by_system: boolean;
};
export namespace IEconPoliticalForumAuditLog {
  /**
   * Request DTO for searching and paginating audit log entries. NOTE: Direct
   * user id or actor id filters have been removed to comply with IRequest
   * security rules; use `my_items` to request actor-scoped results when
   * permitted. Use created_from/created_to for time windows and 'query' for
   * safe full-text search.
   */
  export type IRequest = {
    /** Page number for page-based pagination (1-based). Default is 1. */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of records per page when using page-based pagination. Server
     * enforces a maximum limit (for example 100).
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Opaque cursor for cursor-based pagination. When present, server
     * returns the page after this cursor. Use null to indicate no cursor.
     */
    cursor?: string | null | undefined;

    /**
     * Optional free-text search over audit details (redacted excerpts for
     * non-admin views). Use server-defined sanitization; max length
     * recommended 1000 chars.
     */
    query?: string | null | undefined;

    /**
     * Filter by audit action type (for example:
     * 'create','edit','delete','hide','warn','suspend','escalate','legal_disclosure').
     * Null means include all action types.
     */
    action_type?: string | null | undefined;

    /**
     * Filter by the target object type (for example:
     * 'post','thread','user','report','moderation_case'). Null means
     * include all types.
     */
    target_type?: string | null | undefined;

    /**
     * Filter by canonical target identifier string when available. Null
     * means do not filter by identifier.
     */
    target_identifier?: string | null | undefined;

    /**
     * Start of created_at date range (inclusive) in ISO 8601 format. Use
     * null to indicate no lower bound.
     */
    created_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End of created_at date range (inclusive) in ISO 8601 format. Use null
     * to indicate no upper bound.
     */
    created_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional filter: true to include only system-generated events, false
     * to include only human-generated events. Null includes both.
     */
    created_by_system?: boolean | null | undefined;

    /**
     * Business-safe actor-scoped flag. When true the server restricts
     * results to entries relevant to the authenticated actor; use instead
     * of direct actor id filters. Null means no actor scoping.
     */
    my_items?: boolean | null | undefined;

    /**
     * Field used to sort results. Recommended: 'created_at', 'action_type',
     * 'target_type'. Default is 'created_at'.
     */
    sort_by?: string | null | undefined;

    /** Sort direction: 'asc' or 'desc'. Default is 'desc' (newest first). */
    sort_order?: string | null | undefined;
  };
}
