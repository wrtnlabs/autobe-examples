import { tags } from "typia";

/**
 * Moderation report record mapping to the Prisma model
 * `econ_political_forum_reports`.
 *
 * This schema represents a structured report submitted by a user or guest to
 * flag content for moderator review. It mirrors the columns defined in the
 * Prisma model and is intended for moderator and administrator UIs that require
 * the canonical report fields for triage, escalation, and auditing. When
 * populated, relational identifiers (reporter_id, reported_post_id,
 * reported_thread_id, moderator_id, moderation_case_id) MUST reference the
 * corresponding database entities.
 *
 * Privacy, moderation and usage notes:
 *
 * Report payloads may include reporter_text supplied by the reporter; backend
 * services MUST sanitize and redact as required before rendering in public
 * contexts. When reporter_anonymous is true, reporter identity MUST not be
 * exposed to content authors or public consumers â€” only moderators and
 * administrators with proper access may view reporter identity. All moderation
 * actions taken in response to a report should generate immutable moderation
 * logs and audit entries to preserve an evidentiary trail.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumReport = {
  /**
   * Primary key of the report record as defined in the Prisma model
   * `econ_political_forum_reports`. Unique identifier used across moderation
   * workflows.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Registered user id of the reporter if available. Nullable when the
   * reporter requested anonymity or when unauthenticated. When present this
   * value MUST reference `econ_political_forum_registereduser.id`.
   */
  reporter_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the reported post (econ_political_forum_posts.id). Nullable when
   * the report targets a thread instead.
   */
  reported_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the reported thread (econ_political_forum_threads.id). Nullable
   * when the report targets a post.
   */
  reported_thread_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Moderator id (econ_political_forum_moderator.id) assigned when a
   * moderator triages the report. Nullable until triage.
   */
  moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional reference to a moderation case aggregating related reports
   * (econ_political_forum_moderation_cases.id).
   */
  moderation_case_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Structured reason code selected by the reporter (for example:
   * 'harassment', 'doxxing', 'misinformation', 'illegal_content', 'spam',
   * 'other').
   */
  reason_code: string;

  /**
   * Optional free-text note provided by the reporter giving additional
   * context. Should be sanitized before display. Typical maximum length: 2000
   * characters.
   */
  reporter_text?: string | null | undefined;

  /**
   * Whether the reporter requested anonymity from the content author/public;
   * when true reporter identity is withheld from public responses and only
   * visible to moderators and administrators as allowed by policy.
   */
  reporter_anonymous: boolean;

  /**
   * Processing state of the report (for example:
   * 'pending','triaged','dismissed','action_taken','escalated').
   */
  status: string;

  /**
   * Operational priority label for triage (for example:
   * 'low','normal','high','urgent').
   */
  priority: string;

  /** Immutable timestamp when the report was created (UTC, ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when a moderator first acknowledged or triaged the report;
   * nullable until triage.
   */
  triaged_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when a moderator recorded a final review or action against the
   * report; nullable until review.
   */
  reviewed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when the report was resolved (action taken or dismissed);
   * nullable until resolution.
   */
  resolved_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Soft-delete timestamp for the report when removal is required. Nullable
   * when active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumReport {
  /**
   * Named filters object for report listing endpoints. Use named type to
   * avoid inline anonymous objects and to enable reuse across request DTOs.
   */
  export type IFilters = {
    /**
     * Filter by report processing state (for example: pending, triaged,
     * dismissed, action_taken, escalated). Exact allowed values are driven
     * by server policy.
     */
    status?: string | undefined;

    /** Operational priority filter (for example: low, normal, high, urgent). */
    priority?: string | undefined;

    /**
     * Filter reports by whether the reporter requested anonymity. Note:
     * reporter identity is not exposed to non-moderator/public consumers.
     */
    reporter_anonymous?: boolean | undefined;

    /** Filter by specific reported post id (UUID). */
    reported_post_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by specific reported thread id (UUID). */
    reported_thread_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by moderator who triaged the report (UUID). */
    moderator_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by associated moderation case id (UUID). */
    moderation_case_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter for reports created at or after this ISO 8601 timestamp. */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for reports created at or before this ISO 8601 timestamp. */
    created_to?: (string & tags.Format<"date-time">) | undefined;
  };

  /** Named sort instruction for report listing requests. */
  export type ISort = {
    /** Field to sort by. Allowed values: created_at, priority, status. */
    sort_by?: "created_at" | "priority" | "status" | undefined;

    /** Sort order direction. */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Request DTO for listing moderation reports. Uses named filter and sort
   * types (no inline objects).
   */
  export type IRequest = {
    /** Page number for page/limit pagination (1-based). */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of items per page for page/limit pagination. Recommended
     * default: 20. Server enforces a maximum.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Opaque cursor token for cursor-based pagination. Use either cursor or
     * page/limit; when both present, page/limit takes precedence.
     */
    cursor?: string | null | undefined;

    /** Optional named filters to narrow the returned reports. */
    filters?: IEconPoliticalForumReport.IFilters | undefined;

    /**
     * Optional sort instruction. If omitted server defaults to created_at
     * desc.
     */
    sort?: IEconPoliticalForumReport.ISort | undefined;

    /**
     * Full-text search string applied to reporter_text. Server MUST
     * sanitize and enforce length limits (for example, max 500 chars).
     */
    query?: string | undefined;

    /**
     * When true include soft-deleted reports (deleted_at not null). This
     * flag is restricted to administrator/audited moderator clients.
     */
    includeDeleted?: boolean | undefined;
  };

  /**
   * Report creation DTO. Clients MUST supply reason_code and at least one
   * target identifier (reported_post_id or reported_thread_id). Reporter
   * identity (reporter_id) MUST NOT be supplied by client; it is derived from
   * authentication context. Timestamps and moderation fields are
   * server-managed.
   */
  export type ICreate = any | any;

  /**
   * Moderation report update object used by triage and workflow APIs.
   *
   * This DTO maps only to mutable processing fields on the Prisma model
   * `econ_political_forum_reports`. It is intended for moderator-driven
   * updates such as setting status, adjusting priority, assigning a
   * moderation case, and stamping triage/review timestamps.
   *
   * All fields in this update payload are optional; the server sets moderator
   * identity and other audit details. Clients MUST NOT attempt to modify
   * reporter-supplied fields (for example, reporter_id or reporter_text) via
   * this DTO. Timestamp fields are nullable and use oneOf to represent either
   * an ISO 8601 string or null to comply with JSON Schema rules for nullable
   * values.
   */
  export type IUpdate = {
    /**
     * Processing state of the report. Use the exact token values above to
     * control moderation workflow.
     */
    status?:
      | "pending"
      | "triaged"
      | "dismissed"
      | "action_taken"
      | "escalated"
      | undefined;

    /**
     * Operational priority label used to order moderation queues and
     * notifications.
     */
    priority?: "low" | "normal" | "high" | "urgent" | undefined;

    /**
     * Optional reference to a moderation case
     * (econ_political_forum_moderation_cases.id) that aggregates related
     * reports. Use null to clear an association.
     */
    moderation_case_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Timestamp when a moderator first acknowledged or triaged the report.
     * Nullable to allow clearing if necessary.
     */
    triaged_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when a reviewer recorded the formal review action. Nullable
     * while the review is in progress.
     */
    reviewed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the report reached final resolution (action taken or
     * dismissed). Null indicates unresolved.
     */
    resolved_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
