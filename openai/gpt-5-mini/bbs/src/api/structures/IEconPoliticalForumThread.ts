import { tags } from "typia";

/**
 * Thread (top-level topic) entity representing a discussion thread in
 * econPoliticalForum.
 *
 * This schema maps directly to the Prisma model econ_political_forum_threads
 * and includes canonical fields used across the API: category reference, author
 * reference, title, slug, lifecycle status, pinned flag, and timestamps. It
 * excludes derived aggregates (view counts, post counts) which are computed
 * externally.
 *
 * Consumers: Use this type for detailed thread responses (GET /threads/{id})
 * where full identification and audit timestamps are required.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumThread = {
  /**
   * Primary key of the thread as defined in the Prisma model
   * econ_political_forum_threads.id.
   *
   * This field is a stable UUID that uniquely identifies the thread across
   * the system and is produced by the database at creation time. Use this
   * value to reference the thread in URLs and cross-entity links.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the category that this thread belongs to
   * (econ_political_forum_categories.id).
   *
   * This property ties the thread to a category used for routing, visibility
   * rules, and moderator assignment. It must reference an active category id
   * present in the categories table.
   */
  category_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the registered user who created the thread
   * (econ_political_forum_registereduser.id).
   *
   * This field is populated by the application from the authenticated session
   * and is immutable via public update endpoints. It appears in responses so
   * clients can display author attribution and link to the author's profile.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * Thread title used for list display and search.
   *
   * Business constraints: prefer concise, descriptive titles. For the API
   * this field is expected to contain between 5 and 200 characters; clients
   * should validate length before submission to improve user experience.
   */
  title: string;

  /**
   * URL-friendly unique slug for the thread (used for routing). Must be
   * unique across threads as enforced by the Prisma model.
   *
   * Slugs should be lower-case, hyphen-separated, and suitable for inclusion
   * in URLs. The server may synthesize a slug when omitted on create (but the
   * Prisma model requires a slug value), so clients should either submit a
   * valid slug or allow the server to generate one.
   */
  slug: string;

  /**
   * Thread lifecycle status (for example: 'open', 'closed', 'pinned').
   *
   * This value is an application-defined status used to control thread
   * behavior in listings and moderation workflows. Valid domain values are
   * defined by the application; clients should use documented values.
   */
  status: string;

  /**
   * Whether the thread is pinned for prominent display.
   *
   * Pinning is normally a privileged action (moderator/administrator). While
   * the underlying Prisma model stores this flag, client-level create/update
   * operations should respect RBAC and avoid setting this flag unless the
   * caller has appropriate privileges.
   */
  pinned: boolean;

  /**
   * Timestamp when the thread record was created (ISO 8601, UTC).
   *
   * This is a system-generated field populated by the database. It is useful
   * for sorting and auditing and should not be set by clients on create.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the thread record was last updated (ISO 8601, UTC).
   *
   * Updated automatically by the system when mutable fields change. Clients
   * may present this value to indicate freshness.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp. Null when the thread is active. When set, the
   * thread is considered archived/removed from public listings but retained
   * for audit and moderation purposes.
   *
   * Use this field to determine visibility; public endpoints should exclude
   * records where deleted_at is non-null unless the caller is an authorized
   * admin.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumThread {
  /**
   * Request DTO for listing/searching threads.
   *
   * Used by thread-list endpoints to express pagination, filtering, sorting
   * and search criteria. Supports both page/limit and cursor styles of
   * pagination; when both are present the server documents which takes
   * precedence. The DTO maps to the read/query behavior of the
   * `econ_political_forum_threads` model and related joins (tags via
   * `econ_political_forum_thread_tags`).
   */
  export type IRequest = {
    /** One-based page number for page-based pagination. Default: 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum items per page. Default: 20. The server enforces an upper
     * bound to protect performance.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Opaque cursor token for cursor-based pagination. When provided,
     * cursor-based continuation is used instead of page/limit. The response
     * includes a next-cursor when applicable.
     */
    cursor?: string | undefined;

    /**
     * Free-text search query applied to thread title and other indexed
     * fields. The server uses trigram/full-text indexes to rank results by
     * relevance when provided. Keep queries reasonably short
     * (implementation example limit: 500 chars).
     */
    q?: string | undefined;

    /**
     * Filter results to a specific category by UUID (maps to
     * `econ_political_forum_threads.category_id`).
     */
    category_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter results to threads associated with the specified tag id (via
     * `econ_political_forum_thread_tags.tag_id`).
     */
    tag_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter results to threads authored by the specified registered user
     * id (maps to `econ_political_forum_threads.author_id`).
     */
    author_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional lifecycle status filter for threads (application-defined
     * domain values such as 'open','closed','pending','pinned'). The server
     * validates allowed values.
     */
    status?: string | undefined;

    /** When true, return only threads with the pinned flag set. */
    pinned?: boolean | undefined;

    /**
     * ISO 8601 start timestamp to filter threads created at or after this
     * time.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 end timestamp to filter threads created before or at this
     * time.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Administrative flag to include soft-deleted threads (deleted_at !=
     * null) in results. Restricted to moderator/administrator callers;
     * public requests setting this flag will be rejected.
     */
    includeDeleted?: boolean | undefined;

    /** Sort option for returned threads. Use exact enum values. */
    sort_by?:
      | "relevance"
      | "newest"
      | "oldest"
      | "updated"
      | "pinned"
      | undefined;

    /**
     * Sort direction applied to the selected `sort_by` field. Default
     * behavior: 'desc' for most sorts.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Create DTO for a new discussion thread. This type is used as the request
   * body for thread-creation endpoints (POST /threads).
   *
   * Business rules and security notes:
   *
   * - Do NOT include author_id in this payload: the server derives author
   *   identity from the authenticated session.
   * - The server validates category membership, enforces category-specific
   *   posting rules (e.g., requires_verification), and may queue the thread
   *   for moderator approval when required by the category.
   * - The server is responsible for setting system fields (id, created_at,
   *   updated_at) on successful creation.
   *
   * This DTO maps to the Prisma model econ_political_forum_threads; all
   * properties present here correspond to model fields and are intentionally
   * conservative to ensure implementability with the existing schema.
   */
  export type ICreate = {
    /**
     * UUID of the category the new thread will belong to
     * (econ_political_forum_categories.id).
     *
     * This is required so the server can enforce category-level rules such
     * as moderation gating and verification requirements.
     */
    category_id: string & tags.Format<"uuid">;

    /**
     * Title of the thread. Must be between 5 and 200 characters.
     *
     * Clients should validate length prior to submission to provide
     * immediate feedback. Titles are used for listings and search.
     */
    title: string & tags.MinLength<5> & tags.MaxLength<200>;

    /**
     * URL-friendly slug for the thread. Must be unique. If omitted, the
     * server MAY synthesize a slug from the provided title but the Prisma
     * model requires a slug value; therefore clients SHOULD provide a valid
     * slug when possible.
     *
     * Format guidance: lower-case, hyphen-separated, URL-safe characters.
     */
    slug: string;

    /**
     * Optional initial lifecycle status for the thread (for example
     * 'open').
     *
     * If omitted the server may set a sensible default such as 'open'.
     * Certain status values may be restricted to
     * moderators/administrators.
     */
    status?: string | undefined;

    /**
     * Optional pin hint. Pinning is typically limited to
     * moderators/administrators; ordinary creators SHOULD not set this
     * flag. If provided by an unprivileged caller, the server will ignore
     * or reject it per RBAC policy.
     */
    pinned?: boolean | undefined;
  };

  /**
   * Thread update DTO for econPoliticalForum. This object contains the
   * mutable fields of the econ_political_forum_threads Prisma model that may
   * be changed through update operations.
   *
   * All properties correspond directly to columns in the
   * `econ_political_forum_threads` Prisma model. Fields are optional to
   * support partial updates; when present, each field is validated against
   * the corresponding database constraints and business rules (uniqueness,
   * referential integrity, moderation gating).
   *
   * Security notes:
   *
   * - This DTO MUST NOT include ownership or system-managed fields such as
   *   `id`, `created_at`, `updated_at`, or any moderator-only internal
   *   fields. Moderator-only mutation rights (for example, setting `pinned`)
   *   are enforced by the service layer rather than by this DTO.
   *
   * Usage guidance:
   *
   * - Use for PUT/PATCH thread update endpoints. The server implements
   *   authorization checks and business validation before applying changes.
   */
  export type IUpdate = {
    /**
     * Identifier of the category the thread should be moved into.
     *
     * This property maps directly to the Prisma column
     * econ_political_forum_threads.category_id. Use a UUID string.
     * Service-layer business rules may restrict changing category (only
     * allowed to thread authors within policy windows or to
     * moderators/administrators). If provided, the server MUST validate the
     * category exists and is active before applying the update.
     */
    category_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Thread title used for listing and search.
     *
     * This maps to the Prisma column econ_political_forum_threads.title.
     * The title SHOULD be between 5 and 200 characters. Titles are
     * full-text indexed (trigram/GIN) so prefer meaningful, keyword-rich
     * titles for discoverability. The server will validate length and
     * sanitize input to remove unsafe HTML/markup.
     */
    title?: string | undefined;

    /**
     * URL-friendly identifier for the thread (unique).
     *
     * This maps to the Prisma column econ_political_forum_threads.slug.
     * Slugs must be lower-case, URL-safe, and unique across threads. If
     * omitted, the server may regenerate or keep the existing slug. If
     * provided, the server MUST validate uniqueness and return a 409
     * Conflict when a collision occurs.
     */
    slug?: string | undefined;

    /**
     * Thread lifecycle status (for example: 'open','closed','pinned').
     *
     * This property maps to the Prisma column
     * econ_political_forum_threads.status. The Prisma schema stores status
     * as a string; the application enforces domain values. Provide one of
     * the allowed status tokens used by your deployment. Changing status
     * may affect visibility and interaction (for example, 'closed' prevents
     * new posts).
     */
    status?: string | undefined;

    /**
     * Whether the thread is pinned for prominent display.
     *
     * This maps to the Prisma column econ_political_forum_threads.pinned.
     * Only moderators or administrators are normally permitted to set this
     * flag; if a non-privileged caller supplies pinned=true the server will
     * either ignore it or return 403 depending on policy.
     */
    pinned?: boolean | undefined;
  };

  /**
   * Summary view of a discussion thread.
   *
   * This DTO is a lightweight representation of a thread intended for list
   * views and discovery. It exposes the canonical, non-sensitive fields from
   * the Prisma model econ_political_forum_threads that are necessary for
   * rendering thread lists, routing, and basic permission checks.
   *
   * Do not include heavy or sensitive fields in this summary. For full thread
   * details (including posts), use the detailed thread endpoint which returns
   * the full econ_political_forum_threads record and associated posts.
   */
  export type ISummary = {
    /**
     * Primary key of the thread as defined in the Prisma model
     * econ_political_forum_threads.
     *
     * This identifier is a UUID used as the canonical reference for a
     * thread across the system, including moderation logs and cross-entity
     * relations. Use this value to fetch full thread details and related
     * posts.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the category this thread belongs to
     * (econ_political_forum_categories.id).
     *
     * This field links the thread to its navigation/category metadata and
     * is used to enforce category-level posting rules such as moderation
     * gating or verification requirements.
     */
    category_id: string & tags.Format<"uuid">;

    /**
     * Registered user id of the thread author
     * (econ_political_forum_registereduser.id).
     *
     * This property is the foreign-key reference to the author account and
     * is used to present author attribution and check ownership or
     * permissions in operations like edit or delete.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * Thread title as stored in econ_political_forum_threads.title.
     *
     * The title is the primary display text for the thread used in listings
     * and search. It should be concise and is intentionally indexed for
     * fast lookup and relevance scoring.
     */
    title: string;

    /**
     * URL-friendly unique slug for the thread as stored in
     * econ_political_forum_threads.slug.
     *
     * Slugs are unique within the threads table and intended for stable
     * routing and shareable URLs. The server may synthesize a slug from the
     * title when one is not provided.
     */
    slug: string;

    /**
     * Lifecycle status of the thread as stored in
     * econ_political_forum_threads.status.
     *
     * Common values in business usage include 'open', 'closed', or 'pinned'
     * to communicate basic thread state to clients and moderators. The
     * application business logic controls allowed values and transitions.
     */
    status: string;

    /**
     * Boolean flag indicating whether the thread is pinned for prominent
     * display (econ_political_forum_threads.pinned).
     *
     * Pinned threads are prioritized in UI listings and usually set by
     * moderators or administrators. Clients should treat this property as
     * an ordering hint rather than a permanent state.
     */
    pinned: boolean;

    /**
     * Creation timestamp for the thread
     * (econ_political_forum_threads.created_at).
     *
     * Stored in UTC date-time format, this field is used for sorting,
     * chronology, and audit purposes. It is system-managed and should not
     * be supplied by clients when creating threads.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp for the thread
     * (econ_political_forum_threads.updated_at).
     *
     * This timestamp is updated whenever thread metadata changes (title,
     * slug, status, pinned). It helps clients detect freshness and support
     * optimistic concurrency patterns.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
