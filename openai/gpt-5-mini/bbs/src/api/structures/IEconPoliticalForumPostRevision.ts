import { tags } from "typia";

/**
 * Post revision snapshot representing a single immutable revision of a post.
 *
 * This schema maps directly to the Prisma model
 * econ_political_forum_post_revisions. Each property corresponds to a column in
 * the model and is intended for use in revision history displays, moderator
 * review, and audit exports.
 *
 * Properties marked nullable are represented using oneOf to allow an explicit
 * null value per JSON Schema nullable guidance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumPostRevision = {
  /**
   * Primary identifier of the revision record. Matches
   * econ_political_forum_post_revisions.id in the Prisma schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the post this revision belongs to. Corresponds to
   * econ_political_forum_post_revisions.post_id and references
   * econ_political_forum_posts.id.
   *
   * Business note: Clients use this field to correlate the revision with the
   * canonical post. The server MUST ensure the referenced post exists when
   * creating revisions.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Optional editor identity (registered user id) who applied the revision.
   * Maps to econ_political_forum_post_revisions.editor_id and may be null
   * when the revision was created by the original author or a system
   * process.
   *
   * Security: Editor identity is captured for audit and moderator review; it
   * is only revealed to authorized consumers (moderators/administrators) when
   * appropriate.
   */
  editor_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Full post content snapshot captured at the time of revision. This is the
   * canonical snapshot stored in
   * econ_political_forum_post_revisions.content.
   *
   * Business rule: Content should be stored as plaintext or sanitized
   * markdown. The server is responsible for applying server-side sanitization
   * before persisting; clients should not rely on the API to perform
   * additional sanitization on read.
   */
  content: string;

  /**
   * Optional short editor note describing the reason for the revision (for
   * example: 'typo fix', 'clarified citation'). Maps to
   * econ_political_forum_post_revisions.note. Nullable when no note was
   * supplied.
   */
  note?: string | null | undefined;

  /**
   * Timestamp when this revision snapshot was recorded (ISO 8601). Maps to
   * econ_political_forum_post_revisions.created_at and is used for ordering
   * revision history.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IEconPoliticalForumPostRevision {
  /**
   * Request DTO for listing or querying post revision snapshots for a single
   * post.
   *
   * This request body is typically used with an endpoint scoped by postId
   * (path parameter) and supports filters (by editor and time range), paging
   * (cursor or page/limit), and sorting. The server enforces role-based
   * access: authors may request their own full snapshots; moderators and
   * administrators may view additional information depending on role and
   * audit rules. The DTO intentionally focuses on search and pagination
   * controls and does not include the postId (which should be sent via the
   * request path).
   */
  export type IRequest = {
    /**
     * Inclusive start timestamp (ISO 8601) to filter revisions by their
     * created_at. When provided, the server returns revisions with
     * created_at >= this value.
     */
    from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Inclusive end timestamp (ISO 8601) to filter revisions by their
     * created_at. When provided, the server returns revisions with
     * created_at <= this value.
     */
    to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional UUID of the editor (econ_political_forum_registereduser.id).
     * When specified, results are limited to revisions authored/recorded by
     * that editor.
     */
    editor_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Page number for page/limit pagination (1-based). If omitted,
     * cursor-based pagination via `cursor` may be used instead.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of revision records to return for page-based
     * pagination. The server enforces default and maximum values
     * (recommended default 20, max 200).
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Opaque continuation cursor for cursor-based pagination. When
     * supplied, the server ignores page/limit parameters and uses the
     * cursor to continue results.
     */
    cursor?: string | undefined;

    /**
     * Sort order for results. Use `created_at.asc` for oldest-first or
     * `created_at.desc` for newest-first. Default is `created_at.desc`.
     */
    sort?: "created_at.asc" | "created_at.desc" | undefined;

    /**
     * When true and the caller is authorized, returns full revision
     * snapshots in the response payload. When false (default) the server
     * may return truncated excerpts for each revision to optimize
     * performance and reduce exposure of historical content. Access to full
     * snapshots may be restricted to authors, moderators, or administrators
     * as appropriate.
     */
    include_full?: boolean | undefined;
  };
}
