import { tags } from "typia";

/**
 * Pagination metadata describing the returned page.
 *
 * This schema defines the canonical pagination information returned alongside
 * paginated data arrays. It provides the current page index and page size, plus
 * server-calculated totals (records and pages) so clients can render accurate
 * pagination controls and compute remaining pages.
 *
 * Implementers: the server MUST populate these fields for every paginated
 * response. Clients should not attempt to infer pagination state from partial
 * values; rely on these server-provided fields. Use ISO 8601 timestamps and
 * UUIDs elsewhere as required by other DTOs; this object only contains numeric
 * pagination metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPagination = {
  /**
   * Current page number (1-based). This value indicates which page of results
   * is being returned and is used by the client to request subsequent pages.
   * The value must be a positive integer; page numbering convention is 1 for
   * the first page.
   */
  current: number & tags.Type<"int32"> & tags.Minimum<1>;

  /**
   * Maximum number of records returned per page. This controls the page size
   * for page-based pagination and must be a positive integer. The API
   * enforces a server-side maximum limit (for example, 100) which clients
   * should respect.
   */
  limit: number & tags.Type<"int32"> & tags.Minimum<1>;

  /**
   * Total number of records matching the request criteria across all pages.
   * This field enables clients to compute remaining pages and to display
   * total counts; it is computed by the server from the query result set and
   * is non-negative.
   */
  records: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Total number of pages available given the requested `limit` and the
   * `records` count. Calculated as the ceiling of `records / limit`. This
   * value is provided by the server to help clients render pagination
   * controls.
   */
  pages: number & tags.Type<"int32"> & tags.Minimum<0>;
};
