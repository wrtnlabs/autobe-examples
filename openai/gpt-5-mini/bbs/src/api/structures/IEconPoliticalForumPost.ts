import { tags } from "typia";

/**
 * IEconPoliticalForumPost — Canonical post representation.
 *
 * Represents a single post or reply in a thread. This schema maps directly to
 * the Prisma model econ_political_forum_posts and includes all persisted,
 * public-facing fields from that model. Fields like `author_id` and `thread_id`
 * are UUIDs referencing other models; timestamps use the ISO 8601 date-time
 * format.
 *
 * This type is intended for read responses (GET thread/post). Sensitive
 * internal fields are excluded (for example any token or secret fields).
 * Moderation-only fields (is_hidden, deleted_at) are present because
 * administrative and moderation endpoints must be able to present them; public
 * views may redact or omit those fields per ACL.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumPost = {
  /**
   * Primary key of the post. Corresponds to econ_political_forum_posts.id in
   * the Prisma schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the parent thread this post belongs to. Maps to
   * econ_political_forum_posts.thread_id and references
   * econ_political_forum_threads.id.
   *
   * This field is required and used to locate the thread context for the
   * post.
   */
  thread_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the registered user who authored the post. Maps to
   * econ_political_forum_posts.author_id and references
   * econ_political_forum_registereduser.id.
   *
   * This value is set by the server from the authenticated session and is
   * immutable from client input.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * Optional parent post id for replies. Maps to
   * econ_political_forum_posts.parent_id. Null indicates a top-level post.
   */
  parent_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Raw post content (plain text or sanitized markdown) as stored in
   * econ_political_forum_posts.content.
   *
   * Business rules: content should be between 10 and 50,000 characters. The
   * server is responsible for sanitization (removing or escaping disallowed
   * HTML) before persisting or returning content.
   */
  content: string;

  /**
   * Flag indicating whether the post has been edited after creation. Maps to
   * econ_political_forum_posts.is_edited.
   *
   * Set to true when the post has one or more revisions.
   */
  is_edited: boolean;

  /**
   * Timestamp of the latest edit if the post was edited. Maps to
   * econ_political_forum_posts.edited_at. Null when never edited.
   */
  edited_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Moderator hide flag. When true, the post is not shown in public listings.
   * Maps to econ_political_forum_posts.is_hidden.
   *
   * This field may be visible only to moderators/administrators in some
   * responses; public consumers may receive a filtered view.
   */
  is_hidden: boolean;

  /**
   * Record creation timestamp for the post. Maps to
   * econ_political_forum_posts.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for the post. Maps to
   * econ_political_forum_posts.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp. When set the post is archived/removed from public
   * listings. Maps to econ_political_forum_posts.deleted_at.
   *
   * Public APIs typically exclude posts with deleted_at set unless the caller
   * is a moderator/administrator and explicitly requests archived records.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumPost {
  /**
   * Request DTO for listing/searching posts. This object is used by endpoints
   * that support complex post queries within a thread or across the site.
   *
   * Notes on usage and security:
   *
   * - The DTO includes both pagination patterns (page/limit and cursor). When
   *   both are provided the server may prefer one over the other
   *   (implementation-dependent); clients should follow documented server
   *   behavior.
   * - Flags that expose moderator/administrator-only content (includeHidden,
   *   includeDeleted) are gated by server-side RBAC checks and must be
   *   omitted or false for ordinary users.
   * - All identifiers are UUID strings and will be validated by the server.
   *   Date/time filters must be ISO 8601 formatted strings.
   *
   * Performance guidance:
   *
   * - Keep page sizes moderate to maintain response latency (default 20,
   *   maximum 100).
   * - Use search and filters to narrow result sets for efficient queries.
   *
   * Sanitization and safety:
   *
   * - The server will sanitize search inputs and will not execute user-provided
   *   content as code. For political/economic content the server may apply
   *   additional moderation rules when returning results (for example
   *   labeling content or excluding pending items).
   */
  export type IRequest = {
    /**
     * Filter posts by the thread UUID. If provided the query returns posts
     * belonging to this thread only.
     *
     * This parameter corresponds to the thread identity visible to API
     * clients (not the database column name). Server will validate the UUID
     * and that the thread exists and is visible to the requester.
     */
    threadId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter posts by author (registered user) UUID.
     *
     * When provided, server returns posts authored by this user. For
     * privacy, some author-scoped queries may be restricted or
     * rate-limited.
     */
    authorId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter posts by parent post id to retrieve replies to a specific
     * post.
     *
     * Useful for building reply threads. When provided, the server
     * validates the parent exists within the thread scope.
     */
    parentId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Full-text search term applied to post content. Uses server-side
     * full-text/trigram indexes for performance.
     *
     * Search strings longer than a configured maximum (for example 500
     * chars) will be rejected. The server will sanitize the query and apply
     * relevance ranking when supported.
     */
    search?: string | undefined;

    /**
     * Page number for page-based pagination. If omitted, server may use
     * cursor-based paging or default to page=1. Default page size is 20;
     * maximum allowed page size is typically 100.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of records per page for page-based pagination. Default is 20
     * and maximum enforced by server is 100.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Opaque cursor token for cursor-based pagination. The server issues
     * cursor tokens in paginated responses; clients pass this value to
     * retrieve the next page.
     */
    cursor?: string | undefined;

    /**
     * Sort order for returned posts. Common values: 'newest', 'oldest',
     * 'most_voted'.
     *
     * When 'most_voted' is requested the service may rely on aggregated
     * data sources; if unavailable the server will fall back to 'newest'.
     */
    sort?: string | undefined;

    /**
     * When true and the caller has moderator/administrator privileges,
     * include moderator-hidden posts (posts where is_hidden = true).
     * Ordinary callers must not set this flag; if supplied by an
     * unauthorized caller the server will ignore it or return 403.
     */
    includeHidden?: boolean | undefined;

    /**
     * When true and the caller has administrator privileges, include
     * soft-deleted posts (posts where deleted_at is not null). Ordinary
     * callers must not set this flag; unauthorized requests will be
     * rejected or treated as includeDeleted=false.
     */
    includeDeleted?: boolean | undefined;

    /**
     * ISO 8601 start datetime to filter posts created at or after this
     * timestamp.
     */
    createdFrom?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 end datetime to filter posts created at or before this
     * timestamp.
     */
    createdTo?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * IEconPoliticalForumPost.ICreate — Create DTO for a new post.
   *
   * Request body used to create a new post (top-level or reply). This type
   * maps to the writable fields of the Prisma model
   * econ_political_forum_posts. System-managed fields (id, author_id,
   * is_edited, edited_at, is_hidden, created_at, updated_at, deleted_at) are
   * NOT accepted from clients and will be set by the server. The
   * authenticated user's id is used as author_id by the server and MUST NOT
   * be provided by the client.
   *
   * Validation notes:
   *
   * - `thread_id` is required and must reference an existing active thread.
   * - `parent_id` if provided must reference an existing post in the same
   *   thread and must not violate reply depth limits.
   * - `content` must be sanitized by the server; clients should send plaintext
   *   or markdown only.
   *
   * Example: { "thread_id": "7b9d6c1e-2a4f-4a9e-9b4f-0a5f1a2b3c4d",
   * "content": "This is an example reply." }
   */
  export type ICreate = {
    /**
     * Identifier of the thread in which the post will be created. Maps to
     * econ_political_forum_posts.thread_id. Required.
     */
    thread_id: string & tags.Format<"uuid">;

    /**
     * Optional parent post id when creating a reply. Null or omitted
     * indicates a top-level post. When provided, the server will validate
     * that the parent post exists and belongs to the same thread.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Post body content. Business validation: length must be between 10 and
     * 50,000 characters. The server is responsible for sanitization and for
     * enforcing edit/reply nesting rules.
     */
    content: string;
  };

  /**
   * Post update DTO used when an authenticated registered user (the post
   * author) requests to change an existing post's content.
   *
   * This object represents the subset of mutable fields clients may submit
   * when updating a post. It excludes immutable or system-managed properties
   * such as id, author_id, created_at, deleted_at, is_hidden, and edited_at —
   * these are controlled by the server. The server MUST validate ownership,
   * enforce the configured edit window, create an append-only revision
   * snapshot in econ_political_forum_post_revisions upon successful update,
   * and record an audit entry (econ_political_forum_audit_logs). For
   * moderator or administrator update flows, server-side logic applies
   * additional privileges and logging; clients must not attempt to set
   * moderator-controlled flags through this DTO.
   */
  export type IUpdate = {
    /**
     * Updated post content mapped to econ_political_forum_posts.content.
     *
     * This field accepts sanitized plaintext or sanctioned markdown.
     * Clients SHOULD submit only the intended content body; the server is
     * responsible for sanitization, revision snapshot creation
     * (econ_political_forum_post_revisions), setting is_edited=true, and
     * populating edited_at when the update is accepted. Business rules such
     * as the author-only edit window (e.g., edits permitted within 24 hours
     * of creation) and moderator locks apply and are enforced by the
     * backend. The backend should reject updates that violate moderation
     * locks or legal holds.
     */
    content?: (string & tags.MinLength<1> & tags.MaxLength<50000>) | undefined;
  };

  /**
   * Summary representation of a post or reply.
   *
   * This DTO exposes the canonical, non-sensitive post fields present in the
   * Prisma model econ_political_forum_posts. It is intended for use in thread
   * list previews, search result snippets, and lightweight displays. The full
   * post content is intentionally omitted from this summary to keep list
   * payloads small and to comply with ISummary guidelines. For full content
   * and revision history, use the detailed post endpoint and the post
   * revisions endpoints.
   */
  export type ISummary = {
    /**
     * Primary key of the post as defined in the Prisma model
     * econ_political_forum_posts.
     *
     * This UUID identifies the post record and is used across votes,
     * bookmarks, reports, and moderation logs to reference the specific
     * post instance.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the thread this post belongs to
     * (econ_political_forum_threads.id).
     *
     * Used to scope the post within a thread and to enable clients to
     * navigate from a post summary directly to its parent thread view.
     */
    thread_id: string & tags.Format<"uuid">;

    /**
     * Registered user id of the post author
     * (econ_political_forum_registereduser.id).
     *
     * This foreign-key associates the post with its author account for
     * attribution and permission checks (edits/deletes).
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * If present, the parent post id indicating this post is a reply to
     * another post (econ_political_forum_posts.parent_id).
     *
     * Null when the post is a top-level message in the thread. This
     * property enables nested reply rendering and reply threading logic.
     */
    parent_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Flag indicating whether the post was edited after creation
     * (econ_political_forum_posts.is_edited).
     *
     * Clients can use this flag to display an "edited" marker and
     * optionally offer a revision history link when present.
     */
    is_edited: boolean;

    /**
     * Timestamp of the latest edit on the post
     * (econ_political_forum_posts.edited_at).
     *
     * Null if the post has never been edited. Used for displaying edit
     * metadata and supporting moderation review.
     */
    edited_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Moderator hide flag indicating whether the post is hidden from normal
     * public listings (econ_political_forum_posts.is_hidden).
     *
     * This is a moderator-controlled flag; ordinary clients should treat
     * hidden posts as not visible. Moderators and administrators may see
     * this flag in moderation views.
     */
    is_hidden: boolean;

    /**
     * Creation timestamp for the post
     * (econ_political_forum_posts.created_at).
     *
     * This is system-managed and used for ordering, pagination, and audit
     * trails. Represented in UTC date-time format.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp for the post record
     * (econ_political_forum_posts.updated_at).
     *
     * Updated whenever the post content or metadata changes. Useful for
     * cache invalidation and optimistic concurrency.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
