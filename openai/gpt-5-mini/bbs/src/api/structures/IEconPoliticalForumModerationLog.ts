import { tags } from "typia";

/**
 * Moderation log entry representing an immutable action taken by a moderator or
 * system actor.
 *
 * This schema directly corresponds to the Prisma model
 * `econ_political_forum_moderation_logs` and includes all public-facing
 * properties that map to persisted columns. Each property description
 * references the corresponding Prisma column and provides operational guidance
 * for consumers and implementers.
 *
 * Notes:
 *
 * - Fields marked nullable use a `oneOf` union to explicitly allow `null` values
 *   rather than omission.
 * - The `x-autobe-prisma-schema` annotation links this DTO to the exact Prisma
 *   model name for downstream validation and code generation.
 * - The `action_type` and `reason_code` fields rely on platform-defined
 *   controlled vocabularies; clients and servers MUST use exact values defined
 *   by moderation policy.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumModerationLog = {
  /**
   * Primary identifier of the moderation log entry. Matches
   * econ_political_forum_moderation_logs.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the acting moderator who performed the action
   * (econ_political_forum_moderator.id). Nullable for system-generated
   * actions.
   */
  moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional UUID of the post affected by the action
   * (econ_political_forum_posts.id). Nullable when the action targets a
   * thread or other object.
   */
  target_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional UUID of the thread affected by the action
   * (econ_political_forum_threads.id). Nullable when the action targets a
   * post.
   */
  target_thread_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional UUID of the moderation case aggregating related reports
   * (econ_political_forum_moderation_cases.id). Nullable when no case
   * association exists.
   */
  moderation_case_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional administrator id (econ_political_forum_administrator.id) when an
   * admin performed or finalized the action. Nullable otherwise.
   */
  acted_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of moderation action applied. Typical values include
   * 'hide','remove','warning','suspend','approve','escalate','merge','flag'.
   * Use the exact action_type strings defined by the platform's moderation
   * policy.
   */
  action_type: string;

  /**
   * Structured policy reason code used to categorize the applied rule or
   * clause (for example:
   * 'doxxing','harassment','misinformation','illegal_content'). Use exact,
   * case-sensitive codes as defined in moderation policy.
   */
  reason_code: string;

  /**
   * Moderator-provided free-text rationale (short explanation). This field is
   * stored for audit and may be redacted in some public views. Recommended
   * max length: 1000 characters (enforced at application level).
   */
  rationale?: string | null | undefined;

  /**
   * Optional URI or internal reference id pointing to stored evidence bundles
   * or archived snapshots related to the action. For security do not expose
   * raw storage paths; return tokenized or application-scoped references
   * instead when used in responses.
   */
  evidence_reference?: string | null | undefined;

  /**
   * Timestamp when the moderation action was recorded (ISO 8601). Immutable
   * once created. Maps to econ_political_forum_moderation_logs.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Optional soft-delete timestamp for the log entry. In standard operation
   * moderation logs are append-only; deleted_at is present only when
   * retention or archival policies require marking entries as removed from
   * active views.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumModerationLog {
  /**
   * Request DTO for searching and listing moderation log entries.
   *
   * This object defines available filters, pagination, and sorting options
   * used by moderation and admin UIs to retrieve matching moderation log
   * entries from the `econ_political_forum_moderation_logs` table. All
   * properties are optional; combine filters as needed. When `includeDeleted`
   * is requested by non-admin callers the server MUST return 403 Forbidden.
   *
   * Notes:
   *
   * - Prefer cursor-based pagination for large result sets.
   * - Free-text `query` targets rationale and other textual fields and should
   *   be sanitized server-side.
   * - `sortBy` values are implementation-defined; servers should document
   *   supported fields in API docs.
   */
  export type IRequest = {
    /**
     * Page number for page-based pagination (1-based). Use either
     * page/limit or cursor for pagination. Default behavior is page=1 when
     * omitted.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of items per page when using page-based pagination. Server
     * enforces a maximum (recommended max 100). Default server-side page
     * size is typically 20.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Opaque pagination cursor for cursor-based pagination. When provided,
     * cursor takes precedence over page/limit pagination.
     */
    cursor?: string | undefined;

    /**
     * Field to sort by. Typical values: 'created_at', 'action_type',
     * 'moderator_id'. When a free-text query is provided, a relevance sort
     * may be applied by the server.
     */
    sortBy?: string | undefined;

    /** Sort direction: 'asc' or 'desc'. Default is 'desc' (newest first). */
    sortOrder?: "asc" | "desc" | undefined;

    /**
     * Free-text search applied to rationale and other textual fields. Use
     * this to surface log entries that match key terms. The server should
     * sanitize and limit query length (recommended max 1000 chars).
     */
    query?: string | undefined;

    /**
     * Filter results to entries authored by the specified moderator (UUID
     * of econ_political_forum_moderator).
     */
    moderator_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter results by administrator who finalized or acted on an entry
     * (UUID of econ_political_forum_administrator).
     */
    acted_admin_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter logs affecting a specific post (UUID of
     * econ_political_forum_posts).
     */
    target_post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter logs affecting a specific thread (UUID of
     * econ_political_forum_threads).
     */
    target_thread_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter logs attached to a specific moderation case (UUID of
     * econ_political_forum_moderation_cases).
     */
    moderation_case_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by action type (for example:
     * 'hide','remove','warning','suspend','approve','escalate','merge','flag').
     * Use exact action_type values used by the system.
     */
    action_type?: string | undefined;

    /**
     * Filter by structured policy reason code applied by moderators (maps
     * to policy clauses). Use exact codes configured in moderation policy
     * (e.g., 'doxxing','harassment','misinformation').
     */
    reason_code?: string | undefined;

    /**
     * Start of created_at date range filter (inclusive). ISO 8601 date-time
     * format is required.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End of created_at date range filter (inclusive). ISO 8601 date-time
     * format is required.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * When true, include soft-deleted moderation log entries (deleted_at
     * not null). This flag is restricted to administrative callers and will
     * be rejected (403) for non-privileged requests.
     */
    includeDeleted?: boolean | undefined;
  };

  /**
   * Moderation log summary representing a single recorded moderation action.
   *
   * This summary provides the essential metadata from the
   * `econ_political_forum_moderation_logs` Prisma model required for lists
   * and dashboards: unique id, action type, structured reason code, actor
   * references (moderator/administrator ids when available), targeted object
   * ids, and the immutable timestamp. It is intended for use in moderator and
   * admin UIs that need to scan recent moderation activity without loading
   * full, sensitive details.
   *
   * Do NOT expose confidential evidence or full internal notes in
   * public-facing contexts. For full details (unredacted rationale or
   * evidence bundles), use the dedicated moderator/admin detail endpoints
   * which enforce stricter auditing and access controls.
   */
  export type ISummary = {
    /**
     * Primary identifier of the moderation log entry as stored in the
     * Prisma model `econ_political_forum_moderation_logs.id`. This UUID is
     * used to reference the moderation event in audit and escalation
     * workflows.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Categorical action taken by the moderator or system. Matches the
     * `action_type` column in the Prisma model (examples:
     * 'hide','remove','warning','suspend','approve','escalate','merge','flag').
     * Use exact values defined by business rules when evaluating and
     * filtering moderation events.
     */
    action_type: string;

    /**
     * Structured policy reason code applied by the moderator (maps to
     * policy clauses). Corresponds to the `reason_code` column in the
     * Prisma model and is intended for programmatic filtering and
     * reporting.
     */
    reason_code: string;

    /**
     * Reference to the acting moderator's id
     * (econ_political_forum_moderator.id). Nullable when the action was
     * performed by a system process or when moderator identity is not
     * available.
     */
    moderator_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If an administrator finalized or acted on the event, this field
     * contains the administrator's id
     * (econ_political_forum_administrator.id). Nullable when not
     * applicable.
     */
    acted_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * When the moderation action targeted a post, this is the referenced
     * post id (econ_political_forum_posts.id). Null when the action
     * targeted a thread or user.
     */
    target_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * When the moderation action targeted a thread, this is the referenced
     * thread id (econ_political_forum_threads.id). Null when the action
     * targeted a post or other object.
     */
    target_thread_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Link to the moderation case aggregating related reports and actions
     * (econ_political_forum_moderation_cases.id). Nullable when the action
     * is not part of a grouped case.
     */
    moderation_case_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional moderator-provided free-text rationale explaining the
     * action. This is the same content stored in the `rationale` column; in
     * summary views this may be truncated by the UI. Full rationale is
     * available via moderator/admin detail endpoints.
     */
    rationale?: string | undefined;

    /**
     * Optional short reference (URI or internal id) pointing to stored
     * evidence bundles or archived snapshots. Corresponds to the
     * `evidence_reference` column in the Prisma model. Implementations
     * should not expose raw paths; use tokenized references when returning
     * to clients.
     */
    evidence_reference?: string | undefined;

    /**
     * Timestamp when the moderation action was recorded (ISO 8601). Maps to
     * `created_at` in the Prisma model and is immutable.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
