import { tags } from "typia";

/**
 * Per-user notification delivery preferences.
 *
 * This DTO represents the canonical preference row stored in the
 * `econ_political_forum_notification_preferences` Prisma model. It includes
 * channel-level toggles (in_app, email, push) and an optional JSON-serialized
 * payload for fine-grained per-type overrides. All fields map directly to
 * columns in the Prisma model, and updates to this DTO must be validated and
 * audited according to platform policy.
 *
 * Notes: `preferences_payload` is stored as a serialized JSON string; servers
 * should validate its structure before persisting and must not store sensitive
 * secrets in this field.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumNotificationPreferences = {
  /**
   * Primary key of the preferences record.
   *
   * Maps to econ_political_forum_notification_preferences.id in the Prisma
   * schema and uniquely identifies this per-user preference row.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Owning registered user's id. This links the preference row to the user.
   *
   * Corresponds to
   * econ_political_forum_notification_preferences.registereduser_id in the
   * Prisma schema. Present in responses for administrative and owner-level
   * APIs; the server must enforce access control when exposing this field.
   */
  registereduser_id: string & tags.Format<"uuid">;

  /**
   * Whether in-app notifications are enabled for the user.
   *
   * This property maps to
   * econ_political_forum_notification_preferences.in_app in the Prisma
   * schema. A value of true indicates the user receives notifications inside
   * the application UI.
   */
  in_app: boolean;

  /**
   * Whether email notifications are enabled for the user.
   *
   * Maps to econ_political_forum_notification_preferences.email in the Prisma
   * schema. Use with caution to avoid exposing PII; the existence of this
   * flag does not reveal the user's email address itself.
   */
  email: boolean;

  /**
   * Whether push notifications are enabled for the user.
   *
   * This corresponds to econ_political_forum_notification_preferences.push in
   * the Prisma schema and controls push-channel delivery behavior.
   */
  push: boolean;

  /**
   * Optional JSON-serialized per-type preference overrides stored as a
   * string.
   *
   * Maps to econ_political_forum_notification_preferences.preferences_payload
   * in the Prisma schema. The content is a serialized JSON object (as a
   * string) describing per-notification-type overrides (for example:
   * {"mentions": {"email": false}}). Servers MUST validate and sanitize this
   * payload when accepting updates and must not allow secrets to be stored
   * here.
   */
  preferences_payload?: string | undefined;

  /**
   * Record creation timestamp in ISO 8601 format.
   *
   * Corresponds to econ_political_forum_notification_preferences.created_at
   * in the Prisma schema and is set by the system when the preference row is
   * first created.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp in ISO 8601 format.
   *
   * Maps to econ_political_forum_notification_preferences.updated_at in the
   * Prisma schema and indicates when the preferences were last modified.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp. Null when the preferences record is active.
   *
   * This property maps to
   * econ_political_forum_notification_preferences.deleted_at in the Prisma
   * schema. Use oneOf to represent the nullable DateTime per JSON Schema
   * rules.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumNotificationPreferences {
  /**
   * Update DTO for a user's notification delivery preferences.
   *
   * This schema represents the mutable fields a user may update to control
   * how they receive notifications from the platform. It maps directly to the
   * Prisma model `econ_political_forum_notification_preferences` and is used
   * for owner-level preference updates.
   *
   * Notes:
   *
   * - Only include fields you intend to modify. Omitted fields are treated as
   *   "no change" by the server.
   * - `preferences_payload` is a serialized JSON string and may be null to
   *   clear per-type overrides.
   * - All updates must be audited by the server when they are performed by
   *   administrators on behalf of other users.
   */
  export type IUpdate = {
    /**
     * Whether in-app notifications are enabled for the user.
     *
     * This flag controls delivery to the in-app notification center. When
     * omitted in the update payload, the server SHOULD preserve the
     * existing value.
     */
    in_app?: boolean | undefined;

    /**
     * Whether email notifications are enabled for the user.
     *
     * This flag controls whether the system will send email notifications
     * for events the user has subscribed to. Use server-side rate limits
     * and do not expose PII via email content inappropriately.
     */
    email?: boolean | undefined;

    /**
     * Whether push notifications (mobile/web push) are enabled for the
     * user.
     *
     * When true, the notification delivery pipeline may attempt push
     * delivery subject to the user's registered push endpoints and delivery
     * preferences.
     */
    push?: boolean | undefined;

    /**
     * Optional JSON-serialized string containing per-notification-type
     * overrides or delivery preferences.
     *
     * This field is stored as a string in the database
     * (preferences_payload). The server MUST validate and sanitize the
     * payload before persisting. If the client intends to clear overrides,
     * pass null explicitly. Examples: '{"mentions":{"email":false}}'.
     */
    preferences_payload?: string | null | undefined;
  };
}
