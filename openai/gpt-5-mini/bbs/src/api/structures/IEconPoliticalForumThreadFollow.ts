import { tags } from "typia";

/**
 * Thread follow (subscription) record linking a registered user to a thread.
 *
 * This schema represents the canonical follow object persisted in the database
 * (Prisma model: econ_political_forum_thread_follows). It is used in responses
 * that return follow details to clients and in administrative/moderation views.
 * Fields include ownership (registereduser_id), target thread reference
 * (thread_id), optional mute window (muted_until), and timestamps for creation,
 * update, and soft-delete.
 *
 * Security note: The API MUST derive and enforce registereduser_id from the
 * authenticated session on write operations. Sensitive or internal-only fields
 * are not present in this schema; moderation/audit logs should be used for
 * operational traceability.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumThreadFollow = {
  /**
   * Primary key of the follow record. Corresponds to
   * econ_political_forum_thread_follows.id in the Prisma schema.
   *
   * This value is generated by the database as a UUID when the follow is
   * created and is used to reference the follow record in APIs and moderation
   * logs.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the registered user who created the follow.
   *
   * Maps to econ_political_forum_thread_follows.registereduser_id in the
   * Prisma schema. This field is required and used for ownership and
   * authorization checks; server-side logic must derive this from the
   * authenticated session when creating or modifying follows.
   */
  registereduser_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the thread that is being followed.
   *
   * Maps to econ_political_forum_thread_follows.thread_id in the Prisma
   * schema. This value must reference an existing active thread
   * (econ_political_forum_threads.id).
   */
  thread_id: string & tags.Format<"uuid">;

  /**
   * Optional timestamp until which notifications for this follow are muted.
   *
   * When non-null, this ISO 8601 date-time defines the expiry of a temporary
   * mute on follow notifications. Stored in
   * econ_political_forum_thread_follows.muted_until and may be used by
   * delivery logic to suppress notifications until the given time.
   */
  muted_until?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Record creation timestamp in ISO 8601 format (UTC).
   *
   * Corresponds to econ_political_forum_thread_follows.created_at. This is
   * set by the system at insert time and is immutable.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp in ISO 8601 format (UTC).
   *
   * Corresponds to econ_political_forum_thread_follows.updated_at and should
   * be updated by the server whenever the follow record is modified (for
   * example when muting is changed).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp. When non-null, the follow is considered
   * archived/removed from active listings.
   *
   * Maps to econ_political_forum_thread_follows.deleted_at. Use this field to
   * implement soft-delete semantics (record retained for audit and potential
   * restoration).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconPoliticalForumThreadFollow {
  /**
   * Thread follow (subscription) creation request DTO.
   *
   * This DTO allows a client to subscribe the authenticated user to receive
   * notifications for a thread. Clients MUST NOT supply registereduser_id or
   * system-managed fields (id, created_at, updated_at, deleted_at); the
   * server assigns those. The optional muted_until field may be provided to
   * temporarily suppress notifications for the follow; provide an ISO 8601
   * date-time string or explicit null to clear a mute.
   *
   * Server-side logic will validate that the thread exists and that the
   * caller is authorized to follow it. The join is unique per
   * (registereduser_id, thread_id) and the server will return existing follow
   * or reactivate a soft-deleted follow as appropriate.
   */
  export type ICreate = {
    /**
     * Identifier of the thread to follow. Maps to
     * econ_political_forum_thread_follows.thread_id which references
     * econ_political_forum_threads.id in the Prisma schema. The server will
     * derive the follower's registereduser_id from the authenticated
     * session.
     */
    thread_id: string & tags.Format<"uuid">;

    /**
     * Optional ISO 8601 timestamp indicating until when notifications for
     * this follow should be muted. If omitted the follow uses the user's
     * default notification preferences. Use explicit null to clear an
     * existing mute.
     */
    muted_until?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request DTO for listing and searching thread follows.
   *
   * This request schema supports both page/limit and cursor pagination,
   * sorting, and common filters used by UI and moderation tooling. Default
   * page size is recommended as 20 (server-side). Admin-only flags such as
   * includeDeleted are restricted and must be enforced by the service layer.
   * Date-range filters use ISO 8601 date-time strings. Use of thread_id as a
   * filter must be validated as a UUID. For user-scoped lists, the server
   * MUST derive the calling user's id from the authentication context (e.g.,
   * use my_items=true) rather than allowing clients to pass
   * registereduser_id.
   */
  export type IRequest = {
    /**
     * Page number for page-based pagination. Defaults to 1 if omitted by
     * client.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of items per page. Server enforces a maximum (100).
     * Default is typically 20.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Opaque cursor value for cursor-based pagination. Use either
     * page/limit or cursor, depending on implementation. When not used, set
     * to null or omit.
     */
    cursor?: string | null | undefined;

    /**
     * Field used to sort results. Allowed values: 'created_at',
     * 'updated_at', 'muted_until'.
     */
    sort_by?: "created_at" | "updated_at" | "muted_until" | undefined;

    /**
     * Sort direction. Allowed values: 'asc' (ascending) or 'desc'
     * (descending).
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Optional filter to return follows only for the specified thread
     * (UUID).
     */
    thread_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * When true and caller is authorized (admin/moderator), include
     * soft-deleted follow records (deleted_at not null) in results.
     * Ordinary callers must not set this flag; server returns 403 if
     * attempted by non-authorized clients.
     */
    includeDeleted?: boolean | undefined;

    /**
     * Optional filter: when true return only follows that are currently
     * muted (muted_until in the future). When false return only non-muted
     * follows.
     */
    muted?: boolean | undefined;

    /**
     * Optional ISO 8601 date-time lower bound for created_at filtering. Use
     * null to omit.
     */
    created_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional ISO 8601 date-time upper bound for created_at filtering. Use
     * null to omit.
     */
    created_to?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
