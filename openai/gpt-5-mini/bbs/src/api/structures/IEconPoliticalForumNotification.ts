import { tags } from "typia";

/**
 * Notification record representing a single user-facing event.
 *
 * This schema corresponds directly to the Prisma model
 * econ_political_forum_notifications. It contains recipient linkage, optional
 * actor and related-object references, delivery metadata, and a JSON-serialized
 * payload stored as a string. Sensitive or moderator-only fields are present in
 * the model (for example reason references) but are subject to role-based
 * redaction by the API. Clients should treat payload as parseable JSON and must
 * sanitize any HTML or user-provided fragments before display.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconPoliticalForumNotification = {
  /**
   * Primary key of the notification record. This UUID uniquely identifies the
   * notification and corresponds to econ_political_forum_notifications.id in
   * the Prisma schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the recipient registered user. This field maps to
   * econ_political_forum_notifications.registereduser_id and identifies the
   * intended recipient for the notification.
   */
  registereduser_id: string & tags.Format<"uuid">;

  /**
   * Optional UUID of the acting user who triggered the notification (for
   * example the author who mentioned the recipient). This corresponds to
   * econ_political_forum_notifications.actor_registereduser_id and may be
   * null when the notification is system-generated.
   */
  actor_registereduser_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Notification type code (for example: 'mention', 'reply', 'moderation',
   * 'system'). This string identifies the semantic kind of the notification
   * and is used by clients to render appropriate UI affordances.
   */
  type: string;

  /**
   * Optional short title for the notification used in lists and summaries.
   * When present it provides a brief human-readable summary suitable for UI
   * display.
   */
  title?: string | undefined;

  /**
   * Optional short message body or excerpt shown in notification lists.
   * Longer payload details are stored in `payload` and may be rendered in a
   * detail view.
   */
  body?: string | undefined;

  /**
   * Flexible JSON-serialized payload stored as a string. This contains
   * structured delivery data such as {"threadId": "...", "postId": "...",
   * "excerpt": "..."} serialized to JSON. The application MUST sanitize and
   * validate this payload before use.
   *
   * Note: Although stored as a string in the Prisma schema, the payload is
   * expected to be parseable JSON. Do not place sensitive secrets in this
   * field.
   */
  payload: string;

  /**
   * Flag indicating whether the recipient has marked the notification as
   * read. This maps to econ_political_forum_notifications.is_read and is a
   * user-managed flag.
   */
  is_read: boolean;

  /**
   * Timestamp when the notification was delivered to the user (for example
   * when an email or push was sent). Nullable when the notification has not
   * been delivered via external channels.
   */
  delivered_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Record creation timestamp (ISO 8601). Matches
   * econ_political_forum_notifications.created_at and indicates when the
   * notification was generated by the system.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for the notification record. Updated when mutable
   * fields such as is_read or delivered_at change.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp. When present the notification is treated as
   * removed from normal listings but retained for audit. Maps to
   * econ_political_forum_notifications.deleted_at. Nullable when active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Optional UUID of a related thread (econ_political_forum_threads.id)
   * referenced by this notification. Nullable when the notification does not
   * reference a thread.
   */
  related_thread_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Optional UUID of a related post (econ_political_forum_posts.id)
   * referenced by this notification. Nullable when the notification does not
   * reference a post.
   */
  related_post_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Optional UUID referencing an associated moderation case
   * (econ_political_forum_moderation_cases.id). Present for
   * moderation-related notifications; nullable otherwise.
   */
  related_moderation_case_id?: (string & tags.Format<"uuid">) | undefined;
};
export namespace IEconPoliticalForumNotification {
  /**
   * Parameters for listing and searching notifications.
   *
   * This DTO encapsulates pagination, filtering, and sorting options used
   * when retrieving notifications for a user. Use either page/limit or cursor
   * for pagination; the server selects the appropriate strategy when both are
   * present. All date/time values must be ISO 8601 date-time strings (UTC).
   * The API enforces caps on page sizes and may reject overly large or
   * expensive queries.
   */
  export type IRequest = {
    /**
     * Zero-based or 1-based page number depending on API convention. Use
     * page or cursor for pagination. Default behavior: when absent, server
     * returns the first page. For large result sets prefer cursor-based
     * pagination.
     *
     * This property is optional and intended for simple page/limit
     * pagination patterns. The server enforces a maximum page size to
     * protect performance.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of items to return per page. Default is 20 and the
     * server enforces a maximum (for example 100). Use smaller values for
     * mobile clients to reduce payload size.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Opaque pagination cursor returned by prior list responses. When
     * present the server will use cursor-based pagination instead of
     * page/limit. Clients should not interpret cursor contents; treat it as
     * an opaque token supplied by the API.
     */
    cursor?: string | undefined;

    /**
     * Optional full-text search query applied to notification title, body,
     * and payload excerpts. Short queries (under 200 characters) are
     * recommended. The server may rank results by relevance when this field
     * is provided.
     */
    q?: string | undefined;

    /**
     * Filter for read/unread notifications. When supplied, results include
     * only notifications where is_read matches this value.
     *
     * Use this filter for inbox-style views to show unread items only.
     */
    is_read?: boolean | undefined;

    /**
     * Filter notifications by their type code (for example: 'mention',
     * 'reply', 'moderation', 'system'). Allowed type codes are defined by
     * the application. This filter is case-sensitive and must match the
     * server's canonical type strings.
     */
    type?: string | undefined;

    /**
     * Optional UUID of a thread to restrict notifications that reference
     * the given thread. This property filters by
     * econ_political_forum_notifications.related_thread_id and must be a
     * valid UUID.
     */
    related_thread_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional UUID of a post to restrict notifications that reference the
     * given post. This property filters by
     * econ_political_forum_notifications.related_post_id and must be a
     * valid UUID.
     */
    related_post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Start of created_at date range (inclusive). Must be an ISO 8601
     * date-time string in UTC. Use this to restrict notifications created
     * on or after the given timestamp.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End of created_at date range (inclusive). Must be an ISO 8601
     * date-time string in UTC. When both created_from and created_to are
     * provided the server validates that created_from <= created_to.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort key for results. Common values: 'created_at'. When omitted
     * defaults to 'created_at'.
     *
     * Note: for relevance-based sorting when 'q' is provided, the server
     * may override sort_by to use relevance.
     */
    sort_by?: string | undefined;

    /**
     * Sort direction. Allowed values: 'asc' or 'desc'. Defaults to 'desc'
     * when omitted.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Update DTO for a notification. This object contains only the mutable
   * fields that a notification recipient (or an authorized administrator) may
   * change via the notification update API.
   *
   * Use this DTO to mark a notification read/unread (is_read), to correct
   * small display text (title, body), to adjust the delivered timestamp
   * (delivered_at), or to attach/update a small structured payload (payload).
   * The server enforces ownership and role-based access control and sanitizes
   * all inputs before persistence.
   */
  export type IUpdate = {
    /**
     * Whether the notification has been read by the recipient.
     *
     * This flag is used by clients to mark notifications as read/unread and
     * by servers to compute unread counts. When present in an update
     * payload, the server will set the notification's is_read state
     * accordingly and record an audit entry when the change is related to
     * moderation workflows.
     */
    is_read?: boolean | undefined;

    /**
     * Timestamp when the notification was delivered to the user (ISO 8601,
     * UTC).
     *
     * This field is optional in update requests. Use the ISO 8601 date-time
     * string when setting an explicit delivery timestamp. To indicate
     * clearing the delivered timestamp, the client may set this property to
     * null. The server validates format and will normalize timezone to
     * UTC.
     */
    delivered_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional short title for the notification shown in UI lists.
     *
     * Clients may update title to correct or localize the displayed
     * summary. Keep titles concise (recommended <= 200 characters). The
     * server will sanitize input and reject overly long values with a 400
     * validation error.
     */
    title?: string | undefined;

    /**
     * Optional short message body or plain-text excerpt for display in
     * notification lists.
     *
     * When provided, the server will sanitize the body to remove disallowed
     * HTML/Markdown and may truncate long values for list views. Use this
     * field for small presentation adjustments only; large payload content
     * should be stored externally and referenced via `payload`.
     */
    body?: string | undefined;

    /**
     * Flexible JSON-serialized delivery payload (as a string) containing
     * structured metadata (for example:
     * {"threadId":"...","postId":"...","excerpt":"..."}).
     *
     * This field allows clients to attach structured delivery data. The
     * server will validate that the content is valid JSON when persisted
     * and will sanitize or redact sensitive keys. Use caution: do not store
     * secrets here. Large payloads are discouraged; keep payloads
     * reasonably sized (server may enforce a max length).
     */
    payload?: string | undefined;
  };

  /**
   * Notification summary returned in lists for the recipient user.
   *
   * This DTO provides the minimal, non-sensitive fields derived from the
   * `econ_political_forum_notifications` Prisma model needed for client inbox
   * and feed views: identifiers, human-readable title/body excerpt,
   * read-state, timestamps, and optional linkage to domain objects
   * (thread/post/moderation case). It intentionally omits or keeps
   * lightweight any large or sensitive payload content; clients should call
   * the notification detail endpoint to retrieve the full payload when
   * needed.
   *
   * Server implementers MUST enforce ownership checks and privacy rules when
   * returning these summaries and MUST honor user notification preferences
   * (in-app/email/push) at the delivery layer.
   */
  export type ISummary = {
    /**
     * Primary identifier of the notification record as stored in
     * `econ_political_forum_notifications.id`. Use this id for marking
     * read/unread or retrieving full details.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Recipient user's id (econ_political_forum_registereduser.id). The
     * summary is scoped to this recipient; servers must enforce ownership
     * when returning summaries to clients.
     */
    registereduser_id: string & tags.Format<"uuid">;

    /**
     * Optional id of the acting user who triggered the notification
     * (econ_political_forum_registereduser.id). Null for system-generated
     * notifications.
     */
    actor_registereduser_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Notification type code (example values: 'mention', 'reply',
     * 'moderation', 'system'). Use these codes to route client UI behavior
     * and to apply user delivery preferences.
     */
    type: string;

    /**
     * Short human-readable title for display in lists. Maps to `title` in
     * the Prisma model and is intended for UI summaries.
     */
    title?: string | undefined;

    /**
     * Optional short message body or excerpt for display in notification
     * lists. For full payload details consult the notification detail
     * endpoint; large payloads should be avoided here.
     */
    body?: string | undefined;

    /**
     * Flag indicating whether the recipient has marked this notification as
     * read. Corresponds to the `is_read` column in the Prisma model.
     */
    is_read: boolean;

    /**
     * When the notification was delivered to the user (for push/email).
     * Null if not delivered or if delivery timestamps are not applicable.
     */
    delivered_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the notification record was created (ISO 8601). Maps
     * to `created_at` in the Prisma model and is the canonical ordering
     * field for notification lists.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Optional reference to a related thread
     * (econ_political_forum_threads.id). Nullable when not applicable.
     */
    related_thread_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional reference to a related post (econ_political_forum_posts.id).
     * Nullable when not applicable.
     */
    related_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional reference to a related moderation case
     * (econ_political_forum_moderation_cases.id). Nullable when not
     * applicable.
     */
    related_moderation_case_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;
  };
}
