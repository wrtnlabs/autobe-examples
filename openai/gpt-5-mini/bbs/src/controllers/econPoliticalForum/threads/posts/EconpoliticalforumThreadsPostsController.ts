import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconPoliticalForumThreadsThreadIdPosts } from "../../../../providers/patchEconPoliticalForumThreadsThreadIdPosts";

import { IPageIEconPoliticalForumPost } from "../../../../api/structures/IPageIEconPoliticalForumPost";
import { IEconPoliticalForumPost } from "../../../../api/structures/IEconPoliticalForumPost";

@Controller("/econPoliticalForum/threads/:threadId/posts")
export class EconpoliticalforumThreadsPostsController {
  /**
   * Search and retrieve posts in a thread with pagination and filters
   * (econ_political_forum_posts).
   *
   * Complex search endpoint for posts in a thread. Accepts a request payload
   * with filters (authorId, parentId, search text, date range), pagination
   * (cursor/limit or page/pageSize), and sort options (newest, oldest,
   * most_voted). By default returns visible posts only.
   * includeHidden/includeDeleted flags are honored only for
   * moderator/administrator callers; unprivileged callers providing those flags
   * SHALL receive 403. Validate threadId as UUID and return 404 if thread not
   * found. Max pageSize = 100.
   *
   * Errors: 400 invalid payload or UUIDs, 401 authentication required for
   * privileged flags, 403 attempting to access restricted content, 404 thread
   * not found, 429 rate limit, 500 server error.
   *
   * @param connection
   * @param threadId Unique identifier (UUID) of the thread whose posts are
   *   being queried
   * @param body Search and pagination parameters for retrieving posts within
   *   the thread
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumPost.IRequest,
  ): Promise<IPageIEconPoliticalForumPost> {
    try {
      return await patchEconPoliticalForumThreadsThreadIdPosts({
        threadId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
