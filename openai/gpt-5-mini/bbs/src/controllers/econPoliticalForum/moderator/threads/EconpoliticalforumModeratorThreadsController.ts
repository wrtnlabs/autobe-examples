import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteEconPoliticalForumModeratorThreadsThreadId } from "../../../../providers/deleteEconPoliticalForumModeratorThreadsThreadId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

@Controller("/econPoliticalForum/moderator/threads/:threadId")
export class EconpoliticalforumModeratorThreadsController {
  /**
   * Soft-delete (mark deleted_at) a thread by ID (econ_political_forum_threads)
   * - moderator.
   *
   * Marks the specified thread's deleted_at timestamp. Only active moderators
   * (authorizationRole=moderator) may delete content in moderation capacity per
   * policy. Server MUST record a moderation log entry with
   * action_type='soft_delete', reason_code and rationale. If a legal hold is
   * active, deletion is forbidden and returns 403. Successful response: 204 No
   * Content.
   *
   * Errors: 400 invalid UUID, 401 unauthenticated, 403 insufficient privileges
   * or legal hold, 404 not found, 429 rate limit, 500 server error.
   *
   * @param connection
   * @param threadId Unique identifier (UUID) of the target thread
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconPoliticalForumModeratorThreadsThreadId({
        moderator,
        threadId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
