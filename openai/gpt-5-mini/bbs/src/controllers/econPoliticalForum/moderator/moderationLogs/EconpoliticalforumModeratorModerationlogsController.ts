import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconPoliticalForumModeratorModerationLogs } from "../../../../providers/patchEconPoliticalForumModeratorModerationLogs";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { getEconPoliticalForumModeratorModerationLogsLogId } from "../../../../providers/getEconPoliticalForumModeratorModerationLogsLogId";

import { IPageIEconPoliticalForumModerationLog } from "../../../../api/structures/IPageIEconPoliticalForumModerationLog";
import { IEconPoliticalForumModerationLog } from "../../../../api/structures/IEconPoliticalForumModerationLog";

@Controller("/econPoliticalForum/moderator/moderationLogs")
export class EconpoliticalforumModeratorModerationlogsController {
  /**
   * Search and retrieve a filtered, paginated list of moderation logs
   * (econ_political_forum_moderation_logs) — moderator view (redacted
   * excerpts).
   *
   * Purpose and overview:
   *
   * Retrieve moderation log entries for triage and operational review. Each
   * entry corresponds to an immutable moderation event recorded in the
   * `econ_political_forum_moderation_logs` table (fields include moderator_id,
   * target_post_id, target_thread_id, moderation_case_id, acted_admin_id,
   * action_type, reason_code, rationale, evidence_reference, created_at). The
   * endpoint supports pagination, filtering, free-text search over rationale
   * (search returns redacted excerpts by default for moderator role), and
   * sorting so moderators can find relevant actions quickly.
   *
   * Security considerations and permissions:
   *
   * Access to this endpoint is restricted to moderator-level staff. Moderators
   * receive redacted excerpts of free-text fields by default. Any request that
   * requests unredacted fields must be made by an administrator path or include
   * an explicit server-approved flag; such accesses must be audited. Evidence
   * URIs returned in summaries must be tokenized or redacted unless caller has
   * elevated privileges.
   *
   * Validation rules and business logic:
   *
   * - Allowed filters: action_type, reason_code, moderator_id, acted_admin_id,
   *   target_post_id, target_thread_id, moderation_case_id, created_at range
   *   (ISO 8601 from/to).
   * - Free-text search: search over `rationale` and `evidence_reference` using
   *   the trigram/GIN index; moderator results return redacted excerpts only.
   * - Pagination: support page/limit or cursor; default page size 20; max page
   *   size 100 (server enforced).
   * - Sorting: by created_at (default desc), or by moderator_id, action_type.
   * - Soft-delete handling: entries with `deleted_at` != null are historical;
   *   include only if includeDeleted=true and caller is administrator or
   *   explicitly permitted.
   *
   * Error handling:
   *
   * Return structured error codes: 400 (invalid input), 401 (unauthenticated),
   * 403 (forbidden), 429 (rate-limited), 500 (server error). Provide
   * descriptive messages and correlation id for support.
   *
   * @param connection
   * @param body Search, filter, sort and pagination parameters for moderation
   *   logs retrieval (moderator-scoped request). Fields include filters for
   *   action_type, reason_code, moderator_id, acted_admin_id, target_post_id,
   *   target_thread_id, moderation_case_id, createdFrom/createdTo (ISO 8601),
   *   query (free-text), page, limit, cursor, sortBy, sortOrder, includeDeleted
   *   (boolean - admins only).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IEconPoliticalForumModerationLog.IRequest,
  ): Promise<IPageIEconPoliticalForumModerationLog.ISummary> {
    try {
      return await patchEconPoliticalForumModeratorModerationLogs({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single moderation log entry (econ_political_forum_moderation_logs) by
   * ID — moderator view (redacted if necessary).
   *
   * Purpose and overview:
   *
   * Return the complete moderation log entry identified by `logId`. Each
   * moderation log is an immutable record created when moderators or system
   * processes take an action. The returned entity includes fields present in
   * the Prisma model such as moderator_id, target_post_id, target_thread_id,
   * moderation_case_id, acted_admin_id, action_type, reason_code, rationale,
   * evidence_reference, and created_at. For moderator callers, sensitive fields
   * may be redacted.
   *
   * Security considerations and user permissions:
   *
   * Access restricted to moderators (redacted view) and administrators (full
   * view). If the log entry is soft-deleted (has `deleted_at`), the endpoint
   * may return 404 for non-admin callers to avoid leaking existence;
   * administrators may view deleted records. Access to unredacted fields must
   * be audited.
   *
   * Validation and error handling:
   *
   * - Path parameter `logId` MUST be a UUID. If not found, return 404.
   * - If the caller lacks privileges, return 403.
   * - If requesting unredacted fields without admin privileges, return 403 or
   *   return a redacted response.
   *
   * @param connection
   * @param logId Unique identifier (UUID) of the moderation log entry to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":logId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("logId")
    logId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumModerationLog> {
    try {
      return await getEconPoliticalForumModeratorModerationLogsLogId({
        moderator,
        logId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
