import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconPoliticalForumModeratorReports } from "../../../../providers/patchEconPoliticalForumModeratorReports";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { getEconPoliticalForumModeratorReportsReportId } from "../../../../providers/getEconPoliticalForumModeratorReportsReportId";
import { putEconPoliticalForumModeratorReportsReportId } from "../../../../providers/putEconPoliticalForumModeratorReportsReportId";

import { IPageIEconPoliticalForumReport } from "../../../../api/structures/IPageIEconPoliticalForumReport";
import { IEconPoliticalForumReport } from "../../../../api/structures/IEconPoliticalForumReport";

@Controller("/econPoliticalForum/moderator/reports")
export class EconpoliticalforumModeratorReportsController {
  /**
   * Retrieve filtered, paginated list of moderation reports (moderator/admin).
   *
   * Retrieve a filtered and paginated list of moderation reports from the
   * `econ_political_forum_reports` table. This operation is intended for
   * moderators and administrators to triage incoming reports. It supports
   * complex search criteria including full-text search on reporter_text,
   * filters by status and priority, filtering by reported_post_id or
   * reported_thread_id, date ranges (created_at, triaged_at), reporter
   * anonymity filter, and assignment to moderation cases.
   *
   * Security and permissions: Only authenticated moderator or administrator
   * roles should access this endpoint. The service MUST ensure reporter
   * anonymity is honored: when reporter_anonymous is true, reporter identifying
   * fields SHALL be omitted or redacted in responses to non-admin consumers.
   * Pagination results SHOULD be limited for UI performance and rate-limited
   * for safety.
   *
   * Relationship to DB entities: This operation reads the
   * `econ_political_forum_reports` model and may join to related tables (posts,
   * threads, moderation_cases, registereduser) for display purposes. The
   * response SHOULD not expose internal-only fields like internal audit
   * references unless the caller is an administrator.
   *
   * Validation and business rules: Request payload must validate pagination
   * parameters (page/limit or cursor), allowed sort fields (created_at,
   * priority, status), and search string lengths. The backend SHOULD enforce
   * maximum page size and rate limits per user role.
   *
   * Related operations: Use `GET /reports/{reportId}` to retrieve full details
   * for a single report and use moderator endpoints to take actions (dismiss,
   * escalate) on individual reports.
   *
   * Error handling: On validation errors return 400; unauthorized access
   * returns 401/403; rate limiting returns 429; unexpected server errors return
   * 500.
   *
   * @param connection
   * @param body Filter, pagination, sorting and search parameters for report
   *   listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IEconPoliticalForumReport.IRequest,
  ): Promise<IPageIEconPoliticalForumReport> {
    try {
      return await patchEconPoliticalForumModeratorReports({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get moderation report details by ID (moderator/admin).
   *
   * Retrieve full details of a single moderation report by reportId from the
   * `econ_political_forum_reports` model.
   *
   * Purpose and overview: This operation returns a single report record
   * including reporter metadata (reporter_id, reporter_anonymous), the reported
   * target (reported_post_id or reported_thread_id), reason_code,
   * reporter_text, status, priority, triage timestamps (triaged_at,
   * reviewed_at, resolved_at), and links to moderation_case_id and moderator_id
   * where available.
   *
   * Security considerations and permissions: Access restricted to moderators
   * and administrators. The service MUST enforce reporter anonymity: if
   * reporter_anonymous is true, reporter_id and any personally identifying
   * fields MUST be withheld from non-admin consumers. Administrators may
   * receive additional fields for legal and audit workflows.
   *
   * Relationship to underlying DB entities: This operation reads
   * `econ_political_forum_reports` and may join to
   * `econ_political_forum_posts`, `econ_political_forum_threads`,
   * `econ_political_forum_moderation_cases`,
   * `econ_political_forum_moderation_logs`, and
   * `econ_political_forum_registereduser` for a complete view.
   *
   * Validation and business rules: The path parameter `reportId` MUST be a
   * valid UUID. If the report does not exist, return 404. If the report is
   * archived (deleted_at set on the report), the endpoint should indicate
   * archival status and include guidance or links to legal/appeals workflows
   * where applicable.
   *
   * Related API operations: `PATCH /reports` for search/listing; moderator
   * action endpoints (e.g., /moderation/cases) to take actions and record
   * moderation logs.
   *
   * Error handling: Return 400 for invalid UUID format, 401/403 for
   * unauthorized requests, 404 if not found or not visible to the caller, 429
   * for rate-limiting, and 500 for server errors.
   *
   * @param connection
   * @param reportId Unique identifier (UUID) of the target report
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumReport> {
    try {
      return await getEconPoliticalForumModeratorReportsReportId({
        moderator,
        reportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a report (moderator-only triage and actions).
   *
   * Update report processing metadata and triage state for an existing report.
   *
   * Purpose and overview: Used by moderators to acknowledge, triage, escalate,
   * or resolve user reports. Updates mutable processing fields on the
   * econ_political_forum_reports record and triggers server-side side effects
   * required by moderation policy (create moderation_case, moderation_log and
   * audit entries where applicable).
   *
   * Security and permissions: Only users with moderator privileges may call
   * this endpoint. The server must authenticate the caller as a moderator and
   * set moderator_id server-side. Admin-only final actions may require
   * additional checks.
   *
   * Relationship to the database: Updates fields on
   * econ_political_forum_reports (status, priority, triaged_at, reviewed_at,
   * resolved_at, moderation_case_id, deleted_at) that exist in the Prisma
   * schema. The server must also generate corresponding entries in
   * econ_political_forum_moderation_logs and econ_political_forum_audit_logs to
   * satisfy audit requirements.
   *
   * Validation and business logic: Validate provided status and priority
   * values. For transitions to action_taken or escalated, create moderation_log
   * entries with rationale and evidence_reference and set
   * reviewed_at/resolved_at as appropriate. Implement optimistic concurrency
   * handling (e.g., require client to include last-known updated_at) and return
   * 409 Conflict when concurrent modifications are detected.
   *
   * @param connection
   * @param reportId Unique identifier of the target report (UUID)
   * @param body Fields moderators may update for triage and action. Server sets
   *   moderator_id from authenticated session and creates moderation logs for
   *   significant state transitions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reportId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumReport.IUpdate,
  ): Promise<IEconPoliticalForumReport> {
    try {
      return await putEconPoliticalForumModeratorReportsReportId({
        moderator,
        reportId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
