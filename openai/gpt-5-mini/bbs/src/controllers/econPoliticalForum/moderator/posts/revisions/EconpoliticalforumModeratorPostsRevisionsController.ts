import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconPoliticalForumModeratorPostsPostIdRevisions } from "../../../../../providers/patchEconPoliticalForumModeratorPostsPostIdRevisions";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";
import { getEconPoliticalForumModeratorPostsPostIdRevisionsRevisionId } from "../../../../../providers/getEconPoliticalForumModeratorPostsPostIdRevisionsRevisionId";

import { IPageIEconPoliticalForumPostRevision } from "../../../../../api/structures/IPageIEconPoliticalForumPostRevision";
import { IEconPoliticalForumPostRevision } from "../../../../../api/structures/IEconPoliticalForumPostRevision";

@Controller("/econPoliticalForum/moderator/posts/:postId/revisions")
export class EconpoliticalforumModeratorPostsRevisionsController {
  /**
   * Moderator: List and filter post revision snapshots.
   *
   * Purpose and overview: Provides moderators with paginated access to full
   * revision snapshots (id, post_id, editor_id, content, note, created_at) and
   * supports filtering by date range and editor_id. Moderator accesses must be
   * recorded in audit logs.
   *
   * Request and filters:
   *
   * - Pagination (cursor or page/limit), default pageSize=20, max=200.
   * - Optional filters: from, to, editor_id.
   * - Sort by created_at.
   *
   * Responses:
   *
   * - 200 OK with IPageIEconPoliticalForumPostRevision
   * - 400 Bad Request for invalid parameters
   * - 403 Forbidden for non-moderator callers
   * - 404 Not Found if postId invalid
   *
   * @param connection
   * @param postId Identifier of the post whose revisions are being queried
   *   (econ_political_forum_posts.id)
   * @param body Filtering, sorting and pagination parameters for post revisions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumPostRevision.IRequest,
  ): Promise<IPageIEconPoliticalForumPostRevision> {
    try {
      return await patchEconPoliticalForumModeratorPostsPostIdRevisions({
        moderator,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single post revision (moderator).
   *
   * Purpose and overview:
   *
   * Retrieve a specific post revision for moderator review. Each revision row
   * contains the full post content at the time of the revision, optional editor
   * id, and created_at timestamp as stored in
   * `econ_political_forum_post_revisions`.
   *
   * Security considerations and permissions:
   *
   * Only authenticated moderators may use this endpoint. All moderator accesses
   * MUST be recorded in the moderation/audit logs
   * (econ_political_forum_audit_logs) with actor id and brief rationale.
   *
   * Validation rules and business logic:
   *
   * - Validate `postId` and `revisionId` are UUIDs.
   * - Confirm the revision belongs to the specified post.
   * - Enforce that the caller has an active moderator role and is authorized to
   *   view the revision.
   * - Return 404 if not found, 403 if not authorized.
   *
   * Errors: 400/401/403/404/500 as appropriate.
   *
   * @param connection
   * @param postId Unique identifier (UUID) of the parent post that the revision
   *   belongs to
   * @param revisionId Unique identifier (UUID) of the revision snapshot to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":revisionId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("revisionId")
    revisionId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumPostRevision> {
    try {
      return await getEconPoliticalForumModeratorPostsPostIdRevisionsRevisionId(
        {
          moderator,
          postId,
          revisionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
