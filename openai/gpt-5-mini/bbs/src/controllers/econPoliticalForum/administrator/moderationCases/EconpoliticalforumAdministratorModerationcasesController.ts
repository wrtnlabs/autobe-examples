import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconPoliticalForumAdministratorModerationCases } from "../../../../providers/postEconPoliticalForumAdministratorModerationCases";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patchEconPoliticalForumAdministratorModerationCases } from "../../../../providers/patchEconPoliticalForumAdministratorModerationCases";
import { getEconPoliticalForumAdministratorModerationCasesCaseId } from "../../../../providers/getEconPoliticalForumAdministratorModerationCasesCaseId";
import { putEconPoliticalForumAdministratorModerationCasesCaseId } from "../../../../providers/putEconPoliticalForumAdministratorModerationCasesCaseId";

import { IEconPoliticalForumModerationCase } from "../../../../api/structures/IEconPoliticalForumModerationCase";
import { IPageIEconPoliticalForumModerationCase } from "../../../../api/structures/IPageIEconPoliticalForumModerationCase";

@Controller("/econPoliticalForum/administrator/moderationCases")
export class EconpoliticalforumAdministratorModerationcasesController {
  /**
   * Create a moderation case (econ_political_forum_moderation_cases).
   *
   * Create a new moderation case to group related reports, coordinate
   * investigations, and track escalation/state.
   *
   * Security and permissions: Only authenticated callers with the administrator
   * role may invoke this endpoint. Implementations must verify caller role and
   * perform referential integrity checks for provided UUID references. The
   * operation returns 201 and the created moderation case on success.
   *
   * Validation and errors:
   *
   * - 400: validation failure (invalid UUID, missing required fields)
   * - 401: unauthenticated
   * - 403: insufficient role
   * - 409: case_number conflict
   * - 500: server error
   *
   * @param connection
   * @param body Moderation case creation payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IEconPoliticalForumModerationCase.ICreate,
  ): Promise<IEconPoliticalForumModerationCase> {
    try {
      return await postEconPoliticalForumAdministratorModerationCases({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of moderation cases
   * (administrator scope).
   *
   * Retrieve a filtered, searchable and paginated list of moderation cases for
   * triage, administrative review, and archived-case access.
   *
   * Purpose and overview: Provides administrators the ability to list and
   * search moderation cases, including archived cases when requested.
   *
   * Security considerations: Only authenticated users with administrator
   * privileges may call this endpoint. Administrators can request archived
   * records and may view additional evidence fields (subject to legal_hold
   * constraints). All accesses MUST be audited.
   *
   * Business rules:
   *
   * - Pagination: default page size 20, max 100. Define cursor or page+limit
   *   format in IRequest DTO.
   * - Filters and sorting same as moderator listing; administrators may request
   *   archived records via explicit parameter.
   *
   * Errors: 400/401/403/429/500.
   *
   * @param connection
   * @param body Search, filter, sort and pagination parameters for moderation
   *   case listing (define cursor or page+limit format in the IRequest DTO)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IEconPoliticalForumModerationCase.IRequest,
  ): Promise<IPageIEconPoliticalForumModerationCase.ISummary> {
    try {
      return await patchEconPoliticalForumAdministratorModerationCases({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single moderation case by ID (administrator scope).
   *
   * Get detailed moderation case information for administrative review,
   * escalation, and appeals. The response includes case fields from
   * econ_political_forum_moderation_cases and id references to related reports
   * and moderation logs. Administrators may access archived records and
   * evidence fields per legal_hold rules. All accesses must be recorded in
   * audit logs.
   *
   * Behavior and validation:
   *
   * - Path parameter caseId must be a valid UUID.
   * - If deleted_at is set and caller is administrator requesting archived
   *   records, the record may be returned; otherwise 404.
   *
   * Errors: 400/401/403/404/500.
   *
   * @param connection
   * @param caseId Unique identifier (UUID) of the moderation case to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":caseId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("caseId")
    caseId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumModerationCase> {
    try {
      return await getEconPoliticalForumAdministratorModerationCasesCaseId({
        administrator,
        caseId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a moderation case (econ_political_forum_moderation_cases).
   *
   * Modify an existing moderation case to reflect investigation progress,
   * assignment changes, escalation decisions, or closure.
   *
   * Security and permissions: Only authenticated callers with the administrator
   * role may update cases. Implementations must verify authorization before
   * applying updates. Updates must create audit entries in
   * econ_political_forum_audit_logs and moderation logs where applicable.
   *
   * Validation and errors:
   *
   * - 400: validation failure (invalid UUID, invalid references)
   * - 401: unauthenticated
   * - 403: not authorized
   * - 404: case not found
   * - 409: case_number conflict
   * - 500: server error
   *
   * @param connection
   * @param caseId Target moderation case's ID
   * @param body Moderation case update payload (partial or full)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":caseId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("caseId")
    caseId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumModerationCase.IUpdate,
  ): Promise<IEconPoliticalForumModerationCase> {
    try {
      return await putEconPoliticalForumAdministratorModerationCasesCaseId({
        administrator,
        caseId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
