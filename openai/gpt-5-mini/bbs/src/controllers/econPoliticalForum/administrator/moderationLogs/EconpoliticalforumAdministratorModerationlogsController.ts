import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconPoliticalForumAdministratorModerationLogs } from "../../../../providers/patchEconPoliticalForumAdministratorModerationLogs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { getEconPoliticalForumAdministratorModerationLogsLogId } from "../../../../providers/getEconPoliticalForumAdministratorModerationLogsLogId";

import { IPageIEconPoliticalForumModerationLog } from "../../../../api/structures/IPageIEconPoliticalForumModerationLog";
import { IEconPoliticalForumModerationLog } from "../../../../api/structures/IEconPoliticalForumModerationLog";

@Controller("/econPoliticalForum/administrator/moderationLogs")
export class EconpoliticalforumAdministratorModerationlogsController {
  /**
   * Search and retrieve a filtered, paginated list of moderation logs
   * (econ_political_forum_moderation_logs) — administrator view (full details,
   * audited).
   *
   * Purpose and overview:
   *
   * Retrieve moderation log entries for auditing and administrative review.
   * Each entry is an immutable moderation event recorded in the
   * `econ_political_forum_moderation_logs` table. The endpoint supports
   * pagination, filtering, free-text search over `rationale` and
   * `evidence_reference`, and sorting. Administrators may retrieve unredacted
   * fields and evidence references; such retrievals must be logged in the
   * access audit trail.
   *
   * Security considerations and permissions:
   *
   * Access restricted to administrators. Returning unredacted free-text and
   * evidence references is allowed only for administrator-level callers and
   * must trigger an audit record including caller id, reason, and correlation
   * id. Evidence references must be tokenized for delivery if they point to
   * stored artifacts.
   *
   * Validation rules and business logic:
   *
   * - Allowed filters: action_type, reason_code, moderator_id, acted_admin_id,
   *   target_post_id, target_thread_id, moderation_case_id, created_at range.
   * - Free-text search: administrator queries may return full fields.
   * - Pagination: support page/limit or cursor; default page size 20; max page
   *   size 100 (server enforced).
   * - Sorting: by created_at (default desc), or by moderator_id, action_type.
   * - Soft-delete handling: entries with `deleted_at` != null remain queryable to
   *   administrators; includeDeleted flag supported.
   *
   * Error handling:
   *
   * Return structured errors: 400, 401, 403, 429, 500. Include correlation id
   * for audit and support.
   *
   * @param connection
   * @param body Search, filter, sort and pagination parameters for moderation
   *   logs retrieval (administrator-scoped request).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IEconPoliticalForumModerationLog.IRequest,
  ): Promise<IPageIEconPoliticalForumModerationLog.ISummary> {
    try {
      return await patchEconPoliticalForumAdministratorModerationLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single moderation log entry (econ_political_forum_moderation_logs) by
   * ID — administrator view (full detail).
   *
   * Purpose and overview:
   *
   * Return the complete moderation log entry identified by `logId` for
   * administrative review. The response includes fields present in the Prisma
   * model: moderator_id, target_post_id, target_thread_id, moderation_case_id,
   * acted_admin_id, action_type, reason_code, rationale, evidence_reference,
   * created_at, and deleted_at. Administrators may view unredacted fields; such
   * access must be recorded in the access audit log.
   *
   * Security considerations and user permissions:
   *
   * Access restricted to administrators. Viewing unredacted rationale or
   * evidence references must be logged with caller id and correlation id.
   * Evidence references that point to stored artifacts must be provided as
   * tokenized short-lived URIs rather than direct file system paths.
   *
   * Validation and error handling:
   *
   * - Path parameter `logId` must be a valid UUID; return 404 if not found.
   * - Unauthorized access returns 403; unauthenticated access returns 401.
   *
   * @param connection
   * @param logId Unique identifier (UUID) of the moderation log entry to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":logId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("logId")
    logId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumModerationLog> {
    try {
      return await getEconPoliticalForumAdministratorModerationLogsLogId({
        administrator,
        logId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
