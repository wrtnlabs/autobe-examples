import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchEconPoliticalForumAdministratorFeatureFlags } from "../../../../providers/patchEconPoliticalForumAdministratorFeatureFlags";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";

import { IPageIEconPoliticalForumFeatureFlag } from "../../../../api/structures/IPageIEconPoliticalForumFeatureFlag";
import { IEconPoliticalForumFeatureFlag } from "../../../../api/structures/IEconPoliticalForumFeatureFlag";

@Controller("/econPoliticalForum/administrator/featureFlags")
export class EconpoliticalforumAdministratorFeatureflagsController {
  /**
   * Search and retrieve paginated feature flags
   * (IPageIEconPoliticalForumFeatureFlag.ISummary).
   *
   * Search for feature flags with robust filtering, sorting, and pagination
   * support.
   *
   * Purpose and overview: This operation enables administrative UIs and tooling
   * to query the feature flag catalog stored in
   * econ_political_forum_feature_flags. It supports complex criteria (partial
   * key match, enabled boolean, rollout percentage range, environment scoping)
   * and returns paginated summaries for efficient listing.
   *
   * Security considerations and user permissions: Feature flags control runtime
   * behavior; therefore read and write access to the full feature flag objects
   * is restricted to administrators. Only administrator-role callers may
   * include deleted records or request full detail. For general listing,
   * deleted/soft-deleted flags are excluded by default.
   *
   * Relationship to underlying database entity: This operation directly maps to
   * the econ_political_forum_feature_flags Prisma model and returns the flags'
   * key, enabled state, rollout_percentage, description, and timestamps.
   *
   * Validation rules and business logic: Request payload must validate filter
   * fields: key (string, optional), enabled (boolean, optional), environment
   * (string, optional), rolloutMin/rolloutMax (integers between 0 and 100),
   * sort (one of: 'key', 'created_at', 'rollout_percentage'), direction
   * ('asc'|'desc'). Server MUST enforce rolloutMin/rolloutMax bounds (0-100)
   * and return 400/422 for invalid ranges. Pagination may be provided either as
   * page/limit (page starting at 1) or cursor-based: when both provided,
   * page/limit takes precedence. Default page size is 25, maximum allowed page
   * size is 200 (server-enforced). If includeDeleted is true, the caller must
   * be an administrator and results will include records with deleted_at set.
   *
   * Expected behavior and error handling: 200 returns paginated summary
   * results. 400 for invalid filter values, 401/403 if unauthorized, 429 when
   * rate limits are exceeded, 500 for internal errors. Use the standard error
   * envelope for all errors.
   *
   * @param connection
   * @param body Search criteria, pagination, sorting and filter parameters for
   *   feature flags retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IEconPoliticalForumFeatureFlag.IRequest,
  ): Promise<IPageIEconPoliticalForumFeatureFlag.ISummary> {
    try {
      return await patchEconPoliticalForumAdministratorFeatureFlags({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
