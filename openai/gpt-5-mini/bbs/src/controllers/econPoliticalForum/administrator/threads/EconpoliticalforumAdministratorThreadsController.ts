import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteEconPoliticalForumAdministratorThreadsThreadId } from "../../../../providers/deleteEconPoliticalForumAdministratorThreadsThreadId";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";

@Controller("/econPoliticalForum/administrator/threads/:threadId")
export class EconpoliticalforumAdministratorThreadsController {
  /**
   * Soft-delete (mark deleted_at) a thread by ID (econ_political_forum_threads)
   * - administrator.
   *
   * Marks the specified thread's deleted_at timestamp. Administrators
   * (authorizationRole=administrator) may perform administrative deletions.
   * Server MUST check for active legal holds and must create audit and
   * moderation logs. On success return 204 No Content. If a legal hold is
   * present, return 403. Permanent purge requires a separate admin-only flow
   * and is not implemented here.
   *
   * Errors: 400 invalid UUID, 401 unauthenticated, 403 legal hold or
   * insufficient privileges, 404 not found, 429 rate limit, 500 server error.
   *
   * @param connection
   * @param threadId Unique identifier (UUID) of the target thread
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconPoliticalForumAdministratorThreadsThreadId({
        administrator,
        threadId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
