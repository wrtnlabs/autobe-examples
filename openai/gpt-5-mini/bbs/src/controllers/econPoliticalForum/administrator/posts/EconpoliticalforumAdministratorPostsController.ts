import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteEconPoliticalForumAdministratorPostsPostId } from "../../../../providers/deleteEconPoliticalForumAdministratorPostsPostId";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";

@Controller("/econPoliticalForum/administrator/posts/:postId")
export class EconpoliticalforumAdministratorPostsController {
  /**
   * Administrator: Soft-delete a post by ID (econ_political_forum_posts).
   *
   * Purpose and overview: Allows administrators to soft-delete posts by setting
   * econ_political_forum_posts.deleted_at. Administrator actions MUST be
   * recorded in econ_political_forum_audit_logs and moderation logs where
   * applicable. The service MUST check for active legal holds
   * (econ_political_forum_legal_holds) and preserve evidence when holds exist;
   * return 423 Locked and record the attempt.
   *
   * Security and auditing:
   *
   * - Only administrators may call this endpoint. All actions must be logged and
   *   retained per retention policy.
   *
   * Responses:
   *
   * - 204 No Content on success
   * - 403 Forbidden if caller lacks administrator privileges
   * - 423 Locked if legal hold prevents deletion
   * - 404 Not Found if post does not exist
   *
   * @param connection
   * @param postId Target post's ID (econ_political_forum_posts.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconPoliticalForumAdministratorPostsPostId({
        administrator,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
