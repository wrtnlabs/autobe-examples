import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconPoliticalForumAdministratorLegalHolds } from "../../../../providers/patchEconPoliticalForumAdministratorLegalHolds";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { getEconPoliticalForumAdministratorLegalHoldsLegalHoldId } from "../../../../providers/getEconPoliticalForumAdministratorLegalHoldsLegalHoldId";

import { IPageIEconPoliticalForumLegalHold } from "../../../../api/structures/IPageIEconPoliticalForumLegalHold";
import { IEconPoliticalForumLegalHold } from "../../../../api/structures/IEconPoliticalForumLegalHold";

@Controller("/econPoliticalForum/administrator/legalHolds")
export class EconpoliticalforumAdministratorLegalholdsController {
  /**
   * Search and retrieve paginated legal hold records (administrator only).
   *
   * Retrieve a filtered and paginated list of legal hold records for
   * administrative review.
   *
   * This endpoint allows authorized administrators to search legal holds by
   * holder (registereduser_id), targeted post or thread, associated moderation
   * case, hold reason, active status, and date ranges for hold_start/hold_end.
   * The request supports pagination (page/limit or cursor), sorting by
   * created_at or hold_start, and advanced filter combinations.
   *
   * Security and privacy: Access is limited to users with the `administrator`
   * role; server-side authorization checks are mandatory. Responses may include
   * internal `notes` and holder identifiers; these fields must be redacted or
   * summarized for callers without appropriate privileges. All administrative
   * read actions should be recorded in the audit log for compliance and
   * traceability.
   *
   * Validation: Request fields must use ISO 8601 date formats for date ranges
   * and UUIDs for identifier filters. Invalid parameter formats should return
   * 400 with structured error codes.
   *
   * @param connection
   * @param body Search and pagination parameters: holderId (UUID), postId
   *   (UUID), threadId (UUID), moderationCaseId (UUID), holdReason (string),
   *   isActive (boolean), holdStartFrom (date-time), holdStartTo (date-time),
   *   page (integer), limit (integer), cursor (string), sort (string -
   *   created_at|hold_start).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IEconPoliticalForumLegalHold.IRequest,
  ): Promise<IPageIEconPoliticalForumLegalHold> {
    try {
      return await patchEconPoliticalForumAdministratorLegalHolds({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single legal hold record by ID (administrator only).
   *
   * Fetch detailed information for a single legal hold by UUID. The endpoint
   * validates the path parameter as a UUID (400 for malformed), returns 404
   * when not found, and 403 when the caller lacks administrator privileges.
   *
   * Security: Only administrators may access full details. Notes and internal
   * evidence references should be redacted unless the calling administrator has
   * elevated permissions. Administrative reads must be logged in the audit
   * trail for compliance.
   *
   * Database relation: Uses the `econ_political_forum_legal_holds` model
   * primary key `id`. Ensure DTO matches model fields.
   *
   * @param connection
   * @param legalHoldId Unique identifier (UUID) of the target legal hold record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":legalHoldId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("legalHoldId")
    legalHoldId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumLegalHold> {
    try {
      return await getEconPoliticalForumAdministratorLegalHoldsLegalHoldId({
        administrator,
        legalHoldId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
