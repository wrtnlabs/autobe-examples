import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchEconPoliticalForumAdministratorUsers } from "../../../../providers/patchEconPoliticalForumAdministratorUsers";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";

import { IPageIEconPoliticalForumRegisteredUser } from "../../../../api/structures/IPageIEconPoliticalForumRegisteredUser";
import { IEconPoliticalForumRegisteredUser } from "../../../../api/structures/IEconPoliticalForumRegisteredUser";

@Controller("/econPoliticalForum/administrator/users")
export class EconpoliticalforumAdministratorUsersController {
  /**
   * Search and retrieve a filtered, paginated list of registered users (admin
   * only).
   *
   * Purpose and overview:
   *
   * This operation performs complex retrieval of registered user records for
   * administrative user management, moderation, and audit tasks. It maps to the
   * econ_political_forum_registereduser model and returns summarized user
   * information safe for admin dashboards while omitting sensitive fields
   * (password_hash and session/reset token data MUST NOT be returned).
   *
   * Security considerations and permissions:
   *
   * Access is restricted to administrators. Calls must be authenticated and
   * authorized; unauthorized callers receive 403. When filters include PII (for
   * example exact email match), the system MUST record an audit entry in
   * econ_political_forum_audit_logs capturing the admin id, filter parameters
   * used, and timestamp. Results are rate-limited and paginated to prevent
   * large exports.
   *
   * Relationship to underlying database entities and business logic:
   *
   * This operation relies on indexes on username, display_name, created_at, and
   * email_verified for efficient queries. Returned summaries should include id,
   * username, display_name (redacted if deleted_at is set), email_verified flag
   * (redacted if deleted), created_at, last_login_at, and is_banned status. Do
   * NOT return password_hash, failed_login_attempts, locked_until, session
   * tokens, or password reset records in any summary payloads.
   *
   * Validation rules and business logic:
   *
   * - Request body must include pagination (page and limit or a cursor), optional
   *   filters: username (partial), displayName (partial), emailVerified
   *   (boolean), createdAtFrom/To (ISO 8601), isBanned (boolean). Sorting may
   *   be by created_at or username.
   * - Default page size: 20. Maximum page size: 100.
   * - If PII filters are used (email exact match), require additional audit
   *   logging and optional elevated admin confirmation per policy.
   *
   * Related operations:
   *
   * - GET /users/{userId} — retrieve single user detail (admin or owner)
   * - PUT/PATCH /users/{userId} — update user profile (owner or admin)
   * - DELETE /users/{userId} — anonymize or remove user (admin)
   *
   * Expected behavior and error handling:
   *
   * - Success: 200 with a paginated summary payload
   *   (IPageIEconPoliticalForumRegisteredUser.ISummary).
   * - 400: invalid filter or pagination parameters.
   * - 401: unauthenticated.
   * - 403: caller lacks administrator privileges.
   * - 429: rate-limited.
   * - 500: server error or query failure.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for registered users
   *   (filters: username, displayName, emailVerified, createdAt range;
   *   pagination: page/limit or cursor; sorting: created_at, username). DTO
   *   reference: IEconPoliticalForumRegisteredUser.IRequest
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IEconPoliticalForumRegisteredUser.IRequest,
  ): Promise<IPageIEconPoliticalForumRegisteredUser.ISummary> {
    try {
      return await patchEconPoliticalForumAdministratorUsers({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
