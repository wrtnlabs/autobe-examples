import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconPoliticalForumRegisteredUserPosts } from "../../../../providers/postEconPoliticalForumRegisteredUserPosts";
import { RegistereduserAuth } from "../../../../decorators/RegistereduserAuth";
import { RegistereduserPayload } from "../../../../decorators/payload/RegistereduserPayload";
import { putEconPoliticalForumRegisteredUserPostsPostId } from "../../../../providers/putEconPoliticalForumRegisteredUserPostsPostId";
import { deleteEconPoliticalForumRegisteredUserPostsPostId } from "../../../../providers/deleteEconPoliticalForumRegisteredUserPostsPostId";

import { IEconPoliticalForumPost } from "../../../../api/structures/IEconPoliticalForumPost";

@Controller("/econPoliticalForum/registeredUser/posts")
export class EconpoliticalforumRegistereduserPostsController {
  /**
   * Create a new post (thread root or reply).
   *
   * Create a new post that becomes part of an existing thread. Clients supply
   * thread_id and content; parent_id is optional for replies. The server sets
   * author_id from the authenticated session — clients MUST NOT provide or
   * override author_id. Service layer responsibilities: validate content length
   * (10–50,000 characters), enforce reply nesting depth (default up to 3
   * levels), verify posting privileges (e.g., email_verified when
   * category.requires_verification is true), and check rate limits. If the
   * thread's category is moderated, the created post may initially be in a
   * pending state or hidden until moderator approval; this behavior is
   * controlled by moderator workflows and the post record's visibility flags
   * (e.g., is_hidden) and NOT by client-supplied fields.
   *
   * Side effects: enqueue notifications for followers/mentions, add search
   * indexing job, create audit log entry in econ_political_forum_audit_logs.
   * The API returns the created post record (fields per
   * econ_political_forum_posts) but MUST not expose moderator-only internal
   * notes.
   *
   * @param connection
   * @param body Post creation payload: required thread_id (UUID) and content
   *   (string). parent_id optional for replies. NOTE: Do NOT provide author_id;
   *   server will assign author_id from authenticated user. See
   *   IEconPoliticalForumPost.ICreate for field definitions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedBody()
    body: IEconPoliticalForumPost.ICreate,
  ): Promise<IEconPoliticalForumPost> {
    try {
      return await postEconPoliticalForumRegisteredUserPosts({
        registeredUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing post by postId.
   *
   * Update the content of an existing post. Only the original author may edit
   * via this endpoint and only within the allowed edit window (default 24
   * hours). The server must verify the post exists and is not soft-deleted
   * (deleted_at is null). If an active moderation case or legal hold applies,
   * the edit MUST be denied. On successful edit the system sets is_edited=true
   * and edited_at to the update timestamp and appends a revision to
   * econ_political_forum_post_revisions for auditability. Moderation and
   * administrator edits must be performed via dedicated moderation endpoints
   * and recorded in moderation logs.
   *
   * Errors: 400 validation errors, 401 unauthenticated, 403 ownership or
   * outside edit window or author banned, 404 not found, 423 locked for
   * moderation/hold, 429 rate limit, 500 server error.
   *
   * @param connection
   * @param postId Unique identifier (UUID) of the target post to update
   * @param body Post update payload. See IEconPoliticalForumPost.IUpdate for
   *   fields. Note: author_id is not accepted; server derives editor id from
   *   authenticated principal. Authors may update content only; moderation
   *   adjustments use moderation APIs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async update(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumPost.IUpdate,
  ): Promise<IEconPoliticalForumPost> {
    try {
      return await putEconPoliticalForumRegisteredUserPostsPostId({
        registeredUser,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft-delete) a post by ID (econ_political_forum_posts).
   *
   * Purpose and overview: This endpoint performs a soft-delete of a post by
   * setting econ_political_forum_posts.deleted_at. It preserves the row for
   * audit and legal retention while removing the post from normal public
   * listings. Revision history (econ_political_forum_post_revisions), votes,
   * and bookmarks remain archived and accessible to authorized actors.
   *
   * Security considerations and user permissions: Primary caller:
   * registeredUser (post owner). Moderators and administrators may also perform
   * deletions where policy allows; the service layer must authorize and record
   * elevated actions. Before performing deletion the service MUST verify no
   * active legal hold applies (econ_political_forum_legal_holds.is_active) and
   * must create an immutable audit record in econ_political_forum_audit_logs.
   * If a moderator or admin performs the action, a moderation log
   * (econ_political_forum_moderation_logs) must be created with action_type,
   * reason_code, and rationale.
   *
   * Validation and business logic:
   *
   * - Path parameter postId must be a valid UUID corresponding to an existing
   *   post.
   * - If the caller is the author, allow soft-delete within policy constraints;
   *   moderators/admins may override subject to logging and escalation rules.
   * - If the post has child replies, public view replaces the top-level content
   *   with a standardized placeholder and preserves replies unless moderators
   *   take additional actions.
   * - If an active legal hold exists, return 423 Locked and record the attempt in
   *   audit logs.
   *
   * Responses:
   *
   * - 204 No Content — successful soft-delete
   * - 404 Not Found — post not found
   * - 403 Forbidden — caller unauthorized to delete
   * - 423 Locked — active legal hold prevents deletion (include case id if
   *   available)
   *
   * @param connection
   * @param postId Target post's ID (econ_political_forum_posts.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconPoliticalForumRegisteredUserPostsPostId({
        registeredUser,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
