import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconPoliticalForumRegisteredUserThreadsThreadIdTags } from "../../../../../providers/postEconPoliticalForumRegisteredUserThreadsThreadIdTags";
import { RegistereduserAuth } from "../../../../../decorators/RegistereduserAuth";
import { RegistereduserPayload } from "../../../../../decorators/payload/RegistereduserPayload";

import { IEconPoliticalForumThreadTag } from "../../../../../api/structures/IEconPoliticalForumThreadTag";

@Controller("/econPoliticalForum/registeredUser/threads/:threadId/tags")
export class EconpoliticalforumRegistereduserThreadsTagsController {
  /**
   * Attach an existing tag to a thread (create thread_tag association).
   *
   * Attach an existing tag to a thread.
   *
   * Purpose and overview: This endpoint creates a new mapping between a thread
   * and an existing tag by writing to econ_political_forum_thread_tags. It
   * improves discovery and tag-based filtering.
   *
   * Security and permissions: Caller must be authenticated. Server MUST verify
   * the caller is either the thread author or has a privileged role
   * (moderator/admin) before allowing the attachment. All operations MUST be
   * logged to the moderation/audit log for traceability.
   *
   * Validation and business rules: Validate path parameter threadId and request
   * body tagId as UUIDs. Confirm both thread and tag exist and are not
   * soft-deleted. If an active mapping exists return 200 with the existing
   * mapping. If a soft-deleted mapping exists, reactivate it (set deleted_at =
   * null) and return the reactivated mapping. On unique-constraint conflict due
   * to concurrency, use transactional upsert or return the canonical mapping;
   * clients are encouraged to send an Idempotency-Key header to avoid
   * duplicates.
   *
   * Error handling: 400 for invalid input, 401/403 for auth/permission
   * failures, 404 if thread or tag not found/archived, 409 for unrecoverable
   * unique-constraint failures only, 500 for server errors.
   *
   * @param connection
   * @param threadId UUID of the target thread (econ_political_forum_threads.id)
   * @param body Creation payload: provide tagId (UUID) to attach to the thread.
   *   Example: { "tagId": "..." }
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumThreadTag.ICreate,
  ): Promise<IEconPoliticalForumThreadTag> {
    try {
      return await postEconPoliticalForumRegisteredUserThreadsThreadIdTags({
        registeredUser,
        threadId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
