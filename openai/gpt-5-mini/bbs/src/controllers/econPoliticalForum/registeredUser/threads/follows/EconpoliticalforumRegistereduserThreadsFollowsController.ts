import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconPoliticalForumRegisteredUserThreadsThreadIdFollows } from "../../../../../providers/postEconPoliticalForumRegisteredUserThreadsThreadIdFollows";
import { RegistereduserAuth } from "../../../../../decorators/RegistereduserAuth";
import { RegistereduserPayload } from "../../../../../decorators/payload/RegistereduserPayload";
import { deleteEconPoliticalForumRegisteredUserThreadsThreadIdFollowsFollowId } from "../../../../../providers/deleteEconPoliticalForumRegisteredUserThreadsThreadIdFollowsFollowId";

import { IEconPoliticalForumThreadFollow } from "../../../../../api/structures/IEconPoliticalForumThreadFollow";

@Controller("/econPoliticalForum/registeredUser/threads/:threadId/follows")
export class EconpoliticalforumRegistereduserThreadsFollowsController {
  /**
   * Create a follow (subscribe) for the authenticated registered user on the
   * specified thread.
   *
   * Create a follow/subscription record that causes the authenticated
   * registered user to receive notifications and have the thread included in
   * the user's followed list. This writes a row to
   * econ_political_forum_thread_follows with thread_id and the server-derived
   * registereduser_id, sets created_at (and updated_at), and returns the follow
   * summary.
   *
   * Security considerations and user permissions: Only authenticated registered
   * users may perform this action. The server MUST verify the caller's identity
   * and check that the account is not banned or locked (email_verified,
   * is_banned, banned_until, locked_until semantics in the registered user
   * model). Requests from unauthenticated callers return 401; forbidden callers
   * return 403.
   *
   * Validation and business logic:
   *
   * - ThreadId path parameter must be a UUID; verify the referenced thread exists
   *   and deleted_at is null.
   * - Enforce uniqueness: if a non-deleted follow already exists for the current
   *   user and thread, return the existing follow (200) to ensure idempotency;
   *   otherwise create and return 201 Created with Location header.
   * - Optional per-follow preferences (muted_until) may be accepted if allowed by
   *   product; validate such fields (ISO 8601 timestamp) and disallow setting
   *   another user's registereduser_id.
   * - Apply per-user rate limits to follow creation to prevent abuse; return 429
   *   with Retry-After when limits are exceeded.
   *
   * @param connection
   * @param threadId UUID of the thread to follow
   *   (econ_political_forum_threads.id)
   * @param body Optional follow preferences. The acting registered user is
   *   derived from the session; clients MUST NOT provide registereduser_id.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumThreadFollow.ICreate,
  ): Promise<IEconPoliticalForumThreadFollow> {
    try {
      return await postEconPoliticalForumRegisteredUserThreadsThreadIdFollows({
        registeredUser,
        threadId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft-delete) a follow for the authenticated user on the specified
   * thread.
   *
   * Remove a follow by marking the corresponding
   * econ_political_forum_thread_follows.deleted_at timestamp. This preserves an
   * audit trail while removing the follow from normal listings.
   *
   * Security considerations and permissions: Authenticated registered users may
   * remove their own follows. The server MUST verify the acting user's identity
   * matches the follow.registereduser_id. Administrators may be allowed to
   * remove follows per policy; server logic should permit elevated roles where
   * appropriate but this endpoint is designed for registered users to erase
   * their own follows.
   *
   * Validation and business logic:
   *
   * - Both path parameters must be valid UUIDs.
   * - Validate follow exists, follow.thread_id equals threadId, and
   *   follow.deleted_at is null before updating.
   * - If the follow does not exist or is already soft-deleted, treat the request
   *   as idempotent and return 204 No Content.
   * - If the follow exists and belongs to the caller, set deleted_at and
   *   updated_at and create an immutable audit log entry
   *   (econ_political_forum_audit_logs) with action_type 'erase_follow' as a
   *   server-side effect.
   * - If a legal hold exists that prevents deletion, refuse permanent purge and
   *   record the attempted action in the audit logs.
   *
   * @param connection
   * @param threadId UUID of the thread the follow belongs to
   *   (econ_political_forum_threads.id)
   * @param followId UUID of the follow record to remove
   *   (econ_political_forum_thread_follows.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":followId")
  public async erase(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("followId")
    followId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconPoliticalForumRegisteredUserThreadsThreadIdFollowsFollowId(
        {
          registeredUser,
          threadId,
          followId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
