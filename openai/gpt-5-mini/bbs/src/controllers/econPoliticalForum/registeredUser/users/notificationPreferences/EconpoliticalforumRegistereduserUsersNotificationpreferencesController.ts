import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconPoliticalForumRegisteredUserUsersUserIdNotificationPreferences } from "../../../../../providers/getEconPoliticalForumRegisteredUserUsersUserIdNotificationPreferences";
import { RegistereduserAuth } from "../../../../../decorators/RegistereduserAuth";
import { RegistereduserPayload } from "../../../../../decorators/payload/RegistereduserPayload";
import { putEconPoliticalForumRegisteredUserUsersUserIdNotificationPreferences } from "../../../../../providers/putEconPoliticalForumRegisteredUserUsersUserIdNotificationPreferences";

import { IEconPoliticalForumNotificationPreferences } from "../../../../../api/structures/IEconPoliticalForumNotificationPreferences";

@Controller(
  "/econPoliticalForum/registeredUser/users/:userId/notificationPreferences",
)
export class EconpoliticalforumRegistereduserUsersNotificationpreferencesController {
  /**
   * Get a user's notification preferences (owner or admin).
   *
   * Purpose and overview:
   *
   * Return the notification settings for the specified user based on
   * econ_political_forum_notification_preferences. The response includes
   * channel-level toggles (in_app, email, push) and an optional
   * preferences_payload that contains per-type overrides. The payload is a
   * serialized JSON string; the implementation must validate and sanitize
   * payload contents and must not allow secrets (for example, webhook tokens)
   * to be stored in preferences_payload.
   *
   * Security and permissions:
   *
   * This endpoint requires authentication. The caller MUST be either the same
   * registered user (owner) or an administrator. If the caller is an
   * administrator, the service MUST create an immutable audit log entry
   * recording admin id, timestamp, target user id, and reason for access.
   * Owners may view and update their own preferences; administrators may view
   * for support/audit purposes only.
   *
   * Relationship to database entity:
   *
   * Operates on econ_political_forum_notification_preferences. Implementation
   * should query by registereduser_id matching the path userId and return the
   * mapped DTO IEconPoliticalForumNotificationPreferences. If the record is
   * soft-deleted (deleted_at not null), behavior should follow product policy
   * (recommended: return default preferences rather than 404) and be
   * consistently implemented.
   *
   * Validation and business rules:
   *
   * - Path parameter userId must be a UUID and must reference an existing
   *   registered user.
   * - Authorization: only the user themself or an administrator may retrieve this
   *   resource.
   * - Preferences_payload must be validated and must not contain secrets or
   *   tokens.
   * - Administrator reads MUST be recorded in an audit log (admin id, timestamp,
   *   target user id, and reason).
   *
   * Related operations:
   *
   * - PUT
   *   /econPoliticalForum/registeredUser/users/{userId}/notificationPreferences
   *   to update preferences (requires ownership or admin privileges per
   *   policy)
   * - GET /econPoliticalForum/users/{userId} to retrieve public profile summary
   *
   * Error handling:
   *
   * - 400: invalid UUID format
   * - 401: authentication required
   * - 403: caller not authorized to access these preferences
   * - 404: user not found (or preferences not found if product policy dictates)
   * - 429: rate limit exceeded
   * - 500: server error
   *
   * @param connection
   * @param userId Unique identifier (UUID) of the target registered user whose
   *   preferences are requested
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async atNotificationPreferences(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumNotificationPreferences> {
    try {
      return await getEconPoliticalForumRegisteredUserUsersUserIdNotificationPreferences(
        {
          registeredUser,
          userId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a registered user's notification preferences (in-app/email/push).
   *
   * Purpose and overview: This operation updates a registered user's
   * notification delivery preferences stored in the
   * econ_political_forum_notification_preferences table. Typical fields:
   * in_app, email, push, and an optional preferences_payload (JSON string) for
   * per-type overrides.
   *
   * Security and permissions: Only the owning registered user or an
   * administrator may perform this operation. Implementations MUST verify the
   * authenticated caller matches the path parameter userId or that the caller
   * holds administrator privileges. Under no circumstances should a user be
   * allowed to update another user's preferences unless they have administrator
   * authorization. All successful updates MUST generate an immutable audit
   * entry (system-generated) recording acting principal, action_type (e.g.,
   * 'update_notification_preferences'), target registereduser_id, and a brief
   * details payload.
   *
   * Behavior and business rules:
   *
   * - The endpoint supports upsert semantics if product policy allows
   *   create-on-update; otherwise the service SHOULD return 404 when no
   *   preferences row exists.
   * - Preferences_payload, when present, MUST be valid JSON and conform to the
   *   server-side preferences schema; implementations MUST enforce a maximum
   *   payload size and reject invalid payloads with 400.
   * - The endpoint MUST NOT allow modification of soft-delete fields; deleted
   *   preferences rows require administrative workflows.
   *
   * Validation and errors:
   *
   * - 400: malformed payload or invalid preference values
   * - 401: unauthenticated
   * - 403: authenticated but not owner and not administrator
   * - 404: userId not found (or preferences row not found if upsert is not
   *   allowed)
   * - 429: rate-limited updates
   *
   * @param connection
   * @param userId UUID of the registered user whose preferences will be updated
   *   (maps to
   *   econ_political_forum_notification_preferences.registereduser_id)
   * @param body Notification preference update payload. Fields correspond to
   *   econ_political_forum_notification_preferences columns (in_app, email,
   *   push, preferences_payload).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumNotificationPreferences.IUpdate,
  ): Promise<IEconPoliticalForumNotificationPreferences> {
    try {
      return await putEconPoliticalForumRegisteredUserUsersUserIdNotificationPreferences(
        {
          registeredUser,
          userId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
