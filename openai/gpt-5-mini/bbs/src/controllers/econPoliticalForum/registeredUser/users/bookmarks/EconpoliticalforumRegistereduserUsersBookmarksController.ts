import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconPoliticalForumRegisteredUserUsersUserIdBookmarks } from "../../../../../providers/patchEconPoliticalForumRegisteredUserUsersUserIdBookmarks";
import { RegistereduserAuth } from "../../../../../decorators/RegistereduserAuth";
import { RegistereduserPayload } from "../../../../../decorators/payload/RegistereduserPayload";
import { getEconPoliticalForumRegisteredUserUsersUserIdBookmarksBookmarkId } from "../../../../../providers/getEconPoliticalForumRegisteredUserUsersUserIdBookmarksBookmarkId";

import { IPageIEconPoliticalForumBookmark } from "../../../../../api/structures/IPageIEconPoliticalForumBookmark";
import { IEconPoliticalForumBookmark } from "../../../../../api/structures/IEconPoliticalForumBookmark";

@Controller("/econPoliticalForum/registeredUser/users/:userId/bookmarks")
export class EconpoliticalforumRegistereduserUsersBookmarksController {
  /**
   * Search and retrieve a user's bookmarks (paginated).
   *
   * Return a filtered, searchable, and paginated list of bookmark summary
   * records for a specific registered user.
   *
   * Purpose and overview: This operation provides clients with the ability to
   * list saved posts (bookmarks) belonging to a user. The response is optimized
   * for list views and includes minimal post/thread metadata to enable quick
   * rendering. The operation references the `econ_political_forum_bookmarks`
   * table and related post/thread entities for enrichment.
   *
   * Security and permissions: Only the owning registered user (authenticated)
   * may retrieve their bookmarks via this endpoint. Server-side checks MUST
   * confirm the caller's identity matches {userId} or the caller holds explicit
   * admin/moderator privileges. Moderators/admins may use admin endpoints for
   * cross-user queries. The default behavior excludes bookmarks where the
   * referenced post is hidden (post.is_hidden = true) and excludes bookmarks
   * with deleted_at set; includeDeleted must be explicitly requested and the
   * caller authorized.
   *
   * Validation rules and business logic: The request body supports pagination
   * (cursor or page/limit), filtering by tagSlug, threadId, postId,
   * categorySlug, and date ranges (from/to). Results default to exclude
   * soft-deleted bookmarks. Sorting options include created_at (default desc)
   * and optional relevance or post-score if available.
   *
   * Error handling: 400 for invalid filters or date ranges, 401 for
   * unauthenticated requests, 403 if the caller is not the owner, 404 if the
   * userId does not exist, and 429 for rate limiting.
   *
   * @param connection
   * @param userId Unique identifier of the target registered user whose
   *   bookmarks are being queried
   * @param body Search, filter and pagination parameters for retrieving a
   *   user's bookmarks. Supports page/limit or cursor pagination, filters
   *   (categorySlug, tagSlug, threadId, postId), date range (from,to), sort
   *   (created_at|relevance), and includeDeleted flag for admin queries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconPoliticalForumBookmark.IRequest,
  ): Promise<IPageIEconPoliticalForumBookmark.ISummary> {
    try {
      return await patchEconPoliticalForumRegisteredUserUsersUserIdBookmarks({
        registeredUser,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single bookmark for a user.
   *
   * Return a single bookmark record with details and references to the saved
   * post/thread.
   *
   * Purpose and overview: This operation fetches the full bookmark object for
   * display in a detail view or when the client needs canonical information
   * about the saved item. It uses the `econ_political_forum_bookmarks` table as
   * the authoritative source for bookmark metadata.
   *
   * Security considerations: Only the owning user or authorized administrative
   * roles should retrieve a bookmark for another user. Implementations MUST
   * enforce ownership checks and return 403 for unauthorized access. If the
   * referenced post is hidden by moderators, the endpoint should either return
   * 403 for non-privileged callers or return a restricted metadata view
   * depending on policy.
   *
   * Validation and error handling: Validate UUID formats for both parameters.
   * Return 400 for malformed UUIDs, 401 for unauthenticated requests, 403 for
   * access to another user's bookmark, 404 when the bookmark cannot be found or
   * is archived (absent includeDeleted authorization), and 500 for server
   * errors. Accesses that return bookmark details should be recorded in audit
   * logs for compliance and tracing.
   *
   * @param connection
   * @param userId Unique identifier of the user who owns the bookmark
   * @param bookmarkId Unique identifier of the bookmark to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":bookmarkId")
  public async at(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("bookmarkId")
    bookmarkId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumBookmark> {
    try {
      return await getEconPoliticalForumRegisteredUserUsersUserIdBookmarksBookmarkId(
        {
          registeredUser,
          userId,
          bookmarkId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
