import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconPoliticalForumUsersUserId } from "../../../providers/getEconPoliticalForumUsersUserId";

import { IEconPoliticalForumRegisteredUser } from "../../../api/structures/IEconPoliticalForumRegisteredUser";

@Controller("/econPoliticalForum/users/:userId")
export class EconpoliticalforumUsersController {
  /**
   * Retrieve public summary of a registered user.
   *
   * Purpose and overview:
   *
   * Retrieve a sanitized public summary for a registered user using the
   * econ_political_forum_registereduser table. This endpoint returns
   * displayable profile information intended for public pages (for example: id,
   * username, display_name, bio, avatar_uri, email_verified, created_at,
   * updated_at). It MUST NOT expose sensitive fields such as password_hash,
   * failed_login_attempts, locked_until, deleted_at, or email in the public
   * view.
   *
   * Security and permissions:
   *
   * This operation is public-read for the public summary. If the caller is
   * authenticated and either the account owner or an administrator, the service
   * MAY return an expanded view containing private fields (for example:
   * verified_at). The service MUST NOT include password_hash,
   * failed_login_attempts, locked_until, or deleted_at in any response.
   * Exposure of email or other contact PII is disallowed in the public summary
   * and allowed only in owner/admin expanded views with explicit
   * authorization.
   *
   * Relationship to database entity:
   *
   * Operates on econ_political_forum_registereduser. The implementation should
   * read the registereduser row by id (UUID) and transform it into the public
   * summary DTO (IEconPoliticalForumRegisteredUser.ISummary). If deleted_at is
   * set, return 404 for public callers; administrators may access archived
   * records subject to audit policy.
   *
   * Validation and business rules:
   *
   * - Path parameter userId must be a UUID.
   * - If the target account has deleted_at set (soft-deleted), return 404 to
   *   public callers; administrators may be allowed to view archived records
   *   only if audit logs are created for the access.
   * - The public summary SHALL NOT include email, password_hash,
   *   failed_login_attempts, locked_until, or deleted_at.
   * - Last_login_at and verified_at are restricted and returned only to the owner
   *   or administrator (not in public summary).
   *
   * Related operations:
   *
   * - GET /econPoliticalForum/users/{userId}/notificationPreferences
   *   (owner/admin) to retrieve preferences
   * - GET /econPoliticalForum/threads and GET /econPoliticalForum/posts to list
   *   content authored by this user
   *
   * Error handling:
   *
   * - 400: invalid UUID format
   * - 401: authentication required for expanded/private views
   * - 403: caller not authorized to view private fields
   * - 404: user not found or soft-deleted (for public callers)
   * - 500: server error
   *
   * @param connection
   * @param userId Unique identifier (UUID) of the target registered user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumRegisteredUser.ISummary> {
    try {
      return await getEconPoliticalForumUsersUserId({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
