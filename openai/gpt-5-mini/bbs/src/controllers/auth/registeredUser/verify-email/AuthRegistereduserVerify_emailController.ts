import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthRegisteredUserVerifyEmail } from "../../../../providers/postAuthRegisteredUserVerifyEmail";

import { IEconPoliticalForumRegisteredUser } from "../../../../api/structures/IEconPoliticalForumRegisteredUser";

@Controller("/auth/registeredUser/verify-email")
export class AuthRegistereduserVerify_emailController {
  /**
   * Mark registered user's email as verified by updating email_verified and
   * verified_at fields.
   *
   * Purpose and functionality: Verifies the user's email address and updates
   * `econ_political_forum_registereduser.email_verified` to true and sets
   * `verified_at` to the verification timestamp.
   *
   * Implementation details using confirmed schema fields: Request contains a
   * verification token (one-time token). On verification, update
   * `econ_political_forum_registereduser.email_verified = true` and set
   * `verified_at` to current timestamp. Do not assume any special verification
   * storage table â€” applications may encode verification tokens that map to the
   * user identity.
   *
   * Role-specific integration and business context: Public endpoint used after
   * registration. Some categories flagged with
   * `econ_political_forum_categories.requires_verification` require
   * `email_verified == true` before content creation; this operation enables
   * those privileges.
   *
   * Security considerations within schema constraints: Tokens must be
   * single-use and short-lived. If token invalid or expired, return an
   * appropriate error and offer resend via `resendVerification`.
   *
   * Related operations and workflow integration: Used after `join`. The system
   * should reconcile `email_verified` state before permitting posts in
   * restricted categories.
   *
   * @param connection
   * @param body Email verification confirmation containing verification token.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: IEconPoliticalForumRegisteredUser.IVerifyEmail,
  ): Promise<IEconPoliticalForumRegisteredUser.IGenericSuccess> {
    try {
      return await postAuthRegisteredUserVerifyEmail({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
