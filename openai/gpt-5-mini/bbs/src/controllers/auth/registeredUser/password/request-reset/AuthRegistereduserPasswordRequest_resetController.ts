import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthRegisteredUserPasswordRequestReset } from "../../../../../providers/postAuthRegisteredUserPasswordRequestReset";

import { IEconPoliticalForumRegisteredUser } from "../../../../../api/structures/IEconPoliticalForumRegisteredUser";

@Controller("/auth/registeredUser/password/request-reset")
export class AuthRegistereduserPasswordRequest_resetController {
  /**
   * Request a password reset; create a password reset record in
   * econ_political_forum_password_resets.
   *
   * Purpose and functionality: Allows a user to request a password reset. The
   * operation creates a row in `econ_political_forum_password_resets` with a
   * `reset_token_hash`, `expires_at`, and `created_at` and sends a one-time
   * reset link to the registered `email` if the email exists.
   *
   * Implementation details using confirmed schema fields: Request takes an
   * `email`. If a matching `econ_political_forum_registereduser.email` exists,
   * create `econ_political_forum_password_resets` with `reset_token_hash`,
   * `expires_at` (short TTL), and `used` false. For security, always return a
   * generic response to avoid account enumeration.
   *
   * Role-specific integration and business context: Public endpoint. It uses
   * the `registereduser` table to find the account but must never reveal
   * whether the email exists in messaging. The association
   * `econ_political_forum_password_resets.registereduser_id` links the reset
   * request to the user.
   *
   * Security considerations within schema constraints: Store only hashed reset
   * tokens (`reset_token_hash`). Enforce expiry (`expires_at`) and single-use
   * (`used` flag). When consumed, set `used` true and record `used_at`.
   *
   * Related operations and workflow integration: Follow-up operation
   * `confirmPasswordReset` consumes the token and updates
   * `econ_political_forum_registereduser.password_hash` and invalidates
   * sessions in `econ_political_forum_sessions`.
   *
   * @param connection
   * @param body Password reset request containing the account email.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IEconPoliticalForumRegisteredUser.IRequestPasswordReset,
  ): Promise<IEconPoliticalForumRegisteredUser.IGenericSuccess> {
    try {
      return await postAuthRegisteredUserPasswordRequestReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
