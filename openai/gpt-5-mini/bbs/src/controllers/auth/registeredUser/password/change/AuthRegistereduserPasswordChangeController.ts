import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthRegisteredUserPasswordChange } from "../../../../../providers/putAuthRegisteredUserPasswordChange";
import { RegistereduserAuth } from "../../../../../decorators/RegistereduserAuth";
import { RegistereduserPayload } from "../../../../../decorators/payload/RegistereduserPayload";

import { IEconPoliticalForumRegisteredUser } from "../../../../../api/structures/IEconPoliticalForumRegisteredUser";

@Controller("/auth/registeredUser/password/change")
export class AuthRegistereduserPasswordChangeController {
  /**
   * Authenticated endpoint to change the user's password and optionally revoke
   * other sessions.
   *
   * Purpose and functionality: Allows an authenticated registeredUser to change
   * their password by providing the current password and a new password. The
   * system updates `econ_political_forum_registereduser.password_hash` and may
   * optionally invalidate other sessions by updating
   * `econ_political_forum_sessions.deleted_at` for active sessions.
   *
   * Implementation details using confirmed schema fields: This endpoint
   * requires authentication (registeredUser). It accepts `currentPassword` and
   * `newPassword`. The server validates the `currentPassword` against
   * `password_hash`, updates the stored `password_hash` on success, and may set
   * `deleted_at` on other `econ_political_forum_sessions` records to force
   * re-authentication. Record the event in `econ_political_forum_audit_logs`.
   *
   * Role-specific integration and business context: Requires the caller to be
   * authenticated (authorizationRole: registeredUser). Changing passwords
   * should reset or rotate refresh tokens when appropriate to prevent session
   * fixation.
   *
   * Security considerations within schema constraints: Enforce password
   * strength rules consistent with registration. On change, rotate or revoke
   * refresh tokens (update `refresh_token_hash` or `deleted_at` in
   * `econ_political_forum_sessions`). Log the change event for audit.
   *
   * Related operations and workflow integration: Use in combination with
   * `requestPasswordReset` for lost-password scenarios and with session
   * revocation endpoints for logout-all behavior.
   *
   * @param connection
   * @param body Change password request (requires current and new password).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedBody()
    body: IEconPoliticalForumRegisteredUser.IChangePassword,
  ): Promise<IEconPoliticalForumRegisteredUser.IGenericSuccess> {
    try {
      return await putAuthRegisteredUserPasswordChange({
        registeredUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
