import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthRegisteredUserPasswordConfirmReset } from "../../../../../providers/postAuthRegisteredUserPasswordConfirmReset";

import { IEconPoliticalForumRegisteredUser } from "../../../../../api/structures/IEconPoliticalForumRegisteredUser";

@Controller("/auth/registeredUser/password/confirm-reset")
export class AuthRegistereduserPasswordConfirm_resetController {
  /**
   * Consume reset token, set new password, mark password reset record used, and
   * optionally revoke sessions.
   *
   * Purpose and functionality: Consume a single-use reset token to set a new
   * `password_hash` on the `econ_political_forum_registereduser` record. This
   * operation marks the corresponding
   * `econ_political_forum_password_resets.used` true and sets `used_at`.
   *
   * Implementation details using confirmed schema fields: Request contains the
   * reset token and new password. The server finds the matching
   * `econ_political_forum_password_resets` by hash comparison, verifies
   * `expires_at` and `used == false`, updates
   * `econ_political_forum_registereduser.password_hash`, and sets `used=true`
   * and `used_at` on the reset record. Optionally invalidate
   * `econ_political_forum_sessions` entries by setting `deleted_at` to prevent
   * reuse of old sessions.
   *
   * Role-specific integration and business context: Public endpoint logically,
   * but it requires possession of the reset token. After reset, the account
   * should be able to login with the new password and old refresh tokens should
   * be rotated or invalidated.
   *
   * Security considerations within schema constraints: Ensure token expiry
   * enforcement using `expires_at`. Invalidate existing sessions (update
   * `econ_political_forum_sessions.deleted_at`) and record an audit entry in
   * `econ_political_forum_audit_logs` for the reset event.
   *
   * Related operations and workflow integration: Works together with
   * `requestPasswordReset` and session revocation endpoints.
   *
   * @param connection
   * @param body Confirm password reset: token and new password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: IEconPoliticalForumRegisteredUser.IConfirmPasswordReset,
  ): Promise<IEconPoliticalForumRegisteredUser.IGenericSuccess> {
    try {
      return await postAuthRegisteredUserPasswordConfirmReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
