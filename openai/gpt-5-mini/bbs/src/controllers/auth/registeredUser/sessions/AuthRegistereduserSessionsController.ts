import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getAuthRegisteredUserSessions } from "../../../../providers/getAuthRegisteredUserSessions";
import { RegistereduserAuth } from "../../../../decorators/RegistereduserAuth";
import { RegistereduserPayload } from "../../../../decorators/payload/RegistereduserPayload";
import { deleteAuthRegisteredUserSessionsSessionId } from "../../../../providers/deleteAuthRegisteredUserSessionsSessionId";

import { IEconPoliticalForumRegisteredUser } from "../../../../api/structures/IEconPoliticalForumRegisteredUser";

@Controller("/auth/registeredUser/sessions")
export class AuthRegistereduserSessionsController {
  /**
   * Return the authenticated user's active sessions from
   * econ_political_forum_sessions.
   *
   * Purpose and functionality: Return the list of active sessions for the
   * calling `registeredUser` by querying `econ_political_forum_sessions` rows
   * filtered by `registereduser_id` and `deleted_at` null. Provide
   * `created_at`, `last_active_at`, `ip_address` and `user_agent` per session
   * for the user to manage their sessions.
   *
   * Implementation details using confirmed schema fields: This is an
   * authenticated endpoint (authorizationRole: registeredUser). The server
   * queries `econ_political_forum_sessions` where `registereduser_id` matches
   * the caller and `deleted_at` is null. Include `expires_at`, `created_at`,
   * `last_active_at`, and session identifier (id or session_token id) in
   * response.
   *
   * Role-specific integration and business context: Used by users to review and
   * optionally revoke sessions (see revokeSession/revokeAllSessions). Only
   * sessions for the requesting user should be returned.
   *
   * Security considerations within schema constraints: Redact sensitive session
   * data if required. Provide session ids compatible with `revokeSession`
   * endpoint. Paginate results if there are many sessions.
   *
   * Related operations and workflow integration: Pairs with revokeSession and
   * revokeAllSessions endpoints to enable session management.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async listSessions(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
  ): Promise<IEconPoliticalForumRegisteredUser.ISessionList> {
    try {
      return await getAuthRegisteredUserSessions({
        registeredUser,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Revoke a specific session belonging to the authenticated user (update
   * econ_political_forum_sessions.deleted_at).
   *
   * Purpose and functionality: Allow a registeredUser to revoke (sign out) a
   * specific session by session id. The server marks the session row in
   * `econ_political_forum_sessions.deleted_at` (or deletes it) to prevent
   * further token usage.
   *
   * Implementation details using confirmed schema fields: Requires
   * authenticated caller (authorizationRole: registeredUser). Path parameter
   * `sessionId` references `econ_political_forum_sessions.id`. Validate
   * ownership by comparing `registereduser_id`. On success, set `deleted_at` to
   * current timestamp (or delete row) and record an audit entry in
   * `econ_political_forum_audit_logs`.
   *
   * Role-specific integration and business context: Users can remove stale or
   * compromised sessions individually. Administrators and moderators have other
   * workflows for account-wide revocation.
   *
   * Security considerations within schema constraints: Ensure only the owning
   * user can revoke sessions; validate that `sessionId` belongs to the caller.
   * Log revocation action for auditability.
   *
   * Related operations and workflow integration: Works with listSessions and
   * revokeAllSessions for full session management.
   *
   * @param connection
   * @param sessionId Target session's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sessionId")
  public async revokeSession(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<IEconPoliticalForumRegisteredUser.IGenericSuccess> {
    try {
      return await deleteAuthRegisteredUserSessionsSessionId({
        registeredUser,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
