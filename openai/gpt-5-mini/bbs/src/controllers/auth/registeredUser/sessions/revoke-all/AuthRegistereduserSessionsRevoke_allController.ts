import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postAuthRegisteredUserSessionsRevokeAll } from "../../../../../providers/postAuthRegisteredUserSessionsRevokeAll";
import { RegistereduserAuth } from "../../../../../decorators/RegistereduserAuth";
import { RegistereduserPayload } from "../../../../../decorators/payload/RegistereduserPayload";

import { IEconPoliticalForumRegisteredUser } from "../../../../../api/structures/IEconPoliticalForumRegisteredUser";

@Controller("/auth/registeredUser/sessions/revoke-all")
export class AuthRegistereduserSessionsRevoke_allController {
  /**
   * Invalidate all sessions for the authenticated user (update
   * econ_political_forum_sessions.deleted_at).
   *
   * Purpose and functionality: Invalidate all active sessions for the
   * authenticated `registeredUser` by marking all
   * `econ_political_forum_sessions` rows for that `registereduser_id` with
   * `deleted_at` timestamp or deleting them. Useful after password reset or
   * account compromise.
   *
   * Implementation details using confirmed schema fields: Requires
   * authentication (authorizationRole: registeredUser). The server updates
   * `econ_political_forum_sessions` where `registereduser_id` matches the
   * caller and `deleted_at` is null, setting `deleted_at` to current time.
   * Record an audit entry in `econ_political_forum_audit_logs`.
   *
   * Role-specific integration and business context: This operation is
   * recommended after `confirmPasswordReset` or `changePassword` to ensure
   * prior refresh tokens cannot be used.
   *
   * Security considerations within schema constraints: Ensure the operation
   * affects only the calling user's sessions. Consider rate-limiting to prevent
   * abuse and log the action for security auditing.
   *
   * Related operations and workflow integration: Pairs with listSessions and
   * revokeSession.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async revokeAllSessions(
    @RegistereduserAuth()
    registeredUser: RegistereduserPayload,
  ): Promise<IEconPoliticalForumRegisteredUser.IGenericSuccess> {
    try {
      return await postAuthRegisteredUserSessionsRevokeAll({
        registeredUser,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
