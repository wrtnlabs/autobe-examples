import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthModeratorPasswordReset } from "../../../../../providers/postAuthModeratorPasswordReset";

import { IEconPoliticalForumModerator } from "../../../../../api/structures/IEconPoliticalForumModerator";

@Controller("/auth/moderator/password/reset")
export class AuthModeratorPasswordResetController {
  /**
   * Request password reset (create econ_political_forum_password_resets entry).
   *
   * Purpose and functionality: This endpoint initiates a password recovery flow
   * for a moderator-capable registered user. It creates a new
   * econ_political_forum_password_resets record containing reset_token_hash and
   * expires_at and returns an acknowledgement to the requester. The record
   * references econ_political_forum_registereduser via registereduser_id.
   *
   * Implementation details and required fields: The request body requires the
   * account identifier (email). The implementation must not reveal whether the
   * email exists to callers in public responses; the operation should always
   * return a generic success acknowledgement while creating a password reset
   * record when the account exists. The password reset record fields referenced
   * include reset_token_hash, expires_at, used, used_at, and created_at.
   *
   * Role-specific integration and business context: Even though this endpoint
   * is public, it is used by moderator candidates and moderators alike and must
   * respect rate limits to prevent abuse. After a successful password reset,
   * active sessions in econ_political_forum_sessions should be invalidated to
   * force re-authentication.
   *
   * Security considerations within schema constraints: Reset tokens are stored
   * hashed (reset_token_hash) and expire (expires_at). The implementation must
   * enforce single-use semantics (used boolean and used_at timestamp). Email
   * templates must not leak sensitive information.
   *
   * Related operations and workflow integration: This operation pairs with a
   * confirm/reset-complete endpoint that consumes the token and updates
   * econ_political_forum_registereduser.password_hash and sets
   * econ_political_forum_password_resets.used and used_at.
   *
   * @param connection
   * @param body Password reset request containing account email for which to
   *   issue a reset token.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IEconPoliticalForumModerator.IPasswordResetRequest,
  ): Promise<IEconPoliticalForumModerator.IPasswordResetRequestAck> {
    try {
      return await postAuthModeratorPasswordReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
