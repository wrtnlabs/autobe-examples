import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdministratorPasswordResetConfirm } from "../../../../../../providers/postAuthAdministratorPasswordResetConfirm";

import { IEconPoliticalForumAdministrator } from "../../../../../../api/structures/IEconPoliticalForumAdministrator";

@Controller("/auth/administrator/password/reset/confirm")
export class AuthAdministratorPasswordResetConfirmController {
  /**
   * Confirm and apply a password reset using a one-time token (updates
   * password_hash).
   *
   * Purpose and overview: This endpoint consumes a single-use reset token and
   * sets a new password for the administrator account. It updates the
   * password_hash field on econ_political_forum_registereduser and marks the
   * corresponding econ_political_forum_password_resets record as used (used =
   * true, used_at timestamp). It should also invalidate active sessions in
   * econ_political_forum_sessions for the account.
   *
   * Implementation details and schema references: Match the provided token
   * against reset_token_hash (compare hashes). On success, set password_hash on
   * registered user, set used and used_at on the password_resets row, and
   * optionally create a new session or require login. Record an audit entry in
   * econ_political_forum_audit_logs.
   *
   * Role-specific integration and business context: This operation finalizes
   * account recovery flows for administrators and must be protected by strict
   * token expiry (password_resets.expires_at) and single-use semantics.
   *
   * Security considerations: Invalidate all existing refresh tokens/sessions
   * for the user after a successful reset. Notify the account email of the
   * reset event. Rate-limit token verification attempts to reduce brute-force
   * risk.
   *
   * Related operations and workflow integration: Invoked after POST
   * /auth/administrator/password/reset. May redirect to POST
   * /auth/administrator/login on success or return tokens depending on security
   * policy.
   *
   * @param connection
   * @param body Password reset confirmation payload including token and new
   *   password
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: IEconPoliticalForumAdministrator.IConfirmPasswordReset,
  ): Promise<IEconPoliticalForumAdministrator.IResetConfirmResponse> {
    try {
      return await postAuthAdministratorPasswordResetConfirm({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
