import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthAdministratorPasswordChange } from "../../../../../providers/putAuthAdministratorPasswordChange";
import { AdministratorAuth } from "../../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../../decorators/payload/AdministratorPayload";

import { IEconPoliticalForumAdministrator } from "../../../../../api/structures/IEconPoliticalForumAdministrator";

@Controller("/auth/administrator/password/change")
export class AuthAdministratorPasswordChangeController {
  /**
   * Change password for authenticated administrator (updates password_hash).
   *
   * Purpose and overview: Allow an authenticated administrator to change their
   * password. This operation updates the password_hash on the associated
   * econ_political_forum_registereduser row and records the change in
   * econ_political_forum_audit_logs. For safety, it also triggers session
   * invalidation according to policy.
   *
   * Implementation details and schema references: Validate the caller is an
   * authenticated administrator (session token mapping to
   * econ_political_forum_sessions and registered user linked to
   * econ_political_forum_administrator). Update registereduser.password_hash,
   * set updated_at, and optionally increment audit entries. Optionally set
   * locked_until to null and reset failed_login_attempts.
   *
   * Role-specific integration and business context: This endpoint is intended
   * for administrators (authorizationRole: "administrator"). It requires the
   * caller to present a valid access token. After password change,
   * implementation should revoke other sessions (update
   * econ_political_forum_sessions.deleted_at) and record revocation in audit
   * logs.
   *
   * Security considerations: Require current password or a valid fresh token.
   * Ensure the new password meets strength rules and do not return password
   * data. Record an audit entry and notify the account email of the change.
   *
   * Related operations and workflow integration: Related to session revocation
   * endpoints and password reset flows; may be used in conjunction with POST
   * /auth/administrator/sessions/revoke.
   *
   * @param connection
   * @param body Payload containing current password and new password
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IEconPoliticalForumAdministrator.IChangePassword,
  ): Promise<IEconPoliticalForumAdministrator.IChangePasswordResponse> {
    try {
      return await putAuthAdministratorPasswordChange({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
