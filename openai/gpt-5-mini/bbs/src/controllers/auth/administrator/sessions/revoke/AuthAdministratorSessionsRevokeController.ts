import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdministratorSessionsRevoke } from "../../../../../providers/postAuthAdministratorSessionsRevoke";
import { AdministratorAuth } from "../../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../../decorators/payload/AdministratorPayload";

import { IEconPoliticalForumAdministrator } from "../../../../../api/structures/IEconPoliticalForumAdministrator";

@Controller("/auth/administrator/sessions/revoke")
export class AuthAdministratorSessionsRevokeController {
  /**
   * List and revoke administrator sessions (manage
   * econ_political_forum_sessions).
   *
   * Purpose and overview: Provide administrators the ability to list their
   * active sessions and revoke sessions for security. The operation reads
   * econ_political_forum_sessions rows related to the requesting
   * administrator's registereduser_id and can soft-revoke sessions by setting
   * deleted_at or clearing refresh_token_hash.
   *
   * Implementation details and schema references: Listing reads fields: id,
   * created_at, last_active_at, ip_address, user_agent, expires_at, deleted_at.
   * Revocation updates econ_political_forum_sessions.deleted_at and updated_at.
   * All changes must be recorded in econ_political_forum_audit_logs for
   * traceability.
   *
   * Role-specific integration and business context: This endpoint requires
   * administrator authorization (authorizationRole: "administrator").
   * Administrators use it to secure their account or investigate suspicious
   * activity. Revoking sessions should cause immediate denial of subsequent
   * refresh attempts that reference rotated/inactivated refresh_token_hash.
   *
   * Security considerations: Ensure the caller can only list/revoke sessions
   * for the target administrator account (or globally if policy allows and
   * caller is a super administrator). Record all revocations in audit logs;
   * consider returning the count of affected sessions.
   *
   * Related operations and workflow integration: Related to POST
   * /auth/administrator/refresh (rotations), POST /auth/administrator/login
   * (issuance), and audit log retrieval endpoints.
   *
   * @param connection
   * @param body Optional revoke payload (list of session ids to revoke) or null
   *   to only list sessions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async revokeSessions(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IEconPoliticalForumAdministrator.ISessionsRevokeRequest,
  ): Promise<IEconPoliticalForumAdministrator.ISessionsListResponse> {
    try {
      return await postAuthAdministratorSessionsRevoke({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
