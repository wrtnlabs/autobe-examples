{"operations":[{"specification":"Generate JWT-based authorization endpoints for the 'guest' role, backed by the Prisma table econ_political_forum_guest. This operation set implements two core guest authentication endpoints: account creation (join) that creates a guest record in econ_political_forum_guest and issues a short-lived access token plus refresh token; and token refresh (refresh) which accepts a valid guest refresh token and returns a rotated refresh token and new access token. The operations reference the econ_political_forum_guest table (fields: id, nickname, user_agent, created_at, updated_at, deleted_at) for account creation and validation. Note: the Prisma schema does not persist guest tokens or sessions explicitly; token issuance is an application behavior described here and should be implemented by the authentication service. These endpoints follow the service prefix econPoliticalForum (Pascal: EconPoliticalForum) and response DTO for authentication operations is IEconPoliticalForumGuest.IAuthorized.","authorizationType":"join","description":"Purpose and overview:\nThis endpoint registers a temporary guest identity by creating a row in the econ_political_forum_guest table. The request may supply an optional nickname and the server captures the client user_agent. On success the API returns an authorization payload (IEconPoliticalForumGuest.IAuthorized) containing a short-lived access token and a guest refresh token. The created database fields that this operation uses are: econ_political_forum_guest.id (primary key), econ_political_forum_guest.nickname (optional display label), econ_political_forum_guest.user_agent (captured client UA), and econ_political_forum_guest.created_at / updated_at timestamps.\n\nImplementation details using confirmed schema fields:\nWhen the join request succeeds, the system inserts a new econ_political_forum_guest record and populates nickname and user_agent where provided. The created_at and updated_at columns are set by the database. The response contains authorization tokens but the Prisma schema does not include token columns for guests — token storage or rotation is an application responsibility outside the guest table and should follow secure JWT-refresh best practices.\n\nRole-specific integration and business context:\nThis endpoint is public (no prior authentication). It is intended to let unauthenticated visitors obtain a temporary guest identity and tokens to interact with guest-capable client features (for example, to preserve a short-lived draft or allow limited API access for ephemeral sessions). The returned guest identity includes the id that references econ_political_forum_guest.id for traceability in moderation and audit logs.\n\nSecurity considerations within schema constraints:\nBecause the econ_political_forum_guest table contains only non-sensitive fields (nickname, user_agent, timestamps), the system MUST avoid embedding PII in guest records. Tokens are ephemeral and must be implemented with short access token TTLs and rotating refresh tokens. When honoring refresh requests, the implementation MUST verify that the referenced guest id (if used) is not marked removed: the operation MAY check econ_political_forum_guest.deleted_at and reject refresh for entries where deleted_at is set.\n\nRelated operations and workflow integration:\nTypical workflow: client calls POST /auth/guest/join → server creates econ_political_forum_guest row and returns IEconPoliticalForumGuest.IAuthorized → client uses access token for authorized guest flows → when access token expires, client calls POST /auth/guest/refresh to rotate tokens. See the companion refresh operation for the refresh flow and validation rules.","summary":"Register a temporary guest identity and issue guest JWT tokens (uses econ_political_forum_guest table).","parameters":[],"requestBody":{"description":"Guest creation payload. Optional nickname and user agent context. Mapped to econ_political_forum_guest.nickname and econ_political_forum_guest.user_agent.","typeName":"IEconPoliticalForumGuest.ICreate"},"responseBody":{"description":"Authorization response containing short-lived access token and refresh token for a guest. Type follows IEconPoliticalForumGuest.IAuthorized pattern.","typeName":"IEconPoliticalForumGuest.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"Refresh operation for guest role that rotates refresh tokens and issues a new access token. Associated with the econ_political_forum_guest table for validation of guest existence and deletion status (fields used: id, deleted_at, updated_at). Because guest token storage is not modeled in Prisma, implementations should validate refresh tokens via the authentication token store and optionally confirm the guest record exists and is not removed.","authorizationType":"refresh","description":"Purpose and overview:\nThis endpoint accepts a guest refresh token and returns a new access token and a rotated refresh token (IEconPoliticalForumGuest.IAuthorized). It is part of the guest token lifecycle and should validate that the guest identity referenced by the token corresponds to an existing econ_political_forum_guest record. The operation references econ_political_forum_guest.id and may consult econ_political_forum_guest.deleted_at to ensure the guest record is active.\n\nImplementation details using confirmed schema fields:\nThe Prisma schema contains the econ_political_forum_guest table with id and timestamps but does not include persistent token fields for guests; therefore the refresh operation must validate the presented refresh token against the token store (or stateless JWT revocation plan) and then, if token is valid, optionally confirm the referenced guest id exists in econ_political_forum_guest and that deleted_at is null. The response returns the IEconPoliticalForumGuest.IAuthorized object with new tokens and minimal guest identity information (id and nickname) for client correlation.\n\nRole-specific integration and business context:\nThis operation is intended for guest clients that were previously issued a refresh token by the join endpoint. The endpoint enforces that the refresh token belongs to a guest identity and that the identity has not been removed. After successful rotation, updated_at of the guest row may be modified if the implementation records last-seen metadata; that is optional and must respect the econ_political_forum_guest.updated_at field semantics.\n\nSecurity considerations within schema constraints:\nBecause guest records are ephemeral and do not carry PII, refresh tokens should have conservative lifetimes and be rotated on each refresh. The API MUST reject refresh tokens if the linked guest record shows deleted_at set. Implementations SHOULD log refresh events for audit but avoid persisting tokens in the guest table (no token column exists in Prisma schema).\n\nRelated operations and workflow integration:\nTypical workflow: client calls POST /auth/guest/refresh with a refresh token → authentication service validates token and optionally checks econ_political_forum_guest.id exists and deleted_at is null → service returns rotated refresh token and new access token in IEconPoliticalForumGuest.IAuthorized format. This complements POST /auth/guest/join which creates the initial guest identity and tokens.","summary":"Rotate guest refresh token and issue new access token for a guest identity (validates econ_political_forum_guest record).","parameters":[],"requestBody":{"description":"Refresh request containing the guest refresh token. No persistent guest-token fields exist in the database; token validation is handled by the auth service.","typeName":"IEconPoliticalForumGuest.IRefresh"},"responseBody":{"description":"Rotated tokens and guest identity summary following IEconPoliticalForumGuest.IAuthorized.","typeName":"IEconPoliticalForumGuest.IAuthorized"},"authorizationRole":"guest","name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"Create new registered user account and issue initial JWT-like authorization tokens. Associated Prisma table: econ_political_forum_registereduser (creates a new registered user record) and econ_political_forum_sessions (creates initial session record).","authorizationType":"join","description":"Purpose and functionality:\nThis operation registers a new member (registeredUser) by creating a new record in the `econ_political_forum_registereduser` table and, on success, creates an initial session entry in `econ_political_forum_sessions` and returns an authorized response containing access and refresh tokens.\n\nImplementation details using confirmed schema fields:\nThe request captures `username`, `email`, optional `display_name`, and `password` (plaintext submitted to API). The backend must store a secure `password_hash` in `econ_political_forum_registereduser.password_hash` and create a session row in `econ_political_forum_sessions` (setting `session_token`, `refresh_token_hash`, `expires_at`, `created_at`). The operation will set `email_verified` to false and leave `verified_at` null until verification occurs.\n\nRole-specific integration and business context:\nPublic endpoint for new accounts. New accounts are created with `failed_login_attempts` defaulting to 0 and `locked_until` null. If the category rules require verification for posting, the `requires_verification` category flag will be respected at publish time (this operation only creates the account and session).\n\nSecurity considerations within schema constraints:\nDo not store plaintext passwords — compute and store `password_hash`. Issue short-lived access tokens and longer-lived refresh tokens; store only a hash of the refresh token in `econ_political_forum_sessions.refresh_token_hash`. Record `created_at` and `expires_at` for sessions. Validate email uniqueness against `econ_political_forum_registereduser.email` (unique constraint).\n\nRelated operations and workflow integration:\nAfter join, clients should call verifyEmail (if email verification is used) and may call login/refresh flows. Moderation and site settings (econ_political_forum_site_settings) may affect registration behavior (e.g., registration disabled).","summary":"Register a new registeredUser and issue initial authorization tokens (uses econ_political_forum_registereduser and econ_political_forum_sessions).","parameters":[],"requestBody":{"description":"Registration request for new registeredUser.","typeName":"IEconPoliticalForumRegisteredUser.IJoin"},"responseBody":{"description":"Authorized response containing access token and refresh token details.","typeName":"IEconPoliticalForumRegisteredUser.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/registeredUser/join","method":"post"},{"specification":"Authenticate a registered user and issue access and refresh tokens. Associated Prisma tables: econ_political_forum_registereduser (validate credentials) and econ_political_forum_sessions (create/rotate session records).","authorizationType":"login","description":"Purpose and functionality:\nAuthenticate a registeredUser by verifying submitted credentials against `econ_political_forum_registereduser.password_hash`. On successful authentication, create a session entry in `econ_political_forum_sessions` containing `session_token` (or session id), `refresh_token_hash`, `expires_at`, `created_at`, and `last_active_at` for tracking.\n\nImplementation details using confirmed schema fields:\nThe request accepts `usernameOrEmail` and `password`. On success, update `last_login_at` in `econ_political_forum_registereduser` and reset `failed_login_attempts` to 0. Create a new `econ_political_forum_sessions` row with `session_token` and a hashed `refresh_token_hash` and return an authorized response with access and refresh tokens.\n\nRole-specific integration and business context:\nThis endpoint is public and intended for registered users with local credentials. The system must enforce `failed_login_attempts` and `locked_until` semantics: if `failed_login_attempts` exceeds configured thresholds, set `locked_until` and refuse authentication until expiry.\n\nSecurity considerations within schema constraints:\nDo not expose whether the username or email exists in error messages; return a generic authentication failure. On successful authentication, record `last_login_at` and create `econ_political_forum_sessions` entry. Store only hashed refresh tokens in `refresh_token_hash`.\n\nRelated operations and workflow integration:\nAfter login, clients use returned tokens for protected endpoints and may call revokeAllSessions or listSessions to manage active sessions.","summary":"Authenticate a registeredUser and return authorization tokens (updates econ_political_forum_registereduser.last_login_at and creates econ_political_forum_sessions).","parameters":[],"requestBody":{"description":"Login payload containing username/email and password.","typeName":"IEconPoliticalForumRegisteredUser.ILogin"},"responseBody":{"description":"Authorized response with access and refresh tokens.","typeName":"IEconPoliticalForumRegisteredUser.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/registeredUser/login","method":"post"},{"specification":"Refresh access tokens using a valid refresh token. Associated Prisma table: econ_political_forum_sessions (validate refresh token hash and rotate).","authorizationType":"refresh","description":"Purpose and functionality:\nAccept a refresh token and issue a new short-lived access token and a rotated refresh token. The operation validates the presented refresh token against the stored `econ_political_forum_sessions.refresh_token_hash` and, on success, writes a rotation record (update `refresh_token_hash`, `updated_at`, and `expires_at`).\n\nImplementation details using confirmed schema fields:\nRequest contains the refresh token. The server must look up the session by `session_token` or validate by hashed `refresh_token_hash`. On rotation, update `econ_political_forum_sessions.refresh_token_hash`, set a new `expires_at`, and update `last_active_at`.\n\nRole-specific integration and business context:\nPublic endpoint in the sense it accepts refresh tokens — no bearer access token is required to call it. However, the refresh token must match a valid session in `econ_political_forum_sessions` and not be revoked (`deleted_at` null).\n\nSecurity considerations within schema constraints:\nReject reused or invalidated refresh tokens (if a rotated token is reused, treat as suspicious and revoke sessions). Record rotation events in `econ_political_forum_audit_logs` if required for security auditing.\n\nRelated operations and workflow integration:\nClients should call this endpoint before access token expiry. Use revokeSession or revokeAllSessions to invalidate sessions.","summary":"Rotate refresh token and return new access and refresh tokens (validates and updates econ_political_forum_sessions).","parameters":[],"requestBody":{"description":"Refresh request containing refresh token.","typeName":"IEconPoliticalForumRegisteredUser.IRefresh"},"responseBody":{"description":"Authorized response with new access and refresh tokens.","typeName":"IEconPoliticalForumRegisteredUser.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/registeredUser/refresh","method":"post"},{"specification":"Initiate password reset by creating a password reset request. Associated Prisma table: econ_political_forum_password_resets (creates reset token hash entry).","authorizationType":null,"description":"Purpose and functionality:\nAllows a user to request a password reset. The operation creates a row in `econ_political_forum_password_resets` with a `reset_token_hash`, `expires_at`, and `created_at` and sends a one-time reset link to the registered `email` if the email exists.\n\nImplementation details using confirmed schema fields:\nRequest takes an `email`. If a matching `econ_political_forum_registereduser.email` exists, create `econ_political_forum_password_resets` with `reset_token_hash`, `expires_at` (short TTL), and `used` false. For security, always return a generic response to avoid account enumeration.\n\nRole-specific integration and business context:\nPublic endpoint. It uses the `registereduser` table to find the account but must never reveal whether the email exists in messaging. The association `econ_political_forum_password_resets.registereduser_id` links the reset request to the user.\n\nSecurity considerations within schema constraints:\nStore only hashed reset tokens (`reset_token_hash`). Enforce expiry (`expires_at`) and single-use (`used` flag). When consumed, set `used` true and record `used_at`.\n\nRelated operations and workflow integration:\nFollow-up operation `confirmPasswordReset` consumes the token and updates `econ_political_forum_registereduser.password_hash` and invalidates sessions in `econ_political_forum_sessions`.","summary":"Request a password reset; create a password reset record in econ_political_forum_password_resets.","parameters":[],"requestBody":{"description":"Password reset request containing the account email.","typeName":"IEconPoliticalForumRegisteredUser.IRequestPasswordReset"},"responseBody":{"description":"Acknowledgement that reset email (if applicable) was sent.","typeName":"IEconPoliticalForumRegisteredUser.IGenericSuccess"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/registeredUser/password/request-reset","method":"post"},{"specification":"Confirm password reset using the one-time token and set a new password. Associated Prisma tables: econ_political_forum_password_resets (mark used) and econ_political_forum_registereduser (update password_hash).","authorizationType":null,"description":"Purpose and functionality:\nConsume a single-use reset token to set a new `password_hash` on the `econ_political_forum_registereduser` record. This operation marks the corresponding `econ_political_forum_password_resets.used` true and sets `used_at`.\n\nImplementation details using confirmed schema fields:\nRequest contains the reset token and new password. The server finds the matching `econ_political_forum_password_resets` by hash comparison, verifies `expires_at` and `used == false`, updates `econ_political_forum_registereduser.password_hash`, and sets `used=true` and `used_at` on the reset record. Optionally invalidate `econ_political_forum_sessions` entries by setting `deleted_at` to prevent reuse of old sessions.\n\nRole-specific integration and business context:\nPublic endpoint logically, but it requires possession of the reset token. After reset, the account should be able to login with the new password and old refresh tokens should be rotated or invalidated.\n\nSecurity considerations within schema constraints:\nEnsure token expiry enforcement using `expires_at`. Invalidate existing sessions (update `econ_political_forum_sessions.deleted_at`) and record an audit entry in `econ_political_forum_audit_logs` for the reset event.\n\nRelated operations and workflow integration:\nWorks together with `requestPasswordReset` and session revocation endpoints.","summary":"Consume reset token, set new password, mark password reset record used, and optionally revoke sessions.","parameters":[],"requestBody":{"description":"Confirm password reset: token and new password.","typeName":"IEconPoliticalForumRegisteredUser.IConfirmPasswordReset"},"responseBody":{"description":"Acknowledgement of password change (success/failure).","typeName":"IEconPoliticalForumRegisteredUser.IGenericSuccess"},"authorizationRole":null,"name":"confirmPasswordReset","prerequisites":[{"endpoint":{"path":"/auth/registeredUser/password/request-reset","method":"post"},"description":"A password reset record must exist before confirming a reset. POST /auth/registeredUser/password/request-reset creates the password reset entry (reset_token_hash, expires_at, used=false) that provides the one-time token required by the confirm endpoint; without this created reset record the confirm operation cannot validate or consume a token."}],"path":"/auth/registeredUser/password/confirm-reset","method":"post"},{"specification":"Verify a user's email using a verification token. Associated Prisma fields: econ_political_forum_registereduser.email_verified and econ_political_forum_registereduser.verified_at.","authorizationType":null,"description":"Purpose and functionality:\nVerifies the user's email address and updates `econ_political_forum_registereduser.email_verified` to true and sets `verified_at` to the verification timestamp.\n\nImplementation details using confirmed schema fields:\nRequest contains a verification token (one-time token). On verification, update `econ_political_forum_registereduser.email_verified = true` and set `verified_at` to current timestamp. Do not assume any special verification storage table — applications may encode verification tokens that map to the user identity.\n\nRole-specific integration and business context:\nPublic endpoint used after registration. Some categories flagged with `econ_political_forum_categories.requires_verification` require `email_verified == true` before content creation; this operation enables those privileges.\n\nSecurity considerations within schema constraints:\nTokens must be single-use and short-lived. If token invalid or expired, return an appropriate error and offer resend via `resendVerification`.\n\nRelated operations and workflow integration:\nUsed after `join`. The system should reconcile `email_verified` state before permitting posts in restricted categories.","summary":"Mark registered user's email as verified by updating email_verified and verified_at fields.","parameters":[],"requestBody":{"description":"Email verification confirmation containing verification token.","typeName":"IEconPoliticalForumRegisteredUser.IVerifyEmail"},"responseBody":{"description":"Acknowledgement of verification and any next steps.","typeName":"IEconPoliticalForumRegisteredUser.IGenericSuccess"},"authorizationRole":null,"name":"verifyEmail","prerequisites":[],"path":"/auth/registeredUser/verify-email","method":"post"},{"specification":"Resend a verification email for a registered user. Associated Prisma fields: econ_political_forum_registereduser.email and email_verified.","authorizationType":null,"description":"Purpose and functionality:\nAllow a user to request the verification email be resent. This only creates a new verification token and triggers the email send; it does not change `email_verified` until the token is consumed.\n\nImplementation details using confirmed schema fields:\nRequest includes `email`. If a matching `econ_political_forum_registereduser` exists and `email_verified` is false, the system generates a new verification token, stores or references it appropriately, and sends the verification email. Always return a generic success response to avoid account enumeration.\n\nRole-specific integration and business context:\nPublic endpoint. When categories require verification (`econ_political_forum_categories.requires_verification`), this endpoint supports users who need verification to post in those categories.\n\nSecurity considerations within schema constraints:\nRate-limit resend requests. Track resend attempts and optionally store resend events in `econ_political_forum_audit_logs`.\n\nRelated operations and workflow integration:\nComplements `join` and `verifyEmail` operations.","summary":"Resend email verification link to a registered user's email address.","parameters":[],"requestBody":{"description":"Resend verification request containing the account email.","typeName":"IEconPoliticalForumRegisteredUser.IResendVerification"},"responseBody":{"description":"Acknowledgement that a verification email has been (or will be) sent.","typeName":"IEconPoliticalForumRegisteredUser.IGenericSuccess"},"authorizationRole":null,"name":"resendVerification","prerequisites":[],"path":"/auth/registeredUser/verify-email/resend","method":"post"},{"specification":"Change password for an authenticated registered user. Associated Prisma field: econ_political_forum_registereduser.password_hash and optional session invalidation in econ_political_forum_sessions.","authorizationType":null,"description":"Purpose and functionality:\nAllows an authenticated registeredUser to change their password by providing the current password and a new password. The system updates `econ_political_forum_registereduser.password_hash` and may optionally invalidate other sessions by updating `econ_political_forum_sessions.deleted_at` for active sessions.\n\nImplementation details using confirmed schema fields:\nThis endpoint requires authentication (registeredUser). It accepts `currentPassword` and `newPassword`. The server validates the `currentPassword` against `password_hash`, updates the stored `password_hash` on success, and may set `deleted_at` on other `econ_political_forum_sessions` records to force re-authentication. Record the event in `econ_political_forum_audit_logs`.\n\nRole-specific integration and business context:\nRequires the caller to be authenticated (authorizationRole: registeredUser). Changing passwords should reset or rotate refresh tokens when appropriate to prevent session fixation.\n\nSecurity considerations within schema constraints:\nEnforce password strength rules consistent with registration. On change, rotate or revoke refresh tokens (update `refresh_token_hash` or `deleted_at` in `econ_political_forum_sessions`). Log the change event for audit.\n\nRelated operations and workflow integration:\nUse in combination with `requestPasswordReset` for lost-password scenarios and with session revocation endpoints for logout-all behavior.","summary":"Authenticated endpoint to change the user's password and optionally revoke other sessions.","parameters":[],"requestBody":{"description":"Change password request (requires current and new password).","typeName":"IEconPoliticalForumRegisteredUser.IChangePassword"},"responseBody":{"description":"Acknowledgement of password change.","typeName":"IEconPoliticalForumRegisteredUser.IGenericSuccess"},"authorizationRole":"registeredUser","name":"changePassword","prerequisites":[],"path":"/auth/registeredUser/password/change","method":"put"},{"specification":"List active sessions for the authenticated user. Associated Prisma table: econ_political_forum_sessions (query by registereduser_id).","authorizationType":null,"description":"Purpose and functionality:\nReturn the list of active sessions for the calling `registeredUser` by querying `econ_political_forum_sessions` rows filtered by `registereduser_id` and `deleted_at` null. Provide `created_at`, `last_active_at`, `ip_address` and `user_agent` per session for the user to manage their sessions.\n\nImplementation details using confirmed schema fields:\nThis is an authenticated endpoint (authorizationRole: registeredUser). The server queries `econ_political_forum_sessions` where `registereduser_id` matches the caller and `deleted_at` is null. Include `expires_at`, `created_at`, `last_active_at`, and session identifier (id or session_token id) in response.\n\nRole-specific integration and business context:\nUsed by users to review and optionally revoke sessions (see revokeSession/revokeAllSessions). Only sessions for the requesting user should be returned.\n\nSecurity considerations within schema constraints:\nRedact sensitive session data if required. Provide session ids compatible with `revokeSession` endpoint. Paginate results if there are many sessions.\n\nRelated operations and workflow integration:\nPairs with revokeSession and revokeAllSessions endpoints to enable session management.","summary":"Return the authenticated user's active sessions from econ_political_forum_sessions.","parameters":[],"requestBody":null,"responseBody":{"description":"List of sessions for the authenticated user.","typeName":"IEconPoliticalForumRegisteredUser.ISessionList"},"authorizationRole":"registeredUser","name":"listSessions","prerequisites":[],"path":"/auth/registeredUser/sessions","method":"get"},{"specification":"Revoke a specific session for the authenticated user. Associated Prisma table: econ_political_forum_sessions (set deleted_at or remove row).","authorizationType":null,"description":"Purpose and functionality:\nAllow a registeredUser to revoke (sign out) a specific session by session id. The server marks the session row in `econ_political_forum_sessions.deleted_at` (or deletes it) to prevent further token usage.\n\nImplementation details using confirmed schema fields:\nRequires authenticated caller (authorizationRole: registeredUser). Path parameter `sessionId` references `econ_political_forum_sessions.id`. Validate ownership by comparing `registereduser_id`. On success, set `deleted_at` to current timestamp (or delete row) and record an audit entry in `econ_political_forum_audit_logs`.\n\nRole-specific integration and business context:\nUsers can remove stale or compromised sessions individually. Administrators and moderators have other workflows for account-wide revocation.\n\nSecurity considerations within schema constraints:\nEnsure only the owning user can revoke sessions; validate that `sessionId` belongs to the caller. Log revocation action for auditability.\n\nRelated operations and workflow integration:\nWorks with listSessions and revokeAllSessions for full session management.","summary":"Revoke a specific session belonging to the authenticated user (update econ_political_forum_sessions.deleted_at).","parameters":[{"name":"sessionId","description":"Target session's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Acknowledgement that session was revoked.","typeName":"IEconPoliticalForumRegisteredUser.IGenericSuccess"},"authorizationRole":"registeredUser","name":"revokeSession","prerequisites":[],"path":"/auth/registeredUser/sessions/{sessionId}","method":"delete"},{"specification":"Revoke all sessions for the authenticated user (sign out everywhere). Associated Prisma table: econ_political_forum_sessions (set deleted_at for matching registereduser_id).","authorizationType":null,"description":"Purpose and functionality:\nInvalidate all active sessions for the authenticated `registeredUser` by marking all `econ_political_forum_sessions` rows for that `registereduser_id` with `deleted_at` timestamp or deleting them. Useful after password reset or account compromise.\n\nImplementation details using confirmed schema fields:\nRequires authentication (authorizationRole: registeredUser). The server updates `econ_political_forum_sessions` where `registereduser_id` matches the caller and `deleted_at` is null, setting `deleted_at` to current time. Record an audit entry in `econ_political_forum_audit_logs`.\n\nRole-specific integration and business context:\nThis operation is recommended after `confirmPasswordReset` or `changePassword` to ensure prior refresh tokens cannot be used.\n\nSecurity considerations within schema constraints:\nEnsure the operation affects only the calling user's sessions. Consider rate-limiting to prevent abuse and log the action for security auditing.\n\nRelated operations and workflow integration:\nPairs with listSessions and revokeSession.","summary":"Invalidate all sessions for the authenticated user (update econ_political_forum_sessions.deleted_at).","parameters":[],"requestBody":null,"responseBody":{"description":"Acknowledgement that all sessions were revoked.","typeName":"IEconPoliticalForumRegisteredUser.IGenericSuccess"},"authorizationRole":"registeredUser","name":"revokeAllSessions","prerequisites":[],"path":"/auth/registeredUser/sessions/revoke-all","method":"post"},{"specification":"Authorization operations for moderator role (member kind). This operation implements moderator registration (join) and is associated with the Prisma table econ_political_forum_registereduser (primary account data) and econ_political_forum_moderator (role linkage). The endpoint creates a registered user account and, depending on internal policy, may create an initial moderator record or await administrator assignment. The operation ensures the account fields required for moderator authentication are present and validated.","authorizationType":"join","description":"Purpose and functionality:\nThis endpoint allows a candidate moderator to register a new platform account. It operates against the registered account table econ_political_forum_registereduser and, where applicable, will enable subsequent linking to the moderator table econ_political_forum_moderator. The operation creates a new registered user record (fields referenced: username, email, password_hash, display_name, created_at) and returns initial authorization tokens.\n\nImplementation details and required fields:\nThe request body requires username and email and a password value that will be stored as password_hash by the service. The implementation must validate uniqueness against econ_political_forum_registereduser.username and econ_political_forum_registereduser.email and must set email_verified to false until verification completes. The response includes an authorization payload following the IEconPoliticalForumModerator.IAuthorized pattern.\n\nRole-specific integration and business context:\nAlthough this operation creates a registered user, moderator privileges are represented in econ_political_forum_moderator (registereduser_id, is_active). The system may either auto-create a moderator record (subject to business rules) or require administrator linking. The description here references econ_political_forum_moderator.registereduser_id and econ_political_forum_moderator.is_active to clarify post-registration flows.\n\nSecurity considerations within schema constraints:\nPasswords must never be returned; only password_hash is stored (in the database) and must be generated server-side. Email verification should be enforced (email_verified and verified_at fields on econ_political_forum_registereduser). The service must observe failed_login_attempts and locked_until business rules in later auth flows but those fields are not directly written by this endpoint except for initialization.\n\nRelated operations and workflow integration:\nThis operation is typically followed by email verification (which flips econ_political_forum_registereduser.email_verified and sets verified_at) and by administrator or moderator assignment workflows that create or activate an econ_political_forum_moderator record. See also login and refresh operations for session issuance and session management with econ_political_forum_sessions.","summary":"Register (join) a new moderator-account-capable registered user record in econ_political_forum_registereduser","parameters":[],"requestBody":{"description":"Registration request for a moderator-capable account. The request must include username and email; password is required and will be stored as a hashed value (password_hash) server-side.","typeName":"IEconPoliticalForumModerator.ICreate"},"responseBody":{"description":"Authorized response including access and refresh tokens and minimal account info. Response uses IEconPoliticalForumModerator.IAuthorized","typeName":"IEconPoliticalForumModerator.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/moderator/join","method":"post"},{"specification":"Moderator login operation tied to registered accounts and session records. This operation authenticates against econ_political_forum_registereduser and issues session artifacts stored in econ_political_forum_sessions (session_token, refresh_token_hash, expires_at).","authorizationType":"login","description":"Purpose and functionality:\nThis endpoint authenticates a moderator-capable registered user by validating credentials against econ_political_forum_registereduser (username or email, and password). On successful authentication the service issues an access token and a refresh token and records a new session in econ_political_forum_sessions (session_token, refresh_token_hash, created_at, expires_at).\n\nImplementation details and required fields:\nThe request body typically includes usernameOrEmail and password. The implementation must consult econ_political_forum_registereduser.password_hash for verification, update last_login_at on success, and reset failed_login_attempts. The session record fields referenced include session_token, refresh_token_hash, ip_address, user_agent, last_active_at, and expires_at.\n\nRole-specific integration and business context:\nLogin for a moderator must also check whether a moderator record exists and whether the moderator is active (econ_political_forum_moderator.is_active). The system should deny elevated moderation workflows if the linked econ_political_forum_moderator record is missing or marked inactive; however, login may still succeed for general registeredUser purposes.\n\nSecurity considerations within schema constraints:\nOn failed authentication the implementation must increment econ_political_forum_registereduser.failed_login_attempts and set locked_until if thresholds are reached. Refresh tokens must be stored hashed in econ_political_forum_sessions.refresh_token_hash and rotated on use. Tokens must not expose password_hash or other secrets.\n\nRelated operations and workflow integration:\nThis operation is commonly followed by refresh (to renew access tokens) and session revocation endpoints that update econ_political_forum_sessions.deleted_at for revoked sessions. See password reset operations if account recovery is needed.","summary":"Authenticate moderator (login) and create a session (econ_political_forum_sessions)","parameters":[],"requestBody":{"description":"Login credentials for a moderator-capable registered user (username/email + password).","typeName":"IEconPoliticalForumModerator.ILogin"},"responseBody":{"description":"Authorized response containing access and refresh tokens and brief account info.","typeName":"IEconPoliticalForumModerator.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/moderator/login","method":"post"},{"specification":"Token refresh operation for moderator sessions. Uses existing refresh token to issue a new short-lived access token and rotates refresh token. This operation updates econ_political_forum_sessions by creating a new session record or updating refresh_token_hash and expires_at for the existing session.","authorizationType":"refresh","description":"Purpose and functionality:\nThis endpoint renews authentication for an existing session by accepting a refresh token and returning a new access token and rotated refresh token. It is tied to econ_political_forum_sessions (refresh_token_hash, expires_at) and econ_political_forum_registereduser for audit linking.\n\nImplementation details and required fields:\nThe request must include the refresh token issued earlier. The service validates the refresh token against the stored refresh_token_hash in econ_political_forum_sessions and ensures the session has not expired or been revoked (deleted_at null). On success the service rotates the refresh token, updates refresh_token_hash and expires_at, and returns a new access token.\n\nRole-specific integration and business context:\nRefresh tokens renew access for moderator workflows; when used the operation should verify the underlying registered user account is not banned (econ_political_forum_registereduser.is_banned) and that any moderator linkage remains valid for elevated moderator actions.\n\nSecurity considerations within schema constraints:\nRefresh token reuse or use after revocation must be treated as suspicious: the implementation should record such anomalies in econ_political_forum_audit_logs and may revoke sessions (set deleted_at on econ_political_forum_sessions) after evidence of compromise. Token rotation events should be auditable and recorded.\n\nRelated operations and workflow integration:\nThis operation integrates with logout/session-revoke endpoints that mark session records deleted_at and with password reset flows that should invalidate active refresh tokens upon successful password change.","summary":"Refresh access token using refresh token and rotate session (econ_political_forum_sessions)","parameters":[],"requestBody":{"description":"Refresh request containing the refresh token previously issued.","typeName":"IEconPoliticalForumModerator.IRefresh"},"responseBody":{"description":"Authorized response with new access token and rotated refresh token.","typeName":"IEconPoliticalForumModerator.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/moderator/refresh","method":"post"},{"specification":"Password reset request operation for moderator-capable accounts. This operation creates a password reset record in econ_political_forum_password_resets (reset_token_hash, expires_at, used) and initiates email delivery of a single-use reset link.","authorizationType":null,"description":"Purpose and functionality:\nThis endpoint initiates a password recovery flow for a moderator-capable registered user. It creates a new econ_political_forum_password_resets record containing reset_token_hash and expires_at and returns an acknowledgement to the requester. The record references econ_political_forum_registereduser via registereduser_id.\n\nImplementation details and required fields:\nThe request body requires the account identifier (email). The implementation must not reveal whether the email exists to callers in public responses; the operation should always return a generic success acknowledgement while creating a password reset record when the account exists. The password reset record fields referenced include reset_token_hash, expires_at, used, used_at, and created_at.\n\nRole-specific integration and business context:\nEven though this endpoint is public, it is used by moderator candidates and moderators alike and must respect rate limits to prevent abuse. After a successful password reset, active sessions in econ_political_forum_sessions should be invalidated to force re-authentication.\n\nSecurity considerations within schema constraints:\nReset tokens are stored hashed (reset_token_hash) and expire (expires_at). The implementation must enforce single-use semantics (used boolean and used_at timestamp). Email templates must not leak sensitive information.\n\nRelated operations and workflow integration:\nThis operation pairs with a confirm/reset-complete endpoint that consumes the token and updates econ_political_forum_registereduser.password_hash and sets econ_political_forum_password_resets.used and used_at.","summary":"Request password reset (create econ_political_forum_password_resets entry)","parameters":[],"requestBody":{"description":"Password reset request containing account email for which to issue a reset token.","typeName":"IEconPoliticalForumModerator.IPasswordResetRequest"},"responseBody":{"description":"Acknowledgement that a password reset email (if account exists) will be sent; does not disclose account existence.","typeName":"IEconPoliticalForumModerator.IPasswordResetRequestAck"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/moderator/password/reset","method":"post"},{"specification":"Password reset confirmation for moderator-capable accounts. Consumes a single-use reset token (validated against econ_political_forum_password_resets.reset_token_hash and expires_at) and updates econ_political_forum_registereduser.password_hash on success.","authorizationType":null,"description":"Purpose and functionality:\nThis endpoint consumes a previously issued password reset token and sets a new password for the account by updating econ_political_forum_registereduser.password_hash. It marks the corresponding econ_political_forum_password_resets record used=true and sets used_at for audit.\n\nImplementation details and required fields:\nThe request body must include the reset token and the new password. The implementation must validate the reset_token against reset_token_hash and ensure expires_at has not passed and used is false. On success it must update password_hash on econ_political_forum_registereduser, set econ_political_forum_password_resets.used and used_at, and invalidate active sessions (set deleted_at on relevant econ_political_forum_sessions) to force re-authentication.\n\nRole-specific integration and business context:\nThis flow supports both moderators and general registered users; when applied to a moderator account it has immediate effect on their ability to authenticate for moderation actions. The operation should record an audit entry in econ_political_forum_audit_logs indicating the password change event for the account.\n\nSecurity considerations within schema constraints:\nReset tokens must be single-use and are stored hashed (reset_token_hash). After a successful reset, refresh tokens and sessions must be invalidated for safety (econ_political_forum_sessions.deleted_at). The password must meet platform password policy before updating password_hash.\n\nRelated operations and workflow integration:\nThis operation ties back to the requestPasswordReset endpoint and is part of the account recovery workflow; administrators may also perform password resets in exceptional circumstances using admin tools that must record appropriate audit logs.","summary":"Confirm password reset and update password (consume econ_political_forum_password_resets token)","parameters":[],"requestBody":{"description":"Password reset confirmation containing reset token and new password.","typeName":"IEconPoliticalForumModerator.IPasswordResetConfirm"},"responseBody":{"description":"Acknowledgement of successful password update; may include a prompt to login.","typeName":"IEconPoliticalForumModerator.IPasswordResetConfirmAck"},"authorizationRole":null,"name":"confirmPasswordReset","prerequisites":[],"path":"/auth/moderator/password/confirm","method":"post"},{"specification":"Create administrator registration (join) operation. This endpoint registers a new administrator account in the system by creating a record in the econ_political_forum_registereduser table. It will validate required fields, create a Pending/Verified state per email verification rules, and issue initial JWT authorization tokens. The operation maps to the Prisma table econ_political_forum_registereduser and its subsidiary session and password reset tables for token issuance and lifecycle handling.","authorizationType":"join","description":"Purpose and overview:\nThis endpoint allows a new administrator to register an account. It creates a new row in the econ_political_forum_registereduser table and, on success, issues initial authorization tokens. The operation leverages fields such as password_hash (to store the hashed password when provided), email (for identity and notifications), email_verified and verified_at (for verification state), and created_at/updated_at timestamps for audit.\n\nImplementation details and schema references:\nThe request body should include email and password (the server stores a password_hash in econ_political_forum_registereduser). The implementation will persist username/display_name and set created_at and updated_at. If email verification is required by policy, the system will create a password reset / verification flow using econ_political_forum_password_resets (reset_token_hash and expires_at) to deliver a verification token.\n\nRole-specific integration and business context:\nAs this operation creates administrator accounts, the join flow MUST include administrative approval or an elevated verification step depending on business policy. The created registered user row may later be linked to econ_political_forum_administrator and econ_political_forum_sessions for session management (session_token, refresh_token_hash, expires_at).\n\nSecurity considerations:\nDo not store plaintext passwords; persist only password_hash. Protect email and verification tokens (password_resets.reset_token_hash and expires_at). Ensure rate-limiting and anti-abuse controls are applied to prevent automated admin account creation. Record audit entries in econ_political_forum_audit_logs for account creation events.\n\nRelated operations and workflow integration:\nRelated flows: POST /auth/administrator/login (login), POST /auth/administrator/refresh (refresh), POST /auth/administrator/password/reset (request reset using econ_political_forum_password_resets), and session lifecycle endpoints that create entries in econ_political_forum_sessions. Verification may reuse the password_resets table for single-use tokens.","summary":"Register a new administrator account (creates a row in econ_political_forum_registereduser).","parameters":[],"requestBody":{"description":"Administrator registration payload","typeName":"IEconPoliticalForumAdministrator.IJoin"},"responseBody":{"description":"Authorized response with initial access and refresh tokens","typeName":"IEconPoliticalForumAdministrator.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/administrator/join","method":"post"},{"specification":"Administrator login operation. Authenticates an administrator using credentials stored in econ_political_forum_registereduser (password_hash) and issues short-lived access and rotated refresh tokens recorded via econ_political_forum_sessions.","authorizationType":"login","description":"Purpose and overview:\nAuthenticate an administrator and create a session record. This operation validates credentials against the econ_political_forum_registereduser.password_hash, updates last_login_at on success, and creates a new econ_political_forum_sessions entry with session_token, refresh_token_hash, expires_at and created_at for session lifecycle tracking.\n\nImplementation details and schema references:\nOn successful authentication, record last_login_at and reset failed_login_attempts. If failed, increment failed_login_attempts and set locked_until per lockout policy. Create a session row in econ_political_forum_sessions with session_token (unique) and refresh_token_hash, and set expires_at to the configured access lifetime for refresh semantics.\n\nRole-specific integration and business context:\nThis endpoint is public (no prior bearer required) but specifically used to obtain administrator authorization. The system must ensure that if the registered user already has an associated econ_political_forum_administrator row (link via registereduser -> administrator), the returned authorization grants administrator privileges.\n\nSecurity considerations:\nRecord authentication audit events in econ_political_forum_audit_logs. Prevent disclosure of whether email or password was incorrect. Enforce rate limits and account lockout (failed_login_attempts, locked_until). Use secure refresh token rotation: store only refresh_token_hash in sessions and rotate on use.\n\nRelated operations and workflow integration:\nRelated to POST /auth/administrator/refresh (to rotate tokens) and session management endpoints to revoke sessions. Uses econ_political_forum_password_resets for recovery flows if account lockout occurs.","summary":"Authenticate administrator and issue tokens (updates econ_political_forum_sessions).","parameters":[],"requestBody":{"description":"Administrator login credentials","typeName":"IEconPoliticalForumAdministrator.ILogin"},"responseBody":{"description":"Authorized response with access and refresh tokens","typeName":"IEconPoliticalForumAdministrator.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/administrator/login","method":"post"},{"specification":"Token refresh operation for administrators. Uses a refresh token to issue a new access token and rotate the refresh token. Session rotation is persisted in econ_political_forum_sessions by updating refresh_token_hash and expires_at.","authorizationType":"refresh","description":"Purpose and overview:\nRefresh an administrator's access token using a valid refresh token. This operation validates the presented refresh token against stored refresh_token_hash in econ_political_forum_sessions, issues a new access token, rotates the refresh token (update refresh_token_hash and expires_at), and records the rotation in audit logs (econ_political_forum_audit_logs).\n\nImplementation details and schema references:\nThe refresh request refers to an existing session row in econ_political_forum_sessions. On success, update that row's refresh_token_hash and expires_at and set last_active_at. If the presented token is invalid or previously revoked (deleted_at set), refuse the refresh and require full re-authentication.\n\nRole-specific integration and business context:\nThis endpoint supports long-lived administrator sessions while enforcing rotation and revocation. It ties into session revocation endpoints that may set econ_political_forum_sessions.deleted_at to soft-revoke a session.\n\nSecurity considerations:\nRecord rotation events in econ_political_forum_audit_logs. Detect refresh token reuse or anomalies and escalate accounts for review (increment failed counters or create moderation/audit artifacts as needed). Ensure rotated refresh tokens are unique and previous ones are invalidated.\n\nRelated operations and workflow integration:\nRelated to POST /auth/administrator/login (initial issuance), POST /auth/administrator/sessions/revoke (revocation), and GET /admin/sessions (listing active sessions).","summary":"Refresh administrator access token and rotate refresh token (operates on econ_political_forum_sessions).","parameters":[],"requestBody":{"description":"Refresh token payload","typeName":"IEconPoliticalForumAdministrator.IRefresh"},"responseBody":{"description":"New authorized tokens after refresh","typeName":"IEconPoliticalForumAdministrator.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/administrator/refresh","method":"post"},{"specification":"Request password reset for an administrator. Creates a password reset record in econ_political_forum_password_resets (reset_token_hash, expires_at) and triggers an email with a one-time reset link.","authorizationType":null,"description":"Purpose and overview:\nAllows an administrator to request a password reset for their account. This operation creates a new row in econ_political_forum_password_resets with reset_token_hash and expires_at, and sends a single-use reset link to the registered email address associated with the econ_political_forum_registereduser record.\n\nImplementation details and schema references:\nPersist only a hash of the issued token (reset_token_hash) and set an expiry in the expires_at field. The password_resets.used and used_at fields will be updated upon successful reset. The action should create an audit entry in econ_political_forum_audit_logs describing the reset request.\n\nRole-specific integration and business context:\nThis endpoint is public (for account recovery) but should be rate-limited and protected by anti-abuse checks. The operation references econ_political_forum_registereduser.email to deliver the reset message.\n\nSecurity considerations:\nLimit resend attempts (e.g., 5 per 24h). Ensure reset_token_hash is unpredictable and single-use. Upon successful password reset, invalidate existing sessions (econ_political_forum_sessions) and record session revocation events.\n\nRelated operations and workflow integration:\nFollowed by POST /auth/administrator/password/reset/confirm which consumes the reset token and updates econ_political_forum_registereduser.password_hash.","summary":"Request a password reset (creates econ_political_forum_password_resets entry).","parameters":[],"requestBody":{"description":"Password reset request containing the administrator's email","typeName":"IEconPoliticalForumAdministrator.IRequestPasswordReset"},"responseBody":{"description":"Acknowledgement that reset email was queued","typeName":"IEconPoliticalForumAdministrator.IResetRequestResponse"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/administrator/password/reset","method":"post"},{"specification":"Confirm password reset using a single-use token. Consumes the matching econ_political_forum_password_resets.reset_token_hash (marks used and sets used_at) and updates econ_political_forum_registereduser.password_hash.","authorizationType":null,"description":"Purpose and overview:\nThis endpoint consumes a single-use reset token and sets a new password for the administrator account. It updates the password_hash field on econ_political_forum_registereduser and marks the corresponding econ_political_forum_password_resets record as used (used = true, used_at timestamp). It should also invalidate active sessions in econ_political_forum_sessions for the account.\n\nImplementation details and schema references:\nMatch the provided token against reset_token_hash (compare hashes). On success, set password_hash on registered user, set used and used_at on the password_resets row, and optionally create a new session or require login. Record an audit entry in econ_political_forum_audit_logs.\n\nRole-specific integration and business context:\nThis operation finalizes account recovery flows for administrators and must be protected by strict token expiry (password_resets.expires_at) and single-use semantics.\n\nSecurity considerations:\nInvalidate all existing refresh tokens/sessions for the user after a successful reset. Notify the account email of the reset event. Rate-limit token verification attempts to reduce brute-force risk.\n\nRelated operations and workflow integration:\nInvoked after POST /auth/administrator/password/reset. May redirect to POST /auth/administrator/login on success or return tokens depending on security policy.","summary":"Confirm and apply a password reset using a one-time token (updates password_hash).","parameters":[],"requestBody":{"description":"Password reset confirmation payload including token and new password","typeName":"IEconPoliticalForumAdministrator.IConfirmPasswordReset"},"responseBody":{"description":"Result of password reset and next steps (login or new tokens)","typeName":"IEconPoliticalForumAdministrator.IResetConfirmResponse"},"authorizationRole":null,"name":"confirmPasswordReset","prerequisites":[{"endpoint":{"path":"/auth/administrator/password/reset","method":"post"},"description":"A password reset confirmation requires an existing password reset record created by POST /auth/administrator/password/reset. The reset record provides the hashed token (reset_token_hash), expires_at, and used flag needed to validate the provided token. Without a prior reset request (or if the reset record is expired or already used), the confirm operation will fail with an invalid/expired token error."}],"path":"/auth/administrator/password/reset/confirm","method":"post"},{"specification":"Verify administrator email using a single-use verification token. Updates econ_political_forum_registereduser.email_verified and verified_at on success.","authorizationType":null,"description":"Purpose and overview:\nConfirm an administrator's email address using a single-use verification token. On success, set registered user fields email_verified = true and verified_at to the timestamp, stored on econ_political_forum_registereduser.\n\nImplementation details and schema references:\nThe operation will validate the provided token (implementation may use econ_political_forum_password_resets or a dedicated verification token table). Upon validation, set email_verified = true and verified_at on the registered user row, update updated_at, and record an audit entry in econ_political_forum_audit_logs.\n\nRole-specific integration and business context:\nEmail verification affects posting privileges in categories that require verification (econ_political_forum_categories.requires_verification). Administrators must verify email prior to performing certain high-risk actions depending on policy.\n\nSecurity considerations:\nVerification tokens must be single-use and time-limited. Limit resends and record verification attempts in audit logs. Do not reveal whether the token maps to a specific user in public error messages.\n\nRelated operations and workflow integration:\nConnects to POST /auth/administrator/join (initial issuance) and to category posting rules that require email_verified.","summary":"Verify administrator email (sets email_verified and verified_at on econ_political_forum_registereduser).","parameters":[{"name":"token","in":"path","schema":{"type":"string","format":"uuid"},"description":"Verification token"}],"requestBody":null,"responseBody":{"description":"Confirmation that email is verified","typeName":"IEconPoliticalForumAdministrator.IVerifyEmailResponse"},"authorizationRole":null,"name":"verifyEmail","prerequisites":[{"endpoint":{"path":"/auth/registeredUser/verify-email/resend","method":"post"},"description":"A verification token must exist before the verification endpoint can consume it. POST /auth/registeredUser/verify-email/resend generates and sends a new verification token to the user's email (creating the token record or triggering token issuance). If the token is not created/sent, the GET /auth/administrator/email/verify/{token} operation cannot succeed."}],"path":"/auth/administrator/email/verify/{token}","method":"get"},{"specification":"Change password for an authenticated administrator. Updates econ_political_forum_registereduser.password_hash and records an audit entry. Requires administrator authorization.","authorizationType":null,"description":"Purpose and overview:\nAllow an authenticated administrator to change their password. This operation updates the password_hash on the associated econ_political_forum_registereduser row and records the change in econ_political_forum_audit_logs. For safety, it also triggers session invalidation according to policy.\n\nImplementation details and schema references:\nValidate the caller is an authenticated administrator (session token mapping to econ_political_forum_sessions and registered user linked to econ_political_forum_administrator). Update registereduser.password_hash, set updated_at, and optionally increment audit entries. Optionally set locked_until to null and reset failed_login_attempts.\n\nRole-specific integration and business context:\nThis endpoint is intended for administrators (authorizationRole: \"administrator\"). It requires the caller to present a valid access token. After password change, implementation should revoke other sessions (update econ_political_forum_sessions.deleted_at) and record revocation in audit logs.\n\nSecurity considerations:\nRequire current password or a valid fresh token. Ensure the new password meets strength rules and do not return password data. Record an audit entry and notify the account email of the change.\n\nRelated operations and workflow integration:\nRelated to session revocation endpoints and password reset flows; may be used in conjunction with POST /auth/administrator/sessions/revoke.","summary":"Change password for authenticated administrator (updates password_hash).","parameters":[],"requestBody":{"description":"Payload containing current password and new password","typeName":"IEconPoliticalForumAdministrator.IChangePassword"},"responseBody":{"description":"Confirmation that password was changed","typeName":"IEconPoliticalForumAdministrator.IChangePasswordResponse"},"authorizationRole":"administrator","name":"changePassword","prerequisites":[],"path":"/auth/administrator/password/change","method":"put"},{"specification":"List and revoke administrator sessions. Allows administrators to list active sessions (econ_political_forum_sessions) and revoke specific sessions by setting deleted_at or removing refresh_token_hash. Requires administrator authorization.","authorizationType":null,"description":"Purpose and overview:\nProvide administrators the ability to list their active sessions and revoke sessions for security. The operation reads econ_political_forum_sessions rows related to the requesting administrator's registereduser_id and can soft-revoke sessions by setting deleted_at or clearing refresh_token_hash.\n\nImplementation details and schema references:\nListing reads fields: id, created_at, last_active_at, ip_address, user_agent, expires_at, deleted_at. Revocation updates econ_political_forum_sessions.deleted_at and updated_at. All changes must be recorded in econ_political_forum_audit_logs for traceability.\n\nRole-specific integration and business context:\nThis endpoint requires administrator authorization (authorizationRole: \"administrator\"). Administrators use it to secure their account or investigate suspicious activity. Revoking sessions should cause immediate denial of subsequent refresh attempts that reference rotated/inactivated refresh_token_hash.\n\nSecurity considerations:\nEnsure the caller can only list/revoke sessions for the target administrator account (or globally if policy allows and caller is a super administrator). Record all revocations in audit logs; consider returning the count of affected sessions.\n\nRelated operations and workflow integration:\nRelated to POST /auth/administrator/refresh (rotations), POST /auth/administrator/login (issuance), and audit log retrieval endpoints.","summary":"List and revoke administrator sessions (manage econ_political_forum_sessions).","parameters":[],"requestBody":{"description":"Optional revoke payload (list of session ids to revoke) or null to only list sessions","typeName":"IEconPoliticalForumAdministrator.ISessionsRevokeRequest"},"responseBody":{"description":"List of sessions and revocation result summary","typeName":"IEconPoliticalForumAdministrator.ISessionsListResponse"},"authorizationRole":"administrator","name":"revokeSessions","prerequisites":[],"path":"/auth/administrator/sessions/revoke","method":"post"},{"specification":"Operation to search, filter, sort and retrieve a paginated list of forum categories. This operation is implemented against the Prisma model 'econ_political_forum_categories'. It exposes advanced list retrieval capabilities for UI category lists, admin views (with additional flags), and machine clients that need category metadata for navigation, routing, and moderation routing. The operation supports searching by name, slug, and description, filtering by is_moderated and requires_verification flags, ordering by the 'order' hint or timestamps, and pagination (cursor or page/limit). It reads the following database fields from econ_political_forum_categories: id, code, name, slug, description, is_moderated, requires_verification, order, created_at, updated_at, deleted_at. By default public clients receive only active records (deleted_at is null). Admin clients may request inclusion of archived/removed records via an explicit request parameter (handled through request DTO).","path":"/econPoliticalForum/categories","method":"patch","summary":"Retrieve filtered, paginated list of econ_political_forum_categories","description":"Retrieve a filtered and paginated list of categories used by econPoliticalForum.\n\nThis operation returns category summaries suitable for building category navigation, moderation routing, or admin overviews. It is backed by the Prisma table econ_political_forum_categories and surfaces the key fields (id, code, name, slug, description, is_moderated, requires_verification, order, created_at, updated_at). Clients can search by free-text (name, slug, description), filter on booleans (is_moderated, requires_verification), and sort by the UI order hint, creation date, or name.\n\nSecurity and permissions: this endpoint is public-read by default and does not require authentication for general listing. However, when the request explicitly asks to include records with a non-null deleted_at (archived/removed categories), that behavior is restricted to administrative roles and must be requested from an authenticated admin client. Implementations MUST exclude non-active records (deleted_at != null) for unauthenticated or non-admin requests.\n\nRelationship to database entities: This operation maps directly to the econ_political_forum_categories model in the Prisma schema. It reads canonical category metadata and does not modify state. The response is intentionally a summary view optimized for lists; full details can be retrieved with the GET /categories/{categoryId} endpoint.\n\nValidation and business rules: The request payload supports pagination (cursor or page/limit), a free-text query for name/slug/description, boolean filters for is_moderated and requires_verification, and sort options (order, created_at, name). Default page size is 20 and maximum allowable page size is 100. If an unauthenticated request attempts to set includeDeleted=true, the server MUST return 403 Forbidden. Malformed pagination parameters result in 400 Bad Request with details.\n\nRelated operations: Use GET /categories/{categoryId} to fetch a single category's full details. Use admin-only configuration endpoints to update site settings that affect category behavior such as moderation thresholds.\n\nExpected behavior and error handling: On success the operation returns a paginated container of category summary DTOs. Common errors include 400 (validation), 401 (when admin-only flags are requested without authentication), 403 (forbidden admin flag usage), 429 (rate limit), and 500 (internal error).","parameters":[],"requestBody":{"description":"Search, filter, sort and pagination parameters for listing categories","typeName":"IEconPoliticalForumCategory.IRequest"},"responseBody":{"description":"Paginated list of category summary objects matching the search and filter criteria","typeName":"IPageIEconPoliticalForumCategory.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/categories","method":"post"},"description":"At least one forum category must exist before listing, filtering, or using category metadata. POST /econPoliticalForum/administrator/categories creates a new econ_political_forum_categories record (id, name, slug, is_moderated, requires_verification, order, created_at, updated_at). This prerequisite ensures there are category resources for the index operation to return or filter against; if it fails, the listing may be empty or filters referencing categories will not resolve."}]},{"specification":"Operation to retrieve detailed information for a single category by its primary key. This operation maps to the Prisma model 'econ_political_forum_categories' and returns the canonical category record for UI detail pages, routing resolution, and moderation configuration review. It reads id, code, name, slug, description, is_moderated, requires_verification, order, created_at, updated_at and deleted_at fields and exposes them in a detailed DTO.","path":"/econPoliticalForum/categories/{categoryId}","method":"get","summary":"Retrieve a single econ_political_forum_categories record by ID","description":"Get detailed category information by categoryId.\n\nPurpose and overview: Return a single category record used for rendering category pages, editing forms, or moderation configuration inspection. The record includes canonical metadata from the econ_political_forum_categories table (id, code, name, slug, description, is_moderated, requires_verification, order, created_at, updated_at). Public clients receive active categories only; if a category has a non-null deleted_at it is treated as not found for public requests.\n\nSecurity considerations and user permissions: This endpoint is generally publicly readable for active categories. If an authenticated administrator requests inclusion of archived/removed categories, the API may return the record along with deleted_at and administrative metadata. Requests attempting to view deleted records without administrative privileges should receive a 404 Not Found to avoid exposing deleted items.\n\nRelationship to underlying database entities: The operation directly exposes the econ_political_forum_categories Prisma model. Implementers should be careful to honor field constraints (slug uniqueness) and to verify that the category exists and is active for the requesting role.\n\nValidation rules and business logic: The path parameter categoryId must be a UUID formatted string. If the categoryId does not exist or the category is excluded by visibility rules, return 404. If the categoryId format is invalid, return 400 with a validation error. If the requesting client is an admin and requests additional administrative fields, those can be included in the returned DTO per ACL rules.\n\nRelated operations: Use PATCH /categories to search and paginate categories. Use admin update endpoints (not part of this operation set) to modify category metadata.\n\nExpected behavior and error handling: On success return the full category DTO. Typical errors: 400 Bad Request (invalid UUID), 401 Unauthorized (if admin-only data requested without auth), 403 Forbidden (if trying to access admin-only fields), 404 Not Found (no matching active category), 500 Internal Server Error.","parameters":[{"name":"categoryId","description":"Target category's unique identifier (UUID)","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed category object","typeName":"IEconPoliticalForumCategory"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/categories","method":"post"},"description":"The category resource must exist before it can be retrieved. Create the category using POST /econPoliticalForum/administrator/categories which returns the new category record (including its id) that supplies the {categoryId} required by this GET. If the category does not exist, the GET will return 404 Not Found."}]},{"specification":"Operation to create a category in the econ_political_forum_categories Prisma table. This endpoint implements the business API to add a new category that drives thread classification, visibility rules, and moderator routing. It maps directly to the Prisma model `econ_political_forum_categories` and must respect the table constraints: `slug` is unique, `code` is unique when provided, and the service is responsible for generating timestamps and UUID primary keys. The operation enforces business validation (presence of `name` and `slug`, boolean flags for moderation and verification, and an integer `order` for display). System-managed fields (id, created_at, updated_at) are produced by the service and not accepted from clients.","path":"/econPoliticalForum/administrator/categories","method":"post","summary":"Create a new forum category (econ_political_forum_categories)","description":"Create a new discussion category.\n\nPurpose and overview: This operation creates a new row in the `econ_political_forum_categories` table. Categories control thread grouping, UI navigation ordering, moderation gating (via `is_moderated`), and whether posting requires verified accounts (`requires_verification`). The API accepts a JSON body describing the category and returns the stored category record including system-generated fields (id, created_at, updated_at).\n\nSecurity and permissions: Only platform administrators (role: \"administrator\") may create categories. The service enforces authorization before validating the request body. Clients without the administrator role receive 401 (unauthenticated) or 403 (forbidden) responses as applicable.\n\nRelationship to database entities: This operation maps to the Prisma model `econ_political_forum_categories`. Threads reference categories by `category_id`; creating or updating categories affects thread routing and moderator assignment. Be mindful that `slug` has a unique constraint and `code` is unique when present; the API returns a 409 Conflict when those uniqueness constraints are violated.\n\nValidation rules and business logic: The API requires `name` and `slug`. The `is_moderated` and `requires_verification` flags are boolean and must be present so callers are explicit about the category behavior. `order` is an integer hint for UI ordering. The server will generate `id`, `created_at`, and `updated_at`. If the requester provides values for system-managed fields, they will be ignored.\n\nExpected behavior and error handling: On success, returns the created category record. Validation failures return 400 with field details. Unique constraint violations on `slug` or `code` return 409 Conflict. Unauthorized requests return 401 or 403. Unexpected server errors return 500.","parameters":[],"requestBody":{"description":"Category creation payload. Fields: name (required), slug (required, unique), code (optional, unique when present), description (optional), is_moderated (required boolean), requires_verification (required boolean), order (required integer display hint). Server generates id, created_at, updated_at.","typeName":"IEconPoliticalForumCategory.ICreate"},"responseBody":{"description":"Created category record as stored in the `econ_political_forum_categories` table (includes id, created_at, updated_at).","typeName":"IEconPoliticalForumCategory"},"authorizationType":null,"authorizationRole":"administrator","name":"create","prerequisites":[]},{"specification":"Operation to update an existing category (econ_political_forum_categories). This endpoint updates mutable properties of a category and maps directly to the Prisma model `econ_political_forum_categories`. The operation validates the path parameter `categoryId` (UUID) and applies updates to allowed fields. It enforces uniqueness constraints (slug, code) and prevents modification of system-generated fields (id, created_at, updated_at) via the API.","path":"/econPoliticalForum/administrator/categories/{categoryId}","method":"put","summary":"Update category metadata (econ_political_forum_categories)","description":"Update an existing discussion category by id.\n\nPurpose and overview: This operation allows authorized administrators to change category metadata that affects thread classification and moderation routing. Typical updates include name, slug, description, is_moderated, requires_verification, and order. The API modifies the existing `econ_political_forum_categories` row identified by `categoryId` and returns the updated record.\n\nSecurity and permissions: Only administrators (role: \"administrator\") are allowed to perform this update. The service requires authentication and role validation prior to applying updates. Unauthorized requests result in 401 or 403 responses.\n\nRelationship to underlying DB entity: This operation updates the Prisma model `econ_political_forum_categories`. Threads that reference this category are indirectly affected by changes in `is_moderated` or `requires_verification` flags. The API must respect the model-level uniqueness constraints on `slug` and `code` and should surface 409 Conflict when collisions occur.\n\nValidation rules and business logic: The `categoryId` path parameter must be a valid UUID and refer to an existing category; otherwise the API returns 404 Not Found. The request body contains only mutable fields; system-managed fields (id, created_at, updated_at, deleted_at) are not accepted for modification. The API should validate that required business fields remain present if the client submits partial payloads that would violate invariants (for example, ensure `name` and `slug` are not cleared).\n\nRelated operations: Create (POST /categories), list (GET /categories), and retrieve (GET /categories/{categoryId}). Consider informing moderators when `is_moderated` changes for an active category.\n\nExpected behavior and error handling: On success, returns the updated category. If `categoryId` does not exist, returns 404. Validation errors return 400 with field-level messages. Unique constraint violations return 409. Server errors return 500.","parameters":[{"name":"categoryId","description":"Target category's UUID (econ_political_forum_categories.id)","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Category update payload. Accepts mutable fields: name, slug, code, description, is_moderated, requires_verification, order. Fields omitted are left unchanged.","typeName":"IEconPoliticalForumCategory.IUpdate"},"responseBody":{"description":"Updated category record as stored in the `econ_political_forum_categories` table.","typeName":"IEconPoliticalForumCategory"},"authorizationType":null,"authorizationRole":"administrator","name":"update","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/categories","method":"post"},"description":"The category must exist before it can be updated. Execute POST /econPoliticalForum/administrator/categories to create the econ_political_forum_categories row and obtain the categoryId referenced by the update. If the category does not exist, the update will return 404; this prerequisite ensures the target resource is present."}]},{"specification":"This operation performs a soft-delete of a category in the Prisma table econ_political_forum_categories. It updates the category record's deleted_at timestamp to mark the category as archived from public listings while preserving the row for audit, moderation history, and potential restoration. The operation verifies the category exists, checks for active legal holds or linked moderation cases that prevent deletion, records an immutable audit entry, and returns appropriate error codes when constraints prevent deletion. Associated threads must be handled by service-layer business logic (re-categorize, archive, or soft-delete) and are not modified automatically by this endpoint.","path":"/econPoliticalForum/administrator/categories/{categoryId}","method":"delete","summary":"Soft-delete a category (econ_political_forum_categories)","description":"Purpose and overview:\nThis operation marks the specified category record as deleted by setting `deleted_at` on econ_political_forum_categories. This removes the category from normal public navigation and listings while preserving it for audit and moderator review.\n\nSecurity considerations and permissions:\nOnly administrators (authorizationRole: \"administrator\") may perform this operation. The API layer MUST enforce RBAC, require authentication, and record an immutable audit log entry that includes the acting administrator id, category id, and reason. Non-admin callers must receive 403 Forbidden.\n\nRelationship to DB and business rules:\nThe Prisma model econ_political_forum_categories includes `deleted_at` (DateTime?). This endpoint sets that timestamp. Before setting `deleted_at`, the service MUST check for active legal holds (econ_political_forum_legal_holds) or open moderation cases (econ_political_forum_moderation_cases) that reference the category and block deletion; if blocked, return 403 with case ids. If the category is already soft-deleted, return 409 Conflict. The endpoint does NOT implicitly cascade changes to threads — thread handling must be explicit in service logic and recorded in audit history.\n\nValidation and error handling:\n- 400 Bad Request: invalid UUID for categoryId\n- 401 Unauthorized: missing/invalid authentication\n- 403 Forbidden: caller not admin or category under legal/moderation hold\n- 404 Not Found: no category with provided id\n- 409 Conflict: category already soft-deleted\n- 500 Internal Server Error: unexpected error\n\nOperational notes:\nPrefer returning 204 No Content on successful soft-delete. Ensure audit and moderation logs record the action for compliance.","parameters":[{"name":"categoryId","description":"UUID of the target category (econ_political_forum_categories.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/categories","method":"post"},"description":"The category must exist before it can be soft-deleted. Execute POST /econPoliticalForum/administrator/categories to create the econ_political_forum_categories row which provides the categoryId for deletion. Note: the delete operation must still verify business constraints (active legal holds or linked moderation cases) and may be blocked even if the category exists; if the category is missing the delete will return 404."}]},{"specification":"Operates on the Prisma table `econ_political_forum_site_settings`. This operation applies partial updates to one or more site settings entries. It is intended to allow administrators to change configuration key/value pairs (for example 'moderation.report_threshold') and metadata such as `environment` and `is_public`. The operation must validate keys for uniqueness and key format where applicable, and must record audit logs for each updated setting.","path":"/econPoliticalForum/administrator/siteSettings","method":"patch","summary":"Update site setting(s) (econ_political_forum_site_settings)","description":"Purpose and overview:\nThis endpoint updates site-level configuration rows stored in `econ_political_forum_site_settings`. The model stores `key`, `value`, optional `environment`, `description`, and `is_public` flags. The operation supports partial updates so callers can change one or multiple fields of an existing setting.\n\nSecurity considerations and user permissions:\nOnly administrator roles may update site settings. Changes are high-impact and must be logged in the audit trail with the acting administrator id, changed keys, previous values, and timestamp. For safety, implementations should enforce validation rules and optionally require additional confirmation for keys that control moderation thresholds or feature flags.\n\nRelationship to underlying database entities:\nThe Prisma model `econ_political_forum_site_settings` includes `id`, `key` (unique), `value`, `description`, `environment`, `is_public`, `created_at`, `updated_at`, and `deleted_at`. Business logic should ensure `key` uniqueness is not violated when renaming keys and should validate that `environment` (if provided) matches allowed environment identifiers used by the deployment.\n\nValidation rules and business logic:\n- The `key` follows a convention like `namespace.form` (for example `moderation.report_threshold`) — service-layer validation should verify the key pattern if renaming is supported.\n- If the request attempts to update `key` to a value that already exists (same environment), the operation must return 409 Conflict.\n- `is_public` controls whether non-admin clients may read the setting; changing this flag should be permitted only to administrators and must be audited.\n- Changes that affect runtime behavior (for example enabling/disabling a feature) may require application cache/in-memory refresh; the API MUST return metadata indicating whether a restart or cache refresh is recommended.\n\nRelated operations and expected behavior:\n- GET /siteSettings (not included here) should return settings filtered by `environment` and obey `is_public` for non-admin callers.\n- A companion endpoint to create or delete keys may exist; this operation performs partial updates only.\n\nError handling:\n- 400 Bad Request: invalid payload or key format.\n- 401 Unauthorized: missing or invalid authentication.\n- 403 Forbidden: caller lacks administrator role.\n- 404 Not Found: referenced setting id does not exist.\n- 409 Conflict: attempted update results in duplicate key for the same environment.\n- 429 Too Many Requests: aggressive configuration changes limited by rate limiting policy.\n- 500 Internal Server Error: unexpected server error.  ","parameters":[],"requestBody":{"description":"Partial update object for one or more site settings. Each item should reference the target `id` (UUID) and include only fields to be changed (for example: `value`, `description`, `environment`, `is_public`).","typeName":"IEconPoliticalForumSiteSetting.IUpdate"},"responseBody":{"description":"Updated site setting object (single setting) or a list of updated settings depending on request shape.","typeName":"IEconPoliticalForumSiteSetting"},"authorizationRoles":["administrator"],"name":"patch","authorizationRole":"administrator","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing site setting row in the Prisma table econ_political_forum_site_settings. It performs a resource update (partial or full) on one or more fields of a specific setting record, validating uniqueness of `key` within the same `environment`, enforcing admin-only access, and recording audit entries for changed keys and previous values. This operation modifies persisted configuration used by runtime logic and must be applied with caution and proper logging.","path":"/econPoliticalForum/administrator/siteSettings","method":"put","summary":"Update site setting(s) (econ_political_forum_site_settings)","description":"Purpose and overview:\nThis endpoint updates site-level configuration rows stored in econ_political_forum_site_settings. Typical fields that may be updated include `value`, `description`, `environment`, and `is_public`. The operation must validate key uniqueness per environment and produce audit logs recording changed keys and prior values (stored securely for compliance).\n\nSecurity considerations and permissions:\nOnly administrators are permitted to update site settings. Changes must be logged in the audit trail including acting administrator id, changed key(s), previous values (stored in secure audit), and timestamp. The service layer should prevent exposing sensitive configuration values to non-admin callers even if `is_public` is toggled incorrectly.\n\nRelationship to DB and business rules:\nPrisma model econ_political_forum_site_settings includes: id, key (unique), value, description, environment, is_public, created_at, updated_at, deleted_at. When updating `key`, the service must ensure uniqueness within the specified environment and must return 409 Conflict if the rename would create a duplicate. If the update affects runtime behavior, the response should include metadata advising whether a cache refresh or restart is recommended.\n\nValidation rules and business logic:\n- `key` follows a namespace.form pattern; if renaming, validate pattern and uniqueness.\n- `is_public` changes should be audited and limited to administrators.\n- If an update would violate uniqueness for (key, environment), return 409 Conflict.\n- Rate limit configuration changes to avoid accidental mass updates (service-layer policy).\n\nRecommended usage patterns:\n- Prefer updating a single setting by id. If bulk updates are supported by the implementation, the API must document transactional semantics and failure handling.\n\nError handling:\n- 400 Bad Request: invalid payload or key format\n- 401 Unauthorized: missing/invalid authentication\n- 403 Forbidden: caller lacks administrator role\n- 404 Not Found: referenced setting id does not exist\n- 409 Conflict: attempted update causes duplicate key in same environment\n- 429 Too Many Requests: rate limiting for high-frequency config edits\n- 500 Internal Server Error: unexpected server error","parameters":[],"requestBody":{"description":"Partial update object for one or more site settings. Each item should reference the target `id` (UUID) and include only fields to be changed (for example: `value`, `description`, `environment`, `is_public`).","typeName":"IEconPoliticalForumSiteSetting.IUpdate"},"responseBody":{"description":"Updated site setting object (single setting) or a list of updated settings depending on request shape.","typeName":"IEconPoliticalForumSiteSetting"},"authorizationType":null,"authorizationRole":"administrator","name":"put","prerequisites":[]},{"specification":"Operation to retrieve a single Site Setting by its ID from the econ_political_forum_site_settings table in the Prisma schema. The operation returns the canonical site setting record with administrative metadata. Server MUST NOT return raw `value` to non-administrator callers. Administrator reads of sensitive settings MUST be recorded in the audit log (econ_political_forum_audit_logs) with actor id, timestamp, request id, and target id. The implementation must validate the siteSettingId as a UUID and return 404 when the record is not found or has deleted_at set and the caller is not allowed to view deleted records.","path":"/econPoliticalForum/administrator/siteSettings/{siteSettingId}","method":"get","summary":"Retrieve a single site setting (IEconPoliticalForumSiteSetting) by ID from econ_political_forum_site_settings","description":"Retrieve a single site setting record by its unique identifier.\n\nPurpose and overview: This operation returns the canonical site configuration entry stored in the econ_political_forum_site_settings table. The response includes the configuration key, its current string value (when permitted), an optional description, the environment scope (for example: 'production' or 'staging'), a visibility flag (is_public), and timestamps for creation and last update. This endpoint is intended for administrative inspection and operational UIs.\n\nSecurity considerations and permissions: Access to the full site setting record (including the raw 'value') is restricted to administrators. Server MUST NOT return raw `value` to non-administrator callers. Any administrator read of a setting classified as sensitive MUST be logged to econ_political_forum_audit_logs with actor id, timestamp, request id, and target id. Calling systems must avoid using this endpoint from public or unauthenticated contexts.\n\nRelationship to database entity: This operation maps directly to the Prisma model econ_political_forum_site_settings and returns fields: id, key, value (subject to masking rules), description, environment, is_public, created_at, updated_at, deleted_at.\n\nValidation rules and business logic: The path parameter siteSettingId must be a UUID. If the record is soft-deleted (deleted_at not null), the operation should return 404 unless the caller has an elevated audit role that is allowed to view deleted entries. If the key is present but flagged is_public = true, a separate public listing endpoint should be used for non-admin consumers; this endpoint requires administrator role by default.\n\nExpected behavior and error handling: 200 returns the site setting object (with `value` only for authorized admin callers). 400 for invalid UUID format, 401/403 for unauthorized access, 404 if not found or not visible, 500 for server errors. All errors use the standard error envelope.","parameters":[{"name":"siteSettingId","description":"Unique identifier (UUID) of the target site setting","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Site setting details","typeName":"IEconPoliticalForumSiteSetting"},"authorizationType":null,"authorizationRole":"administrator","prerequisites":[],"name":"at"},{"specification":"Operation to search and retrieve feature flags from the econ_political_forum_feature_flags table. Supports complex request payloads (filters, pagination, sorting) and returns a paginated summary. Server MUST enforce rollout bounds (0-100) and max page size 200. Soft-deleted flags (deleted_at) are excluded by default unless includeDeleted=true and caller has audit privileges.","path":"/econPoliticalForum/administrator/featureFlags","method":"patch","summary":"Search and retrieve paginated feature flags (IPageIEconPoliticalForumFeatureFlag.ISummary)","description":"Search for feature flags with robust filtering, sorting, and pagination support.\n\nPurpose and overview: This operation enables administrative UIs and tooling to query the feature flag catalog stored in econ_political_forum_feature_flags. It supports complex criteria (partial key match, enabled boolean, rollout percentage range, environment scoping) and returns paginated summaries for efficient listing.\n\nSecurity considerations and user permissions: Feature flags control runtime behavior; therefore read and write access to the full feature flag objects is restricted to administrators. Only administrator-role callers may include deleted records or request full detail. For general listing, deleted/soft-deleted flags are excluded by default.\n\nRelationship to underlying database entity: This operation directly maps to the econ_political_forum_feature_flags Prisma model and returns the flags' key, enabled state, rollout_percentage, description, and timestamps.\n\nValidation rules and business logic: Request payload must validate filter fields: key (string, optional), enabled (boolean, optional), environment (string, optional), rolloutMin/rolloutMax (integers between 0 and 100), sort (one of: 'key', 'created_at', 'rollout_percentage'), direction ('asc'|'desc'). Server MUST enforce rolloutMin/rolloutMax bounds (0-100) and return 400/422 for invalid ranges. Pagination may be provided either as page/limit (page starting at 1) or cursor-based: when both provided, page/limit takes precedence. Default page size is 25, maximum allowed page size is 200 (server-enforced). If includeDeleted is true, the caller must be an administrator and results will include records with deleted_at set.\n\nExpected behavior and error handling: 200 returns paginated summary results. 400 for invalid filter values, 401/403 if unauthorized, 429 when rate limits are exceeded, 500 for internal errors. Use the standard error envelope for all errors.","parameters":[],"requestBody":{"description":"Search criteria, pagination, sorting and filter parameters for feature flags retrieval","typeName":"IEconPoliticalForumFeatureFlag.IRequest"},"responseBody":{"description":"Paginated list of feature flag summary records","typeName":"IPageIEconPoliticalForumFeatureFlag.ISummary"},"authorizationType":null,"authorizationRole":"administrator","prerequisites":[],"name":"index"},{"specification":"Retrieve a single feature flag by its UUID. This operation is backed by the Prisma model econ_political_forum_feature_flags and returns the canonical feature flag record (fields include id, key, value, enabled, rollout_percentage, description, environment, is_public, created_at, updated_at, deleted_at). Business rule: public callers (is_public = true) may receive a redacted summary that omits the `value` field; full payloads that include `value` are restricted to authorized admin/internal roles. The implementation must audit accesses that return the `value` field and must never use feature flag `value` to store secrets (recommend using a secrets manager).","path":"/econPoliticalForum/featureFlags/{featureFlagId}","method":"get","summary":"Retrieve a single feature flag by ID (EconPoliticalForum.feature_flags)","description":"Purpose and overview:\n\nRetrieve the canonical feature flag record identified by the path parameter featureFlagId. This operation surfaces runtime feature configuration such as the flag key, whether it is enabled, optional rollout percentages, environment scoping, and the human-readable description. The underlying Prisma model is econ_political_forum_feature_flags and the response maps to the IEconPoliticalForumFeatureFlag DTO.\n\nSecurity considerations and permissions:\n\nFeature flags include an is_public boolean. Public flags (is_public = true) may be read by unauthenticated clients but the server MUST redact or omit the `value` field for public consumers. Non-public flags (is_public = false) require elevated privileges (for example, admin or internal tooling) to view and MUST be logged when accessed. The API implementation must enforce these rules server-side. Clients MUST NOT use feature flag `value` to carry secrets; sensitive configuration must be stored in a dedicated secrets manager.\n\nRelationship to DB entity and validation rules:\n\nThis operation directly queries the econ_political_forum_feature_flags table. Key columns include: id (UUID), key (unique string), value (string), enabled (boolean), rollout_percentage (Int|null), description (string|null), environment (string|null), is_public (boolean), created_at, updated_at, deleted_at (nullable soft-delete timestamp). The featureFlagId path parameter must be a UUID and will be used to locate the record. If deleted_at is set, behavior should follow retention rules (typically 404).\n\nRelated operations and error handling:\n\n- Use GET /econPoliticalForum/featureFlags/{featureFlagId} to fetch a single flag; use an admin-only listing endpoint to enumerate non-public flags.\n- Error responses include 400 for malformed UUIDs, 404 if no active record exists for the provided id (or the record is soft-deleted and not visible), and 403 when attempting to read a non-public flag without sufficient privileges.\n\nExpected behavior and edge cases:\n\n- If the flag exists but is_public=false and the caller lacks authorization, return 403.\n- If the flag is found but has a null rollout_percentage, treat that as \"not set\" in client logic.\n- Servers must redact `value` for public consumers and must audit any access that returns `value` to authorized callers.","parameters":[{"name":"featureFlagId","description":"UUID of the target feature flag","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Feature flag record matching the requested ID. Note: public responses may have `value` redacted.","typeName":"IEconPoliticalForumFeatureFlag"},"authorizationType":null,"authorizationRole":null,"prerequisites":[],"name":"at"},{"specification":"Search and retrieve a paginated list of tag summaries for discovery. This operation is backed by the Prisma model econ_political_forum_tags and supports complex request parameters (search term, pagination, sorting, filters). Soft-deleted tags (deleted_at != null) are excluded by default unless an authorized caller explicitly requests includeDeleted=true. Results map to tag summary DTOs and the request shape follows IEconPoliticalForumTag.IRequest.","path":"/econPoliticalForum/tags","method":"patch","summary":"Search and retrieve paginated tag summaries (EconPoliticalForum.tags)","description":"Purpose and overview:\n\nProvide a flexible search and pagination endpoint to list tags used for discovery and filtering across threads. The underlying Prisma entity is econ_political_forum_tags. This operation accepts complex request criteria (full-text search on name/description, slug filter, pagination cursor or page/limit, sort options) and returns a paginated container of tag summaries.\n\nSecurity and visibility:\n\nTags are public by default. Soft-deleted tags (deleted_at set) are excluded from results unless the requester is authorized to view deletions (for example, administrators or moderation tools). Administrative filter options (includeDeleted = true) MUST be restricted to privileged roles in server-side logic.\n\nRelationship to DB entity and validation rules:\n\nFields on the econ_political_forum_tags table relevant to this operation include id (UUID), name (unique string), slug (unique string), description (nullable), created_at, updated_at, and deleted_at (nullable soft-delete timestamp). Search should use trigram/Gin indexes for partial matches; request input must be validated for length and characters. Pagination should use either page/limit (defaults applied) or a cursor token; page size defaults to 20 with a configured maximum (for example, 100) enforced server-side.\n\nRelated operations and error handling:\n\n- Use PATCH /econPoliticalForum/tags for advanced search and listing; simple GET/list endpoints may be provided for lightweight clients.\n- Error responses include 400 for invalid request shapes (e.g., page < 1, limit exceeding maximum), 429 for rate-limit breaches, and 500 for server errors.\n\nExpected behavior and edge cases:\n\n- When no filters are provided, return the first page of active tags ordered by name ascending.\n- When a search term is provided, perform case-insensitive partial matching against name and description.\n- When includeDeleted=true is requested by an authorized caller, include tags with deleted_at set and mark them accordingly in the summary response.","parameters":[],"requestBody":{"description":"Search, filter and pagination parameters for tag listing","typeName":"IEconPoliticalForumTag.IRequest"},"responseBody":{"description":"Paginated list of tag summary records","typeName":"IPageIEconPoliticalForumTag.ISummary"},"authorizationType":null,"authorizationRole":null,"prerequisites":[],"name":"index"},{"specification":"Retrieve a single tag record from the econ_political_forum_tags table. Operates on the econ_political_forum_tags Prisma model and returns the canonical tag fields used for discovery: id, name, slug, description, created_at, updated_at, deleted_at. This operation only returns active (non-deleted) records for public consumers; soft-deleted records (deleted_at != null) are treated as not found for this public endpoint. Intended for client read/display and routing.","path":"/econPoliticalForum/tags/{tagId}","method":"get","summary":"Retrieve a tag by its ID from the econ_political_forum_tags table","description":"Purpose and overview:\nRetrieve detailed information for a single tag identified by its UUID. Tags are the normalized discovery labels used across threads and are stored in the econ_political_forum_tags table in the Prisma schema. This operation returns the canonical tag fields used by clients for display and routing.\n\nSecurity considerations and permissions:\nThis endpoint is public (no authentication required) for read-only access. Internal moderation and administrative UIs should use elevated API endpoints when they need to view soft-deleted records. Public consumers should not see tags where deleted_at is set.\n\nRelationship to database entity:\nThis operation directly reads the econ_political_forum_tags model (fields: id, name, slug, description, created_at, updated_at, deleted_at). The response type IEconPoliticalForumTag must reflect those fields. The service MUST treat deleted_at as the soft-delete marker and SHOULD return 404 for records with deleted_at != null.\n\nValidation rules and business logic:\n- The path parameter tagId must be a UUID.\n- If no tag exists with the given id, the API returns 404.\n- If the tag exists but deleted_at is set, the API treats it as not found for public calls and returns 404 (moderator/admin endpoints may surface soft-deleted tags).\n\nRelated operations and notes:\n- Related create: POST /econPoliticalForum/administrator/tags (creates a new tag record).\n- Related list/search: GET /econPoliticalForum/tags (paginated listing/search endpoint) for tag discovery (not implemented here).\n\nExpected behavior and error handling:\n- 200: returns IEconPoliticalForumTag payload for active tags.\n- 400: invalid UUID format for tagId.\n- 404: tag not found or soft-deleted.\n- 500: unexpected server error.","parameters":[{"name":"tagId","in":"path","description":"Unique identifier (UUID) of the target tag","schema":{"type":"string","format":"uuid"},"required":true}],"requestBody":null,"responseBody":{"description":"Tag details returned as IEconPoliticalForumTag","typeName":"IEconPoliticalForumTag"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/tags","method":"post"},"description":"A tag must exist before it can be retrieved. POST /econPoliticalForum/administrator/tags creates tag records (id, name, slug). If the tag is not created, GET /econPoliticalForum/tags/{tagId} will return 404."}]},{"specification":"Create a new normalized tag in the econ_political_forum_tags table. This operation maps to the econ_political_forum_tags Prisma model and inserts a new row with name and slug (both unique), optional description, and system-generated id, created_at, updated_at. Intended for administrative taxonomy management and must be restricted to administrators.","path":"/econPoliticalForum/administrator/tags","method":"post","summary":"Create a new tag in econ_political_forum_tags (administrator only)","description":"Purpose and overview:\nCreate a new normalized tag that can be attached to threads for discovery and search. Tags are stored in the econ_political_forum_tags table in the Prisma schema. The created resource corresponds to IEconPoliticalForumTag and will contain the canonical fields (id, name, slug, description, created_at, updated_at, deleted_at).\n\nSecurity considerations and permissions:\nOnly platform administrators should be allowed to create new tags to maintain taxonomy quality and avoid fragmentation. The endpoint requires administrative authorization. Creation attempts by non-administrators must return 403. Successful creations SHOULD be recorded in audit/moderation logs for traceability.\n\nRelationship to database entity:\nThis operation inserts a row into econ_political_forum_tags. The application MUST enforce uniqueness of slug and name at the business layer (the Prisma schema already defines unique constraints on slug and name). The API should validate the slug is URL-friendly before inserting.\n\nValidation rules and business logic:\n- Request must include required create fields (name and slug) as defined by IEconPoliticalForumTag.ICreate.\n- The server must reject requests that violate unique constraints for slug or name with a 409 Conflict response indicating which field conflicts.\n- Clients MUST NOT supply server-managed fields: id, created_at, updated_at, or deleted_at. These are set by the server.\n- If provided, description is optional.\n- If the operation is successful the server returns the newly created IEconPoliticalForumTag with 201 status and a Location header pointing to /econPoliticalForum/tags/{tagId}.\n\nRelated operations and notes:\n- GET /econPoliticalForum/tags/{tagId} can be used to retrieve the created tag.\n- Tag creation is an administrative action; consider logging the creation in moderation/audit logs for traceability.\n\nExpected behavior and error handling:\n- 201: returns created IEconPoliticalForumTag payload and Location header.\n- 400: missing required fields or invalid slug format.\n- 401: authentication required.\n- 403: caller lacks administrator privileges.\n- 409: uniqueness conflict on name or slug.\n- 500: unexpected server error.","parameters":[],"requestBody":{"description":"Tag creation payload (IEconPoliticalForumTag.ICreate). Clients MUST provide name and slug; do not supply id or timestamp fields.","typeName":"IEconPoliticalForumTag.ICreate"},"responseBody":{"description":"Created tag returned as IEconPoliticalForumTag","typeName":"IEconPoliticalForumTag"},"authorizationType":null,"authorizationRole":"administrator","name":"create","prerequisites":[]},{"specification":"Update an existing tag in the econ_political_forum_tags table. This operation updates mutable tag fields (name, slug, description) for a tag identified by its UUID. It operates directly on the Prisma model econ_political_forum_tags and must enforce the model's uniqueness constraints (unique slug and unique name) and soft-delete semantics (deleted_at must be null for an updatable record). Business rules applied by this operation include: validate slug normalization (lower-case, URL-safe), ensure slug and name uniqueness across active tags, trim and length-validate fields, and update the updated_at timestamp. The operation must reject updates to tags that have been soft-deleted (deleted_at not null) with an appropriate 404 or 409 response. Relationships: threads reference tags via the join table econ_political_forum_thread_tags; updating a tag's display name or slug affects discoverability and search indices but does not change historical thread content — joins remain intact. Security: only users with administrator privileges may perform this operation; all updates must be recorded in moderation/audit logs by the implementation. Validation errors (slug conflict, invalid format, missing required fields) must return structured errors. If the update would violate unique constraints, the service should return 409 Conflict with a clear reason.","path":"/econPoliticalForum/administrator/tags/{tagId}","method":"put","summary":"Update a tag in econ_political_forum_tags (IEconPoliticalForumTag)","description":"Purpose and overview:\nUpdate the mutable attributes of an existing tag record. This operation allows administrators to correct or improve tag metadata (name, slug, description) used for discovery and categorization across threads.\n\nSecurity and permissions:\nOnly users with the administrator role are authorized to call this endpoint. All successful updates should be recorded in system audit/moderation logs to preserve change history and support rollback or review.\n\nRelationship to Prisma schema entity:\nThis operation maps to the Prisma model `econ_political_forum_tags`. Per the model comments, tags are a normalized catalog used for discovery and search; the model enforces unique `name` and `slug` constraints and supports soft-delete via `deleted_at`. Implementations must respect those constraints and avoid modifying the tag `id` or removing historical references.\n\nValidation rules and business logic:\n- `name` and `slug` must be unique among active (non-deleted) tags; uniqueness violations return 409 Conflict.\n- `slug` should be a URL-safe, lower-case identifier (the application should normalize and validate input).\n- Reasonable length limits should be enforced (for example: name 1-100 chars, slug 1-100 chars, description up to 2000 chars) and exceeded limits should return 400 with field details.\n- If the target tag has `deleted_at` set (soft-deleted), the operation SHALL return 404 Not Found or 409 Conflict per policy (implementation choice) describing that the resource is not available for update.\n\nRelated operations:\nUse GET /tags/{tagId} (not part of this generation) to retrieve current tag details before updating; use POST /tags to create new tags. When name/slug changes affect search indices, ensure any search index materialized views or full-text indexes are refreshed.\n\nExpected behavior and error handling:\n- Success: returns the updated IEconPoliticalForumTag representation.\n- 400: validation error (field-specific message describing constraint violation).\n- 401/403: unauthorized or insufficient privileges.\n- 404: tag not found or soft-deleted (if implementation chooses 404 for deleted resources).\n- 409: unique constraint conflict (slug or name already used by an active tag).\n- 500: internal server error for unexpected failures.","parameters":[{"name":"tagId","in":"path","description":"Unique identifier (UUID) of the target tag (econ_political_forum_tags.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the tag. Use IEconPoliticalForumTag.IUpdate structure. Immutable fields such as id are not accepted. Provide only fields you want to change.","typeName":"IEconPoliticalForumTag.IUpdate"},"responseBody":{"description":"Updated tag representation after the successful update.","typeName":"IEconPoliticalForumTag"},"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/tags","method":"post"},"description":"The tag resource identified by {tagId} must exist before it can be updated. Use POST /econPoliticalForum/administrator/tags to create the tag (creates a row in econ_political_forum_tags and returns its id). If the tag does not exist, the update will fail with 404/409; creating the tag first ensures the required tagId is present."}],"authorizationType":null,"authorizationRole":"administrator","name":"update"},{"specification":"Soft-delete (mark as deleted) a tag in the econ_political_forum_tags table. Because the Prisma model includes a nullable `deleted_at` column, this operation performs a soft deletion by setting deleted_at to the current timestamp rather than physically removing the database row. Business rules: soft-deleted tags are excluded from active tag lists and new tag assignments, but historical thread_tag join entries are retained for audit and continuity. The implementation should also soft-delete or mark related join records in econ_political_forum_thread_tags as appropriate (or leave them for audit depending on product policy). The operation must prevent deletion if legal holds or other retention constraints explicitly prevent purging; in such cases it should return 409 with explanatory details. This action is restricted to administrators and must be recorded in moderation/audit logs.","path":"/econPoliticalForum/administrator/tags/{tagId}","method":"delete","summary":"Soft-delete a tag from econ_political_forum_tags (set deleted_at)","description":"Purpose and overview:\nThis operation marks a tag as deleted by setting its `deleted_at` timestamp. Soft deletion preserves the record for audit, moderation, and legal compliance while removing the tag from normal active lists and preventing new assignments.\n\nSecurity and permissions:\nOnly users with the administrator role are permitted to perform this operation. Soft-deletes and the rationale for deletion should be recorded in the audit logs so actions are traceable.\n\nRelationship to Prisma schema entity:\nThis operation targets the Prisma model `econ_political_forum_tags` which includes a `deleted_at` DateTime? column. Because the schema supports soft-delete, this operation implements soft deletion (not hard removal). Implementers should also consider handling the related join table `econ_political_forum_thread_tags` per product policy (either soft-delete the joins or leave them and exclude deleted tags from active lookups).\n\nValidation rules and business logic:\n- If the tag does not exist or is already soft-deleted, return 404 Not Found.\n- If a legal hold or retention constraint prevents deletion of the tag or related evidence, return 409 Conflict with details.\n- The operation should be idempotent: repeated deletes on an already-deleted resource may return 204 No Content or 404 depending on chosen semantics; document chosen behavior in API docs.\n\nRelated operations:\nUse GET /tags to list active tags, and POST /tags to create a replacement tag if needed. Administrators may restore soft-deleted tags using a restore endpoint (not included here) which would clear deleted_at.\n\nExpected behavior and error handling:\n- Success: 204 No Content (or 200 with short confirmation payload) indicating tag is soft-deleted.\n- 401/403: unauthorized or insufficient privileges.\n- 404: tag not found or already deleted.\n- 409: conflict due to legal hold or retention requirement.\n- 500: internal server error for unexpected failures.","parameters":[{"name":"tagId","in":"path","description":"Unique identifier (UUID) of the tag to delete (econ_political_forum_tags.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/tags","method":"post"},"description":"The tag resource identified by {tagId} must exist before it can be soft-deleted. Use POST /econPoliticalForum/administrator/tags to create the tag (creates a row in econ_political_forum_tags and returns its id). Deletion of a non-existent or already-deleted tag will return 404 or be a no-op depending on semantics; creating the tag ensures the delete target exists."}],"authorizationType":null,"authorizationRole":"administrator","name":"erase"},{"specification":"Retrieve a paginated, filterable list of discussion threads operating on the econ_political_forum_threads table in the Prisma schema. This operation exposes search, filtering, sorting and pagination capabilities against the threads table (fields referenced: id, category_id, author_id, title, slug, status, pinned, created_at, updated_at, deleted_at). It must respect category-level moderation gating (see related econ_political_forum_categories.requires_verification and is_moderated) when returning items and surface only threads the requesting user is permitted to see.","path":"/econPoliticalForum/threads","method":"patch","summary":"Search and retrieve a paginated list of threads","description":"Purpose and overview:\n\nThis operation performs advanced retrieval of threads from the econ_political_forum_threads table. It supports full-text title search (leveraging the title trigram index), filters by category_id, author_id, tag membership (via thread-tags join), status, pinned flag, and date ranges on created_at/updated_at. Results are returned in a paginated container and include thread summary fields optimized for list displays.\n\nSecurity considerations and user permissions:\n\nPublic read access is allowed for standard public categories, but results must respect category gating: if a category requires verification (refer to econ_political_forum_categories.requires_verification) or is marked moderated (econ_political_forum_categories.is_moderated), the API and implementation must ensure non-verified users do not receive unpublished or pending threads. For authenticated users, results can include restricted content the user is authorized to view. Implement appropriate rate limits to mitigate abuse (for example: create/search throttles per account/IP).\n\nRelationship to underlying DB entities:\n\nThis operation directly queries econ_political_forum_threads and uses its relationships to categories (category_id) and tags (via econ_political_forum_thread_tags) and to author (author_id referencing econ_political_forum_registereduser). The Prisma schema includes indexes for title (gin_trgm_ops) enabling efficient full-text title search; the operation should leverage that index for relevance ranking. Soft-deleted threads (deleted_at non-null) must be excluded from public results unless the requester is an administrator or the request explicitly includes archived content.\n\nValidation rules and business logic:\n\n- Pagination: support cursor or page/limit patterns with sensible defaults (default page size 20, max 100).\n- Search: title search should support partial matches and ranking; include query sanitization to avoid injection.\n- Filters: category_id and tag_id filters must be validated as UUIDs; date range filters must be ISO 8601 timestamps.\n- Sorting: allow sort by relevance (when a text query is present), newest (created_at desc), oldest, most-replied or pinned-first.\n- Visibility: exclude threads in moderated categories that are pending approval from users without moderator/admin privileges.\n- Soft-deletes: threads with deleted_at populated are hidden from normal listings.\n\nRelated operations:\n\n- Use GET /threads/{threadId} to retrieve a single thread with full detail (including posts and top-level comments).\n- Use POST/PUT operations (not included here) to create or update threads; these must populate econ_political_forum_post_revisions when edits occur.\n\nExpected behavior and error handling:\n\n- Return a paginated response with thread summary items and pagination metadata. 400 on invalid filter values, 401 for private/restricted access attempts, 429 when rate limits are exceeded, and 500 for unexpected server errors.","parameters":[],"requestBody":{"description":"Search criteria, pagination and sorting options for thread retrieval","typeName":"IEconPoliticalForumThread.IRequest"},"responseBody":{"description":"Paginated list of thread summaries matching the search and filter criteria","typeName":"IPageIEconPoliticalForumThread.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/categories","method":"post"},"description":"A category record must exist before threads can be meaningfully filtered or constrained by category_id. Creating a category via POST /econPoliticalForum/administrator/categories produces the category_id referenced by threads and enables enforcement of category-level visibility rules (requires_verification, is_moderated). If this prerequisite is not satisfied, filters using category_id cannot reference an existing category and visibility checks related to categories will fail."},{"endpoint":{"path":"/econPoliticalForum/administrator/tags","method":"post"},"description":"A tag must exist before threads can be filtered by tag_id or associated with tags. POST /econPoliticalForum/administrator/tags creates canonical tag records (with id/slug) that thread-tag joins reference. If a tag does not exist, filtering by tag_id or tag-based joins will fail or return no results."}]},{"specification":"Retrieve detailed information about a single discussion thread from the econ_political_forum_threads table, returning thread metadata and (implementation detail) the ability to include top-level posts. It references fields: id, category_id, author_id, title, slug, status, pinned, created_at, updated_at, deleted_at and must respect visibility rules defined by related category settings (econ_political_forum_categories.is_moderated and requires_verification).","path":"/econPoliticalForum/threads/{threadId}","method":"get","summary":"Get a single thread by ID with details","description":"Purpose and overview:\n\nThis operation returns one thread record from the econ_political_forum_threads table identified by the path parameter {threadId}. The response provides full thread metadata needed to render the thread page, including title, author reference (author_id), category reference (category_id), status, pinned flag, and timestamps. Implementations often include top-level posts (first page of posts) in the payload to simplify client rendering.\n\nSecurity considerations and user permissions:\n\nThe operation must enforce visibility rules: do not return threads that are soft-deleted (deleted_at set) except to administrators or authorized moderators. For categories that require verification (see econ_political_forum_categories.requires_verification) or are moderated (econ_political_forum_categories.is_moderated), ensure the caller has appropriate privileges before returning pending or private items. If the thread is pending moderator approval, return 403 for unauthorized users or 404 to avoid revealing existence when policy requires non-disclosure.\n\nRelationship to underlying database entities:\n\nThis operation uses the econ_political_forum_threads table and joins as needed to author (econ_political_forum_registereduser) and to posts (econ_political_forum_posts) for an optional embedded posts list. The Prisma schema provides trigram indexes on title for search; this endpoint is a point-retrieval and should be served from primary keyed lookup by id (UUID) for best performance.\n\nValidation rules and business logic:\n\n- Path parameter threadId must be a UUID matching econ_political_forum_threads.id.\n- If include parameters request embedding posts or other relations, enforce pagination for posts, and exclude hidden posts (is_hidden true) from public responses unless the requester is moderator/admin.\n- If the thread is soft-deleted (deleted_at not null) and the caller is not privileged, return 404.\n\nRelated operations and error handling:\n\n- Use PATCH /threads for list/search and GET /threads/{threadId}/posts (or embedded posts) to fetch paginated posts. 400 for malformed UUIDs, 401 for authentication required when requesting restricted content, 403 for unauthorized access to pending/moderated content, 404 if not found or soft-deleted for public user, 500 for unexpected errors.","parameters":[{"name":"threadId","description":"Unique identifier (UUID) of the target thread","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed thread information including metadata and optional top-level posts","typeName":"IEconPoliticalForumThread"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"The thread resource must be created before it can be retrieved by id. POST /econPoliticalForum/registeredUser/threads creates a new thread and returns its generated id (threadId); without creating the thread first the GET by threadId will return not-found or 404 for public callers."}]},{"specification":"Create a new discussion thread in the econ_political_forum_threads table (Prisma model: econ_political_forum_threads). This POST operation creates a top-level thread record referencing a category (category_id) and the author (author_id). Business rules enforced by the API and application logic include validation of title and slug uniqueness, enforcement of category-level posting rules (for example categories where requires_verification is true should only allow verified accounts to publish), and initial lifecycle fields such as status and pinned. The operation must record timestamps (created_at, updated_at) and honor referential integrity with the category and registered user tables. This operation maps directly to the Prisma table econ_political_forum_threads and must only reference fields defined on that model.","description":"Purpose and overview\n\nCreate a new discussion thread (top-level topic) in the system. This operation writes a new row to the econ_political_forum_threads Prisma model and returns the created thread record. The request SHOULD include a category reference, the thread title, and optional slug and pinned/status hints. The author is derived from the authenticated user (author_id) or explicitly provided where business logic allows delegation; server-side logic MUST verify that the author exists and is permitted to post in the chosen category (for example, check econ_political_forum_categories.requires_verification). The API MUST enforce slug uniqueness (the underlying Prisma model defines slug as unique) and return a 409 conflict when a provided slug already exists.\n\nSecurity and permissions\n\nOnly authenticated registered users MAY create threads. The caller's role is validated (registeredUser) and additional business checks (account not suspended, email verification when required by the chosen category) MUST be applied. Input must be validated and sanitized to prevent XSS and other content injection; the server MUST strip/escape disallowed HTML or reject inputs that violate the content policy.\n\nRelationship to database entities\n\nThis operation persists a new record in econ_political_forum_threads and references econ_political_forum_categories via category_id and econ_political_forum_registereduser via author_id. The created_at and updated_at timestamps are populated by the server. The deleted_at column is reserved for soft-delete scenarios and is not set by this operation.\n\nValidation rules and business logic\n\n- title: required, non-empty, sensible length (recommend 5–200 characters).  \n- slug: optional; if provided the server validates uniqueness and slug format; if omitted the server may synthesize a slug from the title.  \n- category_id: required, must reference an active category. If the referenced category has requires_verification=true then the requestor MUST have a verified email or appropriate verification status.  \n- pinned/status: optional hints; server enforces pinned only for privileged roles (moderator/administrator) regardless of input.  \n- Server MUST sanitize content and enforce policy on political/economic content per moderation rules.\n\nRelated operations\n\n- POST /posts: create the first post in a thread (client may call after thread creation) or server may create an initial post automatically depending on implementation choices.  \n- PATCH /threads (search) and GET /threads/{threadId} can be used to retrieve created threads.\n\nError handling\n\nReturn structured error envelope for validation failures (400), authentication errors (401), authorization errors (403), uniqueness conflicts (409), rate limits (429), and unexpected server errors (500).","summary":"Create a new discussion thread (econ_political_forum_threads)","parameters":[],"requestBody":{"description":"Payload to create a new thread. The DTO type IEconPoliticalForumThread.ICreate includes: category_id (uuid), title (string), optional slug (string), optional status (string), optional pinned (boolean). The author is determined by the authenticated user in normal flows.","typeName":"IEconPoliticalForumThread.ICreate"},"responseBody":{"description":"Created thread record with canonical fields from econ_political_forum_threads.","typeName":"IEconPoliticalForumThread"},"authorizationRoles":["registeredUser"],"name":"create","path":"/econPoliticalForum/registeredUser/threads","method":"post","authorizationRole":"registeredUser","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/categories","method":"post"},"description":"The thread's category (category_id) must exist before creating a thread. This prerequisite ensures an active category record is available so referential integrity and category-level posting rules (for example, requires_verification and is_moderated) can be validated. If the category does not exist or is soft-deleted, thread creation will fail."}]},{"specification":"Update an existing discussion thread in the econ_political_forum_threads table (Prisma model: econ_political_forum_threads). This PUT operation updates mutable thread fields such as title, slug, status, and pinned flag for a given threadId. The implementation MUST respect ownership and privilege rules: typically only the thread author (registeredUser) within business-defined edit windows or a moderator/administrator may perform updates that change visibility or pin status. The operation must reference existing Prisma fields only.","description":"Purpose and overview\n\nUpdate metadata for an existing thread identified by threadId. This operation updates permitted fields on the econ_political_forum_threads row such as title, slug, status, and pinned flag, and sets updated_at to the current time. The operation MUST validate incoming values (for example slug uniqueness, title length) and enforce business constraints (only moderators/administrators may set pinned=true; changing category may be restricted). If ownership is required, server-side logic MUST verify that the authenticated registeredUser is the author of the thread or has moderator privileges.\n\nSecurity and permissions\n\nAuthentication (registeredUser) is required. Authorization checks MUST ensure only permitted principals may update the thread (owner within edit policy window OR moderator/administrator). The API MUST return 403 Forbidden if the caller lacks the necessary permissions.\n\nRelationship to database entities\n\nThis operation updates the econ_political_forum_threads record and may touch related indexes used for search. It MUST NOT create or delete related posts, reports, or moderation logs — those are handled by their respective APIs. If the update triggers moderation concerns (for example moving a thread into a moderated category), the server MUST route the thread for moderator review according to category rules.\n\nValidation and business logic\n\n- threadId path parameter: required, UUID format, identifies target thread.  \n- title: optional, when present validate 5–200 characters.  \n- slug: optional, validate uniqueness and safe URL characters; if collision occurs return 409 Conflict.  \n- status: optional, domain values should match application expectations (for example 'open', 'closed', 'pinned'); server enforces allowed values.  \n- pinned: optional, only allowed for moderator/administrator roles; if present and caller is not privileged, ignore or return 403 based on policy.  \n- If the thread is under a legal_hold (econ_political_forum_legal_holds), then updates that would remove evidence or alter history must be prevented and a 423/403-like response returned. The system should consult legal hold records before allowing destructive updates.\n\nRelated operations\n\n- GET /threads/{threadId} — retrieve the updated thread.  \n- POST /threads — create new threads.  \n- Moderator endpoints — for forced pinning, moving categories, or other privileged operations.\n\nError handling\n\nReturn 400 for validation errors, 401 for unauthenticated requests, 403 for insufficient permissions, 404 if threadId not found or soft-deleted, 409 for slug conflicts, 423 for operations blocked by legal hold, 429 for rate limiting, and 500 for unexpected errors.","summary":"Update thread metadata (econ_political_forum_threads) by threadId","parameters":[{"name":"threadId","in":"path","description":"Unique identifier of the target thread (econ_political_forum_threads.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload to update a thread. The DTO type IEconPoliticalForumThread.IUpdate includes optional fields: title (string), slug (string), status (string), pinned (boolean). Fields not present are left unchanged.","typeName":"IEconPoliticalForumThread.IUpdate"},"responseBody":{"description":"Updated thread record reflecting changes to the econ_political_forum_threads row.","typeName":"IEconPoliticalForumThread"},"authorizationRoles":["registeredUser"],"name":"update","path":"/econPoliticalForum/registeredUser/threads/{threadId}","method":"put","authorizationRole":"registeredUser","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/categories","method":"post"},"description":"If updating a thread's category or validating category constraints, the referenced category must exist. Ensure the category record is present so category-level rules (requires_verification, is_moderated) can be enforced; failure to find an active category prevents updates that reference it."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"The target thread (threadId) must exist before it can be updated. Use the thread creation operation to create the thread resource that provides the threadId; if the thread does not exist the update will fail with 404/not-found."}]},{"specification":"Soft-delete a thread in the econ_political_forum_threads table by setting deleted_at. Validates ownership and legal holds before updating. Creates server-generated moderation/audit log entries referencing econ_political_forum_moderation_logs and econ_political_forum_audit_logs. This operation must not accept client-supplied audit/log data and must enforce ownership checks for registeredUser callers.","path":"/econPoliticalForum/registeredUser/threads/{threadId}","method":"delete","summary":"Soft-delete (mark deleted_at) a thread by ID (econ_political_forum_threads)","description":"Marks the specified thread record's deleted_at timestamp to perform a soft-delete. The server MUST verify caller identity and ownership: registered users may delete only their own threads, moderators and admins may delete per policy. If an active legal hold exists (econ_political_forum_legal_holds with is_active=true) the server MUST reject the request with 403. The server MUST create immutable moderation and audit log entries recording the action (moderation log entry with action_type='soft_delete').\n\nResponses: 204 No Content on success; 400 for invalid UUID; 401 for unauthenticated requests; 403 for insufficient privileges or active legal hold; 404 if thread not found or already deleted; 429 rate-limited; 500 server error.\n\nDeveloper note: do not accept client-provided audit payloads. Log creation is server-side only.","parameters":[{"name":"threadId","description":"Unique identifier (UUID) of the target thread","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"registeredUser","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"A thread must be created (POST /econPoliticalForum/registeredUser/threads) so that the target threadId exists before it can be soft-deleted. The create operation returns the generated thread id used by the delete operation; if this prerequisite fails, deletion cannot proceed."}],"name":"erase"},{"specification":"Soft-delete a thread in the econ_political_forum_threads table by setting deleted_at. Intended for moderator actions: server creates moderation logs and enforces moderator privileges. Legal holds block deletion. This operation must not accept client-supplied audit data.","path":"/econPoliticalForum/moderator/threads/{threadId}","method":"delete","summary":"Soft-delete (mark deleted_at) a thread by ID (econ_political_forum_threads) - moderator","description":"Marks the specified thread's deleted_at timestamp. Only active moderators (authorizationRole=moderator) may delete content in moderation capacity per policy. Server MUST record a moderation log entry with action_type='soft_delete', reason_code and rationale. If a legal hold is active, deletion is forbidden and returns 403. Successful response: 204 No Content.\n\nErrors: 400 invalid UUID, 401 unauthenticated, 403 insufficient privileges or legal hold, 404 not found, 429 rate limit, 500 server error.","parameters":[{"name":"threadId","description":"Unique identifier (UUID) of the target thread","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"A thread must exist before a moderator can soft-delete it. Use POST /econPoliticalForum/registeredUser/threads to create the thread (producing the threadId). If the thread does not exist, the moderator delete will return 404."}],"name":"erase"},{"specification":"Soft-delete a thread in the econ_political_forum_threads table by setting deleted_at. Intended for administrator actions; server must verify admin privileges, check legal holds, and record audit/moderation logs. Permanent purges are out of scope for this endpoint and require separate admin workflows.","path":"/econPoliticalForum/administrator/threads/{threadId}","method":"delete","summary":"Soft-delete (mark deleted_at) a thread by ID (econ_political_forum_threads) - administrator","description":"Marks the specified thread's deleted_at timestamp. Administrators (authorizationRole=administrator) may perform administrative deletions. Server MUST check for active legal holds and must create audit and moderation logs. On success return 204 No Content. If a legal hold is present, return 403. Permanent purge requires a separate admin-only flow and is not implemented here.\n\nErrors: 400 invalid UUID, 401 unauthenticated, 403 legal hold or insufficient privileges, 404 not found, 429 rate limit, 500 server error.","parameters":[{"name":"threadId","description":"Unique identifier (UUID) of the target thread","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Ensure the target thread exists by creating a thread resource (POST /econPoliticalForum/registeredUser/threads). The delete operation requires the thread identified by {threadId} to exist; if the thread does not exist the soft-delete will fail with 404. This prerequisite provides the thread resource needed for administrative soft-deletion and helps validate referential integrity before attempting to set deleted_at."}],"name":"erase"},{"specification":"Retrieve a filtered, paginated list of posts belonging to a thread (econ_political_forum_posts). Supports filters by author_id, parent_id, date range, and full-text search on content. By default returns only active, non-hidden posts (deleted_at IS NULL and is_hidden = false). Moderator/administrator callers may request includeHidden/includeDeleted to see hidden or soft-deleted posts. The server must enforce authorization for privileged flags and honor trigram/GIN indexes for search performance.","path":"/econPoliticalForum/threads/{threadId}/posts","method":"patch","summary":"Search and retrieve posts in a thread with pagination and filters (econ_political_forum_posts)","description":"Complex search endpoint for posts in a thread. Accepts a request payload with filters (authorId, parentId, search text, date range), pagination (cursor/limit or page/pageSize), and sort options (newest, oldest, most_voted). By default returns visible posts only. includeHidden/includeDeleted flags are honored only for moderator/administrator callers; unprivileged callers providing those flags SHALL receive 403. Validate threadId as UUID and return 404 if thread not found. Max pageSize = 100.\n\nErrors: 400 invalid payload or UUIDs, 401 authentication required for privileged flags, 403 attempting to access restricted content, 404 thread not found, 429 rate limit, 500 server error.","parameters":[{"name":"threadId","description":"Unique identifier (UUID) of the thread whose posts are being queried","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for retrieving posts within the thread","typeName":"IEconPoliticalForumPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries matching request criteria","typeName":"IPageIEconPoliticalForumPost"},"authorizationType":null,"authorizationRole":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Ensure the target thread exists by creating a thread resource (POST /econPoliticalForum/registeredUser/threads). The posts search endpoint requires a valid threadId; if the thread does not exist requests should return 404. This prerequisite guarantees the thread resource is present so post queries within that thread can succeed."}],"name":"index"},{"specification":"List and search posts (econ_political_forum_posts). This operation provides a paginated, filterable, and sortable listing of post records held in the econ_political_forum_posts Prisma model. It is intended to support thread views, search results, and moderation overviews. The operation uses canonical post fields from the Prisma schema (id, thread_id, author_id, parent_id, content, is_edited, edited_at, is_hidden, created_at, updated_at, deleted_at) and references associated entities (threads, authors) where needed. Note: vote aggregates and other derived metrics are not stored on the posts table; ordering by popularity relies on separate materialized views or aggregated data sources managed by the application.\n\nThis operation implements business rules drawn from the schema and requirements: public listings MUST exclude posts with a non-null deleted_at and typically exclude posts where is_hidden = true (unless the requester is a moderator/administrator). Filtering is provided to support thread-scoped lists (thread_id), replies (parent_id), author-scoped lists (author_id), full-text search on content, and date-range filters on created_at. Pagination supports cursor- or page-based patterns; the request DTO permits both but the default is page/limit. Sorting options include 'newest', 'oldest', and application-managed 'most_voted' (requires aggregated data source). Maximum page size and server-side rate-limits are enforced by business policy.\n\nSecurity considerations: this is primarily a public read operation. Responses must redact or omit posts that are hidden (is_hidden = true) or deleted (deleted_at NOT NULL) for ordinary clients; moderators and administrators may receive additional fields (is_hidden, deleted_at) and see results that include hidden or deleted items when their role is present. Sensitive fields and moderator-only flags are gated by role checks implemented in the service layer.\n\nValidation and business rules: default page size is 20, maximum allowed page size is 100. Search terms longer than 500 characters are rejected. When filtering by thread_id or parent_id, the server SHOULD validate the referenced thread/post exists and return 404 when the referenced scope is not found. Sorting by 'most_voted' is implemented using aggregated view data; when that data is unavailable the server falls back to 'newest'. Rate limiting for create/edit endpoints is recommended; for this read endpoint apply conservative request rate limits to protect search/index services.","path":"/econPoliticalForum/posts","method":"patch","summary":"Search and retrieve a paginated list of posts","description":"Retrieve a filtered and paginated list of posts from the econ_political_forum_posts table.\n\nThis operation supports full-text search on the post content (content), filtering by thread_id, parent_id (replies), author_id, and date ranges (created_at). Results exclude posts with deleted_at set and exclude moderator-hidden posts (is_hidden = true) for ordinary users. Sorting options include newest, oldest, and most_voted (application-provided aggregate). Pagination supports page/limit or cursor-based continuation; default page size is 20 and maximum page size is 100.\n\nSecurity and permissions: this endpoint is public for read operations. When a moderator or administrator calls the endpoint with proper authorization, additional properties (is_hidden, deleted_at) and hidden items may be returned for moderation purposes. The service layer must enforce role-based filtering and redact moderator-only fields for ordinary users.\n\nRelationship to database entities: Operates on the econ_political_forum_posts model as defined in the Prisma schema. Use the thread relation (thread_id) to implement category-scoped listings and the author relation (author_id) to implement author-scoped filters. For vote-based sorting, rely on a separate aggregated view or materialized data source since vote counters are intentionally not stored on the posts table.\n\nValidation and error handling: invalid UUID formats for thread_id/parent_id/author_id result in 400. Requests with page sizes above 100 result in 400. Long search queries (>500 chars) result in 400. If a referenced thread or parent post does not exist, return 404. Unexpected server errors return 500.","parameters":[],"requestBody":{"description":"Search criteria, filters, sort, and pagination parameters for posts","typeName":"IEconPoliticalForumPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries matching the search criteria","typeName":"IPageIEconPoliticalForumPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"A thread must exist when listing posts filtered by threadId. POST /econPoliticalForum/registeredUser/threads creates the required thread record and returns a threadId; if the thread does not exist the thread-scoped post query should return 404."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"A parent post must exist when listing replies filtered by parentId. POST /econPoliticalForum/registeredUser/posts creates the parent post (producing a postId to use as parentId); without it parent-scoped queries will fail with 404."}]},{"specification":"Retrieve a single post by id (econ_political_forum_posts). This operation returns the canonical post record for the given post id, including author and thread references and timestamps. It exposes fields present in the Prisma model: id, thread_id, author_id, parent_id, content, is_edited, edited_at, is_hidden, created_at, updated_at, and deleted_at. Revision history is stored separately in econ_political_forum_post_revisions and is available via a dedicated revisions endpoint.\n\nBusiness rules: ordinary users MUST not see posts that have deleted_at set or are hidden (is_hidden = true). Moderators and administrators may retrieve hidden or deleted posts for review; the service must enforce role checks and return moderator-visible fields only to authorized roles. If the requested post is deleted or hidden and the caller lacks moderator/admin role, the server returns 404 to avoid leaking removed content.\n\nSecurity considerations: this endpoint returns additional status flags to moderator/admin callers. It MUST not reveal moderation rationale or internal audit entries in the public response. To obtain moderation logs or revision history, callers must use dedicated moderator/admin endpoints (e.g., GET /moderation/logs, GET /posts/{postId}/revisions) with appropriate authorization.\n\nValidation: postId must be a valid UUID. If the post does not exist or is not visible to the caller, return 404. Unexpected errors return 500.","path":"/econPoliticalForum/posts/{postId}","method":"get","summary":"Retrieve a single post by its ID","description":"Return detailed information for a single post stored in econ_political_forum_posts.\n\nPurpose and overview: This operation fetches the full canonical post record referenced by id. The returned details include the content, author reference (author_id), parent relationship (parent_id) for replies, edit metadata (is_edited, edited_at), moderation flag (is_hidden), and timestamps (created_at, updated_at). Revision snapshots are maintained in econ_political_forum_post_revisions and are accessible through a separate endpoint.\n\nSecurity and authorization: For ordinary (public) callers, posts with deleted_at set or is_hidden = true are not returned and the endpoint responds with 404 to prevent leaking removed content. Moderators and administrators with appropriate authorizationRoles may see hidden or deleted posts and receive the is_hidden and deleted_at fields in the response; moderator-only rationale or audit content is available only via moderation endpoints and is not included here.\n\nRelationship to underlying schema: This operation maps directly to the econ_political_forum_posts model in the Prisma schema. It uses the author relation to surface minimal author metadata (public profile fields) and the thread relation to include context for where the post appears. For full revision history or moderation logs, the caller should use the post revisions and moderation log endpoints.\n\nValidation and error handling: postId must be a UUID. Return 400 for malformed IDs, 404 for non-existent or non-visible posts to the caller, and 500 for server errors.","parameters":[{"name":"postId","description":"Unique identifier of the target post (UUID)","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed post information including author and thread context","typeName":"IEconPoliticalForumPost"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post must exist before it can be retrieved. POST /econPoliticalForum/registeredUser/posts creates the post resource (providing the postId). If the post does not exist, GET /econPoliticalForum/posts/{postId} should return 404."}]},{"specification":"Create a new post in econ_political_forum_posts. Server MUST derive author identity from the authenticated principal; clients MUST NOT supply author_id. Required client inputs: thread_id (UUID) and content (string). parent_id is optional for replies. The service is responsible for enforcing nesting depth rules, category-level posting restrictions (category.requires_verification), rate limits for new accounts, and legal/moderation holds. Persist canonical fields present in the Prisma model (thread_id, author_id [server-set], parent_id, content, is_edited=false initially, edited_at=null, is_hidden default false). The operation triggers asynchronous side effects (enqueue notifications, index for search) and records an audit log entry in econ_political_forum_audit_logs. Validation: content length 10–50,000 chars; thread_id and parent_id must be valid UUIDs and exist; reply nesting depth enforcement performed in service layer. Errors: 400 for validation, 401 unauthenticated, 403 banned or lacking verified status for restricted categories, 409 parent integrity/nesting depth, 429 rate limit, 500 server error.","path":"/econPoliticalForum/registeredUser/posts","method":"post","summary":"Create a new post (thread root or reply)","description":"Create a new post that becomes part of an existing thread. Clients supply thread_id and content; parent_id is optional for replies. The server sets author_id from the authenticated session — clients MUST NOT provide or override author_id. Service layer responsibilities: validate content length (10–50,000 characters), enforce reply nesting depth (default up to 3 levels), verify posting privileges (e.g., email_verified when category.requires_verification is true), and check rate limits. If the thread's category is moderated, the created post may initially be in a pending state or hidden until moderator approval; this behavior is controlled by moderator workflows and the post record's visibility flags (e.g., is_hidden) and NOT by client-supplied fields.\n\nSide effects: enqueue notifications for followers/mentions, add search indexing job, create audit log entry in econ_political_forum_audit_logs. The API returns the created post record (fields per econ_political_forum_posts) but MUST not expose moderator-only internal notes.","parameters":[],"requestBody":{"description":"Post creation payload: required thread_id (UUID) and content (string). parent_id optional for replies. NOTE: Do NOT provide author_id; server will assign author_id from authenticated user. See IEconPoliticalForumPost.ICreate for field definitions.","typeName":"IEconPoliticalForumPost.ICreate"},"responseBody":{"description":"Created post record reflecting the stored econ_political_forum_posts row. The returned author_id is the authenticated user's id. Moderator-only fields (internal rationale) are excluded for ordinary callers.","typeName":"IEconPoliticalForumPost"},"authorizationType":null,"authorizationRole":"registeredUser","name":"create","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"A thread must exist before creating a post in it. The POST /econPoliticalForum/registeredUser/threads operation creates a thread record and returns its thread_id; creating a post requires a valid existing thread_id and will fail if the referenced thread does not exist."}]},{"specification":"Update an existing post in econ_political_forum_posts. Only the post author may update their content via this endpoint within the configured edit window (default 24 hours). The server MUST derive the actor identity from the authenticated session and MUST NOT accept author_id in the payload. This operation updates content, sets is_edited=true, and records edited_at. If the post is under active moderation or legal hold, the API should reject the edit with 423 Locked (or documented alternative). The service MUST create an append-only revision record in econ_political_forum_post_revisions capturing prior content, editor id (server-derived), and timestamp, and record the edit in econ_political_forum_audit_logs.","path":"/econPoliticalForum/registeredUser/posts/{postId}","method":"put","summary":"Update an existing post by postId","description":"Update the content of an existing post. Only the original author may edit via this endpoint and only within the allowed edit window (default 24 hours). The server must verify the post exists and is not soft-deleted (deleted_at is null). If an active moderation case or legal hold applies, the edit MUST be denied. On successful edit the system sets is_edited=true and edited_at to the update timestamp and appends a revision to econ_political_forum_post_revisions for auditability. Moderation and administrator edits must be performed via dedicated moderation endpoints and recorded in moderation logs.\n\nErrors: 400 validation errors, 401 unauthenticated, 403 ownership or outside edit window or author banned, 404 not found, 423 locked for moderation/hold, 429 rate limit, 500 server error.","parameters":[{"name":"postId","in":"path","description":"Unique identifier (UUID) of the target post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post update payload. See IEconPoliticalForumPost.IUpdate for fields. Note: author_id is not accepted; server derives editor id from authenticated principal. Authors may update content only; moderation adjustments use moderation APIs.","typeName":"IEconPoliticalForumPost.IUpdate"},"responseBody":{"description":"Updated post record reflecting the new content and edit metadata.","typeName":"IEconPoliticalForumPost"},"authorizationType":null,"authorizationRole":"registeredUser","name":"update","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post must exist before it can be updated. The POST /econPoliticalForum/registeredUser/posts operation creates the initial post record and returns its id; the PUT update operation requires that postId reference an existing (and not soft-deleted) post, so creating the post first is a necessary prerequisite."}]},{"specification":"Soft-delete (archive) of a post record in the econ_political_forum_posts table. Marks deleted_at, enforces ownership/moderation/admin rules, checks for legal holds, and records audit and moderation logs as required.","path":"/econPoliticalForum/registeredUser/posts/{postId}","method":"delete","summary":"Remove (soft-delete) a post by ID (econ_political_forum_posts)","description":"Purpose and overview:\nThis endpoint performs a soft-delete of a post by setting econ_political_forum_posts.deleted_at. It preserves the row for audit and legal retention while removing the post from normal public listings. Revision history (econ_political_forum_post_revisions), votes, and bookmarks remain archived and accessible to authorized actors.\n\nSecurity considerations and user permissions:\nPrimary caller: registeredUser (post owner). Moderators and administrators may also perform deletions where policy allows; the service layer must authorize and record elevated actions. Before performing deletion the service MUST verify no active legal hold applies (econ_political_forum_legal_holds.is_active) and must create an immutable audit record in econ_political_forum_audit_logs. If a moderator or admin performs the action, a moderation log (econ_political_forum_moderation_logs) must be created with action_type, reason_code, and rationale.\n\nValidation and business logic:\n- Path parameter postId must be a valid UUID corresponding to an existing post.\n- If the caller is the author, allow soft-delete within policy constraints; moderators/admins may override subject to logging and escalation rules.\n- If the post has child replies, public view replaces the top-level content with a standardized placeholder and preserves replies unless moderators take additional actions.\n- If an active legal hold exists, return 423 Locked and record the attempt in audit logs.\n\nResponses:\n- 204 No Content — successful soft-delete\n- 404 Not Found — post not found\n- 403 Forbidden — caller unauthorized to delete\n- 423 Locked — active legal hold prevents deletion (include case id if available)","parameters":[{"name":"postId","in":"path","description":"Target post's ID (econ_political_forum_posts.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"registeredUser","name":"erase","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post must exist before it can be soft-deleted. POST /econPoliticalForum/registeredUser/posts creates a new post and returns its generated id (postId). The delete operation requires that postId to reference an existing post; if the post does not exist the delete will return 404 Not Found. This prerequisite ensures a valid post record is present for deletion."}]},{"specification":"Moderator-scoped soft-delete of a post. Marks deleted_at, enforces moderator privileges, checks legal holds, records audit and moderation logs.","path":"/econPoliticalForum/moderator/posts/{postId}","method":"delete","summary":"Moderator: Soft-delete a post by ID (econ_political_forum_posts)","description":"Purpose and overview:\nAllows moderators to soft-delete posts by setting econ_political_forum_posts.deleted_at. Moderator actions MUST be recorded in econ_political_forum_moderation_logs with action_type, reason_code, and a short rationale. The service MUST check econ_political_forum_legal_holds and prohibit deletion when an active hold exists, returning 423 Locked and recording the attempt in audit logs.\n\nSecurity and auditing:\n- Only active moderators (and administrators) should be permitted to call this endpoint. All moderator actions must be auditable via econ_political_forum_audit_logs and econ_political_forum_moderation_logs.\n\nResponses:\n- 204 No Content on success\n- 403 Forbidden if caller lacks moderator privileges\n- 423 Locked if legal hold prevents deletion\n- 404 Not Found if post does not exist","parameters":[{"name":"postId","in":"path","description":"Target post's ID (econ_political_forum_posts.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post must exist before a moderator can soft-delete it. Use POST /econPoliticalForum/registeredUser/posts to create the post and obtain its id (postId). The moderator delete operation requires that the referenced postId exists; if it does not, deletion will result in 404 Not Found. This prerequisite guarantees a valid post resource for moderator deletion workflows and provides the postId used by the moderator endpoint."}]},{"specification":"Administrator-scoped soft-delete of a post. Marks deleted_at, enforces administrator privileges, checks legal holds, records audit and moderation logs.","path":"/econPoliticalForum/administrator/posts/{postId}","method":"delete","summary":"Administrator: Soft-delete a post by ID (econ_political_forum_posts)","description":"Purpose and overview:\nAllows administrators to soft-delete posts by setting econ_political_forum_posts.deleted_at. Administrator actions MUST be recorded in econ_political_forum_audit_logs and moderation logs where applicable. The service MUST check for active legal holds (econ_political_forum_legal_holds) and preserve evidence when holds exist; return 423 Locked and record the attempt.\n\nSecurity and auditing:\n- Only administrators may call this endpoint. All actions must be logged and retained per retention policy.\n\nResponses:\n- 204 No Content on success\n- 403 Forbidden if caller lacks administrator privileges\n- 423 Locked if legal hold prevents deletion\n- 404 Not Found if post does not exist","parameters":[{"name":"postId","in":"path","description":"Target post's ID (econ_political_forum_posts.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post (postId) must exist before an administrator can soft-delete it. Create the post using POST /econPoliticalForum/registeredUser/posts to obtain a valid postId. If this prerequisite is not satisfied (post does not exist), the delete will fail with 404; if a legal hold exists the delete may be rejected with 423."}]},{"specification":"List and filter post revision snapshots (econ_political_forum_post_revisions). Returns paginated revision summaries for a post with optional filters (date range, editor_id) and sorting. Supports excerpt vs full snapshot behavior depending on caller privileges.","path":"/econPoliticalForum/registeredUser/posts/{postId}/revisions","method":"patch","summary":"List and filter post revision snapshots (econ_political_forum_post_revisions)","description":"Purpose and overview:\nReturns a paginated list of revision snapshots for the specified post (fields: id, post_id, editor_id, content, note, created_at). The table is append-only and intended for author review and appeals. By default the server may return content excerpts; full snapshots are returned only to authorized callers or when explicitly requested.\n\nSecurity and permissions:\n- Post authors may view their own revisions (with redaction rules applied as needed).\n- Moderators and administrators may view all revisions and editor metadata; such accesses must be audited.\n\nRequest and filters:\n- Supports pagination via cursor or page/limit with defaults (e.g., default pageSize=20, max=200).\n- Optional filters: from (ISO datetime), to (ISO datetime), editor_id (UUID).\n- Sort: created_at asc|desc.\n\nResponses:\n- 200 OK with paginated payload (IPageIEconPoliticalForumPostRevision)\n- 400 Bad Request for invalid filters\n- 403 Forbidden for unauthorized access\n- 404 Not Found if postId is unknown","parameters":[{"name":"postId","in":"path","description":"Identifier of the post whose revisions are being queried (econ_political_forum_posts.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting and pagination parameters for post revisions","typeName":"IEconPoliticalForumPostRevision.IRequest"},"responseBody":{"description":"Paginated list of post revision snapshots","typeName":"IPageIEconPoliticalForumPostRevision"},"authorizationType":null,"authorizationRole":"registeredUser","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The post (postId) must exist to list its revision snapshots. Create the post using POST /econPoliticalForum/registeredUser/posts so that revisions can be associated with an existing post. If the post does not exist the revisions listing will return 404."}]},{"specification":"List and filter post revision snapshots for moderator use (econ_political_forum_post_revisions). Returns paginated revision snapshots with editor metadata and full content for triage; all accesses must be audited.","path":"/econPoliticalForum/moderator/posts/{postId}/revisions","method":"patch","summary":"Moderator: List and filter post revision snapshots","description":"Purpose and overview:\nProvides moderators with paginated access to full revision snapshots (id, post_id, editor_id, content, note, created_at) and supports filtering by date range and editor_id. Moderator accesses must be recorded in audit logs.\n\nRequest and filters:\n- Pagination (cursor or page/limit), default pageSize=20, max=200.\n- Optional filters: from, to, editor_id.\n- Sort by created_at.\n\nResponses:\n- 200 OK with IPageIEconPoliticalForumPostRevision\n- 400 Bad Request for invalid parameters\n- 403 Forbidden for non-moderator callers\n- 404 Not Found if postId invalid","parameters":[{"name":"postId","in":"path","description":"Identifier of the post whose revisions are being queried (econ_political_forum_posts.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting and pagination parameters for post revisions","typeName":"IEconPoliticalForumPostRevision.IRequest"},"responseBody":{"description":"Paginated list of post revision snapshots","typeName":"IPageIEconPoliticalForumPostRevision"},"authorizationType":null,"authorizationRole":"moderator","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The post referenced by {postId} must exist before its revisions can be listed. Create the post (POST /econPoliticalForum/registeredUser/posts) to produce a valid postId. If this prerequisite fails (post not created or invalid), the revisions endpoint will return 404 Not Found or no results."}]},{"specification":"List and filter post revision snapshots for administrator use (econ_political_forum_post_revisions). Returns paginated revision snapshots with full content and editor metadata for legal and operational reviews; accesses must be audited.","path":"/econPoliticalForum/administrator/posts/{postId}/revisions","method":"patch","summary":"Administrator: List and filter post revision snapshots","description":"Purpose and overview:\nProvides administrators with paginated access to full revision snapshots and related metadata for legal and operational reviews. All accesses must be recorded in econ_political_forum_audit_logs.\n\nRequest and filters:\n- Pagination (cursor or page/limit), default pageSize=20, max=200.\n- Optional filters: from, to, editor_id.\n- Sort by created_at.\n\nResponses:\n- 200 OK with IPageIEconPoliticalForumPostRevision\n- 400 Bad Request for invalid parameters\n- 403 Forbidden for unauthorized callers\n- 404 Not Found if postId invalid","parameters":[{"name":"postId","in":"path","description":"Identifier of the post whose revisions are being queried (econ_political_forum_posts.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting and pagination parameters for post revisions","typeName":"IEconPoliticalForumPostRevision.IRequest"},"responseBody":{"description":"Paginated list of post revision snapshots","typeName":"IPageIEconPoliticalForumPostRevision"},"authorizationType":null,"authorizationRole":"administrator","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The post referenced by {postId} must exist before its revisions can be listed. Create the post (POST /econPoliticalForum/registeredUser/posts) to produce a valid postId. If this prerequisite fails (post not created or invalid), the revisions endpoint will return 404 Not Found or no results."}]},{"specification":"Retrieve a single post revision snapshot from the Prisma table econ_political_forum_post_revisions. Validates that the revision belongs to the specified post and enforces access rules (post author only for this endpoint). Returns canonical revision fields (id, post_id, editor_id, content, note, created_at).","path":"/econPoliticalForum/registeredUser/posts/{postId}/revisions/{revisionId}","method":"get","summary":"Retrieve a single post revision","description":"Purpose and overview:\n\nRetrieve a specific post revision (historical snapshot) produced by the post revision audit system. Each revision row contains the full post content at the time of the revision, optional editor id, and created_at timestamp as stored in the Prisma table `econ_political_forum_post_revisions`.\n\nSecurity considerations and permissions:\n\nAccess to revision snapshots is restricted. This role-specific endpoint is intended for the registering user (owner) workflow: the caller must be authenticated as the post author and ownership must be verified server-side. Moderators and administrators must use their respective endpoints. Unauthorized calls must return 401/403 as appropriate. All accesses should be logged in audit records when applicable.\n\nValidation rules and business logic:\n\n- Validate `postId` and `revisionId` are valid UUIDs.\n- Confirm the revision belongs to the specified post (revision.post_id == postId).\n- Enforce access control: only the post author may retrieve this endpoint; moderators/administrators use their endpoints.\n- If the revision or post is not found, return 404. If found but unauthorized, return 403.\n\nErrors: 400 for invalid parameters, 401 for unauthenticated, 403 for unauthorized, 404 for not found, 500 for server errors.","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the parent post that the revision belongs to","schema":{"type":"string","format":"uuid"}},{"name":"revisionId","description":"Unique identifier (UUID) of the revision snapshot to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single post revision snapshot containing post content at a point in time","typeName":"IEconPoliticalForumPostRevision"},"authorizationType":null,"authorizationRole":"registeredUser","name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"A post must exist before its revisions can be retrieved. Create the parent post (POST /econPoliticalForum/registeredUser/posts) to obtain a valid postId; revision snapshots are generated from post creation and subsequent edits. If the post does not exist, attempting to retrieve a revision will return 404."}]},{"specification":"Retrieve a single post revision snapshot from the Prisma table econ_political_forum_post_revisions for moderator review. Returns revision fields (id, post_id, editor_id, content, note, created_at). Access limited to active moderators and recorded in audit logs.","path":"/econPoliticalForum/moderator/posts/{postId}/revisions/{revisionId}","method":"get","summary":"Retrieve a single post revision (moderator)","description":"Purpose and overview:\n\nRetrieve a specific post revision for moderator review. Each revision row contains the full post content at the time of the revision, optional editor id, and created_at timestamp as stored in `econ_political_forum_post_revisions`.\n\nSecurity considerations and permissions:\n\nOnly authenticated moderators may use this endpoint. All moderator accesses MUST be recorded in the moderation/audit logs (econ_political_forum_audit_logs) with actor id and brief rationale.\n\nValidation rules and business logic:\n\n- Validate `postId` and `revisionId` are UUIDs.\n- Confirm the revision belongs to the specified post.\n- Enforce that the caller has an active moderator role and is authorized to view the revision.\n- Return 404 if not found, 403 if not authorized.\n\nErrors: 400/401/403/404/500 as appropriate.","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the parent post that the revision belongs to","schema":{"type":"string","format":"uuid"}},{"name":"revisionId","description":"Unique identifier (UUID) of the revision snapshot to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single post revision snapshot for moderator review","typeName":"IEconPoliticalForumPostRevision"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"A post must exist before a moderator can review its revisions. Ensure the parent post is created (POST /econPoliticalForum/registeredUser/posts) so that postId is valid; revisions are produced when posts are created/edited and are required for moderator review. If the post is missing, revision retrieval will fail with 404."}]},{"specification":"Retrieve a single post revision snapshot from the Prisma table econ_political_forum_post_revisions for administrator review. Returns canonical revision fields. Administrative access must be recorded in audit logs and follow escalation rules for sensitive cases.","path":"/econPoliticalForum/administrator/posts/{postId}/revisions/{revisionId}","method":"get","summary":"Retrieve a single post revision (administrator)","description":"Purpose and overview:\n\nRetrieve a specific post revision for administrative review. Each revision row contains the full post content at the time of the revision, optional editor id, and created_at timestamp as stored in `econ_political_forum_post_revisions`.\n\nSecurity considerations and permissions:\n\nOnly authenticated administrators may use this endpoint. Administrative access MUST be logged in econ_political_forum_audit_logs with actor id, action_type, and target identifiers. For legal or escalated cases follow the moderation case workflow.\n\nValidation rules and business logic:\n\n- Validate `postId` and `revisionId` are UUIDs.\n- Confirm the revision belongs to the specified post.\n- Enforce administrator authorization and log the access.\n- Return 404 if not found, 403 if not authorized.\n\nErrors: 400/401/403/404/500 as appropriate.","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the parent post that the revision belongs to","schema":{"type":"string","format":"uuid"}},{"name":"revisionId","description":"Unique identifier (UUID) of the revision snapshot to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single post revision snapshot for administrator review","typeName":"IEconPoliticalForumPostRevision"},"authorizationType":null,"authorizationRole":"administrator","name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The post must exist before its revision snapshots can be retrieved. POST /econPoliticalForum/registeredUser/posts creates the post resource and returns a postId; if the post does not exist the revision retrieval will return 404. This prerequisite ensures the parent post record (postId) is present and valid."}]},{"specification":"Create or update a vote for a post in the Prisma table econ_political_forum_votes. Enforces one active vote per user per post and prevents self-voting. Supports updating an existing vote (change value) and should be implemented idempotently (Idempotency-Key recommended).","path":"/econPoliticalForum/registeredUser/posts/{postId}/votes","method":"post","summary":"Cast or change a vote on a post","description":"Purpose and overview:\n\nAllow an authenticated registered user to cast or change a vote on a post. Votes are persisted in `econ_political_forum_votes` and are used by ranking and signal systems. The endpoint creates a new vote or updates an existing vote for the (registereduser_id, post_id) pair.\n\nSecurity considerations and permissions:\n\nOnly authenticated registered users may call this endpoint. The server must verify the caller's identity, ensure the referenced post exists, and prevent self-voting (return 403 if user is the post author). Moderator/admin users acting as registered users must follow internal rules.\n\nValidation rules and business logic:\n\n- Validate `postId` is a UUID and that the referenced post exists and is not deleted.\n- Request body must include an allowed `value` (integer 1 or -1).\n- Enforce the unique constraint on (registereduser_id, post_id): on conflict update `value` and `updated_at`.\n- Support idempotent retries (recommend Idempotency-Key header). Repeated identical requests should not create duplicates.\n- Respect rate limits to prevent vote abuse and integrate with abuse detection to flag anomalies.\n\nErrors: 400 for invalid input, 401 for unauthenticated, 403 for self-vote, 404 if post not found, 409 for unrecoverable concurrency conflict (or return 200 with resolved result), 500 for server errors.","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the post to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote creation payload. Must include the numeric vote value (1 for upvote, -1 for downvote).","typeName":"IEconPoliticalForumVote.ICreate"},"responseBody":{"description":"Created or updated vote record reflecting the user's current vote on the post","typeName":"IEconPoliticalForumVote"},"authorizationType":null,"authorizationRole":"registeredUser","name":"create","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post must be created before a vote can be cast. POST /econPoliticalForum/registeredUser/posts creates the referenced post (providing the postId required by the voting endpoint); if the post is missing the vote operation will fail with 404. This prerequisite verifies post existence and provides the postId for voting."}]},{"specification":"Operation to update an existing vote on a post, operating on the Interactions table `econ_political_forum_votes` from the Prisma schema. This endpoint updates the vote's value and updated_at timestamp. It enforces the one-vote-per-user-per-post rule defined by the unique constraint on (registereduser_id, post_id), validates allowed vote values (1 for upvote, -1 for downvote), and preserves soft-delete semantics via the `deleted_at` column when applicable. The operation verifies caller ownership (only the vote owner may update their vote) and respects moderator/administrator override policies implemented in business logic. The operation touches related entities: `econ_political_forum_posts` (post_id) and `econ_political_forum_registereduser` (registereduser_id).","path":"/econPoliticalForum/registeredUser/posts/{postId}/votes/{voteId}","method":"put","summary":"Update an existing vote on a post (econ_political_forum_votes)","description":"Purpose and overview:\n\nThis operation updates an existing vote record for a post. It operates on the econ_political_forum_votes table from the Prisma schema and updates the vote's value and updated_at timestamp. The votes model enforces a unique constraint on (registereduser_id, post_id) to ensure one vote per user per post. Valid vote values are application-defined integers where 1 = upvote and -1 = downvote; the API rejects values outside the allowed set.\n\nSecurity and permissions:\n\nOnly authenticated users may call this endpoint. In normal flows, the caller must be the vote owner (the registered user who created the vote). Business logic should verify ownership before applying updates. Moderators and administrators may have separate override flows in the moderation APIs; this endpoint is intended for the vote owner to change their vote. The endpoint requires a bearer token from a registeredUser account.\n\nRelationship to database entities:\n\nThis operation updates fields on the econ_political_forum_votes model: value (Int), updated_at (DateTime) and preserves deleted_at (DateTime?) semantics. It also references the target post via post_id (econ_political_forum_posts.id) and the owning registered user via registereduser_id (econ_political_forum_registereduser.id). Implementations should validate that the referenced post exists and is not permanently removed; if the post is under legal_hold or moderation hold (econ_political_forum_legal_holds), the operation may be blocked per business rules.\n\nValidation and business rules:\n\n- Request must specify a valid UUID for postId and voteId.\n- The vote update payload must supply a value of 1 or -1 only; other integers are rejected with 400.\n- The vote must be active (deleted_at is null). If the vote record is soft-deleted, the API should return 404 or a specific error indicating the vote is no longer active.\n- Enforce idempotency on repeated identical updates: repeated requests setting the same value should return the canonical current vote representation without creating duplicates.\n- Concurrency: update operations should atomically update the value and updated_at and record an audit entry (via audit logs) to preserve history.\n\nRelated operations and error handling:\n\nRelated APIs include creating a vote (POST /posts/{postId}/votes), deleting a vote (DELETE /posts/{postId}/votes/{voteId}), and moderator/admin endpoints that may invalidate votes. Expected error responses include 400 for validation errors (invalid value), 401 for unauthenticated requests, 403 if the caller is not the vote owner, 404 if the post or vote does not exist or is soft-deleted, 409 for concurrency conflicts, 429 for rate limits, and 500 for unexpected server errors. The response includes the updated vote representation on success.\n\nResponse shape guidance: This operation should return only the canonical vote fields: id, post_id, value, created_at, updated_at, deleted_at.","parameters":[{"name":"postId","description":"UUID of the target post (econ_political_forum_posts.id) the vote belongs to","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"voteId","description":"UUID of the vote record to update (econ_political_forum_votes.id)","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Vote update payload. Must include the new vote value (1 or -1). Type: IEconPoliticalForumVote.IUpdate","typeName":"IEconPoliticalForumVote.IUpdate"},"responseBody":{"description":"Updated vote record representation (id, post_id, value, created_at, updated_at, deleted_at)","typeName":"IEconPoliticalForumVote"},"authorizationType":null,"authorizationRole":"registeredUser","name":"update","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post must exist before any votes can reference it. Create the post using POST /econPoliticalForum/registeredUser/posts to obtain the {postId} required by the vote update operation; if the post does not exist the vote update cannot succeed."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts/{postId}/votes","method":"post"},"description":"The vote record must exist before it can be updated. Create the vote using POST /econPoliticalForum/registeredUser/posts/{postId}/votes to obtain the {voteId} (and ensure the (registereduser_id, post_id) pair exists); the update operation requires that vote id."}]},{"specification":"Operation to remove (soft-delete) an existing vote record from the Interactions table `econ_political_forum_votes`. Because the Prisma model includes a `deleted_at` column, this endpoint implements soft-delete semantics by setting `deleted_at` to the current timestamp rather than permanently removing the row. The operation must enforce ownership (only the vote owner should delete their vote) and maintain audit logs (econ_political_forum_audit_logs) and any moderation constraints (legal holds) before allowing deletion.","path":"/econPoliticalForum/registeredUser/posts/{postId}/votes/{voteId}","method":"delete","summary":"Remove (soft-delete) a vote on a post (econ_political_forum_votes)","description":"Purpose and overview:\n\nThis operation removes a vote by applying a soft-delete to the econ_political_forum_votes record by setting deleted_at. The Prisma schema for votes includes deleted_at (DateTime?) and therefore the API follows soft-delete behavior so the system can retain an immutable record for audit and abuse analysis while excluding the vote from public score calculations.\n\nSecurity and permissions:\n\nOnly authenticated registered users may call this endpoint. Typical callers are the vote owner who wants to retract their vote. Business logic must verify that the caller is the owner of the vote (registereduser_id matches caller) before performing the soft-delete. Moderators and administrators may have separate moderator APIs to remove or invalidate votes at scale.\n\nRelationship to underlying entities and effects:\n\nSoft-deleting a vote must update the vote's deleted_at timestamp and may trigger recalculation or adjustment of public vote aggregates (handled by materialized views or background jobs). The operation references econ_political_forum_posts (post_id) and econ_political_forum_registereduser (registereduser_id); it should validate that the referenced post exists and is not subject to a legal_hold that prevents modification.\n\nValidation and business logic:\n\n- Path parameters postId and voteId must be valid UUIDs.\n- If the vote record is already soft-deleted, the endpoint should return 204 No Content (idempotent delete) or 404 depending on policy; recommended behavior: 204 for idempotency.\n- If the caller is not the vote owner, return 403 Forbidden.\n- If a legal hold (econ_political_forum_legal_holds) prevents deletion of the target vote or associated post, the API must deny the deletion and surface a clear error indicating a legal hold (423 Locked or 409 Conflict as implementation choice).\n\nAudit, transparency, and error handling:\n\nThe operation must record an audit log entry describing the deletion (via econ_political_forum_audit_logs) including acting user id, target vote id, target post id, action_type='delete_vote' (or similar), and a brief rationale. Expected error responses include 400 for invalid parameters, 401 for unauthenticated requests, 403 for insufficient permissions, 404 for not found (if preferred), 423 or 409 for legal hold/conflict, 429 for rate limits, and 500 for unexpected server errors. Successful response should be 204 No Content.","parameters":[{"name":"postId","description":"UUID of the target post (econ_political_forum_posts.id) the vote belongs to","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"voteId","description":"UUID of the vote record to remove (econ_political_forum_votes.id)","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"registeredUser","name":"erase","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post must exist before any votes referencing it can be removed. Create the post via POST /econPoliticalForum/registeredUser/posts to obtain the {postId}; deletion of a vote referencing a non-existent post is invalid."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts/{postId}/votes","method":"post"},"description":"The vote record must exist before it can be soft-deleted. Create the vote via POST /econPoliticalForum/registeredUser/posts/{postId}/votes to obtain the {voteId} that the delete operation will soft-delete; ensures the vote is active and associated with the post."}]},{"specification":"List and search saved bookmarks for the authenticated registered user. This operation is implemented against the Prisma model `econ_political_forum_bookmarks` and returns paginated bookmark summaries. It supports filtering by post_id, thread_id, date ranges, includeDeleted flag, and sorting. The operation reads only fields defined on the `econ_political_forum_bookmarks` table (id, registereduser_id, post_id, created_at, updated_at, deleted_at). The service must enforce ownership (only return bookmarks for the authenticated registered user), respect soft-delete semantics (deleted_at) and legal holds, and validate and sanitize all query parameters to prevent injection risks.","path":"/econPoliticalForum/registeredUser/bookmarks","method":"patch","summary":"Search and retrieve a paginated list of the user's bookmarks (econ_political_forum_bookmarks)","description":"Retrieve a paginated, filterable list of bookmark summaries for the requesting registered user.\n\nPurpose and overview: This operation allows an authenticated registered user to search and list their saved bookmarks. It queries the `econ_political_forum_bookmarks` table and returns summary items suitable for list displays. Only fields present on the bookmark model are used by the service logic. The response is a paginated summary view optimized for feeds and bookmark management.\n\nSecurity and permissions: Access requires an authenticated account with the registeredUser role. The endpoint returns only bookmarks that belong to the requesting user (registereduser_id). The server must verify ownership and deny access to other users' bookmarks. Records subject to legal holds must be preserved by backend retention logic and not purged while under hold.\n\nFiltering, pagination, and sorting: The request body supports cursor or page/limit pagination (client may pass page/limit or cursor), filters by post_id or thread_id, created_at date ranges, includeDeleted (boolean), and sort options (created_at desc by default). The server must enforce default page size and maximum page size limits and must sanitize and validate all filters.\n\nBusiness rules and error handling: Only bookmark records owned by the requester will be returned. If the user has no bookmarks, an empty paginated data set is returned. Validation errors return 400 with structured error details. Unauthenticated requests return 401. Rate limits apply to this endpoint to prevent abuse.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for bookmark listing (page/cursor, pageSize, filters: postId, threadId, createdFrom, createdTo, includeDeleted, sort).","typeName":"IEconPoliticalForumBookmark.IRequest"},"responseBody":{"description":"Paginated summary list of bookmarks owned by the requesting registered user.","typeName":"IPageIEconPoliticalForumBookmark.ISummary"},"authorizationType":null,"authorizationRole":"registeredUser","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Create the referenced thread resource before listing or filtering bookmarks by threadId. If the thread does not exist, filtering by that threadId cannot return bookmark records and related queries will fail or return empty results."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"Create the referenced post resource before listing or filtering bookmarks by postId. If the post does not exist, filtering by that postId will fail or return no bookmark records."}]},{"specification":"Retrieve a single bookmark record by its identifier from the Prisma model `econ_political_forum_bookmarks`. The operation returns the detailed bookmark entity for the requesting registered user and enforces ownership and soft-delete semantics. Soft-deleted records (deleted_at not null) are excluded by default; privileged clients (moderator/admin) may request archived visibility when explicitly allowed and audited.","path":"/econPoliticalForum/registeredUser/bookmarks/{bookmarkId}","method":"get","summary":"Retrieve a single bookmark by id from econ_political_forum_bookmarks","description":"Get detailed information for a single bookmark.\n\nPurpose and overview: Returns the full bookmark record representing a saved post for the authenticated user. The underlying Prisma table is `econ_political_forum_bookmarks`; the operation returns fields defined on that model and does not invent additional properties.\n\nSecurity and permissions: Access requires an authenticated registeredUser. The operation must verify that the bookmark's registereduser_id matches the requesting user's id. If the bookmark does not belong to the requester, return 403 Forbidden. If the bookmark cannot be found (no active record with that id or it is soft-deleted and not visible per requester's permissions), return 404 Not Found.\n\nSoft-delete and legal hold behavior: The model includes deleted_at; by default the endpoint returns only active (deleted_at is null) bookmark records. If privileged visibility is requested, server must verify the caller's role and audit the access. Legal holds preventing deletion must be enforced by backend retention logic and not bypassed by this endpoint.\n\nValidation and error handling: The path parameter bookmarkId must be a UUID. Invalid format returns 400. Unauthenticated requests return 401. Unauthorized access returns 403. Internal errors return 500 with a structured envelope.","parameters":[{"name":"bookmarkId","description":"Unique identifier (UUID) of the target bookmark","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed bookmark information as stored in econ_political_forum_bookmarks","typeName":"IEconPoliticalForumBookmark"},"authorizationType":null,"authorizationRole":"registeredUser","name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/bookmarks","method":"post"},"description":"Create the bookmark resource before attempting to retrieve it by bookmarkId. If the bookmark does not exist, the retrieval will return 404 Not Found; creating the bookmark ensures the identifier refers to an existing record."}]},{"specification":"Create a bookmark record in the econ_political_forum_bookmarks table linking the authenticated registered user to a target post. The operation enforces the database composite unique constraint (registereduser_id + post_id) and respects soft-delete semantics (deleted_at). The server MUST derive the registereduser_id from the authenticated session and MUST validate the target post exists and is visible to the caller. On unique conflict the service MAY restore a soft-deleted bookmark or return 409; this behavior must be documented.","path":"/econPoliticalForum/registeredUser/bookmarks","method":"post","summary":"Create a bookmark for the authenticated user","description":"Creates a new bookmark linking the authenticated registered user to an existing post.\n\nPurpose and overview: This operation persists a record in the econ_political_forum_bookmarks table. Relevant model fields: id, registereduser_id, post_id, created_at, updated_at, deleted_at. The API accepts the target post identifier in the request body; the server derives registereduser_id from the authenticated session and does not trust a client-supplied owner id.\n\nSecurity and permissions: Only authenticated users with the registeredUser role may call this endpoint. The server must verify the caller is not banned or suspended and must validate that the target post (econ_political_forum_posts) exists and is visible to the caller. Unauthenticated requests must receive 401.\n\nValidation and expected behavior: Request must include a valid postId (UUID). Responses: 201 Created with the created bookmark record on success; 400 for invalid input; 404 if target post not found or inaccessible; 409 Conflict if a non-restorable duplicate exists; 429 when rate limits apply. Implementers SHOULD consider idempotency handling to avoid duplicate creations from retries.","parameters":[],"requestBody":{"description":"Bookmark creation payload. The server uses the authenticated user as the bookmark owner; clients must supply the target post id only.","typeName":"IEconPoliticalForumBookmark.ICreate"},"responseBody":{"description":"Created bookmark record referencing the authenticated user and the target post.","typeName":"IEconPoliticalForumBookmark"},"authorizationType":null,"authorizationRole":"registeredUser","name":"create","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post must exist before creating a bookmark. POST /econPoliticalForum/registeredUser/posts creates a post and returns its id (post_id) that bookmarks reference. If the post does not exist or is inaccessible, creating a bookmark will fail (404 or permission error). This prerequisite ensures a valid post_id is available for the bookmark creation."}]},{"specification":"Soft-delete a bookmark owned by the authenticated registered user by setting deleted_at in the econ_political_forum_bookmarks table. The server MUST verify ownership and ensure no active legal_hold prevents deletion. This operation is scoped to the calling user; administrative removals should use separate admin endpoints.","path":"/econPoliticalForum/registeredUser/bookmarks/{bookmarkId}","method":"delete","summary":"Remove (soft-delete) a bookmark owned by the caller","description":"Marks the specified bookmark as deleted by setting deleted_at to the current timestamp so it is hidden from normal listings while preserving an archived copy for audit and potential restore.\n\nPurpose and overview: Operates on econ_political_forum_bookmarks (id, registereduser_id, post_id, created_at, updated_at, deleted_at). The server MUST verify the requesting registeredUser is the owner of the bookmark. If the caller is not the owner, respond 403 Forbidden. If the bookmark is not found or already deleted, respond 404.\n\nSecurity and user permissions: Only authenticated registeredUser callers may remove their own bookmarks via this endpoint. Administrators must use admin-scoped APIs for global removals. If a legal hold applies to the related content, deletion must be blocked until the hold is cleared.\n\nValidation and expected behavior: Path parameter bookmarkId must be a UUID. On successful soft-delete return 204 No Content. Errors: 400 for invalid id format, 401 for unauthenticated, 403 for ownership failure, 404 if not found/already deleted, 429 for rate limits, 500 for server errors.","parameters":[{"name":"bookmarkId","description":"Unique identifier of the bookmark to remove (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"registeredUser","name":"erase","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/bookmarks","method":"post"},"description":"The bookmark must exist before it can be soft-deleted. POST /econPoliticalForum/registeredUser/bookmarks creates the bookmark record (providing a bookmark id) that the DELETE endpoint operates on. If the bookmark does not exist, the delete operation would return 404; this prerequisite ensures a bookmark record (and its canonical id) is present prior to deletion."}]},{"specification":"Retrieve, search, and paginate bookmark records associated with a specific registered user. This operation reads from the Prisma model `econ_political_forum_bookmarks` (fields: id, registereduser_id, post_id, created_at, updated_at, deleted_at). It supports cursor or page/limit pagination, sorting by created_at or relevance, and filters such as categorySlug, tagSlug, threadId, postId, date range, and includeDeleted (admin-only). The endpoint enforces ownership: only the authenticated registered user (or an administrator/moderator via separate privileges) may list another user's bookmarks. Results exclude bookmarks whose referenced posts are hidden (post.is_hidden = true) for non-privileged callers. Default page size is 20; maximum page size is 100. UUID formats are validated for id fields and date ranges are validated for logical consistency.","path":"/econPoliticalForum/registeredUser/users/{userId}/bookmarks","method":"patch","summary":"Search and retrieve a user's bookmarks (paginated)","description":"Return a filtered, searchable, and paginated list of bookmark summary records for a specific registered user.\n\nPurpose and overview: This operation provides clients with the ability to list saved posts (bookmarks) belonging to a user. The response is optimized for list views and includes minimal post/thread metadata to enable quick rendering. The operation references the `econ_political_forum_bookmarks` table and related post/thread entities for enrichment.\n\nSecurity and permissions: Only the owning registered user (authenticated) may retrieve their bookmarks via this endpoint. Server-side checks MUST confirm the caller's identity matches {userId} or the caller holds explicit admin/moderator privileges. Moderators/admins may use admin endpoints for cross-user queries. The default behavior excludes bookmarks where the referenced post is hidden (post.is_hidden = true) and excludes bookmarks with deleted_at set; includeDeleted must be explicitly requested and the caller authorized.\n\nValidation rules and business logic: The request body supports pagination (cursor or page/limit), filtering by tagSlug, threadId, postId, categorySlug, and date ranges (from/to). Results default to exclude soft-deleted bookmarks. Sorting options include created_at (default desc) and optional relevance or post-score if available.\n\nError handling: 400 for invalid filters or date ranges, 401 for unauthenticated requests, 403 if the caller is not the owner, 404 if the userId does not exist, and 429 for rate limiting.","parameters":[{"name":"userId","in":"path","description":"Unique identifier of the target registered user whose bookmarks are being queried","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter and pagination parameters for retrieving a user's bookmarks. Supports page/limit or cursor pagination, filters (categorySlug, tagSlug, threadId, postId), date range (from,to), sort (created_at|relevance), and includeDeleted flag for admin queries.","typeName":"IEconPoliticalForumBookmark.IRequest"},"responseBody":{"description":"Paginated list of bookmark summary objects matching the search criteria","typeName":"IPageIEconPoliticalForumBookmark.ISummary"},"authorizationType":null,"authorizationRole":"registeredUser","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"A thread must exist when filtering bookmarks by threadId. Create a thread (POST /econPoliticalForum/registeredUser/threads) to provide a valid threadId; if this prerequisite fails, bookmark queries filtered by that threadId will not succeed."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"A post must exist when filtering bookmarks by postId. Create a post (POST /econPoliticalForum/registeredUser/posts) to provide a valid postId for bookmark filters; if this prerequisite fails, bookmark queries filtered by that postId will be invalid."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/bookmarks","method":"post"},"description":"Bookmark records must exist before they can be listed. Create bookmark(s) (POST /econPoliticalForum/registeredUser/bookmarks) linking the user to posts so the listing returns results; if bookmark creation fails, the bookmark index will return no matching records or 404 for specific filters."}]},{"specification":"Retrieve a single bookmark record for a given user by its bookmark id. Maps to the Prisma model `econ_political_forum_bookmarks` (id, registereduser_id, post_id, created_at, updated_at, deleted_at). Returns canonical bookmark metadata and may include lightweight enrichment from the referenced post/thread. Ownership and moderation rules apply: only the bookmark owner (registered user) may retrieve their bookmark; moderators/administrators may view archived or hidden items per policy. If the referenced post is hidden (post.is_hidden = true), non-privileged callers should receive 403 or a restricted indicator per policy. If the bookmark is soft-deleted (deleted_at set) normal callers receive 404 unless includeDeleted is authorized.","path":"/econPoliticalForum/registeredUser/users/{userId}/bookmarks/{bookmarkId}","method":"get","summary":"Retrieve a single bookmark for a user","description":"Return a single bookmark record with details and references to the saved post/thread.\n\nPurpose and overview: This operation fetches the full bookmark object for display in a detail view or when the client needs canonical information about the saved item. It uses the `econ_political_forum_bookmarks` table as the authoritative source for bookmark metadata.\n\nSecurity considerations: Only the owning user or authorized administrative roles should retrieve a bookmark for another user. Implementations MUST enforce ownership checks and return 403 for unauthorized access. If the referenced post is hidden by moderators, the endpoint should either return 403 for non-privileged callers or return a restricted metadata view depending on policy.\n\nValidation and error handling: Validate UUID formats for both parameters. Return 400 for malformed UUIDs, 401 for unauthenticated requests, 403 for access to another user's bookmark, 404 when the bookmark cannot be found or is archived (absent includeDeleted authorization), and 500 for server errors. Accesses that return bookmark details should be recorded in audit logs for compliance and tracing.","parameters":[{"name":"userId","in":"path","description":"Unique identifier of the user who owns the bookmark","schema":{"type":"string","format":"uuid"}},{"name":"bookmarkId","in":"path","description":"Unique identifier of the bookmark to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed bookmark information including references to the saved post and timestamps","typeName":"IEconPoliticalForumBookmark"},"authorizationType":null,"authorizationRole":"registeredUser","name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/bookmarks","method":"post"},"description":"The specific bookmark must exist before it can be retrieved. Create the bookmark (POST /econPoliticalForum/registeredUser/bookmarks) so the bookmarkId is present; if creation fails or the bookmark is soft-deleted, the retrieval will return 404 or 403 depending on visibility rules."}]},{"specification":"Create a follow (subscription) for a registered user on a thread. This operation maps to the Prisma model econ_political_forum_thread_follows and persists a new follow record linking the authenticated registered user to an existing thread. The server MUST derive registereduser_id from the authenticated session; clients MUST NOT provide registereduser_id. Enforce the database uniqueness constraint on (registereduser_id, thread_id). The operation is idempotent: if a non-deleted follow already exists, return the existing resource (200) or 201 when newly created. Include Location header for newly created resource where applicable.","path":"/econPoliticalForum/registeredUser/threads/{threadId}/follows","method":"post","summary":"Create a follow (subscribe) for the authenticated registered user on the specified thread","description":"Create a follow/subscription record that causes the authenticated registered user to receive notifications and have the thread included in the user's followed list. This writes a row to econ_political_forum_thread_follows with thread_id and the server-derived registereduser_id, sets created_at (and updated_at), and returns the follow summary.\n\nSecurity considerations and user permissions:\nOnly authenticated registered users may perform this action. The server MUST verify the caller's identity and check that the account is not banned or locked (email_verified, is_banned, banned_until, locked_until semantics in the registered user model). Requests from unauthenticated callers return 401; forbidden callers return 403.\n\nValidation and business logic:\n- threadId path parameter must be a UUID; verify the referenced thread exists and deleted_at is null.\n- Enforce uniqueness: if a non-deleted follow already exists for the current user and thread, return the existing follow (200) to ensure idempotency; otherwise create and return 201 Created with Location header.\n- Optional per-follow preferences (muted_until) may be accepted if allowed by product; validate such fields (ISO 8601 timestamp) and disallow setting another user's registereduser_id.\n- Apply per-user rate limits to follow creation to prevent abuse; return 429 with Retry-After when limits are exceeded.","parameters":[{"name":"threadId","description":"UUID of the thread to follow (econ_political_forum_threads.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Optional follow preferences. The acting registered user is derived from the session; clients MUST NOT provide registereduser_id.","typeName":"IEconPoliticalForumThreadFollow.ICreate"},"responseBody":{"description":"Follow resource summary linking the authenticated user to the thread","typeName":"IEconPoliticalForumThreadFollow"},"authorizationType":null,"authorizationRole":"registeredUser","name":"create","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Thread must exist before a follow can be created. POST /econPoliticalForum/registeredUser/threads creates the thread and returns its id (threadId) which is required to create the follow. If the thread creation fails or the thread does not exist, creating a follow will fail."}]},{"specification":"Soft-delete (set deleted_at) a follow record in econ_political_forum_thread_follows. The model includes deleted_at, so this operation performs a soft-delete by setting deleted_at and updating updated_at to preserve auditability. The server MUST verify ownership and authorization before marking deleted_at and must create an immutable audit entry server-side recording action_type='erase_follow'.","path":"/econPoliticalForum/registeredUser/threads/{threadId}/follows/{followId}","method":"delete","summary":"Remove (soft-delete) a follow for the authenticated user on the specified thread","description":"Remove a follow by marking the corresponding econ_political_forum_thread_follows.deleted_at timestamp. This preserves an audit trail while removing the follow from normal listings.\n\nSecurity considerations and permissions:\nAuthenticated registered users may remove their own follows. The server MUST verify the acting user's identity matches the follow.registereduser_id. Administrators may be allowed to remove follows per policy; server logic should permit elevated roles where appropriate but this endpoint is designed for registered users to erase their own follows.\n\nValidation and business logic:\n- Both path parameters must be valid UUIDs.\n- Validate follow exists, follow.thread_id equals threadId, and follow.deleted_at is null before updating.\n- If the follow does not exist or is already soft-deleted, treat the request as idempotent and return 204 No Content.\n- If the follow exists and belongs to the caller, set deleted_at and updated_at and create an immutable audit log entry (econ_political_forum_audit_logs) with action_type 'erase_follow' as a server-side effect.\n- If a legal hold exists that prevents deletion, refuse permanent purge and record the attempted action in the audit logs.","parameters":[{"name":"threadId","description":"UUID of the thread the follow belongs to (econ_political_forum_threads.id)","schema":{"type":"string","format":"uuid"}},{"name":"followId","description":"UUID of the follow record to remove (econ_political_forum_thread_follows.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"registeredUser","name":"erase","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Parent thread must exist so the follow can be associated with a valid thread. Ensure POST /econPoliticalForum/registeredUser/threads has created the thread referenced by threadId; without a valid thread the follow cannot be validated."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads/{threadId}/follows","method":"post"},"description":"The follow record must exist before it can be soft-deleted. POST /econPoliticalForum/registeredUser/threads/{threadId}/follows creates the follow and returns the followId required by the DELETE operation. If follow creation fails or the follow does not exist, the delete operation will be idempotent or fail to find the resource."}]},{"specification":"Manage thread follow subscriptions for a registered user. Maps to the econ_political_forum_thread_follows table in Prisma. Supports create/upsert, update (muted_until), and soft-unfollow (deleted_at). Enforces existence of registered user and thread and uniqueness of (registereduser_id, thread_id). Caller must be the user or an admin; admin actions must be audited.","path":"/econPoliticalForum/registeredUser/users/{userId}/follows","method":"patch","summary":"Follow/unfollow or update mute settings for a thread for a specific registered user (econ_political_forum_thread_follows)","description":"Update or create a thread follow (subscription) for a registered user.\n\nBehaviors supported:\n- Create: create a new follow when none exists for (userId, threadId). Sets created_at.\n- Update: modify mutable fields such as muted_until and updated_at.\n- Unfollow (soft-delete): set deleted_at to mark the follow inactive.\n\nSecurity and permissions:\n- Only the authenticated user matching {userId} may modify their follows. Administrators may act on behalf of users for support or moderation; such actions MUST be recorded in audit/moderation logs.\n\nValidation and business rules:\n- registereduser_id and thread_id must be valid UUIDs and exist.\n- Unique constraint (registereduser_id, thread_id) enforced; 409 Conflict returned on violation.\n- Soft-delete supported via deleted_at field in schema.\n\nErrors: 400, 401, 403, 404, 409, 429, 500.","parameters":[{"name":"userId","in":"path","description":"Target registered user's ID (UUID) whose follow list is being modified","schema":{"type":"string","format":"uuid"}},{"name":"threadId","in":"query","description":"Target thread ID (UUID) to create/update/unfollow. Required in request body or query when path does not include threadId.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Follow update request. Required fields: threadId (UUID) if not in path. Optional: muted_until (ISO 8601) to set mute expiration. For unfollow set { \"unfollow\": true } or provide deleted_at timestamp. The server should prefer explicit fields: { \"threadId\": \"...\", \"muted_until\": \"2025-10-05T12:00:00Z\", \"unfollow\": false }","typeName":"IEconPoliticalForumThreadFollow.IRequest"},"responseBody":{"description":"Follow record with public-safe fields: id, registereduser_id, thread_id, muted_until, created_at, updated_at, deleted_at","typeName":"IEconPoliticalForumThreadFollow"},"authorizationType":null,"authorizationRole":"registeredUser","name":"update","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"The target thread must exist before creating or updating a follow for it. Create a thread (POST /econPoliticalForum/registeredUser/threads) to obtain a valid threadId; if this prerequisite fails the follow update cannot reference the thread."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads/{threadId}/follows","method":"post"},"description":"A follow record may need to exist before it can be updated or unfollowed. Create the follow (POST /econPoliticalForum/registeredUser/threads/{threadId}/follows) to ensure a (registereduser_id, thread_id) mapping exists; if creation fails, attempts to update or soft-delete the follow will fail."}]},{"specification":"Read tags attached to a thread by consulting econ_political_forum_thread_tags join table and resolving canonical definitions from econ_political_forum_tags. Excludes soft-deleted join rows and tags from public results.","path":"/econPoliticalForum/threads/{threadId}/tags","method":"get","summary":"List tags attached to a thread (econ_political_forum_thread_tags -> econ_political_forum_tags)","description":"Return the tags associated with a specific thread. The endpoint reads the join table econ_political_forum_thread_tags and resolves them to econ_political_forum_tags (id, name, slug, description). By default, soft-deleted join rows and tags (deleted_at IS NOT NULL) are excluded from results. Pagination is recommended; consider page/pageSize or cursor parameters. Admin consumers may require includeDeleted=true (admin-only).","parameters":[{"name":"threadId","in":"path","description":"Target thread ID (UUID) whose tags are requested","schema":{"type":"string","format":"uuid"}},{"name":"page","in":"query","description":"Page number for pagination (1-based). Optional.","schema":{"type":"integer","minimum":1}},{"name":"pageSize","in":"query","description":"Number of items per page. Optional; server may enforce a max.","schema":{"type":"integer","minimum":1,"maximum":100}}],"requestBody":null,"responseBody":{"description":"Paginated list of tag summaries attached to the thread","typeName":"IPageIEconPoliticalForumTag.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"The thread must exist before listing its tags. Create the thread (POST /econPoliticalForum/registeredUser/threads) so the threadId referenced by the tags join table is valid; if the thread does not exist, the tag listing will return not-found or an empty result."}]},{"specification":"Create a thread->tag mapping on the econ_political_forum_thread_tags table. Operates on the Prisma model econ_political_forum_thread_tags and must validate that the referenced thread (econ_political_forum_threads.id) and tag (econ_political_forum_tags.id) exist and are active. The join is unique on (thread_id, tag_id). Implementers SHOULD use an upsert/reactivation pattern: if an active mapping exists return it; if a soft-deleted mapping exists, reactivate it (set deleted_at = null) and return the reactivated record. Enforce permission checks (caller must be thread author or have elevated privilege) and record audit/log entry for create/reactivate events. Handle race conditions with DB transactions or ON CONFLICT logic and accept Idempotency-Key header for safe retries.","path":"/econPoliticalForum/registeredUser/threads/{threadId}/tags","method":"post","summary":"Attach an existing tag to a thread (create thread_tag association)","description":"Attach an existing tag to a thread.\n\nPurpose and overview: This endpoint creates a new mapping between a thread and an existing tag by writing to econ_political_forum_thread_tags. It improves discovery and tag-based filtering.\n\nSecurity and permissions: Caller must be authenticated. Server MUST verify the caller is either the thread author or has a privileged role (moderator/admin) before allowing the attachment. All operations MUST be logged to the moderation/audit log for traceability.\n\nValidation and business rules: Validate path parameter threadId and request body tagId as UUIDs. Confirm both thread and tag exist and are not soft-deleted. If an active mapping exists return 200 with the existing mapping. If a soft-deleted mapping exists, reactivate it (set deleted_at = null) and return the reactivated mapping. On unique-constraint conflict due to concurrency, use transactional upsert or return the canonical mapping; clients are encouraged to send an Idempotency-Key header to avoid duplicates.\n\nError handling: 400 for invalid input, 401/403 for auth/permission failures, 404 if thread or tag not found/archived, 409 for unrecoverable unique-constraint failures only, 500 for server errors.","parameters":[{"name":"threadId","in":"path","description":"UUID of the target thread (econ_political_forum_threads.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation payload: provide tagId (UUID) to attach to the thread. Example: { \"tagId\": \"...\" }","typeName":"IEconPoliticalForumThreadTag.ICreate"},"responseBody":{"description":"Created or reactivated thread-tag association record. Recommended returned fields: { id, threadId, tagId, createdAt }","typeName":"IEconPoliticalForumThreadTag"},"authorizationType":null,"authorizationRole":"registeredUser","name":"create","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/tags","method":"post"},"description":"Tag must exist and be active (not soft-deleted) before it can be attached to a thread. Creating the tag yields the tag_id required by the thread-tag association; if tag creation fails or the tag is archived/unavailable, the attach operation cannot proceed and will return 404/409 as appropriate."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Thread must exist before a tag can be attached. Creating the thread produces the threadId required by the association and ensures category/author validations (for example, requires_verification) are satisfied. If thread creation fails or the referenced category is inactive, the attach operation cannot proceed."}]},{"specification":"Soft-delete the thread->tag mapping in econ_political_forum_thread_tags by setting deleted_at. The model includes deleted_at; therefore this operation must mark the record as deleted (soft-delete) while preserving the record for audit. Before performing the soft-delete, the service MUST check for active legal holds (econ_political_forum_legal_holds) or related moderation cases preventing deletion and reject with 423 Locked if a hold exists. Moderator actions MUST create moderation log entries.","path":"/econPoliticalForum/moderator/threads/{threadId}/tags/{tagId}","method":"delete","summary":"Remove tag from thread (soft-delete thread_tag mapping)","description":"Remove a tag from a thread by soft-deleting the mapping record.\n\nPurpose and overview: This endpoint updates econ_political_forum_thread_tags.deleted_at to mark the mapping as removed while retaining the record for audit and potential reactivation.\n\nSecurity and permissions: Only authorized moderation roles (moderator or administrator) may perform this action. The server MUST record the action in moderation logs (econ_political_forum_moderation_logs / audit logs) including moderator id, action_type, rationale, and linked report or case id when applicable.\n\nValidation and business rules: Validate threadId and tagId as UUIDs. Confirm the mapping exists. Before deletion, check econ_political_forum_legal_holds and related moderation_case for active holds; if present, return 423 Locked and include reference id. The API is idempotent: if the mapping is already soft-deleted, return 204 No Content.\n\nExpected behavior and error handling: On success return 204 No Content. Errors: 400 for invalid IDs, 401/403 for auth/permission errors, 404 if thread or tag not found, 423 if locked by legal hold, 500 for server errors.","parameters":[{"name":"threadId","in":"path","description":"UUID of the target thread (econ_political_forum_threads.id)","schema":{"type":"string","format":"uuid"}},{"name":"tagId","in":"path","description":"UUID of the tag to remove (econ_political_forum_tags.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/tags","method":"post"},"description":"Tag must exist and be active (not soft-deleted) before it can be removed from a thread. Creating the tag yields the canonical tag id; if the tag does not exist the delete operation will result in 404 or be a no-op depending on implementation."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Thread must exist before its tag mapping can be removed. Creating the thread yields the threadId required by the deletion path; if the thread is missing or archived the delete operation cannot proceed and should return 404."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads/{threadId}/tags","method":"post"},"description":"The thread->tag association (mapping) must exist before it can be soft-deleted. Creating the mapping ensures there is an association record to mark deleted_at. If the mapping does not exist, the delete endpoint should behave idempotently (204) or return 404 per API policy. Note: the service must also check for active legal holds or moderation-case locks before performing the soft-delete and reject with 423 Locked if a hold is present."}]},{"specification":"Operation to search and retrieve paginated lists of moderation reports. This operation targets the Prisma model `econ_political_forum_reports` and implements a filtered, searchable listing endpoint used by moderation staff and administrators to triage incoming reports. It supports pagination, sorting, full-text search on reporter_text, filtering by status, priority, target type (post or thread), date ranges (created_at, triaged_at), reporter anonymity, and optional assignment to a moderation_case. The operation surfaces the fields recorded in the reports table (reporter_id, reported_post_id, reported_thread_id, reason_code, reporter_text, reporter_anonymous, status, priority, created_at, triaged_at, reviewed_at, resolved_at, moderation_case_id) and respects retention/archival markers such as deleted_at when filtering out archived records.\n\nThis endpoint is designed for moderators and administrators to efficiently triage and manage reports. Business rules enforced by callers/service logic include: limiting returned fields for non-privileged callers, honoring reporter anonymity when requested (reporter_id must not be exposed to authors or public consumers), and prioritizing results by configured priority rules. The operation must integrate with the moderation_case and moderation_logs workflow for escalations and include pagination and sorting for operational efficiency. The backend should perform necessary sanitization when returning reporter_text and should not leak reporter identity to public clients when reporter_anonymous is true. The operation references relationships to `econ_political_forum_posts`, `econ_political_forum_threads`, `econ_political_forum_moderation_cases`, and `econ_political_forum_registereduser` in its specification.","path":"/econPoliticalForum/moderator/reports","method":"patch","summary":"Retrieve filtered, paginated list of moderation reports (moderator/admin)","description":"Retrieve a filtered and paginated list of moderation reports from the `econ_political_forum_reports` table. This operation is intended for moderators and administrators to triage incoming reports. It supports complex search criteria including full-text search on reporter_text, filters by status and priority, filtering by reported_post_id or reported_thread_id, date ranges (created_at, triaged_at), reporter anonymity filter, and assignment to moderation cases.\n\nSecurity and permissions: Only authenticated moderator or administrator roles should access this endpoint. The service MUST ensure reporter anonymity is honored: when reporter_anonymous is true, reporter identifying fields SHALL be omitted or redacted in responses to non-admin consumers. Pagination results SHOULD be limited for UI performance and rate-limited for safety.\n\nRelationship to DB entities: This operation reads the `econ_political_forum_reports` model and may join to related tables (posts, threads, moderation_cases, registereduser) for display purposes. The response SHOULD not expose internal-only fields like internal audit references unless the caller is an administrator.\n\nValidation and business rules: Request payload must validate pagination parameters (page/limit or cursor), allowed sort fields (created_at, priority, status), and search string lengths. The backend SHOULD enforce maximum page size and rate limits per user role.\n\nRelated operations: Use `GET /reports/{reportId}` to retrieve full details for a single report and use moderator endpoints to take actions (dismiss, escalate) on individual reports.\n\nError handling: On validation errors return 400; unauthorized access returns 401/403; rate limiting returns 429; unexpected server errors return 500.","parameters":[],"requestBody":{"description":"Filter, pagination, sorting and search parameters for report listing","typeName":"IEconPoliticalForumReport.IRequest"},"responseBody":{"description":"Paginated list of reports that match the search and filter criteria. Each item contains summary fields of the report suitable for triage lists.","typeName":"IPageIEconPoliticalForumReport"},"authorizationRoles":["moderator","administrator"],"name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"If a report references reported_post_id, that post must exist first. Create the post so the report's reported_post_id points to a valid econ_political_forum_posts row; otherwise report creation or triage will fail due to missing target."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"If a report references reported_thread_id, that thread must exist first. Create the thread so the report's reported_thread_id points to a valid econ_political_forum_threads row; otherwise report listing and triage for that target will fail."},{"endpoint":{"path":"/econPoliticalForum/moderator/moderationCases","method":"post"},"description":"When a report is assigned to a moderation_case_id, that moderation case must already exist. Create the moderation case first to ensure reports can be associated and triaged under that case; otherwise association will fail or require a subsequent reconciliation step."}]},{"specification":"Operation to search and retrieve paginated lists of moderation reports. This operation targets the Prisma model `econ_political_forum_reports` and implements a filtered, searchable listing endpoint used by moderation staff and administrators to triage incoming reports. It supports pagination, sorting, full-text search on reporter_text, filtering by status, priority, target type (post or thread), date ranges (created_at, triaged_at), reporter anonymity, and optional assignment to a moderation_case. The operation surfaces the fields recorded in the reports table (reporter_id, reported_post_id, reported_thread_id, reason_code, reporter_text, reporter_anonymous, status, priority, created_at, triaged_at, reviewed_at, resolved_at, moderation_case_id) and respects retention/archival markers such as deleted_at when filtering out archived records.\n\nThis endpoint is designed for moderators and administrators to efficiently triage and manage reports. Business rules enforced by callers/service logic include: limiting returned fields for non-privileged callers, honoring reporter anonymity when requested (reporter_id must not be exposed to authors or public consumers), and prioritizing results by configured priority rules. The operation must integrate with the moderation_case and moderation_logs workflow for escalations and include pagination and sorting for operational efficiency. The backend should perform necessary sanitization when returning reporter_text and should not leak reporter identity to public clients when reporter_anonymous is true. The operation references relationships to `econ_political_forum_posts`, `econ_political_forum_threads`, `econ_political_forum_moderation_cases`, and `econ_political_forum_registereduser` in its specification.","path":"/econPoliticalForum/administrator/reports","method":"patch","summary":"Retrieve filtered, paginated list of moderation reports (moderator/admin)","description":"Retrieve a filtered and paginated list of moderation reports from the `econ_political_forum_reports` table. This operation is intended for moderators and administrators to triage incoming reports. It supports complex search criteria including full-text search on reporter_text, filters by status and priority, filtering by reported_post_id or reported_thread_id, date ranges (created_at, triaged_at), reporter anonymity filter, and assignment to moderation cases.\n\nSecurity and permissions: Only authenticated moderator or administrator roles should access this endpoint. The service MUST ensure reporter anonymity is honored: when reporter_anonymous is true, reporter identifying fields SHALL be omitted or redacted in responses to non-admin consumers. Pagination results SHOULD be limited for UI performance and rate-limited for safety.\n\nRelationship to DB entities: This operation reads the `econ_political_forum_reports` model and may join to related tables (posts, threads, moderation_cases, registereduser) for display purposes. The response SHOULD not expose internal-only fields like internal audit references unless the caller is an administrator.\n\nValidation and business rules: Request payload must validate pagination parameters (page/limit or cursor), allowed sort fields (created_at, priority, status), and search string lengths. The backend SHOULD enforce maximum page size and rate limits per user role.\n\nRelated operations: Use `GET /reports/{reportId}` to retrieve full details for a single report and use moderator endpoints to take actions (dismiss, escalate) on individual reports.\n\nError handling: On validation errors return 400; unauthorized access returns 401/403; rate limiting returns 429; unexpected server errors return 500.","parameters":[],"requestBody":{"description":"Filter, pagination, sorting and search parameters for report listing","typeName":"IEconPoliticalForumReport.IRequest"},"responseBody":{"description":"Paginated list of reports that match the search and filter criteria. Each item contains summary fields of the report suitable for triage lists.","typeName":"IPageIEconPoliticalForumReport"},"authorizationRoles":["moderator","administrator"],"name":"index","authorizationRole":"administrator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"If a report references reported_post_id, that post must exist first. Create the post so the report's reported_post_id points to a valid econ_political_forum_posts row; otherwise report creation or triage will fail due to missing target."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"If a report references reported_thread_id, that thread must exist first. Create the thread so the report's reported_thread_id points to a valid econ_political_forum_threads row; otherwise report listing and triage for that target will fail."},{"endpoint":{"path":"/econPoliticalForum/administrator/moderationCases","method":"post"},"description":"When a report is associated with a moderation_case_id, prefer creating the moderation case via the administrator moderationCases API so the case exists and can be referenced. Creating the case first ensures reports can be linked and escalated without referential errors."}]},{"specification":"Operation to retrieve a single moderation report by its identifier. This operation targets the Prisma model `econ_political_forum_reports` and returns the detailed report record for use by moderators and administrators. The returned record includes reporter metadata (subject to anonymity rules), the target reference (reported_post_id or reported_thread_id), reason_code, reporter_text, processing state (status, priority), triage metadata (moderator_id, moderation_case_id, triaged_at, reviewed_at, resolved_at), and timestamps.\n\nThis endpoint is critical to moderation workflows: moderators use it to review evidence, view reporter-provided details, and link to the reported post or thread for context. The implementation must honor reporter_anonymous: when reporter_anonymous is true, reporter identifying information must be withheld from non-admin viewers and revealed only in moderator/admin UIs. The operation should include cross-links to `econ_political_forum_posts`, `econ_political_forum_threads`, and `econ_political_forum_moderation_cases` for full context and may surface associated moderation logs and audit entries for the case.\n\nNote: The underlying Prisma model includes an archival marker `deleted_at` for retention; even when a reported object is archived, the report record itself remains queryable for audit and appeal workflows.","path":"/econPoliticalForum/moderator/reports/{reportId}","method":"get","summary":"Get moderation report details by ID (moderator/admin)","description":"Retrieve full details of a single moderation report by reportId from the `econ_political_forum_reports` model.\n\nPurpose and overview: This operation returns a single report record including reporter metadata (reporter_id, reporter_anonymous), the reported target (reported_post_id or reported_thread_id), reason_code, reporter_text, status, priority, triage timestamps (triaged_at, reviewed_at, resolved_at), and links to moderation_case_id and moderator_id where available.\n\nSecurity considerations and permissions: Access restricted to moderators and administrators. The service MUST enforce reporter anonymity: if reporter_anonymous is true, reporter_id and any personally identifying fields MUST be withheld from non-admin consumers. Administrators may receive additional fields for legal and audit workflows.\n\nRelationship to underlying DB entities: This operation reads `econ_political_forum_reports` and may join to `econ_political_forum_posts`, `econ_political_forum_threads`, `econ_political_forum_moderation_cases`, `econ_political_forum_moderation_logs`, and `econ_political_forum_registereduser` for a complete view.\n\nValidation and business rules: The path parameter `reportId` MUST be a valid UUID. If the report does not exist, return 404. If the report is archived (deleted_at set on the report), the endpoint should indicate archival status and include guidance or links to legal/appeals workflows where applicable.\n\nRelated API operations: `PATCH /reports` for search/listing; moderator action endpoints (e.g., /moderation/cases) to take actions and record moderation logs.\n\nError handling: Return 400 for invalid UUID format, 401/403 for unauthorized requests, 404 if not found or not visible to the caller, 429 for rate-limiting, and 500 for server errors.","parameters":[{"name":"reportId","description":"Unique identifier (UUID) of the target report","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation report record with triage metadata and links to related domain objects.","typeName":"IEconPoliticalForumReport"},"authorizationRoles":["moderator","administrator"],"name":"at","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/reports","method":"post"},"description":"The report record must exist before it can be retrieved. POST /econPoliticalForum/reports creates an econ_political_forum_reports row and returns its generated id; the GET by reportId requires that the report id exists and is accessible to the caller. If report creation fails or the id does not exist, the GET will return 404 or not-found errors."}]},{"specification":"Operation to retrieve a single moderation report by its identifier. This operation targets the Prisma model `econ_political_forum_reports` and returns the detailed report record for use by moderators and administrators. The returned record includes reporter metadata (subject to anonymity rules), the target reference (reported_post_id or reported_thread_id), reason_code, reporter_text, processing state (status, priority), triage metadata (moderator_id, moderation_case_id, triaged_at, reviewed_at, resolved_at), and timestamps.\n\nThis endpoint is critical to moderation workflows: moderators use it to review evidence, view reporter-provided details, and link to the reported post or thread for context. The implementation must honor reporter_anonymous: when reporter_anonymous is true, reporter identifying information must be withheld from non-admin viewers and revealed only in moderator/admin UIs. The operation should include cross-links to `econ_political_forum_posts`, `econ_political_forum_threads`, and `econ_political_forum_moderation_cases` for full context and may surface associated moderation logs and audit entries for the case.\n\nNote: The underlying Prisma model includes an archival marker `deleted_at` for retention; even when a reported object is archived, the report record itself remains queryable for audit and appeal workflows.","path":"/econPoliticalForum/administrator/reports/{reportId}","method":"get","summary":"Get moderation report details by ID (moderator/admin)","description":"Retrieve full details of a single moderation report by reportId from the `econ_political_forum_reports` model.\n\nPurpose and overview: This operation returns a single report record including reporter metadata (reporter_id, reporter_anonymous), the reported target (reported_post_id or reported_thread_id), reason_code, reporter_text, status, priority, triage timestamps (triaged_at, reviewed_at, resolved_at), and links to moderation_case_id and moderator_id where available.\n\nSecurity considerations and permissions: Access restricted to moderators and administrators. The service MUST enforce reporter anonymity: if reporter_anonymous is true, reporter_id and any personally identifying fields MUST be withheld from non-admin consumers. Administrators may receive additional fields for legal and audit workflows.\n\nRelationship to underlying DB entities: This operation reads `econ_political_forum_reports` and may join to `econ_political_forum_posts`, `econ_political_forum_threads`, `econ_political_forum_moderation_cases`, `econ_political_forum_moderation_logs`, and `econ_political_forum_registereduser` for a complete view.\n\nValidation and business rules: The path parameter `reportId` MUST be a valid UUID. If the report does not exist, return 404. If the report is archived (deleted_at set on the report), the endpoint should indicate archival status and include guidance or links to legal/appeals workflows where applicable.\n\nRelated API operations: `PATCH /reports` for search/listing; moderator action endpoints (e.g., /moderation/cases) to take actions and record moderation logs.\n\nError handling: Return 400 for invalid UUID format, 401/403 for unauthorized requests, 404 if not found or not visible to the caller, 429 for rate-limiting, and 500 for server errors.","parameters":[{"name":"reportId","description":"Unique identifier (UUID) of the target report","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation report record with triage metadata and links to related domain objects.","typeName":"IEconPoliticalForumReport"},"authorizationRoles":["moderator","administrator"],"name":"at","authorizationRole":"administrator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/reports","method":"post"},"description":"The report record must exist before it can be retrieved. POST /econPoliticalForum/reports creates an econ_political_forum_reports row and returns its generated id; the GET by reportId requires that the report id exists and is accessible to the caller. If report creation fails or the id does not exist, the GET will return 404 or not-found errors."}]},{"specification":"Create a new report record in the econ_political_forum_reports table. Validates presence of at least one target (reported_post_id or reported_thread_id). If the requester is authenticated, reporter_id is set from session; for unauthenticated requests reporter_id remains null. The server assigns status, priority, id and timestamps. Public responses must not expose reporter identity when reporter_anonymous is true or when the caller lacks moderator/admin privileges. This operation maps directly to the Prisma model econ_political_forum_reports and must enforce server-side validation (reason_code allowed values, reporter_text length and sanitization), anti-abuse controls for unauthenticated users (rate limiting/CAPTCHA), and return appropriate errors (400/404/429/500).","path":"/econPoliticalForum/reports","method":"post","summary":"Create a report for a post or thread (public: guests may file reports)","description":"Create a structured report that flags a post or thread for moderator review.\n\nPurpose and overview: This endpoint allows visitors (authenticated or not) to notify moderators about content that may violate policy. It creates an immutable record in econ_political_forum_reports and returns the persisted report. Implementation must validate inputs and sanitize reporter_text.\n\nSecurity and permissions: Public endpoint. Unauthenticated requests are allowed but must be subject to anti-abuse controls (rate limiting, CAPTCHA). Authenticated requests will set reporter_id from session. The public response must redact reporter identity for anonymous reports or when the caller is not a moderator/admin.\n\nRelationship to the database: Writes to econ_political_forum_reports fields (reported_post_id, reported_thread_id, reason_code, reporter_text, reporter_anonymous, status, priority, created_at, deleted_at). The server must validate that at least one of reported_post_id or reported_thread_id is present and that provided target IDs exist when possible.\n\nValidation and business rules: Validate reason_code against allowed values (harassment, doxxing, misinformation, illegal_content, spam, other). Enforce reporter_text max length (e.g., 2000 chars) and sanitize content. Return 400 when validation fails, 404 when target not found, 429 for rate limits.","parameters":[],"requestBody":{"description":"Report creation payload: specify the target (reported_post_id OR reported_thread_id), a structured reason_code, optional reporter_text, and optional anonymity preference.","typeName":"IEconPoliticalForumReport.ICreate"},"responseBody":{"description":"Created report record. Public responses must redact reporter identity for anonymous or non-privileged callers; moderators receive full record.","typeName":"IEconPoliticalForumReport"},"authorizationType":null,"authorizationRole":null,"name":"create","prerequisites":[]},{"specification":"Update processing/triage fields of an existing report in econ_political_forum_reports. Intended for moderator workflows. The server must authenticate the caller as a moderator, set moderator_id from the session, validate status/priority values, create corresponding moderation_logs and audit_logs for significant state transitions, and enforce concurrency controls to avoid conflicting updates. This operation updates triage fields (status, priority, triaged_at, reviewed_at, resolved_at, moderation_case_id, deleted_at) and must not alter created_at or reporter-provided content.","path":"/econPoliticalForum/moderator/reports/{reportId}","method":"put","summary":"Update a report (moderator-only triage and actions)","description":"Update report processing metadata and triage state for an existing report.\n\nPurpose and overview: Used by moderators to acknowledge, triage, escalate, or resolve user reports. Updates mutable processing fields on the econ_political_forum_reports record and triggers server-side side effects required by moderation policy (create moderation_case, moderation_log and audit entries where applicable).\n\nSecurity and permissions: Only users with moderator privileges may call this endpoint. The server must authenticate the caller as a moderator and set moderator_id server-side. Admin-only final actions may require additional checks.\n\nRelationship to the database: Updates fields on econ_political_forum_reports (status, priority, triaged_at, reviewed_at, resolved_at, moderation_case_id, deleted_at) that exist in the Prisma schema. The server must also generate corresponding entries in econ_political_forum_moderation_logs and econ_political_forum_audit_logs to satisfy audit requirements.\n\nValidation and business logic: Validate provided status and priority values. For transitions to action_taken or escalated, create moderation_log entries with rationale and evidence_reference and set reviewed_at/resolved_at as appropriate. Implement optimistic concurrency handling (e.g., require client to include last-known updated_at) and return 409 Conflict when concurrent modifications are detected.","parameters":[{"name":"reportId","description":"Unique identifier of the target report (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields moderators may update for triage and action. Server sets moderator_id from authenticated session and creates moderation logs for significant state transitions.","typeName":"IEconPoliticalForumReport.IUpdate"},"responseBody":{"description":"Updated report record reflecting new status, priority, assigned moderator, and timestamps.","typeName":"IEconPoliticalForumReport"},"authorizationType":null,"authorizationRole":"moderator","name":"update","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/reports","method":"post"},"description":"The report resource identified by reportId must exist before a moderator can triage or update it. Creating a report (POST /econPoliticalForum/reports) yields the report id used by the update. If this prerequisite is not satisfied, the update will fail with a 404 (report not found) or similar referential error."},{"endpoint":{"path":"/econPoliticalForum/moderator/moderationCases","method":"post"},"description":"If the update assigns or references a moderation_case_id, that moderation case must exist. Creating a moderation case (POST /econPoliticalForum/moderator/moderationCases) ensures the moderation_case_id is valid and can be referenced from the report. If this prerequisite is missing, assigning the moderation_case_id may fail due to referential integrity or return a 400/404 from the update operation."}]},{"specification":"Read-only listing and search operation for moderation cases (moderator scope). Operates on the Prisma model econ_political_forum_moderation_cases. Supports pagination (cursor or page+limit), filters (status, priority, assigned_moderator_id, owner_admin_id, legal_hold, date ranges), full-text search on summary/title, and sorting. Defaults to excluding records where deleted_at IS NOT NULL. Returns paginated summaries (IPageIEconPoliticalForumModerationCase.ISummary). Access restricted to moderator role; PII redaction rules apply for non-admin moderators.","path":"/econPoliticalForum/moderator/moderationCases","method":"patch","summary":"Search and retrieve a filtered, paginated list of moderation cases (moderator scope)","description":"Retrieve a filtered, searchable and paginated list of moderation cases for triage and administrative review.\n\nPurpose and overview:\nProvides moderators with the ability to list and search moderation cases. Results are paginated and returned as concise summaries for list views.\n\nSecurity considerations:\nOnly authenticated users with the moderator role may call this endpoint. The service MUST enforce role-based access and may scope results to cases assigned to the caller unless the caller has administrator privileges. Field-level redaction is required for PII when the caller lacks admin privileges. All access MUST be audited.\n\nBusiness rules:\n- Default filter excludes records where deleted_at IS NOT NULL.\n- Pagination: default page size 20, max 100. Either page+limit or opaque cursor is acceptable; the IRequest DTO should document the chosen approach.\n- Filters: status, priority, assigned_moderator_id, owner_admin_id, legal_hold, created_at/updated_at/closed_at ranges.\n- Sorting: created_at, priority, case_number.\n\nErrors: 400/401/403/429/500.","parameters":[],"requestBody":{"description":"Search, filter, sort and pagination parameters for moderation case listing (define cursor or page+limit format in the IRequest DTO)","typeName":"IEconPoliticalForumModerationCase.IRequest"},"responseBody":{"description":"Paginated list of moderation case summaries matching search criteria","typeName":"IPageIEconPoliticalForumModerationCase.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","prerequisites":[]},{"specification":"Read-only listing and search operation for moderation cases (administrator scope). Operates on the Prisma model econ_political_forum_moderation_cases. Administrators may include archived records (deleted_at not null) and view additional evidence fields subject to legal_hold constraints. Supports pagination, filters, full-text search, and sorting. Returns paginated summaries (IPageIEconPoliticalForumModerationCase.ISummary). Access restricted to administrator role.","path":"/econPoliticalForum/administrator/moderationCases","method":"patch","summary":"Search and retrieve a filtered, paginated list of moderation cases (administrator scope)","description":"Retrieve a filtered, searchable and paginated list of moderation cases for triage, administrative review, and archived-case access.\n\nPurpose and overview:\nProvides administrators the ability to list and search moderation cases, including archived cases when requested.\n\nSecurity considerations:\nOnly authenticated users with administrator privileges may call this endpoint. Administrators can request archived records and may view additional evidence fields (subject to legal_hold constraints). All accesses MUST be audited.\n\nBusiness rules:\n- Pagination: default page size 20, max 100. Define cursor or page+limit format in IRequest DTO.\n- Filters and sorting same as moderator listing; administrators may request archived records via explicit parameter.\n\nErrors: 400/401/403/429/500.","parameters":[],"requestBody":{"description":"Search, filter, sort and pagination parameters for moderation case listing (define cursor or page+limit format in the IRequest DTO)","typeName":"IEconPoliticalForumModerationCase.IRequest"},"responseBody":{"description":"Paginated list of moderation case summaries matching search criteria","typeName":"IPageIEconPoliticalForumModerationCase.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index","prerequisites":[]},{"specification":"Retrieve full moderation case details for a given case id (moderator scope). Reads from econ_political_forum_moderation_cases and returns the complete record including references (ids) to related reports, moderation logs, and legal holds. Access respects reporter_anonymous and legal_hold constraints and applies PII redaction for non-admin moderators.","path":"/econPoliticalForum/moderator/moderationCases/{caseId}","method":"get","summary":"Retrieve a single moderation case by ID (moderator scope)","description":"Get detailed moderation case information for review, escalation, and appeals. The response includes case fields from econ_political_forum_moderation_cases and id references to related reports and moderation logs. Access is restricted to moderators and administrators; administrators may see additional evidence fields per legal_hold rules. All accesses should be recorded in audit logs.\n\nBehavior and validation:\n- Path parameter caseId must be a valid UUID.\n- If deleted_at is set and caller is not an administrator requesting archived records, return 404.\n\nErrors: 400/401/403/404/500.","parameters":[{"name":"caseId","description":"Unique identifier (UUID) of the moderation case to retrieve","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed moderation case record including references to related reports and moderation logs","typeName":"IEconPoliticalForumModerationCase"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/moderator/moderationCases","method":"post"},"description":"A moderation case must exist before it can be retrieved. Create the moderation case record using POST /econPoliticalForum/moderator/moderationCases which inserts a row into econ_political_forum_moderation_cases and returns the generated case id. If case creation fails or the case does not exist, GET by caseId will return 404 or fail."}]},{"specification":"Retrieve full moderation case details for a given case id (administrator scope). Reads from econ_political_forum_moderation_cases and returns the complete record including references (ids) to related reports, moderation logs, and legal holds. Administrators may view archived records and evidence fields subject to legal_hold flags. Access is restricted to administrators and must be audited.","path":"/econPoliticalForum/administrator/moderationCases/{caseId}","method":"get","summary":"Retrieve a single moderation case by ID (administrator scope)","description":"Get detailed moderation case information for administrative review, escalation, and appeals. The response includes case fields from econ_political_forum_moderation_cases and id references to related reports and moderation logs. Administrators may access archived records and evidence fields per legal_hold rules. All accesses must be recorded in audit logs.\n\nBehavior and validation:\n- Path parameter caseId must be a valid UUID.\n- If deleted_at is set and caller is administrator requesting archived records, the record may be returned; otherwise 404.\n\nErrors: 400/401/403/404/500.","parameters":[{"name":"caseId","description":"Unique identifier (UUID) of the moderation case to retrieve","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed moderation case record including references to related reports and moderation logs","typeName":"IEconPoliticalForumModerationCase"},"authorizationType":null,"authorizationRole":"administrator","name":"at","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/moderationCases","method":"post"},"description":"A moderation case must exist before an administrator can retrieve it. Create the moderation case via POST /econPoliticalForum/administrator/moderationCases which persists econ_political_forum_moderation_cases and returns the new case id. Retrieval by caseId requires that the case record exists (and for archived records, that the administrator requests archived data)."}]},{"specification":"Create a new moderation case. This operation creates a single row in the Prisma model econ_political_forum_moderation_cases. The operation must validate required fields (case_number, status, priority), enforce uniqueness of case_number, and validate optional foreign keys (assigned_moderator_id, owner_admin_id, lead_report_id) exist in the corresponding tables. If legal_hold is true, application logic must ensure preservation of related evidence per legal hold rules. The operation returns the created moderation case record.","path":"/econPoliticalForum/moderator/moderationCases","method":"post","summary":"Create a moderation case (econ_political_forum_moderation_cases)","description":"Create a new moderation case to group related reports, coordinate investigations, and track escalation/state.\n\nSecurity and permissions:\nOnly authenticated callers with the moderator role may invoke this endpoint. Implementations must verify caller role and perform referential integrity checks for provided UUID references. The operation returns 201 and the created moderation case on success.\n\nValidation and errors:\n- 400: validation failure (invalid UUID, missing required fields)\n- 401: unauthenticated\n- 403: insufficient role\n- 409: case_number conflict\n- 500: server error","parameters":[],"requestBody":{"description":"Moderation case creation payload","typeName":"IEconPoliticalForumModerationCase.ICreate"},"responseBody":{"description":"Created moderation case record","typeName":"IEconPoliticalForumModerationCase"},"authorizationType":null,"authorizationRole":"moderator","prerequisites":[],"name":"create"},{"specification":"Create a new moderation case. This operation creates a single row in the Prisma model econ_political_forum_moderation_cases. The operation must validate required fields (case_number, status, priority), enforce uniqueness of case_number, and validate optional foreign keys (assigned_moderator_id, owner_admin_id, lead_report_id) exist in the corresponding tables. If legal_hold is true, application logic must ensure preservation of related evidence per legal hold rules. The operation returns the created moderation case record.","path":"/econPoliticalForum/administrator/moderationCases","method":"post","summary":"Create a moderation case (econ_political_forum_moderation_cases)","description":"Create a new moderation case to group related reports, coordinate investigations, and track escalation/state.\n\nSecurity and permissions:\nOnly authenticated callers with the administrator role may invoke this endpoint. Implementations must verify caller role and perform referential integrity checks for provided UUID references. The operation returns 201 and the created moderation case on success.\n\nValidation and errors:\n- 400: validation failure (invalid UUID, missing required fields)\n- 401: unauthenticated\n- 403: insufficient role\n- 409: case_number conflict\n- 500: server error","parameters":[],"requestBody":{"description":"Moderation case creation payload","typeName":"IEconPoliticalForumModerationCase.ICreate"},"responseBody":{"description":"Created moderation case record","typeName":"IEconPoliticalForumModerationCase"},"authorizationType":null,"authorizationRole":"administrator","prerequisites":[],"name":"create"},{"specification":"Update an existing moderation case. This operation updates fields on the Prisma model econ_political_forum_moderation_cases for the identified caseId. It must validate the path parameter caseId, enforce uniqueness of case_number if updated, validate optional foreign keys (assigned_moderator_id, owner_admin_id) and create immutable audit/moderation log entries for the update as a side-effect.","path":"/econPoliticalForum/moderator/moderationCases/{caseId}","method":"put","summary":"Update a moderation case (econ_political_forum_moderation_cases)","description":"Modify an existing moderation case to reflect investigation progress, assignment changes, escalation decisions, or closure.\n\nSecurity and permissions:\nOnly authenticated callers with the moderator role may update cases. Implementations must verify authorization (e.g., assigned moderators or administrators) before applying updates. Updates must create audit entries in econ_political_forum_audit_logs and moderation logs where applicable.\n\nValidation and errors:\n- 400: validation failure (invalid UUID, invalid references)\n- 401: unauthenticated\n- 403: not authorized\n- 404: case not found\n- 409: case_number conflict\n- 500: server error","parameters":[{"name":"caseId","description":"Target moderation case's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderation case update payload (partial or full)","typeName":"IEconPoliticalForumModerationCase.IUpdate"},"responseBody":{"description":"Updated moderation case record","typeName":"IEconPoliticalForumModerationCase"},"authorizationType":null,"authorizationRole":"moderator","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/reports","method":"post"},"description":"If the update payload includes lead_report_id, the referenced report must exist. Create a report via POST /econPoliticalForum/reports so a valid lead_report_id can be supplied; if report creation fails, the case update referencing that report will be invalid."},{"endpoint":{"path":"/econPoliticalForum/moderator/moderationCases","method":"post"},"description":"The moderation case identified by {caseId} must exist before it can be updated. Create the case via POST /econPoliticalForum/moderator/moderationCases to produce a valid caseId. Ensure case creation completes successfully; otherwise the update will return 404."}],"name":"update"},{"specification":"Update an existing moderation case. This operation updates fields on the Prisma model econ_political_forum_moderation_cases for the identified caseId. It must validate the path parameter caseId, enforce uniqueness of case_number if updated, validate optional foreign keys (assigned_moderator_id, owner_admin_id) and create immutable audit/moderation log entries for the update as a side-effect.","path":"/econPoliticalForum/administrator/moderationCases/{caseId}","method":"put","summary":"Update a moderation case (econ_political_forum_moderation_cases)","description":"Modify an existing moderation case to reflect investigation progress, assignment changes, escalation decisions, or closure.\n\nSecurity and permissions:\nOnly authenticated callers with the administrator role may update cases. Implementations must verify authorization before applying updates. Updates must create audit entries in econ_political_forum_audit_logs and moderation logs where applicable.\n\nValidation and errors:\n- 400: validation failure (invalid UUID, invalid references)\n- 401: unauthenticated\n- 403: not authorized\n- 404: case not found\n- 409: case_number conflict\n- 500: server error","parameters":[{"name":"caseId","description":"Target moderation case's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderation case update payload (partial or full)","typeName":"IEconPoliticalForumModerationCase.IUpdate"},"responseBody":{"description":"Updated moderation case record","typeName":"IEconPoliticalForumModerationCase"},"authorizationType":null,"authorizationRole":"administrator","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/reports","method":"post"},"description":"If the update payload includes lead_report_id, the referenced report must exist. Create a report via POST /econPoliticalForum/reports to provide a valid lead_report_id for the moderation case; failures to create the report will cause reference validation errors."},{"endpoint":{"path":"/econPoliticalForum/administrator/moderationCases","method":"post"},"description":"The moderation case identified by {caseId} must exist before it can be updated. Create the case via POST /econPoliticalForum/administrator/moderationCases to obtain a valid caseId. If case creation is not performed first the update will result in 404."}],"name":"update"},{"specification":"Retrieve a paginated, searchable list of moderation log entries from the Prisma table `econ_political_forum_moderation_logs`. This operation targets the moderation/audit journal maintained by the platform and returns lightweight summaries suitable for moderator dashboards. It maps directly to the `econ_political_forum_moderation_logs` model in the Prisma schema and must respect its append-only nature, immutability of created entries, and soft-delete semantics (the model includes `deleted_at`). Implementers should use database-safe filters and full-text search on `rationale` when available (GIN trigram index is present). The summary response should include minimal fields (id, action_type, reason_code, moderator_id, created_at) and a redacted excerpt of `rationale` for moderators, with full unredacted content available only to administrators via a controlled flag and audit log.","path":"/econPoliticalForum/moderator/moderationLogs","method":"patch","summary":"Search and retrieve a filtered, paginated list of moderation logs (econ_political_forum_moderation_logs) — moderator view (redacted excerpts)","description":"Purpose and overview:\n\nRetrieve moderation log entries for triage and operational review. Each entry corresponds to an immutable moderation event recorded in the `econ_political_forum_moderation_logs` table (fields include moderator_id, target_post_id, target_thread_id, moderation_case_id, acted_admin_id, action_type, reason_code, rationale, evidence_reference, created_at). The endpoint supports pagination, filtering, free-text search over rationale (search returns redacted excerpts by default for moderator role), and sorting so moderators can find relevant actions quickly.\n\nSecurity considerations and permissions:\n\nAccess to this endpoint is restricted to moderator-level staff. Moderators receive redacted excerpts of free-text fields by default. Any request that requests unredacted fields must be made by an administrator path or include an explicit server-approved flag; such accesses must be audited. Evidence URIs returned in summaries must be tokenized or redacted unless caller has elevated privileges.\n\nValidation rules and business logic:\n\n- Allowed filters: action_type, reason_code, moderator_id, acted_admin_id, target_post_id, target_thread_id, moderation_case_id, created_at range (ISO 8601 from/to).\n- Free-text search: search over `rationale` and `evidence_reference` using the trigram/GIN index; moderator results return redacted excerpts only.\n- Pagination: support page/limit or cursor; default page size 20; max page size 100 (server enforced).\n- Sorting: by created_at (default desc), or by moderator_id, action_type.\n- Soft-delete handling: entries with `deleted_at` != null are historical; include only if includeDeleted=true and caller is administrator or explicitly permitted.\n\nError handling:\n\nReturn structured error codes: 400 (invalid input), 401 (unauthenticated), 403 (forbidden), 429 (rate-limited), 500 (server error). Provide descriptive messages and correlation id for support.\n","parameters":[],"requestBody":{"description":"Search, filter, sort and pagination parameters for moderation logs retrieval (moderator-scoped request). Fields include filters for action_type, reason_code, moderator_id, acted_admin_id, target_post_id, target_thread_id, moderation_case_id, createdFrom/createdTo (ISO 8601), query (free-text), page, limit, cursor, sortBy, sortOrder, includeDeleted (boolean - admins only).","typeName":"IEconPoliticalForumModerationLog.IRequest"},"responseBody":{"description":"Paginated list (summary) of moderation log entries matching the query criteria. Summary entries include id, action_type, reason_code, moderator_id, created_at, and a redacted excerpt of rationale. Full details must be fetched via GET detail endpoint and may be restricted to admins.","typeName":"IPageIEconPoliticalForumModerationLog.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Create a thread resource so that any target_thread_id used in moderation log filters or referenced by moderation events exists. If thread creation fails, moderation logs referencing that thread cannot be produced or filtered."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"Create a post resource so that any target_post_id used in moderation log filters or referenced by moderation events exists. If post creation fails, moderation logs referencing that post cannot be produced or filtered."},{"endpoint":{"path":"/econPoliticalForum/moderator/moderationCases","method":"post"},"description":"Create a moderation case to produce a moderation_case_id that can be associated with moderation log entries. If the case does not exist, logs tied to that case cannot be generated or queried."}]},{"specification":"Retrieve a paginated, searchable list of moderation log entries from the Prisma table `econ_political_forum_moderation_logs`. This operation targets the administrator audit view and returns full, unredacted moderation log summaries suitable for administrator dashboards and legal review. It maps directly to the Prisma model and respects soft-delete semantics (the model includes `deleted_at`). Administrators may request unredacted rationale/evidence references; such accesses must be audited.","path":"/econPoliticalForum/administrator/moderationLogs","method":"patch","summary":"Search and retrieve a filtered, paginated list of moderation logs (econ_political_forum_moderation_logs) — administrator view (full details, audited)","description":"Purpose and overview:\n\nRetrieve moderation log entries for auditing and administrative review. Each entry is an immutable moderation event recorded in the `econ_political_forum_moderation_logs` table. The endpoint supports pagination, filtering, free-text search over `rationale` and `evidence_reference`, and sorting. Administrators may retrieve unredacted fields and evidence references; such retrievals must be logged in the access audit trail.\n\nSecurity considerations and permissions:\n\nAccess restricted to administrators. Returning unredacted free-text and evidence references is allowed only for administrator-level callers and must trigger an audit record including caller id, reason, and correlation id. Evidence references must be tokenized for delivery if they point to stored artifacts.\n\nValidation rules and business logic:\n\n- Allowed filters: action_type, reason_code, moderator_id, acted_admin_id, target_post_id, target_thread_id, moderation_case_id, created_at range.\n- Free-text search: administrator queries may return full fields.\n- Pagination: support page/limit or cursor; default page size 20; max page size 100 (server enforced).\n- Sorting: by created_at (default desc), or by moderator_id, action_type.\n- Soft-delete handling: entries with `deleted_at` != null remain queryable to administrators; includeDeleted flag supported.\n\nError handling:\n\nReturn structured errors: 400, 401, 403, 429, 500. Include correlation id for audit and support.\n","parameters":[],"requestBody":{"description":"Search, filter, sort and pagination parameters for moderation logs retrieval (administrator-scoped request).","typeName":"IEconPoliticalForumModerationLog.IRequest"},"responseBody":{"description":"Paginated list of moderation log summary entries matching the query criteria. Summaries may include unredacted rationale and evidence references for administrators.","typeName":"IPageIEconPoliticalForumModerationLog.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Create a thread resource so that any target_thread_id used in administrative moderation log queries or referenced by moderation events exists. If thread creation fails, logs referencing that thread cannot be produced or filtered."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"Create a post resource so that any target_post_id used in administrative moderation log queries or referenced by moderation events exists. If post creation fails, logs referencing that post cannot be produced or filtered."},{"endpoint":{"path":"/econPoliticalForum/administrator/moderationCases","method":"post"},"description":"Create a moderation case (administrator flow) to produce a moderation_case_id that can be associated with moderation log entries. Administrative access to full-case creation is available via this endpoint; if the case does not exist, logs tied to that case cannot be generated or queried."}]},{"specification":"Retrieve a single moderation log entry by its UUID from the Prisma table `econ_political_forum_moderation_logs`. Returns the full moderation log record for moderator-level investigation. The response should provide the model's fields but apply redaction rules to sensitive fields for moderators (full unredacted detail available to administrators only).","path":"/econPoliticalForum/moderator/moderationLogs/{logId}","method":"get","summary":"Get a single moderation log entry (econ_political_forum_moderation_logs) by ID — moderator view (redacted if necessary)","description":"Purpose and overview:\n\nReturn the complete moderation log entry identified by `logId`. Each moderation log is an immutable record created when moderators or system processes take an action. The returned entity includes fields present in the Prisma model such as moderator_id, target_post_id, target_thread_id, moderation_case_id, acted_admin_id, action_type, reason_code, rationale, evidence_reference, and created_at. For moderator callers, sensitive fields may be redacted.\n\nSecurity considerations and user permissions:\n\nAccess restricted to moderators (redacted view) and administrators (full view). If the log entry is soft-deleted (has `deleted_at`), the endpoint may return 404 for non-admin callers to avoid leaking existence; administrators may view deleted records. Access to unredacted fields must be audited.\n\nValidation and error handling:\n\n- Path parameter `logId` MUST be a UUID. If not found, return 404.\n- If the caller lacks privileges, return 403.\n- If requesting unredacted fields without admin privileges, return 403 or return a redacted response.\n","parameters":[{"name":"logId","description":"Unique identifier (UUID) of the moderation log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation log record (moderator-scoped view; redaction applied to sensitive fields as required).","typeName":"IEconPoliticalForumModerationLog"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[]},{"specification":"Retrieve a single moderation log entry by its UUID from the Prisma table `econ_political_forum_moderation_logs`. Returns the full moderation log record for administrative/audit use; administrators may receive unredacted fields and evidence references. Accesses that reveal sensitive data must be logged in the audit trail.","path":"/econPoliticalForum/administrator/moderationLogs/{logId}","method":"get","summary":"Get a single moderation log entry (econ_political_forum_moderation_logs) by ID — administrator view (full detail)","description":"Purpose and overview:\n\nReturn the complete moderation log entry identified by `logId` for administrative review. The response includes fields present in the Prisma model: moderator_id, target_post_id, target_thread_id, moderation_case_id, acted_admin_id, action_type, reason_code, rationale, evidence_reference, created_at, and deleted_at. Administrators may view unredacted fields; such access must be recorded in the access audit log.\n\nSecurity considerations and user permissions:\n\nAccess restricted to administrators. Viewing unredacted rationale or evidence references must be logged with caller id and correlation id. Evidence references that point to stored artifacts must be provided as tokenized short-lived URIs rather than direct file system paths.\n\nValidation and error handling:\n\n- Path parameter `logId` must be a valid UUID; return 404 if not found.\n- Unauthorized access returns 403; unauthenticated access returns 401.\n","parameters":[{"name":"logId","description":"Unique identifier (UUID) of the moderation log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation log record (administrator view; full details permitted and audited).","typeName":"IEconPoliticalForumModerationLog"},"authorizationType":null,"authorizationRole":"administrator","name":"at","prerequisites":[]},{"specification":"Retrieve a filtered, paginated list of immutable audit log entries from the econ_political_forum_audit_logs Prisma model. This operation supports administrative search and investigation use cases (incident response, compliance exports, moderation review). It is associated with the Prisma model econ_political_forum_audit_logs and may filter on these canonical fields: registereduser_id, moderator_id, post_id, thread_id, report_id, moderation_case_id, action_type, target_type, target_identifier, created_at, and created_by_system. The model does NOT include a deleted_at field; audit entries are append-only in the schema and should be treated as immutable. Any administrative/legal removal of audit entries is a separate procedure and is not represented by a soft-delete field on the model.\n\nThis operation MUST enforce strict administrative access controls. By default responses MUST return a redacted view of the `details` field; viewing raw `details` requires an explicit elevated privilege and an explicit request flag. All accesses to audit entries (including redacted and raw views) MUST be recorded in the system audit trail by server-side logic (access-to-audit logging). Pagination, sorting, and filter validation happen at the application layer. The operation is read-only and does not permit creation, modification, or deletion of audit entries via this API.\n\nValidation and expected behavior: request payloads must include pagination parameters (cursor- or page-based) and may include optional filters (actor id, moderator id, action_type, target_type, target_identifier, moderation_case_id, report_id, date range, created_by_system). The default sort is created_at desc. The server MUST validate UUIDs and date ranges and return 400 on malformed inputs with field-level errors. If filters match no records, return an empty page with pagination metadata. Implement server-side caps on pageSize to prevent expensive queries. The response DTO should provide a redacted `details` field by default and document the privilege required to request unredacted content.","path":"/econPoliticalForum/administrator/auditLogs","method":"patch","summary":"Search and retrieve a paginated list of audit log entries (admin only) from econ_political_forum_audit_logs","description":"Retrieve a filtered, paginated list of audit log entries from the system audit log (econ_political_forum_audit_logs model).\n\nPurpose and overview: This operation enables administrators to search and enumerate immutable audit events recorded by the platform for incident investigation, compliance review, and moderation auditing. The returned entries correspond to the Prisma model econ_political_forum_audit_logs and include references to related objects (post, thread, report, moderation_case) when present. The audit log schema is append-only and does not include a soft-delete field; implementers must not rely on deleted_at filtering.\n\nSecurity and permissions: Access to audit logs is restricted to administrator role. The operation MUST validate the caller's administrative privileges and MUST record access to this endpoint in system audit logs (server-side). The `details` field is considered sensitive and MUST be redacted in default responses; viewing raw `details` requires explicit elevated privilege and must be recorded in the audit trail. Exports of audit data require an approved compliance workflow and must follow redaction rules.\n\nValidation and business logic: The request body accepts complex search criteria (actor, moderator, action_type, target_type, target_identifier, moderation_case_id, report_id, date range (created_at start/end), created_by_system flag), pagination, and sorting. The server shall enforce reasonable limits on page size and complexity to avoid expensive queries. Invalid UUIDs or malformed date ranges return 400 with field-level details. If filters match no records, return an empty page with pagination metadata.\n\nRelated operations: Use GET /econPoliticalForum/administrator/auditLogs/{auditLogId} to obtain a single audit entry's detailed record; use moderation/case endpoints to navigate from audit entries to moderation cases and reports.","parameters":[],"requestBody":{"description":"Search, filter, sorting and pagination parameters for audit log retrieval. Supports actor/moderator filters, action_type, target_type, target_identifier, moderation_case_id, report_id, date range (created_at start/end), created_by_system flag, sort (created_at asc/desc) and pagination (page/cursor, pageSize). Default detail view is redacted; request for raw detail requires elevated privilege and must be explicitly requested in DTO.","typeName":"IEconPoliticalForumAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log entries matching the search criteria. Each item follows IEconPoliticalForumAuditLog summary shape and includes pagination metadata. The `details` field is redacted by default; raw details require elevated privilege.","typeName":"IPageIEconPoliticalForumAuditLog"},"authorizationType":null,"authorizationRole":"administrator","prerequisites":[],"name":"index"},{"specification":"Retrieve a single immutable audit log entry by its primary key from the econ_political_forum_audit_logs Prisma model. This operation returns the canonical audit record used for legal, compliance, and incident review. The Prisma model for audit logs does NOT include a deleted_at field; treat audit entries as append-only and immutable. Any removal of audit entries is a separate administrative/legal procedure and is not represented by soft-delete semantics in the schema.\n\nSecurity and permissions: Only administrators may call this endpoint. Access to raw `details` is restricted: by default the response returns a redacted `details` view. Requests for raw `details` require explicit elevated privilege and all such accesses MUST be recorded in the system audit trail by server-side logic. If the requested record does not exist (never created or permanently removed by legal/admin process), return 404. If the requested id is malformed, return 400. If the entry is linked to a moderation case with an active legal_hold, require additional entitlement and log the access; otherwise deny with 403.\n\nBehavior and relationships: The returned object contains canonical audit fields (id, registereduser_id, moderator_id, post_id, thread_id, report_id, moderation_case_id, action_type, target_type, target_identifier, details (redacted by default), created_at, created_by_system). Implementers may enrich the response with human-friendly metadata (e.g., case_number) for convenience, but the canonical audit fields must be preserved. Access to entries related to legal holds must follow legal workflows and be tightly gated.","path":"/econPoliticalForum/administrator/auditLogs/{auditLogId}","method":"get","summary":"Retrieve detailed audit log entry by id (admin only)","description":"Retrieve a single immutable audit log entry by id.\n\nPurpose and overview: Returns the audit log record stored in econ_political_forum_audit_logs for detailed inspection by administrators. Use this for investigations, appeals, and legal compliance checks. The audit log schema is append-only and has no soft-delete field; deletions are administrative/legal actions and must be handled by separate policy and tooling.\n\nSecurity and permissions: Access restricted to administrator role. By default the `details` field is redacted; raw `details` requires explicit elevated privilege and must be recorded in the audit trail. If the audit entry references a moderation case with legal_hold=true, require additional entitlement to view raw content and log the access. All accesses to this endpoint MUST be logged by server-side audit mechanisms.\n\nValidation and expected behavior: Validate the auditLogId path parameter as a UUID. If the caller is not an authorized administrator, return 403. If the record is not found (including permanently removed per legal/admin action), return 404. For malformed UUIDs return 400. For unexpected server errors return 500 with a standard error envelope.","parameters":[{"name":"auditLogId","in":"path","description":"Unique identifier (UUID) of the target audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log entry matching the requested id. The `details` field is redacted by default; requests for raw details require elevated privilege and will be audited.","typeName":"IEconPoliticalForumAuditLog"},"authorizationType":null,"authorizationRole":"administrator","prerequisites":[],"name":"at"},{"specification":"Search and retrieve paginated legal hold records. This operation queries the Prisma model `econ_political_forum_legal_holds` and supports filtering by holder (registereduser_id), post_id, thread_id, moderation_case_id, hold_reason, is_active, and hold_start/hold_end date ranges. It supports pagination (page/limit or cursor), sorting (created_at, hold_start), and returns a paginated container of legal hold summaries. Intended use: administrative evidence and retention management and lawful-disclosure workflows. Implementation notes: results must be redacted based on caller privileges; server must enforce administrator authorization and record audit logs for read access.","path":"/econPoliticalForum/administrator/legalHolds","method":"patch","summary":"Search and retrieve paginated legal hold records (administrator only)","description":"Retrieve a filtered and paginated list of legal hold records for administrative review.\n\nThis endpoint allows authorized administrators to search legal holds by holder (registereduser_id), targeted post or thread, associated moderation case, hold reason, active status, and date ranges for hold_start/hold_end. The request supports pagination (page/limit or cursor), sorting by created_at or hold_start, and advanced filter combinations.\n\nSecurity and privacy: Access is limited to users with the `administrator` role; server-side authorization checks are mandatory. Responses may include internal `notes` and holder identifiers; these fields must be redacted or summarized for callers without appropriate privileges. All administrative read actions should be recorded in the audit log for compliance and traceability.\n\nValidation: Request fields must use ISO 8601 date formats for date ranges and UUIDs for identifier filters. Invalid parameter formats should return 400 with structured error codes.","parameters":[],"requestBody":{"description":"Search and pagination parameters: holderId (UUID), postId (UUID), threadId (UUID), moderationCaseId (UUID), holdReason (string), isActive (boolean), holdStartFrom (date-time), holdStartTo (date-time), page (integer), limit (integer), cursor (string), sort (string - created_at|hold_start).","typeName":"IEconPoliticalForumLegalHold.IRequest"},"responseBody":{"description":"Paginated list of legal hold summaries matching the search criteria (id, holder summary, post_id, thread_id, moderation_case_id, hold_reason, hold_start, hold_end, is_active, created_at). Sensitive fields like notes may be redacted depending on caller privileges.","typeName":"IPageIEconPoliticalForumLegalHold"},"authorizationType":null,"authorizationRole":"administrator","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"Create the referenced thread before searching legal holds that filter by threadId. POST /econPoliticalForum/registeredUser/threads creates a thread and returns its id; the index operation may rely on that thread existing to match holds tied to that thread."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"Create the referenced post before searching legal holds that filter by postId. POST /econPoliticalForum/registeredUser/posts creates a post and returns its id; the index operation may rely on that post existing to match holds tied to that post."},{"endpoint":{"path":"/econPoliticalForum/administrator/moderationCases","method":"post"},"description":"Create the referenced moderation case before searching legal holds that filter by moderationCaseId. POST /econPoliticalForum/administrator/moderationCases creates a moderation case and returns its id; the index operation may rely on that case existing to match holds associated with it."}]},{"specification":"Retrieve a single legal hold record by its UUID. This operation reads a single row from the Prisma model `econ_political_forum_legal_holds` by primary key (id) and returns the detailed record for administrative review. Returned fields may include id, registereduser_id, post_id, thread_id, moderation_case_id, hold_reason, hold_start, hold_end, is_active, notes, and created_at. Implementation notes: server must enforce administrator authorization; redact `notes` or other PII for callers without explicit privilege. Log all read access to the audit trail.","path":"/econPoliticalForum/administrator/legalHolds/{legalHoldId}","method":"get","summary":"Retrieve a single legal hold record by ID (administrator only)","description":"Fetch detailed information for a single legal hold by UUID. The endpoint validates the path parameter as a UUID (400 for malformed), returns 404 when not found, and 403 when the caller lacks administrator privileges.\n\nSecurity: Only administrators may access full details. Notes and internal evidence references should be redacted unless the calling administrator has elevated permissions. Administrative reads must be logged in the audit trail for compliance.\n\nDatabase relation: Uses the `econ_political_forum_legal_holds` model primary key `id`. Ensure DTO matches model fields.","parameters":[{"name":"legalHoldId","description":"Unique identifier (UUID) of the target legal hold record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed legal hold record (may include id, registereduser_id, post_id, thread_id, moderation_case_id, hold_reason, hold_start, hold_end, is_active, notes, created_at). Fields may be redacted based on caller privileges.","typeName":"IEconPoliticalForumLegalHold"},"authorizationType":null,"authorizationRole":"administrator","name":"at","prerequisites":[]},{"specification":"Retrieve legal hold records associated with a specific thread from the Prisma table `econ_political_forum_legal_holds`. This operation exposes an administrative read-only API that allows platform administrators to list active and historical legal holds tied to a thread. The operation must read from the `econ_political_forum_legal_holds` table and return records with fields such as: id, registereduser_id (holder), post_id, thread_id, moderation_case_id, hold_reason, hold_start, hold_end, is_active, notes, and created_at. Pagination and basic filtering (is_active, hold_start/hold_end date ranges) are supported by the API layer. The operation is strictly for viewing legal hold metadata and does not modify database state. Implementers must ensure that legal holds prevent any purge or deletion workflows at the application level while is_active is true; this enforcement is part of business logic and not implemented by this read endpoint. This operation is associated with the Prisma model: econ_political_forum_legal_holds.","path":"/econPoliticalForum/administrator/threads/{threadId}/legalHolds","method":"get","description":"Purpose and overview:\n\nRetrieve the list of legal hold records associated with a single thread. Legal holds are administrative records indicating that the referenced content (thread or related posts) must be preserved and not purged due to legal or investigatory requirements. This endpoint returns metadata about each hold so administrators can review hold reason, scope, active window, and related case identifiers.\n\nSecurity and permissions:\n\nThis endpoint exposes sensitive information and is restricted to administrative users. Only users with administrator privileges may call this operation. The system must verify caller authorization before returning any legal-hold records and must log access in the audit trail for compliance.\n\nRelationship to Prisma DB and entities:\n\nResults are sourced from the `econ_political_forum_legal_holds` Prisma model which includes (among others) the fields: `id`, `registereduser_id` (holder), `post_id`, `thread_id`, `moderation_case_id`, `hold_reason`, `hold_start`, `hold_end`, `is_active`, `notes`, and `created_at`. Records returned by this endpoint are those where `thread_id` equals the provided path parameter. The endpoint must not attempt to infer or return fields that are not stored in that table.\n\nValidation rules and business logic:\n\n- The `threadId` path parameter MUST be a valid UUID. Requests with malformed UUIDs MUST return 400 with a clear error message.\n- Only administrator-role callers MAY access the data; unauthorized requests MUST return 403.\n- The API supports pagination and lightweight filtering (query parameters) for `is_active` (true/false) and date-range filters on `hold_start` and/or `hold_end`. If no filters are provided, return recent holds first, paginated.\n- This is a read-only operation and MUST NOT change `econ_political_forum_legal_holds` records or release holds.\n\nRelated operations and usage:\n\n- Use GET /posts/{postId}/legalHolds to list legal holds targeted at a specific post (sibling endpoint).\n- Administrative APIs that create, update, or release legal holds are separate secured endpoints (not part of this operation) and should emit audit log entries and, when applicable, apply legal hold flags that prevent purge flows.\n\nExpected behavior and error handling:\n\n- 200: Returns a paginated list of legal hold records matching the threadId and optional filters.\n- 400: Invalid threadId format or invalid filter parameters.\n- 403: Caller not authorized (requires administrator role).\n- 404: Thread not found (if the threadId does not exist) or no holds found (200 with empty data is preferred for no holds).\n- 500: Internal server error. Implementers should log details server-side and return a generic error to clients.","summary":"List legal holds for a thread (administrator only)","parameters":[{"name":"threadId","description":"Unique identifier (UUID) of the target thread whose legal holds will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of legal hold records associated with the specified thread. Each item corresponds to a row in the `econ_political_forum_legal_holds` table and includes fields such as id, registereduser_id, post_id, thread_id, moderation_case_id, hold_reason, hold_start, hold_end, is_active, notes, created_at.","typeName":"IPageIEconPoliticalForumLegalHold"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"The target thread (threadId) must exist before listing its legal holds. POST /econPoliticalForum/registeredUser/threads creates a thread and returns its id. If this prerequisite fails, the legal-holds listing will not find the thread and may return 404 or an empty result."}]},{"specification":"Retrieve legal hold records associated with a specific post from the Prisma table `econ_political_forum_legal_holds`. This administrative read endpoint returns legal hold metadata tied to a post (post_id). It must read fields including id, registereduser_id, post_id, thread_id, moderation_case_id, hold_reason, hold_start, hold_end, is_active, notes, and created_at from the `econ_political_forum_legal_holds` model. The endpoint supports pagination and basic filtering (is_active and date ranges). It only returns data and does not modify hold state. Business logic must ensure that active holds prevent deletion/purging of the targeted post at other service layers. Associated Prisma model: econ_political_forum_legal_holds.","path":"/econPoliticalForum/administrator/posts/{postId}/legalHolds","method":"get","description":"Purpose and overview:\n\nReturn legal hold entries that apply to a particular post. Legal holds signal that evidence or content must be preserved for legal, investigatory, or compliance reasons. This endpoint provides administrators with the metadata needed to assess hold scope and timing.\n\nSecurity and permissions:\n\nAccess to legal-hold metadata is restricted to administrators. Calls must be authorized and authenticated; access attempts by non-administrators must be rejected and audited.\n\nRelationship to Prisma DB and entities:\n\nData returned originates from the `econ_political_forum_legal_holds` table and is filtered by `post_id` matching the provided path parameter. The response includes the model's canonical fields (id, registereduser_id, post_id, thread_id, moderation_case_id, hold_reason, hold_start, hold_end, is_active, notes, created_at). The endpoint must not invent or surface fields not present in the model.\n\nValidation rules and business logic:\n\n- The `postId` path parameter MUST be a valid UUID; otherwise the API MUST return a 400 error with a clear message.\n- Only administrator-role callers are permitted; unauthorized requests MUST return 403.\n- The endpoint supports pagination and simple filters (is_active boolean and hold_start/hold_end date ranges). If no holds exist, return an empty paginated data set (200). The endpoint is read-only and does not alter hold states.\n\nRelated operations and usage:\n\n- GET /threads/{threadId}/legalHolds lists holds tied to a thread-level scope.\n- Administrative write APIs (create/release holds) are separate and must produce audit log entries and enforce hold effects throughout deletion/purge flows.\n\nExpected behavior and error handling:\n\n- 200: Paginated result set of legal holds for the given postId.\n- 400: Malformed postId or invalid filter parameters.\n- 403: Caller lacks administrator privileges.\n- 404: Post not found (or 200 with empty list when no holds exist, per API design preference).\n- 500: Internal server error; log details server-side and return a generic error message to clients.","summary":"List legal holds for a post (administrator only)","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the target post whose legal holds will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of legal hold records associated with the specified post. Each item corresponds to the `econ_political_forum_legal_holds` table and includes fields such as id, registereduser_id, post_id, thread_id, moderation_case_id, hold_reason, hold_start, hold_end, is_active, notes, created_at.","typeName":"IPageIEconPoliticalForumLegalHold"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"A parent thread must exist before creating a post. POST /econPoliticalForum/registeredUser/threads creates the required thread resource (thread_id) that posts reference. If this prerequisite fails, subsequent post creation will be impossible."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"The target post (postId) must exist before listing its legal holds. POST /econPoliticalForum/registeredUser/posts creates a post within an existing thread and returns its id. If this prerequisite fails, the legal-holds listing will not find the post and may return 404 or an empty result."}]},{"specification":"Retrieve a paginated and filterable list of notification events for the authenticated registered user. Operates on the Prisma table econ_political_forum_notifications and returns summary rows scoped to the authenticated recipient (registereduser_id). Supports pagination, sorting, filters (is_read, type, related_thread_id, related_post_id, created_from/created_to) and short full-text search over title/body/payload. This operation is read-only and MUST NOT perform any state changes (for example, marking notifications read). Bulk state changes must be performed via a separate update endpoint. The implementation MUST enforce server-side row-level ownership: the authenticated user's id must equal registereduser_id. Deleted notifications (deleted_at not null) are excluded by default. Admin cross-user listing is out-of-scope for this endpoint and must be implemented as a separate, audited admin API.","authorizationType":null,"description":"Purpose and overview:\n\nRetrieve a paginated, filterable list of notification summaries for the currently authenticated registered user. Returned items are optimized for list views and include: id, type, title, is_read, created_at, related ids (related_thread_id, related_post_id) and a short payload excerpt. This endpoint only reads stored events and does not mutate notification state.\n\nSecurity and permissions:\n\nThis endpoint requires an authenticated registered user. The server MUST verify that the authenticated subject's id equals each notification.registereduser_id returned. Any attempt to access another user's notifications MUST result in 403 Forbidden. Administrator-level cross-user access must be implemented separately and requires administrator role and mandatory audit logging.\n\nRelationship to database entities:\n\nReads from econ_political_forum_notifications. Important columns used: registereduser_id, actor_registereduser_id, type, title, body, payload, is_read, delivered_at, related_thread_id, related_post_id, related_moderation_case_id, created_at, deleted_at.\n\nValidation rules and business logic:\n\n- Pagination defaults: page=1, limit=20. Maximum limit = 100.\n- Filterable fields: is_read (boolean), type (string), related_thread_id (uuid), related_post_id (uuid), created_from (ISO 8601), created_to (ISO 8601).\n- Search: server-side sanitized short-text search over title, body, payload; relevance sorting is optional when q is provided.\n- Sorting: created_at (default desc), relevance (when q present), or type.\n- Deleted notifications (deleted_at not null) are excluded unless explicitly included by an admin-level query (not supported here).\n\nRelated operations and error handling:\n\n- Use GET /econPoliticalForum/registeredUser/notifications/{notificationId} to fetch single notification details.\n- Use PATCH /econPoliticalForum/registeredUser/notifications/mark (or equivalent) to perform bulk mark-as-read/unread operations (separate endpoint).\n- Typical errors: 401 Unauthorized if not authenticated, 403 Forbidden if accessing another user's records, 400 Bad Request for invalid filters, 429 Too Many Requests for rate limiting, 500 Internal Server Error for server faults.","summary":"List and search the authenticated user's notifications (paginated, read-only)","parameters":[],"requestBody":{"description":"Search and pagination parameters for notification listing (read-only). Use IEconPoliticalForumNotification.IRequest to specify page/cursor, limit, filters (is_read, type, related_thread_id, related_post_id), search query 'q', sort, and date range. This contract MUST NOT include any state-changing flags (for example, markAsRead).","typeName":"IEconPoliticalForumNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries for the authenticated user.","typeName":"IPageIEconPoliticalForumNotification.ISummary"},"authorizationRole":"registeredUser","name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/registeredUser/threads","method":"post"},"description":"A thread must exist before notifications can reference its id via related_thread_id. POST /econPoliticalForum/registeredUser/threads creates a new econ_political_forum_threads record and returns its id; without an existing thread, filters by related_thread_id would yield no matches or invalid references causing 400/404 errors."},{"endpoint":{"path":"/econPoliticalForum/registeredUser/posts","method":"post"},"description":"A post must exist before notifications can reference its id via related_post_id. POST /econPoliticalForum/registeredUser/posts creates a new econ_political_forum_posts record and returns its id; without an existing post, filters by related_post_id would yield no matches or invalid references causing 400/404 errors."}],"path":"/econPoliticalForum/registeredUser/notifications","method":"patch"},{"specification":"Retrieve a single notification record by id from the econ_political_forum_notifications table. Returns the full stored notification record for the authenticated recipient, including payload and related identifiers. The implementation MUST verify that the caller is the notification recipient (registereduser_id == authenticated user id); administrators may have separate audited endpoints for cross-user retrieval. If deleted_at is set, return 404 for non-admin callers.","authorizationType":null,"description":"Purpose and overview:\n\nFetch a detailed notification for the authenticated registered user identified by notificationId. Returns full fields: id, type, title, body, payload, is_read, delivered_at, related_thread_id, related_post_id, related_moderation_case_id, created_at and metadata.\n\nSecurity and permissions:\n\nOnly the notification recipient may retrieve this resource. The server MUST validate that the authenticated user's id matches notification.registereduser_id. If the caller is not the recipient, return 403 Forbidden. Admin cross-user access is out-of-scope here and requires a separate audited endpoint.\n\nRelationship to database entities:\n\nReads the row from econ_political_forum_notifications identified by id. Important columns: registereduser_id, actor_registereduser_id, payload, related_moderation_case_id, deleted_at.\n\nValidation rules and business logic:\n\n- Path parameter notificationId is required and must be a valid UUID.\n- If notification.deleted_at is set, return 404 Not Found to the recipient.\n- The endpoint does not mutate is_read; marking read/unread must be done through a dedicated update endpoint.\n\nRelated operations and error handling:\n\n- Use PATCH /econPoliticalForum/registeredUser/notifications/mark to update read state.\n- Typical errors: 400 Bad Request for invalid UUID, 401 Unauthorized if not authenticated, 403 Forbidden if caller is not recipient, 404 Not Found if notification does not exist or is deleted, 429 Too Many Requests for rate limiting, 500 Internal Server Error for server faults.","summary":"Get a single notification detail by ID for the authenticated user (read-only)","parameters":[{"name":"notificationId","description":"Target notification's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification record for the recipient","typeName":"IEconPoliticalForumNotification"},"authorizationRole":"registeredUser","name":"at","prerequisites":[],"path":"/econPoliticalForum/registeredUser/notifications/{notificationId}","method":"get"},{"specification":"Operation to update an existing notification record in the econ_political_forum_notifications table. This operation targets the notifications table defined in the Prisma schema (econ_political_forum_notifications) and is intended to allow an authenticated registered user to update mutable notification attributes they own (for example, mark as read/unread, update delivery timestamp, or update read-state). The implementation MUST enforce ownership (registered user may only update their own notifications) and audit/moderation logging. The operation accepts a notificationId path parameter (UUID) and an IEconPoliticalForumNotification.IUpdate request body. It returns the updated IEconPoliticalForumNotification on success. Business rules and validation must follow the Prisma model: only fields present on the econ_political_forum_notifications model (for example is_read, delivered_at, title, body, payload, related_* ids) may be updated; created_at is immutable; deleted_at is used for soft-delete state. Changes to notification records must produce an audit event in the moderation/audit logs as required by system policy.","description":"Update a single notification by its unique identifier.\n\nPurpose and overview: This operation updates mutable fields of a notification stored in the econ_political_forum_notifications table. Typical uses include marking a notification as read/unread, updating the delivered_at timestamp after delivery, or updating small presentation fields (title, body) when server-side adjustments are required. The operation returns the full, up-to-date notification record after the update.\n\nSecurity and permissions: Only an authenticated registered user may call this endpoint to modify notifications. The server MUST enforce that the authenticated user either owns the notification (notification.registereduser_id) or has explicit administrative privileges. The implementation must reject attempts by users to change notifications they do not own with a 403 Forbidden response.\n\nRelationship to DB entity: This operation maps to the econ_political_forum_notifications Prisma model. Relevant columns include registereduser_id (recipient), actor_registereduser_id (optional actor), type, title, body, payload, is_read, delivered_at, related_thread_id, related_post_id, related_moderation_case_id, created_at, updated_at, and deleted_at. Do not attempt to update created_at; only mutable fields may be modified.\n\nValidation rules and business logic:\n- notificationId must be a valid UUID and refer to an existing notification.\n- Request body must only include fields allowed by IEconPoliticalForumNotification.IUpdate; server must validate types (e.g., is_read is boolean, delivered_at is ISO 8601 timestamp if provided).\n- Ownership check: the caller must be the recipient (registereduser_id) or an administrator.\n- If notification is soft-deleted (deleted_at not null), updates are rejected unless the caller is an administrator and action explicitly reactivates the notification.\n- All successful updates MUST create an audit log entry (econ_political_forum_audit_logs) recording the acting user, action_type=\"update_notification\", target_identifier and details summarizing the change.\n\nRelated operations: Listing notifications for a user (PATCH /users/{userId}/notifications) and notification delivery endpoints (internal) are typically used together. For programmatic marking-as-read flows, clients should prefer idempotent calls.","summary":"Update a notification (mark read/unread, update delivered timestamp)","parameters":[{"name":"notificationId","description":"UUID of the target notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification fields to update (for example: is_read, delivered_at, title, body, payload). Only properties defined on the econ_political_forum_notifications model are allowed.","typeName":"IEconPoliticalForumNotification.IUpdate"},"responseBody":{"description":"Updated notification record reflecting persisted changes.","typeName":"IEconPoliticalForumNotification"},"authorizationRoles":["registeredUser"],"name":"update","path":"/econPoliticalForum/registeredUser/notifications/{notificationId}","method":"put","authorizationRole":"registeredUser","authorizationType":null,"prerequisites":[]},{"specification":"Retrieve a paginated, filterable list of notifications for a specific registered user from the econ_political_forum_notifications table. This operation is designed for complex query payloads (filters, pagination, sort) and therefore uses PATCH with a request body IEconPoliticalForumNotification.IRequest to express search criteria. The operation returns a paginated page type IPageIEconPoliticalForumNotification.ISummary containing notification summaries for the user. Business rules: only the user themselves or administrators may retrieve a user's notifications; filters include is_read, type, date ranges, and related entity ids; default page size and maximum page size are defined by API policy (e.g., default=20, max=100).","description":"List and search notifications for a given user.\n\nPurpose and overview: This operation provides a flexible search and pagination interface for a user's notifications stored in econ_political_forum_notifications. Clients may filter by read status, notification type (mention, reply, moderation, system), date ranges (created_at between), and related entity ids (related_thread_id, related_post_id). Results are returned in a paginated container optimized for UI lists.\n\nSecurity and permissions: Only the authenticated user identified by {userId} or an administrator can retrieve this list. Implementations MUST enforce that a registered user may only request their own notifications unless the caller holds administrative privileges. The operation must respect per-user notification preferences when computing delivery flags (for example, hide items the user has opted out of via notification preferences if requested by client).\n\nRelationship to DB entity: Maps to econ_political_forum_notifications. Key columns used for filtering and projection: registereduser_id, type, is_read, created_at, delivered_at, related_thread_id, related_post_id, related_moderation_case_id, and payload. Returned summaries should include id, type, title, body excerpt, is_read, created_at, and related ids for client linking.\n\nFiltering, pagination, and sort rules:\n- Pagination supports cursor or page/limit patterns in the request payload. Default page size = 20; maximum page size = 100.\n- Supported filters: is_read (boolean), type (string), since (ISO 8601), until (ISO 8601), related_thread_id, related_post_id.\n- Sorting options: newest, oldest, unread_first, relevance (when full-text query provided in payload).\n\nValidation and behavior:\n- userId path parameter must be a valid UUID.\n- If a registeredUser requests notifications for a different userId, server returns 403 Forbidden.\n- Empty result sets return an empty page container with appropriate pagination metadata.\n\nRelated operations: Update single notification (PUT /notifications/{notificationId}) for marking-as-read; real-time delivery channels (SSE/WebSocket) are recommended to reduce polling.\n","summary":"Search and list a user's notifications (paginated)","parameters":[{"name":"userId","description":"Unique identifier of the registered user whose notifications are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for notifications (filters, sort, pagination cursor or page/limit). Default page size=20, max=100.","typeName":"IEconPoliticalForumNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching the search criteria.","typeName":"IPageIEconPoliticalForumNotification.ISummary"},"authorizationRoles":["registeredUser"],"name":"index","path":"/econPoliticalForum/registeredUser/users/{userId}/notifications","method":"patch","authorizationRole":"registeredUser","authorizationType":null,"prerequisites":[]},{"specification":"Update a single notification belonging to a registered user. This operation targets the econ_political_forum_notifications table in the Prisma schema and permits the notification recipient to change allowed mutable fields (for example: is_read, delivered_at, is_read flag, muted_until, and limited payload updates). The operation enforces ownership checks against econ_political_forum_notifications.registereduser_id, records audit entries for moderation-related changes, and respects active legal holds in econ_political_forum_legal_holds that prevent removal of evidence. Implementers should validate field-level changes against notification preferences (econ_political_forum_notification_preferences) and sanitize any payload content before persisting.","description":"Purpose and overview:\n\nThis operation updates a single notification record for a registered user. It maps to the econ_political_forum_notifications model and updates fields that are intended to be user-managed (for example: is_read, is_read timestamps, muted_until, and lightweight payload adjustments). It preserves auditability by creating corresponding audit log entries in econ_political_forum_audit_logs when updates are related to moderation or legal workflows.\n\nSecurity considerations and user permissions:\n\nOnly the authenticated recipient (the registered user whose id equals the path parameter userId) may perform this operation on their own notifications. Administrators and moderators have separate admin endpoints for broader notification management. The implementation MUST verify that the notification's registereduser_id equals the authenticated caller's id and return 403 when ownership is not established. Any attempt to perform destructive operations on notifications that are subject to an active legal hold (econ_political_forum_legal_holds.is_active) must be rejected with a 403 and an explanatory reason code.\n\nRelationship to underlying database entities:\n\nThis operation updates fields defined on econ_political_forum_notifications such as is_read (boolean), delivered_at (DateTime), payload (JSON string), is_read flag, and related_* references (related_thread_id, related_post_id, related_moderation_case_id). When an update concerns a moderation-related notification (for example changes to related_moderation_case_id or payload referencing a moderation case), the system MUST append an audit entry in econ_political_forum_audit_logs documenting the actor, action_type, target identifiers, and the rationale. The operation should consult econ_political_forum_notification_preferences to respect user delivery preferences when interpreting delivered_at or delivery changes.\n\nValidation rules and business logic:\n\n- Both path parameters (userId and notificationId) must be valid UUIDs.\n- The notification must exist and belong to the provided userId; otherwise return 404.\n- Only allowed fields in the IEconPoliticalForumNotification.IUpdate DTO are accepted; the server must reject unknown keys with 400.\n- If a legal hold exists for the related thread/post/case the operation attempts to modify, the update must be rejected with 403 and a legal_hold reason.\n- All incoming payload data must be sanitized for HTML/Markdown and must not contain executable scripts or unauthorized references.\n\nRelated operations:\n\n- GET /users/{userId}/notifications — list a user's notifications (paginated)\n- PATCH /users/{userId}/notifications/{notificationId}/read-all — bulk mark-read (user convenience)\n- GET /notifications/{id} — admin inspection of a single notification (admin-only)\n\nExpected behavior and error handling:\n\n- Success: returns 200 with the updated notification object (IEconPoliticalForumNotification) reflecting committed changes.\n- 400: validation errors (unknown fields, invalid date formats, or sanitized payload removed required data).\n- 401: unauthenticated caller.\n- 403: caller is not the notification owner or action conflicts with an active legal hold.\n- 404: notification not found or does not belong to the user.\n- 429: rate-limited (excessive updates).\n- 500: unexpected server error.","summary":"Update a user's notification (mark read/unread, mute, or update delivery state)","parameters":[{"name":"userId","in":"path","description":"Unique identifier of the notification recipient (registered user)","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","in":"path","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the notification. Allowed updates include: is_read (boolean), delivered_at (ISO 8601 timestamp), muted_until (ISO 8601 timestamp or null), and limited payload changes (serialized JSON string) subject to server-side sanitization. Unknown fields are rejected. DTO reference: IEconPoliticalForumNotification.IUpdate","typeName":"IEconPoliticalForumNotification.IUpdate"},"responseBody":{"description":"Updated notification object reflecting applied changes","typeName":"IEconPoliticalForumNotification"},"authorizationRoles":["registeredUser"],"path":"/econPoliticalForum/registeredUser/users/{userId}/notifications/{notificationId}","method":"patch","name":"patchByUseridAndNotificationid","authorizationRole":"registeredUser","authorizationType":null,"prerequisites":[]},{"specification":"Admin-only filtered search and retrieval for registered users. This operation queries the econ_political_forum_registereduser table with support for pagination, sorting, and filters (username partial match, display_name partial match, email_verified boolean, created_at range, and is_banned status). Returned summaries omit sensitive fields (for example password_hash) and queries that include PII filters (email exact match) must be audited in econ_political_forum_audit_logs. Implementation should enforce page size limits and rate-limiting to prevent large exports.","path":"/econPoliticalForum/administrator/users","method":"patch","summary":"Search and retrieve a filtered, paginated list of registered users (admin only)","description":"Purpose and overview:\n\nThis operation performs complex retrieval of registered user records for administrative user management, moderation, and audit tasks. It maps to the econ_political_forum_registereduser model and returns summarized user information safe for admin dashboards while omitting sensitive fields (password_hash and session/reset token data MUST NOT be returned).\n\nSecurity considerations and permissions:\n\nAccess is restricted to administrators. Calls must be authenticated and authorized; unauthorized callers receive 403. When filters include PII (for example exact email match), the system MUST record an audit entry in econ_political_forum_audit_logs capturing the admin id, filter parameters used, and timestamp. Results are rate-limited and paginated to prevent large exports.\n\nRelationship to underlying database entities and business logic:\n\nThis operation relies on indexes on username, display_name, created_at, and email_verified for efficient queries. Returned summaries should include id, username, display_name (redacted if deleted_at is set), email_verified flag (redacted if deleted), created_at, last_login_at, and is_banned status. Do NOT return password_hash, failed_login_attempts, locked_until, session tokens, or password reset records in any summary payloads.\n\nValidation rules and business logic:\n\n- Request body must include pagination (page and limit or a cursor), optional filters: username (partial), displayName (partial), emailVerified (boolean), createdAtFrom/To (ISO 8601), isBanned (boolean). Sorting may be by created_at or username.\n- Default page size: 20. Maximum page size: 100.\n- If PII filters are used (email exact match), require additional audit logging and optional elevated admin confirmation per policy.\n\nRelated operations:\n\n- GET /users/{userId} — retrieve single user detail (admin or owner)\n- PUT/PATCH /users/{userId} — update user profile (owner or admin)\n- DELETE /users/{userId} — anonymize or remove user (admin)\n\nExpected behavior and error handling:\n\n- Success: 200 with a paginated summary payload (IPageIEconPoliticalForumRegisteredUser.ISummary).\n- 400: invalid filter or pagination parameters.\n- 401: unauthenticated.\n- 403: caller lacks administrator privileges.\n- 429: rate-limited.\n- 500: server error or query failure.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for registered users (filters: username, displayName, emailVerified, createdAt range; pagination: page/limit or cursor; sorting: created_at, username). DTO reference: IEconPoliticalForumRegisteredUser.IRequest","typeName":"IEconPoliticalForumRegisteredUser.IRequest"},"responseBody":{"description":"Paginated list of registered user summaries matching search criteria","typeName":"IPageIEconPoliticalForumRegisteredUser.ISummary"},"authorizationType":null,"authorizationRole":"administrator","prerequisites":[],"name":"index"},{"specification":"Update the is_read status of a single notification. This operation targets the econ_political_forum_notifications table in the Prisma schema and allows the authenticated notification recipient to mark a notification as read or unread. It enforces ownership checks against econ_political_forum_notifications.registereduser_id, records an audit entry in econ_political_forum_audit_logs when the update concerns moderation-related notifications, and respects active legal holds (econ_political_forum_legal_holds.is_active) that may prevent administrative changes. Implementation must reject unknown fields and must not permit updates to system-managed fields such as payload or delivered_at; muting is handled via thread follow or notification preferences endpoints.","path":"/econPoliticalForum/registeredUser/users/{userId}/notifications/{notificationId}","method":"put","summary":"Update a user's notification read state (mark read/unread) — owner only","description":"Purpose and overview:\n\nThis operation updates the read state (is_read) of a single notification for its registered recipient. It maps to the econ_political_forum_notifications model and permits only the user-managed field `is_read` to be changed. The API enforces strict validation and rejects unknown keys to avoid accidental mutation of system-managed notification data.\n\nSecurity considerations and user permissions:\n\nOnly the authenticated recipient (the registered user whose id equals the path parameter userId) may perform this operation on their own notifications. The implementation MUST verify that the notification's registereduser_id equals the authenticated caller's id and return 403 when ownership is not established. Administrators have separate admin endpoints for broader notification management. Any attempt to modify system-managed fields (payload, delivered_at) via this endpoint must be rejected. If the notification is connected to a moderation or legal case that is subject to a legal hold (econ_political_forum_legal_holds.is_active), implementations should apply policy to prevent prohibited modifications where applicable.\n\nRelationship to underlying database entities:\n\nThis operation updates the `is_read` Boolean on econ_political_forum_notifications. If the notification refers to a moderation case (related_moderation_case_id) and the update should be recorded for audit, the server MUST append an audit entry to econ_political_forum_audit_logs capturing the acting user id, action_type ('notification.mark_read'/'notification.mark_unread'), target identifiers, and timestamp.\n\nValidation rules and business logic:\n\n- Path parameters (userId and notificationId) MUST be valid UUIDs.\n- The notification must exist and belong to the provided userId; otherwise return 404.\n- The request body MUST contain only the allowed property `is_read` (boolean). Unknown keys MUST be rejected with 400.\n- The server MUST sanitize any minimal textual inputs (if any) and must not accept payload edits via this endpoint.\n\nRelated operations:\n\n- GET /users/{userId}/notifications — list a user's notifications (paginated)\n- PATCH /users/{userId}/notifications/{notificationId}/read-all — bulk mark-read (user convenience)\n- GET /notifications/{id} — admin inspection of a single notification (admin-only)\n\nExpected behavior and error handling:\n\n- Success: returns 200 with the updated notification object (IEconPoliticalForumNotification) reflecting the committed `is_read` change.\n- 400: validation errors (unknown fields or invalid value types).\n- 401: unauthenticated caller.\n- 403: caller is not the notification owner or action conflicts with legal-hold policy.\n- 404: notification not found or does not belong to the user.\n- 429: rate-limited (excessive updates).\n- 500: unexpected server error.","parameters":[{"name":"userId","in":"path","description":"Unique identifier of the notification recipient (registered user)","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","in":"path","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for notification. Allowed field: is_read (boolean). Unknown fields are rejected. DTO reference: IEconPoliticalForumNotification.IUpdate","typeName":"IEconPoliticalForumNotification.IUpdate"},"responseBody":{"description":"Updated notification object reflecting applied changes","typeName":"IEconPoliticalForumNotification"},"authorizationType":null,"authorizationRole":"registeredUser","prerequisites":[],"name":"putByUseridAndNotificationid"},{"specification":"Retrieve a sanitized public user profile summary from the Prisma model econ_political_forum_registereduser. This operation returns a public-facing summary DTO drawn only from allowed fields on the registereduser model. It respects privacy rules: public summary excludes sensitive fields (password_hash, failed_login_attempts, locked_until, deleted_at, email), and additional fields (verified_at, last_login_at) are only available to the account owner or administrators via an expanded view. This operation maps to the registereduser table and must return 404 for soft-deleted accounts (deleted_at set) unless caller is an authorized administrator who can view archived accounts.","path":"/econPoliticalForum/users/{userId}","method":"get","summary":"Retrieve public summary of a registered user","description":"Purpose and overview:\n\nRetrieve a sanitized public summary for a registered user using the econ_political_forum_registereduser table. This endpoint returns displayable profile information intended for public pages (for example: id, username, display_name, bio, avatar_uri, email_verified, created_at, updated_at). It MUST NOT expose sensitive fields such as password_hash, failed_login_attempts, locked_until, deleted_at, or email in the public view.\n\nSecurity and permissions:\n\nThis operation is public-read for the public summary. If the caller is authenticated and either the account owner or an administrator, the service MAY return an expanded view containing private fields (for example: verified_at). The service MUST NOT include password_hash, failed_login_attempts, locked_until, or deleted_at in any response. Exposure of email or other contact PII is disallowed in the public summary and allowed only in owner/admin expanded views with explicit authorization.\n\nRelationship to database entity:\n\nOperates on econ_political_forum_registereduser. The implementation should read the registereduser row by id (UUID) and transform it into the public summary DTO (IEconPoliticalForumRegisteredUser.ISummary). If deleted_at is set, return 404 for public callers; administrators may access archived records subject to audit policy.\n\nValidation and business rules:\n\n- Path parameter userId must be a UUID.\n- If the target account has deleted_at set (soft-deleted), return 404 to public callers; administrators may be allowed to view archived records only if audit logs are created for the access.\n- The public summary SHALL NOT include email, password_hash, failed_login_attempts, locked_until, or deleted_at.\n- last_login_at and verified_at are restricted and returned only to the owner or administrator (not in public summary).\n\nRelated operations:\n\n- GET /econPoliticalForum/users/{userId}/notificationPreferences (owner/admin) to retrieve preferences\n- GET /econPoliticalForum/threads and GET /econPoliticalForum/posts to list content authored by this user\n\nError handling:\n\n- 400: invalid UUID format\n- 401: authentication required for expanded/private views\n- 403: caller not authorized to view private fields\n- 404: user not found or soft-deleted (for public callers)\n- 500: server error","parameters":[{"name":"userId","in":"path","description":"Unique identifier (UUID) of the target registered user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Sanitized public user summary. Use IEconPoliticalForumRegisteredUser.ISummary for the public view; owner/admin expanded view uses a separate DTO that excludes only secrets.","typeName":"IEconPoliticalForumRegisteredUser.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[]},{"specification":"Retrieve the notification delivery preferences for a registered user from the Prisma model econ_political_forum_notification_preferences. This operation returns the per-user channel toggles (in_app, email, push) and an optional preferences_payload (JSON string) containing per-notification-type overrides. Access is restricted: only the account owner (registeredUser) or an administrator may view these preferences. The implementation MUST fetch the preferences record by registereduser_id and may return a default object when no record exists (product policy must be consistent). Admin access must be audited.","path":"/econPoliticalForum/registeredUser/users/{userId}/notificationPreferences","method":"get","summary":"Get a user's notification preferences (owner or admin)","description":"Purpose and overview:\n\nReturn the notification settings for the specified user based on econ_political_forum_notification_preferences. The response includes channel-level toggles (in_app, email, push) and an optional preferences_payload that contains per-type overrides. The payload is a serialized JSON string; the implementation must validate and sanitize payload contents and must not allow secrets (for example, webhook tokens) to be stored in preferences_payload.\n\nSecurity and permissions:\n\nThis endpoint requires authentication. The caller MUST be either the same registered user (owner) or an administrator. If the caller is an administrator, the service MUST create an immutable audit log entry recording admin id, timestamp, target user id, and reason for access. Owners may view and update their own preferences; administrators may view for support/audit purposes only.\n\nRelationship to database entity:\n\nOperates on econ_political_forum_notification_preferences. Implementation should query by registereduser_id matching the path userId and return the mapped DTO IEconPoliticalForumNotificationPreferences. If the record is soft-deleted (deleted_at not null), behavior should follow product policy (recommended: return default preferences rather than 404) and be consistently implemented.\n\nValidation and business rules:\n\n- Path parameter userId must be a UUID and must reference an existing registered user.\n- Authorization: only the user themself or an administrator may retrieve this resource.\n- preferences_payload must be validated and must not contain secrets or tokens.\n- Administrator reads MUST be recorded in an audit log (admin id, timestamp, target user id, and reason).\n\nRelated operations:\n\n- PUT /econPoliticalForum/registeredUser/users/{userId}/notificationPreferences to update preferences (requires ownership or admin privileges per policy)\n- GET /econPoliticalForum/users/{userId} to retrieve public profile summary\n\nError handling:\n\n- 400: invalid UUID format\n- 401: authentication required\n- 403: caller not authorized to access these preferences\n- 404: user not found (or preferences not found if product policy dictates)\n- 429: rate limit exceeded\n- 500: server error","parameters":[{"name":"userId","in":"path","description":"Unique identifier (UUID) of the target registered user whose preferences are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification preference object (IEconPoliticalForumNotificationPreferences) containing channel toggles and optional per-type overrides payload (serialized JSON string). preferences_payload must be validated/sanitized by server.","typeName":"IEconPoliticalForumNotificationPreferences"},"authorizationType":null,"authorizationRole":"registeredUser","name":"atNotificationPreferences","prerequisites":[]},{"specification":"Administrator-level retrieval of a user's notification preferences (econ_political_forum_notification_preferences). This admin-prefixed endpoint allows administrators to view a user's preferences for support and audit. Admin reads must be auditable and sanitized; preferences_payload must not expose secrets. Behavior for soft-deleted preference records must follow product policy. Use with caution and ensure compliance with privacy and auditing rules.","path":"/econPoliticalForum/administrator/users/{userId}/notificationPreferences","method":"get","summary":"Administrator: get a user's notification preferences","description":"Purpose and overview:\n\nAdministrator view of a user's notification preferences (econ_political_forum_notification_preferences). This endpoint is intended for admin support and audit workflows and returns full preference records including the preferences_payload subject to sanitization rules.\n\nSecurity and permissions:\n\nThis endpoint requires administrator privileges. All administrator reads MUST create an immutable audit log entry recording admin id, timestamp, target user id, and a short reason. Admin access to preferences_payload MUST be subject to content-sanitization rules to avoid exposing secrets.\n\nRelationship to database entity:\n\nOperates on econ_political_forum_notification_preferences. Implementation should fetch the record by registereduser_id and return the mapped DTO IEconPoliticalForumNotificationPreferences. If the preferences row is soft-deleted, follow product policy for return behavior and ensure admin access is still logged.\n\nValidation and business rules:\n\n- Path parameter userId must be a UUID.\n- Authorization: only administrators may call this endpoint.\n- Admin reads MUST be logged in audit logs with reason.\n- preferences_payload must be validated and sanitized before inclusion in responses; disallow secrets.\n\nRelated operations:\n\n- GET /econPoliticalForum/registeredUser/users/{userId}/notificationPreferences (owner view)\n- PUT /econPoliticalForum/administrator/users/{userId}/notificationPreferences (admin update - if implemented must follow stricter rules)\n\nError handling:\n\n- 400: invalid UUID format\n- 401: authentication required\n- 403: caller not authorized (not an administrator)\n- 404: user or preferences not found\n- 500: server error","parameters":[{"name":"userId","in":"path","description":"Unique identifier (UUID) of the target registered user whose preferences are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification preference object (IEconPoliticalForumNotificationPreferences) for admin use. Admin reads must be audited and payload sanitized.","typeName":"IEconPoliticalForumNotificationPreferences"},"authorizationType":null,"authorizationRole":"administrator","name":"atNotificationPreferencesByAdmin","prerequisites":[]},{"specification":"Updates the notification preferences for a registered user. This operation is directly associated with the Prisma table econ_political_forum_notification_preferences and updates the per-user delivery toggles and preferences_payload. The API call modifies fields that map to the table columns: in_app, email, push, preferences_payload, updated_at. Implementers MUST validate that the path parameter userId exists as econ_political_forum_registereduser.id and MUST enforce that the caller is the owner of the preferences or an administrator. Audit logging is system-generated and MUST record the update in econ_political_forum_audit_logs; implementations MUST NOT expose a writable audit endpoint.","path":"/econPoliticalForum/registeredUser/users/{userId}/notificationPreferences","method":"put","summary":"Update a registered user's notification preferences (in-app/email/push)","description":"Purpose and overview:\nThis operation updates a registered user's notification delivery preferences stored in the econ_political_forum_notification_preferences table. Typical fields: in_app, email, push, and an optional preferences_payload (JSON string) for per-type overrides.\n\nSecurity and permissions:\nOnly the owning registered user or an administrator may perform this operation. Implementations MUST verify the authenticated caller matches the path parameter userId or that the caller holds administrator privileges. Under no circumstances should a user be allowed to update another user's preferences unless they have administrator authorization. All successful updates MUST generate an immutable audit entry (system-generated) recording acting principal, action_type (e.g., 'update_notification_preferences'), target registereduser_id, and a brief details payload.\n\nBehavior and business rules:\n- The endpoint supports upsert semantics if product policy allows create-on-update; otherwise the service SHOULD return 404 when no preferences row exists.\n- preferences_payload, when present, MUST be valid JSON and conform to the server-side preferences schema; implementations MUST enforce a maximum payload size and reject invalid payloads with 400.\n- The endpoint MUST NOT allow modification of soft-delete fields; deleted preferences rows require administrative workflows.\n\nValidation and errors:\n- 400: malformed payload or invalid preference values\n- 401: unauthenticated\n- 403: authenticated but not owner and not administrator\n- 404: userId not found (or preferences row not found if upsert is not allowed)\n- 429: rate-limited updates\n","parameters":[{"name":"userId","in":"path","description":"UUID of the registered user whose preferences will be updated (maps to econ_political_forum_notification_preferences.registereduser_id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification preference update payload. Fields correspond to econ_political_forum_notification_preferences columns (in_app, email, push, preferences_payload).","typeName":"IEconPoliticalForumNotificationPreferences.IUpdate"},"responseBody":{"description":"Updated notification preferences record (IEconPoliticalForumNotificationPreferences) reflecting persisted toggles and preferences_payload.","typeName":"IEconPoliticalForumNotificationPreferences"},"authorizationType":null,"authorizationRole":"registeredUser","name":"update","prerequisites":[]},{"specification":"Retrieves a paginated, filterable list of thread summaries associated with the specified tag. This operation queries econ_political_forum_thread_tags to find thread membership, and returns thread metadata from econ_political_forum_threads. Supports full-text search on thread.title, filters by category_id and author_id, created_at date ranges, and pagination via cursor or page/limit. Sorting by aggregated metrics (mostVoted, mostReplied) requires aggregation over econ_political_forum_votes and econ_political_forum_posts and should be implemented using efficient queries or materialized views.","path":"/econPoliticalForum/tags/{tagId}/threads","method":"patch","summary":"List and search threads for a specific tag with pagination and filters","description":"Purpose and overview:\nReturns a filtered and paginated list of thread summaries associated with the specified tag id. The operation sources associations from econ_political_forum_thread_tags and thread metadata from econ_political_forum_threads. Use this endpoint for tag landing pages and tag-based discovery.\n\nVisibility and permissions:\nThis is a public read operation by default (no authentication required). Implementations MUST exclude soft-deleted threads (threads.deleted_at IS NOT NULL) and soft-deleted tags (tags.deleted_at IS NOT NULL) for unauthenticated or regular callers. Moderators and administrators may request includeDeleted to view soft-deleted items for triage.\n\nFiltering, sorting and performance notes:\n- Input filters: full-text query on thread.title, threads.category_id, threads.author_id, threads.created_at range, and membership via econ_political_forum_thread_tags.tag_id.\n- Sorting by aggregated metrics such as \"mostVoted\" or \"mostReplied\" requires pre-computed aggregates (materialized views) or runtime aggregation across votes/posts; implementers should document expected performance and may restrict or disable these sorts if aggregates are not available.\n- Default page size: 20. Maximum allowed page size: 100.\n\nErrors and edge cases:\n- 400: invalid filters (bad date format, unsupported sort value)\n- 404: tag not found or tag soft-deleted (unless caller is admin/moderator and explicitly requested inclusion)\n- 429: rate limiting on search endpoints\n","parameters":[{"name":"tagId","in":"path","description":"UUID of the tag to filter threads by (maps to econ_political_forum_tags.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filtering and pagination parameters (full-text query, categoryId, authorId, created_from, created_to, sort, cursor or page/limit) scoped to the specified tag.","typeName":"IEconPoliticalForumThread.IRequest"},"responseBody":{"description":"Paginated container of thread summary objects matching the tag and filters.","typeName":"IPageIEconPoliticalForumThread.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/tags","method":"post"},"description":"The tag resource must exist before listing threads by tag. POST /econPoliticalForum/administrator/tags creates a canonical tag (econ_political_forum_tags row) that provides a valid tagId referenced by econ_political_forum_thread_tags. If the tag does not exist or is soft-deleted, the index operation will return 404 or an empty result set; creating the tag ensures tagId is resolvable and thread membership queries succeed."}]},{"specification":"Retrieves a paginated, filterable list of threads (top-level topics) within a specific category. This operation operates on the Prisma model `econ_political_forum_threads` and references related taxonomy via `econ_political_forum_thread_tags` and `econ_political_forum_tags`. It supports complex list queries (pagination/cursor or page/limit), full-text search on thread title, filtering by tag, author, status, pinned flag, and date ranges using the fields present on the `econ_political_forum_threads` model (category_id, author_id, title, slug, status, pinned, created_at, updated_at, deleted_at). The operation excludes records where `deleted_at` is set (treated as removed) and by default omits threads with status set to 'pending' so moderated categories only surface approved/visible threads. Validation rules: categoryId path parameter must be a UUID referencing an existing category; request body properties follow the IEconPoliticalForumThread.IRequest DTO (pagination, sort, filters).","path":"/econPoliticalForum/categories/{categoryId}/threads","method":"patch","summary":"Search and retrieve a filtered, paginated list of threads inside a category (econ_political_forum_threads)","description":"Purpose and overview:\nRetrieve a filtered, paginated list of discussion threads that belong to the specified category. This endpoint is intended for public browsing of category content and supports advanced filtering, full-text title search, tag-based discovery, author filtering, status and pinned filtering, and sorting. It is implemented against the `econ_political_forum_threads` Prisma model which contains canonical thread metadata.\n\nSecurity and permissions:\nThis endpoint is public by default (no authentication required) and returns only threads the caller is allowed to see. Threads with `deleted_at` set are excluded from results. For categories configured as moderated (`econ_political_forum_categories.is_moderated = true`), threads whose `status` equals 'pending' should be excluded unless the requester has moderator/admin privileges (this endpoint's default behavior excludes 'pending' threads). Any moderator-only expansions must be gated behind proper authentication and role checks.\n\nRelationship to the database and related entities:\nRecords are drawn from `econ_political_forum_threads` (fields used: category_id, author_id, title, slug, status, pinned, created_at, updated_at, deleted_at). Tag-based filtering uses the join table `econ_political_forum_thread_tags` and `econ_political_forum_tags.slug` or id. The operation returns summary representations optimized for listing; callers may request expanded details via a separate thread detail endpoint.\n\nValidation rules and business logic:\n- The path parameter `categoryId` must be a UUID and correspond to an existing category (validate existence before executing the query).\n- By default exclude threads with `deleted_at != null` and threads with `status = 'pending'` unless the caller is an authorized moderator/administrator.\n- Search on title uses trigram / full-text indexing configured on the `title` column; results should be ranked by relevance when a query is provided.\n- Pagination supports either cursor-based or page/limit patterns in the IEconPoliticalForumThread.IRequest DTO. Defaults: page=1, limit=20; maximum limit = 100.\n- Sorting supports fields: relevance (when search provided), newest (created_at desc), oldest (created_at asc), updated (updated_at desc), pinned first.\n\nRelated operations:\n- Use GET /econPoliticalForum/threads/{threadId} to fetch a single thread detail including posts.\n- Use PATCH /econPoliticalForum/threads (search) for cross-category searches; this operation is scoped to a single category by path.\n\nExpected errors and handling:\n- 400 Bad Request for invalid UUIDs or malformed request body\n- 401 Unauthorized when moderator-only expanded views are requested without authentication\n- 403 Forbidden when the caller is authenticated but not permitted to view moderator-only threads\n- 404 Not Found if the categoryId does not exist\n- 429 Too Many Requests when rate limits are exceeded\n- 500 Internal Server Error for unexpected failures (include correlation id in response)","parameters":[{"name":"categoryId","description":"UUID of the target category (econ_political_forum_categories.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter and pagination parameters scoped to the target category","typeName":"IEconPoliticalForumThread.IRequest"},"responseBody":{"description":"Paginated list of thread summaries matching the filters (page/cursor, pagination metadata and data array of IEconPoliticalForumThread.ISummary)","typeName":"IPageIEconPoliticalForumThread.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/econPoliticalForum/administrator/categories","method":"post"},"description":"The category identified by categoryId must exist before listing threads in that category. POST /econPoliticalForum/administrator/categories creates the econ_political_forum_categories record and returns its id; executing this prerequisite ensures the categoryId is valid and prevents a 404 when querying threads."},{"endpoint":{"path":"/econPoliticalForum/administrator/tags","method":"post"},"description":"If the request filters by tag_id, the referenced tag must exist. POST /econPoliticalForum/administrator/tags creates the econ_political_forum_tags record and returns its id; this prerequisite ensures any tag_id used in the thread search is a valid, creatable tag to avoid invalid-filter errors."}]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated visitors who can browse public categories, read public posts and comments, and view public user profiles. Guests cannot create posts, comment, vote, bookmark, or access member-only content. Guests can register or start the account verification process.","kind":"guest"},{"name":"registeredUser","description":"Authenticated users who can create, edit (within limits), and delete their own posts and comments; vote on content; bookmark content; follow threads; receive notifications; report content; and update their profile. They must verify email before posting in restricted categories and may have posting limits based on account age and behavior.","kind":"member"},{"name":"moderator","description":"Trusted members with content moderation responsibilities. Moderators can review reports, hide or unpublish posts/comments pending review, issue warnings to users, place temporary suspensions, approve or reject content in moderated categories, and view moderation logs. Moderators cannot change system-wide settings or manage other moderators unless explicitly granted by administrators.","kind":"member"},{"name":"administrator","description":"System administrators with full management privileges. Administrators can manage users (suspend, reinstate, change roles), configure categories and global moderation policies, access system-wide analytics and logs for operational use, and perform actions that affect the whole service. Administrators are responsible for legal and compliance responses.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIEconPoliticalForumCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumFeatureFlag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumFeatureFlag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumTag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumTag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumThread.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumThread.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumPost"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumPostRevision":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumPostRevision"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumBookmark.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumBookmark.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumReport"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumModerationCase.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumModerationCase.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumModerationLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumModerationLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumLegalHold":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumLegalHold"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumNotification.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumNotification.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconPoliticalForumRegisteredUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumRegisteredUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IEconPoliticalForumGuest.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_guest","properties":{"nickname":{"type":"string","description":"Optional short display nickname for the guest. Maps to econ_political_forum_guest.nickname. The server should trim whitespace and enforce a UI-friendly max length."},"user_agent":{"type":"string","description":"Optional user-agent string captured at creation time. Maps to econ_political_forum_guest.user_agent. If not supplied, the server may capture this from request headers."}},"required":[],"description":"Request body to create a temporary guest identity.\n\nThis DTO maps to the `econ_political_forum_guest` Prisma model. Clients MAY provide an optional `nickname` and/or `user_agent`. Do NOT supply system-managed fields (id, created_at, updated_at, deleted_at)."},"IEconPoliticalForumGuest.IAuthorized":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_guest","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the created guest record (econ_political_forum_guest.id)."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional nickname previously supplied or null if none was provided. Mirrors econ_political_forum_guest.nickname."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response returned after successful guest creation or refresh.\n\nIncludes the guest id and an authorization token payload (access + refresh tokens). When returned after refresh, the `id` references the existing guest record and servers SHOULD verify the guest record is not deleted."},"IEconPoliticalForumGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Opaque guest refresh token previously issued by POST /auth/guest/join.\n\nThis token is sent by the client to obtain a new short-lived access token and a rotated refresh token. The server validates the token against its token store (or stateless revocation strategy) and MAY check that the referenced guest identity still exists and is not soft-deleted (econ_political_forum_guest.deleted_at). Clients MUST supply the token exactly as received; do not include additional authentication fields in this payload."}},"required":["refresh_token"],"description":"Guest token refresh request.\n\nThis request object contains the single required property used to refresh an ephemeral guest session. It is intentionally minimal because guest identities are lightweight in the database (econ_political_forum_guest) and token lifecycle/rotation is handled by the authentication service rather than persisted on the guest record."},"IEconPoliticalForumRegisteredUser.IJoin":{"type":"object","properties":{"username":{"type":"string","description":"Unique account username used for login and display.\n\nRecommended constraints: 3–30 characters, normalized (lowercase where appropriate), no leading/trailing whitespace. The server enforces uniqueness against econ_political_forum_registereduser.username and will return a 409 Conflict if the username is already taken."},"email":{"type":"string","format":"email","description":"Verified email address for account recovery and notifications.\n\nClients MUST provide a valid business email address. The server enforces uniqueness against econ_political_forum_registereduser.email and will send a verification email; the created account will have email_verified=false until verification completes."},"password":{"type":"string","description":"Plain-text password supplied by the client. The server MUST never store this value in plaintext; it will compute and persist a secure password hash in econ_political_forum_registereduser.password_hash.\n\nPassword guidelines (server-side validation recommended): minimum 10 characters and a mix of character classes to meet strength requirements. Do not include password_hash or other derived fields in this DTO."},"display_name":{"type":"string","description":"Optional human-friendly display name shown publicly. May differ from username.\n\nSuggested limits: 3–30 characters. This field is optional and, if omitted, the system may default to the username for public displays."}},"required":["username","email","password"],"description":"Registration (join) request for a new registered user.\n\nThis DTO includes only the client-provided fields necessary to create a new account. System-managed fields such as id, created_at, updated_at, email_verified, verified_at, failed_login_attempts, locked_until, and password_hash are set or managed by the server and MUST NOT be provided by the client."},"IEconPoliticalForumRegisteredUser.IAuthorized":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_registereduser","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the registered user. This maps directly to the Prisma model field `econ_political_forum_registereduser.id` and is used to reference the authenticated user in moderation and audit logs.\n\nThis value is a UUID and is the canonical key for user records in the database. It must be stable and globally unique."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"username":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Normalized username of the account (Prisma: `econ_political_forum_registereduser.username`).\n\nThis field is suitable for display and routing. It is normalized and unique at the database level."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional public display name (Prisma: `econ_political_forum_registereduser.display_name`).\n\nThis value is intended for UI presentation and may differ from the login username. It may be null when the user has not set a display name."},"avatar_uri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional URI to the user's avatar image (Prisma: `econ_political_forum_registereduser.avatar_uri`).\n\nIf present, the URI may be proxied by the CDN. Clients SHOULD treat this value as a presentation hint and not as a secret or direct storage path."},"email_verified":{"type":"boolean","description":"Flag indicating whether the user's email address has been verified (Prisma: `econ_political_forum_registereduser.email_verified`).\n\nThis boolean is useful for client flows that gate posting to restricted categories that require verified accounts."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp for the user (Prisma: `econ_political_forum_registereduser.created_at`).\n\nTimestamps are provided in ISO 8601 / UTC (date-time) format and are intended for display and sorting in client UIs."},"updated_at":{"type":"string","format":"date-time","description":"Last profile update timestamp (Prisma: `econ_political_forum_registereduser.updated_at`).\n\nThis timestamp is updated by server-side profile changes and may be used to display \"last active\" or profile-modified information."}},"required":["id","token"],"description":"Authorization response for a registered user.\n\nThis DTO is returned after successful authentication (login, join, or refresh) and contains the authenticated user's identifier plus the authorization token payload. Sensitive fields such as password_hash, failed_login_attempts, locked_until, and other internal security fields are intentionally excluded from this response to protect user security and privacy.\n\nInclude only public-facing profile data in this DTO and avoid exposing internal or secret information. The presence of `x-autobe-prisma-schema` indicates a direct mapping to the Prisma model `econ_political_forum_registereduser`; every property included here corresponds to an existing column in that model."},"IEconPoliticalForumRegisteredUser.ILogin":{"type":"object","properties":{"usernameOrEmail":{"type":"string","description":"Username or email address supplied by the user for authentication.\n\nAccept either the user's normalized username or their verified email address. The server will attempt to resolve the identifier to a registered account and validate the supplied password."},"password":{"type":"string","description":"Plaintext password submitted for authentication.\n\nPasswords are transmitted to the server only over TLS. The server is responsible for comparing the supplied plaintext password against the stored `password_hash` (Prisma: `econ_political_forum_registereduser.password_hash`). Do NOT include password hashes in requests or responses."}},"required":["usernameOrEmail","password"],"description":"Login request payload for registered users.\n\nThis DTO carries the credentials needed to authenticate a registered user. The server MUST validate inputs, apply rate-limiting and lockout policies, and must not return sensitive error details that could be used for account enumeration. Use this payload with the POST /auth/registeredUser/login endpoint."},"IEconPoliticalForumRegisteredUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued to the client. This token MUST be presented to obtain a new short-lived access token and a rotated refresh token. The token value is opaque to the server consumer; the implementation verifies it against the token store or stateless JWT revocation strategy.\n\nBusiness rules: Tokens should be rotated on each successful use. Presenting a revoked or expired token MUST be rejected with 401 Unauthorized. The API expects the token as a single string value."}},"required":["refresh_token"],"description":"Request body for rotating a registered user's refresh token and issuing a new access token.\n\nThis DTO is used by the endpoint that accepts a refresh token and returns a new access token plus a rotated refresh token. The implementation must validate token expiry and revocation state, verify the underlying session is active (e.g., corresponding session record in econ_political_forum_sessions not revoked), and record rotation/audit events as required by security policy.\n\nNote: This request DTO is intentionally minimal and contains only the refresh token string. Do not include user-identifying fields in the request body; the server derives user/session identity from the validated refresh token."},"IEconPoliticalForumRegisteredUser.IRequestPasswordReset":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the account for which a password reset is requested. The server will NOT reveal whether this email exists in the system in the public response to avoid account enumeration. The backend uses this email to locate the registered user (econ_political_forum_registereduser.email) and to create a password reset record (econ_political_forum_password_resets.reset_token_hash) when appropriate.\n\nBusiness guidance: Validate the value as an RFC-5322-compatible email address. Rate-limit requests to this endpoint to prevent abuse. The server SHOULD always return a generic acknowledgement regardless of whether an account with this email exists."}},"required":["email"],"description":"Request body used to initiate a password-reset flow for a registered user.\n\nUpon receiving this request the service will (when a matching account exists) create a single-use password reset record (econ_political_forum_password_resets) with a hashed token and expiry, send a one-time reset link to the provided email, and record an audit event. For security, responses to callers must be generic and not disclose account existence. Implementations MUST store only a hash of the reset token and enforce a limited lifetime for reset tokens."},"IEconPoliticalForumRegisteredUser.IGenericSuccess":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the requested operation completed successfully. Clients should treat `true` as success and `false` as a general failure indicator; additional details may be provided in the `message` field."},"message":{"type":"string","description":"A human-readable informational message describing the result. This text is intended for display in user interfaces and can be used to convey next steps or confirmation details."},"code":{"type":"string","description":"Optional machine-readable status code identifying the result or subtype of success. Consumers can use this code for conditional flows or telemetry (for example: \"PASSWORD_CHANGED\", \"EMAIL_VERIFIED\")."}},"required":["success"],"description":"Generic success response used by account-related endpoints such as password reset confirmation or email verification.\n\nThis DTO provides a minimal, safe acknowledgement of operation outcome. It contains a required boolean `success` flag and optional fields for a human-readable `message` and a machine-friendly `code` to support client-side workflows and telemetry.\n\nDo not include sensitive information in `message` or `code`. Use `code` for programmatic handling and `message` for display only."},"IEconPoliticalForumRegisteredUser.IConfirmPasswordReset":{"type":"object","properties":{"token":{"type":"string","description":"Single-use password reset token previously issued to the user's verified email. Clients must submit the token exactly as received; the server will validate token existence, expiry, and single-use semantics."},"new_password":{"type":"string","minLength":10,"pattern":"^(?=.{10,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9\\W]).*$","description":"The new password for the account. Passwords MUST be at least 10 characters long and include at least one uppercase letter, one lowercase letter, and at least one digit or special character. The server will enforce additional password policy and will store only a securely hashed value; plaintext passwords are accepted on input only."}},"required":["token","new_password"],"description":"Request body used to confirm a password reset flow.\n\nThis DTO contains the one-time `token` issued during the reset request and the `new_password` the user wishes to set. The server validates the token (single-use, expiry) and updates the account password on success, invalidating active sessions per security policy.\n\nPassword policy: minimum length 10 and a mix of upper/lower case and either digits or special characters. The client should present clear error messages when the new password does not meet these requirements."},"IEconPoliticalForumRegisteredUser.IVerifyEmail":{"type":"object","properties":{"token":{"type":"string","description":"Single-use email verification token issued by the platform.\n\nThis token is presented to the verify-email endpoint to confirm ownership of the email address associated with a registered user account. The token MUST be treated as confidential by clients and is expected to be time-limited by the server-side issuance process. The server validates the token and, on success, sets the registered user's email_verified flag and verified_at timestamp in the econ_political_forum_registereduser record.","minLength":1}},"required":["token"],"description":"Request body for email verification.\n\nThis object contains the single required property used by the server to validate and complete an email verification flow for a registered user. On successful verification the server updates the corresponding econ_political_forum_registereduser.email_verified and econ_political_forum_registereduser.verified_at fields.\n\nDo NOT include any sensitive data such as passwords. The token is single-use and must be validated and consumed by the server."},"IEconPoliticalForumRegisteredUser.IResendVerification":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Verified email address for which a new verification email should be sent.\n\nThis value maps to the econ_political_forum_registereduser.email column. For security and privacy, the API MUST respond with a generic acknowledgement (not revealing whether the email exists) and SHOULD apply rate-limiting to prevent abuse. The server implements the actual resend behavior (generation of a new single-use verification token and email delivery)."}},"required":["email"],"description":"Request body to request resending of an email verification link.\n\nClients supply the user's email address. The server will generate and send a new verification token to that address (if an account exists) and return a generic acknowledgement to avoid account enumeration. This DTO intentionally contains only the minimally required field for initiating the resend flow."},"IPageIPagination":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPagination"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IEconPoliticalForumRegisteredUser.IChangePassword":{"type":"object","properties":{"currentPassword":{"type":"string","description":"Current account password in plain text. The server MUST verify this against the stored password_hash for the authenticated registered user. This value MUST NOT be logged or stored in plaintext."},"newPassword":{"type":"string","description":"New desired password in plain text. The server will validate password strength and persist only a hashed representation in econ_political_forum_registereduser.password_hash. After successful change the server SHOULD rotate or revoke existing sessions."}},"required":["currentPassword","newPassword"],"description":"Request body for changing an authenticated registered user's password. Caller is authenticated; server validates currentPassword and updates stored password_hash with hashed newPassword. This DTO deliberately does NOT include an x-autobe-prisma-schema mapping because it is a request-only payload and does not directly map to Prisma columns."},"IEconPoliticalForumRegisteredUser.ISession":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_sessions","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the session record stored in the econ_political_forum_sessions table. This is a stable UUID used to reference the session for revocation and listing."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the session was created in the database. This value is produced by the database and is returned for audit and display in session lists."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the most recent activity observed for this session. Nullable when no activity has been recorded after creation."},"expires_at":{"type":"string","format":"date-time","description":"Session expiry timestamp. Clients should use this to anticipate token refreshes. This field exists on the referenced Prisma model and is safe to expose as part of a session summary (do NOT expose token values)."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address captured at session creation (nullable). Exposed here for the session owner's security review. This is not a secret but is considered privacy-sensitive; it is returned only in owner/admin contexts."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string captured at session creation. Nullable. Returned to help the session owner identify devices. Do NOT include any tokens or secret fields in this schema."}},"required":["id","created_at","expires_at"],"description":"Session summary for a registered user.\n\nThis object is a safe, non-sensitive representation of a session stored in the Prisma model `econ_political_forum_sessions`. It intentionally excludes any sensitive fields such as session_token or refresh_token_hash. All properties listed correspond to actual columns on the referenced Prisma model.\n\nUse: returned by session listing endpoints (for example, GET /auth/registeredUser/sessions)."},"IEconPoliticalForumRegisteredUser.ISessionList":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the session list."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumRegisteredUser.ISession"},"description":"Array of session summary records for the authenticated user."}},"required":["pagination","data"],"description":"Paginated list of session summary records for a registered user. Uses the canonical IPage.IPagination reference for pagination. Data items reference IEconPoliticalForumRegisteredUser.ISession."},"IEconPoliticalForumModerator.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"Unique account username for the moderator-capable account. Maps to econ_political_forum_registereduser.username in the Prisma schema. Server-side normalization is recommended."},"email":{"type":"string","format":"email","description":"Contact email for the account. Maps to econ_political_forum_registereduser.email. Used for verification and password recovery."},"password":{"type":"string","description":"Plain-text password supplied by the client. The server MUST hash this value and persist only the hash to econ_political_forum_registereduser.password_hash. Do not return this value in any response DTO."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional public display name. Maps to econ_political_forum_registereduser.display_name when provided."}},"required":["username","email","password"],"description":"Create DTO for moderator-capable registered users. Clients supply plain `password`; the server is responsible for hashing and storing only `password_hash`. This DTO intentionally does not include an x-autobe-prisma-schema annotation because it accepts client-only fields (plain password) that do not directly exist as stored columns in the Prisma model."},"IEconPoliticalForumRegisteredUser.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_registereduser","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the registered user as stored in the database.\n\nThis property maps to econ_political_forum_registereduser.id in the Prisma schema and is the canonical UUID used across threads, posts, and audit logs to reference the user."},"username":{"type":"string","description":"Unique account username used for login and public display.\n\nThis property corresponds to econ_political_forum_registereduser.username in the Prisma schema and is normalized and unique across the system. It is intended for public display and routing; do not expose sensitive data such as email or password here."},"display_name":{"type":"string","description":"Optional human-friendly display name shown in the UI.\n\nThis maps to econ_political_forum_registereduser.display_name in the Prisma schema. It is nullable in the database; when present it provides a friendlier label than the username."},"bio":{"type":"string","description":"Optional short biography or profile description authored by the user.\n\nThis property maps to econ_political_forum_registereduser.bio in the Prisma schema and is intended for brief public profile text. Long or sensitive content should be avoided in public summaries."},"avatar_uri":{"type":"string","format":"uri","description":"Optional URI to the user's avatar image (may be proxied via CDN).\n\nThis property maps to econ_political_forum_registereduser.avatar_uri in the Prisma schema. The URI should be treated as a public resource locator; image hosting and access control are handled by the application layer."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp in ISO 8601 format.\n\nMaps to econ_political_forum_registereduser.created_at in the Prisma schema. Included to help UI sort/filter and surface account vintage without exposing sensitive operation metadata."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last profile update in ISO 8601 format.\n\nThis corresponds to econ_political_forum_registereduser.updated_at in the Prisma schema and indicates when public profile fields were last changed."}},"required":["id","username"],"description":"Public summary view of a registered user.\n\nThis DTO provides a safe, sanitized view of a user's public profile suitable for lists and thread author attributions. It intentionally excludes sensitive fields from the underlying Prisma model (for example: email, password_hash, failed_login_attempts, locked_until, deleted_at).\n\nThe shape is derived directly from the `econ_political_forum_registereduser` Prisma model and includes only fields that are safe for public consumption. Use this type when returning user data to other users and public pages; for owner/admin contexts use expanded types that include additional metadata."},"IEconPoliticalForumModerator.IAuthorized":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_registereduser","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated registered user (moderator). This value maps to econ_political_forum_registereduser.id in the database."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Moderator authorization response returned after successful authentication or token refresh.\n\nThis object contains the authenticated moderator's stable identifier and the authorization token payload used for subsequent API access. The `id` is the database primary key for the registered user and is included to enable client correlation and auditability. The `token` property references the shared IAuthorizationToken component (access and refresh token details) rather than embedding token internals in this schema.\n\nSecurity note: The response MUST NOT include sensitive account fields such as password_hash; when mapping to the Prisma model via x-autobe-prisma-schema, only properties that exist on the model are allowed and no sensitive fields are exposed here.","title":"IEconPoliticalForumModerator.IAuthorized"},"IEconPoliticalForumModerator.ILogin":{"type":"object","properties":{"usernameOrEmail":{"type":"string","description":"Username or email address supplied by the moderator attempting to authenticate.\n\nThis field accepts either the account username or the verified email address used during registration. The server will normalize the value and use it to locate the registered account for credential verification.","example":"moderator@example.org"},"password":{"type":"string","description":"Plain-text password provided by the moderator for authentication.\n\nThe backend MUST never store this value; it will be compared against the stored password_hash for the matched registered user. Use secure transfer (HTTPS) and strong server-side hashing. Clients send plain text only for verification purposes.","example":"CorrectHorseBatteryStaple"}},"required":["usernameOrEmail","password"],"description":"Moderator login request.\n\nThis request body is used to authenticate a moderator-capable registered account. It contains the credential fields required to verify identity. The server locates a registered user by `username` or `email`, validates the provided `password` against the stored `password_hash`, and returns an authorization response (IAuthorized) on success.\n\nSecurity note: Do not include any sensitive persisted fields in this DTO. Error responses MUST not reveal whether the username/email exists.","title":"IEconPoliticalForumModerator.ILogin"},"IEconPoliticalForumModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued to the moderator session.\n\nThe token is a long-lived, rotating credential used to obtain a new short-lived access token. The server MUST validate the token (or its hash) against the session store and rotate it on success. Implementations should reject reused or revoked tokens.","example":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."},"session_id":{"oneOf":[{"type":"string","description":"Optional session identifier (UUID) associated with the refresh token.\n\nWhen provided, the server may use the session_id to look up a session row (econ_political_forum_sessions) for additional validation such as checking deleted_at or expires_at. Inclusion of this field is optional; servers may derive the session from the refresh token itself.","format":"uuid"},{"type":"null"}],"description":"Optional session identifier (UUID) associated with the refresh token.\n\nWhen provided, the server may use the session_id to look up a session row (econ_political_forum_sessions) for additional validation such as checking deleted_at or expires_at. Inclusion of this field is optional; servers may derive the session from the refresh token itself."}},"required":["refresh_token"],"description":"Moderator token refresh request.\n\nClients call this endpoint to exchange a valid refresh token for a new access token and a rotated refresh token. The request MUST include the issued refresh token; optionally, clients may include a session identifier to assist server-side validation. The server MUST validate the token, ensure the associated session is active (not revoked or soft-deleted), rotate the refresh token, and return an IAuthorized response.\n\nSecurity note: Implement strict validation, rotation, and logging for refresh flows. Reuse of an already-rotated refresh token MUST be treated as suspicious.","title":"IEconPoliticalForumModerator.IRefresh"},"IEconPoliticalForumModerator.IPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The email address associated with the account for which a password reset is requested. The service will use this value to locate the registered user (econ_political_forum_registereduser.email) and, if an account exists, create a corresponding password reset record (econ_political_forum_password_resets) and send a one‑time reset link.\n\nThis property MUST contain a valid email address string in standard email format. For security and privacy, the API implementation MUST respond with a generic acknowledgement regardless of whether the email exists in the system to avoid account enumeration."}},"required":["email"],"description":"Password reset request payload for moderator-capable accounts.\n\nThis object represents the minimal information required to initiate a password recovery flow. When a valid request is received, the backend creates a single-use reset entry (econ_political_forum_password_resets.reset_token_hash, expires_at) and triggers email delivery. The request is intentionally minimal (email only) to reduce exposure of PII and to simplify anti-abuse controls such as rate-limiting and CAPTCHA.\n\nBusiness notes:\n- The server MUST store only a hash of any generated reset token (reset_token_hash) and must enforce expiry and single-use semantics. \n- The client MUST not infer existence of an account from the response; the server SHALL provide a generic acknowledgement message to the user."},"IEconPoliticalForumModerator.IPasswordResetRequestAck":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the request was accepted for processing. A value of true means the request was accepted and the system will attempt to send a password reset link when applicable. A value of false indicates the request was not processed due to a server-side validation or rate-limit condition."},"message":{"type":"string","description":"Human-readable, localized message suitable for display to the requester. Messages SHOULD be generic to avoid account enumeration (for example: 'If an account exists for the provided email address, a password reset link will be sent.'). The server may include advice about rate limits or next steps but must not reveal whether the email is present in the system."}},"required":["success","message"],"description":"Acknowledgement response for a password reset request.\n\nThis DTO provides a safe, non-revealing acknowledgement to the client after a password reset request is submitted. It is intentionally generic to protect user privacy and to avoid leaking account existence. The server may return additional HTTP headers (for example Retry-After) when rate-limited; such headers are out of scope of this schema.\n\nBehavioral notes:\n- This response does not indicate that a reset email was actually delivered, only that the request was accepted for processing.\n- When the server rejects a request (for example due to malformed input or abuse prevention), return success=false with an appropriate message and the corresponding HTTP status code (e.g., 400 or 429)."},"IEconPoliticalForumModerator.IPasswordResetConfirm":{"type":"object","properties":{"token":{"type":"string","description":"One-time password reset token delivered to the user's verified email address. This token is single-use and time-limited; the server will validate it against the password reset record. Clients MUST supply the exact token string they received. Example format: a URL-safe opaque string.","minLength":8},"new_password":{"type":"string","description":"New plaintext password chosen by the user. The server will hash this value before persisting it to the database. Password policy: minimum 10 characters; recommend at least one uppercase letter, one lowercase letter, and one digit or symbol. Clients SHOULD not send any other sensitive fields in this request.","minLength":10,"maxLength":128}},"required":["token","new_password"],"description":"Password reset confirmation request.\n\nThis object is submitted when a user consumes a one-time password reset token to set a new account password. The `token` property carries the single-use token issued by the password reset flow; the `new_password` property contains the user's chosen plaintext password. The backend MUST validate token expiry and single-use semantics, update the user's stored password hash, mark the reset record as used, and rotate or invalidate active sessions as appropriate.\n\nSecurity note: Do NOT include password hashes or other secrets in the request. Transport MUST use TLS. The server is responsible for enforcing password strength and for audit logging the password-change event.","x-docs":"Request DTO for moderator password reset confirmation."},"IEconPoliticalForumModerator.IPasswordResetConfirmAck":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password reset operation completed successfully."},"message":{"type":"string","description":"Human-readable message describing the result. For successful responses, this may include next steps (for example, 'Password updated; please log in with your new password'). For failures, provide a brief reason suitable for end users without leaking sensitive details (for example, 'Invalid or expired token').","minLength":1}},"required":["success","message"],"description":"Acknowledgement returned after attempting to confirm a password reset.\n\nThis response communicates the outcome of the password reset confirm operation. It contains a boolean `success` and a user-facing `message`. On success the server may optionally prompt the client to navigate to the sign-in flow; on failure the message should avoid exposing sensitive internal state but should be actionable (for example, suggest requesting a new reset token). The server MUST NOT include tokens, password hashes, or other sensitive information in this response.","x-docs":"Response DTO acknowledging password reset confirmation."},"IEconPoliticalForumAdministrator.IJoin":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_registereduser","properties":{"email":{"type":"string","format":"email","description":"Registered administrator email address. Maps to `econ_political_forum_registereduser.email` in the Prisma schema.\n\nThis field is required for account creation and will be used for verification and password recovery flows. The server enforces uniqueness against the database constraint and will return 409 Conflict on collision."},"password":{"type":"string","minLength":10,"description":"Plain-text password supplied by the client for initial account creation.\n\nThis value MUST be sent in plain text over TLS; the server is responsible for hashing and storing the result in `econ_political_forum_registereduser.password_hash`. Clients MUST NOT send pre-hashed passwords. Password strength is enforced server-side (recommended minimum 10 characters)."},"username":{"type":"string","minLength":3,"maxLength":30,"description":"Unique account username corresponding to `econ_political_forum_registereduser.username` in Prisma.\n\nThe server enforces uniqueness. Use lower-case normalization for lookup where appropriate. This property is optional at creation time but recommended for administrator accounts."},"display_name":{"type":"string","maxLength":100,"description":"Optional human-friendly display name mapped to `econ_political_forum_registereduser.display_name`.\n\nUsed for presentation only and not required to be unique. May be omitted; server will store null when not provided."}},"required":["email","password"],"description":"Administrator registration request.\n\nThis DTO is used to create a new `econ_political_forum_registereduser` row for an administrator account. The client provides the administrator's contact (email) and a plain-text password; the server computes and stores the `password_hash` in the Prisma model. The DTO maps directly to the Prisma model fields and therefore includes an x-autobe-prisma-schema linkage.\n\nSecurity note: Do not include `password_hash` or any derived secrets in requests or responses. The server will handle hashing, session creation (econ_political_forum_sessions), and verification flows."},"IEconPoliticalForumAdministrator.IAuthorized":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_registereduser","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized administrator account. Maps to `econ_political_forum_registereduser.id` in the Prisma schema.\n\nThis identifier is returned so clients can correlate authentication state with server-side identity records. It MUST be a UUID."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"user":{"$ref":"#/components/schemas/IEconPoliticalForumRegisteredUser.ISummary","description":"Optional minimal public summary of the authenticated administrator account.\n\nThis property references the registered user summary DTO and maps to public-safe fields only. It MUST NOT include secrets such as `password_hash`, `failed_login_attempts`, or `locked_until`."}},"required":["id","token"],"description":"Authorization response returned after successful administrator authentication or registration.\n\nThis DTO includes the administrator's stable identifier and a token container used for authenticated requests. It references the registered-user summary for convenience but intentionally excludes any sensitive fields. The x-autobe-prisma-schema links this type to the underlying Prisma model to enable automated schema/property verification against the database."},"IEconPoliticalForumAdministrator.ILogin":{"type":"object","properties":{"usernameOrEmail":{"type":"string","description":"Username or email address used to authenticate. Accepts the account's username OR the verified email address.","minLength":1},"password":{"type":"string","description":"Plain-text password supplied by the user for authentication. The server will hash and validate it; clients MUST not send a hashed password. Recommended minimum length: 10 characters.","minLength":10}},"required":["usernameOrEmail","password"],"description":"Login request for an administrator account. The request contains credentials used to authenticate an administrator. The server validates the credentials against the registered user record and issues access/refresh tokens on success.\n\nFields:\n- usernameOrEmail: The account username or the verified email address.\n- password: Plain-text password for authentication.\n\nSecurity: Do NOT include sensitive fields in responses. This DTO is a request-only object and does not persist to the database as-is."},"IEconPoliticalForumAdministrator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued by an authentication flow. This token is exchanged for a new access token and a rotated refresh token. Implementations MUST validate token integrity and expiry before issuing new tokens.","minLength":1}},"required":["refresh_token"],"description":"Refresh request for administrator sessions. The client supplies a refresh_token to obtain a new short-lived access token and a rotated refresh token. The server validates the token (and the underlying session) and returns a new authorization payload on success."},"IEconPoliticalForumAdministrator.IRequestPasswordReset":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_registereduser","properties":{"email":{"type":"string","format":"email","description":"Verified email address of the target registered user as stored in econ_political_forum_registereduser.email.\n\nThis property is used to locate the account that will receive the password reset link. The API MUST treat this value as case-insensitive for lookup and MUST NOT disclose whether the email exists in user-facing messages to avoid account enumeration."}},"required":["email"],"description":"Request DTO for initiating a password reset for an administrator account.\n\nThis payload contains the email address of the account that will receive a single-use password reset link. The server uses this value to create an entry in the `econ_political_forum_password_resets` table (reset_token_hash, expires_at, created_at) and to send the reset email. For security, the system must only store a hash of any generated token and must not expose account existence in the public response.\n\nBusiness rules:\n- The email must conform to standard email address format and match the `econ_political_forum_registereduser.email` column when present.\n- The API should accept the email and always return a generic acknowledgement to the caller regardless of whether a matching account exists, to prevent account enumeration.\n","examples":{"v0":{"email":"admin@example.org"}}},"IEconPoliticalForumAdministrator.IResetRequestResponse":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password reset request was accepted for processing. True when the request has been queued or processed; the response does not confirm the existence of an account to callers."},"message":{"type":"string","description":"Human-readable message describing outcome. For public safety returns a generic message such as 'If an account exists for the provided email, a reset link has been sent.' Include guidance about next steps without revealing account presence."},"request_id":{"type":"string","format":"uuid","description":"Optional server-generated correlation id for this request useful for support and audit logs. Present when the server wants to provide a reference for follow-up; format is UUID."}},"required":["success","message"],"description":"Acknowledgement response returned after requesting a password reset.\n\nThis response confirms that the system has accepted the request for processing. For security and privacy reasons the response should never reveal whether an account exists for the provided email address. When present, `request_id` is a server-side correlation identifier (UUID) that can be used for support and audit lookup.\n\nExample usage:\n- success = true, message = \"If an account exists for the provided email, a reset link has been sent.\"","examples":{"v0":{"success":true,"message":"If an account exists for the provided email, a reset link has been sent.","request_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}},"IEconPoliticalForumAdministrator.IConfirmPasswordReset":{"type":"object","properties":{"token":{"type":"string","description":"One-time password reset token issued to the user's verified email address.\n\nThis token is the raw token delivered to the user (not the hashed value stored in the database). The backend will validate the token by comparing its hash to the stored `reset_token_hash` in the `econ_political_forum_password_resets` record and will verify the token has not expired (`expires_at`) and has not been consumed (`used = false`).\n\nDo NOT include any sensitive secrets in this field beyond the token string itself. Tokens are single-use and short-lived; the server must enforce expiry and single-use semantics."},"new_password":{"type":"string","minLength":10,"description":"New plaintext password chosen by the user. It must follow the platform's password policy.\n\nPassword policy recommendations:\n- Minimum length: 10 characters.\n- Include at least one uppercase letter, one lowercase letter, and one digit or special character to meet basic strength requirements.\n\nImportant: This value is transmitted to the server over TLS; the server is responsible for hashing (e.g., bcrypt/argon2) before persisting to `econ_political_forum_registereduser.password_hash`. Never store or return the plaintext password in responses or logs. Upon successful reset the server SHOULD invalidate existing sessions (mark `deleted_at` for `econ_political_forum_sessions`) and rotate refresh tokens for security."}},"required":["token","new_password"],"description":"Request object for confirming a password reset for an administrator account.\n\nThis DTO is used by the password reset confirmation endpoint for administrator accounts. It carries the one-time reset token previously issued (and sent to the user's email) and the new plaintext password that the user wishes to set. The server will validate the token (comparing against the hashed `reset_token_hash` stored in `econ_political_forum_password_resets`), enforce expiry and single-use semantics, update the user's `password_hash` on `econ_political_forum_registereduser` on success, mark the reset record `used=true` and set `used_at`, and optionally revoke active sessions in `econ_political_forum_sessions`.\n\nSecurity: Do not include additional fields here (for example user identifiers) because the token is the canonical mapping to the password reset request. All processing and audit logging are performed server-side."},"IEconPoliticalForumAdministrator.IResetConfirmResponse":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password reset operation succeeded."},"message":{"type":"string","description":"Human-readable summary of the outcome. Useful for client display and localization. Messages SHOULD be non-sensitive and should not include internal debug details."},"user_id":{"type":"string","format":"uuid","description":"Optional: the unique identifier (UUID) of the account that was updated. Provided for client correlation and convenience.\n\nThis field is returned only when it is safe to do so (for example, on successful reset when the server can deterministically map the token to a single `econ_political_forum_registereduser.id`). Do NOT include any authentication tokens or password material in this response. If omitted, clients should assume the server performed the operation but may require the user to log in."},"next_step":{"type":"string","description":"Optional guidance for the client about next steps (for example: 'login_required', 'auto_login_not_permitted', or short instructions about session revocation). This is an advisory field; it must not contain sensitive information or tokens."}},"required":["success","message"],"description":"Response returned after attempting to confirm a password reset for an administrator account.\n\nBehavior:\n- On success the server returns success=true, a non-sensitive message, and may optionally include `user_id` and `next_step` guidance. The server MUST NOT return any authentication tokens in this response. The server SHOULD also ensure active sessions are invalidated (or indicate to the client that they must re-authenticate) to prevent reuse of old credentials.\n\n- On failure (invalid/expired token, token already used, policy violation), the server returns success=false with a user-facing message explaining the failure in clear, non-technical terms. The response must avoid leaking whether the token maps to a specific account in contexts where such disclosure would enable account enumeration."},"IEconPoliticalForumAdministrator.IVerifyEmailResponse":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the email verification operation completed successfully.\n\nThis boolean is true when the verification token was valid and the user's email verification state was updated. Clients should treat false as an actionable failure and surface the accompanying message to the operator."},"user_id":{"type":"string","format":"uuid","description":"Unique identifier of the registered user whose email was verified.\n\nThis corresponds to the Prisma model econ_political_forum_registereduser.id and is provided so clients can correlate the verification result to a local record. Use this id only for correlation and not to convey sensitive contact details."},"verified_at":{"type":"string","format":"date-time","description":"Timestamp when the email verification was applied (ISO 8601).\n\nThis timestamp is the canonical moment the registered user's email_verified flag was set and corresponds to econ_political_forum_registereduser.verified_at in the Prisma schema. It is provided for auditing and UI update purposes."},"message":{"type":"string","description":"Human-readable message describing the outcome of the verification operation.\n\nThis field is suitable for display to end users or administrators to provide context (for example, \"Email verified successfully\" or \"Token expired — verification failed\"). It is optional and intended for presentation only."}},"required":["success","user_id","verified_at"],"description":"Response returned after attempting to verify a registered user's email address.\n\nThis object communicates the outcome of the verification flow and provides the canonical user identifier and the timestamp at which verification occurred. It is intended for use by administrative UIs and client-side flows to confirm that the registered user's `email_verified` state changed.\n\nNotes:\n- Do not include sensitive fields such as the user's email address or password in this response. Use user_id for correlation with local records.\n- The `verified_at` field uses ISO 8601 date-time format and should be treated as authoritative for audit logs."},"IEconPoliticalForumAdministrator.IChangePassword":{"type":"object","properties":{"current_password":{"type":"string","description":"The account's current password in plain text.\n\nThe server uses this value only to validate the caller's identity before allowing a password change. For security, the current password must not be logged or returned by the API. Clients MUST send the exact current password used at authentication time.","minLength":10},"new_password":{"type":"string","description":"The new password to set for the account in plain text.\n\nThis value must meet the platform's password strength policy (for example, minimum length, mixture of character classes). The server is responsible for hashing the password and storing the hash in econ_political_forum_registereduser.password_hash. Do not send confirmation of the new password in the response.","minLength":10,"maxLength":128}},"required":["current_password","new_password"],"description":"Request body for changing an authenticated administrator's password.\n\nThis DTO is used by authenticated administrators to change their password. The server must verify `current_password` matches the stored password hash before updating `password_hash` in the registered user record, rotate/invalidate existing sessions as appropriate, and record an audit entry for the operation.\n\nSecurity guidance:\n- The `current_password` and `new_password` fields are plaintext in transit and MUST be transported only over TLS/HTTPS.\n- The server MUST enforce password strength, store only a secure hash of `new_password`, and invalidate or rotate refresh tokens/sessions as appropriate after a successful change."},"IEconPoliticalForumAdministrator.IChangePasswordResponse":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password change operation completed successfully.\n\nTrue when the password was updated and any required side-effects (for example session invalidation) were initiated. False when the request was rejected due to validation, authorization, or other application-level reasons."},"message":{"type":"string","description":"Human-readable status message describing the result of the operation.\n\nThis message is intended for display to the caller (admin UI). It provides short guidance such as why an operation failed (e.g., \"current password invalid\", \"password does not meet strength requirements\") or confirms success (e.g., \"Password changed successfully\")."},"timestamp":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when the response was generated by the server.\n\nThis helps client and server correlate the event in logs and audit trails. Example: \"2025-10-03T19:21:50Z\"."}},"required":["success","message","timestamp"],"description":"Response returned after an administrator password change operation.\n\nThis DTO communicates the result of a password change request initiated by an administrator. It is intentionally simple: it signals whether the operation succeeded, provides a concise human-friendly message for the caller, and includes a server-side timestamp for traceability.\n\nNote: This type does not map directly to a Prisma model. Sensitive fields such as the plaintext password or password_hash are never returned in responses. Any session revocation or audit logging triggered by the password change is performed server-side and is recorded separately in the platform's audit logs."},"IEconPoliticalForumAdministrator.ISessionsRevokeRequest":{"oneOf":[{"type":"object","properties":{"session_ids":{"type":"array","items":{"type":"string","format":"uuid","description":"Session identifier (econ_political_forum_sessions.id) to be revoked. Clients may include one or more session ids to revoke specific sessions."},"description":"List of session UUIDs to revoke for the targeted user. When present, the server will attempt to revoke each listed session (set deleted_at or equivalent) and return a summary result. If a listed session id is not found or already revoked, the server handles this idempotently and reports the status per-item in the operation result (not part of this request DTO).","minItems":1},"revoke_all":{"type":"boolean","description":"When true, instructs the server to revoke all active sessions for the authenticated administrator. If revoke_all is true the server SHOULD ignore session_ids. Use with caution: this performs a broad security action and may be audited."}},"required":[],"description":"Request object describing sessions to revoke. Either provide an explicit list of session_ids to revoke, set revoke_all=true to revoke every active session for the calling administrator, or provide an empty object (or null -- see alternate branch) to list sessions without revoking."},{"type":"null","description":"Null body indicates a request to list sessions (no revocation). The server may treat this as a read-only request to return current sessions without performing revocations."}],"description":"Request DTO for revoking (or listing) administrator sessions.\n\nThis type is used by administrative session-management endpoints to request revocation of specific sessions (by id) or to request revocation of all sessions for the authenticated administrator. When the body is null, the request is a non-mutating listing operation. The actual revocation is performed by updating the corresponding rows in the `econ_political_forum_sessions` table (for example by setting deleted_at); this DTO does not itself reference the database schema and is intended only as the transport representation for the request."},"IEconPoliticalForumAdministrator.ISession":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_sessions","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the session (econ_political_forum_sessions.id)."},"registereduser_id":{"type":"string","format":"uuid","description":"UUID of the registered user owning the session (econ_political_forum_sessions.registereduser_id)."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address observed at session creation (nullable)."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string captured at session creation (nullable)."},"last_active_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last observed activity for the session (ISO 8601) or null if not recorded."},"expires_at":{"type":"string","format":"date-time","description":"Session expiry timestamp (ISO 8601)."},"created_at":{"type":"string","format":"date-time","description":"Session creation timestamp (ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Session record last update timestamp (ISO 8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for revoked sessions (nullable)."}},"required":["id","registereduser_id","expires_at","created_at","updated_at"],"description":"Session summary representing an active or revoked user session; maps to econ_political_forum_sessions."},"IEconPoliticalForumAdministrator.ISessionsListResponse":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPageIPagination","description":"Pagination information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconPoliticalForumAdministrator.ISession"},"description":"Array of session summary objects for the requested user or administrative listing."}},"required":["pagination","data"],"description":"Paginated list of session summaries for administrative review."},"IEconPoliticalForumCategory.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number (1-based).","example":1},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page. Default 20, maximum 100.","example":20},"q":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text search across category name, slug, and description."},"is_moderated":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by categories that require moderator approval (true) or not (false). Null means no filter."},"requires_verification":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by categories that require verified accounts to post. Null means no filter."},"sort_by":{"oneOf":[{"const":"order","description":"Field to sort by. Allowed values: 'order', 'created_at', 'name'.","example":"order"},{"const":"created_at","description":"Field to sort by. Allowed values: 'order', 'created_at', 'name'.","example":"order"},{"const":"name","description":"Field to sort by. Allowed values: 'order', 'created_at', 'name'.","example":"order"}],"description":"Field to sort by. Allowed values: 'order', 'created_at', 'name'."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'.","example":"asc"},{"const":"desc","description":"Sort direction: 'asc' or 'desc'.","example":"asc"}],"description":"Sort direction: 'asc' or 'desc'."},"includeDeleted":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Include soft-deleted categories when true. This flag is admin-only; public clients must not set this to true."}},"required":[],"description":"Request DTO for listing/searching categories with pagination, filters, and sorting."},"IEconPoliticalForumCategory":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_categories","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) of the category as defined in the Prisma model `econ_political_forum_categories`.\n\nThis field is generated by the database and uniquely identifies a category record. Use this value for references from threads and other related entities."},"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short business code for the category (for example, \"fiscal\", \"trade\").\n\nPer the Prisma model this field is nullable and, when present, is unique. It is intended for machine-friendly classification or external integrations. If not provided, the value is null."},"name":{"type":"string","description":"Human-visible category name used in UI navigation and listings.\n\nThis corresponds to the `name` column in the Prisma model and is required. Use a concise, user-friendly label that clearly communicates the category's scope."},"slug":{"type":"string","description":"URL-friendly unique slug for the category used for routing and lookups.\n\nThis value maps to the `slug` column in the Prisma model and must be unique. It is commonly lower-cased and URL-safe (no spaces)."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional longer textual description explaining the purpose and scope of the category.\n\nThis maps to the Prisma `description` column and is intended for help text, moderator guidance, or category tooltips in the UI."},"is_moderated":{"type":"boolean","description":"Whether new posts in this category require moderator approval before public publishing.\n\nMatches the `is_moderated` boolean in the Prisma model. When true, posts may be placed in a moderation queue rather than published immediately."},"requires_verification":{"type":"boolean","description":"When true, posting in this category requires a verified account (for example, email verified).\n\nThis flag maps to the `requires_verification` column in the Prisma model and is used by business logic to gate posting privileges."},"order":{"type":"integer","description":"Display order hint for UI lists; lower values are shown earlier.\n\nThis corresponds to the `order` integer column in the Prisma model and helps the frontend present categories in a consistent sequence."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (ISO 8601, UTC) as persisted in the `created_at` column of the Prisma model.\n\nThis is a system-managed value and appears on responses to indicate when the category was created."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp (ISO 8601, UTC) as persisted in the `updated_at` column of the Prisma model.\n\nThis is system-managed and updated whenever the category metadata changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp (ISO 8601, UTC) used to mark archived/removed categories. Null indicates the category is active.\n\nThis maps to the nullable `deleted_at` column in the Prisma model. Public listing endpoints should exclude records where this field is not null unless the caller is an authorized administrator."}},"required":["id","name","slug","is_moderated","requires_verification","order","created_at","updated_at"],"description":"IEconPoliticalForumCategory — Full category representation mapped to the Prisma model `econ_political_forum_categories`.\n\nThis schema returns the canonical category record used across the platform for navigation, moderation routing, and posting rules. Each property directly corresponds to a column in the Prisma model; system-managed timestamps (created_at, updated_at) and the UUID primary key (id) are included when present.\n\nDo NOT send sensitive fields in public responses (this type intentionally excludes secrets). The `deleted_at` field is included to indicate soft-deleted categories but public consumers should treat non-null deleted_at as not-found for normal listings."},"IEconPoliticalForumCategory.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_categories","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short business code for the category (for example, 'fiscal' or 'trade'). When omitted use null. If provided it must be unique among categories."},"name":{"type":"string","description":"Human-visible category name. Required. This becomes the `name` column in the Prisma model and is shown in UI lists and navigation."},"slug":{"type":"string","description":"URL-friendly unique slug for the category. Required. Should be lower-case and URL-safe; used as the canonical lookup key (maps to Prisma `slug` which is unique)."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional longer description explaining category purpose and scope. Stored in the Prisma `description` column when provided."},"is_moderated":{"type":"boolean","description":"Whether new posts in this category require moderator approval before publishing. Required. Maps to the Prisma `is_moderated` boolean."},"requires_verification":{"type":"boolean","description":"Whether posting in this category requires a verified account. Required. Maps to the Prisma `requires_verification` boolean."},"order":{"type":"integer","description":"Display order hint for UI lists; lower values are shown earlier. Required; maps to the Prisma `order` integer column."}},"required":["name","slug","is_moderated","requires_verification","order"],"description":"IEconPoliticalForumCategory.ICreate — Create DTO for a forum category.\n\nUse this object when creating a new category. Do NOT include system-managed fields such as `id`, `created_at`, `updated_at`, or `deleted_at` in the create payload — those are generated by the server and persisted by the Prisma model. Provide required business fields (name, slug, is_moderated, requires_verification, order). Optional fields may be set to null explicitly when not provided."},"IEconPoliticalForumCategory.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_categories","properties":{"name":{"type":"string","description":"Human-visible category name used in UI and navigation.\n\nThis property directly maps to the `name` column in the Prisma model `econ_political_forum_categories`. Use a clear, concise display name suitable for menus and lists. The API treats this field as mutable so administrators can correct or rename categories. Provide a localized, user-facing string."},"slug":{"type":"string","description":"URL-friendly unique slug used for routing and lookups.\n\nThis maps to the `slug` column in the Prisma model `econ_political_forum_categories`. Slugs are used in URLs and must be unique across active categories. The server will validate format (lower-case, URL-safe) and uniqueness; collisions result in a 409 Conflict. Do not include leading/trailing slashes."},"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short business code (for example, 'fiscal' or 'trade').\n\nThis maps to the nullable `code` column in `econ_political_forum_categories`. The field is nullable in the database; when clearing this value clients may send `null`. Codes are optional but when present should be concise and unique within business context."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Longer textual description explaining the purpose and scope of the category.\n\nThis maps to the `description` column in the `econ_political_forum_categories` Prisma model and is nullable. Use this field to provide editors and moderators contextual guidance about what belongs in the category. Clients may send `null` to clear the description."},"is_moderated":{"type":"boolean","description":"Whether new posts in this category require moderator approval before public publishing.\n\nThis maps to the `is_moderated` boolean column in the Prisma model. Setting this flag to true places new threads/posts into moderator queues according to platform moderation workflows."},"requires_verification":{"type":"boolean","description":"When true, posting in this category requires a verified account (for example, verified email).\n\nThis corresponds to the `requires_verification` boolean column in `econ_political_forum_categories`. Use this flag to gate posting privileges for higher-risk or expert-only categories."},"order":{"type":"integer","format":"int32","description":"Display order hint for UI lists; lower values are shown earlier.\n\nThis maps to the `order` integer column in the Prisma model. It is a presentation hint used by the UI to sort categories. Use small integer values where lower means higher precedence."}},"required":[],"description":"Partial update DTO for a category (econ_political_forum_categories).\n\nThis object is intended for administrators to modify mutable category metadata. All listed properties are optional to enable partial updates; only the properties provided by the client will be changed. Each property maps directly to a column in the Prisma model `econ_political_forum_categories` and must conform to the semantics described per-property above.\n\nSecurity and business notes:\n- Only administrator (or authorized) callers should be permitted to call the category update API.\n- Changing `is_moderated` or `requires_verification` can affect content visibility and moderator routing; such changes should be audited and may require notifying moderators."},"IEconPoliticalForumSiteSetting.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_site_settings","properties":{"value":{"type":"string","description":"New value for the configuration key. Stored as string; interpretation is the application's responsibility."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated human-readable description. Null clears the description."},"environment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional environment tag to scope this setting. Null removes environment scoping."},"is_public":{"type":"boolean","description":"Optional toggle to change whether the setting is visible to non-admin clients."}},"required":[],"description":"Partial DTO for updating site settings. This type maps to the Prisma model econ_political_forum_site_settings and includes only mutable fields that administrators may change via the API. System-managed fields (id, created_at, updated_at, deleted_at) are not accepted in update payloads and are generated by the server.","example":{"value":"10","description":"Raise escalation threshold to 10 reports in 24 hours.","environment":"staging","is_public":false}},"IEconPoliticalForumSiteSetting":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_site_settings","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the site setting record.\n\nMaps to econ_political_forum_site_settings.id in the Prisma schema. Used as the stable identifier for configuration entries."},"key":{"type":"string","description":"Unique configuration key (namespace.form). Example: 'moderation.report_threshold'.\n\nThis value is unique and used by the application to look up runtime configuration. It must follow the project's key naming conventions."},"value":{"type":"string","description":"Configuration value stored as a string. Interpretation (boolean/int/json) is performed by application logic.\n\nThis field maps to econ_political_forum_site_settings.value in the Prisma model."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable description explaining the purpose of the setting for administrators.\n\nMaps to econ_political_forum_site_settings.description. May be null when not provided."},"environment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional environment tag (for example: 'production', 'staging') used to scope overrides. Maps to econ_political_forum_site_settings.environment.\n\nIf null, the setting is considered environment-agnostic."},"is_public":{"type":"boolean","description":"Whether this setting is visible to non-admin clients/UI. When true, the application MAY expose a redacted or controlled view to public APIs.\n\nMaps to econ_political_forum_site_settings.is_public."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 format (UTC).\n\nMaps to econ_political_forum_site_settings.created_at in the Prisma schema."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp in ISO 8601 format (UTC). Updated by server when the record is modified.\n\nMaps to econ_political_forum_site_settings.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. When non-null the setting is considered archived/removed from active listings.\n\nMaps to econ_political_forum_site_settings.deleted_at and may be null."}},"required":["id","key","value","is_public","created_at","updated_at"],"description":"Site-level configuration setting used by econPoliticalForum.\n\nThis schema represents the canonical configuration item stored in the database (Prisma model: econ_political_forum_site_settings). Each record contains a unique key, a string value (application-typed by runtime), optional metadata (description, environment), and visibility flag (is_public) used to control exposure. Timestamps document creation and modification. When x-autobe-prisma-schema is present, every property corresponds to a column in the referenced Prisma model.\n\nBusiness notes:\n- The application interprets the `value` string according to the key's expected type (boolean, integer, JSON). Do not assume typed semantics at the schema level.\n- `key` uniqueness is enforced at the DB layer; API clients should treat key collisions as 409 Conflict.","example":{"id":"7f9c2b3a-1a2b-4c3d-9e8f-0123456789ab","key":"moderation.report_threshold","value":"5","description":"Number of independent reports within 24 hours required to escalate an item to high priority.","environment":"production","is_public":false,"created_at":"2025-10-03T12:00:00Z","updated_at":"2025-10-03T12:00:00Z","deleted_at":null}},"IEconPoliticalForumFeatureFlag.IRequest":{"type":"object","properties":{"key":{"type":"string","description":"Optional partial or full key to filter feature flags (for example 'new_search_ui'). Supports prefix or substring matching depending on server implementation."},"enabled":{"type":"boolean","description":"Optional filter to return only flags matching the enabled state."},"rolloutMin":{"type":"integer","minimum":0,"maximum":100,"description":"Optional minimum rollout percentage (0-100) to filter flags whose rollout_percentage is >= this value."},"rolloutMax":{"type":"integer","minimum":0,"maximum":100,"description":"Optional maximum rollout percentage (0-100) to filter flags whose rollout_percentage is <= this value."},"environment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional environment to scope the search (for example 'production' or 'staging'). Null means environment-agnostic results."},"sort":{"oneOf":[{"const":"key","description":"Sort field. Allowed values: 'key', 'created_at', 'rollout_percentage'."},{"const":"created_at","description":"Sort field. Allowed values: 'key', 'created_at', 'rollout_percentage'."},{"const":"rollout_percentage","description":"Sort field. Allowed values: 'key', 'created_at', 'rollout_percentage'."}],"description":"Sort field. Allowed values: 'key', 'created_at', 'rollout_percentage'."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'. Defaults to 'asc' when omitted."},{"const":"desc","description":"Sort direction: 'asc' or 'desc'. Defaults to 'asc' when omitted."}],"description":"Sort direction: 'asc' or 'desc'. Defaults to 'asc' when omitted."},"page":{"type":"integer","minimum":1,"description":"Page number for page-based pagination (1-based)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum items per page. Server enforces a maximum of 200."},"includeDeleted":{"type":"boolean","description":"When true, include soft-deleted flags (deleted_at != null). This behavior is typically restricted to administrator callers; public requests should not set this flag."}},"required":[],"description":"Request DTO for searching and listing feature flags. This payload supports filtering by key, enabled state, rollout percentage range, environment scoping, pagination, and sorting. The server must validate numeric bounds (rolloutMin/rolloutMax in 0-100) and enforce page size limits. includeDeleted is admin-only and should be rejected for non-admin callers.","example":{"key":"new_search_ui","enabled":true,"rolloutMin":10,"rolloutMax":100,"environment":"production","sort":"rollout_percentage","direction":"desc","page":1,"limit":25,"includeDeleted":false}},"IEconPoliticalForumFeatureFlag":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_feature_flags","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for the feature flag record as stored in the `econ_political_forum_feature_flags` Prisma model. Used to uniquely identify the flag."},"key":{"type":"string","description":"Unique feature key used by application code to reference the flag (example: 'new_search_ui'). This value is unique within the table and serves as the canonical identifier for the flag."},"enabled":{"type":"boolean","description":"Indicates whether the feature flag is enabled globally. When true, the feature is considered active subject to rollout rules."},"rollout_percentage":{"oneOf":[{"type":"integer","minimum":0,"maximum":100,"description":"Integer percentage between 0 and 100 representing partial rollout coverage."},{"type":"null"}],"description":"Optional rollout percentage (0–100) used for progressive exposure. When present, it indicates the percentage of eligible users who should see the feature. Null indicates no partial rollout is configured and the global `enabled` boolean controls exposure."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrative description of the feature flag purpose and guidance for operators. Use this field to explain the intended behavior, rollout considerations, and any dependencies. Nullable when no description is provided."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601) for the feature flag row (Prisma timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the feature flag row was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft-delete timestamp (ISO 8601). When present, the flag is archived and should be excluded from normal administrative listings unless specifically requested by an administrator."}},"required":["id","key","enabled","created_at","updated_at"],"description":"Feature flag record for econPoliticalForum.\n\nThis schema maps directly to the Prisma model `econ_political_forum_feature_flags`. It represents runtime toggles used by the application. Fields:\n- id: UUID primary key\n- key: unique string key\n- enabled: global boolean\n- rollout_percentage: optional integer 0–100 for gradual rollout\n- description: optional admin-facing text\n- created_at / updated_at: timestamps\n- deleted_at: optional soft-delete timestamp (null when active)\n\nTimestamps use ISO 8601 date-time format and values must be returned in UTC."},"IEconPoliticalForumTag.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for page/limit pagination (1-based). Use either page/limit or cursor; server default page=1."},"limit":{"type":"integer","description":"Number of items per page. Server enforces a maximum (for example 100)."},"cursor":{"type":"string","description":"Opaque cursor for cursor-based pagination. When provided, cursor pagination takes precedence over page/limit."},"q":{"type":"string","description":"Free-text search query applied to tag name and description. Use for partial matching; server sanitizes input."},"includeDeleted":{"type":"boolean","description":"If true, include soft-deleted tags (deleted_at not null). This flag is restricted to administrator requests; non-admin requests must not set this flag or will receive 403."},"sort_by":{"oneOf":[{"const":"name","description":"Field to sort by. Allowed values: 'name' or 'created_at'."},{"const":"created_at","description":"Field to sort by. Allowed values: 'name' or 'created_at'."}],"description":"Field to sort by. Allowed values: 'name' or 'created_at'."},"order":{"oneOf":[{"const":"asc","description":"Sort order. Allowed values: 'asc' or 'desc'."},{"const":"desc","description":"Sort order. Allowed values: 'asc' or 'desc'."}],"description":"Sort order. Allowed values: 'asc' or 'desc'."}},"required":[],"description":"IEconPoliticalForumTag.IRequest — Request DTO for listing/searching tags.\n\nThis type is used for search and pagination requests. It intentionally does NOT include `x-autobe-prisma-schema` because it is not a direct table mapping. Admin-only flags (includeDeleted) are documented and enforced server-side."},"IEconPoliticalForumTag":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_tags","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the tag as stored in the `econ_political_forum_tags` Prisma model."},"name":{"type":"string","description":"Normalized, human-readable tag name. Maps to `name` column in the Prisma model.\n\nProvide a short, discoverable label such as \"fiscal-policy\". This field is unique among active tags."},"slug":{"type":"string","description":"URL-friendly lower-case slug for the tag. Maps to `slug` column in the Prisma model.\n\nMust be URL-safe and unique; server enforces uniqueness."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional longer description explaining the tag's scope. This maps to `description` in the Prisma model and may be null."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp from the database (Prisma `created_at` column). Only present because the Prisma model defines this timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp from the database (Prisma `updated_at` column). Only present because the Prisma model defines this timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp; null when the tag is active. This maps to `deleted_at` in the Prisma model."}},"required":["id","name","slug","created_at","updated_at"],"description":"IEconPoliticalForumTag — Canonical tag entity mapping to the Prisma model `econ_political_forum_tags`.\n\nThis schema exposes only properties that exist in the referenced Prisma model and is safe for use in detailed responses. It intentionally omits any secrets or system-managed properties that do not exist in Prisma. Use this type for full-detail responses only; for list views use the `.ISummary` variant."},"IEconPoliticalForumTag.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_tags","properties":{"name":{"type":"string","description":"Required normalized tag name to create.\n\nProvide a short, normalized name (for example: \"fiscal-policy\"). The server enforces uniqueness of this field among active tags."},"slug":{"type":"string","description":"Required URL-friendly slug for the tag.\n\nShould be lower-case, trimmed, and URL-safe. The server will validate uniqueness of slug and may reject values that conflict with existing tags."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional descriptive text explaining the tag's purpose.\n\nIf not provided, this field may be null. This field maps to econ_political_forum_tags.description and is intended for editorial context only."}},"required":["name","slug"],"description":"IEconPoliticalForumTag.ICreate — DTO used when creating a new tag.\n\nThis request schema maps to the Prisma model `econ_political_forum_tags` and includes only the fields clients may provide when creating a tag. System-managed fields (id, created_at, updated_at, deleted_at) are not accepted in this DTO and are generated by the server. The server will enforce uniqueness on `name` and `slug` and validate slug formatting. If a uniqueness conflict occurs, the API will return a 409 Conflict."},"IEconPoliticalForumTag.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_tags","description":"Tag update DTO for econPoliticalForum.\n\nThis object is used to update mutable fields of an existing normalized tag record. Each property, when present, maps directly to a column on the Prisma model `econ_political_forum_tags`. All fields are optional for partial updates. The server enforces uniqueness and normalization rules for `name` and `slug` and will validate inputs before persisting.\n\nUsage notes:\n- Clients should provide only the fields they intend to change.\n- The server may sanitize or normalize values (for example, lower-casing `slug`).","properties":{"name":{"type":"string","description":"Canonical, human-readable tag name. Maps to `name` in the `econ_political_forum_tags` table.\n\nProvide a normalized name suitable for discovery (e.g., \"fiscal-policy\"). The server enforces uniqueness among active tags and may return 409 Conflict if a duplicate exists."},"slug":{"type":"string","description":"URL-friendly slug used for routing and lookups. Maps to `slug` in the `econ_political_forum_tags` table.\n\nProvide a lower-case, URL-safe value (no spaces). If omitted, the server may derive a slug from `name`."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional longer description of the tag's purpose and scope. Maps to `description` in `econ_political_forum_tags`.\n\nProvide human-friendly guidance (examples of use, clarifying scope). To explicitly clear the description, pass null."}},"required":[]},"IEconPoliticalForumThread.IRequest":{"type":"object","description":"Request DTO for listing/searching threads.\n\nUsed by thread-list endpoints to express pagination, filtering, sorting and search criteria. Supports both page/limit and cursor styles of pagination; when both are present the server documents which takes precedence. The DTO maps to the read/query behavior of the `econ_political_forum_threads` model and related joins (tags via `econ_political_forum_thread_tags`).","properties":{"page":{"type":"integer","minimum":1,"description":"One-based page number for page-based pagination. Default: 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum items per page. Default: 20. The server enforces an upper bound to protect performance."},"cursor":{"type":"string","description":"Opaque cursor token for cursor-based pagination. When provided, cursor-based continuation is used instead of page/limit. The response includes a next-cursor when applicable."},"q":{"type":"string","description":"Free-text search query applied to thread title and other indexed fields. The server uses trigram/full-text indexes to rank results by relevance when provided. Keep queries reasonably short (implementation example limit: 500 chars)."},"category_id":{"type":"string","format":"uuid","description":"Filter results to a specific category by UUID (maps to `econ_political_forum_threads.category_id`)."},"tag_id":{"type":"string","format":"uuid","description":"Filter results to threads associated with the specified tag id (via `econ_political_forum_thread_tags.tag_id`)."},"author_id":{"type":"string","format":"uuid","description":"Filter results to threads authored by the specified registered user id (maps to `econ_political_forum_threads.author_id`)."},"status":{"type":"string","description":"Optional lifecycle status filter for threads (application-defined domain values such as 'open','closed','pending','pinned'). The server validates allowed values."},"pinned":{"type":"boolean","description":"When true, return only threads with the pinned flag set."},"created_from":{"type":"string","format":"date-time","description":"ISO 8601 start timestamp to filter threads created at or after this time."},"created_to":{"type":"string","format":"date-time","description":"ISO 8601 end timestamp to filter threads created before or at this time."},"includeDeleted":{"type":"boolean","description":"Administrative flag to include soft-deleted threads (deleted_at != null) in results. Restricted to moderator/administrator callers; public requests setting this flag will be rejected."},"sort_by":{"oneOf":[{"const":"relevance","description":"Sort option for returned threads. Use exact enum values."},{"const":"newest","description":"Sort option for returned threads. Use exact enum values."},{"const":"oldest","description":"Sort option for returned threads. Use exact enum values."},{"const":"updated","description":"Sort option for returned threads. Use exact enum values."},{"const":"pinned","description":"Sort option for returned threads. Use exact enum values."}],"description":"Sort option for returned threads. Use exact enum values."},"order":{"oneOf":[{"const":"asc","description":"Sort direction applied to the selected `sort_by` field. Default behavior: 'desc' for most sorts."},{"const":"desc","description":"Sort direction applied to the selected `sort_by` field. Default behavior: 'desc' for most sorts."}],"description":"Sort direction applied to the selected `sort_by` field. Default behavior: 'desc' for most sorts."}},"required":[]},"IEconPoliticalForumThread":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_threads","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the thread as defined in the Prisma model econ_political_forum_threads.id.\n\nThis field is a stable UUID that uniquely identifies the thread across the system and is produced by the database at creation time. Use this value to reference the thread in URLs and cross-entity links."},"category_id":{"type":"string","format":"uuid","description":"Identifier of the category that this thread belongs to (econ_political_forum_categories.id).\n\nThis property ties the thread to a category used for routing, visibility rules, and moderator assignment. It must reference an active category id present in the categories table."},"author_id":{"type":"string","format":"uuid","description":"Identifier of the registered user who created the thread (econ_political_forum_registereduser.id).\n\nThis field is populated by the application from the authenticated session and is immutable via public update endpoints. It appears in responses so clients can display author attribution and link to the author's profile."},"title":{"type":"string","description":"Thread title used for list display and search.\n\nBusiness constraints: prefer concise, descriptive titles. For the API this field is expected to contain between 5 and 200 characters; clients should validate length before submission to improve user experience."},"slug":{"type":"string","description":"URL-friendly unique slug for the thread (used for routing). Must be unique across threads as enforced by the Prisma model.\n\nSlugs should be lower-case, hyphen-separated, and suitable for inclusion in URLs. The server may synthesize a slug when omitted on create (but the Prisma model requires a slug value), so clients should either submit a valid slug or allow the server to generate one."},"status":{"type":"string","description":"Thread lifecycle status (for example: 'open', 'closed', 'pinned').\n\nThis value is an application-defined status used to control thread behavior in listings and moderation workflows. Valid domain values are defined by the application; clients should use documented values."},"pinned":{"type":"boolean","description":"Whether the thread is pinned for prominent display.\n\nPinning is normally a privileged action (moderator/administrator). While the underlying Prisma model stores this flag, client-level create/update operations should respect RBAC and avoid setting this flag unless the caller has appropriate privileges."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the thread record was created (ISO 8601, UTC).\n\nThis is a system-generated field populated by the database. It is useful for sorting and auditing and should not be set by clients on create."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the thread record was last updated (ISO 8601, UTC).\n\nUpdated automatically by the system when mutable fields change. Clients may present this value to indicate freshness."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. Null when the thread is active. When set, the thread is considered archived/removed from public listings but retained for audit and moderation purposes.\n\nUse this field to determine visibility; public endpoints should exclude records where deleted_at is non-null unless the caller is an authorized admin."}},"required":["id","category_id","author_id","title","slug","status","pinned","created_at","updated_at"],"description":"Thread (top-level topic) entity representing a discussion thread in econPoliticalForum.\n\nThis schema maps directly to the Prisma model econ_political_forum_threads and includes canonical fields used across the API: category reference, author reference, title, slug, lifecycle status, pinned flag, and timestamps. It excludes derived aggregates (view counts, post counts) which are computed externally.\n\nConsumers: Use this type for detailed thread responses (GET /threads/{id}) where full identification and audit timestamps are required."},"IEconPoliticalForumThread.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_threads","properties":{"category_id":{"type":"string","format":"uuid","description":"UUID of the category the new thread will belong to (econ_political_forum_categories.id).\n\nThis is required so the server can enforce category-level rules such as moderation gating and verification requirements."},"title":{"type":"string","minLength":5,"maxLength":200,"description":"Title of the thread. Must be between 5 and 200 characters.\n\nClients should validate length prior to submission to provide immediate feedback. Titles are used for listings and search."},"slug":{"type":"string","description":"URL-friendly slug for the thread. Must be unique. If omitted, the server MAY synthesize a slug from the provided title but the Prisma model requires a slug value; therefore clients SHOULD provide a valid slug when possible.\n\nFormat guidance: lower-case, hyphen-separated, URL-safe characters."},"status":{"type":"string","description":"Optional initial lifecycle status for the thread (for example 'open').\n\nIf omitted the server may set a sensible default such as 'open'. Certain status values may be restricted to moderators/administrators."},"pinned":{"type":"boolean","description":"Optional pin hint. Pinning is typically limited to moderators/administrators; ordinary creators SHOULD not set this flag. If provided by an unprivileged caller, the server will ignore or reject it per RBAC policy."}},"required":["category_id","title","slug"],"description":"Create DTO for a new discussion thread. This type is used as the request body for thread-creation endpoints (POST /threads).\n\nBusiness rules and security notes:\n- Do NOT include author_id in this payload: the server derives author identity from the authenticated session.\n- The server validates category membership, enforces category-specific posting rules (e.g., requires_verification), and may queue the thread for moderator approval when required by the category.\n- The server is responsible for setting system fields (id, created_at, updated_at) on successful creation.\n\nThis DTO maps to the Prisma model econ_political_forum_threads; all properties present here correspond to model fields and are intentionally conservative to ensure implementability with the existing schema."},"IEconPoliticalForumThread.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_threads","properties":{"category_id":{"type":"string","format":"uuid","description":"Identifier of the category the thread should be moved into.\n\nThis property maps directly to the Prisma column econ_political_forum_threads.category_id. Use a UUID string. Service-layer business rules may restrict changing category (only allowed to thread authors within policy windows or to moderators/administrators). If provided, the server MUST validate the category exists and is active before applying the update."},"title":{"type":"string","description":"Thread title used for listing and search.\n\nThis maps to the Prisma column econ_political_forum_threads.title. The title SHOULD be between 5 and 200 characters. Titles are full-text indexed (trigram/GIN) so prefer meaningful, keyword-rich titles for discoverability. The server will validate length and sanitize input to remove unsafe HTML/markup."},"slug":{"type":"string","description":"URL-friendly identifier for the thread (unique).\n\nThis maps to the Prisma column econ_political_forum_threads.slug. Slugs must be lower-case, URL-safe, and unique across threads. If omitted, the server may regenerate or keep the existing slug. If provided, the server MUST validate uniqueness and return a 409 Conflict when a collision occurs."},"status":{"type":"string","description":"Thread lifecycle status (for example: 'open','closed','pinned').\n\nThis property maps to the Prisma column econ_political_forum_threads.status. The Prisma schema stores status as a string; the application enforces domain values. Provide one of the allowed status tokens used by your deployment. Changing status may affect visibility and interaction (for example, 'closed' prevents new posts)."},"pinned":{"type":"boolean","description":"Whether the thread is pinned for prominent display.\n\nThis maps to the Prisma column econ_political_forum_threads.pinned. Only moderators or administrators are normally permitted to set this flag; if a non-privileged caller supplies pinned=true the server will either ignore it or return 403 depending on policy."}},"required":[],"description":"Thread update DTO for econPoliticalForum. This object contains the mutable fields of the econ_political_forum_threads Prisma model that may be changed through update operations.\n\nAll properties correspond directly to columns in the `econ_political_forum_threads` Prisma model. Fields are optional to support partial updates; when present, each field is validated against the corresponding database constraints and business rules (uniqueness, referential integrity, moderation gating).\n\nSecurity notes:\n- This DTO MUST NOT include ownership or system-managed fields such as `id`, `created_at`, `updated_at`, or any moderator-only internal fields. Moderator-only mutation rights (for example, setting `pinned`) are enforced by the service layer rather than by this DTO.\n\nUsage guidance:\n- Use for PUT/PATCH thread update endpoints. The server implements authorization checks and business validation before applying changes."},"IEconPoliticalForumPost.IRequest":{"type":"object","properties":{"threadId":{"type":"string","format":"uuid","description":"Filter posts by the thread UUID. If provided the query returns posts belonging to this thread only.\n\nThis parameter corresponds to the thread identity visible to API clients (not the database column name). Server will validate the UUID and that the thread exists and is visible to the requester."},"authorId":{"type":"string","format":"uuid","description":"Filter posts by author (registered user) UUID.\n\nWhen provided, server returns posts authored by this user. For privacy, some author-scoped queries may be restricted or rate-limited."},"parentId":{"type":"string","format":"uuid","description":"Filter posts by parent post id to retrieve replies to a specific post.\n\nUseful for building reply threads. When provided, the server validates the parent exists within the thread scope."},"search":{"type":"string","description":"Full-text search term applied to post content. Uses server-side full-text/trigram indexes for performance.\n\nSearch strings longer than a configured maximum (for example 500 chars) will be rejected. The server will sanitize the query and apply relevance ranking when supported."},"page":{"type":"integer","minimum":1,"description":"Page number for page-based pagination. If omitted, server may use cursor-based paging or default to page=1. Default page size is 20; maximum allowed page size is typically 100."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page for page-based pagination. Default is 20 and maximum enforced by server is 100."},"cursor":{"type":"string","description":"Opaque cursor token for cursor-based pagination. The server issues cursor tokens in paginated responses; clients pass this value to retrieve the next page."},"sort":{"type":"string","description":"Sort order for returned posts. Common values: 'newest', 'oldest', 'most_voted'.\n\nWhen 'most_voted' is requested the service may rely on aggregated data sources; if unavailable the server will fall back to 'newest'."},"includeHidden":{"type":"boolean","description":"When true and the caller has moderator/administrator privileges, include moderator-hidden posts (posts where is_hidden = true). Ordinary callers must not set this flag; if supplied by an unauthorized caller the server will ignore it or return 403."},"includeDeleted":{"type":"boolean","description":"When true and the caller has administrator privileges, include soft-deleted posts (posts where deleted_at is not null). Ordinary callers must not set this flag; unauthorized requests will be rejected or treated as includeDeleted=false."},"createdFrom":{"type":"string","format":"date-time","description":"ISO 8601 start datetime to filter posts created at or after this timestamp."},"createdTo":{"type":"string","format":"date-time","description":"ISO 8601 end datetime to filter posts created at or before this timestamp."}},"required":[],"description":"Request DTO for listing/searching posts. This object is used by endpoints that support complex post queries within a thread or across the site.\n\nNotes on usage and security:\n- The DTO includes both pagination patterns (page/limit and cursor). When both are provided the server may prefer one over the other (implementation-dependent); clients should follow documented server behavior.\n- Flags that expose moderator/administrator-only content (includeHidden, includeDeleted) are gated by server-side RBAC checks and must be omitted or false for ordinary users.\n- All identifiers are UUID strings and will be validated by the server. Date/time filters must be ISO 8601 formatted strings.\n\nPerformance guidance:\n- Keep page sizes moderate to maintain response latency (default 20, maximum 100).\n- Use search and filters to narrow result sets for efficient queries.\n\nSanitization and safety:\n- The server will sanitize search inputs and will not execute user-provided content as code. For political/economic content the server may apply additional moderation rules when returning results (for example labeling content or excluding pending items)."},"IEconPoliticalForumPost":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_posts","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post. Corresponds to econ_political_forum_posts.id in the Prisma schema."},"thread_id":{"type":"string","format":"uuid","description":"Identifier of the parent thread this post belongs to. Maps to econ_political_forum_posts.thread_id and references econ_political_forum_threads.id.\n\nThis field is required and used to locate the thread context for the post."},"author_id":{"type":"string","format":"uuid","description":"Identifier of the registered user who authored the post. Maps to econ_political_forum_posts.author_id and references econ_political_forum_registereduser.id.\n\nThis value is set by the server from the authenticated session and is immutable from client input."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent post id for replies. Maps to econ_political_forum_posts.parent_id. Null indicates a top-level post."},"content":{"type":"string","description":"Raw post content (plain text or sanitized markdown) as stored in econ_political_forum_posts.content.\n\nBusiness rules: content should be between 10 and 50,000 characters. The server is responsible for sanitization (removing or escaping disallowed HTML) before persisting or returning content."},"is_edited":{"type":"boolean","description":"Flag indicating whether the post has been edited after creation. Maps to econ_political_forum_posts.is_edited.\n\nSet to true when the post has one or more revisions."},"edited_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the latest edit if the post was edited. Maps to econ_political_forum_posts.edited_at. Null when never edited."},"is_hidden":{"type":"boolean","description":"Moderator hide flag. When true, the post is not shown in public listings. Maps to econ_political_forum_posts.is_hidden.\n\nThis field may be visible only to moderators/administrators in some responses; public consumers may receive a filtered view."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp for the post. Maps to econ_political_forum_posts.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the post. Maps to econ_political_forum_posts.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. When set the post is archived/removed from public listings. Maps to econ_political_forum_posts.deleted_at.\n\nPublic APIs typically exclude posts with deleted_at set unless the caller is a moderator/administrator and explicitly requests archived records."}},"required":["id","thread_id","author_id","content","is_edited","is_hidden","created_at","updated_at"],"description":"IEconPoliticalForumPost — Canonical post representation.\n\nRepresents a single post or reply in a thread. This schema maps directly to the Prisma model econ_political_forum_posts and includes all persisted, public-facing fields from that model. Fields like `author_id` and `thread_id` are UUIDs referencing other models; timestamps use the ISO 8601 date-time format.\n\nThis type is intended for read responses (GET thread/post). Sensitive internal fields are excluded (for example any token or secret fields). Moderation-only fields (is_hidden, deleted_at) are present because administrative and moderation endpoints must be able to present them; public views may redact or omit those fields per ACL.","examples":{"v0":{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","thread_id":"7b9d6c1e-2a4f-4a9e-9b4f-0a5f1a2b3c4d","author_id":"a1b2c3d4-5678-90ab-cdef-111213141516","parent_id":null,"content":"This is a sample post content discussing fiscal policy implications of the new proposal.","is_edited":false,"edited_at":null,"is_hidden":false,"created_at":"2025-10-03T12:00:00Z","updated_at":"2025-10-03T12:00:00Z","deleted_at":null}}},"IEconPoliticalForumPost.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_posts","properties":{"thread_id":{"type":"string","format":"uuid","description":"Identifier of the thread in which the post will be created. Maps to econ_political_forum_posts.thread_id. Required."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent post id when creating a reply. Null or omitted indicates a top-level post. When provided, the server will validate that the parent post exists and belongs to the same thread."},"content":{"type":"string","description":"Post body content. Business validation: length must be between 10 and 50,000 characters. The server is responsible for sanitization and for enforcing edit/reply nesting rules."}},"required":["thread_id","content"],"description":"IEconPoliticalForumPost.ICreate — Create DTO for a new post.\n\nRequest body used to create a new post (top-level or reply). This type maps to the writable fields of the Prisma model econ_political_forum_posts. System-managed fields (id, author_id, is_edited, edited_at, is_hidden, created_at, updated_at, deleted_at) are NOT accepted from clients and will be set by the server. The authenticated user's id is used as author_id by the server and MUST NOT be provided by the client.\n\nValidation notes:\n- `thread_id` is required and must reference an existing active thread.\n- `parent_id` if provided must reference an existing post in the same thread and must not violate reply depth limits.\n- `content` must be sanitized by the server; clients should send plaintext or markdown only.\n\nExample:\n{ \"thread_id\": \"7b9d6c1e-2a4f-4a9e-9b4f-0a5f1a2b3c4d\", \"content\": \"This is an example reply.\" }"},"IEconPoliticalForumPost.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_posts","properties":{"content":{"type":"string","description":"Updated post content mapped to econ_political_forum_posts.content.\n\nThis field accepts sanitized plaintext or sanctioned markdown. Clients SHOULD submit only the intended content body; the server is responsible for sanitization, revision snapshot creation (econ_political_forum_post_revisions), setting is_edited=true, and populating edited_at when the update is accepted. Business rules such as the author-only edit window (e.g., edits permitted within 24 hours of creation) and moderator locks apply and are enforced by the backend. The backend should reject updates that violate moderation locks or legal holds.","minLength":1,"maxLength":50000}},"required":[],"description":"Post update DTO used when an authenticated registered user (the post author) requests to change an existing post's content.\n\nThis object represents the subset of mutable fields clients may submit when updating a post. It excludes immutable or system-managed properties such as id, author_id, created_at, deleted_at, is_hidden, and edited_at — these are controlled by the server. The server MUST validate ownership, enforce the configured edit window, create an append-only revision snapshot in econ_political_forum_post_revisions upon successful update, and record an audit entry (econ_political_forum_audit_logs). For moderator or administrator update flows, server-side logic applies additional privileges and logging; clients must not attempt to set moderator-controlled flags through this DTO."},"IEconPoliticalForumPostRevision.IRequest":{"type":"object","properties":{"from":{"type":"string","format":"date-time","description":"Inclusive start timestamp (ISO 8601) to filter revisions by their created_at. When provided, the server returns revisions with created_at >= this value."},"to":{"type":"string","format":"date-time","description":"Inclusive end timestamp (ISO 8601) to filter revisions by their created_at. When provided, the server returns revisions with created_at <= this value."},"editor_id":{"type":"string","format":"uuid","description":"Optional UUID of the editor (econ_political_forum_registereduser.id). When specified, results are limited to revisions authored/recorded by that editor."},"page":{"type":"integer","description":"Page number for page/limit pagination (1-based). If omitted, cursor-based pagination via `cursor` may be used instead.","minimum":1},"limit":{"type":"integer","description":"Maximum number of revision records to return for page-based pagination. The server enforces default and maximum values (recommended default 20, max 200).","minimum":1},"cursor":{"type":"string","description":"Opaque continuation cursor for cursor-based pagination. When supplied, the server ignores page/limit parameters and uses the cursor to continue results."},"sort":{"oneOf":[{"const":"created_at.asc","description":"Sort order for results. Use `created_at.asc` for oldest-first or `created_at.desc` for newest-first. Default is `created_at.desc`."},{"const":"created_at.desc","description":"Sort order for results. Use `created_at.asc` for oldest-first or `created_at.desc` for newest-first. Default is `created_at.desc`."}],"description":"Sort order for results. Use `created_at.asc` for oldest-first or `created_at.desc` for newest-first. Default is `created_at.desc`."},"include_full":{"type":"boolean","description":"When true and the caller is authorized, returns full revision snapshots in the response payload. When false (default) the server may return truncated excerpts for each revision to optimize performance and reduce exposure of historical content. Access to full snapshots may be restricted to authors, moderators, or administrators as appropriate."}},"required":[],"description":"Request DTO for listing or querying post revision snapshots for a single post.\n\nThis request body is typically used with an endpoint scoped by postId (path parameter) and supports filters (by editor and time range), paging (cursor or page/limit), and sorting. The server enforces role-based access: authors may request their own full snapshots; moderators and administrators may view additional information depending on role and audit rules. The DTO intentionally focuses on search and pagination controls and does not include the postId (which should be sent via the request path)."},"IEconPoliticalForumPostRevision":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_post_revisions","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the revision record. Matches econ_political_forum_post_revisions.id in the Prisma schema."},"post_id":{"type":"string","format":"uuid","description":"Identifier of the post this revision belongs to. Corresponds to econ_political_forum_post_revisions.post_id and references econ_political_forum_posts.id.\n\nBusiness note: Clients use this field to correlate the revision with the canonical post. The server MUST ensure the referenced post exists when creating revisions."},"editor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional editor identity (registered user id) who applied the revision. Maps to econ_political_forum_post_revisions.editor_id and may be null when the revision was created by the original author or a system process.\n\nSecurity: Editor identity is captured for audit and moderator review; it is only revealed to authorized consumers (moderators/administrators) when appropriate."},"content":{"type":"string","description":"Full post content snapshot captured at the time of revision. This is the canonical snapshot stored in econ_political_forum_post_revisions.content.\n\nBusiness rule: Content should be stored as plaintext or sanitized markdown. The server is responsible for applying server-side sanitization before persisting; clients should not rely on the API to perform additional sanitization on read."},"note":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short editor note describing the reason for the revision (for example: 'typo fix', 'clarified citation'). Maps to econ_political_forum_post_revisions.note. Nullable when no note was supplied."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this revision snapshot was recorded (ISO 8601). Maps to econ_political_forum_post_revisions.created_at and is used for ordering revision history."}},"required":["id","post_id","content","created_at"],"description":"Post revision snapshot representing a single immutable revision of a post.\n\nThis schema maps directly to the Prisma model econ_political_forum_post_revisions. Each property corresponds to a column in the model and is intended for use in revision history displays, moderator review, and audit exports.\n\nProperties marked nullable are represented using oneOf to allow an explicit null value per JSON Schema nullable guidance."},"IEconPoliticalForumVote.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_votes","properties":{"post_id":{"type":"string","format":"uuid","description":"Identifier of the target post to vote on. Maps to econ_political_forum_votes.post_id and references econ_political_forum_posts.id.\n\nBusiness rule: The server derives the voting user (registereduser_id) from the authenticated session; clients MUST NOT supply registereduser_id in the create payload."},"value":{"oneOf":[{"const":1,"description":"Vote value. Allowed values are 1 (upvote) or -1 (downvote). This enforces the application domain rule that votes are trinary in semantics (here represented as numeric up/down). The server validates this value and enforces one active vote per user per post."},{"const":-1,"description":"Vote value. Allowed values are 1 (upvote) or -1 (downvote). This enforces the application domain rule that votes are trinary in semantics (here represented as numeric up/down). The server validates this value and enforces one active vote per user per post."}],"description":"Vote value. Allowed values are 1 (upvote) or -1 (downvote). This enforces the application domain rule that votes are trinary in semantics (here represented as numeric up/down). The server validates this value and enforces one active vote per user per post."}},"required":["post_id","value"],"description":"Create DTO for casting a vote on a post.\n\nThis schema corresponds to the create request for the Prisma model econ_political_forum_votes. Required fields are only those necessary to create the vote record; actor identity (registereduser_id) and timestamps are populated by the service using authenticated context and server clock. The API enforces the unique constraint (registereduser_id + post_id) and will update an existing vote if the user has already voted on the target post according to business rules."},"IEconPoliticalForumVote":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_votes","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the vote record.\n\nThis property maps directly to the `econ_political_forum_votes.id` column in the Prisma schema. It is a UUID assigned by the system when the vote is persisted and is used to reference the vote in moderation and audit logs."},"registereduser_id":{"type":"string","format":"uuid","description":"Identifier of the registered user who cast the vote.\n\nThis corresponds to `econ_political_forum_votes.registereduser_id` and references `econ_political_forum_registereduser.id`. It is included to attribute the vote to an account for auditing, abuse detection, and enforcement of the one-vote-per-user-per-post rule."},"post_id":{"type":"string","format":"uuid","description":"Identifier of the post that was voted on.\n\nThis maps to `econ_political_forum_votes.post_id` and references `econ_political_forum_posts.id`. It ties the vote to the canonical post record for ranking and moderation purposes."},"value":{"oneOf":[{"const":1,"description":"Vote value. Business domain: 1 = upvote, -1 = downvote.\n\nThis field maps to `econ_political_forum_votes.value` and MUST use the exact integer values defined by the domain. Implementations should validate and enforce that only 1 or -1 are accepted values."},{"const":-1,"description":"Vote value. Business domain: 1 = upvote, -1 = downvote.\n\nThis field maps to `econ_political_forum_votes.value` and MUST use the exact integer values defined by the domain. Implementations should validate and enforce that only 1 or -1 are accepted values."}],"description":"Vote value. Business domain: 1 = upvote, -1 = downvote.\n\nThis field maps to `econ_political_forum_votes.value` and MUST use the exact integer values defined by the domain. Implementations should validate and enforce that only 1 or -1 are accepted values."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was created.\n\nThis corresponds to `econ_political_forum_votes.created_at` in the Prisma model and is populated by the system when the vote is first recorded. Use ISO 8601 date-time format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was last updated.\n\nThis corresponds to `econ_political_forum_votes.updated_at` and is updated when a user changes their vote. It is used for audit and change-tracking."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for the vote. Null when active.\n\nThis maps to `econ_political_forum_votes.deleted_at`. When set, the vote is considered archived/removed from public aggregates but retained for audit and abuse analysis."}},"required":["id","registereduser_id","post_id","value","created_at","updated_at"],"description":"Vote record representing a user's vote on a post.\n\nThis schema directly represents the `econ_political_forum_votes` Prisma model. It includes the primary identifiers linking the vote to the user and post, the domain-limited vote value (1 = upvote, -1 = downvote), and system-managed timestamps used for auditing and history. Sensitive fields are not present in this DTO.\n\nUse this type for responses that return the canonical persisted vote record."},"IEconPoliticalForumVote.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_votes","properties":{"value":{"oneOf":[{"const":1,"description":"Updated vote value. Allowed integers: 1 = upvote, -1 = downvote.\n\nThis field maps to `econ_political_forum_votes.value`. Per update DTO rules, fields are optional and the backend will validate ownership and business constraints before applying the change."},{"const":-1,"description":"Updated vote value. Allowed integers: 1 = upvote, -1 = downvote.\n\nThis field maps to `econ_political_forum_votes.value`. Per update DTO rules, fields are optional and the backend will validate ownership and business constraints before applying the change."}],"description":"Updated vote value. Allowed integers: 1 = upvote, -1 = downvote.\n\nThis field maps to `econ_political_forum_votes.value`. Per update DTO rules, fields are optional and the backend will validate ownership and business constraints before applying the change."}},"required":[],"description":"Vote update DTO used for changing an existing vote.\n\nAll properties are optional to follow the Partial<T> update pattern. Clients SHOULD provide the `value` property to change a vote; the server validates ownership, uniqueness (one vote per user-post pair), and business constraints. This DTO maps to the `econ_political_forum_votes` Prisma model."},"IEconPoliticalForumBookmark.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for paginated results.\n\nWhen provided, results are returned for the requested 1-based page. Use either page/limit or cursor for pagination; when both are provided, the server may prefer cursor semantics. Typical clients should default to page=1 when omitted.","minimum":1,"default":1},"limit":{"type":"integer","description":"Maximum number of items to return per page.\n\nThis controls page size for page-based pagination. Servers SHOULD enforce a maximum limit (for example 100). Clients SHOULD use conservative limits (for example 20) for typical UI lists.","minimum":1,"maximum":100,"default":20},"cursor":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Opaque continuation cursor for cursor-based pagination.\n\nIf provided, the server returns the page following this cursor. Use this in preference to page/limit when high-performance pagination or stable ordering is required."},"postId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter bookmarks by the specific post's UUID.\n\nWhen set, only bookmarks referencing this post_id are returned. The value must be a valid UUID string per the Prisma model's post_id field."},"threadId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter to return bookmarks belonging to posts in a specific thread.\n\nThis is a convenience filter: when provided the server may resolve post->thread relations and return bookmarks whose posts belong to the given thread id."},"createdFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO 8601 start timestamp to filter bookmarks created at or after this time.\n\nProvide an inclusive lower bound for created_at. Use UTC date-time strings (for example: 2025-10-03T19:21:50Z)."},"createdTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO 8601 end timestamp to filter bookmarks created at or before this time.\n\nProvide an inclusive upper bound for created_at. The server will validate that createdFrom <= createdTo when both are present."},"includeDeleted":{"type":"boolean","description":"When true, include soft-deleted bookmark records (deleted_at not null) in results.\n\nThis flag is typically restricted to administrative clients. Non-admin callers should omit or set to false.","default":false},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort results by. Default is 'created_at'.\n\nAllowed values: 'created_at', 'updated_at'. Use the companion 'order' property to control direction."},{"const":"updated_at","description":"Field to sort results by. Default is 'created_at'.\n\nAllowed values: 'created_at', 'updated_at'. Use the companion 'order' property to control direction."}],"description":"Field to sort results by. Default is 'created_at'.\n\nAllowed values: 'created_at', 'updated_at'. Use the companion 'order' property to control direction."},"order":{"oneOf":[{"const":"asc","description":"Sort direction for the selected sort_by field.\n\nAllowed values: 'asc' (ascending) or 'desc' (descending). Default is 'desc' to show newest first."},{"const":"desc","description":"Sort direction for the selected sort_by field.\n\nAllowed values: 'asc' (ascending) or 'desc' (descending). Default is 'desc' to show newest first."}],"description":"Sort direction for the selected sort_by field.\n\nAllowed values: 'asc' (ascending) or 'desc' (descending). Default is 'desc' to show newest first."}},"required":[],"description":"Request DTO for listing and searching bookmarks.\n\nThis object models client-provided search and pagination parameters used to query bookmark summaries. It is intentionally conservative: page/limit or cursor-based pagination is supported, filters are provided to scope results by post or thread, and date-range filters allow time-based queries. Administrative-only flags (for example includeDeleted) are included but servers MUST enforce RBAC for them.\n\nUse UTC date-time formats for date filters and valid UUIDs for id filters."},"IEconPoliticalForumBookmark":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_bookmarks","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the bookmark record.\n\nCorresponds to econ_political_forum_bookmarks.id in the Prisma schema. This UUID uniquely identifies the bookmark record in the system."},"registereduser_id":{"type":"string","format":"uuid","description":"Owning registered user's UUID.\n\nReferences econ_political_forum_registereduser.id. This field identifies the user who created and owns the bookmark. In API responses this is the canonical owner id and should be validated by callers when performing updates or deletes."},"post_id":{"type":"string","format":"uuid","description":"Target post UUID that the bookmark references.\n\nMaps to econ_political_forum_posts.id. This is the canonical link from the bookmark to the saved post. Clients use this id to fetch post/thread context for display."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the bookmark in ISO 8601 format (UTC).\n\nCorresponds to econ_political_forum_bookmarks.created_at. Used for sorting and auditing when presenting a user's saved items."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the bookmark record.\n\nCorresponds to econ_political_forum_bookmarks.updated_at. It is updated when mutable metadata on the bookmark changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. When null the bookmark is active; when set, the bookmark is treated as deleted from public listings.\n\nThis field maps to econ_political_forum_bookmarks.deleted_at and enables audit-preserving soft-deletes instead of hard removal."}},"required":["id","registereduser_id","post_id","created_at","updated_at"],"description":"Bookmark DTO representing a user's saved post.\n\nThis schema corresponds directly to the Prisma model `econ_political_forum_bookmarks` and includes the canonical fields stored in the database. It intentionally omits any derived or aggregated fields (for example, post title or thread summary) which clients should fetch via separate endpoints. Sensitive or system-managed fields (passwords, tokens) are not present on this DTO.\n\nWhen `x-autobe-prisma-schema` is present, every property in this schema has been validated to exist in the referenced Prisma model."},"IEconPoliticalForumBookmark.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_bookmarks","properties":{"post_id":{"type":"string","format":"uuid","description":"Identifier of the post to bookmark. This maps to econ_political_forum_bookmarks.post_id which references econ_political_forum_posts.id in the Prisma schema. The server derives the owning registered user from the authenticated session and will set registereduser_id; clients MUST supply the target post id only."}},"required":["post_id"],"description":"Bookmark creation request DTO.\n\nThis DTO is used by clients to request creation of a new bookmark that links the authenticated user to an existing post. Clients MUST NOT provide ownership fields (registereduser_id) or system-managed timestamps (id, created_at, updated_at, deleted_at); those are generated and managed by the server.\n\nThe server will validate that the provided post_id exists and that the caller is authorized to bookmark the referenced post. On success the server persists a new econ_political_forum_bookmarks row and returns the canonical bookmark representation."},"IEconPoliticalForumThreadFollow.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_thread_follows","properties":{"thread_id":{"type":"string","format":"uuid","description":"Identifier of the thread to follow. Maps to econ_political_forum_thread_follows.thread_id which references econ_political_forum_threads.id in the Prisma schema. The server will derive the follower's registereduser_id from the authenticated session."},"muted_until":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional ISO 8601 timestamp indicating until when notifications for this follow should be muted. If omitted the follow uses the user's default notification preferences. Use explicit null to clear an existing mute."}},"required":["thread_id"],"description":"Thread follow (subscription) creation request DTO.\n\nThis DTO allows a client to subscribe the authenticated user to receive notifications for a thread. Clients MUST NOT supply registereduser_id or system-managed fields (id, created_at, updated_at, deleted_at); the server assigns those. The optional muted_until field may be provided to temporarily suppress notifications for the follow; provide an ISO 8601 date-time string or explicit null to clear a mute.\n\nServer-side logic will validate that the thread exists and that the caller is authorized to follow it. The join is unique per (registereduser_id, thread_id) and the server will return existing follow or reactivate a soft-deleted follow as appropriate."},"IEconPoliticalForumThreadFollow":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_thread_follows","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the follow record. Corresponds to econ_political_forum_thread_follows.id in the Prisma schema.\n\nThis value is generated by the database as a UUID when the follow is created and is used to reference the follow record in APIs and moderation logs."},"registereduser_id":{"type":"string","format":"uuid","description":"Identifier of the registered user who created the follow.\n\nMaps to econ_political_forum_thread_follows.registereduser_id in the Prisma schema. This field is required and used for ownership and authorization checks; server-side logic must derive this from the authenticated session when creating or modifying follows."},"thread_id":{"type":"string","format":"uuid","description":"Identifier of the thread that is being followed.\n\nMaps to econ_political_forum_thread_follows.thread_id in the Prisma schema. This value must reference an existing active thread (econ_political_forum_threads.id)."},"muted_until":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp until which notifications for this follow are muted.\n\nWhen non-null, this ISO 8601 date-time defines the expiry of a temporary mute on follow notifications. Stored in econ_political_forum_thread_follows.muted_until and may be used by delivery logic to suppress notifications until the given time."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 format (UTC).\n\nCorresponds to econ_political_forum_thread_follows.created_at. This is set by the system at insert time and is immutable."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp in ISO 8601 format (UTC).\n\nCorresponds to econ_political_forum_thread_follows.updated_at and should be updated by the server whenever the follow record is modified (for example when muting is changed)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. When non-null, the follow is considered archived/removed from active listings.\n\nMaps to econ_political_forum_thread_follows.deleted_at. Use this field to implement soft-delete semantics (record retained for audit and potential restoration)."}},"required":["id","registereduser_id","thread_id","created_at","updated_at"],"description":"Thread follow (subscription) record linking a registered user to a thread.\n\nThis schema represents the canonical follow object persisted in the database (Prisma model: econ_political_forum_thread_follows). It is used in responses that return follow details to clients and in administrative/moderation views. Fields include ownership (registereduser_id), target thread reference (thread_id), optional mute window (muted_until), and timestamps for creation, update, and soft-delete.\n\nSecurity note: The API MUST derive and enforce registereduser_id from the authenticated session on write operations. Sensitive or internal-only fields are not present in this schema; moderation/audit logs should be used for operational traceability."},"IEconPoliticalForumThreadFollow.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for page-based pagination. Defaults to 1 if omitted by client."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of items per page. Server enforces a maximum (100). Default is typically 20."},"cursor":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Opaque cursor value for cursor-based pagination. Use either page/limit or cursor, depending on implementation. When not used, set to null or omit."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field used to sort results. Allowed values: 'created_at', 'updated_at', 'muted_until'."},{"const":"updated_at","description":"Field used to sort results. Allowed values: 'created_at', 'updated_at', 'muted_until'."},{"const":"muted_until","description":"Field used to sort results. Allowed values: 'created_at', 'updated_at', 'muted_until'."}],"description":"Field used to sort results. Allowed values: 'created_at', 'updated_at', 'muted_until'."},"order":{"oneOf":[{"const":"asc","description":"Sort direction. Allowed values: 'asc' (ascending) or 'desc' (descending)."},{"const":"desc","description":"Sort direction. Allowed values: 'asc' (ascending) or 'desc' (descending)."}],"description":"Sort direction. Allowed values: 'asc' (ascending) or 'desc' (descending)."},"thread_id":{"type":"string","format":"uuid","description":"Optional filter to return follows only for the specified thread (UUID)."},"includeDeleted":{"type":"boolean","description":"When true and caller is authorized (admin/moderator), include soft-deleted follow records (deleted_at not null) in results. Ordinary callers must not set this flag; server returns 403 if attempted by non-authorized clients."},"muted":{"type":"boolean","description":"Optional filter: when true return only follows that are currently muted (muted_until in the future). When false return only non-muted follows."},"created_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional ISO 8601 date-time lower bound for created_at filtering. Use null to omit."},"created_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional ISO 8601 date-time upper bound for created_at filtering. Use null to omit."}},"required":[],"description":"Request DTO for listing and searching thread follows.\n\nThis request schema supports both page/limit and cursor pagination, sorting, and common filters used by UI and moderation tooling. Default page size is recommended as 20 (server-side). Admin-only flags such as includeDeleted are restricted and must be enforced by the service layer. Date-range filters use ISO 8601 date-time strings. Use of thread_id as a filter must be validated as a UUID. For user-scoped lists, the server MUST derive the calling user's id from the authentication context (e.g., use my_items=true) rather than allowing clients to pass registereduser_id."},"IEconPoliticalForumThreadTag":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_thread_tags","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) of the thread-tag mapping row in the database. This value is generated by the system when the mapping is created. Corresponds to `econ_political_forum_thread_tags.id` in the Prisma model."},"thread_id":{"type":"string","format":"uuid","description":"Reference to the parent thread's UUID. This value must match an existing `econ_political_forum_threads.id` and denotes which thread the tag is attached to. Maps to the `thread_id` column in the `econ_political_forum_thread_tags` Prisma model.\n\nBusiness note: callers should supply a canonical thread identifier; thread existence and visibility checks are performed by the service layer."},"tag_id":{"type":"string","format":"uuid","description":"Reference to the canonical tag's UUID. This must reference a valid `econ_political_forum_tags.id` and indicates which tag is attached to the thread. Maps to the `tag_id` column in the `econ_political_forum_thread_tags` Prisma model."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the mapping was created. Populated by the system on insert and corresponds to `created_at` in the Prisma model.\n\nThis value is returned to clients for ordering and audit purposes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp (ISO 8601) when the mapping was archived. Null when active. Maps to `deleted_at` in the Prisma model.\n\nBusiness note: Soft-deleted mappings are excluded from public lists by default; administrative endpoints may include archived mappings when explicitly requested."}},"required":["id","thread_id","tag_id","created_at"],"description":"Thread-Tag mapping record representing the association between a discussion thread and a normalized tag.\n\nThis schema exactly mirrors the `econ_political_forum_thread_tags` Prisma model: it contains the mapping primary key (`id`), foreign keys (`thread_id`, `tag_id`), creation timestamp (`created_at`), and optional soft-delete timestamp (`deleted_at`).\n\nUse: Returned by read endpoints that expose thread-tag associations (for example, listing tags for a thread or listing threads for a tag). Sensitive internal or audit-only fields are not present beyond what the Prisma model exposes."},"IEconPoliticalForumThreadTag.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_thread_tags","properties":{"thread_id":{"type":"string","format":"uuid","description":"UUID of the thread to which the tag will be attached. Must reference an existing `econ_political_forum_threads.id`.\n\nBusiness rule: the server will validate that the thread exists and is visible to the caller before creating the mapping."},"tag_id":{"type":"string","format":"uuid","description":"UUID of the tag to attach to the thread. Must reference an existing `econ_political_forum_tags.id`.\n\nBusiness rule: the server will validate tag existence and enforce uniqueness of the (thread_id, tag_id) pair."}},"required":["thread_id","tag_id"],"description":"Create DTO for attaching a tag to a thread.\n\nThis request object is used by thread-tag creation endpoints. It intentionally excludes system-managed fields such as `id`, `created_at`, and `deleted_at` which are generated and managed by the server/database. The server enforces uniqueness of (thread_id, tag_id) and will return a conflict error when attempting to create an existing active mapping. If a soft-deleted mapping exists, servers may choose to reactivate it instead of creating a duplicate."},"IEconPoliticalForumReport":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_reports","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the report record as defined in the Prisma model `econ_political_forum_reports`. Unique identifier used across moderation workflows."},"reporter_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Registered user id of the reporter if available. Nullable when the reporter requested anonymity or when unauthenticated. When present this value MUST reference `econ_political_forum_registereduser.id`."},"reported_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the reported post (econ_political_forum_posts.id). Nullable when the report targets a thread instead."},"reported_thread_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the reported thread (econ_political_forum_threads.id). Nullable when the report targets a post."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator id (econ_political_forum_moderator.id) assigned when a moderator triages the report. Nullable until triage."},"moderation_case_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a moderation case aggregating related reports (econ_political_forum_moderation_cases.id)."},"reason_code":{"type":"string","description":"Structured reason code selected by the reporter (for example: 'harassment', 'doxxing', 'misinformation', 'illegal_content', 'spam', 'other')."},"reporter_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-text note provided by the reporter giving additional context. Should be sanitized before display. Typical maximum length: 2000 characters."},"reporter_anonymous":{"type":"boolean","description":"Whether the reporter requested anonymity from the content author/public; when true reporter identity is withheld from public responses and only visible to moderators and administrators as allowed by policy."},"status":{"type":"string","description":"Processing state of the report (for example: 'pending','triaged','dismissed','action_taken','escalated')."},"priority":{"type":"string","description":"Operational priority label for triage (for example: 'low','normal','high','urgent')."},"created_at":{"type":"string","format":"date-time","description":"Immutable timestamp when the report was created (UTC, ISO 8601)."},"triaged_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when a moderator first acknowledged or triaged the report; nullable until triage."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when a moderator recorded a final review or action against the report; nullable until review."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report was resolved (action taken or dismissed); nullable until resolution."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for the report when removal is required. Nullable when active."}},"required":["id","reason_code","reporter_anonymous","status","priority","created_at"],"description":"Moderation report record mapping to the Prisma model `econ_political_forum_reports`.\n\nThis schema represents a structured report submitted by a user or guest to flag content for moderator review. It mirrors the columns defined in the Prisma model and is intended for moderator and administrator UIs that require the canonical report fields for triage, escalation, and auditing. When populated, relational identifiers (reporter_id, reported_post_id, reported_thread_id, moderator_id, moderation_case_id) MUST reference the corresponding database entities.\n\nPrivacy, moderation and usage notes:\n\nReport payloads may include reporter_text supplied by the reporter; backend services MUST sanitize and redact as required before rendering in public contexts. When reporter_anonymous is true, reporter identity MUST not be exposed to content authors or public consumers — only moderators and administrators with proper access may view reporter identity. All moderation actions taken in response to a report should generate immutable moderation logs and audit entries to preserve an evidentiary trail."},"IEconPoliticalForumReport.IFilters":{"type":"object","properties":{"status":{"type":"string","description":"Filter by report processing state (for example: pending, triaged, dismissed, action_taken, escalated). Exact allowed values are driven by server policy."},"priority":{"type":"string","description":"Operational priority filter (for example: low, normal, high, urgent)."},"reporter_anonymous":{"type":"boolean","description":"Filter reports by whether the reporter requested anonymity. Note: reporter identity is not exposed to non-moderator/public consumers."},"reported_post_id":{"type":"string","format":"uuid","description":"Filter by specific reported post id (UUID)."},"reported_thread_id":{"type":"string","format":"uuid","description":"Filter by specific reported thread id (UUID)."},"moderator_id":{"type":"string","format":"uuid","description":"Filter by moderator who triaged the report (UUID)."},"moderation_case_id":{"type":"string","format":"uuid","description":"Filter by associated moderation case id (UUID)."},"created_from":{"type":"string","format":"date-time","description":"Filter for reports created at or after this ISO 8601 timestamp."},"created_to":{"type":"string","format":"date-time","description":"Filter for reports created at or before this ISO 8601 timestamp."}},"required":[],"description":"Named filters object for report listing endpoints. Use named type to avoid inline anonymous objects and to enable reuse across request DTOs."},"IEconPoliticalForumReport.ISort":{"type":"object","properties":{"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort by. Allowed values: created_at, priority, status."},{"const":"priority","description":"Field to sort by. Allowed values: created_at, priority, status."},{"const":"status","description":"Field to sort by. Allowed values: created_at, priority, status."}],"description":"Field to sort by. Allowed values: created_at, priority, status."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction."},{"const":"desc","description":"Sort order direction."}],"description":"Sort order direction."}},"required":[],"description":"Named sort instruction for report listing requests."},"IEconPoliticalForumReport.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for page/limit pagination (1-based)."},"limit":{"type":"integer","description":"Number of items per page for page/limit pagination. Recommended default: 20. Server enforces a maximum."},"cursor":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Opaque cursor token for cursor-based pagination. Use either cursor or page/limit; when both present, page/limit takes precedence."},"filters":{"$ref":"#/components/schemas/IEconPoliticalForumReport.IFilters","description":"Optional named filters to narrow the returned reports."},"sort":{"$ref":"#/components/schemas/IEconPoliticalForumReport.ISort","description":"Optional sort instruction. If omitted server defaults to created_at desc."},"query":{"type":"string","description":"Full-text search string applied to reporter_text. Server MUST sanitize and enforce length limits (for example, max 500 chars)."},"includeDeleted":{"type":"boolean","description":"When true include soft-deleted reports (deleted_at not null). This flag is restricted to administrator/audited moderator clients."}},"required":[],"description":"Request DTO for listing moderation reports. Uses named filter and sort types (no inline objects)."},"IEconPoliticalForumReport.ICreate":{"oneOf":[{"required":["reported_post_id"]},{"required":["reported_thread_id"]}],"description":"Report creation DTO. Clients MUST supply reason_code and at least one target identifier (reported_post_id or reported_thread_id). Reporter identity (reporter_id) MUST NOT be supplied by client; it is derived from authentication context. Timestamps and moderation fields are server-managed.","x-autobe-prisma-schema":"econ_political_forum_reports"},"IEconPoliticalForumReport.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_reports","properties":{"status":{"oneOf":[{"const":"pending","description":"Report is newly created and awaiting triage."},{"const":"triaged","description":"A moderator has acknowledged the report and placed it in the triage workflow."},{"const":"dismissed","description":"The report was reviewed and dismissed by a moderator."},{"const":"action_taken","description":"A moderator applied an enforcement action (hide/remove/warn/etc.)."},{"const":"escalated","description":"The report was escalated to administrators for final disposition."}],"description":"Processing state of the report. Use the exact token values above to control moderation workflow."},"priority":{"oneOf":[{"const":"low","description":"Lower operational priority; routine triage."},{"const":"normal","description":"Standard priority for typical reports."},{"const":"high","description":"High priority requiring expedited review."},{"const":"urgent","description":"Immediate attention required; likely escalated to admins or on-call staff."}],"description":"Operational priority label used to order moderation queues and notifications."},"moderation_case_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a moderation case (econ_political_forum_moderation_cases.id) that aggregates related reports. Use null to clear an association."},"triaged_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when a moderator first acknowledged or triaged the report. Nullable to allow clearing if necessary."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when a reviewer recorded the formal review action. Nullable while the review is in progress."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the report reached final resolution (action taken or dismissed). Null indicates unresolved."}},"required":[],"description":"Moderation report update object used by triage and workflow APIs.\n\nThis DTO maps only to mutable processing fields on the Prisma model `econ_political_forum_reports`. It is intended for moderator-driven updates such as setting status, adjusting priority, assigning a moderation case, and stamping triage/review timestamps.\n\nAll fields in this update payload are optional; the server sets moderator identity and other audit details. Clients MUST NOT attempt to modify reporter-supplied fields (for example, reporter_id or reporter_text) via this DTO. Timestamp fields are nullable and use oneOf to represent either an ISO 8601 string or null to comply with JSON Schema rules for nullable values."},"IEconPoliticalForumModerationCase":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_moderation_cases","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) of the moderation case as stored in econ_political_forum_moderation_cases."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderator assigned to manage the case (econ_political_forum_moderator.id). Nullable when unassigned."},"owner_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Administrator who owns or finalized the case (econ_political_forum_administrator.id). Nullable until an owner is set."},"lead_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Representative report id that initiated the case. Nullable; used for quick reference to the originating report."},"case_number":{"type":"string","description":"Human-friendly unique case identifier (for example: 'CASE-2025-0001'). Unique within the application and used in communications and dashboards."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short descriptive title summarizing the issue for quick identification."},"status":{"oneOf":[{"const":"open"},{"const":"investigating"},{"const":"closed"},{"const":"on_hold"}],"description":"Lifecycle status of the case. Use one of the exact token values to indicate case state."},"priority":{"oneOf":[{"const":"low"},{"const":"normal"},{"const":"high"},{"const":"urgent"}],"description":"Operational priority label for triage and escalation. Use exact token values."},"summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Concise summary or executive note describing the case purpose and current focus."},"escalation_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for administrative escalation (examples: 'legal', 'law_enforcement', 'coordinated_activity'). Nullable when not escalated."},"legal_hold":{"type":"boolean","description":"When true, this case has an active legal hold and evidence preservation rules must apply; deletion/purge operations are inhibited."},"created_at":{"type":"string","format":"date-time","description":"Case creation timestamp (ISO 8601). Immutable once created."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the case (ISO 8601). Updated when mutable fields change."},"closed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the case was closed. Nullable if the case remains open."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for the case record; when set the case is archived and typically excluded from operational lists unless explicitly requested by administrators."}},"required":["id","case_number","status","priority","legal_hold","created_at","updated_at"],"description":"Moderation case record aggregating related reports and moderation logs.\n\nThis schema corresponds directly to the Prisma model `econ_political_forum_moderation_cases` and represents the canonical coordination object used by moderators and administrators. It includes assignment fields (assigned_moderator_id, owner_admin_id), linkage to a lead report, lifecycle metadata (status, priority), and legal hold indicators.\n\nThe case record is used for triage, evidence aggregation, escalation, and appeals. The `deleted_at` field supports soft-archival; active cases have `deleted_at` == null. Administrators and moderators should consult this canonical schema when implementing case workflows and when producing audit exports."},"IEconPoliticalForumModerationCase.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for page-based pagination (1-based). Use either page/limit or cursor-based pagination. Default: 1."},"limit":{"type":"integer","description":"Maximum number of items to return per page. Default: 20. Server-enforced maximum recommended (for example 100)."},"cursor":{"type":"string","description":"Optional opaque cursor for cursor-based pagination. When provided, the server should ignore page/limit and use cursor semantics."},"query":{"type":"string","description":"Full-text search query applied to case summary/title fields. Use short queries (recommended max length 256 characters) to leverage trigram/full-text indexes."},"status":{"oneOf":[{"const":"open","description":"Filter by case status (for example 'open', 'investigating', 'closed', 'on_hold')."},{"const":"investigating","description":"Filter by case status (for example 'open', 'investigating', 'closed', 'on_hold')."},{"const":"closed","description":"Filter by case status (for example 'open', 'investigating', 'closed', 'on_hold')."},{"const":"on_hold","description":"Filter by case status (for example 'open', 'investigating', 'closed', 'on_hold')."}],"description":"Filter by case status (for example 'open', 'investigating', 'closed', 'on_hold')."},"priority":{"oneOf":[{"const":"low","description":"Filter by priority (for example 'low','normal','high','urgent')."},{"const":"normal","description":"Filter by priority (for example 'low','normal','high','urgent')."},{"const":"high","description":"Filter by priority (for example 'low','normal','high','urgent')."},{"const":"urgent","description":"Filter by priority (for example 'low','normal','high','urgent')."}],"description":"Filter by priority (for example 'low','normal','high','urgent')."},"assigned_moderator_id":{"type":"string","format":"uuid","description":"Filter cases assigned to a specific moderator (econ_political_forum_moderator.id)."},"owner_admin_id":{"type":"string","format":"uuid","description":"Filter cases owned by a specific administrator (econ_political_forum_administrator.id)."},"case_number":{"type":"string","description":"Filter by exact case_number (human-friendly case identifier such as 'CASE-2025-0001')."},"legal_hold":{"type":"boolean","description":"Filter by legal_hold flag. When true returns cases with an active legal hold."},"created_from":{"type":"string","format":"date-time","description":"Start of created_at date range (inclusive). ISO 8601 format."},"created_to":{"type":"string","format":"date-time","description":"End of created_at date range (inclusive). ISO 8601 format."},"includeDeleted":{"type":"boolean","description":"When true, include soft-deleted (archived) cases. Restricted to administrator callers; non-admin requests with includeDeleted=true should be rejected with 403."},"sort_by":{"type":"string","description":"Sort key. Examples: 'created_at', 'priority', 'case_number'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'."},{"const":"desc","description":"Sort direction: 'asc' or 'desc'."}],"description":"Sort direction: 'asc' or 'desc'."}},"required":[],"description":"Request DTO for listing and searching moderation cases.\n\nThis DTO supports both page/limit and cursor-based pagination, free-text search on summary/title, and multiple filters including status, priority, assigned moderator, owner admin, case number, and legal hold flag. Use this object for moderator and administrative listing endpoints. Note: includeDeleted is restricted to admin callers and should be enforced server-side."},"IEconPoliticalForumModerationCase.ICreate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_moderation_cases","properties":{"case_number":{"type":"string","description":"Canonical human-friendly case identifier used to reference the moderation case (for example: \"CASE-2025-0001\").\n\nThis property maps to the Prisma model column `case_number` and MUST be provided when creating a case. It is intended for operational use in UIs and communications and should be unique across active cases."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short title summarizing the case for quick identification.\n\nThis maps to the Prisma model column `title` (nullable). Use concise, human-readable text that helps moderators quickly understand the subject of the case."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the moderator assigned to manage the case.\n\nThis corresponds to `assigned_moderator_id` in the Prisma model. Provide the moderator's id when assigning at creation; otherwise leave null. When set, the value must be a valid moderator record id."},"owner_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the administrator who owns or will finalize the case.\n\nThis maps to `owner_admin_id` in the Prisma model. Use only when an administrator should be recorded as the case owner at creation time; otherwise omit or set null."},"lead_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the representative report that initiated the case (UUID).\n\nThis field maps to `lead_report_id` in the Prisma model. It groups related reports under a single moderation case and should be included when the case originates from a specific report."},"status":{"oneOf":[{"const":"open","description":"Lifecycle status of the case. Allowed values are exact enum tokens.\n\nThis property maps to the `status` column in the Prisma model and indicates the current processing state of the case. Use one of the enumerated values exactly as shown."},{"const":"investigating","description":"Lifecycle status of the case. Allowed values are exact enum tokens.\n\nThis property maps to the `status` column in the Prisma model and indicates the current processing state of the case. Use one of the enumerated values exactly as shown."},{"const":"closed","description":"Lifecycle status of the case. Allowed values are exact enum tokens.\n\nThis property maps to the `status` column in the Prisma model and indicates the current processing state of the case. Use one of the enumerated values exactly as shown."},{"const":"on_hold","description":"Lifecycle status of the case. Allowed values are exact enum tokens.\n\nThis property maps to the `status` column in the Prisma model and indicates the current processing state of the case. Use one of the enumerated values exactly as shown."}],"description":"Lifecycle status of the case. Allowed values are exact enum tokens.\n\nThis property maps to the `status` column in the Prisma model and indicates the current processing state of the case. Use one of the enumerated values exactly as shown."},"priority":{"oneOf":[{"const":"low","description":"Operational priority label for triage (exact enum values).\n\nThis maps to the `priority` column in the Prisma model. Choose the value that best reflects triage urgency; these values are used to order queues and notify on-duty staff."},{"const":"normal","description":"Operational priority label for triage (exact enum values).\n\nThis maps to the `priority` column in the Prisma model. Choose the value that best reflects triage urgency; these values are used to order queues and notify on-duty staff."},{"const":"high","description":"Operational priority label for triage (exact enum values).\n\nThis maps to the `priority` column in the Prisma model. Choose the value that best reflects triage urgency; these values are used to order queues and notify on-duty staff."},{"const":"urgent","description":"Operational priority label for triage (exact enum values).\n\nThis maps to the `priority` column in the Prisma model. Choose the value that best reflects triage urgency; these values are used to order queues and notify on-duty staff."}],"description":"Operational priority label for triage (exact enum values).\n\nThis maps to the `priority` column in the Prisma model. Choose the value that best reflects triage urgency; these values are used to order queues and notify on-duty staff."},"summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional concise summary or executive note for the case.\n\nThis field maps to `summary` in the Prisma model and is intended to give moderators a short description suitable for dashboards and quick reviews."},"escalation_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional escalation reason (for example: 'legal', 'law_enforcement', 'coordinated_activity').\n\nMaps to `escalation_reason` in the Prisma model. Provide a short rationale when the case is being escalated."},"legal_hold":{"type":"boolean","description":"Flag indicating whether a legal hold should apply to this case and its associated evidence.\n\nThis maps to the `legal_hold` boolean column in the Prisma model. When true, deletion and purge operations must be inhibited by application logic until the hold is cleared."}},"required":["case_number","status","priority","legal_hold"],"description":"Create DTO for a moderation case.\n\nThis request body is used to create a new moderation case record that aggregates related reports and drives escalation workflows. The schema maps to the Prisma model `econ_political_forum_moderation_cases` and includes only fields that may be supplied at creation time. System-managed fields such as `id`, `created_at`, `updated_at`, `closed_at`, and `deleted_at` are not accepted in this DTO and will be generated by the server.\n\nBusiness notes:\n- `case_number` is required and should be a unique human-facing identifier.\n- `status` and `priority` use exact enum values.\n- `legal_hold` is required to indicate preservation requirements at case creation time."},"IEconPoliticalForumModerationCase.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_moderation_cases","properties":{"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the moderator assigned to manage the case.\n\nOn updates, setting this field assigns or reassigns the case to a moderator. This maps to `assigned_moderator_id` in the Prisma model; use null to unassign."},"owner_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the administrator who owns or finalizes the case.\n\nOn updates, this field may be used to record administrative ownership or transfer. Maps to `owner_admin_id` in the Prisma model."},"lead_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a representative report that initiated or is linked to the case.\n\nMaps to `lead_report_id` in the Prisma model. Use to add or change the lead report association."},"case_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-friendly case identifier. Updating this value must preserve uniqueness.\n\nThis maps to `case_number` in the Prisma model. Changes should be performed cautiously and will be validated for uniqueness by the service."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short title summarizing the case for quick identification.\n\nMaps to `title` in the Prisma model. Use to clarify or correct the case title."},"status":{"oneOf":[{"const":"open"},{"const":"investigating"},{"const":"closed"},{"const":"on_hold"},{"type":"null"}],"description":"Lifecycle status of the case. Allowed exact enum values: 'open','investigating','closed','on_hold'.\n\nThis updates the `status` column on the Prisma model; transitions may trigger workflow side-effects and are validated by server logic."},"priority":{"oneOf":[{"const":"low"},{"const":"normal"},{"const":"high"},{"const":"urgent"},{"type":"null"}],"description":"Operational priority label for triage. Allowed exact enum values: 'low','normal','high','urgent'.\n\nMaps to `priority` in the Prisma model. Changing priority affects queue ordering and alerting behavior."},"summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional concise summary or executive note for the case.\n\nThis maps to `summary` in the Prisma model and is intended to provide moderators and administrators a human-friendly description of the case."},"escalation_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional escalation reason (for example: 'legal','law_enforcement','coordinated_activity').\n\nMaps to `escalation_reason` in the Prisma model and documents why a case was escalated."},"legal_hold":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Flag indicating whether a legal hold applies to the case.\n\nThis maps to `legal_hold` in the Prisma model. Use true to apply a preservation hold or false to release it; changing this field may trigger retention and preservation workflows."},"closed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating when the case was closed.\n\nThis maps to `closed_at` in the Prisma model. Set when closing the case; use ISO 8601 UTC date-time format."}},"required":[],"description":"Update DTO for a moderation case.\n\nAll fields are optional and may be provided to modify the existing moderation case. The DTO maps to the Prisma model `econ_political_forum_moderation_cases` and intentionally excludes immutable/system-managed fields such as `id`, `created_at`, `updated_at`, and `deleted_at`.\n\nBusiness notes:\n- Use the exact enum tokens for `status` and `priority` when updating these fields.\n- Modifying `legal_hold` should follow legal/operations procedures and will be validated by server-side logic."},"IEconPoliticalForumModerationLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number for page-based pagination (1-based). Use either page/limit or cursor for pagination. Default behavior is page=1 when omitted."},"limit":{"type":"integer","format":"uint32","description":"Number of items per page when using page-based pagination. Server enforces a maximum (recommended max 100). Default server-side page size is typically 20."},"cursor":{"type":"string","description":"Opaque pagination cursor for cursor-based pagination. When provided, cursor takes precedence over page/limit pagination."},"sortBy":{"type":"string","description":"Field to sort by. Typical values: 'created_at', 'action_type', 'moderator_id'. When a free-text query is provided, a relevance sort may be applied by the server."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'. Default is 'desc' (newest first)."},{"const":"desc","description":"Sort direction: 'asc' or 'desc'. Default is 'desc' (newest first)."}],"description":"Sort direction: 'asc' or 'desc'. Default is 'desc' (newest first)."},"query":{"type":"string","description":"Free-text search applied to rationale and other textual fields. Use this to surface log entries that match key terms. The server should sanitize and limit query length (recommended max 1000 chars)."},"moderator_id":{"type":"string","format":"uuid","description":"Filter results to entries authored by the specified moderator (UUID of econ_political_forum_moderator)."},"acted_admin_id":{"type":"string","format":"uuid","description":"Filter results by administrator who finalized or acted on an entry (UUID of econ_political_forum_administrator)."},"target_post_id":{"type":"string","format":"uuid","description":"Filter logs affecting a specific post (UUID of econ_political_forum_posts)."},"target_thread_id":{"type":"string","format":"uuid","description":"Filter logs affecting a specific thread (UUID of econ_political_forum_threads)."},"moderation_case_id":{"type":"string","format":"uuid","description":"Filter logs attached to a specific moderation case (UUID of econ_political_forum_moderation_cases)."},"action_type":{"type":"string","description":"Filter by action type (for example: 'hide','remove','warning','suspend','approve','escalate','merge','flag'). Use exact action_type values used by the system."},"reason_code":{"type":"string","description":"Filter by structured policy reason code applied by moderators (maps to policy clauses). Use exact codes configured in moderation policy (e.g., 'doxxing','harassment','misinformation')."},"created_from":{"type":"string","format":"date-time","description":"Start of created_at date range filter (inclusive). ISO 8601 date-time format is required."},"created_to":{"type":"string","format":"date-time","description":"End of created_at date range filter (inclusive). ISO 8601 date-time format is required."},"includeDeleted":{"type":"boolean","description":"When true, include soft-deleted moderation log entries (deleted_at not null). This flag is restricted to administrative callers and will be rejected (403) for non-privileged requests."}},"required":[],"description":"Request DTO for searching and listing moderation log entries.\n\nThis object defines available filters, pagination, and sorting options used by moderation and admin UIs to retrieve matching moderation log entries from the `econ_political_forum_moderation_logs` table. All properties are optional; combine filters as needed. When `includeDeleted` is requested by non-admin callers the server MUST return 403 Forbidden.\n\nNotes:\n- Prefer cursor-based pagination for large result sets.\n- Free-text `query` targets rationale and other textual fields and should be sanitized server-side.\n- `sortBy` values are implementation-defined; servers should document supported fields in API docs."},"IEconPoliticalForumModerationLog":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_moderation_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the moderation log entry. Matches econ_political_forum_moderation_logs.id."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the acting moderator who performed the action (econ_political_forum_moderator.id). Nullable for system-generated actions."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the post affected by the action (econ_political_forum_posts.id). Nullable when the action targets a thread or other object."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the thread affected by the action (econ_political_forum_threads.id). Nullable when the action targets a post."},"moderation_case_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the moderation case aggregating related reports (econ_political_forum_moderation_cases.id). Nullable when no case association exists."},"acted_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional administrator id (econ_political_forum_administrator.id) when an admin performed or finalized the action. Nullable otherwise."},"action_type":{"type":"string","description":"Type of moderation action applied. Typical values include 'hide','remove','warning','suspend','approve','escalate','merge','flag'. Use the exact action_type strings defined by the platform's moderation policy."},"reason_code":{"type":"string","description":"Structured policy reason code used to categorize the applied rule or clause (for example: 'doxxing','harassment','misinformation','illegal_content'). Use exact, case-sensitive codes as defined in moderation policy."},"rationale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Moderator-provided free-text rationale (short explanation). This field is stored for audit and may be redacted in some public views. Recommended max length: 1000 characters (enforced at application level)."},"evidence_reference":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional URI or internal reference id pointing to stored evidence bundles or archived snapshots related to the action. For security do not expose raw storage paths; return tokenized or application-scoped references instead when used in responses."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was recorded (ISO 8601). Immutable once created. Maps to econ_political_forum_moderation_logs.created_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft-delete timestamp for the log entry. In standard operation moderation logs are append-only; deleted_at is present only when retention or archival policies require marking entries as removed from active views."}},"required":["id","action_type","reason_code","created_at"],"description":"Moderation log entry representing an immutable action taken by a moderator or system actor.\n\nThis schema directly corresponds to the Prisma model `econ_political_forum_moderation_logs` and includes all public-facing properties that map to persisted columns. Each property description references the corresponding Prisma column and provides operational guidance for consumers and implementers.\n\nNotes:\n- Fields marked nullable use a `oneOf` union to explicitly allow `null` values rather than omission.\n- The `x-autobe-prisma-schema` annotation links this DTO to the exact Prisma model name for downstream validation and code generation.\n- The `action_type` and `reason_code` fields rely on platform-defined controlled vocabularies; clients and servers MUST use exact values defined by moderation policy."},"IEconPoliticalForumAuditLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for page-based pagination (1-based). Default is 1."},"limit":{"type":"integer","description":"Number of records per page when using page-based pagination. Server enforces a maximum limit (for example 100)."},"cursor":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Opaque cursor for cursor-based pagination. When present, server returns the page after this cursor. Use null to indicate no cursor."},"query":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-text search over audit details (redacted excerpts for non-admin views). Use server-defined sanitization; max length recommended 1000 chars."},"action_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by audit action type (for example: 'create','edit','delete','hide','warn','suspend','escalate','legal_disclosure'). Null means include all action types."},"target_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by the target object type (for example: 'post','thread','user','report','moderation_case'). Null means include all types."},"target_identifier":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by canonical target identifier string when available. Null means do not filter by identifier."},"created_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start of created_at date range (inclusive) in ISO 8601 format. Use null to indicate no lower bound."},"created_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End of created_at date range (inclusive) in ISO 8601 format. Use null to indicate no upper bound."},"created_by_system":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional filter: true to include only system-generated events, false to include only human-generated events. Null includes both."},"my_items":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Business-safe actor-scoped flag. When true the server restricts results to entries relevant to the authenticated actor; use instead of direct actor id filters. Null means no actor scoping."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field used to sort results. Recommended: 'created_at', 'action_type', 'target_type'. Default is 'created_at'."},"sort_order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort direction: 'asc' or 'desc'. Default is 'desc' (newest first)."}},"required":[],"description":"Request DTO for searching and paginating audit log entries. NOTE: Direct user id or actor id filters have been removed to comply with IRequest security rules; use `my_items` to request actor-scoped results when permitted. Use created_from/created_to for time windows and 'query' for safe full-text search."},"IEconPoliticalForumAuditLog":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_audit_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the audit entry. Matches econ_political_forum_audit_logs.id in the Prisma schema.\n\nThis is the canonical identifier for the immutable audit record and is used for retrieval and legal export."},"registereduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional acting registered user id (UUID) that triggered the audit event. Null for system actions. Corresponds to econ_political_forum_audit_logs.registereduser_id."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional moderator id (UUID) associated with the event. Null when the action was not performed by a moderator. Maps to econ_political_forum_audit_logs.moderator_id."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional referenced post id (UUID) related to this audit entry. Null if not applicable. Corresponds to econ_political_forum_audit_logs.post_id."},"thread_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional referenced thread id (UUID) related to this audit entry. Null if not applicable. Corresponds to econ_political_forum_audit_logs.thread_id."},"report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional referenced report id (UUID) for actions tied to a report. Maps to econ_political_forum_audit_logs.report_id."},"moderation_case_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional moderation case id (UUID) associated with this audit event. Corresponds to econ_political_forum_audit_logs.moderation_case_id."},"action_type":{"type":"string","description":"Categorical action type describing the event (for example: 'create','edit','delete','hide','warn','suspend','escalate','legal_disclosure').\n\nThis field maps to econ_political_forum_audit_logs.action_type and should use server-defined action literals."},"target_type":{"type":"string","description":"Type of the target object acted upon (for example: 'post','thread','user','report','moderation_case').\n\nCorresponds to econ_political_forum_audit_logs.target_type in the Prisma schema."},"target_identifier":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Canonical identifier of the target as a string for cross-domain queries; nullable when not applicable. Maps to econ_political_forum_audit_logs.target_identifier."},"details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text or JSON-serialized details of the event (for example moderator rationale, evidence snapshot reference). This field is stored in econ_political_forum_audit_logs.details and may be redacted in public summaries. It should remain concise and avoid storing raw sensitive data; heavy binary artifacts should be stored externally and referenced by evidence_reference in moderation logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit entry was recorded (ISO 8601 UTC). Corresponds to econ_political_forum_audit_logs.created_at."},"created_by_system":{"type":"boolean","description":"Flag indicating whether the audit entry was generated by an automated system (true) or by a human actor (false). Maps to econ_political_forum_audit_logs.created_by_system."}},"required":["id","action_type","target_type","created_at","created_by_system"],"description":"Canonical audit log entry representing an immutable event in the system.\n\nThis schema mirrors the Prisma model `econ_political_forum_audit_logs` and includes all persisted fields that are safe to return from audit endpoints. Fields that are nullable in the Prisma model are expressed using oneOf with a null branch to preserve explicit null semantics in clients.\n\nUsage notes:\n- Audit entries are append-only. Do not attempt to mutate historical entries.\n- Access to `details` may be restricted or redacted depending on caller privileges; implementers should enforce access controls and record any reads of sensitive fields in administrative audit trails."},"IEconPoliticalForumLegalHold.IRequest":{"type":"object","properties":{"holderId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by the administrator or legal officer who placed the hold. This corresponds to the `registereduser_id` field on the Prisma model `econ_political_forum_legal_holds`. Use UUID format. Nullable to indicate no filter."},"postId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter holds applied to a specific post. Matches the `post_id` column in the Prisma model. Use UUID format or null to omit this filter."},"threadId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter holds applied to a specific thread. Matches the `thread_id` column in the Prisma model. Use UUID format or null to omit this filter."},"moderationCaseId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter holds associated with a moderation case (`moderation_case_id`). Use UUID format or null to omit."},"holdReason":{"oneOf":[{"const":"subpoena"},{"const":"law_enforcement"},{"const":"litigation"},{"const":"other"},{"type":"null"}],"description":"Optional filter by hold reason. Allowed values: 'subpoena', 'law_enforcement', 'litigation', 'other'. Nullable to omit this filter."},"isActive":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional boolean filter to return only active holds (true) or inactive holds (false). Null means no filter."},"holdStartFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional start of hold_start date range (ISO 8601 date-time). Use to filter holds that began on or after this timestamp. Nullable to omit."},"holdStartTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional end of hold_start date range (ISO 8601 date-time). Use to filter holds that began on or before this timestamp. Nullable to omit."},"page":{"type":"integer","minimum":1,"description":"Page number for page/limit pagination. 1-based. If omitted, the server may use cursor or default to page 1."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of items to return per page. Server-enforced upper bound is 200. If omitted, server default applies."},"cursor":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional opaque cursor for cursor-based pagination. Provide either cursor or page/limit. Nullable when not used."},"sort":{"oneOf":[{"const":"created_at"},{"const":"hold_start"},{"type":"null"}],"description":"Sort field. Allowed values: 'created_at' or 'hold_start'. Null indicates server default sorting."},"direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: 'asc' or 'desc'. Null indicates server default (usually 'desc')."}},"required":[],"description":"Request DTO for searching and listing legal hold records.\n\nThis type is intended for administrative queries. It supports filtering by holder, post, thread, moderation case, reason, active state, and hold-start date range. Pagination may be expressed through either `page`/`limit` or an opaque `cursor`. Sorting is limited to `created_at` or `hold_start` and a sort `direction` may be provided.\n\nNotes:\n- All identifier filters expect UUID format when provided.\n- When a field is optional and intentionally not used, clients may provide `null` explicitly for clarity.\n- Use of `includeDeleted` or access to archived records is controlled at the API layer and requires administrator privileges; that behavior is handled outside this DTO."},"IEconPoliticalForumLegalHold":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the legal hold record. Maps to `econ_political_forum_legal_holds.id` in Prisma."},"registereduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of the administrator or legal officer who placed the hold. Corresponds to `registereduser_id` in the Prisma model. Null if placed by system process or not specified."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the specific post under hold (`econ_political_forum_posts.id`). Null when the hold targets a thread or case instead."},"thread_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the thread under hold (`econ_political_forum_threads.id`). Null when the hold applies to a post or a case-level hold."},"moderation_case_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional associated moderation case id (`econ_political_forum_moderation_cases.id`) that motivated the hold. Nullable when not applicable."},"hold_reason":{"oneOf":[{"const":"subpoena","description":"The short coded reason for the legal hold. Use one of the predefined values to classify the hold's purpose."},{"const":"law_enforcement","description":"The short coded reason for the legal hold. Use one of the predefined values to classify the hold's purpose."},{"const":"litigation","description":"The short coded reason for the legal hold. Use one of the predefined values to classify the hold's purpose."},{"const":"other","description":"The short coded reason for the legal hold. Use one of the predefined values to classify the hold's purpose."}],"description":"The short coded reason for the legal hold. Use one of the predefined values to classify the hold's purpose."},"hold_start":{"type":"string","format":"date-time","description":"Timestamp when the legal hold became effective (ISO 8601). Maps to `hold_start` in the Prisma model."},"hold_end":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp when the hold is scheduled to end. Null indicates an indefinite hold."},"is_active":{"type":"boolean","description":"Whether the hold is currently active. Maps to `is_active` in the Prisma model."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional internal notes or case identifiers for administrative use. Do not expose sensitive PII in this field to unprivileged clients."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 format. Maps to `created_at` in the Prisma model."}},"required":["id","hold_reason","hold_start","is_active","created_at"],"description":"Canonical representation of a Legal Hold record.\n\nThis schema maps directly to the Prisma model `econ_political_forum_legal_holds` and includes all persisted columns that are safe to expose to authorized administrative clients. Fields that are nullable in the database are represented using `oneOf` with `null` to clearly indicate optional values.\n\nBusiness notes:\n- `registereduser_id`, `post_id`, `thread_id`, and `moderation_case_id` are optional and may be null depending on the hold scope.\n- `hold_reason` uses a constrained set of values to standardize reporting and filtering.\n- Implementations should enforce access control: only administrators may view full hold records, and access to sensitive `notes` must be audited.","x-autobe-prisma-schema":"econ_political_forum_legal_holds"},"IEconPoliticalForumNotification.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Zero-based or 1-based page number depending on API convention. Use page or cursor for pagination. Default behavior: when absent, server returns the first page. For large result sets prefer cursor-based pagination.\n\nThis property is optional and intended for simple page/limit pagination patterns. The server enforces a maximum page size to protect performance."},"limit":{"type":"integer","description":"Maximum number of items to return per page. Default is 20 and the server enforces a maximum (for example 100). Use smaller values for mobile clients to reduce payload size."},"cursor":{"type":"string","description":"Opaque pagination cursor returned by prior list responses. When present the server will use cursor-based pagination instead of page/limit. Clients should not interpret cursor contents; treat it as an opaque token supplied by the API."},"q":{"type":"string","description":"Optional full-text search query applied to notification title, body, and payload excerpts. Short queries (under 200 characters) are recommended. The server may rank results by relevance when this field is provided."},"is_read":{"type":"boolean","description":"Filter for read/unread notifications. When supplied, results include only notifications where is_read matches this value.\n\nUse this filter for inbox-style views to show unread items only."},"type":{"type":"string","description":"Filter notifications by their type code (for example: 'mention', 'reply', 'moderation', 'system'). Allowed type codes are defined by the application. This filter is case-sensitive and must match the server's canonical type strings."},"related_thread_id":{"type":"string","format":"uuid","description":"Optional UUID of a thread to restrict notifications that reference the given thread. This property filters by econ_political_forum_notifications.related_thread_id and must be a valid UUID."},"related_post_id":{"type":"string","format":"uuid","description":"Optional UUID of a post to restrict notifications that reference the given post. This property filters by econ_political_forum_notifications.related_post_id and must be a valid UUID."},"created_from":{"type":"string","format":"date-time","description":"Start of created_at date range (inclusive). Must be an ISO 8601 date-time string in UTC. Use this to restrict notifications created on or after the given timestamp."},"created_to":{"type":"string","format":"date-time","description":"End of created_at date range (inclusive). Must be an ISO 8601 date-time string in UTC. When both created_from and created_to are provided the server validates that created_from <= created_to."},"sort_by":{"type":"string","description":"Sort key for results. Common values: 'created_at'. When omitted defaults to 'created_at'.\n\nNote: for relevance-based sorting when 'q' is provided, the server may override sort_by to use relevance."},"order":{"oneOf":[{"const":"asc","description":"Sort direction. Allowed values: 'asc' or 'desc'. Defaults to 'desc' when omitted."},{"const":"desc","description":"Sort direction. Allowed values: 'asc' or 'desc'. Defaults to 'desc' when omitted."}],"description":"Sort direction. Allowed values: 'asc' or 'desc'. Defaults to 'desc' when omitted."}},"required":[],"description":"Parameters for listing and searching notifications.\n\nThis DTO encapsulates pagination, filtering, and sorting options used when retrieving notifications for a user. Use either page/limit or cursor for pagination; the server selects the appropriate strategy when both are present. All date/time values must be ISO 8601 date-time strings (UTC). The API enforces caps on page sizes and may reject overly large or expensive queries."},"IEconPoliticalForumNotification":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_notifications","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the notification record. This UUID uniquely identifies the notification and corresponds to econ_political_forum_notifications.id in the Prisma schema."},"registereduser_id":{"type":"string","format":"uuid","description":"UUID of the recipient registered user. This field maps to econ_political_forum_notifications.registereduser_id and identifies the intended recipient for the notification."},"actor_registereduser_id":{"type":"string","format":"uuid","description":"Optional UUID of the acting user who triggered the notification (for example the author who mentioned the recipient). This corresponds to econ_political_forum_notifications.actor_registereduser_id and may be null when the notification is system-generated."},"type":{"type":"string","description":"Notification type code (for example: 'mention', 'reply', 'moderation', 'system'). This string identifies the semantic kind of the notification and is used by clients to render appropriate UI affordances."},"title":{"type":"string","description":"Optional short title for the notification used in lists and summaries. When present it provides a brief human-readable summary suitable for UI display."},"body":{"type":"string","description":"Optional short message body or excerpt shown in notification lists. Longer payload details are stored in `payload` and may be rendered in a detail view."},"payload":{"type":"string","description":"Flexible JSON-serialized payload stored as a string. This contains structured delivery data such as {\"threadId\": \"...\", \"postId\": \"...\", \"excerpt\": \"...\"} serialized to JSON. The application MUST sanitize and validate this payload before use.\n\nNote: Although stored as a string in the Prisma schema, the payload is expected to be parseable JSON. Do not place sensitive secrets in this field."},"is_read":{"type":"boolean","description":"Flag indicating whether the recipient has marked the notification as read. This maps to econ_political_forum_notifications.is_read and is a user-managed flag."},"delivered_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was delivered to the user (for example when an email or push was sent). Nullable when the notification has not been delivered via external channels."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (ISO 8601). Matches econ_political_forum_notifications.created_at and indicates when the notification was generated by the system."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the notification record. Updated when mutable fields such as is_read or delivered_at change."},"deleted_at":{"type":"string","format":"date-time","description":"Soft-delete timestamp. When present the notification is treated as removed from normal listings but retained for audit. Maps to econ_political_forum_notifications.deleted_at. Nullable when active."},"related_thread_id":{"type":"string","format":"uuid","description":"Optional UUID of a related thread (econ_political_forum_threads.id) referenced by this notification. Nullable when the notification does not reference a thread."},"related_post_id":{"type":"string","format":"uuid","description":"Optional UUID of a related post (econ_political_forum_posts.id) referenced by this notification. Nullable when the notification does not reference a post."},"related_moderation_case_id":{"type":"string","format":"uuid","description":"Optional UUID referencing an associated moderation case (econ_political_forum_moderation_cases.id). Present for moderation-related notifications; nullable otherwise."}},"required":["id","registereduser_id","type","payload","is_read","created_at","updated_at"],"description":"Notification record representing a single user-facing event.\n\nThis schema corresponds directly to the Prisma model econ_political_forum_notifications. It contains recipient linkage, optional actor and related-object references, delivery metadata, and a JSON-serialized payload stored as a string. Sensitive or moderator-only fields are present in the model (for example reason references) but are subject to role-based redaction by the API. Clients should treat payload as parseable JSON and must sanitize any HTML or user-provided fragments before display."},"IEconPoliticalForumNotification.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_notifications","properties":{"is_read":{"type":"boolean","description":"Whether the notification has been read by the recipient.\n\nThis flag is used by clients to mark notifications as read/unread and by servers to compute unread counts. When present in an update payload, the server will set the notification's is_read state accordingly and record an audit entry when the change is related to moderation workflows."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was delivered to the user (ISO 8601, UTC).\n\nThis field is optional in update requests. Use the ISO 8601 date-time string when setting an explicit delivery timestamp. To indicate clearing the delivered timestamp, the client may set this property to null. The server validates format and will normalize timezone to UTC."},"title":{"type":"string","description":"Optional short title for the notification shown in UI lists.\n\nClients may update title to correct or localize the displayed summary. Keep titles concise (recommended <= 200 characters). The server will sanitize input and reject overly long values with a 400 validation error."},"body":{"type":"string","description":"Optional short message body or plain-text excerpt for display in notification lists.\n\nWhen provided, the server will sanitize the body to remove disallowed HTML/Markdown and may truncate long values for list views. Use this field for small presentation adjustments only; large payload content should be stored externally and referenced via `payload`."},"payload":{"type":"string","description":"Flexible JSON-serialized delivery payload (as a string) containing structured metadata (for example: {\"threadId\":\"...\",\"postId\":\"...\",\"excerpt\":\"...\"}).\n\nThis field allows clients to attach structured delivery data. The server will validate that the content is valid JSON when persisted and will sanitize or redact sensitive keys. Use caution: do not store secrets here. Large payloads are discouraged; keep payloads reasonably sized (server may enforce a max length)."}},"required":[],"description":"Update DTO for a notification. This object contains only the mutable fields that a notification recipient (or an authorized administrator) may change via the notification update API.\n\nUse this DTO to mark a notification read/unread (is_read), to correct small display text (title, body), to adjust the delivered timestamp (delivered_at), or to attach/update a small structured payload (payload). The server enforces ownership and role-based access control and sanitizes all inputs before persistence."},"IEconPoliticalForumRegisteredUser.IRequest":{"type":"object","properties":{"username":{"type":"string","description":"Optional partial match string for the account username (case-insensitive, trimmed). Use this field to search users by username prefix or substring. The server uses trigram/partial matching for performant searches."},"displayName":{"type":"string","description":"Optional partial match string for the user's public display name. Used to find users by display_name (case-insensitive)."},"emailVerified":{"type":"boolean","description":"Optional filter to include only email-verified accounts when true, or only unverified accounts when false. Use with care: queries that include exact email matching are considered PII-sensitive and may be audited by the server."},"isBanned":{"type":"boolean","description":"Optional filter to include only banned (true) or non-banned (false) accounts."},"createdFrom":{"type":"string","format":"date-time","description":"Optional ISO 8601 date-time (UTC) lower bound for account creation timestamp. Use to filter accounts created on or after this timestamp."},"createdTo":{"type":"string","format":"date-time","description":"Optional ISO 8601 date-time (UTC) upper bound for account creation timestamp. Use to filter accounts created on or before this timestamp."},"page":{"type":"integer","description":"Page number for page-based pagination (1-based). If omitted, server may default to page 1."},"limit":{"type":"integer","description":"Maximum number of records to return per page. The server enforces a maximum cap; clients should respect sensible defaults to avoid large responses."},"cursor":{"type":"string","description":"Optional opaque cursor for cursor-based pagination. When provided the server will ignore page/limit and use cursor continuation semantics."},"sortBy":{"oneOf":[{"const":"created_at","description":"Field to sort results by. Allowed values: 'created_at' (creation time) or 'username'."},{"const":"username","description":"Field to sort results by. Allowed values: 'created_at' (creation time) or 'username'."}],"description":"Field to sort results by. Allowed values: 'created_at' (creation time) or 'username'."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction. Allowed values: 'asc' or 'desc'."},{"const":"desc","description":"Sort direction. Allowed values: 'asc' or 'desc'."}],"description":"Sort direction. Allowed values: 'asc' or 'desc'."},"includeDeleted":{"type":"boolean","description":"Optional flag indicating whether to include soft-deleted (archived) accounts in the result set. This flag is restricted to administrator callers and will be ignored or rejected for non-admin requests."}},"required":[],"description":"Request DTO for searching and listing registered users. This object contains safe, filterable fields used by administrative user listing endpoints.\n\nTypical usage: provide partial username or displayName for fuzzy search, optionally filter by email verification or ban status, constrain by createdFrom/createdTo date range, and paginate results using page/limit or an opaque cursor. Sorting is supported via sortBy and sortOrder. The includeDeleted flag is admin-restricted and, if set, will return archived accounts as well as active ones."},"IEconPoliticalForumNotificationPreferences":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_notification_preferences","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the preferences record.\n\nMaps to econ_political_forum_notification_preferences.id in the Prisma schema and uniquely identifies this per-user preference row."},"registereduser_id":{"type":"string","format":"uuid","description":"Owning registered user's id. This links the preference row to the user.\n\nCorresponds to econ_political_forum_notification_preferences.registereduser_id in the Prisma schema. Present in responses for administrative and owner-level APIs; the server must enforce access control when exposing this field."},"in_app":{"type":"boolean","description":"Whether in-app notifications are enabled for the user.\n\nThis property maps to econ_political_forum_notification_preferences.in_app in the Prisma schema. A value of true indicates the user receives notifications inside the application UI."},"email":{"type":"boolean","description":"Whether email notifications are enabled for the user.\n\nMaps to econ_political_forum_notification_preferences.email in the Prisma schema. Use with caution to avoid exposing PII; the existence of this flag does not reveal the user's email address itself."},"push":{"type":"boolean","description":"Whether push notifications are enabled for the user.\n\nThis corresponds to econ_political_forum_notification_preferences.push in the Prisma schema and controls push-channel delivery behavior."},"preferences_payload":{"type":"string","description":"Optional JSON-serialized per-type preference overrides stored as a string.\n\nMaps to econ_political_forum_notification_preferences.preferences_payload in the Prisma schema. The content is a serialized JSON object (as a string) describing per-notification-type overrides (for example: {\"mentions\": {\"email\": false}}). Servers MUST validate and sanitize this payload when accepting updates and must not allow secrets to be stored here."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 format.\n\nCorresponds to econ_political_forum_notification_preferences.created_at in the Prisma schema and is set by the system when the preference row is first created."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp in ISO 8601 format.\n\nMaps to econ_political_forum_notification_preferences.updated_at in the Prisma schema and indicates when the preferences were last modified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. Null when the preferences record is active.\n\nThis property maps to econ_political_forum_notification_preferences.deleted_at in the Prisma schema. Use oneOf to represent the nullable DateTime per JSON Schema rules."}},"required":["id","registereduser_id","in_app","email","push","created_at","updated_at"],"description":"Per-user notification delivery preferences.\n\nThis DTO represents the canonical preference row stored in the `econ_political_forum_notification_preferences` Prisma model. It includes channel-level toggles (in_app, email, push) and an optional JSON-serialized payload for fine-grained per-type overrides. All fields map directly to columns in the Prisma model, and updates to this DTO must be validated and audited according to platform policy.\n\nNotes: `preferences_payload` is stored as a serialized JSON string; servers should validate its structure before persisting and must not store sensitive secrets in this field."},"IEconPoliticalForumNotificationPreferences.IUpdate":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_notification_preferences","properties":{"in_app":{"type":"boolean","description":"Whether in-app notifications are enabled for the user.\n\nThis flag controls delivery to the in-app notification center. When omitted in the update payload, the server SHOULD preserve the existing value."},"email":{"type":"boolean","description":"Whether email notifications are enabled for the user.\n\nThis flag controls whether the system will send email notifications for events the user has subscribed to. Use server-side rate limits and do not expose PII via email content inappropriately."},"push":{"type":"boolean","description":"Whether push notifications (mobile/web push) are enabled for the user.\n\nWhen true, the notification delivery pipeline may attempt push delivery subject to the user's registered push endpoints and delivery preferences."},"preferences_payload":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional JSON-serialized string containing per-notification-type overrides or delivery preferences.\n\nThis field is stored as a string in the database (preferences_payload). The server MUST validate and sanitize the payload before persisting. If the client intends to clear overrides, pass null explicitly. Examples: '{\"mentions\":{\"email\":false}}'."}},"required":[],"description":"Update DTO for a user's notification delivery preferences.\n\nThis schema represents the mutable fields a user may update to control how they receive notifications from the platform. It maps directly to the Prisma model `econ_political_forum_notification_preferences` and is used for owner-level preference updates.\n\nNotes:\n- Only include fields you intend to modify. Omitted fields are treated as \"no change\" by the server.\n- `preferences_payload` is a serialized JSON string and may be null to clear per-type overrides.\n- All updates must be audited by the server when they are performed by administrators on behalf of other users."},"IEconPoliticalForumCategory.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_categories","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the category (UUID). Corresponds to `econ_political_forum_categories.id` in the Prisma schema."},"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short business code for the category (for example, 'fiscal' or 'trade'). This field is nullable in the Prisma model and may be omitted or set to null."},"name":{"type":"string","description":"Human-visible category name used in navigation and UI display. Corresponds to `econ_political_forum_categories.name`."},"slug":{"type":"string","description":"URL-friendly unique slug for the category (used for routing and lookups). Corresponds to `econ_political_forum_categories.slug`."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional longer textual description explaining the purpose and scope of the category. Nullable in the Prisma model."},"is_moderated":{"type":"boolean","description":"Whether new posts in this category require moderator approval before public publishing. Mirrors `econ_political_forum_categories.is_moderated`."},"requires_verification":{"type":"boolean","description":"If true, posting in this category requires a verified account (for example, email verified). Mirrors `econ_political_forum_categories.requires_verification`."},"order":{"type":"integer","description":"Display order hint for UI lists; lower values are shown earlier. Corresponds to `econ_political_forum_categories.order`."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (ISO 8601). Corresponds to `econ_political_forum_categories.created_at`. Included in the summary for sorting or administrative displays."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp (ISO 8601). Corresponds to `econ_political_forum_categories.updated_at`."}},"required":["id","name","slug","is_moderated","requires_verification","order"],"description":"Category summary used for list and navigation displays.\n\nThis DTO exposes a safe, read-optimized view of the `econ_political_forum_categories` model. It intentionally includes core routing and visibility metadata such as `slug`, `is_moderated`, and `requires_verification` so clients can enforce local UI gating and present appropriate affordances (for example, show a \"verified required\" badge).\n\nNotes:\n- The `code` and `description` fields are nullable and may be omitted or null when not provided in the database.\n- Timestamps are returned in ISO 8601 format and reflect the authoritative values from the database.\n- This summary is intended for public consumption; do not include internal-only administrative fields here."},"IEconPoliticalForumFeatureFlag.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_feature_flags","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the feature flag as stored in the Prisma model econ_political_forum_feature_flags.\n\nThis stable identifier uniquely identifies the feature flag record and is used for administrative operations, linking audit entries, and programmatic lookups."},"key":{"type":"string","description":"Canonical unique key of the feature flag (for example: 'new_search_ui' or 'moderation.report_threshold').\n\nThis key follows a namespace-like pattern and is used by application code to reference the flag. Clients and admin UIs should treat this as the authoritative name for the feature."},"enabled":{"type":"boolean","description":"Boolean indicating whether the feature flag is globally enabled.\n\nWhen true, the feature is considered active for consumers subject to rollout rules. When false, the feature is disabled by default."},"rollout_percentage":{"oneOf":[{"type":"integer","description":"Optional rollout percentage (0–100) representing progressive exposure to a subset of users.\n\nWhen present, the value indicates the percent of eligible users that should receive the feature. Use 0 for effectively disabled rollout, 100 for full rollout. Implementations MUST enforce bounds (0–100)."},{"type":"null","description":"Indicates that no rollout percentage is configured for this flag."}],"description":"Optional rollout percentage (0–100) representing progressive exposure to a subset of users. When present, the value indicates the percent of eligible users that should receive the feature. Use 0 for effectively disabled rollout, 100 for full rollout. Implementations MUST enforce bounds (0–100)."},"description":{"oneOf":[{"type":"string","description":"Human-readable description that explains the purpose, intended behavior, and any important rollout or rollback guidance for this feature flag.\n\nThis text is intended for administrators and operators to understand the flag's intent, safety considerations, and any immediate actions that should follow toggling the flag (for example, cache refresh or background job considerations)."},{"type":"null","description":"No descriptive text provided for this feature flag."}],"description":"Human-readable description that explains the purpose, intended behavior, and any important rollout or rollback guidance for this feature flag.\n\nThis text is intended for administrators and operators to understand the flag's intent, safety considerations, and any immediate actions that should follow toggling the flag (for example, cache refresh or background job considerations)."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when the feature flag record was created in the database (Prisma field `created_at`).\n\nUsed for auditing and sorting historical records."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 timestamp of the most recent update to the feature flag (Prisma field `updated_at`).\n\nNullable when the record has not been modified since creation. Useful for synchronization, cache invalidation, and change-tracking."},{"type":"null","description":"No update timestamp present (record unchanged since creation)."}],"description":"ISO 8601 timestamp of the most recent update to the feature flag (Prisma field `updated_at`). Nullable when the record has not been modified since creation. Useful for synchronization, cache invalidation, and change-tracking."}},"required":["id","key","enabled","created_at"],"description":"Feature flag summary DTO used by administrative lists and lightweight management UIs.\n\nThis object contains the minimal, safe set of fields required to display and manage feature flags without exposing sensitive runtime values. It maps directly to the Prisma model `econ_political_forum_feature_flags` and includes identification, enabled state, optional rollout percentage, human description, and timestamps.\n\nUse cases: admin flag lists, audit summaries, feature dashboards, and non-sensitive public cataloging when `is_public` semantics are applied elsewhere."},"IEconPoliticalForumTag.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_tags","properties":{"id":{"type":"string","format":"uuid","description":"Tag primary key (UUID)."},"name":{"type":"string","description":"Tag name for list displays."},"slug":{"type":"string","description":"URL-friendly slug used for routing and link generation."}},"required":["id","name","slug"],"description":"IEconPoliticalForumTag.ISummary — Summary view for tag lists.\n\nContains only essential fields for listing and discovery. Excludes large textual descriptions and any sensitive/internal fields. Maps to the Prisma model `econ_political_forum_tags`."},"IEconPoliticalForumThread.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_threads","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the thread as defined in the Prisma model econ_political_forum_threads.\n\nThis identifier is a UUID used as the canonical reference for a thread across the system, including moderation logs and cross-entity relations. Use this value to fetch full thread details and related posts."},"category_id":{"type":"string","format":"uuid","description":"Identifier of the category this thread belongs to (econ_political_forum_categories.id).\n\nThis field links the thread to its navigation/category metadata and is used to enforce category-level posting rules such as moderation gating or verification requirements."},"author_id":{"type":"string","format":"uuid","description":"Registered user id of the thread author (econ_political_forum_registereduser.id).\n\nThis property is the foreign-key reference to the author account and is used to present author attribution and check ownership or permissions in operations like edit or delete."},"title":{"type":"string","description":"Thread title as stored in econ_political_forum_threads.title.\n\nThe title is the primary display text for the thread used in listings and search. It should be concise and is intentionally indexed for fast lookup and relevance scoring."},"slug":{"type":"string","description":"URL-friendly unique slug for the thread as stored in econ_political_forum_threads.slug.\n\nSlugs are unique within the threads table and intended for stable routing and shareable URLs. The server may synthesize a slug from the title when one is not provided."},"status":{"type":"string","description":"Lifecycle status of the thread as stored in econ_political_forum_threads.status.\n\nCommon values in business usage include 'open', 'closed', or 'pinned' to communicate basic thread state to clients and moderators. The application business logic controls allowed values and transitions."},"pinned":{"type":"boolean","description":"Boolean flag indicating whether the thread is pinned for prominent display (econ_political_forum_threads.pinned).\n\nPinned threads are prioritized in UI listings and usually set by moderators or administrators. Clients should treat this property as an ordering hint rather than a permanent state."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the thread (econ_political_forum_threads.created_at).\n\nStored in UTC date-time format, this field is used for sorting, chronology, and audit purposes. It is system-managed and should not be supplied by clients when creating threads."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the thread (econ_political_forum_threads.updated_at).\n\nThis timestamp is updated whenever thread metadata changes (title, slug, status, pinned). It helps clients detect freshness and support optimistic concurrency patterns."}},"required":["id","category_id","author_id","title","slug","status","pinned","created_at","updated_at"],"description":"Summary view of a discussion thread.\n\nThis DTO is a lightweight representation of a thread intended for list views and discovery. It exposes the canonical, non-sensitive fields from the Prisma model econ_political_forum_threads that are necessary for rendering thread lists, routing, and basic permission checks.\n\nDo not include heavy or sensitive fields in this summary. For full thread details (including posts), use the detailed thread endpoint which returns the full econ_political_forum_threads record and associated posts."},"IEconPoliticalForumPost.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_posts","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post as defined in the Prisma model econ_political_forum_posts.\n\nThis UUID identifies the post record and is used across votes, bookmarks, reports, and moderation logs to reference the specific post instance."},"thread_id":{"type":"string","format":"uuid","description":"Identifier of the thread this post belongs to (econ_political_forum_threads.id).\n\nUsed to scope the post within a thread and to enable clients to navigate from a post summary directly to its parent thread view."},"author_id":{"type":"string","format":"uuid","description":"Registered user id of the post author (econ_political_forum_registereduser.id).\n\nThis foreign-key associates the post with its author account for attribution and permission checks (edits/deletes)."},"parent_id":{"type":"string","format":"uuid","description":"If present, the parent post id indicating this post is a reply to another post (econ_political_forum_posts.parent_id).\n\nNull when the post is a top-level message in the thread. This property enables nested reply rendering and reply threading logic."},"is_edited":{"type":"boolean","description":"Flag indicating whether the post was edited after creation (econ_political_forum_posts.is_edited).\n\nClients can use this flag to display an \"edited\" marker and optionally offer a revision history link when present."},"edited_at":{"type":"string","format":"date-time","description":"Timestamp of the latest edit on the post (econ_political_forum_posts.edited_at).\n\nNull if the post has never been edited. Used for displaying edit metadata and supporting moderation review."},"is_hidden":{"type":"boolean","description":"Moderator hide flag indicating whether the post is hidden from normal public listings (econ_political_forum_posts.is_hidden).\n\nThis is a moderator-controlled flag; ordinary clients should treat hidden posts as not visible. Moderators and administrators may see this flag in moderation views."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the post (econ_political_forum_posts.created_at).\n\nThis is system-managed and used for ordering, pagination, and audit trails. Represented in UTC date-time format."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the post record (econ_political_forum_posts.updated_at).\n\nUpdated whenever the post content or metadata changes. Useful for cache invalidation and optimistic concurrency."}},"required":["id","thread_id","author_id","is_edited","is_hidden","created_at","updated_at"],"description":"Summary representation of a post or reply.\n\nThis DTO exposes the canonical, non-sensitive post fields present in the Prisma model econ_political_forum_posts. It is intended for use in thread list previews, search result snippets, and lightweight displays. The full post content is intentionally omitted from this summary to keep list payloads small and to comply with ISummary guidelines. For full content and revision history, use the detailed post endpoint and the post revisions endpoints."},"IEconPoliticalForumBookmark.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_bookmarks","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the bookmark record in the database (econ_political_forum_bookmarks.id).\n\nThis is the canonical identifier used for bookmark management and audit references."},"post_id":{"type":"string","format":"uuid","description":"Identifier of the bookmarked post (econ_political_forum_bookmarks.post_id).\n\nThis is the primary reference used by the client to navigate to the saved content."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the bookmark record was created (econ_political_forum_bookmarks.created_at).\n\nTimestamps are expressed in ISO 8601 / date-time format and are useful for sorting and display in bookmark lists."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the bookmark record (econ_political_forum_bookmarks.updated_at).\n\nPresent for completeness; may be equal to created_at when no updates occurred."}},"required":["id","post_id","created_at"],"description":"Bookmark summary DTO representing a saved post reference.\n\nThis summary maps directly to the Prisma model `econ_political_forum_bookmarks`. It contains the minimal, public-safe fields required to render a user's bookmark list: the bookmark id, the referenced post id, and creation timestamp. Additional internal fields (for example moderation flags or actor identifiers) are intentionally excluded from this summary.\n\nDesign notes:\n- When this DTO is used in responses, the server should ensure privacy rules are applied (for example, redacting owner identifiers when returning lists to third parties)."},"IEconPoliticalForumModerationCase.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_moderation_cases","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the moderation case (econ_political_forum_moderation_cases.id).\n\nUsed as the canonical identifier for case-level workflows and audit references."},"case_number":{"type":"string","description":"Human-friendly unique case identifier (econ_political_forum_moderation_cases.case_number).\n\nThis value is suitable for display in dashboards and for communicating with users and external stakeholders (for example: \"CASE-2025-0001\")."},"title":{"type":"string","description":"Short title or summary line for the case (econ_political_forum_moderation_cases.title).\n\nIntended to give moderators and administrators a quick view of the case subject in list displays."},"status":{"type":"string","description":"Lifecycle status of the case (econ_political_forum_moderation_cases.status).\n\nTypical values are application-defined (for example: 'open', 'investigating', 'closed', 'on_hold'). The server should document exact allowed values in API reference and enforce them in create/update flows."},"priority":{"type":"string","description":"Operational priority label for triage (econ_political_forum_moderation_cases.priority).\n\nExamples: 'low', 'normal', 'high', 'urgent'. Priority drives queue ordering in moderation UIs."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the moderator currently assigned to the case (econ_political_forum_moderation_cases.assigned_moderator_id).\n\nNullable when the case is unassigned. When present, this id references a moderator record for operational routing."},"owner_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the administrator who owns or finalized the case (econ_political_forum_moderation_cases.owner_admin_id).\n\nNullable; present for escalated or administratively-handled cases."},"lead_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Representative report id that initiated the case (econ_political_forum_moderation_cases.lead_report_id).\n\nNullable when the case was opened proactively or via other workflows."},"legal_hold":{"type":"boolean","description":"Flag indicating whether a legal hold is applied to the case (econ_political_forum_moderation_cases.legal_hold).\n\nWhen true, deletion and purge workflows must preserve evidence associated with the case until the hold is released."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation case was created (econ_political_forum_moderation_cases.created_at).\n\nExpressed in ISO 8601 / date-time format; useful for sort and SLA calculations."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the moderation case (econ_political_forum_moderation_cases.updated_at).\n\nUseful for tracking progress and showing recent activity in administrative lists."},"closed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the case was closed or resolved (econ_political_forum_moderation_cases.closed_at).\n\nNullable while the case is open; when present indicates finalization time."}},"required":["id","case_number","status","priority","created_at"],"description":"Moderation case summary DTO.\n\nThis summary maps directly to the Prisma model `econ_political_forum_moderation_cases` and is intended for moderator and administrator list views. It includes identifying fields (id, case_number), administrative attributes (status, priority, legal_hold) and routing identifiers (assigned_moderator_id, owner_admin_id) where available. The DTO purpose is to enable efficient triage and case routing without exposing sensitive evidence or full case details.\n\nDesign notes:\n- Fields that are nullable in the Prisma model are represented using `oneOf` with a `null` branch to preserve explicit null semantics.\n- This summary intentionally excludes large textual summaries or sensitive notes; those belong in the full case DTO accessed via admin/moderator detail endpoints."},"IEconPoliticalForumModerationLog.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_moderation_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the moderation log entry as stored in the Prisma model `econ_political_forum_moderation_logs.id`. This UUID is used to reference the moderation event in audit and escalation workflows."},"action_type":{"type":"string","description":"Categorical action taken by the moderator or system. Matches the `action_type` column in the Prisma model (examples: 'hide','remove','warning','suspend','approve','escalate','merge','flag'). Use exact values defined by business rules when evaluating and filtering moderation events."},"reason_code":{"type":"string","description":"Structured policy reason code applied by the moderator (maps to policy clauses). Corresponds to the `reason_code` column in the Prisma model and is intended for programmatic filtering and reporting."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the acting moderator's id (econ_political_forum_moderator.id). Nullable when the action was performed by a system process or when moderator identity is not available."},"acted_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If an administrator finalized or acted on the event, this field contains the administrator's id (econ_political_forum_administrator.id). Nullable when not applicable."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"When the moderation action targeted a post, this is the referenced post id (econ_political_forum_posts.id). Null when the action targeted a thread or user."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"When the moderation action targeted a thread, this is the referenced thread id (econ_political_forum_threads.id). Null when the action targeted a post or other object."},"moderation_case_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Link to the moderation case aggregating related reports and actions (econ_political_forum_moderation_cases.id). Nullable when the action is not part of a grouped case."},"rationale":{"type":"string","description":"Optional moderator-provided free-text rationale explaining the action. This is the same content stored in the `rationale` column; in summary views this may be truncated by the UI. Full rationale is available via moderator/admin detail endpoints."},"evidence_reference":{"type":"string","description":"Optional short reference (URI or internal id) pointing to stored evidence bundles or archived snapshots. Corresponds to the `evidence_reference` column in the Prisma model. Implementations should not expose raw paths; use tokenized references when returning to clients."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was recorded (ISO 8601). Maps to `created_at` in the Prisma model and is immutable."}},"required":["id","action_type","reason_code","created_at"],"description":"Moderation log summary representing a single recorded moderation action.\n\nThis summary provides the essential metadata from the `econ_political_forum_moderation_logs` Prisma model required for lists and dashboards: unique id, action type, structured reason code, actor references (moderator/administrator ids when available), targeted object ids, and the immutable timestamp. It is intended for use in moderator and admin UIs that need to scan recent moderation activity without loading full, sensitive details.\n\nDo NOT expose confidential evidence or full internal notes in public-facing contexts. For full details (unredacted rationale or evidence bundles), use the dedicated moderator/admin detail endpoints which enforce stricter auditing and access controls."},"IEconPoliticalForumNotification.ISummary":{"type":"object","x-autobe-prisma-schema":"econ_political_forum_notifications","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the notification record as stored in `econ_political_forum_notifications.id`. Use this id for marking read/unread or retrieving full details."},"registereduser_id":{"type":"string","format":"uuid","description":"Recipient user's id (econ_political_forum_registereduser.id). The summary is scoped to this recipient; servers must enforce ownership when returning summaries to clients."},"actor_registereduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional id of the acting user who triggered the notification (econ_political_forum_registereduser.id). Null for system-generated notifications."},"type":{"type":"string","description":"Notification type code (example values: 'mention', 'reply', 'moderation', 'system'). Use these codes to route client UI behavior and to apply user delivery preferences."},"title":{"type":"string","description":"Short human-readable title for display in lists. Maps to `title` in the Prisma model and is intended for UI summaries."},"body":{"type":"string","description":"Optional short message body or excerpt for display in notification lists. For full payload details consult the notification detail endpoint; large payloads should be avoided here."},"is_read":{"type":"boolean","description":"Flag indicating whether the recipient has marked this notification as read. Corresponds to the `is_read` column in the Prisma model."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When the notification was delivered to the user (for push/email). Null if not delivered or if delivery timestamps are not applicable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification record was created (ISO 8601). Maps to `created_at` in the Prisma model and is the canonical ordering field for notification lists."},"related_thread_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a related thread (econ_political_forum_threads.id). Nullable when not applicable."},"related_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a related post (econ_political_forum_posts.id). Nullable when not applicable."},"related_moderation_case_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a related moderation case (econ_political_forum_moderation_cases.id). Nullable when not applicable."}},"required":["id","registereduser_id","type","is_read","created_at"],"description":"Notification summary returned in lists for the recipient user.\n\nThis DTO provides the minimal, non-sensitive fields derived from the `econ_political_forum_notifications` Prisma model needed for client inbox and feed views: identifiers, human-readable title/body excerpt, read-state, timestamps, and optional linkage to domain objects (thread/post/moderation case). It intentionally omits or keeps lightweight any large or sensitive payload content; clients should call the notification detail endpoint to retrieve the full payload when needed.\n\nServer implementers MUST enforce ownership checks and privacy rules when returning these summaries and MUST honor user notification preferences (in-app/email/push) at the delivery layer."},"IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":1,"description":"Current page number (1-based). This value indicates which page of results is being returned and is used by the client to request subsequent pages. The value must be a positive integer; page numbering convention is 1 for the first page."},"limit":{"type":"integer","minimum":1,"description":"Maximum number of records returned per page. This controls the page size for page-based pagination and must be a positive integer. The API enforces a server-side maximum limit (for example, 100) which clients should respect."},"records":{"type":"integer","minimum":0,"description":"Total number of records matching the request criteria across all pages. This field enables clients to compute remaining pages and to display total counts; it is computed by the server from the query result set and is non-negative."},"pages":{"type":"integer","minimum":0,"description":"Total number of pages available given the requested `limit` and the `records` count. Calculated as the ceiling of `records / limit`. This value is provided by the server to help clients render pagination controls."}},"required":["current","limit","records","pages"],"description":"Pagination metadata describing the returned page.\n\nThis schema defines the canonical pagination information returned alongside paginated data arrays. It provides the current page index and page size, plus server-calculated totals (records and pages) so clients can render accurate pagination controls and compute remaining pages.\n\nImplementers: the server MUST populate these fields for every paginated response. Clients should not attempt to infer pagination state from partial values; rely on these server-provided fields. Use ISO 8601 timestamps and UUIDs elsewhere as required by other DTOs; this object only contains numeric pagination metadata."}}}}