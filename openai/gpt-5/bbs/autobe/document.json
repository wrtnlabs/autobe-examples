{"operations":[{"specification":"Create a role-scoped registration endpoint that creates a new platform account in the econ_discuss_users table and assigns a visitor role via econ_discuss_visitors. The endpoint accepts credential and identity inputs needed to persist a user with required columns (email, password_hash derived from input, display_name) and optional preferences (timezone, locale). It must ensure uniqueness on econ_discuss_users.email and persist timestamps (created_at, updated_at). After successful persistence and role assignment (econ_discuss_visitors.user_id referencing econ_discuss_users.id), the service issues JWTs and returns an authorization payload for the Visitor role. This operation directly manipulates the Actors namespace tables: econ_discuss_users (base account) and econ_discuss_visitors (role assignment).","authorizationType":"join","description":"Purpose and overview\nThis operation registers a new account intended for the Visitor role and returns authorized session tokens. It persists a base identity in the Actors namespace using econ_discuss_users (id, email, password_hash, display_name, avatar_uri?, timezone?, locale?, email_verified, mfa_enabled, mfa_secret?, mfa_recovery_codes?, created_at, updated_at, deleted_at?) and then assigns the role in econ_discuss_visitors (id, user_id, notes?, created_at, updated_at, deleted_at?). The API produces an authorization payload for client-side session establishment.\n\nImplementation details and schema alignment\nAt minimum, the service writes econ_discuss_users.email (unique per @@unique[email]) and econ_discuss_users.password_hash (derived server-side from the plaintext credential received), along with econ_discuss_users.display_name. It may also record optional preferences to econ_discuss_users.timezone (e.g., \"Asia/Seoul\") and econ_discuss_users.locale (e.g., \"en-US\"). The operation initializes econ_discuss_users.email_verified to false and econ_discuss_users.mfa_enabled to false unless policy indicates otherwise. Creation and update timestamps populate econ_discuss_users.created_at and econ_discuss_users.updated_at. After creating the base user, it inserts an econ_discuss_visitors record referencing the same user via econ_discuss_visitors.user_id and initializes its created_at and updated_at.\n\nRole relationship and business context\nThe visitor capability is represented explicitly by econ_discuss_visitors linked to econ_discuss_users via user_id. Assigning this record signals platform behavior consistent with a read-only baseline. The system may also create a profile row later in econ_discuss_user_profiles, but that is not required for registration. No moderator, admin, or member role rows are created by this operation; it focuses on visitor onboarding only.\n\nSecurity considerations\nPasswords are never persisted in plaintext; the request’s password is transformed into econ_discuss_users.password_hash by the server. JWTs issued on success include at least claims for econ_discuss_users.id and the Visitor role. If multi-factor authentication is introduced later, econ_discuss_users.mfa_enabled and related secret/recovery fields (mfa_secret, mfa_recovery_codes) remain unset here. Email verification is tracked by econ_discuss_users.email_verified and may gate certain capabilities until confirmed by separate flows.\n\nRelated operations and error handling\nClients typically call the refresh endpoint (/auth/visitor/refresh) to rotate tokens. Conflicts on email are returned as 409 when econ_discuss_users.email violates the unique constraint. Validation problems on required inputs return 400. Excessive attempts should return 429 according to policy. Successful registration returns an authorization structure with access and refresh tokens aligned to the Visitor role.","summary":"Register a Visitor account in econ_discuss_users and assign econ_discuss_visitors, returning Visitor authorization.","parameters":[],"requestBody":{"description":"Visitor registration payload including credentials and optional preferences.","typeName":"IEconDiscussVisitorJoin.ICreate"},"responseBody":{"description":"Authorized session for Visitor role, including issued tokens and user context.","typeName":"IEconDiscussVisitor.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/visitor/join","method":"post"},{"specification":"Create a token refresh endpoint for the Visitor role that accepts a valid refresh token, validates it, and issues new JWTs for continued access. Although the refresh flow is primarily token-based, it may read the econ_discuss_users record (id, email_verified, mfa_enabled, deleted_at?) to ensure the account is still active and confirm the role remains valid by verifying presence of a linked econ_discuss_visitors row (user_id). No database writes are required for happy-path rotation besides audit/telemetry if implemented out-of-band. The operation belongs to the Actors namespace and is logically tied to econ_discuss_users and econ_discuss_visitors for state checks.","authorizationType":"refresh","description":"Purpose and overview\nThis operation rotates JWTs for a Visitor by consuming a presented refresh token and returning a new authorized session. While no content entities are changed, the service may check the underlying Actors tables for account and role status: econ_discuss_users (id, email_verified, mfa_enabled, created_at, updated_at, deleted_at?) and econ_discuss_visitors (user_id). The objective is to sustain authenticated sessions with short-lived access tokens and longer-lived refresh tokens.\n\nImplementation details and schema alignment\nThe controller validates the refresh token and, if accepted, issues new tokens associated with econ_discuss_users.id and the Visitor role. The refresh logic can deny rotation if the linked econ_discuss_users row indicates a state that disallows continued sessions (e.g., removal signaled via deleted_at) or if the econ_discuss_visitors relation no longer exists for the user_id. This preserves coherence with role assignment represented in the econ_discuss_visitors table.\n\nRole-specific integration and business context\nVisitor is a read-oriented role captured by a row in econ_discuss_visitors. The refresh process confirms the role remains applicable before minting new credentials. The endpoint does not alter moderator, member, or admin tables.\n\nSecurity considerations\nThe handler ensures refresh token validity and rotation policy, producing new short-lived access tokens and an updated refresh token where appropriate. Tokens embed minimal claims (user id and Visitor role). Two-factor flags (econ_discuss_users.mfa_enabled) are advisory; this endpoint does not enroll or verify second factors. Email verification (econ_discuss_users.email_verified) can influence downstream capabilities but does not prevent token issuance unless policy dictates.\n\nRelated operations and error handling\nUse /auth/visitor/join to create an initial account. Refresh token errors yield 401 or 403. Accounts without a corresponding econ_discuss_visitors assignment or with states that disallow continuation should return 403. On success, the response returns an authorization structure suitable for client storage and subsequent API access.","summary":"Refresh Visitor JWTs after validating refresh token and confirming visitor role via econ_discuss_visitors.","parameters":[],"requestBody":{"description":"Refresh request including an existing refresh token.","typeName":"IEconDiscussVisitorRefresh.IRequest"},"responseBody":{"description":"Newly issued authorized session for Visitor role.","typeName":"IEconDiscussVisitor.IAuthorized"},"authorizationRole":"visitor","name":"refresh","prerequisites":[],"path":"/auth/visitor/refresh","method":"post"},{"specification":"Create registration endpoint for econDiscuss member accounts. This operation creates a new econ_discuss_users row with required credential fields (email, password_hash) and identity fields (display_name, optional timezone, optional locale). It also initializes email verification state (email_verified=false) and optional 2FA defaults (mfa_enabled=false, mfa_secret=null, mfa_recovery_codes=null). After user creation, it assigns the member role by creating a corresponding econ_discuss_members record (joined_at, created_at, updated_at) linked by user_id. The endpoint issues initial JWT token pair on success (access + refresh), modeled in the response DTO. Data sources: Actors schema tables econ_discuss_users and econ_discuss_members; timestamps use created_at/updated_at columns. No token persistence table exists in Prisma; token issuance is ephemeral per business policy.","authorizationType":"join","description":"This endpoint registers a new Member using the Actors schema. It persists a user in econ_discuss_users with the provided email (email), a securely derived password_hash from the submitted password, a human-readable display_name, and optional timezone and locale fields, as documented in the Prisma comments. At creation time, email_verified is set to false to reflect that email verification is pending; mfa_enabled is false and both mfa_secret and mfa_recovery_codes are null as no multi-factor enrollment has happened.\n\nUpon successful user creation, the API also establishes role membership by inserting an econ_discuss_members record referencing the user via user_id and populating joined_at, created_at, and updated_at. This follows the role model where membership capabilities derive from the existence of an econ_discuss_members row linked to econ_discuss_users.\n\nSecurity-wise, the operation validates uniqueness of econ_discuss_users.email and rejects duplicates. Passwords are never stored in plaintext; only password_hash is persisted according to the schema comment. The response includes signed JWTs (access and refresh) and essential subject claims derived from econ_discuss_users.id and role context.\n\nThis operation relates to subsequent flows like email verification (email_verified flag) and 2FA enablement (mfa_enabled, mfa_secret, mfa_recovery_codes). Clients commonly call /auth/member/email/verification/resend to send a verification message after registration.\n\nError handling includes conflict on existing email (unique constraint on econ_discuss_users.email), validation errors for required properties, and generic server errors. All timestamps are populated using created_at/updated_at columns as per Prisma definitions.","summary":"Register a new Member by creating econ_discuss_users and assigning econ_discuss_members (issue tokens).","parameters":[],"requestBody":{"description":"Registration payload with credentials and profile basics.","typeName":"IEconDiscussMember.ICreate"},"responseBody":{"description":"Authorized session for the newly created member, with access/refresh tokens and subject claims.","typeName":"IEconDiscussMember.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/member/join","method":"post"},{"specification":"Authenticate an existing member account using econ_discuss_users credentials. Validates the submitted email and password against stored econ_discuss_users.email and password_hash. Ensures that the user has a member role (presence of econ_discuss_members for the same user_id). On success, issues JWT tokens in response; no token persistence is stored in Prisma per schema. Uses email_verified to determine post-login capability messaging as per business rules.","authorizationType":"login","description":"This operation authenticates via the Actors schema: it loads econ_discuss_users by email, verifies the provided password against password_hash, and confirms the presence of an econ_discuss_members row for role membership. If email_verified is false, the system may restrict certain actions while still allowing login, consistent with the business requirements.\n\nMulti-factor state derives from mfa_enabled; if true, the server may require a valid one-time code before finalizing authentication. The database stores 2FA artifacts in mfa_secret and mfa_recovery_codes; these are never returned to clients.\n\nOn success, the service issues access and refresh JWTs containing subject identifiers derived from econ_discuss_users.id and role \"member\". Timestamps like updated_at may be touched depending on auditing policies but are schema-available.\n\nRelated operations include /auth/member/refresh for token renewal, /auth/member/mfa/setup and /auth/member/mfa/verify for enabling 2FA, and /auth/member/password/reset for recovery.\n\nErrors include invalid credentials, missing member assignment (no econ_discuss_members row), account restrictions, or rate-limit cooldowns. The email uniqueness on econ_discuss_users is central to identity lookup.","summary":"Authenticate a Member based on econ_discuss_users credentials and issue tokens.","parameters":[],"requestBody":{"description":"Email/password (and optional 2FA code) for authentication.","typeName":"IEconDiscussMember.ILogin"},"responseBody":{"description":"Authorized session with issued access/refresh tokens and subject claims.","typeName":"IEconDiscussMember.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/member/login","method":"post"},{"specification":"Refresh JWT access token using a valid refresh token. Does not rely on any token storage tables in Prisma; instead, validates the submitted refresh token and reissues a new access token (and rotated refresh token if policy dictates). The user identity embedded in the token aligns with econ_discuss_users.id and role membership inferred from econ_discuss_members.","authorizationType":"refresh","description":"This operation performs token renewal for authenticated sessions. It accepts a refresh token in the request, validates its signature and claims, and issues a new access token. Rotation of refresh tokens may be performed per policy. The underlying user belongs to econ_discuss_users; the Member role is indicated by the presence of an econ_discuss_members record.\n\nBecause tokens are short-lived and not stored in the database schema, the operation is stateless with respect to persistence. However, it may include role data (member) and security flags like mfa_enabled in claims for client-side hints.\n\nThis endpoint is often invoked after /auth/member/login or after access token expiration. If the refresh token is expired or revoked, the operation fails, requiring a new login.\n\nNo database write is required beyond optional audit trails; no Prisma table is updated in this flow under the given schema.","summary":"Refresh JWT tokens for a Member using submitted refresh token (stateless; user in econ_discuss_users).","parameters":[],"requestBody":{"description":"Refresh token payload for renewal/rotation.","typeName":"IEconDiscussMember.IRefresh"},"responseBody":{"description":"Authorized session with renewed tokens.","typeName":"IEconDiscussMember.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/member/refresh","method":"post"},{"specification":"Confirm email verification for a member. Consumes a verification token submitted by the client, and upon success sets econ_discuss_users.email_verified=true for the target user. Updates updated_at timestamp. No role table changes are necessary; membership remains in econ_discuss_members. This endpoint supports post-registration verification.","authorizationType":null,"description":"This operation flips the email_verified boolean in econ_discuss_users to true after successful verification of a client-provided token. The table columns referenced include email_verified and updated_at for auditing. The user’s identity mapping aligns with econ_discuss_users.id derived from the token.\n\nThis function complements registration at /auth/member/join and unlocks platform actions gated by verified email. It does not return secrets or tokens; it simply confirms verification status.\n\nError cases include invalid or expired verification token or already verified addresses. On idempotent replays where email_verified is already true, the service may return success without change.","summary":"Verify member email by setting econ_discuss_users.email_verified=true.","parameters":[],"requestBody":{"description":"Verification token to confirm the email address.","typeName":"IEconDiscussMember.IEmailVerifyRequest"},"responseBody":{"description":"Verification result payload including the new email_verified state.","typeName":"IEconDiscussMember.IEmailVerification"},"authorizationRole":null,"name":"verifyEmail","prerequisites":[{"endpoint":{"path":"/auth/member/email/verification/resend","method":"post"},"description":"Issues a valid email verification token for the account so that the verify endpoint can successfully confirm ownership. Without a freshly issued, non-expired token, verification will fail."}],"path":"/auth/member/email/verify","method":"post"},{"specification":"Resend email verification to the authenticated member. Uses econ_discuss_users.email and email_verified state to decide whether to send a new verification message. Does not modify database except optional audit of updated_at.","authorizationType":null,"description":"This operation is available to authenticated members whose econ_discuss_users.email_verified is false. It sends a new verification email to the address stored in econ_discuss_users.email. The endpoint does not change schema fields other than potentially touching updated_at for bookkeeping.\n\nThe API avoids email enumeration by requiring authentication and not exposing whether an address exists for other accounts. It references the user’s current email from the database and reuses standard verification flows handled by /auth/member/email/verify.\n\nErrors include already-verified state and rate-limit restrictions for resends.","summary":"Resend verification email for econ_discuss_users.email when email_verified is false.","parameters":[],"requestBody":null,"responseBody":{"description":"Resend outcome details (e.g., queued).","typeName":"IEconDiscussMember.IEmailVerification"},"authorizationRole":"member","name":"resendVerification","prerequisites":[],"path":"/auth/member/email/verification/resend","method":"post"},{"specification":"Initiate password reset for a member account by email. Accepts email, locates econ_discuss_users by email, and sends a time-limited reset token to that address without exposing account existence. No schema writes are performed except optional notification records external to this schema.","authorizationType":null,"description":"This public endpoint starts a password reset by accepting an email and, if present in econ_discuss_users (unique by email), generating a reset token delivered via email. The service does not reveal whether the address exists, aligning with security guidance. No changes to econ_discuss_users are required at initiation time beyond optional updated_at bookkeeping.\n\nRelated follow-up is /auth/member/password/reset/confirm which performs the actual credential update. This operation is safe to expose publicly as it does not disclose user existence.","summary":"Start password reset flow for econ_discuss_users by email (send token).","parameters":[],"requestBody":{"description":"Email of the account to reset password for.","typeName":"IEconDiscussMember.IPasswordResetRequest"},"responseBody":{"description":"Reset initiation result (non-enumerating).","typeName":"IEconDiscussMember.ISecurityEvent"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/member/password/reset","method":"post"},{"specification":"Confirm a password reset using a time-limited token. Verifies token, then updates econ_discuss_users.password_hash with a new hash and touches updated_at. Does not alter role tables. Email_verified remains unchanged.","authorizationType":null,"description":"This endpoint finalizes password recovery. After validating a reset token, the server updates the user’s credential by replacing password_hash in econ_discuss_users and updating updated_at for auditing. No other fields (such as email_verified, mfa_enabled) are changed here.\n\nClients should require the user to re-authenticate after a reset. This operation is complementary to /auth/member/password/reset and independent of member role assignment in econ_discuss_members.","summary":"Finalize password reset by updating econ_discuss_users.password_hash.","parameters":[],"requestBody":{"description":"Reset confirmation payload including token and new password.","typeName":"IEconDiscussMember.IPasswordResetConfirm"},"responseBody":{"description":"Outcome of password reset confirmation.","typeName":"IEconDiscussMember.ISecurityEvent"},"authorizationRole":null,"name":"confirmPasswordReset","prerequisites":[{"endpoint":{"path":"/auth/member/password/reset","method":"post"},"description":"Initiates the password reset flow and generates the time-limited token required by the confirmation step. Without a valid token from the request step, reset confirmation cannot proceed."}],"path":"/auth/member/password/reset/confirm","method":"post"},{"specification":"Change password for an authenticated member. Verifies current credential, then updates econ_discuss_users.password_hash with the new hash and touches updated_at. Requires authenticated access with role member.","authorizationType":null,"description":"This operation allows a logged-in member to change their password. It validates the current password against password_hash in econ_discuss_users, computes a new password_hash from the submitted new password, and updates the record (also updating updated_at). Email and role rows (econ_discuss_members) are unaffected.\n\nThis endpoint complements password reset flows and follows the schema guidance never to store plaintext passwords. It may optionally require additional confirmation when mfa_enabled is true.","summary":"Change credential by updating econ_discuss_users.password_hash for the authenticated member.","parameters":[],"requestBody":{"description":"Current and new password values for update.","typeName":"IEconDiscussMember.IUpdatePassword"},"responseBody":{"description":"Password change result.","typeName":"IEconDiscussMember.ISecurityEvent"},"authorizationRole":"member","name":"updatePassword","prerequisites":[],"path":"/auth/member/password","method":"put"},{"specification":"Begin 2FA enrollment for a member. Generates and stores an encrypted secret in econ_discuss_users.mfa_secret (server-side) and prepares a set of mfa_recovery_codes. Does not enable 2FA yet; mfa_enabled remains false until verification. Returns provisioning information to the client (e.g., URI) via response DTO; secrets are not persisted in response beyond what is necessary to complete enrollment.","authorizationType":null,"description":"This operation initiates multi-factor authentication for a Member. In the econ_discuss_users table, 2FA artifacts include mfa_secret, mfa_recovery_codes, and mfa_enabled. The setup call stores a new mfa_secret and a fresh set of mfa_recovery_codes in encrypted/hashed form and keeps mfa_enabled=false until a successful verification occurs.\n\nThe response DTO presents client-side provisioning data suitable for an authenticator app (URI string representation) and any necessary hints; raw secrets are never logged, and recovery codes are presented only at generation time.\n\nThis endpoint is restricted to authenticated members and does not affect role assignments in econ_discuss_members.","summary":"Initiate 2FA enrollment using econ_discuss_users.mfa_secret and mfa_recovery_codes (mfa_enabled remains false).","parameters":[],"requestBody":null,"responseBody":{"description":"Provisioning payload to complete 2FA enrollment.","typeName":"IEconDiscussMember.IMfaSetup"},"authorizationRole":"member","name":"mfaSetup","prerequisites":[],"path":"/auth/member/mfa/setup","method":"post"},{"specification":"Verify 2FA enrollment by validating a time-based one-time password. On success, sets econ_discuss_users.mfa_enabled=true and updates updated_at. mfa_secret and mfa_recovery_codes remain stored (encrypted/hashed).","authorizationType":null,"description":"This endpoint completes 2FA activation. It checks a submitted code against the secret stored in econ_discuss_users.mfa_secret. When valid, it flips mfa_enabled to true and updates updated_at. Recovery codes (mfa_recovery_codes) remain available for emergency login and are not returned again.\n\nThis operation is restricted to authenticated members and can be required before elevated actions per policy.","summary":"Enable 2FA by setting econ_discuss_users.mfa_enabled=true after verifying code.","parameters":[],"requestBody":{"description":"Verification code or recovery code to complete 2FA activation.","typeName":"IEconDiscussMember.IMfaVerify"},"responseBody":{"description":"MFA enabled state confirmation.","typeName":"IEconDiscussMember.IMfaEnabled"},"authorizationRole":"member","name":"mfaVerify","prerequisites":[{"endpoint":{"path":"/auth/member/mfa/setup","method":"post"},"description":"Initiates MFA enrollment to generate and store mfa_secret and provisional recovery codes; without a prior setup, there is no secret to validate and verification cannot succeed."}],"path":"/auth/member/mfa/verify","method":"post"},{"specification":"Disable 2FA for an authenticated member. Validates a code (TOTP or recovery) and then sets econ_discuss_users.mfa_enabled=false, clears or rotates mfa_secret and mfa_recovery_codes as policy dictates, and updates updated_at. Intended for secure opt-out or recovery scenarios.","authorizationType":null,"description":"This endpoint turns off MFA for the user in econ_discuss_users by setting mfa_enabled=false. It may also clear mfa_secret and regenerate mfa_recovery_codes depending on policy; at minimum updated_at is changed. A valid verification (TOTP or recovery code) is required to prevent unauthorized disablement.\n\nThe operation does not change role assignments in econ_discuss_members and is available only to authenticated members.","summary":"Disable 2FA by updating econ_discuss_users.mfa_enabled=false and adjusting secrets as required.","parameters":[],"requestBody":{"description":"Confirmation code to authorize MFA disable.","typeName":"IEconDiscussMember.IMfaDisable"},"responseBody":{"description":"MFA disabled state confirmation.","typeName":"IEconDiscussMember.IMfaDisabled"},"authorizationRole":"member","name":"mfaDisable","prerequisites":[{"endpoint":{"path":"/auth/member/mfa/verify","method":"post"},"description":"Ensures MFA is currently enabled (mfa_enabled=true) so that a valid TOTP or recovery code exists to authorize disablement; without being enabled, the disable operation would fail or be a no-op."}],"path":"/auth/member/mfa","method":"delete"},{"specification":"Regenerate 2FA recovery codes for an authenticated member. After validating a current TOTP code, replaces econ_discuss_users.mfa_recovery_codes with a new set and updates updated_at. mfa_enabled remains unchanged.","authorizationType":null,"description":"This endpoint rotates recovery codes used for MFA fallback. It writes a new encrypted/hashed set to econ_discuss_users.mfa_recovery_codes and touches updated_at. The user must provide a valid current TOTP code (or equivalent) to authorize rotation.\n\nThe operation maintains mfa_enabled as-is and does not alter role membership records.","summary":"Regenerate recovery codes by updating econ_discuss_users.mfa_recovery_codes.","parameters":[],"requestBody":{"description":"Authorization code to regenerate recovery codes.","typeName":"IEconDiscussMember.IMfaRegenerateCodes"},"responseBody":{"description":"Fresh set of recovery codes (displayed one time).","typeName":"IEconDiscussMember.IMfaRecoveryCodes"},"authorizationRole":"member","name":"regenerateMfaRecoveryCodes","prerequisites":[{"endpoint":{"path":"/auth/member/mfa/verify","method":"post"},"description":"MFA must be enabled for the account before recovery codes can be regenerated. This endpoint verifies a TOTP code and flips econ_discuss_users.mfa_enabled=true, ensuring a valid mfa_secret exists. Without enabled MFA, rotation is not permitted and TOTP validation cannot succeed."}],"path":"/auth/member/mfa/recovery-codes/regenerate","method":"post"},{"specification":"Revoke all active sessions for the authenticated member across devices. While no token storage exists in Prisma, the system sets server-side revocation state and signals clients to re-authenticate. No schema changes are made to econ_discuss_users except optional updated_at for audit.","authorizationType":null,"description":"This operation implements a global sign-out. It invalidates active refresh tokens for the user across devices and requires re-authentication. The Actors schema (econ_discuss_users) does not define token tables, so revocation is managed out-of-band. The endpoint may update updated_at for audit consistency.\n\nThis is aligned with the business requirement to support \"log out on all devices\" within 30 seconds.","summary":"Global logout for a Member (revoke active sessions across devices).","parameters":[],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"logoutAll","prerequisites":[],"path":"/auth/member/logoutAll","method":"post"},{"specification":"Revoke the current session for the authenticated member. Similar to logoutAll but scoped to the active session/token pair. No database schema persistence is required; revocation is enforced in the token layer.","authorizationType":null,"description":"This operation logs out only the current device/session. As in the schema, no token persistence table exists; therefore, the server invalidates the presented refresh token and prevents further renewals.\n\nThis complements logoutAll and standard session lifecycle, with no changes to econ_discuss_users beyond optional updated_at.","summary":"Logout current session for a Member (revoke presented refresh token).","parameters":[],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"logout","prerequisites":[],"path":"/auth/member/logout","method":"post"},{"specification":"Create the registration endpoint for the verifiedExpert role that provisions a base account in econ_discuss_users and issues initial JWT tokens. This operation writes a new econ_discuss_users row using email, password_hash, and display_name while initializing optional profile preferences timezone and locale. It sets email_verified to false, mfa_enabled to false, and leaves mfa_secret and mfa_recovery_codes null on creation. It does not create an econ_discuss_verified_experts record; expert verification is handled by separate workflows. On success, it returns an authorization payload that includes access/refresh token material for the verifiedExpert authentication context. Related tables like econ_discuss_members may be used by business logic to reflect general membership, but this endpoint’s primary persistence target is econ_discuss_users.","authorizationType":"join","description":"This endpoint registers a new account intended to participate as a verified expert after completing the separate verification program. It persists identity in the Actors schema table econ_discuss_users, populating email, password_hash (derived from the submitted password), and display_name. Optional preferences such as timezone and locale are stored to support notification scheduling and localization. Columns email_verified and mfa_enabled are initialized to false, with mfa_secret and mfa_recovery_codes left null until multi‑factor enrollment. Timestamps created_at and updated_at are recorded by the application layer.\n\nSecurity considerations include secure password hashing mapped to econ_discuss_users.password_hash and immediate token issuance. The new account’s email_verified remains false, which allows read access but may restrict posting or voting per policy until the email is confirmed. MFA is not enabled at join time; enrollment occurs via dedicated MFA endpoints backed by econ_discuss_users.mfa_enabled, mfa_secret, and mfa_recovery_codes.\n\nFrom a data model perspective, this writes to econ_discuss_users only. Role assignment tables such as econ_discuss_verified_experts are not modified here; expert status is granted later through the verification workflow. If the service maintains a general membership record in econ_discuss_members, that may be created by downstream business logic but is not required for the join call itself.\n\nValidation requires unique email (enforced by @@unique([email]) on econ_discuss_users), non‑empty display_name, and a compliant password that can be hashed into password_hash. The operation should reject duplicate emails and return a conflict error without leaking whether an address already exists, following authentication UX guidelines.\n\nThis operation is typically followed by email verification (to toggle econ_discuss_users.email_verified via a separate verify endpoint) and optional MFA enrollment (which sets mfa_enabled and secrets). After verification, users may proceed to post, vote, and start expert verification, which eventually populates econ_discuss_verified_experts.","summary":"Register verified expert account into econ_discuss_users and issue initial tokens.","parameters":[],"requestBody":{"description":"Registration payload for a verified expert account.","typeName":"IEconDiscussVerifiedExpertJoin.ICreate"},"responseBody":{"description":"Authorized session with tokens and profile claims for verifiedExpert.","typeName":"IEconDiscussVerifiedExpert.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/verifiedExpert/join","method":"post"},{"specification":"Authenticate an existing econ_discuss_users account and issue JWT tokens for the verifiedExpert role context. It validates credentials against email and password_hash, and when econ_discuss_users.mfa_enabled is true, requires a second factor verified with the stored mfa_secret or recovery codes in mfa_recovery_codes. The endpoint does not mutate role assignment tables; it reads econ_discuss_verified_experts to determine whether to include expert role claims in the response. Returns an authorization object with access and refresh tokens.","authorizationType":"login","description":"This login endpoint checks the submitted email and password against econ_discuss_users.email and econ_discuss_users.password_hash, issuing tokens on success. If econ_discuss_users.mfa_enabled is true, it requires a valid one‑time code derived from mfa_secret or a valid value from mfa_recovery_codes. Email verification state is read from econ_discuss_users.email_verified for post‑login gating in downstream features; the login may still succeed while the platform limits write actions until verification is complete.\n\nThe operation does not modify database rows on success except for typical updated_at handling in econ_discuss_users performed by the application where appropriate. It does not create or remove role records; presence of a row in econ_discuss_verified_experts linked via econ_discuss_verified_experts.user_id may be used by token generation to include verifiedExpert claims used by authorization decorators.\n\nSecurity rules should enforce generic error messages on failure, rate limiting after repeated failures, and optional device/session metadata capture outside of this schema. MFA enforcement strictly relies on econ_discuss_users.mfa_enabled and associated secret/recovery data columns.\n\nThis login is commonly paired with token refresh to rotate refresh tokens and with email verification and MFA endpoints for strengthening account assurance. Error handling should include invalid credentials, missing second factor when required, and disabled accounts if deleted_at is set on econ_discuss_users.","summary":"Authenticate econ_discuss_users and issue tokens for verifiedExpert context.","parameters":[],"requestBody":{"description":"Credentials (and optional 2FA code) for verified expert login.","typeName":"IEconDiscussVerifiedExpertLogin.ICreate"},"responseBody":{"description":"Authorized session with tokens and verifiedExpert claims.","typeName":"IEconDiscussVerifiedExpert.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/verifiedExpert/login","method":"post"},{"specification":"Renew access credentials for the verifiedExpert context using a valid refresh token. The provider validates and rotates the refresh token and re‑issues an access token without changing persistent tables. No direct Prisma writes are required for this operation; it relies on token lifecycle logic external to the schema.","authorizationType":"refresh","description":"The refresh endpoint returns a new authorized session for a verified expert using a valid refresh token presented via secure channel (e.g., httpOnly cookie or header as per policy). It does not create or update rows in econ_discuss_users or role tables. Because token rotation and revocation lists are implementation details, the database schema does not constrain this operation; however, email_verified and mfa_enabled readouts may inform claim composition.\n\nSecurity considerations include rotation on use, revocation on anomalies, and denial when the refresh token is expired or invalid. The endpoint should not require an access token and should produce a new token pair following the project’s JWT policy. Error responses must be generic to avoid leaking token state.\n\nUse this together with login to maintain short‑lived access tokens for verified experts and to support concurrent device sessions consistent with business policies.","summary":"Refresh verifiedExpert JWTs without modifying econ_discuss_users.","parameters":[],"requestBody":{"description":"Refresh token container as defined by the service policy.","typeName":"IEconDiscussVerifiedExpertRefresh.ICreate"},"responseBody":{"description":"New authorized session for the verifiedExpert context.","typeName":"IEconDiscussVerifiedExpert.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/verifiedExpert/refresh","method":"post"},{"specification":"Allow an authenticated verified expert to change their password by updating econ_discuss_users.password_hash. Requires current password verification and a new password that will be hashed server‑side. Touches updated_at for bookkeeping.","authorizationType":null,"description":"This operation updates credentials for the currently authenticated account by writing a new hash into econ_discuss_users.password_hash after verifying the current password. It does not alter email, display_name, timezone, locale, or any MFA fields. The endpoint is available only to authenticated users with the verifiedExpert role and should respect lockout and rate‑limit policies.\n\nImplementation writes only to econ_discuss_users.password_hash and updated_at, leaving email_verified and mfa columns unchanged. If the account has deleted_at set, access should be denied. On success, no body is returned to avoid leaking details.\n\nThis endpoint complements the password reset flow for unauthenticated users and the login/refresh pair for session management.","summary":"Update econ_discuss_users.password_hash for the current verified expert.","parameters":[],"requestBody":{"description":"Current and new password for in‑session change.","typeName":"IEconDiscussVerifiedExpertPassword.IUpdate"},"responseBody":null,"authorizationRole":"verifiedExpert","name":"updatePassword","prerequisites":[],"path":"/auth/verifiedExpert/password","method":"put"},{"specification":"Begin a password reset by sending a time‑limited reset link to the account email stored in econ_discuss_users.email. No database writes are strictly required beyond optional audit; actual reset will update econ_discuss_users.password_hash via the reset endpoint.","authorizationType":null,"description":"This public operation accepts an email and, if a matching econ_discuss_users.email exists, initiates a reset process by sending a tokenized link. To prevent user enumeration, responses are generic regardless of account presence. The endpoint does not modify econ_discuss_users at this stage; password_hash is changed only by the reset endpoint.\n\nSecurity considerations include rate limiting and token TTL enforcement. The presence of email_verified does not block issuing a reset; however, business policy may choose to require verified emails.\n\nUse together with the password reset endpoint that consumes the token and writes a new password hash to econ_discuss_users.password_hash.","summary":"Request password reset for an econ_discuss_users account by email.","parameters":[],"requestBody":{"description":"Email address to receive reset instructions.","typeName":"IEconDiscussVerifiedExpertPassword.IRequest"},"responseBody":null,"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/verifiedExpert/password/forgot","method":"post"},{"specification":"Complete a password reset using a valid token and write a new hash into econ_discuss_users.password_hash. This updates updated_at and leaves other columns unchanged.","authorizationType":null,"description":"This endpoint finalizes a password reset by validating a token and setting a new econ_discuss_users.password_hash derived from the submitted password. It does not change email, display_name, or MFA fields. updated_at is refreshed for audit purposes.\n\nSecurity rules include single‑use tokens, short expiry, and generic error messaging. A successful reset can optionally invalidate outstanding refresh tokens according to policy, implemented outside of the schema.\n\nThis endpoint pairs with the password reset request and can be followed by a normal login to obtain tokens.","summary":"Reset password by updating econ_discuss_users.password_hash after token validation.","parameters":[],"requestBody":{"description":"Token and new password for resetting credentials.","typeName":"IEconDiscussVerifiedExpertPasswordReset.ICreate"},"responseBody":{"description":"Result status of password reset.","typeName":"IEconDiscussVerifiedExpertPasswordReset.IResult"},"authorizationRole":null,"name":"resetPassword","prerequisites":[{"endpoint":{"path":"/auth/verifiedExpert/password/forgot","method":"post"},"description":"Issues the time-limited password reset token via email that this confirmation endpoint must validate. Without a previously generated token, the reset cannot succeed."}],"path":"/auth/verifiedExpert/password/reset","method":"post"},{"specification":"Send a verification email to confirm ownership of econ_discuss_users.email. On completion of the separate verify endpoint, econ_discuss_users.email_verified will be set to true. This call does not mutate the database beyond optional audit.","authorizationType":null,"description":"This authenticated endpoint triggers delivery of a verification link to the current user’s econ_discuss_users.email. It does not write to the database itself; instead, the link leads to the verification endpoint which flips econ_discuss_users.email_verified to true upon successful token validation. The endpoint is restricted to the verifiedExpert role context for the current session.\n\nSecurity notes include rate limiting and generic responses to avoid email enumeration through timing. The presence of deleted_at should prevent sending. This endpoint supports policies that require verified email for posting, voting, and following.","summary":"Send email verification link for econ_discuss_users.email (sets email_verified via separate verify).","parameters":[],"requestBody":{"description":"Optional payload to localize or route the verification send.","typeName":"IEconDiscussVerifiedExpertEmail.IRequest"},"responseBody":{"description":"Acknowledgement of verification email dispatch.","typeName":"IEconDiscussVerifiedExpertEmail.ISent"},"authorizationRole":"verifiedExpert","name":"sendVerification","prerequisites":[],"path":"/auth/verifiedExpert/email/sendVerification","method":"post"},{"specification":"Confirm email ownership by validating a verification token and updating econ_discuss_users.email_verified to true. Updates updated_at for the user record.","authorizationType":null,"description":"This public endpoint processes a verification token, and on success, sets econ_discuss_users.email_verified to true for the corresponding account in econ_discuss_users, refreshing updated_at. It does not alter password_hash, MFA fields, or profile preferences.\n\nSecurity considerations include one‑time token consumption, short token expiry, and neutral error messaging to avoid account enumeration. After success, the account’s participation restrictions related to email verification can be lifted immediately per policy.","summary":"Verify email by setting econ_discuss_users.email_verified = true.","parameters":[],"requestBody":{"description":"Verification token container.","typeName":"IEconDiscussVerifiedExpertEmailVerify.ICreate"},"responseBody":{"description":"Verification outcome.","typeName":"IEconDiscussVerifiedExpertEmail.IVerified"},"authorizationRole":null,"name":"verifyEmail","prerequisites":[{"endpoint":{"path":"/auth/verifiedExpert/email/sendVerification","method":"post"},"description":"Dispatches the verification email and creates the one-time token required by this verification endpoint. Verification cannot proceed without a valid, previously issued token."}],"path":"/auth/verifiedExpert/email/verify","method":"post"},{"specification":"Start MFA enrollment for the current verified expert by generating a new shared secret and provisional recovery codes for econ_discuss_users.mfa_secret and mfa_recovery_codes. Does not immediately set mfa_enabled; finalization occurs after verification.","authorizationType":null,"description":"This endpoint prepares multi‑factor authentication by creating a new secret for TOTP (stored in econ_discuss_users.mfa_secret) and issuing provisional recovery codes (stored in econ_discuss_users.mfa_recovery_codes after confirmation). It should present a provisioning URI for authenticator apps. mfa_enabled remains false until the verify step succeeds, ensuring incomplete enrollments do not lock users out.\n\nSecurity and integrity require rotating any existing secret and invalidating prior recovery codes on re‑enroll attempts. This operation affects only the current user’s econ_discuss_users row and records updated_at; email and password_hash remain unchanged.","summary":"Begin 2FA setup using econ_discuss_users.mfa_secret and recovery codes.","parameters":[],"requestBody":{"description":"Enrollment request (e.g., method TOTP).","typeName":"IEconDiscussVerifiedExpertMfaEnroll.ICreate"},"responseBody":{"description":"Provisioning details for authenticator enrollment.","typeName":"IEconDiscussVerifiedExpertMfa.IEnroll"},"authorizationRole":"verifiedExpert","name":"enrollMfa","prerequisites":[],"path":"/auth/verifiedExpert/mfa/enroll","method":"post"},{"specification":"Finalize MFA enrollment by validating a TOTP or recovery code and enabling econ_discuss_users.mfa_enabled, persisting mfa_secret and mfa_recovery_codes. Updates updated_at.","authorizationType":null,"description":"After the user scans the provisioning URI, this endpoint verifies a submitted one‑time code against econ_discuss_users.mfa_secret and on success sets econ_discuss_users.mfa_enabled = true while persisting the secret and recovery codes. It updates updated_at; other profile fields are untouched.\n\nIf verification fails, do not enable mfa_enabled and return a generic error. Successful verification completes MFA setup for the account, enabling MFA checks during future /auth/verifiedExpert/login requests.","summary":"Verify MFA and set econ_discuss_users.mfa_enabled = true.","parameters":[],"requestBody":{"description":"One‑time code or recovery code to confirm setup.","typeName":"IEconDiscussVerifiedExpertMfaVerify.ICreate"},"responseBody":{"description":"MFA status after verification.","typeName":"IEconDiscussVerifiedExpertMfa.IStatus"},"authorizationRole":"verifiedExpert","name":"verifyMfa","prerequisites":[{"endpoint":{"path":"/auth/verifiedExpert/mfa/enroll","method":"post"},"description":"MFA setup must be initiated to generate and store econ_discuss_users.mfa_secret and provisional recovery codes before verification can succeed. Without enrollment, there is no secret to validate against and verification will fail."}],"path":"/auth/verifiedExpert/mfa/verify","method":"post"},{"specification":"Disable MFA for the current user by validating a code and then setting econ_discuss_users.mfa_enabled = false and clearing or rotating mfa_secret and mfa_recovery_codes. Updates updated_at.","authorizationType":null,"description":"This operation turns off multi‑factor authentication by updating econ_discuss_users: set mfa_enabled = false and clear or rotate mfa_secret and mfa_recovery_codes according to policy after validating a current TOTP or a valid recovery code. It does not touch email, password_hash, or display fields.\n\nDisabling MFA should be guarded by recent authentication and step‑up verification. On success, subsequent logins will no longer require a second factor.","summary":"Disable MFA by updating econ_discuss_users.mfa_enabled and clearing secrets.","parameters":[],"requestBody":{"description":"Confirmation via code to disable.","typeName":"IEconDiscussVerifiedExpertMfaDisable.ICreate"},"responseBody":{"description":"MFA status after disable operation.","typeName":"IEconDiscussVerifiedExpertMfa.IStatus"},"authorizationRole":"verifiedExpert","name":"disableMfa","prerequisites":[{"endpoint":{"path":"/auth/verifiedExpert/mfa/verify","method":"post"},"description":"MFA must already be enabled (econ_discuss_users.mfa_enabled=true) before it can be disabled. The verify step enables MFA after successful code validation, so disabling depends on having completed verification first."}],"path":"/auth/verifiedExpert/mfa/disable","method":"post"},{"specification":"Regenerate MFA recovery codes for the current user by writing new values to econ_discuss_users.mfa_recovery_codes and updating updated_at. MFA must already be enabled.","authorizationType":null,"description":"This endpoint produces a fresh set of recovery codes and persists them in econ_discuss_users.mfa_recovery_codes, invalidating any previously issued codes. It requires the user to be MFA‑enabled (econ_discuss_users.mfa_enabled = true) and authenticated in the verifiedExpert context. The operation does not alter the TOTP secret unless policy dictates rotation.\n\nOn completion, the response returns the newly generated codes once; they should not be retrievable again, aligning with security best practices.","summary":"Regenerate econ_discuss_users.mfa_recovery_codes for an MFA‑enabled account.","parameters":[],"requestBody":{"description":"Recovery code regeneration request.","typeName":"IEconDiscussVerifiedExpertMfaRecovery.ICreate"},"responseBody":{"description":"Newly generated recovery codes (one‑time display).","typeName":"IEconDiscussVerifiedExpertMfa.IRecoveryCodes"},"authorizationRole":"verifiedExpert","name":"regenerateMfaRecoveryCodes","prerequisites":[{"endpoint":{"path":"/auth/verifiedExpert/mfa/verify","method":"post"},"description":"Regenerating recovery codes requires the account to be MFA-enabled. The verification step enables MFA by setting econ_discuss_users.mfa_enabled=true; without it, regeneration is not permitted."}],"path":"/auth/verifiedExpert/mfa/recovery-codes","method":"post"},{"specification":"Create a registration endpoint for moderator accounts. This operation creates a new platform identity row in Prisma table Actors.econ_discuss_users (columns: id, email, password_hash, display_name, avatar_uri?, timezone?, locale?, email_verified, mfa_enabled, mfa_secret?, mfa_recovery_codes?, created_at, updated_at) and immediately assigns the moderator role by inserting a corresponding row into Actors.econ_discuss_moderators (columns: id, user_id, enforced_2fa, created_at, updated_at). It then issues JWT credentials for the newly registered moderator session. The endpoint accepts an email, raw password (to be hashed into password_hash), display name, and optional timezone/locale aligned to IANA and BCP 47 respectively. The response returns an authorized session DTO carrying short-lived access token and long-lived refresh token. This operation is associated primarily with econ_discuss_users and secondarily with econ_discuss_moderators for role assignment.","authorizationType":"join","description":"Purpose and overview:\nThis endpoint registers a new moderator by creating a user identity in Actors.econ_discuss_users and attaching a role record in Actors.econ_discuss_moderators. The econ_discuss_users table holds the authentication backbone with fields like email (unique identifier) and password_hash (never plaintext), as well as profile-adjacent preferences such as timezone and locale. The econ_discuss_moderators table confirms the user’s moderator scope and includes enforced_2fa to reflect policy that moderators require multi-factor authentication.\n\nImplementation details:\nOn success, a new econ_discuss_users row is inserted using the provided email, a securely derived password_hash, and a display_name. Optional preferences timezone and locale are persisted if provided. The email_verified flag can be initialized according to business policy; the mfa_enabled flag should be false at registration until setup occurs. Immediately after, a row in econ_discuss_moderators is created for this user_id, and enforced_2fa should be set true to signal mandatory 2FA for elevated actions. Timestamps created_at and updated_at are managed consistently with schema expectations.\n\nRole-specific integration and context:\nBecause moderators have governance capabilities, this registration path is restricted to creating users who will act under the moderator role as represented by econ_discuss_moderators. Downstream services use joins from econ_discuss_users → econ_discuss_moderators to authorize access to moderation tools and queues.\n\nSecurity considerations:\nPasswords must be hashed before storage in password_hash. Since econ_discuss_users also supports mfa_secret and mfa_recovery_codes, the system should prompt the new moderator to enable 2FA promptly, honoring the enforced_2fa flag in econ_discuss_moderators. Token issuance returns a short-lived access token and a longer-lived refresh token, consistent with session rotation policies.\n\nRelated operations and workflow:\nTypical flows continue with /auth/moderator/login for subsequent sessions and /auth/moderator/refresh for token renewal. Email ownership confirmation can be handled by separate verification processes referencing econ_discuss_users.email_verified.\n\nError handling expectations:\nReturn 409 when email in econ_discuss_users violates the unique constraint. Return 400 for invalid timezone (IANA) or locale (BCP 47) formats, and 422 for password strength policy failures. Rate-limit repeated attempts and consider 429 responses when exceeded.","summary":"Register a moderator by creating econ_discuss_users and assigning econ_discuss_moderators, returning an authorized session.","parameters":[],"requestBody":{"description":"Moderator registration payload including email, password, display name, and optional timezone/locale.","typeName":"IEconDiscussModerator.ICreate"},"responseBody":{"description":"Authorized moderator session with access/refresh tokens and principal context.","typeName":"IEconDiscussModerator.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/moderator/join","method":"post"},{"specification":"Create a login endpoint for moderator accounts that validates credentials against Actors.econ_discuss_users (email, password_hash, email_verified, mfa_enabled, mfa_secret?, mfa_recovery_codes?) and verifies that a role assignment exists in Actors.econ_discuss_moderators (user_id, enforced_2fa). When mfa is required (either mfa_enabled or enforced_2fa policy), a second factor (e.g., TOTP using mfa_secret) must be provided and validated. On success, issue JWT access and refresh tokens and return an authorized session DTO. Primary Prisma tables: econ_discuss_users and econ_discuss_moderators.","authorizationType":"login","description":"Purpose and overview:\nThis endpoint authenticates a moderator by verifying econ_discuss_users.email and password_hash, then confirming moderator scope via econ_discuss_moderators for the same user. It creates a new session and returns tokens in a single response.\n\nImplementation details:\nCredentials are matched to econ_discuss_users.email and checked against password_hash. If email verification gating is in effect, econ_discuss_users.email_verified can be consulted to restrict elevated actions. The endpoint also checks for a corresponding econ_discuss_moderators row and evaluates enforced_2fa together with econ_discuss_users.mfa_enabled to determine whether a one-time code is required and validate it against mfa_secret as applicable.\n\nRole-specific integration and context:\nModerator access is derived from the presence of a role record in econ_discuss_moderators tied to the same econ_discuss_users.id. Authentication succeeds only when both identity and role conditions pass.\n\nSecurity considerations:\nOn success, return short-lived access and longer-lived refresh tokens. Apply rotation and replay protections per policy. Support recovery codes stored in econ_discuss_users.mfa_recovery_codes for emergency access flows when allowed by policy. Consider lockout/cooldown on repeated failures without disclosing whether email exists.\n\nRelated operations and workflow:\nUse /auth/moderator/join to register new accounts and /auth/moderator/refresh to renew expired access tokens. Post-login flows may prompt enabling 2FA if econ_discuss_moderators.enforced_2fa is true and econ_discuss_users.mfa_enabled is false.\n\nError handling expectations:\nRespond with a generic 401 for invalid credentials. Respond with 403 if role assignment in econ_discuss_moderators is missing or lacks required 2FA conditions. Enforce rate limits and return 429 when thresholds are exceeded.","summary":"Authenticate a moderator using econ_discuss_users and confirm role via econ_discuss_moderators; return an authorized session.","parameters":[],"requestBody":{"description":"Login payload including email, password, and, when required, a second-factor code.","typeName":"IEconDiscussModerator.ILogin"},"responseBody":{"description":"Authorized moderator session with rotated access/refresh tokens and principal context.","typeName":"IEconDiscussModerator.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/moderator/login","method":"post"},{"specification":"Create a token refresh endpoint for moderator accounts. This endpoint accepts a valid refresh token from an existing session and, upon verification, issues a new access token (and rotated refresh token as applicable). It revalidates the user’s role by checking Actors.econ_discuss_moderators for the linked econ_discuss_users.id to ensure the account still has moderator scope. Primary Prisma tables: econ_discuss_users (identity fields used for claims) and econ_discuss_moderators (role enforcement).","authorizationType":"refresh","description":"Purpose and overview:\nThis endpoint exchanges a valid refresh token for a new access token for a moderator session. It ensures the identity in econ_discuss_users is still active and that the moderator role assignment in econ_discuss_moderators remains present.\n\nImplementation details:\nUpon receiving the refresh token, validate signature, expiration, and rotation rules. Resolve the associated econ_discuss_users.id from claims, confirm role assignment by querying econ_discuss_moderators using the same user_id, and then mint a new short-lived access token and rotated refresh token.\n\nRole-specific integration and context:\nBecause moderator privileges can change over time, the operation re-checks econ_discuss_moderators on each refresh to prevent continued elevated access after role removal.\n\nSecurity considerations:\nImplement token rotation to mitigate theft and revoke prior tokens upon use. Respect enforced_2fa policies established via econ_discuss_moderators and any mfa_enabled state recorded on econ_discuss_users; when policy requires, step-up authentication should be enforced before granting elevated actions.\n\nRelated operations and workflow:\nThis operation complements /auth/moderator/login for initial sessions and /auth/moderator/join for new registrations. Downstream APIs should rely on the access token claims derived from econ_discuss_users.\n\nError handling expectations:\nReturn 401 if the refresh token is invalid, expired, or revoked. Return 403 if moderator role assignment no longer exists. Apply 429 on excessive attempts and include generic error messaging to avoid enumerating account details.","summary":"Refresh a moderator session by validating refresh token and role in econ_discuss_moderators, issuing new tokens.","parameters":[],"requestBody":{"description":"Refresh payload containing a valid refresh token requiring rotation upon success.","typeName":"IEconDiscussModerator.IRefresh"},"responseBody":{"description":"Authorized moderator session with a new access token and rotated refresh token.","typeName":"IEconDiscussModerator.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/moderator/refresh","method":"post"},{"specification":"Create a registration endpoint for platform administrators. This operation will create a base identity record in Actors.econ_discuss_users (id, email, password_hash, display_name, timezone, locale, email_verified=false by default, mfa_enabled=false, mfa_secret=null, mfa_recovery_codes=null, created_at, updated_at, deleted_at=null). It must also create a linked role assignment in Actors.econ_discuss_admins (user_id references econ_discuss_users.id, superuser boolean per policy, enforced_2fa boolean). The endpoint issues initial JWT tokens on success. Request body will include email and password plus optional profile preferences; response returns authorized token payload. No path parameters are required. This endpoint concerns Prisma tables econ_discuss_users and econ_discuss_admins exclusively for account creation and role linkage.","authorizationType":"join","description":"This endpoint registers a new administrator account and immediately issues JWT tokens upon successful creation. It persists the base identity into the Actors.econ_discuss_users table, specifically setting fields such as email (unique identifier), password_hash (application-generated from the submitted password), display_name, optional avatar_uri, timezone, and locale. As per schema comments, email_verified should start as false until verification completes, mfa_enabled should be false, with mfa_secret and mfa_recovery_codes null.\n\nAfter creating the user, the operation inserts a corresponding role assignment row into Actors.econ_discuss_admins using the new econ_discuss_users.id as the user_id. This role record persists administrative capabilities and policy flags including superuser (full platform administration) and enforced_2fa (policy-relevant enforcement for administrators), both documented in the Prisma schema.\n\nThe endpoint is designed with security considerations in mind. Passwords are never stored in plaintext and map to econ_discuss_users.password_hash. MFA is not enabled at join time; admins can subsequently enable TOTP using dedicated MFA endpoints tied to econ_discuss_users.mfa_enabled, mfa_secret, and mfa_recovery_codes. Token issuance occurs only after both econ_discuss_users and econ_discuss_admins are persisted.\n\nFrom a relational perspective, econ_discuss_admins has a unique constraint on user_id, and a strict one-to-one relationship with econ_discuss_users, ensuring a single administrator assignment per user. The login and refresh flows later rely on econ_discuss_users.email and password_hash for credential validation and on the presence of an econ_discuss_admins record to assert admin scope.\n\nValidation rules align with the schema characteristics: email must be unique; display_name is required for the identity surface; timezone is an IANA identifier (e.g., Asia/Seoul) as stored in econ_discuss_users.timezone; and locale aligns with econ_discuss_users.locale. The provider should also initialize email_verified=false with a follow-up verification flow using the dedicated email endpoints.\n\nRelated operations include POST /auth/admin/login for credential authentication, POST /auth/admin/refresh for token rotation, and POST /auth/admin/mfa/* endpoints for enabling TOTP-based MFA informed by econ_discuss_users.mfa_secret and mfa_recovery_codes. Email verification flows are available via /auth/admin/email/* and toggle econ_discuss_users.email_verified once completed.","summary":"Register a new admin by creating econ_discuss_users and econ_discuss_admins and return tokens.","parameters":[],"requestBody":{"description":"Admin registration payload including email, password, display name, and optional preferences.","typeName":"IEconDiscussAdmin.ICreate"},"responseBody":{"description":"Authorized session result for the newly joined admin (access/refresh tokens and admin claims).","typeName":"IEconDiscussAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"Create an administrator login endpoint that validates credentials against Actors.econ_discuss_users (email and password_hash) and confirms a corresponding Actors.econ_discuss_admins record exists to grant admin scope. On success, issue JWT tokens and return an authorized payload. This does not mutate database schema other than optional last-login telemetry handled elsewhere.","authorizationType":"login","description":"This operation authenticates an administrator using the econ_discuss_users table fields email and password_hash, ensuring that plaintext credentials are hashed and compared securely. It also verifies that a role assignment exists in econ_discuss_admins (unique per user_id) to confirm the admin scope documented by the schema.\n\nIf the user’s econ_discuss_users.email_verified is false, business policy may restrict certain actions until verification completes; the table column is designed to signal verification state. If econ_discuss_admins.enforced_2fa is true, the service SHOULD require a successful second factor, leveraging econ_discuss_users.mfa_enabled, mfa_secret, and potential TOTP codes before issuing final tokens.\n\nOn success, the endpoint issues JWT tokens and returns an authorized payload typed as IEconDiscussAdmin.IAuthorized. The payload may include role and permission claims derived from the existence of econ_discuss_admins, and optional context like timezone (econ_discuss_users.timezone) and locale (econ_discuss_users.locale) for client experience.\n\nThis endpoint aligns with schema relationships: econ_discuss_admins references econ_discuss_users via user_id under a one-to-one unique constraint. It does not create or modify role records; it only validates their presence. Passwords are never stored or returned, and password_hash remains confidential within econ_discuss_users.\n\nUse this in conjunction with the registration endpoint (/auth/admin/join), token refresh (/auth/admin/refresh), and the MFA management endpoints that directly reflect econ_discuss_users.mfa_* fields. Error handling should not disclose whether the email exists, to avoid user enumeration.","summary":"Authenticate an admin using econ_discuss_users and econ_discuss_admins and issue tokens.","parameters":[],"requestBody":{"description":"Admin login credentials and optional MFA code when required by policy.","typeName":"IEconDiscussAdmin.ILogin"},"responseBody":{"description":"Authorized session result for the authenticated admin (access/refresh tokens and admin claims).","typeName":"IEconDiscussAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"Create a token refresh endpoint for administrators that rotates JWT tokens upon receiving a valid refresh token. It reads identity and role claims from existing session state and confirms that the user still has an econ_discuss_admins record linked to econ_discuss_users. No DB persistence is strictly required beyond standard token rotation concerns.","authorizationType":"refresh","description":"This endpoint accepts a valid refresh token and returns a new access/refresh token pair. Before issuing new tokens, the service validates that the subject corresponds to an existing econ_discuss_users row and that a linked econ_discuss_admins record still exists, preserving admin scope. If the admin role record has been removed, the operation must decline refresh.\n\nThe Actors.econ_discuss_users table provides core identity fields that can be embedded as claims (e.g., userId from id, email, timezone, and locale), while econ_discuss_admins confirms role-based privileges and can drive claims such as superuser and enforced_2fa from its columns. The refresh flow does not modify any of these tables directly.\n\nSecurity-wise, the endpoint supports rotation-on-use semantics. If policy requires MFA enforcement (econ_discuss_admins.enforced_2fa) and the account has econ_discuss_users.mfa_enabled=true, ensure that the session has satisfied recent 2FA checks before token renewal.\n\nThis endpoint should be paired with /auth/admin/login and /auth/admin/join for initial issuance, and with MFA and email verification endpoints for account hardening. Failures should be generic to avoid leaking token validity details.","summary":"Refresh administrator JWT tokens after validating econ_discuss_users and econ_discuss_admins state.","parameters":[],"requestBody":{"description":"Refresh token request payload (rotation-on-use).","typeName":"IEconDiscussAdmin.IRefresh"},"responseBody":{"description":"Authorized session result with rotated tokens and admin claims.","typeName":"IEconDiscussAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"Create an endpoint to resend email verification to an admin account identified by email. It uses Actors.econ_discuss_users.email and toggles behavior based on econ_discuss_users.email_verified. It does not directly write to the DB except for any provider-side audit not modeled here.","authorizationType":null,"description":"This operation resends a verification message to the specified administrator email. It references econ_discuss_users.email to locate the account and checks econ_discuss_users.email_verified to avoid unnecessary dispatch when already verified. The schema comment for econ_discuss_users clarifies that email is the unique login identifier and email_verified tracks ownership confirmation.\n\nBecause administrators are created via /auth/admin/join and later authenticate with /auth/admin/login, email verification ensures posting sensitive actions (per business policy) occurs only after ownership confirmation. No changes are made to econ_discuss_admins; the role assignment remains intact.\n\nSecurity considerations: the response should avoid disclosing whether an email exists. Rate limiting and lockouts (business policy) should be applied to protect this endpoint. The operation is authorizationType=null because it is not join/login/refresh.\n\nThe endpoint interacts conceptually with login and MFA flows; once email ownership is confirmed, econ_discuss_users.email_verified can be flipped by the verification-finalization endpoint. Error handling must remain neutral to prevent user enumeration.","summary":"Resend admin email verification leveraging econ_discuss_users.email and email_verified.","parameters":[],"requestBody":{"description":"Resend email verification to the provided admin email address.","typeName":"IEconDiscussAdmin.IEmailResendRequest"},"responseBody":{"description":"Acknowledgement or metadata for the verification dispatch.","typeName":"IEconDiscussAdmin.ISecurityEvent"},"authorizationRole":null,"name":"resendVerificationEmail","prerequisites":[],"path":"/auth/admin/email/resend","method":"post"},{"specification":"Create an endpoint that verifies an email verification token for an admin account and marks Actors.econ_discuss_users.email_verified=true upon success. No path parameters are required. The endpoint may optionally issue fresh tokens after verification.","authorizationType":null,"description":"This operation finalizes email verification for an administrator. It processes a verification token (delivered out-of-band) and, on success, sets econ_discuss_users.email_verified=true. The econ_discuss_users schema explicitly includes the email_verified Boolean for this purpose. The operation does not modify econ_discuss_admins; the role assignment is unaffected.\n\nSecurity considerations include token validity windows, single-use semantics, and neutral responses on failure to prevent enumeration. Upon successful verification, implementations may choose to return new tokens if the user is in-session, but token management remains a business decision and does not alter the schema.\n\nThis endpoint is closely related to /auth/admin/email/resend, /auth/admin/join, and /auth/admin/login. MFA and other security settings (e.g., econ_discuss_users.mfa_enabled) are independent of email verification.\n\nThe response conveys a security event acknowledgement rather than the full authorization payload, since the authorization state may already be active in the client session.","summary":"Verify admin email by toggling econ_discuss_users.email_verified to true using a token.","parameters":[],"requestBody":{"description":"Verification token payload to confirm email ownership.","typeName":"IEconDiscussAdmin.IEmailVerifyRequest"},"responseBody":{"description":"Acknowledgement of successful email verification.","typeName":"IEconDiscussAdmin.ISecurityEvent"},"authorizationRole":null,"name":"verifyEmail","prerequisites":[{"endpoint":{"path":"/auth/admin/email/resend","method":"post"},"description":"Issue a verification token before attempting email verification. The resend endpoint generates and dispatches a valid token tied to the admin’s email; without a fresh, valid token, the verify operation will fail due to invalid or expired token conditions."}],"path":"/auth/admin/email/verify","method":"post"},{"specification":"Create an endpoint for an authenticated administrator to change their password. It validates current password against Actors.econ_discuss_users.password_hash and updates the hash to a new value. It does not alter econ_discuss_admins. This is a security operation bound to the admin role.","authorizationType":null,"description":"This operation enables a logged-in administrator to change their password. It uses econ_discuss_users.password_hash to verify the current password and persists a new password_hash generated from the provided new password, leaving other identity fields (display_name, timezone, locale) unchanged. The econ_discuss_admins role assignment remains unaffected.\n\nSecurity considerations include strong password policies and invalidation of existing sessions if required by policy. The endpoint must avoid exposing whether password mismatches occurred specifically. Rate limiting should protect against brute-force attempts.\n\nBecause this is a modification of an existing record, the request follows an update pattern and is restricted by authorizationRole=\"admin\". No path parameters are used.\n\nThis operation is typically used in conjunction with login/refresh and MFA management endpoints to maintain account hygiene consistent with the schema’s password_hash field.","summary":"Change admin password by updating econ_discuss_users.password_hash.","parameters":[],"requestBody":{"description":"Payload with current and new password for password rotation.","typeName":"IEconDiscussAdmin.IChangePassword"},"responseBody":{"description":"Security event acknowledgement for password change.","typeName":"IEconDiscussAdmin.ISecurityEvent"},"authorizationRole":"admin","name":"changePassword","prerequisites":[],"path":"/auth/admin/password","method":"put"},{"specification":"Create an endpoint to initiate a password reset flow for admin accounts by email. It references Actors.econ_discuss_users.email and does not modify tables immediately beyond creating an out-of-band reset token (not modeled in schema).","authorizationType":null,"description":"This endpoint starts a password reset flow for an administrator by accepting an email address corresponding to econ_discuss_users.email. It does not directly mutate econ_discuss_users or econ_discuss_admins in the Prisma schema; instead, it triggers an out-of-band token delivery (not modeled).\n\nSecurity considerations include neutral responses to prevent enumeration, rate limiting, and token expiration. The endpoint pairs with the confirm operation that will ultimately update econ_discuss_users.password_hash.\n\nThis is an unauthenticated security action (authorizationType=null). It exists alongside join/login, refresh, and MFA endpoints as part of the account security toolkit the schema supports through password_hash.","summary":"Initiate admin password reset using econ_discuss_users.email.","parameters":[],"requestBody":{"description":"Email payload to request a password reset link/token.","typeName":"IEconDiscussAdmin.IPasswordResetRequest"},"responseBody":{"description":"Acknowledgement of password reset request dispatch.","typeName":"IEconDiscussAdmin.ISecurityEvent"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/admin/password/reset/request","method":"post"},{"specification":"Create an endpoint to confirm an admin password reset using a token and set a new econ_discuss_users.password_hash. The token verification and issuance are out-of-band; this endpoint merely performs the update on success.","authorizationType":null,"description":"This operation completes the password reset by accepting a reset token and new password. On success, it updates econ_discuss_users.password_hash for the identified account. The econ_discuss_admins role assignment is unchanged by this flow.\n\nSecurity considerations include single-use tokens, strict expiration, and neutral error messaging. It should also consider invalidating active refresh tokens where applicable (implementation detail not represented in Prisma schema).\n\nThis endpoint complements the initiation endpoint and aligns with schema fields by updating only the password_hash column.","summary":"Confirm admin password reset by updating econ_discuss_users.password_hash.","parameters":[],"requestBody":{"description":"Token and new password to finalize password reset.","typeName":"IEconDiscussAdmin.IPasswordResetConfirm"},"responseBody":{"description":"Security event acknowledgement for password reset completion.","typeName":"IEconDiscussAdmin.ISecurityEvent"},"authorizationRole":null,"name":"confirmPasswordReset","prerequisites":[{"endpoint":{"path":"/auth/admin/password/reset/request","method":"post"},"description":"A password reset token must be issued for the target admin account before confirmation. This request generates the one-time token that the confirm endpoint consumes; without it, token validation will fail and the password cannot be updated."}],"path":"/auth/admin/password/reset/confirm","method":"post"},{"specification":"Create an endpoint for MFA enrollment (TOTP) for admins. It allocates and returns a shared secret (or otpauth URI) and sets up econ_discuss_users.mfa_secret server-side. It does not immediately enable MFA until a code is verified; mfa_enabled remains false until verification. Recovery codes may be generated and stored in econ_discuss_users.mfa_recovery_codes.","authorizationType":null,"description":"This endpoint begins MFA enrollment for an authenticated admin. According to Actors.econ_discuss_users, MFA-related fields include mfa_enabled (Boolean), mfa_secret (encrypted/managed), and mfa_recovery_codes (hashed/encrypted). The enrollment step securely generates mfa_secret and provides client bootstrapping data (e.g., an otpauth URI) without enabling MFA yet (mfa_enabled remains false until verification).\n\nThis operation does not modify econ_discuss_admins, though admins may have enforced_2fa=true in econ_discuss_admins requiring completion of this flow. The field enforced_2fa in econ_discuss_admins is policy enforcement metadata; the secret and enablement flags live in econ_discuss_users.\n\nSecurity considerations include never returning raw recovery codes after initial generation except through dedicated endpoints and ensuring the secret is not stored in plaintext. The response type communicates setup details necessary for the second step.\n\nFollow-up verification is required via /auth/admin/mfa/verify, which will flip mfa_enabled to true upon successful code validation against mfa_secret.","summary":"Start admin MFA enrollment using econ_discuss_users.mfa_secret and prepare recovery codes.","parameters":[],"requestBody":{"description":"Request to begin MFA setup (e.g., TOTP).","typeName":"IEconDiscussAdmin.IMfaSetupRequest"},"responseBody":{"description":"MFA setup details such as otpauth URI or masked secret.","typeName":"IEconDiscussAdmin.IMfaSetup"},"authorizationRole":"admin","name":"startMfaEnrollment","prerequisites":[],"path":"/auth/admin/mfa/setup","method":"post"},{"specification":"Create an endpoint to verify TOTP and enable MFA for admins. It reads econ_discuss_users.mfa_secret to validate the submitted code and sets econ_discuss_users.mfa_enabled=true upon success. It may also persist new econ_discuss_users.mfa_recovery_codes if provided by policy.","authorizationType":null,"description":"This operation completes MFA enrollment by validating a submitted TOTP code against the previously created econ_discuss_users.mfa_secret. On success, it updates econ_discuss_users.mfa_enabled=true. The econ_discuss_admins record remains unchanged, but its enforced_2fa flag should now be satisfiable by the user’s MFA state.\n\nSecurity considerations include limited retries and neutral error messages. The endpoint must ensure the setup step has executed (mfa_secret present) before verification and should not expose secrets.\n\nThis endpoint is used with the setup endpoint and is required for admins with enforced_2fa in econ_discuss_admins. It reflects the MFA capabilities embedded in the econ_discuss_users schema.","summary":"Verify admin TOTP and set econ_discuss_users.mfa_enabled=true.","parameters":[],"requestBody":{"description":"One-time code verification payload for MFA enablement.","typeName":"IEconDiscussAdmin.IMfaVerifyRequest"},"responseBody":{"description":"Security event acknowledgement indicating MFA is now enabled.","typeName":"IEconDiscussAdmin.ISecurityEvent"},"authorizationRole":"admin","name":"verifyMfa","prerequisites":[{"endpoint":{"path":"/auth/admin/mfa/setup","method":"post"},"description":"MFA setup must create and persist the TOTP secret (mfa_secret) before verification. The verify step validates the submitted code against this secret; without setup, verification cannot succeed."}],"path":"/auth/admin/mfa/verify","method":"post"},{"specification":"Create an endpoint to disable MFA for admins. It validates a code (or appropriate proof) and sets econ_discuss_users.mfa_enabled=false, clearing or rotating econ_discuss_users.mfa_secret and econ_discuss_users.mfa_recovery_codes per policy.","authorizationType":null,"description":"This operation disables MFA on an administrator account. It updates econ_discuss_users.mfa_enabled=false and, depending on policy, clears or rotates mfa_secret and mfa_recovery_codes. The econ_discuss_admins row is not directly modified; however, if enforced_2fa is true, this operation may be prevented by policy.\n\nSecurity considerations include strong re-authentication or code verification to authorize disabling MFA and audit logging. Recovery codes should be invalidated during this process to prevent reuse.\n\nUsed alongside setup and verification endpoints, this completes the MFA lifecycle reflected by the econ_discuss_users schema fields.","summary":"Disable admin MFA by updating econ_discuss_users.mfa_enabled and related secrets.","parameters":[],"requestBody":{"description":"Confirmation payload (e.g., TOTP code or recovery code) to disable MFA.","typeName":"IEconDiscussAdmin.IMfaDisableRequest"},"responseBody":{"description":"Security event acknowledgement for MFA disablement.","typeName":"IEconDiscussAdmin.ISecurityEvent"},"authorizationRole":"admin","name":"disableMfa","prerequisites":[{"endpoint":{"path":"/auth/admin/mfa/verify","method":"post"},"description":"MFA must be enabled prior to being disabled. The verify operation enables MFA (mfa_enabled=true); attempting to disable when not enabled would be invalid or a no-op."}],"path":"/auth/admin/mfa","method":"delete"},{"specification":"Create an endpoint to regenerate MFA recovery codes for admins. It securely generates a new set, stores hashed/encrypted values in econ_discuss_users.mfa_recovery_codes, and returns the fresh plaintext codes once. mfa_enabled remains unchanged.","authorizationType":null,"description":"This operation regenerates recovery codes for an administrator with MFA enabled. It replaces econ_discuss_users.mfa_recovery_codes with a newly generated set (stored securely) and returns the plaintext codes once for the user to store offline. The econ_discuss_users.mfa_enabled Boolean is not changed.\n\nSecurity considerations include strict authentication, rate limits, and one-time display of the new codes. The econ_discuss_admins role assignment is unaffected; enforced_2fa continues to apply.\n\nThis endpoint should be used after MFA is enabled to maintain account safety in line with the schema’s mfa_recovery_codes column.","summary":"Regenerate admin MFA recovery codes and update econ_discuss_users.mfa_recovery_codes.","parameters":[],"requestBody":{"description":"Confirmation payload for regeneration (e.g., TOTP code).","typeName":"IEconDiscussAdmin.IMfaRegenerateRequest"},"responseBody":{"description":"Newly generated recovery codes (displayed once).","typeName":"IEconDiscussAdmin.IMfaRecoveryCodes"},"authorizationRole":"admin","name":"regenerateMfaRecoveryCodes","prerequisites":[{"endpoint":{"path":"/auth/admin/mfa/verify","method":"post"},"description":"MFA must be enabled before recovery codes can be regenerated. This verification endpoint validates a one-time code and flips econ_discuss_users.mfa_enabled=true; without this state, regeneration is not permitted."}],"path":"/auth/admin/mfa/recovery-codes/regen","method":"post"},{"specification":"Retrieve a single user account record from the Actors schema, primarily the econ_discuss_users table, by its UUID. The endpoint returns a consolidated user view suitable for public profile display, drawing core identity from econ_discuss_users (id, display_name, avatar_uri, timezone, locale, created_at/updated_at) and may include derived flags such as email_verified and mfa_enabled for authorization-aware clients (without revealing secrets). This operation does not expose confidential fields (e.g., password_hash, mfa_secret, mfa_recovery_codes) or private contact data. It references related tables only for read-time enrichment if needed (e.g., role assignments in econ_discuss_members or econ_discuss_verified_experts) but its primary source remains econ_discuss_users.","authorizationType":null,"authorizationRole":null,"description":"This operation reads a single user’s public-facing profile details from the econ_discuss_users table using the id path parameter. The Prisma schema documents econ_discuss_users with fields like display_name, avatar_uri (optional URI for the avatar), timezone (IANA identifier such as Asia/Seoul), locale (preferred locale like en-US), email_verified, mfa_enabled, and timestamps created_at/updated_at. Sensitive columns including password_hash, mfa_secret, and mfa_recovery_codes are never included in the response payload. The record is considered active when deleted_at is null; implementations should not return records where deleted_at is set.\n\nSecurity considerations: This is a public read endpoint and typically does not require authentication for viewing public profile information. Never include confidential values. If the application wants to indicate whether a user is an expert for discovery, it can derive an \"isExpertVerified\" flag by checking the presence of a row in econ_discuss_verified_experts for the same user_id; the underlying verification artifacts are out of scope for this response. Authorization logic must ensure private data from related tables (like email) is not exposed.\n\nDatabase relationships: While the primary data comes from econ_discuss_users, related tables like econ_discuss_user_profiles (bio, affiliation, website, location) and role assignments (econ_discuss_members, econ_discuss_verified_experts, econ_discuss_moderators, econ_discuss_admins) can inform computed fields or separate resource calls. Any enrichment should respect that econ_discuss_user_profiles is optional (1:1, nullable via optional relation).\n\nValidation and behavior: The id must be a UUID corresponding to econ_discuss_users.id. If no active record is found (deleted_at not null or not present), return a not found condition. Implementers should normalize response timestamps to ISO 8601 strings. Related operations include GET /users/{userId}/profile for extended profile content and follower listing endpoints for social graph views.\n\nError handling: Return 404 when the user cannot be found or is inactive. Avoid leaking whether an email exists on the platform. Rate limiting is recommended for abusive enumeration attempts.","summary":"Get a single user by ID from econ_discuss_users (Actors schema).","parameters":[{"name":"userId","description":"Target user’s unique identifier (econ_discuss_users.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User core entity assembled from econ_discuss_users suitable for public display.","typeName":"IEconDiscussUser"},"name":"at","path":"/econDiscuss/users/{userId}","method":"get","prerequisites":[]},{"specification":"Retrieve the extended profile resource for a user, backed by the econ_discuss_user_profiles table (Actors schema). Returns profile attributes such as bio, affiliation, website, and location for the given owner user_id (referencing econ_discuss_users.id). As econ_discuss_user_profiles is optional and 1:1, the API either returns the profile object when present or an empty/absent profile representation as per response schema conventions.","authorizationType":null,"authorizationRole":null,"description":"This operation returns a user’s extended profile from econ_discuss_user_profiles using the owner’s UUID in the path. The Prisma schema documents fields including bio (short biography), affiliation (current organization), website (public URI), and location (freeform string), as well as created_at and updated_at timestamps. A profile exists at most once per user (unique user_id). Implementations should only serve profiles where deleted_at is null.\n\nSecurity considerations: This is typically a public read endpoint. Ensure that only public profile attributes are returned. Private account attributes from econ_discuss_users such as email, password_hash, mfa_secret, or recovery codes must never be exposed here. The application may pair this endpoint with the user core endpoint to compose a complete public profile view.\n\nDatabase relationships: The profile is owned by econ_discuss_users via user_id. If a profile does not exist for a given user, return a 404 or a representation consistent with your API’s not-found policy. This resource is distinct from role assignment tables like econ_discuss_members or econ_discuss_verified_experts, which are not part of the profile payload.\n\nValidation and behavior: The userId must be a valid UUID referencing econ_discuss_users.id. The provider should query econ_discuss_user_profiles by user_id. If no row exists or if the profile is inactive (deleted_at not null), respond with not found. Timestamps should be returned as ISO 8601 strings.\n\nRelated operations include GET /users/{userId} for core identity and the followers endpoints for social graph views.\n\nError handling: Return 404 when no active profile is found. Apply rate limiting to reduce enumeration risks.","summary":"Get a user’s extended profile from econ_discuss_user_profiles (Actors schema).","parameters":[{"name":"userId","description":"Owner user’s unique identifier (econ_discuss_users.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Extended profile object stored in econ_discuss_user_profiles.","typeName":"IEconDiscussUserProfile"},"name":"at","path":"/econDiscuss/users/{userId}/profile","method":"get","prerequisites":[]},{"specification":"List and search followers for a given user using the econ_discuss_user_follows table (Actors schema). This PATCH-based search endpoint supports pagination, optional filtering, and sorting via a structured request body (IEconDiscussUserFollow.IRequest). It returns a paginated collection of follower user summaries, where each row in econ_discuss_user_follows has followee_user_id equal to the path userId and deleted_at is null.","authorizationType":null,"authorizationRole":null,"description":"This operation enumerates followers of a target user leveraging econ_discuss_user_follows, which records follower_user_id, followee_user_id, created_at, and deleted_at. The request body (IEconDiscussUserFollow.IRequest) supports pagination (page, pageSize) and may include filters like date windows on created_at or sorting by recency. Only active relationships (where deleted_at is null) must be included.\n\nSecurity considerations: Follower lists are generally public. However, implementations should enforce privacy policies if needed (e.g., restricted accounts). Do not expose private user attributes; each follower is returned as a summary of econ_discuss_users suitable for public consumption.\n\nDatabase relationships: The endpoint identifies followers by selecting records with followee_user_id = {userId}, then joining to econ_discuss_users on follower_user_id to build summaries. Ensure that user summaries exclude accounts with non-null deleted_at and avoid revealing confidential fields from econ_discuss_users.\n\nValidation and behavior: The userId path parameter is a UUID referencing econ_discuss_users.id. The request body carries pagination and optional filters; when absent fields are used, default server-side limits should apply. The response wraps results in a pagination container IPageIEconDiscussUser.ISummary.\n\nRelated operations: GET /users/{userId}/followers provides a simple listing without a request body; both return followers but this PATCH variant enables advanced searching and sorting.\n\nError handling: Return 404 when the target user does not exist or is inactive. Return 200 with an empty page when no followers match. Validate page bounds, and enforce reasonable pageSize limits to protect performance.","summary":"Search followers of a user from econ_discuss_user_follows (Actors schema).","parameters":[{"name":"userId","description":"Followee user’s identifier whose followers are being listed (econ_discuss_users.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination, filters, and sorting for follower search on econ_discuss_user_follows.","typeName":"IEconDiscussUserFollow.IRequest"},"responseBody":{"description":"Paginated follower user summaries for the given followee.","typeName":"IPageIEconDiscussUser.ISummary"},"name":"search","path":"/econDiscuss/users/{userId}/followers","method":"patch","prerequisites":[]},{"specification":"Retrieve a paginated list of followers for a given user using econ_discuss_user_follows with default parameters via a simple GET request (no request body). Intended for straightforward listing scenarios, it returns follower user summaries in a paginated container; advanced filtering should use the PATCH variant.","authorizationType":null,"authorizationRole":null,"description":"This operation lists followers for the user identified by userId by reading from econ_discuss_user_follows where followee_user_id matches and deleted_at is null. It then joins follower_user_id to econ_discuss_users to render public-friendly user summaries. The econ_discuss_user_follows table includes created_at for ordering and deleted_at for inactive relationships.\n\nSecurity considerations: The list is typically public; however, privacy constraints may apply per platform policy. Never return private attributes like email or secrets from econ_discuss_users.\n\nDatabase relationships: Followers are sourced from econ_discuss_user_follows (follower_user_id → econ_discuss_users.id). Only include active users (econ_discuss_users.deleted_at is null) and active relationships (deleted_at is null).\n\nValidation and behavior: The userId path parameter must be a UUID referencing econ_discuss_users.id. As a GET without a request body, pagination should be handled by default server settings or query-level defaults (the response still uses the standard paginated container type). For complex searches, clients should use PATCH /users/{userId}/followers.\n\nRelated operations: PATCH /users/{userId}/followers provides advanced filtering; GET /users/{userId} and GET /users/{userId}/profile provide identity and profile information that can be combined with this list in UIs.\n\nError handling: Return 404 when the target user is not found or inactive. Otherwise return 200 with an empty page when there are no followers.","summary":"List followers of a user from econ_discuss_user_follows (Actors schema).","parameters":[{"name":"userId","description":"Followee user’s identifier whose followers are being listed (econ_discuss_users.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated follower user summaries for the given followee.","typeName":"IPageIEconDiscussUser.ISummary"},"name":"index","path":"/econDiscuss/users/{userId}/followers","method":"get","prerequisites":[]},{"specification":"List the accounts that a given user is following, backed by the econ_discuss_user_follows table joined to econ_discuss_users for followee profiles. The endpoint reads rows where follower_user_id equals the provided {userId} and returns a paginated list of user summaries. Pagination and simple retrieval are handled here as a basic list; advanced filtering/sorting should use the PATCH variant. This operation does not require authentication for viewing public relationships and does not modify data. DTOs use the EconDiscuss service prefix and return a paginated collection of IEconDiscussUser.ISummary.","path":"/econDiscuss/users/{userId}/following","method":"get","summary":"List followees for a user using econ_discuss_user_follows (public read)","description":"Retrieve the list of followee accounts for the specified user by reading from the econ_discuss_user_follows table, which “stores user-to-user follow relationships forming the social graph” and enforces idempotency with a unique (follower_user_id, followee_user_id) constraint. Each returned item represents a followee referenced by followee_user_id and is resolved against econ_discuss_users to build a user summary for display.\n\nAccording to the Prisma schema, econ_discuss_user_follows contains: id (PK), follower_user_id, followee_user_id, created_at, and deleted_at for lifecycle control. The deleted_at column indicates relationship retirement while keeping an audit trail. Only active links (deleted_at is null) are included. The econ_discuss_users model provides display_name, avatar_uri, locale, timezone, and other profile-related fields used to construct summaries, while respecting that some details (like email) are private.\n\nSecurity and privacy: this read-only endpoint is intended for public viewing of social graph edges, consistent with business rules that follower/following counts and lists are typically visible unless policy dictates otherwise. No authentication is required for read access. Rate limits may still apply.\n\nRelated operations: use PATCH /econDiscuss/users/{userId}/following for advanced filtering or sorting when needed; use POST /econDiscuss/member/users/{userId}/follow and DELETE /econDiscuss/member/users/{userId}/follow for creating and retiring follow relationships, which operate on the same econ_discuss_user_follows table.","parameters":[{"name":"userId","description":"Identifier of the user whose followees to list","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of user summaries whom the specified user follows","typeName":"IPageIEconDiscussUser.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[]},{"specification":"Search and paginate through the accounts a given user follows using the econ_discuss_user_follows table joined to econ_discuss_users. This PATCH variant supports complex queries (pagination, optional search/sort criteria) in the request body, returning user summaries in a paginated IEconDiscussUser list. It filters by follower_user_id = {userId} and deleted_at is null.","path":"/econDiscuss/users/{userId}/following","method":"patch","summary":"Advanced search of followees for a user via econ_discuss_user_follows (paginated)","description":"This operation provides advanced, request-body-driven retrieval of followees for the specified user. It reads from econ_discuss_user_follows — described in the schema as the table for user-to-user follow relationships with a unique (follower_user_id, followee_user_id) constraint and a deleted_at column for logical retirement. Only active relationships (deleted_at is null) are considered, and the join to econ_discuss_users supplies display fields for summaries.\n\nUse this endpoint when you need explicit pagination objects, free-text filtering on followee display_name (leveraging the GIN trigram index on econ_discuss_users.display_name), or custom sort orders tied to created_at on econ_discuss_user_follows. The request body follows the EconDiscuss prefixed DTO convention and should include paging and optional search/sort keys appropriate for list endpoints.\n\nSecurity: this is a read-only operation and typically public. Business logic may still apply visibility policies or rate limits. It pairs with the simpler GET variant for default listings and with POST/DELETE /econDiscuss/member/users/{userId}/follow for write operations.","parameters":[{"name":"userId","description":"Identifier of the user whose followees to search","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination, search, and sorting parameters for listing a user’s followees","typeName":"IEconDiscussUser.IRequest"},"responseBody":{"description":"Paginated followee summaries matching the search criteria","typeName":"IPageIEconDiscussUser.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"search","prerequisites":[]},{"specification":"Create (or reinstate) a follow relationship from the authenticated user to the target user specified by {userId}, operating on the econ_discuss_user_follows table. It respects the unique constraint on (follower_user_id, followee_user_id) and the deleted_at lifecycle, performing an insert or clearing deleted_at to reactivate the link. No request body is required; returns no content on success.","path":"/econDiscuss/member/users/{userId}/follow","method":"post","summary":"Create or reinstate a follow edge in econ_discuss_user_follows (auth required)","description":"This operation establishes a follow edge in econ_discuss_user_follows from the authenticated account (follower_user_id) to the target account identified by the {userId} path parameter (followee_user_id). The schema documents econ_discuss_user_follows as the social graph table with primary key id, created_at timestamps, and a deleted_at timestamp to retire links while preserving auditability. A unique (follower_user_id, followee_user_id) constraint enforces idempotency.\n\nProvider logic typically inserts a new row when none exists, or, if a matching row exists with deleted_at set, clears deleted_at to reactivate the relationship. Attempts to follow oneself should be rejected. Authorization requires a signed-in user. On success, this endpoint returns no content (204) consistent with side-effect-only operations.\n\nRelated endpoints: DELETE /econDiscuss/member/users/{userId}/follow to retire the relationship (sets deleted_at), and GET/PATCH /econDiscuss/users/{userId}/following to read the resulting followees list.","parameters":[{"name":"userId","description":"Identifier of the target user to follow","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[]},{"specification":"End a follow relationship from the authenticated user to the target {userId} by marking the corresponding econ_discuss_user_follows row as retired via the deleted_at lifecycle column. This performs a reversible removal consistent with the table’s audit-friendly design. No request body is required; returns no content on success.","path":"/econDiscuss/member/users/{userId}/follow","method":"delete","summary":"Retire a follow edge (set deleted_at) in econ_discuss_user_follows (auth required)","description":"This operation retires an existing follow relationship by locating the econ_discuss_user_follows row where follower_user_id is the authenticated account and followee_user_id equals the {userId} path value, then setting the deleted_at timestamp. The schema for econ_discuss_user_follows includes deleted_at specifically to retire links while preserving history, rather than immediately removing rows.\n\nIf no active relationship exists, providers may return 204 (idempotent) or 404 depending on policy. Authorization is required to ensure only the follower can modify their own edges. This operation returns no content on success, and complements POST /econDiscuss/member/users/{userId}/follow (creation) and GET/PATCH /econDiscuss/users/{userId}/following (read).\n\nError handling considerations include rejecting attempts to unfollow oneself where not applicable and handling concurrent state changes gracefully given the unique (follower_user_id, followee_user_id) constraint.","parameters":[{"name":"userId","description":"Identifier of the target user to unfollow","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/users/{userId}/follow","method":"post"},"description":"A follow relationship must exist before it can be retired. This POST creates (or reactivates) the econ_discuss_user_follows row so the DELETE can mark it as retired via deleted_at."}]},{"specification":"Retrieve the current reputation aggregate for a specific user based on the econ_discuss_user_reputations table. This endpoint returns the latest computed reputation score and associated timestamps for the given userId. The underlying Prisma model econ_discuss_user_reputations maintains a single current row per user (unique on user_id) that is derived from immutable ledger entries in econ_discuss_reputation_events. Consumers use this to gate feature access (e.g., poll creation, live threads) and to display summarized trust indicators where policy allows. The operation must locate the row by user_id and return its properties as the IEconDiscussUserReputation DTO. Records that are marked retired via deleted_at must not be included in active results.","authorizationType":null,"authorizationRole":"member","description":"This operation reads the reputation aggregate for a user from the econ_discuss_user_reputations table. The Prisma schema describes econ_discuss_user_reputations with fields id, user_id (unique), score (non-negative integer), last_updated_at, created_at, updated_at, and an optional deleted_at to indicate a retired aggregate. The table acts as a fast-access cache for authorization gates while the immutable history is kept in econ_discuss_reputation_events.\n\nSecurity and visibility depend on policy. Business requirements note that the platform computes a per-user reputation to gate features; exposure of raw numeric scores may be policy-bound. This endpoint requires authentication (role \"member\") and should apply additional business checks to restrict access when necessary (e.g., show only to authenticated viewers or comply with privacy settings). The controller/provider must exclude rows with deleted_at set.\n\nThis aggregate is tied to the ledger in econ_discuss_reputation_events via user_id; writes to the ledger recompute the aggregate. Related APIs include listing reputation events for the same user. On errors, return standard validation and authorization errors. If no aggregate exists for the user, return 404.","method":"get","name":"at","parameters":[{"name":"userId","description":"Target user’s ID to retrieve reputation for","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/users/{userId}/reputation","prerequisites":[],"requestBody":null,"responseBody":{"description":"Current reputation aggregate for the specified user","typeName":"IEconDiscussUserReputation"},"summary":"Get current reputation aggregate (econ_discuss_user_reputations) for a user"},{"specification":"Search and paginate the reputation event ledger for a specific user using the econ_discuss_reputation_events table. This collection endpoint is designed for complex queries with filters, sorting, and date ranges. It uses PATCH with a body of IEconDiscussReputationEvent.IRequest to support flexible search parameters (e.g., occurred_at ranges, reason keyword, points bounds, related post_id, actor_user_id) and returns a paginated list IPageIEconDiscussReputationEvent. Each row represents a single immutable ledger entry for the target userId, linked to optional actor (econ_discuss_users) and optional post (econ_discuss_posts). Records with deleted_at are treated as inactive and excluded from normal results.","authorizationType":null,"authorizationRole":"member","description":"This operation provides advanced search over the econ_discuss_reputation_events ledger for a given user. The Prisma model includes id, user_id, optional actor_user_id, optional post_id, points (signed integer), reason (categorical/human-readable), source (optional), occurred_at, created_at, updated_at, and an optional deleted_at used for exceptional corrections. Indexes on (user_id, occurred_at) and (post_id, occurred_at) make time-window queries efficient.\n\nSecurity: Access should be limited to authenticated viewers (role \"member\"). While the ledger supports audit and recomputation, user-facing exposure should include only the target user’s own events unless policy permits broader visibility. The provider should enforce that the path userId matches the authenticated principal or apply role-based checks. The results must exclude entries where deleted_at is set.\n\nValidation and business logic: The IEconDiscussReputationEvent.IRequest body should support pagination (page, pageSize), sorting (e.g., occurred_at desc), and optional filters: occurred_at range, points min/max, reason substring match, actor_user_id, post_id, and status categories if represented in reason/source. Related operations include GET /users/{userId}/reputation for the aggregate and GET /users/{userId}/reputation/events/{eventId} for a specific ledger entry. Standard error handling applies for invalid filters or unauthorized access.","method":"patch","name":"search","parameters":[{"name":"userId","description":"Target user’s ID whose reputation events are being queried","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/users/{userId}/reputation/events","prerequisites":[],"requestBody":{"description":"Search criteria, sorting, and pagination for reputation events","typeName":"IEconDiscussReputationEvent.IRequest"},"responseBody":{"description":"Paginated reputation event entries matching the search for the user","typeName":"IPageIEconDiscussReputationEvent"},"summary":"Search paginated reputation ledger (econ_discuss_reputation_events) for a user"},{"specification":"List the most recent reputation events for a specific user from econ_discuss_reputation_events without a complex request body. This lightweight GET variant is optimized for default paging (e.g., latest 20 items) and simple clients. It still returns a paginated collection (IPageIEconDiscussReputationEvent) and should exclude any entries marked inactive by deleted_at. Use user_id to scope results and default sorting by occurred_at desc.","authorizationType":null,"authorizationRole":"member","description":"This operation retrieves a default, paginated list of the latest reputation events for the specified user from econ_discuss_reputation_events. The Prisma schema defines each ledger entry with id, user_id, optional actor_user_id, optional post_id, points (signed integer), reason, source (optional), occurred_at, created_at, updated_at, and optional deleted_at. Records where deleted_at is set should be excluded from normal lists.\n\nSecurity: Requires authentication (role \"member\"). Business rules commonly restrict detailed ledger visibility to the owner; providers should ensure that the caller is authorized to view the specified userId or apply policy-based redaction as necessary.\n\nBehavior: Sorting defaults to occurred_at descending. Pagination, search, or sorting parameters (if any) should be provided via conventional query params handled by the controller, while this contract focuses on path parameters. For complex queries, use the PATCH variant on the same path. Related operations include the aggregate retrieval and detailed event retrieval by ID.","method":"get","name":"index","parameters":[{"name":"userId","description":"Target user’s ID whose reputation events are listed","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/users/{userId}/reputation/events","prerequisites":[],"requestBody":null,"responseBody":{"description":"Paginated list of recent reputation events for the user","typeName":"IPageIEconDiscussReputationEvent"},"summary":"List recent reputation events (econ_discuss_reputation_events) for a user"},{"specification":"Retrieve a single reputation ledger entry by eventId for a specific user, using econ_discuss_reputation_events as the source. The operation validates that the event belongs to the given userId and returns the full IEconDiscussReputationEvent object. It must not return entries considered inactive due to deleted_at being set. Cross-links to optional actor_user_id and post_id enable clients to show context when needed.","authorizationType":null,"authorizationRole":"member","description":"This operation fetches a single event from econ_discuss_reputation_events. The Prisma schema includes fields id, user_id, optional actor_user_id, optional post_id, points (signed integer), reason, source (optional), occurred_at, created_at, updated_at, and optional deleted_at. The controller must enforce that the path userId matches the row’s user_id and that the eventId matches id. If the event is marked inactive via deleted_at, it should not be returned in active views.\n\nSecurity: Authentication (role \"member\") is required. The provider should ensure only authorized viewers access the event details, typically restricting to the owner of the events unless policy permits broader visibility.\n\nError handling: Return 404 if no matching event is found for the given userId and eventId, or if it is not visible due to retirement. Related endpoints include the aggregate reputation retrieval and the events listing/search endpoints for the same user.","method":"get","name":"at","parameters":[{"name":"userId","description":"Owner user’s ID used to validate the event belongs to this account","schema":{"type":"string","format":"uuid"}},{"name":"eventId","description":"Reputation event’s ID to retrieve","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/users/{userId}/reputation/events/{eventId}","prerequisites":[],"requestBody":null,"responseBody":{"description":"Reputation event details for the specified event ID","typeName":"IEconDiscussReputationEvent"},"summary":"Get a specific reputation event (econ_discuss_reputation_events) by ID for a user"},{"specification":"List expert domain badges for a specific user. Operates on the econ_discuss_expert_domain_badges table, joined with econ_discuss_topics for domain metadata and filtered by the target owner in econ_discuss_users (via user_id). Supports pagination, status filtering (e.g., active/expired/revoked based on valid_until and revoked_at), and sorting (e.g., verified_at, created_at). Returns a paginated collection of badge summaries for public viewing, useful for rendering profile badges and expert-only discovery facets.","description":"Retrieve a paginated, filterable list of expert domain badges associated with a given user. According to the Prisma schema, econ_discuss_expert_domain_badges stores per-domain badges with fields including id (PK), user_id (FK to econ_discuss_users), econ_discuss_topic_id (FK to econ_discuss_topics), verified_at, valid_until, revoked_at, revoked_reason, created_at, updated_at, and deleted_at. These columns enable client-side experiences like showing when an expert was verified, whether a badge is still within validity, and if it has ever been revoked for policy reasons.\n\nSecurity and visibility: expert badges are designed to be publicly visible on user profiles to promote trust and expertise emphasis. This endpoint does not require authentication and exposes only non-sensitive badge information. Governance staff may have additional internal views; however, this public list restricts itself to badge-level metadata and associated topic labels derived via econ_discuss_topics.\n\nRelationships and behavior: Each badge belongs to a single user (user_id) and a single curated topic (econ_discuss_topic_id). Clients typically join with econ_discuss_topics to present human-readable domain names (name/code). Consumers can filter by effective status, such as currently active (revoked_at is null and (valid_until is null or in the future)), expired (valid_until in the past), or revoked (revoked_at not null). Sorting commonly uses verified_at or created_at to present the chronology of recognition.\n\nValidation and request model: The request body (IEconDiscussExpertDomainBadge.IRequest) may include page/pageSize for pagination, optional status filters (active/expired/revoked), optional topicId filters, and sort directives (e.g., verified_at desc). The provider should normalize inputs and apply safe defaults. If the specified userId does not exist, return an empty page rather than an error.\n\nRelated operations: Use GET /users/{userId}/expertDomainBadges/{badgeId} to retrieve a single badge’s full details including revocation rationale if the requester is authorized to see it. Topic catalog is exposed separately by topic endpoints. Error handling should favor 404 only when the user is not addressable according to policy; otherwise return an empty result set.\n\nExpected behavior and errors: Returns a page container with pagination metadata and an array of badge summaries. Common errors include invalid page/pageSize (400), or nonexistent identifiers in filters (ignored or 400 depending on policy).","summary":"List expert domain badges (econ_discuss_expert_domain_badges) for a user with pagination and filters.","parameters":[{"name":"userId","description":"Target user’s ID whose badges are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination parameters for listing a user’s expert domain badges.","typeName":"IEconDiscussExpertDomainBadge.IRequest"},"responseBody":{"description":"Paginated collection of badge summary records for the specified user.","typeName":"IPageIEconDiscussExpertDomainBadge.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[],"path":"/econDiscuss/users/{userId}/expertDomainBadges","method":"patch"},{"specification":"Retrieve a single expert domain badge record for a user. Operates on the econ_discuss_expert_domain_badges table and verifies ownership via user_id and the badge identifier. Intended for public profile consumption and expert discovery where a single badge’s lifecycle details (verified_at, valid_until, revoked_at, revoked_reason) and linked topic metadata (econ_discuss_topics) are required.","description":"This operation returns one expert domain badge for a given user using the econ_discuss_expert_domain_badges entity. The Prisma schema defines key columns: id (badge identifier), user_id (owner), econ_discuss_topic_id (linked curated topic), verified_at (approval time), valid_until (optional expiry), revoked_at and revoked_reason (policy-driven lifecycle fields), and timestamps (created_at, updated_at). These reflect the verification flow described in the requirements, including approvals, expirations, and revocations.\n\nSecurity and permissions: Badge visibility is generally public to promote transparency of expertise. This endpoint is therefore unauthenticated. Sensitive rationale fields such as revoked_reason may be redacted unless the requester has appropriate governance roles; the provider logic should enforce such redaction policies while keeping the contract stable.\n\nEntity relationships: The badge ties to econ_discuss_users via user_id and to econ_discuss_topics via econ_discuss_topic_id. Clients commonly present topic.name and topic.code to display the domain succinctly. The provider should validate that the badgeId belongs to the given userId; otherwise, respond with 404 to prevent leaking cross-user existence.\n\nValidation and behavior: The provider looks up a record where id = {badgeId} AND user_id = {userId}. If not found, return 404. If found but marked revoked or beyond validity, still return the object, allowing the client to render appropriate state (e.g., inactive). The response type (IEconDiscussExpertDomainBadge) contains full details needed for profile rendering and auditing cues consistent with public visibility.\n\nRelated operations: For collections, use PATCH /users/{userId}/expertDomainBadges. Topic metadata is managed via topics endpoints. Governance-specific mutation endpoints are out of scope here per business constraints.","summary":"Get a specific expert domain badge (econ_discuss_expert_domain_badges) for a user.","parameters":[{"name":"userId","description":"Owner user’s ID for scoping the badge lookup.","schema":{"type":"string","format":"uuid"}},{"name":"badgeId","description":"Identifier of the expert domain badge to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full expert domain badge record for the user, including topic linkage and lifecycle timestamps.","typeName":"IEconDiscussExpertDomainBadge"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[],"path":"/econDiscuss/users/{userId}/expertDomainBadges/{badgeId}","method":"get"},{"specification":"Return the authenticated user’s combined profile, drawing from econ_discuss_users (identity and preferences) and the one-to-one econ_discuss_user_profiles (bio, affiliation, website, location). Designed for self-view in account settings and personalization contexts. Does not expose secrets; includes only public/profile and preference fields defined in the schema.","description":"This endpoint returns the caller’s own profile by joining econ_discuss_users and econ_discuss_user_profiles via user_id. The econ_discuss_users model provides identity and preference columns such as id, email (not necessarily returned), display_name, avatar_uri, timezone, locale, and boolean flags like email_verified and mfa_enabled with timestamps (created_at, updated_at). The econ_discuss_user_profiles model adds extended profile fields: bio, affiliation, website, and location. Together, they represent the self-profile view suitable for account pages and editors.\n\nSecurity and permissions: Access requires authentication and operates in the caller’s own context (authorizationRole: \"member\"). Provider logic must ensure the returned profile belongs to the authenticated principal and that sensitive secrets (password_hash, mfa_secret, mfa_recovery_codes) are never exposed. Email may be redacted per policy if needed; the contract focuses on display and preference fields.\n\nRelationships and behavior: The profile is one-to-one to the user (econ_discuss_user_profiles has a unique user_id). If the profile row does not yet exist, the provider may return reasonable defaults (null/empty strings) or create a stub on write operations; read operations should simply reflect current persisted state.\n\nValidation and error handling: Success returns a single IEconDiscussUserProfile object. If the session is unauthenticated or invalid, return 401. If the account has been deactivated (indicated by deleted_at in either table), implementation may deny access or reflect a policy-specific error. No request body is required.\n\nRelated operations: Use PUT /me to update profile fields like display_name, avatar_uri, timezone, locale, bio, affiliation, website, and location. Use other endpoints for follows, topics, notifications, and drafts as needed.","summary":"Get the current user’s self profile from econ_discuss_users and econ_discuss_user_profiles.","parameters":[],"requestBody":null,"responseBody":{"description":"Self profile view combining identity and extended profile properties.","typeName":"IEconDiscussUserProfile"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[],"path":"/econDiscuss/member/me","method":"get"},{"specification":"Update the authenticated user’s profile fields across econ_discuss_users (display_name, avatar_uri, timezone, locale) and econ_discuss_user_profiles (bio, affiliation, website, location). Ensures only self-updates are allowed and excludes account secrets (password_hash, mfa_secret, mfa_recovery_codes). Returns the updated profile object.","description":"This operation updates editable profile attributes for the caller. The underlying Prisma schema includes econ_discuss_users with public-facing and preference fields: display_name, avatar_uri, timezone, and locale; and econ_discuss_user_profiles with bio, affiliation, website, and location. Write operations must never allow updates to sensitive columns such as password_hash or MFA secrets, and must not change email verification flags directly via this endpoint.\n\nSecurity and ownership: Requires authentication (authorizationRole: \"member\"). The provider must enforce that only the authenticated user’s own records are modified. Attempts to update another user’s profile are forbidden. The provider should apply validation—e.g., display_name presence and length constraints (as per business policy), website as a URI string, and timezone as an IANA identifier—consistent with the schema comments (avatar_uri is an optional URI, timezone is optional IANA ID, locale is optional preferred locale string).\n\nRelationships and persistence: econ_discuss_user_profiles is unique per user_id. If a profile row doesn’t exist yet, the provider may create it when processing the update to keep the one-to-one relationship intact. Timestamps updated_at in both tables should be maintained by the persistence layer. If either record is logically retired per lifecycle policies, the provider should return 403/409 per policy.\n\nError handling: On validation failures (e.g., malformed website URI, unsupported timezone/locale format), return 400 with field-level messages. On unauthenticated requests, return 401. On successful update, return the fully refreshed IEconDiscussUserProfile, allowing clients to reflect the persisted changes immediately.","summary":"Update current user’s profile (econ_discuss_users + econ_discuss_user_profiles) and return the updated record.","parameters":[],"requestBody":{"description":"Fields to update on the caller’s profile (identity display and extended biography details).","typeName":"IEconDiscussUserProfile.IUpdate"},"responseBody":{"description":"Updated self profile reflecting all persisted changes across user and profile tables.","typeName":"IEconDiscussUserProfile"},"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[],"path":"/econDiscuss/member/me","method":"put"},{"specification":"Returns the authenticated member’s consolidated profile using Actors schema tables. Primarily reads from econ_discuss_users (id, email, display_name, avatar_uri, timezone, locale, email_verified, mfa_enabled, created_at, updated_at, deleted_at) and joins optional extended fields from econ_discuss_user_profiles (bio, affiliation, website, location, created_at, updated_at, deleted_at). Records with a non-null deleted_at are treated as inactive/removed. The endpoint normalizes these sources into a single UserProfile DTO for client consumption.","authorizationType":null,"description":"Retrieve the current user’s profile by combining identity and preference fields from econ_discuss_users with optional extended profile details from econ_discuss_user_profiles.\n\nThe econ_discuss_users table stores the core account information required across the platform: email (unique), display_name, optional avatar_uri, timezone for notifications and scheduling, preferred locale, email_verified flag, and MFA state (mfa_enabled). Timestamps include created_at and updated_at, with deleted_at indicating the record is no longer active. This endpoint never exposes sensitive authentication fields such as password_hash, mfa_secret, or mfa_recovery_codes.\n\nThe econ_discuss_user_profiles table augments the base identity with public-facing fields like bio, affiliation, website, and location, as described in its schema comments. These fields are optional and exist only when a profile record has been created for the user. When present, they are merged into the response so clients can render a single coherent profile view.\n\nSecurity considerations: access requires an authenticated session mapped to a valid econ_discuss_users.id. The response is always scoped to the caller; no additional path parameters are required. If the underlying user record has a non-null deleted_at, the account is considered inactive and the provider should deny access appropriately.\n\nError handling: return 200 with the consolidated profile when successful. If the base user row is missing or inactive, return an appropriate error (e.g., 404 or 403) according to business policy. The operation is read-only and does not modify any database state.","summary":"Get authenticated user profile from econ_discuss_users and econ_discuss_user_profiles","parameters":[],"requestBody":null,"responseBody":{"description":"Consolidated profile assembled from econ_discuss_users and econ_discuss_user_profiles","typeName":"IEconDiscussUserProfile"},"authorizationRole":"member","name":"at","prerequisites":[],"path":"/econDiscuss/member/me/profile","method":"get"},{"specification":"Updates the authenticated member’s public profile and preferences using Actors schema tables. Writes to econ_discuss_users (display_name, avatar_uri, timezone, locale, updated_at) and to econ_discuss_user_profiles (bio, affiliation, website, location, updated_at), creating the profile row if missing. Records with deleted_at are considered inactive/removed and must not be updated.","authorizationType":null,"description":"Modify the current user’s profile by updating allowed fields on econ_discuss_users and econ_discuss_user_profiles.\n\nCore identity and preference updates occur in econ_discuss_users: display_name (public handle), avatar_uri (validated URI string), timezone (IANA identifier used for notifications and scheduling), and locale (UI language like en-US). The schema tracks updated_at for this table, and email uniqueness and security-related columns (password_hash, mfa_secret, mfa_recovery_codes) are never writable through this endpoint.\n\nExtended profile information is maintained in econ_discuss_user_profiles with optional fields bio, affiliation, website, and location. When a profile row does not yet exist for the authenticated user, provider logic may create it and persist the requested updates. Records where deleted_at is non-null should be treated as inactive and disallowed for modification.\n\nValidation rules include reasonable length checks for display_name and bio, URI format validation for avatar_uri and website, and verification that timezone corresponds to a valid IANA identifier. Business logic should ensure that only the owner can update these fields.\n\nError handling returns the fully refreshed consolidated profile on success. If the base user is missing, inactive, or the payload fails validation, return appropriate errors (e.g., 400, 403/404, or 409 on conflicting constraints). The operation updates updated_at fields accordingly.","summary":"Update authenticated user profile fields across econ_discuss_users and econ_discuss_user_profiles","parameters":[],"requestBody":{"description":"Fields to update on the authenticated user’s profile and preferences","typeName":"IEconDiscussUserProfile.IUpdate"},"responseBody":{"description":"Updated consolidated profile after applying changes","typeName":"IEconDiscussUserProfile"},"authorizationRole":"member","name":"update","prerequisites":[],"path":"/econDiscuss/member/me/profile","method":"put"},{"specification":"Retrieves the authenticated user’s current reputation aggregate from econ_discuss_user_reputations, which stores a non-negative integer score and the last recalculation timestamp. The score is derived from the immutable ledger econ_discuss_reputation_events but this endpoint returns only the current aggregate for quick gating decisions.","authorizationType":null,"description":"Fetch the current reputation score for the caller from econ_discuss_user_reputations.\n\nThe econ_discuss_user_reputations table provides a compact view containing user_id, score (Int), last_updated_at, and temporal columns (created_at, updated_at, deleted_at). It is maintained based on entries in econ_discuss_reputation_events. This endpoint is optimized for read performance so client applications can determine eligibility for gated features (e.g., polls, live rooms) without scanning the ledger.\n\nSecurity considerations: the caller must be authenticated and will receive only their own reputation information. Entries with a non-null deleted_at are treated as inactive/retired and should not be returned.\n\nError handling: return 200 with the current aggregate when present. If no aggregate exists yet for the user (e.g., new account), providers may return a default score of zero or a 404 according to business policy; the DTO supports explicit values to avoid ambiguity.","summary":"Get current reputation aggregate for authenticated user (econ_discuss_user_reputations)","parameters":[],"requestBody":null,"responseBody":{"description":"Current reputation aggregate for the caller","typeName":"IEconDiscussUserReputation"},"authorizationRole":"member","name":"at","prerequisites":[],"path":"/econDiscuss/member/me/reputation","method":"get"},{"specification":"Searches and paginates the authenticated user’s reputation ledger from econ_discuss_reputation_events. Supports filtering by occurred_at ranges, reason/category strings, related post_id, and sorting (default occurred_at desc). Returns a paginated result set for history views and auditing. This operation reads from the immutable ledger; no writes occur.","authorizationType":null,"description":"Retrieve a paginated list of reputation-impacting events for the current user from econ_discuss_reputation_events.\n\nEach ledger entry contains user_id, optional actor_user_id (e.g., curator or voter), optional post_id, points (signed Int), reason (category such as upvote_post, curated_feature, moderation_penalty), optional source for traceability, and occurred_at to support time-window calculations and decay. Temporal fields include created_at and updated_at; entries may carry a deleted_at for exceptional corrections, but normal operation treats the ledger as append-only.\n\nThe request supports pagination, search, and sorting parameters in the body to handle complex filtering: page, pageSize, dateFrom/dateTo mapped to occurred_at, reason substring match, and optional postId filtering. Results are ordered by occurred_at descending by default to facilitate recent-history views.\n\nSecurity considerations: only the authenticated user’s events are returned, enforced by server-side scoping. Events associated with records in a removed state (e.g., when deleted_at is non-null) should be excluded from normal responses unless an audit mode is explicitly requested by governance tools, which is out of scope here.\n\nError handling returns a paginated container with zero or more events. Validation errors (e.g., invalid date range) should return 400 with details; authentication/authorization failures return 401/403.","summary":"List authenticated user’s reputation events (econ_discuss_reputation_events) with pagination and filters","parameters":[],"requestBody":{"description":"Query parameters for pagination, filtering, and sorting of reputation events","typeName":"IEconDiscussReputationEvent.IRequest"},"responseBody":{"description":"Paginated ledger entries of the user’s reputation history","typeName":"IPageIEconDiscussReputationEvent"},"authorizationRole":"member","name":"index","prerequisites":[],"path":"/econDiscuss/member/me/reputation/events","method":"patch"},{"specification":"Search and paginate the authenticated user’s topic subscriptions using the econ_discuss_user_topic_subscriptions table joined with econ_discuss_topics. This operation returns the topics the caller has subscribed to, supporting text search on topic fields, created_at range filtering on the subscription, and sorting/pagination. It is designed for the “me” scope so the user_id is derived from the authenticated principal and not provided as an input parameter.","path":"/econDiscuss/member/me/topics","method":"patch","summary":"Search current user’s topic subscriptions (econ_discuss_user_topic_subscriptions + econ_discuss_topics).","description":"Retrieve a filtered, paginated list of the current user’s topic subscriptions. The underlying data model uses econ_discuss_user_topic_subscriptions (user-to-topic subscription relationships) and econ_discuss_topics (curated taxonomy). As noted in the Prisma schema, econ_discuss_topics provides fields like code (immutable identifier), name (human-readable), description (optional), created_at/updated_at, and a deleted_at timestamp used to flag archived topics. The subscription table captures econ_discuss_user_id, econ_discuss_topic_id, created_at/updated_at, and a deleted_at column for inactivation while keeping auditability.\n\nSecurity and permissions: this endpoint requires an authenticated caller. The user scope is implicit (\"me\"), so filters are applied to the caller’s own econ_discuss_user_topic_subscriptions rows where deleted_at is null, and topics are included where the topic’s deleted_at is null. Authorization roles are limited to standard members as the data returned is private to the owner.\n\nRelationships and behavior: results are produced by joining subscriptions (econ_discuss_user_topic_subscriptions) to topics (econ_discuss_topics) and projecting topic summaries for response consumption. Clients can filter by topic code/name text search, subscription created_at ranges, or restrict to certain topic identifiers. Pagination and sorting apply to the effective query. Records with any non-null deleted_at in either table are excluded to avoid returning inactive records.\n\nValidation and error handling: request validation ensures well-formed pagination (page/pageSize) and acceptable filter structures; out-of-range values or unknown sort keys result in 400 responses handled by the standard error model. If the caller is unauthenticated, a 401 is returned. This operation complements GET /me/topics, which returns the same resource without a request body, while this PATCH variant supports richer search and sorting.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for listing the caller’s topic subscriptions.","typeName":"IEconDiscussUserTopicSubscription.IRequest"},"responseBody":{"description":"Paginated list of topic summaries for the caller’s active subscriptions.","typeName":"IPageIEconDiscussTopic.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"search","prerequisites":[]},{"specification":"Return a paginated list of the authenticated user’s topic subscriptions using econ_discuss_user_topic_subscriptions joined with econ_discuss_topics. This is a simpler retrieval without a request body; default pagination and ordering are applied while still deriving user_id from the authenticated principal.","path":"/econDiscuss/member/me/topics","method":"get","summary":"Get current user’s topic subscriptions (econ_discuss_user_topic_subscriptions + econ_discuss_topics).","description":"This operation lists the current user’s topic subscriptions by reading rows from econ_discuss_user_topic_subscriptions associated with the caller and joining to econ_discuss_topics for display metadata (code, name, description). Per the Prisma schema, both entities include created_at/updated_at timestamps and a deleted_at column; the selection excludes rows where deleted_at is not null to avoid returning inactive items.\n\nSecurity: the endpoint is available only to authenticated members and returns data scoped to the caller (“me”), enforcing ownership in the query. No path parameters are needed; user linkage comes from the session context.\n\nBehavior and related operations: this GET variant is optimized for straightforward listing with defaults. For advanced search and custom sort/pagination through a structured body, use PATCH /me/topics, which accepts a request payload for filters like text search on econ_discuss_topics.name or date ranges on econ_discuss_user_topic_subscriptions.created_at. Both endpoints project topic summaries in the response.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of topic summaries for the caller’s active subscriptions.","typeName":"IPageIEconDiscussTopic.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[]},{"specification":"Search and paginate the authenticated user’s own post vote history using the econ_discuss_post_votes table, optionally joining econ_discuss_posts for context. Supports filtering by vote_type (\"up\" or \"down\"), status (\"active\", \"withdrawn\", \"switched\", \"discounted\", \"invalidated\"), and created_at ranges, with ordering and pagination. The user scope is implicit based on authentication.","path":"/econDiscuss/member/me/votes","method":"patch","summary":"Search current user’s post votes (econ_discuss_post_votes).","description":"Retrieve a filtered, paginated list of the caller’s post voting history. The Prisma model econ_discuss_post_votes defines one row per (user, post) vote with fields: econ_discuss_user_id, econ_discuss_post_id, vote_type (\"up\" or \"down\"), status (\"active\", \"withdrawn\", \"switched\", \"discounted\", or \"invalidated\"), optional status_reason, and timestamps created_at/updated_at plus a deleted_at column for exceptional removals. Queries restrict to the authenticated user and exclude rows where deleted_at is not null.\n\nSecurity and privacy: this endpoint requires authentication and returns only the caller’s own vote records, aligning with privacy expectations where individual vote choices are private to the voter. The response may include post identifiers (econ_discuss_post_id) to enable navigation, but will not expose other users’ identities.\n\nValidation and business logic: the request body allows filtering by vote_type/status and time windows (created_at). Sorting may be applied by created_at descending by default. Unknown filter values yield 400 validation errors via the standard error model. If the user is not authenticated, a 401 is returned. Related operations include GET /me/votes for default listing without a request body and POST/DELETE vote actions on specific posts for casting or withdrawing a vote, which are separate write endpoints.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for listing the caller’s post votes.","typeName":"IEconDiscussPostVote.IRequest"},"responseBody":{"description":"Paginated list of the caller’s vote records on posts.","typeName":"IPageIEconDiscussPostVote.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"search","prerequisites":[]},{"specification":"Return a paginated list of the authenticated user’s post votes using econ_discuss_post_votes. This GET variant applies default pagination/sorting without a request body while enforcing user scoping from the authenticated principal.","path":"/econDiscuss/member/me/votes","method":"get","summary":"Get current user’s post votes (econ_discuss_post_votes).","description":"This operation lists the caller’s post vote history from econ_discuss_post_votes, limiting to rows where econ_discuss_user_id equals the authenticated user and deleted_at is null. Fields available in the model include vote_type, status, optional status_reason, created_at/updated_at, and the target econ_discuss_post_id. The response presents vote records suitable for a private voting history view.\n\nSecurity and behavior: authentication is required; results are private to the owner and never include other users’ voting identities. For advanced querying—filtering by vote_type/status, narrowing to a date range, or changing sort—use PATCH /me/votes with a structured request body. Errors follow the standard pattern (401 for unauthenticated, 400 for invalid parameters if any defaults are overridden by query-to-body adapters).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of the caller’s vote records on posts.","typeName":"IPageIEconDiscussPostVote.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[]},{"specification":"Search and paginate the authenticated user’s saved post bookmarks using the econ_discuss_post_bookmarks table. Results are constrained to the caller’s account (econ_discuss_post_bookmarks.econ_discuss_user_id = current user) and exclude records marked inactive via the deleted_at column. The Prisma model includes: id (UUID PK), econ_discuss_user_id (FK→econ_discuss_users.id), econ_discuss_post_id (FK→econ_discuss_posts.id), note (owner-only text), created_at, updated_at, and deleted_at (records with a timestamp are treated as inactive for normal reads). This endpoint returns a paginated collection of bookmark summaries and supports advanced filtering via request body DTO IEconDiscussPostBookmark.IRequest.","path":"/econDiscuss/member/me/bookmarks","method":"patch","summary":"Search and paginate member’s bookmarks from econ_discuss_post_bookmarks","description":"This operation queries the econ_discuss_post_bookmarks table to return the current member’s saved items. It uses the authenticated identity to match econ_discuss_post_bookmarks.econ_discuss_user_id and returns only entries that are active (deleted_at is null). Key columns referenced include id, econ_discuss_user_id, econ_discuss_post_id, note, created_at, and updated_at. The target post linkage via econ_discuss_post_id allows the provider to enrich summaries with details from econ_discuss_posts when composing response DTOs.\n\nSecurity and authorization follow the platform’s business policies: only the owner can list their bookmarks. The controller/provider must enforce ownership using the authenticated user context. Administrative and moderation roles are not exposed through this endpoint; the intended audience is a signed-in member managing their own data.\n\nBusiness behavior and validation: the request body supports pagination and optional filters (e.g., time windows over created_at, presence of a note, or post targeting using valid UUIDs). Results are typically ordered by created_at in descending order to reflect most recently saved first. If no records are found, an empty page is returned. Any malformed identifiers or invalid pagination parameters result in validation errors; authorization failures produce 401/403 per policy. For a simpler default listing without complex filters, clients may use GET /me/bookmarks; for fine-grained filtering and sorting, use this PATCH endpoint.","parameters":[],"requestBody":{"description":"Search, sorting, and pagination inputs for the owner’s bookmarks","typeName":"IEconDiscussPostBookmark.IRequest"},"responseBody":{"description":"Paginated bookmark summaries owned by the authenticated member","typeName":"IPageIEconDiscussPostBookmark.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"search","prerequisites":[]},{"specification":"Retrieve a paginated list of the authenticated user’s bookmarks from econ_discuss_post_bookmarks using default server-side pagination and ordering. Results are scoped to econ_discuss_post_bookmarks.econ_discuss_user_id = current user and exclude entries marked inactive via deleted_at. Response contains bookmark summaries; servers may enrich with post metadata joined through econ_discuss_posts.","path":"/econDiscuss/member/me/bookmarks","method":"get","summary":"List member’s bookmarks (econ_discuss_post_bookmarks) with defaults","description":"This collection read returns the member’s active saved items from econ_discuss_post_bookmarks where econ_discuss_user_id equals the authenticated user and deleted_at is null. Core fields include id, econ_discuss_post_id, note, created_at, and updated_at. The response is suitable for list views and may incorporate related post information by joining econ_discuss_posts.\n\nSecurity and access control ensure only the owner can retrieve their bookmarks. Rate limits and standard error semantics apply. Empty pages are valid when no bookmarks exist. To apply advanced filters or custom sort beyond defaults, the PATCH /me/bookmarks variant should be used.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated bookmark summaries for the current member","typeName":"IPageIEconDiscussPostBookmark.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[]},{"specification":"Search and paginate the authenticated user’s persisted notifications from the econ_discuss_notifications table. Results are constrained to recipient_user_id = current user and exclude rows marked inactive via deleted_at. The Prisma model defines: id (UUID PK), recipient_user_id (FK→econ_discuss_users.id), actor_user_id (optional FK), type, title, body (optional), entity_type (optional), entity_id (optional UUID), read_at (null when unread), created_at, and updated_at. Complex filters such as read state, type, entity linkage, and time windows are provided via IEconDiscussNotification.IRequest.","path":"/econDiscuss/member/me/notifications","method":"patch","summary":"Search and paginate member’s notifications from econ_discuss_notifications","description":"This operation lists inbox-style notifications for the signed-in member by selecting from econ_discuss_notifications with recipient_user_id equal to the authenticated user. Records with deleted_at set are excluded from normal responses. Relevant columns include the categorical type, title/body, optional polymorphic linkage via entity_type/entity_id, and read state represented by read_at (null indicates unread).\n\nSecurity ensures that only the intended recipient can access their notifications. Providers must enforce ownership using the authenticated context. The endpoint supports rich filtering—such as isRead (mapped to read_at non-null), type lists, entity scoping, and created_at time windows—and uses pagination to deliver stable, ordered pages (commonly created_at desc). Invalid inputs produce validation errors; authorization failures return 401/403; empty pages are valid outcomes. For simpler defaults without complex criteria, clients may call GET /me/notifications.","parameters":[],"requestBody":{"description":"Search criteria and pagination for notifications (read state, type, entities, time range)","typeName":"IEconDiscussNotification.IRequest"},"responseBody":{"description":"Paginated notifications addressed to the authenticated member","typeName":"IPageIEconDiscussNotification"},"authorizationType":null,"authorizationRole":"member","name":"search","prerequisites":[]},{"specification":"Retrieve a paginated list of the authenticated user’s notifications from econ_discuss_notifications with default server-side ordering and pagination. Results are restricted to recipient_user_id = current user and exclude rows with deleted_at set. The response provides notification items with read state (derived from read_at) and optional entity linkage data.","path":"/econDiscuss/member/me/notifications","method":"get","summary":"List member’s notifications (econ_discuss_notifications) with defaults","description":"Return the current member’s active notifications by selecting from econ_discuss_notifications where recipient_user_id equals the authenticated user and deleted_at is null. Exposed fields include id, type, title, body, read_at, created_at, updated_at, and optional entity_type/entity_id for deep-linking. Default sort is typically created_at desc.\n\nSecurity limits access strictly to the owner. An empty page indicates no available notifications. For advanced filtering (e.g., unread-only, by type, or per entity), use PATCH /me/notifications with a request body. Standard error handling applies for authorization failures and transient server issues.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated notifications for the current member","typeName":"IPageIEconDiscussNotification"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[]},{"specification":"Retrieve a single notification that belongs to the authenticated user, backed by the econ_discuss_notifications table. This operation looks up a notification by its primary key (id, UUID) while enforcing ownership via recipient_user_id, ensuring users can only access their own notifications. It returns the persisted fields such as type, title, body, entity metadata, read_at, and timestamps so clients can render the full notification details and read status.\n\nThe provider must validate that the path parameter notificationId is a valid UUID and that the record exists with recipient_user_id matching the current user. Records that have a non-null deleted_at timestamp are considered removed for the recipient and must not be returned. The response payload maps to the IEconDiscussNotification DTO, aligning with the Prisma columns (id, recipient_user_id, optional actor_user_id, type, title, body, entity_type, entity_id, read_at, created_at, updated_at).\n\nThis read-only operation is user-facing and does not alter state. It is typically used alongside list endpoints and update endpoints for marking notifications read/unread.","authorizationType":null,"authorizationRole":"member","description":"Fetch a specific persisted notification for the current authenticated user using its UUID.\n\nSecurity and permissions: Only the notification recipient may access the record. Authorization checks ensure that econ_discuss_notifications.recipient_user_id equals the authenticated user's econ_discuss_users.id. Attempts to access another user's notification must result in a 403 Forbidden. If the record is not found or is marked removed (deleted_at is set), return 404 Not Found.\n\nDatabase relationship: The econ_discuss_notifications table stores per-user notifications with columns id (UUID primary key), recipient_user_id (FK to econ_discuss_users), optional actor_user_id (FK), type, title, body, optional entity_type/entity_id for deep links, read_at for read state, and created_at/updated_at for ordering and auditing. This operation returns a materialized view of those fields via the IEconDiscussNotification DTO, excluding anything removed for the user.\n\nValidation and behavior: Validate that notificationId is a UUID. Enforce ownership checks and hidden/removed states. No request body is required. The endpoint is designed to complement list/search endpoints and the update endpoint that toggles read state.\n\nRelated operations: Use PUT /me/notifications/{notificationId} to update read state and POST /me/notifications/markAllRead to set read_at on multiple notifications.","method":"get","name":"at","parameters":[{"name":"notificationId","description":"Notification UUID to retrieve for the current user","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/me/notifications/{notificationId}","prerequisites":[],"requestBody":null,"responseBody":{"description":"Full notification details for the authenticated user","typeName":"IEconDiscussNotification"},"summary":"Get one notification (econ_discuss_notifications) belonging to current user"},{"specification":"Update a single notification record for the authenticated user using the econ_discuss_notifications table. This endpoint supports toggling the read state by setting or clearing read_at for the target id (UUID). Ownership is enforced through recipient_user_id to ensure only the recipient can update their notification. The operation returns the updated notification entity.\n\nOnly user-controlled properties related to read state should change. Server logic should interpret an isRead boolean in the request DTO to set read_at to the current timestamp when true, or to null when false. Title/body/type and entity metadata are system-generated and must remain immutable to the recipient.","authorizationType":null,"authorizationRole":"member","description":"Mark or unmark a notification as read for the current user by updating econ_discuss_notifications.read_at.\n\nSecurity and permissions: The authenticated user must match econ_discuss_notifications.recipient_user_id. If the notification does not belong to the user, return 403. If not found or marked removed (deleted_at set), return 404. All changes are limited to the read state; other columns like type, title, body, entity metadata are not editable by recipients.\n\nDatabase relationship: econ_discuss_notifications stores id (UUID), recipient_user_id (FK), optional actor_user_id (FK), type, title, body, optional entity_type/entity_id, read_at, created_at, updated_at, and a removal timestamp. This operation updates read_at based on client intent while preserving immutability of other system-managed fields.\n\nValidation and business rules: The request body IEconDiscussNotification.IUpdate should contain an isRead boolean (and may include no other modifiable fields). On isRead=true, set read_at to the current time; on isRead=false, set read_at to null. The response returns the updated notification via IEconDiscussNotification. Handle id format validation and ownership checks.\n\nRelated operations: GET /me/notifications/{notificationId} retrieves a single notification. POST /me/notifications/markAllRead updates multiple notifications for the current user.","method":"put","name":"update","parameters":[{"name":"notificationId","description":"Notification UUID to update for the current user","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/me/notifications/{notificationId}","prerequisites":[],"requestBody":{"description":"Fields to update on the notification (read/unread intent only)","typeName":"IEconDiscussNotification.IUpdate"},"responseBody":{"description":"Updated notification entity after applying read state change","typeName":"IEconDiscussNotification"},"summary":"Update user notification read state (econ_discuss_notifications)"},{"specification":"Mark all notifications for the authenticated user as read in the econ_discuss_notifications table by setting read_at to the current time for all records where recipient_user_id equals the current user and read_at is null. Records considered removed (deleted timestamp present) must be skipped. This operation does not return a body and is intended for quick mailbox management.","authorizationType":null,"authorizationRole":"member","description":"Bulk-set read_at for all unread notifications belonging to the current user.\n\nSecurity and permissions: Only authenticated users can invoke this operation. It updates only rows where econ_discuss_notifications.recipient_user_id equals the caller’s econ_discuss_users.id. It must ignore records flagged as removed. If no records are affected, still return 204 to indicate success.\n\nDatabase relationship: Operates on econ_discuss_notifications by updating read_at in bulk based on recipient ownership. No other columns are modified.\n\nBehavior and errors: The endpoint is idempotent. Concurrent executions should be safe; subsequent calls will do nothing and still succeed. This endpoint complements single-record update and retrieval operations.","method":"post","name":"markAllRead","parameters":[],"path":"/econDiscuss/member/me/notifications/markAllRead","prerequisites":[],"requestBody":null,"responseBody":null,"summary":"Mark all current user notifications as read (econ_discuss_notifications)"},{"specification":"Search and paginate curated topics from the econ_discuss_topics table with advanced text search and sorting. This operation returns a list of topics for discovery and subscription flows. It supports keyword search across name and description (leveraging text indexes), pagination via page and pageSize, and optional sorting by name or recency. Topics that have an archival timestamp are excluded by default from public listings.\n\nThe request body IEconDiscussTopic.IRequest captures filters such as q (keyword), page/pageSize, and sort options. The response is a paginated set of topic summaries optimized for list displays, mapping to the core columns id, code, name, description, and timestamps.","authorizationType":null,"authorizationRole":null,"description":"Retrieve a filtered and paginated list of economics topics for discovery based on the econ_discuss_topics entity.\n\nPurpose and overview: Clients use this endpoint to power topic search, selection dialogs, and topic pages. It supports free-text search across name and description and returns a page of concise records.\n\nSecurity considerations: This endpoint is public read and does not require authentication. It must only return non-archived topics by default (i.e., exclude records whose archival timestamp is set). Administrative creation or modification of topics is out of scope here.\n\nDatabase relationship: The econ_discuss_topics table defines id (UUID PK), code (unique slug), name, optional description, created/updated timestamps, and an archival timestamp used to hide topics from user-facing lists. This endpoint transforms those rows into summary DTOs suitable for list presentation.\n\nValidation and business logic: Validate pagination bounds (page ≥ 1, reasonable pageSize limits). Apply keyword filtering to name/description fields. Sorting may include name asc/desc or recency by created_at/updated_at. Exclude archived records by default, with no way to include them via this public endpoint to avoid exposing retired topics.\n\nRelated operations: Topic detail retrieval (e.g., GET /topics/{topicId}) and subscription endpoints are separate concerns. This endpoint focuses solely on list/search.","method":"patch","name":"patch","parameters":[],"path":"/econDiscuss/topics","prerequisites":[],"requestBody":{"description":"Search, pagination, and sorting parameters for topics listing","typeName":"IEconDiscussTopic.IRequest"},"responseBody":{"description":"Paginated list of topic summaries matching the search criteria","typeName":"IPageIEconDiscussTopic.ISummary"},"summary":"Search/paginate topics (econ_discuss_topics) with keyword and sorting"},{"specification":"Retrieve a paginated catalog of curated economics topics from the econ_discuss_topics table. This operation exposes public read access to taxonomy entries used for organizing posts, poll domains, expert badges, and user subscriptions. It returns a paginated response type to support large catalogs and client-side navigation. Results reflect only active topics (records where the archival marker column deleted_at is null). The response object IEconDiscussTopic should surface the core fields: id (UUID), code (unique slug), name, description, and temporal columns created_at and updated_at. Pagination container IPageIEconDiscussTopic wraps an array of topic summaries or full entities alongside standard pagination metadata.","authorizationType":null,"authorizationRole":null,"description":"This operation reads from the econ_discuss_topics table, which the Prisma schema describes as a curated taxonomy of economics subjects used across the platform. The table defines a unique code (immutable slug-like identifier), a human-readable name, optional description, and temporal columns (created_at, updated_at). The deleted_at column indicates a record is retired from active use and should not appear in user-facing lists. Clients should expect that only records with a null deleted_at value are returned.\n\nSecurity-wise, this is a public discovery endpoint that does not require authentication. Administrative creation and maintenance of topics are handled by separate restricted endpoints. Consumers can cache responses briefly; however, administrators may update topic names or descriptions, so clients should handle eventual consistency.\n\nIn relation to other database entities, topics are referenced by econ_discuss_post_topics (post-to-topic junction), econ_discuss_user_topic_subscriptions (user subscriptions), and econ_discuss_expert_domain_badges (per-domain expert badges). Changes in topics may affect discovery and personalization surfaces. The list endpoint is optimized for read scenarios and can be paired with GET /topics/{topicId} for detailed retrieval.\n\nValidation and behavior: the endpoint returns a paginated container (IPageIEconDiscussTopic). Although pagination and search filters are implemented at the application level, the response always conforms to the page wrapper. Server-side errors include 500 for unexpected failures. If the catalog is empty, the data array is empty with appropriate pagination metadata.","summary":"List public curated topics from econ_discuss_topics with pagination.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of active topics for discovery and organization.","typeName":"IPageIEconDiscussTopic"},"name":"get","prerequisites":[],"path":"/econDiscuss/topics","method":"get"},{"specification":"Fetch a single curated topic by identifier from the econ_discuss_topics table. The endpoint returns a full IEconDiscussTopic object including id, code, name, description, and timestamps. It is intended for public, read-only use to power topic detail pages or selection dialogs. Records marked retired via the deleted_at column are not returned; nonexistent or retired identifiers yield 404.","authorizationType":null,"authorizationRole":null,"description":"This operation targets the econ_discuss_topics table, which holds the curated taxonomy used throughout the platform. The schema defines the following notable columns: id (UUID primary key), code (unique slug-like business identifier), name (display name), description (optional), created_at, updated_at, and an archival marker deleted_at. When deleted_at is non-null, the record is considered retired from active use and should not be served to end users.\n\nAuthorization: public read access. Administrative writes occur through restricted endpoints. The operation should be safe to use across pages that need to show topic details, including topic pages and post authoring flows.\n\nRelationships: topics are joined from econ_discuss_post_topics for filtering posts, from econ_discuss_user_topic_subscriptions for personalization, and from econ_discuss_expert_domain_badges for expert domain badges. If the requested topic does not exist or is retired, the server returns 404. Validation consists of verifying that the provided topicId is a valid UUID and that the record is present and active.","summary":"Get a single topic from econ_discuss_topics by its UUID.","parameters":[{"name":"topicId","description":"Unique identifier of the target topic.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed topic information.","typeName":"IEconDiscussTopic"},"name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/admin/topics","method":"post"},"description":"A topic must be created to provide a valid {topicId} before it can be retrieved. Without creation, the request will fail with 404 (topic not found)."}],"path":"/econDiscuss/topics/{topicId}","method":"get"},{"specification":"Create a new curated topic in the econ_discuss_topics table. This administrative operation accepts IEconDiscussTopic.ICreate payload with fields such as code (unique slug), name, and optional description. The server sets created_at and updated_at timestamps and returns the newly created IEconDiscussTopic. Uniqueness of code is enforced; attempts to reuse an existing code must result in a conflict response.","authorizationType":null,"authorizationRole":"admin","description":"This operation writes to the econ_discuss_topics table, defined in the Prisma schema as the authoritative taxonomy used across the platform. The table includes a unique code intended as an immutable business identifier for URLs and external references, a required name, optional description, and temporal columns created_at and updated_at. A record-level archival timestamp (deleted_at) exists for retirement handling but is not set on creation.\n\nSecurity and permissions: topic creation is restricted to administrative users due to the global impact of taxonomy changes on discovery, subscriptions, and expert badges. The authorizationRole reflects this by requiring admin. Moderators may manage topics according to governance policy, but to minimize endpoint multiplication, this API is scoped to admin.\n\nValidation and business logic: request must provide a unique code and a non-empty name; description is optional. The server must enforce code uniqueness (Prisma unique index) and return a 409 Conflict if a duplicate code is submitted. Timestamps are system-managed. On success, the operation returns the created IEconDiscussTopic.\n\nRelated flows: clients typically call GET /topics to confirm creation results and GET /topics/{topicId} for subsequent detail views. If the request body is malformed or fails validation, respond with 400; unexpected errors yield 500.","summary":"Create a curated topic record in econ_discuss_topics (admin-only).","parameters":[],"requestBody":{"description":"Topic creation payload including unique code, name, and optional description.","typeName":"IEconDiscussTopic.ICreate"},"responseBody":{"description":"Newly created topic record.","typeName":"IEconDiscussTopic"},"name":"create","prerequisites":[],"path":"/econDiscuss/admin/topics","method":"post"},{"specification":"Update an existing curated topic in the econ_discuss_topics table. This administrative operation accepts IEconDiscussTopic.IUpdate payload containing updatable fields such as name and description. The code field is treated as immutable business identifier and must not change via this endpoint. The server updates updated_at and returns the modified IEconDiscussTopic.","authorizationType":null,"authorizationRole":"admin","description":"This operation modifies records in econ_discuss_topics, the curated taxonomy that powers filtering, subscriptions, and expert domain badges. The Prisma schema specifies the following key columns: id (UUID), code (unique slug-like identifier), name, description, created_at, updated_at, and an archival timestamp deleted_at. Consistent with the schema commentary that code is an immutable business identifier, this endpoint should not permit changing code; attempts to change it should be rejected with a validation error.\n\nAuthorization: restricted to administrative users due to the broad impact of taxonomy changes. The endpoint’s authorizationRole is limited to admin to prevent role multiplication while aligning with governance that only privileged users manage topics.\n\nValidation and behavior: the request body should allow updating name and description only. If the topic does not exist or has been retired from active use, return 404. The server sets updated_at automatically and returns the updated IEconDiscussTopic. Conflicts (e.g., attempting to set fields violating constraints) should yield 409, while malformed input returns 400.\n\nRelated operations: clients may retrieve the current state via GET /topics/{topicId} before updating and use GET /topics afterwards to observe list changes. This endpoint is not responsible for archival or removal actions, which are handled separately by governance workflows.","summary":"Update name/description of a topic in econ_discuss_topics (admin-only).","parameters":[{"name":"topicId","description":"Unique identifier of the topic to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Topic update payload (name and description only; code is immutable).","typeName":"IEconDiscussTopic.IUpdate"},"responseBody":{"description":"Updated topic record.","typeName":"IEconDiscussTopic"},"name":"update","prerequisites":[{"endpoint":{"path":"/econDiscuss/admin/topics","method":"post"},"description":"A topic must be created before it can be updated. This operation creates the econ_discuss_topics row that provides {topicId} for the update."}],"path":"/econDiscuss/admin/topics/{topicId}","method":"put"},{"specification":"Permanently remove a topic from public use by marking its deleted_at timestamp in the econ_discuss_topics table. This endpoint is reserved for administrative curation of the taxonomy that organizes content across the platform. Removing a topic sets the record’s deleted_at while preserving the row for audit, historical references in post-topic junctions (econ_discuss_post_topics), and potential restoration workflows handled elsewhere.","authorizationType":null,"authorizationRole":"admin","description":"This operation targets the curated taxonomy stored in econ_discuss_topics. The model includes columns id (UUID primary key), code (unique business identifier), name, description, created_at, updated_at, and deleted_at for archival. Executing this endpoint sets deleted_at to the current time, which removes the topic from user-facing lists and prevents new associations in econ_discuss_post_topics while keeping historical records intact for auditability.\n\nOnly administrators should perform this action. The econDiscuss governance documents specify that topic curation is an administrative responsibility; therefore, authorization ensures only users assigned an admin role can call this operation. Since the table includes a deleted_at column, the behavior is to mark the record as no longer active rather than physically deleting the row to keep referential integrity with existing associations.\n\nOn validation, the service confirms that topicId is a valid UUID and that the topic exists and is not already marked as deleted. If the topic has already been archived (deleted_at is not null), the provider may treat the request as idempotent and return success without additional changes. Related read endpoints (e.g., listing topics or searching posts by topic) should exclude records where deleted_at is not null. Errors include 404 when the topic does not exist and 409 if policy or dependency checks prevent archival (e.g., active policy hold).","summary":"Archive a topic in econ_discuss_topics by setting deleted_at (admin only).","parameters":[{"name":"topicId","description":"Unique identifier of the topic to archive.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/admin/topics","method":"post"},"description":"A topic must exist before it can be archived (set deleted_at). This operation creates the econ_discuss_topics row referenced by {topicId}."}],"path":"/econDiscuss/admin/topics/{topicId}","method":"delete"},{"specification":"Create or reactivate a user-to-topic subscription in the econ_discuss_user_topic_subscriptions table for the authenticated user and the specified topic. The unique (econ_discuss_user_id, econ_discuss_topic_id) constraint ensures idempotent subscribe behavior, and clearing deleted_at reactivates a previously unsubscribed record.","authorizationType":null,"authorizationRole":"member","description":"This operation writes to econ_discuss_user_topic_subscriptions, which contains id (UUID), econ_discuss_user_id, econ_discuss_topic_id, created_at, updated_at, and deleted_at. Subscribing inserts a new row when none exists or clears deleted_at when a prior record exists but was marked inactive. The subscription is used by personalization to prioritize content tagged with the topic and to build digests.\n\nSecurity requires an authenticated user context; the provider derives econ_discuss_user_id from the session. The topicId path parameter must be a valid UUID matching an existing row in econ_discuss_topics whose deleted_at is null. The operation is designed to be idempotent: attempting to subscribe when already active results in a no-op with a 204 response.\n\nValidation errors include 404 when the topic does not exist or is archived and 409 if uniqueness or policy checks fail unexpectedly. Downstream read APIs (e.g., GET /me/topics) will reflect the active subscription after this call. No response body is returned by design, returning 204 No Content on success.","summary":"Subscribe the authenticated user to a topic via econ_discuss_user_topic_subscriptions.","parameters":[{"name":"topicId","description":"Target topic’s UUID to subscribe to.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"create","prerequisites":[{"endpoint":{"path":"/econDiscuss/admin/topics","method":"post"},"description":"The target topic must exist before creating a subscription because subscriptions reference econ_discuss_topics via {topicId}."}],"path":"/econDiscuss/member/topics/{topicId}/subscribe","method":"post"},{"specification":"Deactivate a user-to-topic subscription by setting the deleted_at timestamp on the corresponding row in econ_discuss_user_topic_subscriptions for the authenticated user and the given topic.","authorizationType":null,"authorizationRole":"member","description":"This operation updates econ_discuss_user_topic_subscriptions by locating the unique (econ_discuss_user_id, econ_discuss_topic_id) record and setting deleted_at to indicate the subscription is inactive while retaining the row for audit. Columns include id (UUID), econ_discuss_user_id, econ_discuss_topic_id, created_at, updated_at, and deleted_at. This design supports straightforward reactivation via the POST subscribe operation by clearing deleted_at.\n\nThe caller must be an authenticated user; the service resolves econ_discuss_user_id from the session. If the subscription does not exist or is already inactive, the provider may treat the request as idempotent and return 204 No Content. The topicId path parameter must be a valid UUID referencing econ_discuss_topics; archived topics can be treated as a no-op for unsubscription.\n\nError handling includes 404 when the topic is not found in econ_discuss_topics (optional, as unsubscribe can be idempotent), and generic conflict responses when policy prevents changes. No response body is returned, conforming to the platform’s standard for toggle-style operations.","summary":"Unsubscribe the authenticated user from a topic by marking the subscription as inactive.","parameters":[{"name":"topicId","description":"Target topic’s UUID to unsubscribe from.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/admin/topics","method":"post"},"description":"The target topic must exist so the (user, topic) subscription can be found and archived (deleted_at set)."},{"endpoint":{"path":"/econDiscuss/member/topics/{topicId}/subscribe","method":"post"},"description":"A subscription must exist before it can be deactivated. This creates the econ_discuss_user_topic_subscriptions row that DELETE will mark inactive."}],"path":"/econDiscuss/member/topics/{topicId}/subscribe","method":"delete"},{"specification":"Retrieve a filtered, sorted, and paginated list of posts from econ_discuss_posts with advanced query capabilities delivered via request body. Supports keyword search (title/body/summary), author filtering, topic filtering through econ_discuss_post_topics, expert-authored filtering via econ_discuss_verified_experts joins, date range on published_at, and sort modes such as newest and trending that may incorporate interaction signals from econ_discuss_post_votes.","authorizationType":null,"authorizationRole":null,"description":"This collection operation reads from econ_discuss_posts, which includes id (UUID), econ_discuss_user_id (author), title, body, summary, published_at, scheduled_publish_at, created_at, updated_at, and deleted_at. Results exclude rows where deleted_at is not null and typically prefer published_at for ordering when available. Topic filtering leverages econ_discuss_post_topics (unique per post/topic), and expert-only filtering is implemented by joining author ids to econ_discuss_verified_experts (verified_at and optional badge_valid_until) to restrict results to verified expert authors.\n\nThe request body (IEconDiscussPost.IRequest) should provide pagination fields (page, pageSize), free-text query, optional authorId, array of topicIds, expertOnly boolean, dateFrom/dateTo targeting published_at, and sort options such as new or trending. Trending may consider recent weighted interactions using econ_discuss_post_votes (vote_type up/down and status) alongside recency; exact ranking is provider-defined but consistent with business policies. The response returns a paginated container (IPageIEconDiscussPost.ISummary) optimized for list views, containing summaries rather than full text where appropriate.\n\nSecurity-wise, this is a public read endpoint, so authorizationRole is null. Validation enforces UUID formats for identifiers, ensures page/pageSize bounds, normalizes date ranges, and rejects queries referencing archived topics. Errors include 400 for invalid filters, 404 only when a strictly scoped filter yields a missing referenced entity, and 429 when rate limits apply. Related endpoints include GET /posts/{id} to fetch a single post and topic subscription operations that influence personalization but not the search scope directly.","summary":"Search and paginate posts from econ_discuss_posts with rich filters and sorting.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for post discovery.","typeName":"IEconDiscussPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries matching the search criteria.","typeName":"IPageIEconDiscussPost.ISummary"},"name":"patch","prerequisites":[],"path":"/econDiscuss/posts","method":"patch"},{"specification":"Return a paginated list of published posts from the Prisma table econ_discuss_posts. This endpoint is intended for public discovery feeds and simple listings. It should return only records that are currently visible to the public (e.g., published_at is set and deleted_at is null). Sorting by recency (published_at desc) is typical; advanced filtering and complex ranking are handled by dedicated search endpoints.\n\nThe primary entity is econ_discuss_posts with fields id, econ_discuss_user_id (author), title, body, optional summary, published_at, optional scheduled_publish_at, created_at, and updated_at. Clients may separately request topic associations via econ_discuss_post_topics and topic metadata in econ_discuss_topics.\n\nPagination is required for scalability; implementations commonly expose page/size parameters at the transport layer. This listing endpoint does not accept a request body and does not implement complex search filters in order to keep GET semantics simple and cache-friendly.","authorizationType":null,"authorizationRole":null,"description":"Retrieve a paginated list of publicly visible posts from econ_discuss_posts. The model includes title, body, summary (optional), and publication timestamps. Only posts with a non-null published_at and a null deleted_at should be included for public callers.\n\nSecurity and visibility: this is a public read operation. Business logic may further exclude scheduled posts (scheduled_publish_at in the future) and enforce any moderation visibility rules. Ownership or elevated roles are not required for this endpoint.\n\nRelated entities include econ_discuss_users (author attribution) and econ_discuss_post_topics (topic links to econ_discuss_topics). Clients often call this endpoint to render a home or explore feed and then use GET /econDiscuss/posts/{postId} to load full details of a selected item.","method":"get","name":"get","parameters":[],"path":"/econDiscuss/posts","prerequisites":[],"requestBody":null,"responseBody":{"description":"Paginated list of post summaries suitable for list views","typeName":"IPageIEconDiscussPost.ISummary"},"summary":"List published posts from econ_discuss_posts with pagination"},{"specification":"Fetch a single post by its identifier from the Prisma table econ_discuss_posts. The operation returns the full post representation for detail views and honors publication/visibility rules (e.g., published_at presence and deleted_at is null for public access). Related entities like topics (econ_discuss_post_topics → econ_discuss_topics) and author (econ_discuss_users) may be fetched via separate calls.","authorizationType":null,"authorizationRole":null,"description":"Retrieve a specific post from econ_discuss_posts using its UUID. The model defines title, body, optional summary, publication timestamps (published_at, scheduled_publish_at), and lifecycle timestamps (created_at, updated_at). For public callers, only posts that are currently visible should be returned—typically those with published_at set and deleted_at null. Implementations may enforce exclusion of scheduled or hidden items per policy.\n\nThis operation relates to taxonomy and authoring: topic associations are in econ_discuss_post_topics referencing econ_discuss_topics, and author attribution uses econ_discuss_users via econ_discuss_user_id. Interaction aggregates (votes/bookmarks) live in econ_discuss_post_votes and econ_discuss_post_bookmarks, but they do not alter the core post entity.\n\nValidation includes ensuring the path parameter is a valid UUID and applying visibility checks. Expected errors include 404 when the post does not exist or is not visible to the caller.","method":"get","name":"at","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/posts/{postId}","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A post must be created before it can be retrieved by ID. If no post exists matching {postId}, this operation would return 404/not found."}],"requestBody":null,"responseBody":{"description":"Detailed post entity for rendering content","typeName":"IEconDiscussPost"},"summary":"Get a single post from econ_discuss_posts by ID"},{"specification":"Create a new post in the Prisma table econ_discuss_posts for the authenticated member. The payload includes title, body, optional summary, and optional scheduling information (scheduled_publish_at). Topic associations are created via econ_discuss_post_topics referencing econ_discuss_topics. The response returns the created post entity.","authorizationType":null,"authorizationRole":"member","description":"Insert a new record into econ_discuss_posts as the authenticated author. Required business fields typically include title and body; optional fields include summary and scheduled_publish_at to enable scheduled publication. The schema stores timestamps as timestamptz and provides text indexes over title/body/summary for discovery.\n\nSecurity and permissions: only authenticated members may create posts. The author is bound via econ_discuss_user_id from the authenticated session. Implementations may validate required topic bindings by inserting rows into econ_discuss_post_topics linking to econ_discuss_topics. Validation errors (400) occur for missing/invalid fields; 403 is returned when the actor lacks permission.","method":"post","name":"create","parameters":[],"path":"/econDiscuss/member/posts","prerequisites":[],"requestBody":{"description":"Data for creating a post (title, body, optional summary and scheduling, optional topic bindings)","typeName":"IEconDiscussPost.ICreate"},"responseBody":{"description":"Created post with identifiers and timestamps","typeName":"IEconDiscussPost"},"summary":"Create a new post record in econ_discuss_posts"},{"specification":"Update an existing post in the Prisma table econ_discuss_posts identified by its UUID. The request body supports modifying fields such as title, body, summary, and scheduling timestamps. Implementations may capture historical versions in econ_discuss_post_snapshots. The response returns the updated post entity.","authorizationType":null,"authorizationRole":"member","description":"Modify an existing post’s fields in econ_discuss_posts. Common updates include title, body, summary, and publication/scheduling adjustments (published_at or scheduled_publish_at where policy allows). The model maintains created_at/updated_at for auditing. Version history can be recorded in econ_discuss_post_snapshots using a monotonic per-post version.\n\nSecurity and validation: only the author or appropriately privileged roles may update a post. Ownership checks should use the authenticated user context, and an edit window policy may apply after publication. The path parameter must be a valid UUID. Typical errors include 400 (invalid data), 403 (forbidden), and 404 (not found).","method":"put","name":"update","parameters":[{"name":"postId","description":"Unique identifier of the post to update","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/posts/{postId}","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A Post must exist before it can be updated. Creating a post provides a valid postId; without it, the update would fail with not found."}],"requestBody":{"description":"Fields permitted to be updated for the target post","typeName":"IEconDiscussPost.IUpdate"},"responseBody":{"description":"Updated post entity after applying changes","typeName":"IEconDiscussPost"},"summary":"Update a post in econ_discuss_posts by ID"},{"specification":"Delete a post by ID from the econ_discuss_posts table by marking it deleted via the deleted_at column. This operation performs a non-destructive removal (records remain in the database for audit and recovery windows) that aligns with the Prisma schema where econ_discuss_posts includes a nullable deleted_at field. Related associations (econ_discuss_post_topics, econ_discuss_post_votes, econ_discuss_post_bookmarks, econ_discuss_polls, econ_discuss_live_threads, econ_discuss_post_snapshots) are not physically removed; list and discovery queries must exclude rows with deleted_at set. Business logic must ensure only the author or privileged roles can perform this action.","description":"Remove a published or draft-backed post from public visibility by setting the deleted_at timestamp in econ_discuss_posts. The Posts model comment states it supports publication timestamps, scheduled publishing, and a soft deletion timestamp when the post is removed from public visibility. This operation leverages that deleted_at field to retire a post without erasing historical data or breaking referential integrity.\n\nSecurity and permissions: Only the owning author or elevated roles (moderator/admin) should be allowed to delete. Moderators and admins may require 2FA per platform policy (see role tables econ_discuss_moderators and econ_discuss_admins) and actions must be audited. Ownership and sanction checks occur in service logic. Attempts by unauthorized users should return a suitable error (403 if authenticated but not permitted, 401 if unauthenticated).\n\nDatabase relationships: The econ_discuss_posts record is connected to multiple tables, including econ_discuss_post_topics (post–topic junction), econ_discuss_post_votes (member votes and statuses), econ_discuss_post_bookmarks (owner-only saved items with notes), econ_discuss_polls (one-to-one poll attached to a post), econ_discuss_live_threads (one-to-one live room), and econ_discuss_post_snapshots (version history). Setting deleted_at on the post preserves these relationships for audit and internal analytics while excluding the post from public discovery. Because this is a deletion via deleted_at, hard-delete cascades are not triggered; repository queries should consistently filter deleted_at IS NULL for user-facing listings.\n\nValidation and business rules: If a post is already marked as deleted (deleted_at IS NOT NULL), return a 409 conflict or idempotent success depending on policy. If compliance/legal holds are active at higher layers, the deletion should be blocked with a reason. Implementers should ensure that search indices and caches are updated to remove the post from public results shortly after the operation.\n\nRelated operations: Use GET /posts/{postId} to read details prior to deletion and POST /posts to create new posts. After deletion, list endpoints and trending queries must ignore the record. Error handling should include 404 when the postId does not exist or the caller lacks access to view it, 403 for permission failures, and 429 when rate limits are exceeded.","summary":"Mark a post (econ_discuss_posts) as deleted by setting deleted_at.","parameters":[{"name":"postId","description":"Target post's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/econDiscuss/member/posts/{postId}","method":"delete","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A Post must be created before it can be soft-deleted. This ensures the postId references an existing record to retire via deleted_at."}]},{"specification":"List all topics associated with a specific post by joining econ_discuss_post_topics and econ_discuss_topics. The endpoint returns a paginated collection of topic summaries for the given postId. It relies on the junction table econ_discuss_post_topics (unique per (post, topic)) and the canonical topic definitions in econ_discuss_topics, both of which include deleted_at timestamps for logical retirement.","description":"Retrieve the curated topics linked to a post through the econ_discuss_post_topics junction. The Topics schema comment explains that econ_discuss_topics is the curated taxonomy used for organizing content and personalization, with code, name, description, and deleted_at for archival. The post–topic relationships are stored in econ_discuss_post_topics, which enforces uniqueness per (econ_discuss_post_id, econ_discuss_topic_id) and includes created_at/updated_at and deleted_at.\n\nSecurity and visibility: Topic associations for a publicly visible post are generally public. If the target post is retired (deleted_at in econ_discuss_posts) or otherwise restricted, application logic should adjust visibility or respond with a suitable error per policy. This endpoint does not require authentication by default, and it returns only non-deleted topics and active associations (junction rows where deleted_at is null).\n\nData model context: econ_discuss_post_topics references econ_discuss_posts and econ_discuss_topics with onDelete: Cascade. Since this is a read-only query, it simply joins the junction with the topics table and returns relevant Topic fields in a summary form suitable for lists. Implementers should consistently filter both the junction and topics where deleted_at IS NULL to avoid returning archived data. Sorting may default to association created_at or topic name.\n\nError handling: Return 404 if the post does not exist or is inaccessible. Support typical pagination parameters in the response container. This endpoint complements the PATCH variant for advanced searching/filtering of attached topics.","summary":"List topics linked to a post using econ_discuss_post_topics and econ_discuss_topics.","parameters":[{"name":"postId","description":"Target post's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated topics associated with the post","typeName":"IPageIEconDiscussTopic.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/econDiscuss/posts/{postId}/topics","method":"get","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The parent Post must exist to list its attached topics. Without a created post, the postId would be invalid and the listing should return 404."}]},{"specification":"Search and paginate topics associated with a post using a request body for complex filters. Operates over econ_discuss_post_topics (junction) and econ_discuss_topics (taxonomy). Supports keyword search on topic name/description, sorting, and pagination while respecting deleted_at columns on both tables.","description":"This advanced retrieval endpoint returns a filtered, sorted, and paginated list of topics attached to a given post. It uses the econ_discuss_post_topics junction (which includes created_at, updated_at, and deleted_at) to constrain results to those linked to the target post, and pulls display metadata from econ_discuss_topics (code, name, description, deleted_at). The Topics schema emphasizes curated taxonomy and discoverability; this endpoint aligns by providing server-side search over topic name/description with appropriate indexes (gin_trgm_ops on name/description) as indicated in the Prisma comments.\n\nSecurity and visibility: Designed as a public read operation; however, if the parent post is retired (deleted_at set in econ_discuss_posts) or access-limited, the service layer should respond accordingly. Only active associations (junction deleted_at is null) and non-deleted topics (topics.deleted_at is null) are returned.\n\nValidation and business rules: The request body (IEconDiscussPostTopic.IRequest) may include parameters such as keyword q, sort (e.g., created_at desc or name asc), and pagination fields. Service code should sanitize inputs, apply indexes efficiently, and enforce reasonable pageSize limits. This endpoint is complementary to the simpler GET variant; clients may prefer PATCH when complex filtering is required.\n\nRelated operations: Use GET /posts/{postId}/topics for a simple listing, and POST /posts/{postId}/topics to attach a new topic to the post. Error handling includes 404 for missing/hidden post, and 400 for invalid filter inputs.","summary":"Advanced search over topics linked to a post (econ_discuss_post_topics + econ_discuss_topics).","parameters":[{"name":"postId","description":"Target post's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, sort, and pagination parameters for topics attached to the post","typeName":"IEconDiscussPostTopic.IRequest"},"responseBody":{"description":"Filtered, paginated topic summaries for the post","typeName":"IPageIEconDiscussTopic.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"search","path":"/econDiscuss/posts/{postId}/topics","method":"patch","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The parent Post must exist to search/paginate its attached topics. If the post does not exist, the operation cannot proceed and should return 404."}]},{"specification":"Create a post–topic association in the econ_discuss_post_topics table for the specified post. This attaches a curated topic (from econ_discuss_topics) to a post, enforcing the unique (post, topic) constraint and respecting deleted_at flags. Input supplies a target topic identifier; the operation returns the created junction entity.","description":"Attach a curated topic to a post by inserting a row into econ_discuss_post_topics. The junction model comment describes uniqueness per (econ_discuss_post_id, econ_discuss_topic_id) and temporal fields including deleted_at for logical removal. The target topic must exist in econ_discuss_topics (which holds code, name, description, and deleted_at) and must not be archived. The parent post must exist in econ_discuss_posts and not be marked as deleted.\n\nSecurity and permissions: Only the post author or privileged roles should manage topic associations. Authorization is represented here as a generic member role; ownership checks and moderator/admin elevation occur in business logic. Rate-limits and content policy constraints (e.g., required 1–5 controlled topics as per business rules) should be enforced server-side.\n\nValidation rules and conflicts: Reject duplicate associations based on the unique constraint in econ_discuss_post_topics; return 409 conflict when the (post, topic) link already exists or when the association was previously retired but policy forbids reactivation. Ensure the topicId is a valid UUID referencing an active topic. If the post is scheduled (scheduled_publish_at set) or unpublished, the association remains valid but will influence discovery upon publication.\n\nRelated operations: Use GET/PATCH /posts/{postId}/topics to read current associations. To remove an association, implement a dedicated endpoint that sets deleted_at on the junction or performs a hard delete per policy (not included here).","summary":"Attach a topic to a post by creating an econ_discuss_post_topics row.","parameters":[{"name":"postId","description":"Target post's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Association creation payload containing the target topic identifier","typeName":"IEconDiscussPostTopic.ICreate"},"responseBody":{"description":"Created post–topic association","typeName":"IEconDiscussPostTopic"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/econDiscuss/member/posts/{postId}/topics","method":"post","prerequisites":[{"endpoint":{"path":"/econDiscuss/admin/topics","method":"post"},"description":"A curated topic must exist before it can be attached to a post. This operation creates the topic (econ_discuss_topics) providing the econ_discuss_topic_id required by the association. Without it, the association creation would fail due to a missing or archived topic."},{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The parent post must be created before adding topic associations. This operation creates the post (econ_discuss_posts) providing the postId referenced by the association; otherwise the attach operation would return not found/validation errors."}]},{"specification":"Remove a topic–post association using the junction table econ_discuss_post_topics. The endpoint targets a specific post (econ_discuss_posts.id) and topic (econ_discuss_topics.id) and disassociates them by marking the junction record as deleted via its deleted_at column. This preserves auditability while removing the topic from the post’s active topic set used for discovery and subscriptions. Authorization checks should ensure only the post author or privileged staff can perform the operation. The operation does not return a response body and should acknowledge success via HTTP 204.","authorizationType":null,"description":"This operation removes a topic association from a post by targeting the junction entity econ_discuss_post_topics that links econ_discuss_posts and econ_discuss_topics. The junction model includes created_at, updated_at, and a deleted_at timestamp used to retire the association without losing audit history. By setting the deleted_at column on the matching (postId, topicId) record, the platform excludes the association from user-facing topic lists and searches while keeping historical traceability.\n\nSecurity and permissions should be enforced so that only the post’s author (identified by econ_discuss_posts.econ_discuss_user_id) or elevated roles (moderator/admin) may disassociate topics. Attempts by other users must result in 403 Forbidden. The operation also validates that both the target post and topic exist and are not already retired; a missing association should produce 404 Not Found. Business logic should also ensure that topic integrity rules (e.g., minimum required controlled tags) remain satisfied after removal, otherwise the provider should reject the request with 409 Conflict and explain which policy would be violated.\n\nThis endpoint interacts with the following Prisma entities: econ_discuss_posts (the authored post), econ_discuss_topics (the curated taxonomy entry), and econ_discuss_post_topics (the many-to-many link). On success, the system updates the deleted_at of the link row rather than physically removing it, allowing restoration flows if needed by governance tools. Errors include 400 for malformed identifiers, 401 for unauthenticated access, 403 for insufficient permission, 404 when the association cannot be located, and 409 when post–topic constraints would be violated.","method":"delete","parameters":[{"name":"postId","description":"Target post identifier (econ_discuss_posts.id).","schema":{"type":"string","format":"uuid"}},{"name":"topicId","description":"Target topic identifier (econ_discuss_topics.id).","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/posts/{postId}/topics/{topicId}","requestBody":null,"responseBody":null,"summary":"Remove a topic association from a post via econ_discuss_post_topics.","authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/admin/topics","method":"post"},"description":"The target topic must exist to define a valid (post, topic) link lifecycle. Creating the topic ensures a valid topicId; without it, removal cannot locate a valid association."},{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The parent post must exist to scope the association being removed. Creating the post provides a valid postId; without it, deletion cannot resolve the junction row."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/topics","method":"post"},"description":"The post–topic association must exist before it can be removed. This operation creates the junction row (econ_discuss_post_topics) so the delete can target it reliably; otherwise a 404 would occur."}]},{"specification":"Retrieve a paginated, filterable index of post versions (snapshots) for a given post using the econ_discuss_post_snapshots table. This endpoint provides complex search parameters in the request body (pagination, sorting, optional version range filters) and returns a paginated result. The response items represent immutable snapshots of a post’s state captured over time, including version, title, body, summary, and the then-current published_at. The path parameter binds the search to a single post (econ_discuss_posts.id).","authorizationType":null,"description":"The econ_discuss_post_snapshots model records immutable versioned copies of a post’s text fields and publication state, keyed by (econ_discuss_post_id, version). Each record includes title, body, optional summary, optional published_at at the time of capture, and timestamps (created_at, updated_at). This endpoint lists those snapshots for a specific post identified by postId. Clients can request pagination and sorting (e.g., by version descending or created_at) and optionally filter by version ranges via the request body.\n\nThis operation is read-only and is typically public, as it exposes the historical states of published content. However, providers should ensure appropriate filtering if the parent post or individual snapshots have been retired via deleted_at or are otherwise restricted by policy. The endpoint only surfaces snapshots where policy permits; if the parent post does not exist, the server should return 404.\n\nRelated entities include econ_discuss_posts (the parent), econ_discuss_post_snapshots (the versions), and joins to econ_discuss_users for the editor/author metadata stored in econ_discuss_post_snapshots.econ_discuss_user_id. Standard errors: 400 for invalid pagination parameters, 404 if the postId is unknown, and 429 if search rate limits are exceeded.","method":"patch","parameters":[{"name":"postId","description":"Target post identifier (econ_discuss_posts.id).","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/posts/{postId}/versions","requestBody":{"description":"Search, filter, sort, and pagination parameters for listing snapshots of the specified post.","typeName":"IEconDiscussPostSnapshot.IRequest"},"responseBody":{"description":"Paginated list of post snapshots for the specified post.","typeName":"IPageIEconDiscussPostSnapshot"},"summary":"Search versions of a post from econ_discuss_post_snapshots with pagination.","authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must exist before its version history (econ_discuss_post_snapshots) can be queried; otherwise the listing returns 404 for unknown postId."}]},{"specification":"Return a basic paginated listing of versions (snapshots) of a post from econ_discuss_post_snapshots without complex request body filters. This complements the PATCH search endpoint by providing a simple GET for default ordering (e.g., newest first). The path parameter constrains the listing to a single post (econ_discuss_posts.id), and the response is a paginated container of snapshot records.","description":"This read-only endpoint enumerates the version history of a post using the econ_discuss_post_snapshots table, which stores immutable snapshots of a post’s title, body, optional summary, and the contemporaneous published_at value. Each snapshot is uniquely identified by (econ_discuss_post_id, version) and carries created_at/updated_at timestamps to support ordering. Implementations should default to a consistent ordering such as version DESC or created_at DESC.\n\nVisibility must respect policy: snapshots linked to posts or records that have been retired via deleted_at should not be exposed to public users unless permitted by governance rules. If the parent post cannot be found, the server returns 404. This endpoint is designed for straightforward listing, while more advanced filtering and sorting are provided by the PATCH variant.\n\nRelated entities: econ_discuss_posts (parent post), econ_discuss_post_snapshots (versions), and econ_discuss_users (editor). Common errors include 400 for malformed identifiers, 404 for missing post, and 429 for rate limits.","summary":"List versions of a post from econ_discuss_post_snapshots (simple listing).","parameters":[{"name":"postId","description":"Target post identifier (econ_discuss_posts.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of post snapshots for the specified post (default ordering).","typeName":"IPageIEconDiscussPostSnapshot"},"authorizationRoles":[],"name":"list","path":"/econDiscuss/posts/{postId}/versions","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must exist before listing its snapshots; without a valid postId the operation should return 404."}]},{"specification":"Fetch a specific post snapshot by its version number for a given post, using the econ_discuss_post_snapshots table keyed by (econ_discuss_post_id, version). The endpoint returns a single version record containing the captured title, body, optional summary, and the post’s published_at at that time, along with timestamps. The path parameters include the post ID and an integer version number.","authorizationType":null,"description":"This operation retrieves a single immutable snapshot from econ_discuss_post_snapshots for the post identified by postId and the specific version number provided in the URL. The snapshot includes the versioned title, body, optional summary, and the published_at value at the time of capture, as defined in the schema comments. These records serve public version history and audit requirements, enabling clients to display precise historical content states.\n\nAccess is typically public for published content; however, providers should apply visibility rules if the post or the snapshot has been retired (deleted_at populated) or restricted by policy. If the parent post or the requested version does not exist, return 404. Implementations should validate that version is a positive integer and handle malformed values with 400 responses.\n\nThis endpoint ties to econ_discuss_posts for the parent and may reference the editor via econ_discuss_post_snapshots.econ_discuss_user_id. Expected errors: 400 for invalid version format, 404 when the snapshot is not found, and 429 for rate limits. The response returns the detailed snapshot entity.","method":"get","parameters":[{"name":"postId","description":"Target post identifier (econ_discuss_posts.id).","schema":{"type":"string","format":"uuid"}},{"name":"version","description":"Version number of the snapshot within the post.","schema":{"type":"integer","format":"int32"}}],"path":"/econDiscuss/posts/{postId}/versions/{version}","requestBody":null,"responseBody":{"description":"Detailed snapshot record for the specified post and version.","typeName":"IEconDiscussPostSnapshot"},"summary":"Get a specific post version (econ_discuss_post_snapshots) by version number.","authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Post must be created before snapshots can exist and be retrieved for a specific version. If the post does not exist, the versioned snapshot lookup will fail with 404."}]},{"specification":"Search and paginate vote records for a specific post, operating on the econ_discuss_post_votes table. This table records one row per (voter user, target post) with key fields: id (UUID), econ_discuss_user_id (voter), econ_discuss_post_id (post), vote_type (\"up\" | \"down\"), status (\"active\" | \"withdrawn\" | \"switched\" | \"discounted\" | \"invalidated\"), status_reason, created_at, updated_at, and deleted_at (deletion timestamp). The endpoint accepts filters and pagination in the request body and returns a paginated collection of summary rows, leveraging table indexes like (econ_discuss_post_id, created_at) and (econ_discuss_user_id, status, created_at).","path":"/econDiscuss/admin/posts/{postId}/votes","method":"patch","summary":"Search and paginate post vote records from econ_discuss_post_votes (admin only).","description":"Retrieve a filtered, paginated list of vote records associated with a given post to support governance, integrity review, and appeals workflows. In the Prisma schema, econ_discuss_post_votes captures a single member’s vote on a post and includes the columns vote_type (allowed values: \"up\" or \"down\") and status (\"active\", \"withdrawn\", \"switched\", \"discounted\", or \"invalidated\"). Time-series analysis and review are aided by indexes on (econ_discuss_post_id, created_at) and (econ_discuss_user_id, status, created_at).\n\nAccess to per-user vote records is sensitive because individual vote choices are private except to the voter; therefore, this operation is intended for authorized staff performing moderation or integrity checks. Client implementations must ensure only appropriately privileged actors invoke this operation. Public surfaces should continue to expose only aggregate counts, and individual users should rely on self-scoped history endpoints for their own votes.\n\nThis operation ties records to posts via econ_discuss_post_id (foreign key to econ_discuss_posts) and to voters via econ_discuss_user_id (foreign key to econ_discuss_users). The unique constraint on (econ_discuss_user_id, econ_discuss_post_id) ensures idempotency for a user’s vote on a given post. Implementations may exclude rows with a non-null deleted_at from active result sets while preserving them in storage for audit purposes. Validation includes checking enum values for vote_type and status, applying created_at date-range bounds, and enforcing page and pageSize limits. Related operations: casting or changing a vote (POST /posts/{postId}/votes) and withdrawing a self vote (DELETE /posts/{postId}/votes/self).","parameters":[{"name":"postId","description":"Target post’s UUID whose votes are being queried","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter set and pagination controls for vote search (type, status, date range, sort)","typeName":"IEconDiscussPostVote.IRequest"},"responseBody":{"description":"Paginated collection of vote summaries that match the filters","typeName":"IPageIEconDiscussPostVote.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Post must exist before querying its associated vote records; otherwise the post-scoped search is invalid and would result in 404."}]},{"specification":"Create or update the authenticated member’s vote on a specific post using the econ_discuss_post_votes table. The request body supplies vote_type (\"up\" | \"down\"). If no prior row exists for (econ_discuss_user_id, econ_discuss_post_id), insert a new record with status=\"active\". If a row exists with a different vote_type, update that row to the new value and transition status (e.g., to \"switched\") while keeping audit timestamps (updated_at) consistent. Idempotent when submitting the same vote_type as already stored.","path":"/econDiscuss/member/posts/{postId}/votes","method":"post","summary":"Cast or change the current member’s vote in econ_discuss_post_votes for a post.","description":"Cast or change the caller’s vote on the target post. The econ_discuss_post_votes model represents a single user’s vote with fields vote_type and status, enforcing one row per user/post via a unique constraint. On initial voting, create a row linked to econ_discuss_posts (via econ_discuss_post_id) and econ_discuss_users (via econ_discuss_user_id), setting status to \"active\". When changing an existing vote within policy windows, update the existing row’s vote_type and status (for example, to \"switched\"), preserving the unique constraint without creating duplicates.\n\nSecurity and policy: the caller must be an authenticated member and eligible to vote (not voting on own content, within quotas, and not restricted by sanctions). This operation should be idempotent; sending the same vote_type for an already matching record succeeds without additional mutations. Integrity or moderation logic may later adjust status to \"discounted\" or \"invalidated\" when necessary per policy.\n\nErrors and behavior: return not found if the post does not exist or is not eligible for voting (e.g., locked/archived). Return validation errors for invalid vote_type. Concurrency is handled via upsert semantics honoring the unique (econ_discuss_user_id, econ_discuss_post_id) constraint. Related operations include listing votes for admins and withdrawing one’s vote (DELETE /posts/{postId}/votes/self).","parameters":[{"name":"postId","description":"UUID of the post to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Desired vote payload with vote_type selection","typeName":"IEconDiscussPostVote.ICreate"},"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Post must be created before a member can cast or change a vote on it; without an existing post the operation cannot proceed."}]},{"specification":"Withdraw the authenticated member’s vote for a specific post by updating the existing econ_discuss_post_votes row to a non-active status (e.g., status=\"withdrawn\"). The unique (econ_discuss_user_id, econ_discuss_post_id) constraint ensures at most one row is affected. Historical evidence is retained for audit through status changes and timestamps rather than physical removal.","path":"/econDiscuss/member/posts/{postId}/votes/self","method":"delete","summary":"Withdraw the caller’s vote by updating status in econ_discuss_post_votes.","description":"Remove the caller’s active vote from the post by transitioning the related econ_discuss_post_votes row to status=\"withdrawn\" while preserving auditability. The schema models lifecycle through the status column with allowed values such as \"active\", \"withdrawn\", \"switched\", \"discounted\", and \"invalidated\". Implementations also maintain created_at and updated_at for historical analysis and rely on indexes such as (econ_discuss_user_id, created_at) for user history queries.\n\nSecurity and policy: the caller must be an authenticated member with an existing vote. Business rules may impose withdrawal windows; after such windows, reject with a policy error. If no vote exists, either respond idempotently with success without change or return not found per policy. This action only affects the caller’s own record; it does not change other users’ votes.\n\nRelated endpoints: POST /posts/{postId}/votes to cast or change a vote and PATCH /posts/{postId}/votes for administrative listing and review. This deletion updates lifecycle state rather than physically deleting the row, maintaining consistency with audit requirements.","parameters":[{"name":"postId","description":"UUID of the post from which the caller withdraws the vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Post must exist to identify the target of the vote being withdrawn; otherwise the operation will fail with 404."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/votes","method":"post"},"description":"An existing vote by the caller must be present on the target post to withdraw it; this prerequisite creates that vote so the withdrawal can succeed."}]},{"specification":"Save a bookmark for the authenticated member on a specific post in econ_discuss_post_bookmarks. The table enforces uniqueness per (econ_discuss_user_id, econ_discuss_post_id) to guarantee idempotent saves. An optional private note can be included using the note column. Repeated saves acknowledge success without duplicating rows; previously retired rows (with a deletion timestamp) may be restored per business policy.","path":"/econDiscuss/member/posts/{postId}/bookmarks","method":"post","summary":"Create a member’s bookmark for a post in econ_discuss_post_bookmarks (idempotent).","description":"Create a personal bookmark for the target post. The econ_discuss_post_bookmarks model contains one row per saved (user, post) and includes columns such as note (owner-only), created_at, updated_at, and a deletion timestamp used by retention logic. A unique (econ_discuss_user_id, econ_discuss_post_id) constraint ensures idempotent behavior when the same post is saved multiple times by the same member.\n\nSecurity and behavior: the caller must be an authenticated member with visibility to the post. The operation should succeed idempotently when already bookmarked and may optionally restore a previously retired record. The note field remains private to the owner and is excluded from any shared views in other parts of the system.\n\nErrors and validation: return not found if the post does not exist or is not visible to the caller. Enforce application-level validations on note length or format where required. Related operations include listing a member’s bookmarks and removing a bookmark, which update or retire the corresponding row as appropriate.","parameters":[{"name":"postId","description":"UUID of the post to bookmark","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Optional private note and context for creating the bookmark","typeName":"IEconDiscussPostBookmark.ICreate"},"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A post must exist before a user can create a bookmark for it. This operation creates the post, providing the postId needed by the bookmark creation endpoint."}]},{"specification":"Remove the authenticated user's bookmark association for a specific post. This operation works against the Interactions schema table econ_discuss_post_bookmarks, which stores per-user saved items for posts with a unique (econ_discuss_user_id, econ_discuss_post_id) constraint and an optional note field for owner-only annotations. The endpoint takes the postId path parameter (UUID) and clears the corresponding bookmark row for the current user. Providers may retire the record by setting deleted_at or perform a hard removal, depending on audit and retention policy. No response body is returned on success.","authorizationType":null,"description":"This endpoint removes the current user's bookmark of a target post identified by postId. It operates on the econ_discuss_post_bookmarks table, which according to the Prisma schema keeps a unique pair of econ_discuss_user_id and econ_discuss_post_id with a created_at and updated_at timeline and a deleted_at column for retiring records. The model also includes an optional note property that remains private to the owner and is not exposed via this endpoint.\n\nSecurity and permissions: only authenticated users can call this API, and the provider must enforce ownership by matching the authenticated user with econ_discuss_user_id. Attempting to remove a bookmark that does not exist should be treated as idempotent success or return a 404 based on product policy; in all cases, no other user's bookmarks are impacted. The operation does not return a response body on success.\n\nRelationship to underlying entities: bookmarks reference posts via econ_discuss_post_id and users via econ_discuss_user_id (both with onDelete Cascade in the schema), ensuring automatic cleanup when either side is deleted. Business logic may choose to retire a record by setting deleted_at for reversibility and audit or permanently delete it when policy allows.\n\nValidation and errors: the postId must be a valid UUID referencing an existing post; if the post is not visible to the user due to policy, the provider should still permit removal of the user’s bookmark record if present. Typical errors include 401 for unauthenticated requests and 403 if cross-user attempts are detected.","summary":"Remove a user's post bookmark in econ_discuss_post_bookmarks","parameters":[{"name":"postId","description":"Target post ID to remove current user’s bookmark for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The target post must exist to reference it when removing a bookmark. This operation creates the post and yields the postId used by the delete endpoint."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/bookmarks","method":"post"},"description":"The bookmark must exist before it can be removed. This operation creates the bookmark record for the current user on the specified post, enabling its subsequent deletion."}],"path":"/econDiscuss/member/posts/{postId}/bookmarks/self","method":"delete"},{"specification":"Search and paginate over the authenticated user’s private post drafts with advanced filters. This operation targets the Articles schema table econ_discuss_post_drafts, which stores private, autosaved drafts (fields include id, econ_discuss_user_id owner, optional econ_discuss_post_id link to published post, title, body, created_at, updated_at, deleted_at). It uses the PATCH method to accept complex request criteria via IEconDiscussPostDraft.IRequest and returns a paginated list IPageIEconDiscussPostDraft.","authorizationType":null,"description":"This endpoint retrieves a filtered, paginated list of the caller’s private drafts from econ_discuss_post_drafts. The schema describes drafts as private, autosaved content owned by a user (econ_discuss_user_id), optionally linked to a published post via econ_discuss_post_id, and timestamped via created_at and updated_at, with deleted_at used to retire discarded drafts. Providers must scope queries to the authenticated user and exclude records where deleted_at is set when listing active drafts.\n\nSecurity and permissions: only authenticated users may access their own drafts. Business rules should ensure that records are filtered by econ_discuss_user_id matching the requester. The endpoint supports advanced search use cases such as partial title matching (leveraging trigram indexes on title/body noted in schema), updated_at ranges for recent work, and default sorting by updated_at desc unless otherwise specified in the request body.\n\nValidation and behavior: the request body IEconDiscussPostDraft.IRequest should include pagination properties (page, pageSize) and optional filters such as q (keyword against title/body), updatedFrom/updatedTo (ISO 8601), and publishedLink (boolean indicating whether econ_discuss_post_id is non-null). Results are returned as IPageIEconDiscussPostDraft, where each draft item includes schema-aligned properties such as id, title, body (optional), econ_discuss_post_id (nullable), and timestamps. Related operations include GET /drafts for a default listing and GET /drafts/{draftId} for detail.","summary":"Search and paginate user’s drafts from econ_discuss_post_drafts","parameters":[],"requestBody":{"description":"Advanced filters, sorting, and pagination for listing drafts","typeName":"IEconDiscussPostDraft.IRequest"},"responseBody":{"description":"Paginated results of private drafts for the authenticated user","typeName":"IPageIEconDiscussPostDraft"},"authorizationRole":"member","name":"index","prerequisites":[],"path":"/econDiscuss/member/drafts","method":"patch"},{"specification":"Retrieve a paginated list of the authenticated user’s private drafts using default criteria. This operation reads from Articles.econ_discuss_post_drafts (private, autosaved, owner-scoped drafts with id, econ_discuss_user_id, optional econ_discuss_post_id, title, body, created_at, updated_at, deleted_at) and returns a paginated container IPageIEconDiscussPostDraft. This GET variant is suitable for simple listings without complex filters; for richer search use PATCH /drafts.","authorizationType":null,"description":"This endpoint lists the caller’s drafts from econ_discuss_post_drafts with default paging and ordering (typically updated_at descending). The Prisma schema comments define drafts as private, autosaved works with optional linkage to a published post via econ_discuss_post_id and timestamps for created_at/updated_at, plus a deleted_at column used to retire discarded drafts. Implementations must ensure results are restricted to the authenticated user via econ_discuss_user_id and that retired drafts (deleted_at not null) are excluded from active listings.\n\nSecurity and permissions: only authenticated users may access this endpoint. The provider enforces ownership and basic pagination. Because GET cannot carry a complex request body, advanced filtering and full-text search should be offered through PATCH /drafts instead.\n\nRelated operations: use PATCH /drafts for complex search, and GET /drafts/{draftId} to retrieve a specific draft object by identifier. Errors include 401 when not authenticated.","summary":"List user’s private drafts from econ_discuss_post_drafts (simple)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of the caller’s drafts","typeName":"IPageIEconDiscussPostDraft"},"authorizationRole":"member","name":"search","prerequisites":[],"path":"/econDiscuss/member/drafts","method":"get"},{"specification":"Retrieve a single private draft by its identifier for the authenticated owner. This operation targets Articles.econ_discuss_post_drafts, which stores draft attributes (id, econ_discuss_user_id owner, optional econ_discuss_post_id link to published post, title/body, created_at, updated_at, deleted_at). It takes the draftId path parameter (UUID) and returns a single IEconDiscussPostDraft object when the requester owns the draft.","authorizationType":null,"description":"This endpoint returns one draft from econ_discuss_post_drafts using its id. The Prisma schema documents drafts as private, autosaved items owned by a user (econ_discuss_user_id) with optional linkage to a published post (econ_discuss_post_id) and timestamps for created_at/updated_at. Implementations must verify ownership by matching the authenticated user to econ_discuss_user_id and ensure that retired drafts (where deleted_at is set) are handled per policy (typically not returned as active).\n\nSecurity and permissions: only authenticated users can access this endpoint, and access is limited to the owner of the draft. A 404 should be returned if the draft does not exist or is not accessible by the current user. This endpoint is commonly used to resume editing, coordinate autosave synchronization, and prepare for publishing the draft into a post.\n\nRelated operations: PATCH /drafts supports list/search of multiple drafts, and GET /drafts provides a simple paginated listing. Publishing is managed by a separate endpoint outside this set (e.g., POST /drafts/{id}/publish) where implemented.","summary":"Get a single draft from econ_discuss_post_drafts by ID","parameters":[{"name":"draftId","description":"Identifier of the draft to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested draft details","typeName":"IEconDiscussPostDraft"},"authorizationRole":"member","name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/drafts","method":"post"},"description":"Draft must be created before it can be retrieved by its ID; this operation generates the draftId referenced in the path."}],"path":"/econDiscuss/member/drafts/{draftId}","method":"get"},{"specification":"Create a private long-form draft owned by the authenticated account. This operation persists a new record in the Prisma table Actors/Articles: econ_discuss_post_drafts. The row captures the owner via econ_discuss_user_id (FK to econ_discuss_users), optional title/body for early autosave workflows, timestamps (created_at/updated_at), and an optional linkage econ_discuss_post_id if/when the draft results in a published post (econ_discuss_posts). The table also includes a deleted_at column used to represent discarded drafts without permanent removal. On success, the API returns the created draft resource for client-side editing and autosave synchronization.","authorizationType":null,"description":"This endpoint creates a new draft for long-form authoring using the econ_discuss_post_drafts table. Per the schema comments, drafts are private, autosaved artifacts that support cross-device workflows before publication. The model provides optional title and body fields so early autosave can occur before the author determines final content. Ownership is recorded through econ_discuss_user_id and the created_at/updated_at timestamps are populated for ordering and concurrency behaviors.\n\nSecurity and permissions follow the business rules: only authenticated members may create drafts. The draft is private to the owner; it is not discoverable through public content surfaces until published. The operation writes to econ_discuss_post_drafts and does not touch publication entities such as econ_discuss_posts. If a client needs to publish later, use the dedicated publish endpoint which will create the post and link it back using econ_discuss_post_id.\n\nThe database relationship is explicit: econ_discuss_post_drafts.author references econ_discuss_users, and an optional publishedPost relation references econ_discuss_posts through econ_discuss_post_id. No soft deletion occurs during creation; however, the model supports soft deletion via deleted_at for future discard operations.\n\nValidation and business logic: title and body are optional in the draft stage by design (see schema comments) to support early autosave. Clients typically include minimal fields on first save and expand during editing. The API must ensure the created draft belongs to the authenticated user by setting econ_discuss_user_id accordingly.\n\nRelated operations: clients usually call PUT /drafts/{draftId} to update content, DELETE /drafts/{draftId} to discard via soft deletion, and POST /drafts/{draftId}/publish to create a post from the draft. Error handling includes 401 for unauthenticated requests and 429 per platform rate limits during burst autosaves.","summary":"Create a new draft in econ_discuss_post_drafts for the authenticated user","parameters":[],"requestBody":{"description":"Creation payload for a private draft. Title/body are optional to support early autosave.","typeName":"IEconDiscussPostDraft.ICreate"},"responseBody":{"description":"Created draft record with identifiers and timestamps for continued editing.","typeName":"IEconDiscussPostDraft"},"authorizationRole":"member","name":"create","prerequisites":[],"path":"/econDiscuss/member/drafts","method":"post"},{"specification":"Update an existing private draft record in the Prisma table econ_discuss_post_drafts. The operation locates the draft by path parameter {draftId} (UUID), verifies ownership against econ_discuss_user_id, and persists changes to fields such as title and body while refreshing updated_at. The table’s deleted_at is not modified by this operation. The endpoint returns the updated draft for client synchronization.","authorizationType":null,"description":"This endpoint updates a draft stored in econ_discuss_post_drafts, which, per schema comments, supports private autosave and cross-device editing prior to publication. The model contains optional title and body fields so that clients can perform frequent partial saves. The server sets updated_at to reflect the most recent change.\n\nSecurity and permissions: only the owner (econ_discuss_user_id) may modify a draft. The draft remains private; no post visibility changes occur here. If the draft has been previously linked to a published post via econ_discuss_post_id, the link remains intact; updating the draft does not alter the published post. Publication is performed exclusively through the publish endpoint.\n\nDatabase relationship context: econ_discuss_post_drafts.user references econ_discuss_users and optionally references econ_discuss_posts via econ_discuss_post_id. The operation should reject updates to soft-deleted drafts where deleted_at is set, or treat them as not found based on service policy.\n\nValidation and business logic: because title and body are optional in the schema, the update accepts partial fields. The API must ensure the path parameter draftId is a valid UUID referencing an existing row, and that the authenticated user is the owner. Related operations include creating drafts (POST /drafts), discarding drafts via soft deletion (DELETE /drafts/{draftId}), and publication (POST /drafts/{draftId}/publish).\n\nError handling covers: 400 for malformed UUID, 401 for unauthenticated requests, 403 when the caller is not the owner, 404 if the draft does not exist or is discarded, and 409 if business invariants would be violated by the requested change.","summary":"Update an existing draft (econ_discuss_post_drafts) by ID","parameters":[{"name":"draftId","description":"Identifier of the target draft (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on a private draft. Accepts partial fields like title/body.","typeName":"IEconDiscussPostDraft.IUpdate"},"responseBody":{"description":"The updated draft record after applying changes.","typeName":"IEconDiscussPostDraft"},"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/drafts","method":"post"},"description":"Draft must exist before it can be updated; creating a draft provides a valid draftId and ensures ownership context."}],"path":"/econDiscuss/member/drafts/{draftId}","method":"put"},{"specification":"Discard a draft by marking its soft deletion timestamp (deleted_at) in the Prisma table econ_discuss_post_drafts. The endpoint identifies the draft using {draftId} (UUID), verifies ownership, and sets deleted_at to the current time. No permanent removal occurs, aligning with the schema’s soft deletion design. The draft will no longer appear in active lists but remains retained for audit or recovery windows per policy.","authorizationType":null,"description":"This endpoint performs a discard operation on a draft by updating the econ_discuss_post_drafts.deleted_at column. The schema explicitly documents a soft deletion timestamp when the draft is discarded, indicating that removal from active use should not permanently delete the row. This preserves auditability and enables potential restore workflows if the service later adds them.\n\nSecurity and permissions: only the authenticated owner (econ_discuss_user_id) can discard their own draft. The operation does not affect any published content in econ_discuss_posts if econ_discuss_post_id is present; it only changes the draft’s lifecycle state.\n\nDatabase relations and behavior: econ_discuss_post_drafts references econ_discuss_users (owner) and may optionally reference econ_discuss_posts. Setting deleted_at hides the draft from normal retrievals. Subsequent update attempts should be rejected as the draft is no longer active. The operation returns no content upon success.\n\nError handling: 400 for malformed UUID, 401 for unauthenticated requests, 403 for non-owners, and 404 if the draft is not found or is already discarded. This is a soft deletion per the schema; records are not physically removed.","summary":"Discard a draft by setting deleted_at in econ_discuss_post_drafts","parameters":[{"name":"draftId","description":"Identifier of the draft to discard (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/drafts","method":"post"},"description":"Draft must exist before it can be discarded (soft-deleted); creating a draft provides the draftId used in this operation."}],"path":"/econDiscuss/member/drafts/{draftId}","method":"delete"},{"specification":"Publish a draft into a post by creating/updating the associated Post record in the Prisma table econ_discuss_posts and linking it from the draft via econ_discuss_post_id. The post captures author (econ_discuss_user_id), required title/body, timestamps (created_at/updated_at), and publication state published_at (and optionally scheduled_publish_at if supported in other flows). This endpoint performs immediate publication (no request body) and returns the resulting Post resource.","authorizationType":null,"description":"This endpoint publishes content from a draft in econ_discuss_post_drafts by creating a post in econ_discuss_posts and linking the draft via econ_discuss_post_id. As documented in the schema, econ_discuss_posts stores the human-readable title, full body, optional summary, and publication timestamps including published_at and optional scheduled_publish_at. On publish here, the service performs immediate publication by setting published_at and persisting the new post row (or reusing an existing linked post if the service defines idempotency for repeated calls).\n\nSecurity and permissions: only the draft owner may publish. Because econ_discuss_posts requires title and body at publication time, the server validates that the draft contains non-null title and body. If validation fails, the server returns a validation error and leaves the draft unchanged.\n\nDatabase relationships: econ_discuss_posts.author references econ_discuss_users; econ_discuss_post_drafts.publishedPost references econ_discuss_posts via econ_discuss_post_id. The operation also integrates with related entities in later workflows (e.g., topic associations via econ_discuss_post_topics, snapshots via econ_discuss_post_snapshots) though this endpoint itself focuses on core post creation from the draft.\n\nRelated operations: create drafts (POST /drafts), edit drafts (PUT /drafts/{draftId}), and optionally discard drafts (DELETE /drafts/{draftId}). Error handling includes 400 for malformed UUID, 401 unauthenticated, 403 not owner, 404 draft not found or discarded, and 409 if the draft is already published and the service treats re-publish as conflict.\n\nNote on timestamps and timezone: the database stores timestamps in UTC (Timestamptz). Client-facing displays should honor the user’s configured timezone (e.g., Asia/Seoul) and locale when rendering publish times.","summary":"Publish a draft to a post (creates econ_discuss_posts and links from econ_discuss_post_drafts)","parameters":[{"name":"draftId","description":"Identifier of the draft to publish (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The newly created (or existing linked) post produced from this draft.","typeName":"IEconDiscussPost"},"authorizationRole":"member","name":"publish","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/drafts","method":"post"},"description":"A draft must exist to provide draftId before it can be published into a post. If no draft exists, publish will fail (e.g., 404 not found) and no post can be created or linked via econ_discuss_post_drafts.econ_discuss_post_id."}],"path":"/econDiscuss/member/drafts/{draftId}/publish","method":"post"},{"specification":"Retrieve the poll configuration attached to a specific post. This reads from the econ_discuss_polls table, which has a one-to-one relationship with econ_discuss_posts through the unique foreign key econ_discuss_post_id. The operation returns core poll attributes defined in the Prisma schema, including question, question_type (single_choice, multiple_choice, likert, ranking, numeric_estimate), visibility_mode (hidden_until_close, visible_after_vote, always_visible), expert_only flag, allow_vote_change, optional eligibility thresholds (min_voter_reputation, min_account_age_hours), per-type constraints (min_selections, max_selections, scale_points, scale_min_label, scale_max_label, scale_mid_label, unit_label, numeric_min, numeric_max, numeric_step), and scheduling (start_at, end_at). While answer options are stored in econ_discuss_poll_options and responses in econ_discuss_poll_responses, this endpoint focuses on configuration retrieval.","authorizationType":null,"description":"This GET endpoint returns the poll configuration for the given post based on the econ_discuss_polls table. According to the Prisma comments, econ_discuss_polls captures the question prompt, question_type (single_choice, multiple_choice, likert, ranking, numeric_estimate), visibility_mode (hidden_until_close, visible_after_vote, always_visible), an expert_only boolean gate, allow_vote_change, optional eligibility thresholds (min_voter_reputation, min_account_age_hours), per-type configuration (min_selections, max_selections for multiple choice; scale_points and endpoint labels for likert; unit_label and numeric_min/numeric_max/numeric_step for numeric estimates), and scheduling via start_at and end_at timestamps.\n\nSecurity and visibility: This is a read-only operation that does not expose respondent identities or individual response data from econ_discuss_poll_responses. It should respect policy signals implied by visibility_mode and expert_only when clients later decide whether to show running results; those behaviors are handled in other endpoints. If a row exists with a deletion timestamp (deleted_at), providers SHOULD return 404 to signal the poll is unavailable.\n\nRelationships: Options are stored in econ_discuss_poll_options (unique option_text and position per poll). Responses are in econ_discuss_poll_responses with selection rows in econ_discuss_poll_response_options. This operation does not modify any of those tables and returns 404 when no poll is associated with the specified post (no econ_discuss_polls row for the given econ_discuss_post_id).","summary":"Get poll configuration for a post (econ_discuss_polls).","parameters":[{"name":"postId","description":"Target post’s UUID that hosts the poll.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Poll configuration attached to the specified post.","typeName":"IEconDiscussPoll"},"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The host post must exist to supply postId. Without a valid post, the poll configuration cannot be retrieved for that context."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"A poll must be created for the target post before it can be retrieved. Otherwise, GET returns 404 because no econ_discuss_polls row exists for the given postId."}],"path":"/econDiscuss/posts/{postId}/poll","method":"get"},{"specification":"Create and attach a poll to a specific post by inserting a row into econ_discuss_polls and creating its answer choices in econ_discuss_poll_options. The association is enforced by the unique econ_discuss_post_id foreign key, guaranteeing at most one poll per post. The request body IEconDiscussPoll.ICreate maps to the Prisma columns (question, question_type, visibility_mode, expert_only, allow_vote_change, eligibility thresholds, per-type constraints, and start/end scheduling) and includes the options to persist.","authorizationType":null,"description":"This POST endpoint creates a poll for the specified post using the econ_discuss_polls table fields described in the Prisma schema: question, question_type (single_choice, multiple_choice, likert, ranking, numeric_estimate), visibility_mode (hidden_until_close, visible_after_vote, always_visible), expert_only, allow_vote_change, min_voter_reputation, min_account_age_hours, min_selections/max_selections for multiple choice, likert scale parameters (scale_points with endpoint/mid labels), numeric parameters (unit_label, numeric_min/numeric_max/numeric_step), and start_at/end_at scheduling. Options are saved in econ_discuss_poll_options with per-poll uniqueness on option_text and position.\n\nPermissions and validation: Only authenticated members (e.g., post authors or authorized users) can create a poll. Enforce one‑poll‑per‑post via the unique econ_discuss_post_id constraint. Validate that provided parameters satisfy business and schema rules such as min_selections ≤ max_selections, numeric_min < numeric_max, numeric_step > 0, and start_at < end_at when both are provided. Ensure question_type and visibility_mode values align with policy constraints, including expert_only implications.\n\nRelated operations: Use GET /posts/{postId}/poll to read back the configuration, PUT /posts/{postId}/poll to adjust allowed fields later, and DELETE /posts/{postId}/poll to retire the poll by marking it deleted. Errors include 404 if the post does not exist, 409 when a poll already exists for the post, and 400 for invalid payloads.","summary":"Create a poll for a post (econ_discuss_polls and options).","parameters":[{"name":"postId","description":"Target post’s UUID that will host the poll.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Poll configuration and options to create.","typeName":"IEconDiscussPoll.ICreate"},"responseBody":{"description":"The newly created poll attached to the post.","typeName":"IEconDiscussPoll"},"authorizationRole":"member","name":"create","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The target post must exist to host the poll. This creates the postId referenced by econ_discuss_polls.econ_discuss_post_id."}],"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},{"specification":"Update an existing poll attached to a specific post by modifying the econ_discuss_polls row (and, if allowed, its options in econ_discuss_poll_options). The request body IEconDiscussPoll.IUpdate carries the fields to change, respecting lifecycle constraints (e.g., restricting structural changes after responses have begun).","authorizationType":null,"description":"This PUT endpoint updates the poll in econ_discuss_polls associated with the given post (via econ_discuss_post_id). Per the Prisma comments, editable fields include question, visibility_mode, eligibility thresholds (min_voter_reputation, min_account_age_hours), per-type parameters (min/max selections for multiple choice, likert scale configuration, numeric bounds and step), and start/end scheduling. Business rules commonly restrict structural changes such as question_type or option set once responses exist in econ_discuss_poll_responses or the start time has passed; providers should enforce those constraints while allowing benign text clarifications.\n\nAuthorization and validation: Only authenticated members with appropriate privileges may update the poll. Validate that updated values remain consistent with schema constraints (e.g., numeric_min < numeric_max, valid scale_points, min_selections ≤ max_selections). If options are updated, maintain uniqueness on option_text and position within econ_discuss_poll_options.\n\nError handling and related endpoints: Return 404 if the poll or post is not found or the poll is already retired (deleted_at populated). Return 400 for invalid updates or policies violated, and 409 for conflicts such as disallowed structural changes. Clients can retrieve the current configuration via GET /posts/{postId}/poll and retire the poll using DELETE /posts/{postId}/poll.","summary":"Update a post’s poll (econ_discuss_polls).","parameters":[{"name":"postId","description":"Target post’s UUID hosting the poll to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the poll, respecting lifecycle constraints.","typeName":"IEconDiscussPoll.IUpdate"},"responseBody":{"description":"The updated poll configuration.","typeName":"IEconDiscussPoll"},"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The host post must exist to resolve postId and locate the associated econ_discuss_polls row to update."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The poll must already exist for the specified post before it can be updated; otherwise the update would fail (e.g., 404 not found)."}],"path":"/econDiscuss/member/posts/{postId}/poll","method":"put"},{"specification":"Retire the poll associated with a specific post by setting its deletion timestamp in econ_discuss_polls (deleted_at). Subsequent reads should consider the poll unavailable. This operation may additionally handle related econ_discuss_poll_options visibility in business logic, while preserving response records in econ_discuss_poll_responses for audit.","authorizationType":null,"description":"This DELETE endpoint marks the poll linked to the given post as deleted by setting the deleted_at timestamp in econ_discuss_polls. As described in the Prisma comments, deleted_at indicates removal from active use while retaining records for audit and history. After this action, GET /posts/{postId}/poll should return 404 because the poll is no longer active.\n\nSecurity and behavior: Only authenticated members with the proper rights (e.g., the post author or governance roles) can perform this operation. Providers should verify the post and poll exist and are currently active (deleted_at is null) before proceeding. Treat repeated requests as idempotent: if already marked deleted, the operation should succeed without further changes.\n\nErrors and related operations: Return 404 if no active poll exists for the specified post, and 403 when the caller lacks permission. Related operations include POST to create a new poll, GET to read configuration, and PUT to update allowable fields prior to retirement.","summary":"Delete a post’s poll by setting deleted_at (econ_discuss_polls).","parameters":[{"name":"postId","description":"Target post’s UUID hosting the poll to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A post must be created before its associated poll can exist and be deleted. Deleting a poll for a non-existent post would fail with not found."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The poll must already exist for the given post before it can be retired (deleted_at set). Without an existing poll, the delete operation should return not found or no-op."}],"path":"/econDiscuss/member/posts/{postId}/poll","method":"delete"},{"specification":"Retrieve a filtered, paginated list of poll options for the poll attached to a specific post. This operation targets the econ_discuss_poll_options table in Prisma, which stores option_text and position for each option and links to the parent poll via econ_discuss_poll_id. The parent poll is uniquely associated to the post through econ_discuss_polls (unique econ_discuss_post_id). The endpoint returns summary information suitable for list UIs and supports pagination, optional text search, and sorted ordering (commonly by position).","authorizationType":null,"description":"This operation lists poll options for the poll that belongs to the specified post. At the database level, options are stored in the econ_discuss_poll_options table, which includes columns id (UUID), econ_discuss_poll_id (UUID FK), option_text (String), position (Int), created_at (timestamp with time zone), updated_at (timestamp with time zone), and deleted_at (timestamp with time zone). Options are linked to the parent poll in econ_discuss_polls via econ_discuss_poll_id. The parent poll is itself one-to-one with the post in econ_discuss_posts through a unique constraint on econ_discuss_post_id.\n\nSecurity and authorization are handled by business logic. Read access to published poll options is typically public. The controller/provider should verify that the given postId exists and that a poll exists for it. Role- and policy-based filtering can be applied as needed (for example, hiding options for unsupported question types), but this endpoint itself is designed as a public read surface.\n\nThis list operation supports pagination and optional searching by option_text. The provider may default sorting to position ascending to reflect the intended display order defined by the position column in econ_discuss_poll_options. Records where deleted_at is not null should be excluded by default. If the post has no poll configured, return an empty page rather than an error.\n\nRelated operations include creating new options (POST /posts/{postId}/poll/options), retrieving a specific option (GET /posts/{postId}/poll/options/{optionId}), and updating an option (PUT /posts/{postId}/poll/options/{optionId}). Errors include 404 when the post does not exist, 400 for malformed pagination parameters, and 500 for unexpected failures.","summary":"List poll options for a post’s poll (Prisma: econ_discuss_poll_options)","parameters":[{"name":"postId","description":"Post identifier whose poll’s options are being listed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for listing poll options","typeName":"IEconDiscussPollOption.IRequest"},"responseBody":{"description":"Paginated list of poll option summaries for the post’s poll","typeName":"IPageIEconDiscussPollOption.ISummary"},"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The target post must exist to list options for its poll. Listing under a non-existent post would result in not found; when the post exists but no poll is configured, the endpoint may return an empty page."}],"path":"/econDiscuss/posts/{postId}/poll/options","method":"patch"},{"specification":"Retrieve a specific poll option by ID for the poll attached to a specific post. This operation reads from the econ_discuss_poll_options table in Prisma and validates that the option belongs to the poll uniquely associated to the given post (via econ_discuss_polls unique econ_discuss_post_id).","authorizationType":null,"description":"This operation returns a single poll option record after verifying context. In the Prisma schema, the econ_discuss_poll_options table contains id (UUID), econ_discuss_poll_id (UUID FK), option_text (String), position (Int), created_at, updated_at, and deleted_at. The parent poll is in econ_discuss_polls and is uniquely associated to a post in econ_discuss_posts through econ_discuss_post_id.\n\nFor security, read access to poll options is typically public; however, the provider must ensure the specified optionId indeed belongs to the poll attached to postId. If the option’s deleted_at is not null or if the post has no poll, the resource should be treated as not found. This operation does not change data and does not require authentication for public polls; business logic may still apply policy checks.\n\nValidation rules include confirming that the post exists, that a poll exists for that post, and that the option belongs to that poll. Expected errors are 404 when any of these checks fail, 400 for invalid UUID formats in path parameters, and 500 on unexpected failures.","summary":"Get a specific poll option by ID for a post’s poll (Prisma: econ_discuss_poll_options)","parameters":[{"name":"postId","description":"Post identifier whose poll owns the target option","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Target poll option’s ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed poll option resource","typeName":"IEconDiscussPollOption"},"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must exist to scope the poll and its options. Without the post, the option retrieval under that post context cannot be validated."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"A poll must exist for the specified post because options belong to a poll uniquely attached to that post. Without a poll, the option cannot belong to the post’s poll."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"The specific poll option must be created before it can be retrieved by ID; otherwise the GET will return not found."}],"path":"/econDiscuss/posts/{postId}/poll/options/{optionId}","method":"get"},{"specification":"Create a new poll option for the poll attached to a specific post. This operation writes to the econ_discuss_poll_options table in Prisma, inserting option_text and position associated with the parent poll (resolved via econ_discuss_polls unique relation to the post). It enforces uniqueness per poll for (option_text) and (position).","authorizationType":null,"description":"This operation appends a new option to the poll that belongs to the given post. Storage is in econ_discuss_poll_options, which includes id, econ_discuss_poll_id, option_text, position, created_at, updated_at, and deleted_at columns. The parent poll must exist in econ_discuss_polls for the specified post (unique econ_discuss_post_id). For question types that utilize options (single_choice, multiple_choice, ranking), creation is permitted; for types like likert and numeric_estimate, business logic should prevent creation or ignore options according to policy.\n\nSecurity considerations: only authenticated users with rights to modify the poll (typically the post owner or privileged staff) can create options. This endpoint requires authentication and performs authorization/ownership checks in the provider. The provider should also normalize and validate option_text, and assign or validate position while respecting the unique constraints (econ_discuss_poll_id, option_text) and (econ_discuss_poll_id, position). If a duplicate is attempted, return a conflict error.\n\nValidation and error handling: verify the postId exists and has a poll; validate that the request body includes a non-empty option_text and a valid position integer if provided; ensure deleted options are not reused in a way that violates uniqueness without proper handling. Typical errors: 400 on validation failure, 401 when unauthenticated, 403 when not authorized to modify the poll, 404 if the post or poll is missing, 409 on uniqueness violation, and 500 for unexpected errors.","summary":"Create a new poll option for a post’s poll (Prisma: econ_discuss_poll_options)","parameters":[{"name":"postId","description":"Post identifier whose poll will receive the new option","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation payload for a poll option, including option text and ordering","typeName":"IEconDiscussPollOption.ICreate"},"responseBody":{"description":"Created poll option with identifiers and timestamps","typeName":"IEconDiscussPollOption"},"authorizationRole":"member","name":"create","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must be created first because the poll (and its options) are hosted under a post."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"A poll must exist for the post before options can be added; options reference the parent poll via econ_discuss_poll_id."}],"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},{"specification":"Update an existing poll option for the poll attached to a specific post. This operation updates records in the econ_discuss_poll_options table in Prisma, modifying fields such as option_text and position, while ensuring the option belongs to the post’s poll (econ_discuss_polls linked uniquely by econ_discuss_post_id).","authorizationType":null,"description":"This operation updates a poll option identified by optionId under the poll associated with the given postId. The underlying table econ_discuss_poll_options stores option_text and position and enforces uniqueness within each poll for both fields combined with the poll FK. The provider must ensure the target option belongs to the poll attached to the specified post, and that the new values respect uniqueness and ordering constraints.\n\nSecurity: authenticated users with appropriate permissions (typically the post owner or privileged roles) may update options. The provider should enforce authorization and ownership checks. Records with deleted_at not null should be considered unavailable for updates.\n\nValidation and business rules: ensure non-empty option_text when provided; validate position as an integer consistent with intended display order; prevent duplication across (econ_discuss_poll_id, option_text) and (econ_discuss_poll_id, position). For polls whose question_type does not utilize options, providers should reject updates with a clear validation error. Expected errors: 400 for validation issues, 401 for unauthenticated, 403 for unauthorized, 404 when the post/poll/option is not found or is not associated as required, 409 for uniqueness conflicts, and 500 on unexpected failures.","summary":"Update an existing poll option for a post’s poll (Prisma: econ_discuss_poll_options)","parameters":[{"name":"postId","description":"Post identifier whose poll owns the option being updated","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Target poll option’s ID to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for a poll option, such as text or position changes","typeName":"IEconDiscussPollOption.IUpdate"},"responseBody":{"description":"Updated poll option with new values applied","typeName":"IEconDiscussPollOption"},"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must be created before a poll (and its options) can exist under it."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The poll for the specified post must be created before its options can be managed."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"The specific poll option must be created before it can be updated."}],"path":"/econDiscuss/member/posts/{postId}/poll/options/{optionId}","method":"put"},{"specification":"Remove a specific poll option belonging to the poll attached to a given post. This operation targets the econ_discuss_poll_options table, which stores per-poll answer options linked to econ_discuss_polls (one poll per econ_discuss_posts). It validates that the target post has a poll (econ_discuss_polls with unique econ_discuss_post_id), ensures the option exists for that poll, and then performs a removal by updating the option record so it is excluded from active lists via the deleted_at timestamp field. Business rules should prevent removal once a poll has started collecting responses, aligning with integrity requirements. This endpoint is intended for governance staff workflows (e.g., moderators) managing poll configuration within allowed windows.","authorizationType":null,"description":"This endpoint removes a single answer option from the poll associated with the specified post. According to the Prisma schema, econ_discuss_polls has a one-to-one relationship with econ_discuss_posts via econ_discuss_post_id, and the available options are stored in econ_discuss_poll_options with a per-poll uniqueness constraint across option_text and position. The option record includes created_at, updated_at, and a deleted_at timestamp used to retire options while preserving history for audits and result integrity.\n\nSecurity considerations apply: only authorized governance roles should be able to remove options, and application logic should enforce timing restrictions (for example, disallowing removal after responses have been collected to preserve result validity). The request must reference both the post identifier (postId) and the option identifier (optionId) to precisely target the option under the correct poll context. The system should also verify there is exactly one poll for the post as enforced by the econ_discuss_polls uniqueness on econ_discuss_post_id.\n\nFrom a database perspective, this relates to econ_discuss_poll_options (primary) and validates existence against econ_discuss_polls and econ_discuss_posts. The option row contains option_text and position fields for display order and uniqueness per poll. Removal should mark the record with a deleted_at timestamp so it is excluded from active queries while preserving audit integrity per the schema’s temporal columns.\n\nError handling should include: 404 when the post or poll or option does not exist or is already removed, 409 when business rules disallow removal (e.g., votes already recorded in econ_discuss_poll_responses), and 403 if the caller lacks permission. Related operations include poll response submission and listing, which depend on stable option sets.","method":"delete","parameters":[{"name":"postId","description":"Identifier of the host post whose poll owns the option","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Identifier of the poll option to remove","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/moderator/posts/{postId}/poll/options/{optionId}","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must be created to host a poll and its options."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The poll attached to the post must exist before any of its options can be removed."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"The target poll option must be created before it can be retired (soft-deleted)."}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","summary":"Remove a poll option (econ_discuss_poll_options) for a post’s poll","name":"erase"},{"specification":"Retrieve a filtered and paginated list of poll responses for the poll attached to a post. This operation is centered on the econ_discuss_poll_responses table, which records one response per (poll, user) with lifecycle status and type-specific values. It supports complex searching via a request body (IEconDiscussPollResponse.IRequest), including filters on status, date ranges, and respondent identifiers, and returns a paginated collection using IPageIEconDiscussPollResponse. This endpoint is designed for governance and analysis workflows that require access to response-level data rather than public aggregates.","authorizationType":null,"description":"This operation lists responses from econ_discuss_poll_responses that belong to the poll uniquely associated with the specified post (via econ_discuss_polls.econ_discuss_post_id). The response model includes fields such as status (active, withdrawn, quarantined, invalidated), created_at, updated_at, and optional values corresponding to question types (likert_value, numeric_value). For multiple-choice and ranking questions, selections are recorded in econ_discuss_poll_response_options, which can be joined as needed for detailed inspection.\n\nBecause response-level data can be sensitive, access should be limited to governance roles. The endpoint accepts a structured request body (IEconDiscussPollResponse.IRequest) to support complex filtering: status filters, respondent user constraints, created_at ranges, and sorting/pagination parameters. The result returns a page container (IPageIEconDiscussPollResponse) for consistent pagination semantics.\n\nThe underlying tables referenced include econ_discuss_polls (one-to-one with econ_discuss_posts), econ_discuss_poll_responses (primary dataset), and optionally econ_discuss_poll_response_options for selection details. Validation ensures that the target post has an associated poll and that requested filters are applied only to responses within that poll context.\n\nTypical errors include 404 when the target post or poll does not exist, and 403 when the caller is not authorized. This operation complements the detail retrieval of an individual response and the response submission API. It does not modify data and is suitable for internal dashboards and audits.","method":"patch","parameters":[{"name":"postId","description":"Identifier of the post whose poll responses are being queried","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/moderator/posts/{postId}/poll/responses","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must exist to scope the poll and its responses."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The poll must be created for the post; responses can only be listed if a poll exists."}],"requestBody":{"description":"Filtering, sorting, and pagination criteria for poll responses","typeName":"IEconDiscussPollResponse.IRequest"},"responseBody":{"description":"Paginated collection of poll responses matching the filters","typeName":"IPageIEconDiscussPollResponse"},"authorizationRole":"moderator","summary":"Search and list poll responses (econ_discuss_poll_responses) for a post","name":"index"},{"specification":"Submit a new poll response for the poll attached to a given post. This operation writes to econ_discuss_poll_responses and, for multi-select or ranking question types, to econ_discuss_poll_response_options. It enforces one response per (poll, user) as defined by the unique constraint, aligns with poll configuration in econ_discuss_polls (question_type, visibility_mode, allow_vote_change, eligibility fields), and respects eligibility gates (e.g., expert_only, min_voter_reputation, min_account_age_hours). The request body follows IEconDiscussPollResponse.ICreate and returns no content on success.","authorizationType":null,"description":"This endpoint records a member’s response to the poll associated with the provided post. The econ_discuss_polls table defines configuration such as question_type (single_choice, multiple_choice, likert, ranking, numeric_estimate), visibility_mode, expert_only flag, allow_vote_change, and optional eligibility constraints like min_voter_reputation and min_account_age_hours. The response itself is stored in econ_discuss_poll_responses with status (typically active on acceptance), created_at, and type-specific value columns (likert_value or numeric_value). When selections involve options (single/multiple/ranking), the chosen options are recorded via econ_discuss_poll_response_options linked to the response.\n\nBusiness logic must ensure idempotency and uniqueness per (poll, user) as enforced by the schema’s unique composite key. If allow_vote_change is enabled and the poll is still open (between start_at and end_at), subsequent submissions may switch or overwrite prior values within policy. The endpoint should validate that the post has a poll (econ_discuss_polls unique per post), that the poll is open for participation, and that the caller meets eligibility constraints. On success, the operation returns no body (204 semantics) to align with lightweight interaction patterns.\n\nError handling should cover: 400 for invalid payloads relative to question type (e.g., out-of-range likert_value), 401/403 for unauthenticated or ineligible users (including expert-only), 404 for missing post/poll, 409 for duplicate responses when vote-change is not allowed, and 422 for attempts after closure. This operation complements listing and detail retrieval endpoints for governance and auditing purposes.","method":"post","parameters":[{"name":"postId","description":"Identifier of the host post whose poll is being answered","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/posts/{postId}/poll/responses","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A post must exist to host the poll that accepts responses."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The poll must be created for the post before it can accept responses."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"For option-based question types (single_choice, multiple_choice, ranking), options must exist before a response referencing optionId(s) can be recorded."}],"requestBody":{"description":"Poll response payload compatible with the poll’s question type","typeName":"IEconDiscussPollResponse.ICreate"},"responseBody":null,"authorizationRole":"member","summary":"Submit a poll response (econ_discuss_poll_responses) for a post’s poll","name":"create"},{"specification":"Retrieve a single poll response by its identifier within the context of the poll attached to a post. This operation reads from econ_discuss_poll_responses and may include related selections from econ_discuss_poll_response_options depending on representation. It ensures the response belongs to the poll uniquely associated with the given post (via econ_discuss_polls.econ_discuss_post_id).","authorizationType":null,"description":"This endpoint returns detailed information about one poll response linked to the poll for the specified post. The econ_discuss_poll_responses table stores per-user responses with fields including status (active, withdrawn, quarantined, invalidated), created_at, updated_at, and type-specific values (likert_value or numeric_value). For question types involving predefined options, the selections are represented in econ_discuss_poll_response_options and can be included by the provider when building the IEconDiscussPollResponse representation.\n\nAccess should be restricted: end users typically may only view their own response, while governance roles may view others where policy permits. The controller/provider should perform ownership or permission checks and return 404 or 403 appropriately. Validation also confirms that the response belongs to the poll that is uniquely tied to the given post via econ_discuss_polls.\n\nExpected errors include 404 when the response does not exist or does not belong to the post’s poll, and 403 for insufficient permissions. This operation complements the poll response creation and the moderation-oriented list operation.","method":"get","parameters":[{"name":"postId","description":"Identifier of the post whose poll contains the response","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Identifier of the poll response to retrieve","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A Post must be created so that a poll can be attached to it and any responses can belong to that post’s poll."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The Poll for the given post must exist because the response is scoped to the post’s unique poll."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"The specific poll response must be created before it can be retrieved by its ID."}],"requestBody":null,"responseBody":{"description":"Detailed poll response resource including type-specific fields","typeName":"IEconDiscussPollResponse"},"authorizationRole":"member","summary":"Get a specific poll response (econ_discuss_poll_responses) by ID for a post","name":"at"},{"specification":"Update a poll response record associated to a specific post and poll using the econ_discuss_poll_responses table. This operation lets an authenticated user modify mutable fields on their existing response, including status (e.g., withdrawn, quarantined, invalidated by governance), or the scalar value fields used by particular question types: likert_value for Likert questions and numeric_value for numeric_estimate questions. It does not manage option selections for single_choice, multiple_choice, or ranking types; those are controlled via the econ_discuss_poll_response_options junction and exposed by dedicated options endpoints documented separately. The response to this update returns the updated IEconDiscussPollResponse resource for client reconciliation.","authorizationType":null,"description":"This endpoint updates a single poll response row in the econ_discuss_poll_responses table. Per the Prisma schema, a response belongs to a poll (econ_discuss_polls) which itself is one-to-one with a host post (econ_discuss_posts). The response row includes: status (active, withdrawn, quarantined, invalidated), likert_value for Likert-type questions, numeric_value for numeric estimate questions, and lifecycle timestamps like created_at, updated_at, withdrawn_at, and deleted_at. Use this endpoint when the response needs to change scalar values or lifecycle state — for example, a user withdrawing their response or adjusting a Likert score within the allowed change window.\n\nSecurity and permissions: only the authenticated owner of the response should be permitted to update it, except in governance scenarios where moderators or admins may set status to quarantined or invalidated. Business logic SHOULD enforce poll-level gating configured in econ_discuss_polls, such as allow_vote_change, start_at/end_at windows, min_voter_reputation, and min_account_age_hours. If the poll is closed (end_at passed) and allow_vote_change is false, attempts to edit SHOULD be rejected with a validation error.\n\nEntity relations and constraints: econ_discuss_poll_responses has a unique constraint on (econ_discuss_poll_id, econ_discuss_user_id), ensuring exactly one response per user per poll. For question types driven by options (single_choice, multiple_choice, ranking), use the companion options endpoints to edit selections in the econ_discuss_poll_response_options table; this update endpoint should not attempt to modify option selections. For Likert or numeric types, validate that likert_value is within the poll’s scale_points range and that numeric_value is within numeric_min/numeric_max with numeric_step rounding as defined in econ_discuss_polls.\n\nValidation and error handling: reject edits that violate poll configuration (e.g., changing after closure, failing eligibility checks), or attempts to set values that are incompatible with the poll’s question_type. Reference-related errors include mismatched postId/responseId (e.g., response does not belong to the poll under the given post). Return standard errors for 400 (validation), 403 (forbidden), and 404 (not found). Related endpoints include POST /polls/{pollId}/responses for creation, DELETE of this response for withdrawal, and the options management endpoints for selection changes.","summary":"Update a poll response (econ_discuss_poll_responses) for a post","parameters":[{"name":"postId","description":"Host post ID that owns the poll for this response","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Target poll response ID to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed to update on a poll response: status (e.g., withdrawn), or scalar values likert_value / numeric_value according to poll question_type","typeName":"IEconDiscussPollResponse.IUpdate"},"responseBody":{"description":"The updated poll response after applying changes","typeName":"IEconDiscussPollResponse"},"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A Post must exist before its poll and associated responses can be updated."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The Poll tied to the post must exist to validate the response’s association and enforce poll rules."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"The target poll response must exist before it can be updated."}],"path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}","method":"put"},{"specification":"Remove/withdraw a poll response for a given post by targeting the econ_discuss_poll_responses table. Rather than physically deleting related history, this operation should mark the response as withdrawn (status transition) and persist lifecycle timestamps like withdrawn_at and deleted_at (per schema) to preserve auditability. No response body is returned on success to keep semantics consistent with destructive actions.","authorizationType":null,"description":"This endpoint deletes a single response in the sense of making it non-participating going forward. In econ_discuss_poll_responses, the schema supports lifecycle management through status, withdrawn_at, updated_at, and a deleted_at timestamp. Implementations SHOULD transition status to withdrawn and record appropriate timestamps so that historical audit of the response remains possible, matching the schema’s lifecycle intent.\n\nSecurity and permissions: only the authenticated owner of the response should be able to withdraw it under normal circumstances. Moderation workflows may also remove or invalidate responses when integrity anomalies are detected (e.g., set status to invalidated), but those governance paths remain separate. Business rules SHOULD prohibit withdrawals after the poll has closed when such behavior is disallowed by policy; if withdrawals are allowed while open and within the permitted window, execute the lifecycle transition.\n\nRelationships and expectations: the response belongs to a poll (econ_discuss_polls) that is one-to-one with a post (econ_discuss_posts). Ensure the responseId corresponds to the given postId via its poll association; otherwise return 404. Removing a response should also remove its effect from aggregates and segments, and associated econ_discuss_poll_response_options rows should no longer be counted. Error cases include 403 for forbidden withdrawal, and 404 for nonexistent or mismatched identifiers.","summary":"Withdraw/delete a poll response (econ_discuss_poll_responses) for a post","parameters":[{"name":"postId","description":"Host post ID that owns the poll for this response","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Target poll response ID to withdraw/delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A Post must exist to host the poll whose response is being withdrawn."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The Poll for the post must exist to confirm the response belongs to it before withdrawal."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"The poll response must be created before it can be withdrawn (deleted/marked withdrawn)."}],"path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}","method":"delete"},{"specification":"Replace the option selections for a poll response using the econ_discuss_poll_response_options junction table, scoped under a specific post and response. This operation is used for option-based question types (single_choice, multiple_choice, ranking). It atomically resets the selection set to the exact set provided, enforcing constraints from econ_discuss_polls such as min_selections, max_selections, and unique ranking positions. Returns the updated IEconDiscussPollResponse for client reconciliation.","description":"This endpoint updates option selections for a given response by replacing the entire selection set in econ_discuss_poll_response_options. The schema models selections with a response-to-option link and an optional position for ranking questions. For multiple_choice, the number of selected options must respect min_selections and max_selections on econ_discuss_polls; for single_choice, exactly one option should be provided; for ranking, each provided option may include a unique position (1..N) with no duplicates.\n\nSecurity and permissions: only the authenticated owner of the response may modify selections, and the server SHOULD enforce allow_vote_change=true, poll open windows (start_at/end_at), and user eligibility (min_voter_reputation, min_account_age_hours) from econ_discuss_polls. If the poll is closed or edits are disallowed, the server SHOULD return 400/403 with an explanatory message.\n\nData integrity and validation: all option IDs in the request MUST belong to the same poll tied to the response, or the request MUST be rejected. For ranking, positions MUST be unique and within bounds of provided options; for multiple_choice/single_choice, positions SHOULD be omitted. The operation should delete any prior econ_discuss_poll_response_options rows not present in the new set, then insert or update rows to match the provided list. Related operations include POST to add options incrementally and the response PUT endpoint for scalar updates (likert_value or numeric_value).","summary":"Replace selection options for a poll response (econ_discuss_poll_response_options)","parameters":[{"name":"postId","description":"Host post ID that owns the poll for this response","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Target poll response ID whose selections will be replaced","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complete set of option selections for this response. For multiple_choice provide 1..N optionIds; for single_choice provide exactly 1; for ranking include positions.","typeName":"IEconDiscussPollResponseOption.IRequest"},"responseBody":{"description":"The poll response after applying the replacement selection set","typeName":"IEconDiscussPollResponse"},"authorizationRoles":["member"],"name":"patchByPostidAndResponseid","path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options","method":"patch","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A Post must be created to host the poll and its responses."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"The Poll must exist for the post to allow managing response option selections under it."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"Poll options must exist so that provided optionIds/positions reference valid options when replacing selections."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"The poll response must exist before its option selections can be replaced."}]},{"specification":"Add one or more option selections to an existing poll response using the econ_discuss_poll_response_options table, under a specific post and response. Intended for incremental selection in multiple_choice or establishing ranked positions for ranking questions without replacing existing selections. Enforces per-poll constraints (min/max selections, uniqueness, and ranking position rules). Returns the updated IEconDiscussPollResponse.","authorizationType":null,"description":"This endpoint appends option selections to the current response’s selection set. Per schema, econ_discuss_poll_response_options links a response to options with an optional position for ranking questions. For multiple_choice, ensure that after adding, the total selections do not exceed max_selections defined on econ_discuss_polls. For single_choice questions, clients SHOULD NOT use this endpoint (use the PATCH replacement instead) because only one selection is permitted. For ranking, each added option may include a position that must be unique and within the 1..N range, and must not conflict with existing positions.\n\nSecurity and permissions: only the authenticated owner may append selections, and the server SHOULD enforce allow_vote_change=true, active poll windows (start_at/end_at), and eligibility checks (min_voter_reputation, min_account_age_hours). If the response belongs to a poll that is closed or change is disallowed, reject with 400/403 accordingly.\n\nValidation and integrity: all option IDs must reference options from the same poll; duplicates with existing selections must be rejected. For ranking, adding an option with a position already taken must fail validation. This operation does not remove prior selections; use the PATCH endpoint for replacement semantics. Related operations include the PATCH options replacement endpoint, the response PUT endpoint for scalar value updates, and the DELETE response endpoint for withdrawal.","summary":"Add option selections to a poll response (econ_discuss_poll_response_options)","parameters":[{"name":"postId","description":"Host post ID that owns the poll for this response","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Target poll response ID to which options will be added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Options to append to the existing selection set. Provide optionIds (and positions for ranking). Reject duplicates or capacity violations.","typeName":"IEconDiscussPollResponseOption.ICreate"},"responseBody":{"description":"The poll response after adding the provided selections","typeName":"IEconDiscussPollResponse"},"authorizationRole":"member","name":"addOptions","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Creates the parent post that owns the poll. The post must exist to scope the poll and its responses under {postId}."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"Creates the poll associated with the post. A poll must exist for {postId} so that responses and option selections have a valid poll context."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"Creates at least one poll option for the post’s poll, providing optionId values that can be appended to the response."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"Creates the poll response under the post’s poll, providing responseId so that options can be added to this existing response."}],"path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options","method":"post"},{"specification":"Replace the option selections for a poll response using the econ_discuss_poll_response_options junction table, scoped under a specific post and response. This operation is used for option-based question types (single_choice, multiple_choice, ranking). It atomically resets the selection set to the exact set provided, enforcing constraints from econ_discuss_polls such as min_selections, max_selections, and unique ranking positions. Returns the updated IEconDiscussPollResponse for client reconciliation.","authorizationType":null,"description":"This endpoint updates option selections for a given response by replacing the entire selection set in econ_discuss_poll_response_options. The schema models selections with a response-to-option link and an optional position for ranking questions. For multiple_choice, the number of selected options must respect min_selections and max_selections on econ_discuss_polls; for single_choice, exactly one option should be provided; for ranking, each provided option may include a unique position (1..N) with no duplicates.\n\nSecurity and permissions: only the authenticated owner of the response may modify selections, and the server SHOULD enforce allow_vote_change=true, poll open windows (start_at/end_at), and user eligibility (min_voter_reputation, min_account_age_hours) from econ_discuss_polls. If the poll is closed or edits are disallowed, the server SHOULD return 400/403 with an explanatory message.\n\nData integrity and validation: all option IDs in the request MUST belong to the same poll tied to the response, or the request MUST be rejected. For ranking, positions MUST be unique and within bounds of provided options; for multiple_choice/single_choice, positions SHOULD be omitted. The operation should delete any prior econ_discuss_poll_response_options rows not present in the new set, then insert or update rows to match the provided list. Related operations include POST to add options incrementally and the response PUT endpoint for scalar updates (likert_value or numeric_value).","summary":"Replace selection options for a poll response (econ_discuss_poll_response_options)","parameters":[{"name":"postId","description":"Host post ID that owns the poll for this response","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Target poll response ID whose selections will be replaced","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complete set of option selections for this response. For multiple_choice provide 1..N optionIds; for single_choice provide exactly 1; for ranking include positions.","typeName":"IEconDiscussPollResponseOption.IRequest"},"responseBody":{"description":"The poll response after applying the replacement selection set","typeName":"IEconDiscussPollResponse"},"authorizationRole":"member","name":"putByPostidAndResponseid","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Creates the parent post that owns the poll. The post must exist to scope the poll and its responses under {postId}."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"Creates the poll associated with the post. A poll must exist for {postId} so that responses and option selections have a valid poll context."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"Creates poll options under the post’s poll so that the replacement set has valid optionId values for the response."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"Creates the poll response under the post’s poll, providing responseId to which the selection set will be replaced."}],"path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options","method":"put"},{"specification":"Retrieve a single poll response option row for a specific response within a poll attached to a post. This operates on the Prisma table econ_discuss_poll_response_options (junction between econ_discuss_poll_responses and econ_discuss_poll_options). The endpoint verifies the hierarchical relationship: postId → poll (econ_discuss_polls, 1:1 with posts) → responseId (econ_discuss_poll_responses for that poll) → responseOptionId (econ_discuss_poll_response_options for that response). Returns the selected option record, including ranking position when applicable. Privacy is critical: raw selections are user-private; controller/provider must enforce that only the response owner (or authorized staff) can access.","path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options/{responseOptionId}","method":"get","summary":"Get a specific response option (econ_discuss_poll_response_options) for a poll response","description":"Fetch a single poll response option entry associated with a respondent’s selection. According to the Prisma schema, econ_discuss_poll_response_options is a junction table that links a response (econ_discuss_poll_responses.id) to one selected option (econ_discuss_poll_options.id), with an optional position field used when the question type is ranking. Each row represents either one of multiple selections (multiple_choice) or the sole selection (single_choice), and persists even if the author’s account is anonymized, per auditability rules in the schema comments.\n\nSecurity and privacy considerations: the schema for econ_discuss_poll_responses explicitly models response status states (active, withdrawn, quarantined, invalidated), and the platform’s business rules require that individual selections are private. Implementations must restrict access so that only the response owner (econ_discuss_users.id matching the authenticated user), or authorized moderation/admin roles, can read raw selection rows. This endpoint should therefore be protected for authenticated users and perform ownership checks; public aggregation is exposed via the separate results endpoint.\n\nEntity relationships: the path requires a valid postId that owns a poll (econ_discuss_polls with unique econ_discuss_post_id), then a responseId that belongs to that poll (econ_discuss_poll_responses with unique (poll,user)), then a responseOptionId that belongs to that response (econ_discuss_poll_response_options). The provider should verify these relationships to prevent IDOR issues. The returned object corresponds to IEconDiscussPollResponseOption, reflecting fields from econ_discuss_poll_response_options (ids, foreign keys, position, created_at/updated_at).\n\nValidation and errors: return 404 if the response or option does not exist under the specified post’s poll; 403 if the caller is not permitted to see raw response content; 409 if state prohibits reading (e.g., response invalidated and hidden by policy). Timestamps are ISO 8601 strings; follow the standard error model.","parameters":[{"name":"postId","description":"Host post ID (UUID) that owns the poll","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Poll response ID (UUID) belonging to the post’s poll","schema":{"type":"string","format":"uuid"}},{"name":"responseOptionId","description":"Response option row ID (UUID) within the response","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Response option record including ranking position if applicable","typeName":"IEconDiscussPollResponseOption"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Creates the parent post that owns the poll. The post must exist to scope the poll and its responses under {postId}."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"Creates the poll associated with the post. A poll must exist for {postId} so that response options can be resolved."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"Creates poll options for the post’s poll so response-option rows can reference valid optionId values."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"Creates the poll response to which response options belong, providing responseId for scoping."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options","method":"post"},"description":"Appends selections to create response-option rows, providing responseOptionId values that can be retrieved by this GET operation."}]},{"specification":"Update a poll response option row for a specific response within a post’s poll. This updates a record in econ_discuss_poll_response_options. Allowed updates include changing the linked option (econ_discuss_poll_option_id) when policy permits (e.g., within vote-change window) and/or updating ranking position for ranking questions. The operation validates ownership (caller is the response owner) and that the response belongs to the poll of the given postId.","path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options/{responseOptionId}","method":"put","summary":"Update a response option row in econ_discuss_poll_response_options","description":"Modify the selected option row linked to a poll response. The econ_discuss_poll_response_options table stores the mapping between a response (econ_discuss_poll_responses) and a selected option (econ_discuss_poll_options), with an optional position used for ranking questions. Per schema comments, these rows are retained for history, with deleted_at supporting removal while preserving auditability.\n\nSecurity and permissions: because raw selections are private, only the response owner (econ_discuss_poll_responses.econ_discuss_user_id) or authorized staff may update this row. Implementation must also enforce business rules from econDiscuss polls: for example, allow updates only if allow_vote_change is true on econ_discuss_polls and the poll is within its open window (start_at/end_at). For ranking, position may be adjusted; for multiple_choice, switching the option may be allowed; for single_choice, updates typically replace the selected option.\n\nValidation and relationships: verify that postId → poll (econ_discuss_polls.econ_discuss_post_id) exists, that responseId belongs to that poll (via econ_discuss_poll_responses.econ_discuss_poll_id), and that responseOptionId belongs to the response (econ_discuss_poll_response_options.econ_discuss_poll_response_id). Return 404 for non-existent chains or mismatches; 403 on permission failures; 409 if the response is in a terminal status (withdrawn/invalidated) or the poll configuration disallows changes.\n\nError handling and auditing: apply standard error model with clear messages, and record changes for auditability. Timestamps are ISO 8601 strings in responses.","parameters":[{"name":"postId","description":"Host post ID (UUID) that owns the poll","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Poll response ID (UUID) belonging to the post’s poll","schema":{"type":"string","format":"uuid"}},{"name":"responseOptionId","description":"Response option row ID (UUID) within the response","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the response option (e.g., econ_discuss_poll_option_id and/or ranking position) within policy constraints","typeName":"IEconDiscussPollResponseOption.IUpdate"},"responseBody":{"description":"Updated response option record","typeName":"IEconDiscussPollResponseOption"},"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Creates the parent post that owns the poll. The post must exist to scope the poll and its responses under {postId}."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"Creates the poll associated with the post. A poll must exist for {postId} so that response options have a valid context."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/options","method":"post"},"description":"Creates poll options under the post’s poll, supplying valid optionId values for updates to the response-option row."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"Creates the poll response under the post’s poll, providing responseId that owns the response-option row to be updated."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options","method":"post"},"description":"Appends selections to create the specific response-option row that yields responseOptionId, which is required to perform an update on that row."}]},{"specification":"Delete (remove) a poll response option row from a response for the poll attached to a post. This targets econ_discuss_poll_response_options. Implementations should prefer marking the record deleted using the deleted_at column provided by the Prisma model, preserving auditability. Enforce that the response belongs to the given post’s poll and the caller is the response owner or authorized staff.","path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options/{responseOptionId}","method":"delete","summary":"Remove a response option (econ_discuss_poll_response_options) from a poll response","description":"Remove a selected option entry from a poll response. In the Prisma schema, econ_discuss_poll_response_options includes a deleted_at field to support reversible removals. Business logic should honor polling policy: e.g., allow removal only when allow_vote_change is true and the poll window is still open, or when a withdrawal process is invoked. For ranking questions, deletion removes that ranked item from the user’s ordering; for multiple choice, it unselects that option.\n\nSecurity and relationships: enforce that postId resolves to a poll (econ_discuss_polls unique per post), responseId belongs to that poll, and responseOptionId belongs to the response. Only the response owner or authorized moderators/admins may remove selections. Return 404 for missing resources, 403 for permission issues, and 409 if removal conflicts with poll state (e.g., closed or response invalidated by moderation).\n\nBehavior and auditing: This operation typically sets deleted_at on the response-option record; records so marked are excluded from tallies. No body is returned on success.","parameters":[{"name":"postId","description":"Host post ID (UUID) that owns the poll","schema":{"type":"string","format":"uuid"}},{"name":"responseId","description":"Poll response ID (UUID) belonging to the post’s poll","schema":{"type":"string","format":"uuid"}},{"name":"responseOptionId","description":"Response option row ID (UUID) within the response","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The host post must be created first; responses and selections can only belong to a poll attached to an existing post."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"A poll must exist on the post before any responses or response-option rows can be present."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses","method":"post"},"description":"The poll response must exist before a specific response-option row can be removed from it."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll/responses/{responseId}/options","method":"post"},"description":"A response-option (selection) must have been created on the response before it can be deleted by ID."}]},{"specification":"Retrieve aggregated poll results for the poll attached to a specific post. Aggregations are computed from econ_discuss_polls (configuration), econ_discuss_poll_options (answer choices), and econ_discuss_poll_responses with econ_discuss_poll_response_options (selections). Applies privacy protections such as visibility_mode and minimum segment thresholds at the service layer. Returns a computed results object, not a direct table row.","path":"/econDiscuss/posts/{postId}/poll/results","method":"get","summary":"Get aggregated poll results derived from poll/response tables","description":"Get aggregated results for the poll associated with a post. The Prisma schema defines econ_discuss_polls (question, type, expert_only, visibility_mode, allow_vote_change, start_at/end_at), answer options in econ_discuss_poll_options, and respondent data in econ_discuss_poll_responses and econ_discuss_poll_response_options. This endpoint must not reveal individual responses; instead, it publishes aggregate counts and, when applicable, rankings or numeric summaries.\n\nSecurity and visibility: results must respect econ_discuss_polls.visibility_mode. For hidden_until_close, do not return running results before end_at; for visible_after_vote, require the caller to have a recorded econ_discuss_poll_responses row; for always_visible, show running totals. Additionally, apply any minimum thresholds for segments as per business rules (e.g., hide segments that do not meet k-anonymity). The endpoint is read-only and typically public; enforcement of expert_only participation does not imply restricted read access unless policy dictates.\n\nValidation and behavior: verify that the postId has a poll (econ_discuss_polls unique on econ_discuss_post_id). Calculate option counts using econ_discuss_poll_response_options (including ranking positions if needed) and include totalResponses. Exclude responses marked quarantined/invalidated from tallies as required by integrity policy. Return 404 when the post has no poll, and 409 when policy forbids showing results at this time. Timestamps are in ISO 8601 where included, and the standard error model applies.","parameters":[{"name":"postId","description":"Host post ID (UUID) that owns the poll","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Aggregated poll results object honoring visibility and privacy policies","typeName":"IEconDiscussPollResults"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must exist to host a poll whose results are being requested."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"A poll must be created for the post; without a poll there are no aggregates to return."}]},{"specification":"Return aggregated poll results for a single post’s poll. This operation targets the Polls domain and reads from the following Prisma tables: econ_discuss_polls (one-to-one with a post), econ_discuss_poll_options (the set of options), econ_discuss_poll_responses (per-user response with status and value fields), and econ_discuss_poll_response_options (multi-select/ranking selections). It computes privacy-preserving aggregates and supports client-provided result parameters (e.g., segmentation flags, window normalization, pagination on breakdown lists if applicable) through a request body DTO. It never creates, updates, or deletes data; it only reads and aggregates.","authorizationType":null,"description":"Compute and return aggregated results for the poll attached to a specific post. The underlying schema stores one poll per post in econ_discuss_polls, with configuration fields such as question (text), question_type (single_choice, multiple_choice, likert, ranking, numeric_estimate), visibility_mode (hidden_until_close, visible_after_vote, always_visible), expert_only (boolean), allow_vote_change (boolean), optional min_voter_reputation and min_account_age_hours, and the start_at/end_at schedule (all as timestamptz). Options are stored in econ_discuss_poll_options with per-poll uniqueness and ordering via position. Respondent data lives in econ_discuss_poll_responses with status (active, withdrawn, quarantined, invalidated), and type-specific values (likert_value, numeric_value). For multiple-choice and ranking types, selected options are in econ_discuss_poll_response_options with an optional position for ranking.\n\nSecurity and visibility rules follow the poll’s business configuration and policy. For example, if visibility_mode is hidden_until_close and the poll has not ended (end_at), the service must return either a minimal envelope or deny access to running tallies according to application policy. For expert_only polls, the results may still be viewable by the public after close, but the provider should consult policy before exposing running tallies. Records with deleted_at set in any of the relevant tables are treated as inactive and excluded from results. The endpoint itself is public for read, but the provider must enforce the poll’s visibility constraints derived from econ_discuss_polls.\n\nThis operation is related to detail retrieval of the poll configuration (e.g., GET /posts/{postId}/poll) which can inform clients of question_type, visibility_mode, and schedule before requesting results. Validation includes ensuring the postId maps to an existing econ_discuss_posts row that has an attached econ_discuss_polls row, verifying schedule windows (start_at and end_at) against current time, and applying minimum segment thresholds if the provider supports segmented outputs. If the poll is not found or visibility rules prevent disclosure, return a not-found or appropriate denial. Error handling should surface invalid states (e.g., question_type unsupported) as 400-level errors and missing resources as 404.","summary":"Aggregate and return poll results for a post’s poll (econ_discuss_polls and related tables).","parameters":[{"name":"postId","description":"Target post’s ID that hosts the poll","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Result computation parameters (e.g., segmentation controls, normalization window, pagination for option-level breakdowns)","typeName":"IEconDiscussPollResult.IRequest"},"responseBody":{"description":"Aggregated poll results including option counts/percentages or type-appropriate summaries with policy-aware visibility","typeName":"IEconDiscussPollResult"},"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The post must exist to host a poll whose results are being computed."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/poll","method":"post"},"description":"A poll must be created for the post; without a poll there are no aggregates to compute."}],"path":"/econDiscuss/posts/{postId}/poll/results","method":"patch"},{"specification":"Search and list live discussion threads with advanced filters. Operates on econ_discuss_live_threads as the primary table with joins to econ_discuss_posts (one-to-one per post) and econ_discuss_users (host_user_id). Supports filtering by state (scheduled, waiting, live, paused, ended, archived), expert_only flag, access_scope (public, followers_only, topic_subscribers_only, invite_only), scheduled_start_at/started_at time windows, host_user_id, and text search over post context if the provider exposes it. Returns a paginated summary list for discovery/admin pages.","authorizationType":null,"description":"Retrieve a filtered, paginated index of live discussion threads. The backing schema econ_discuss_live_threads tracks lifecycle fields state, scheduled_start_at, started_at, paused_at, ended_at, archived_at, as well as governance flags expert_only and access_scope and performance affordances like slow_mode_interval_seconds. Timestamps are stored as timestamptz. Because there is exactly one live thread per post (unique econ_discuss_post_id), clients can tie threads to their host content in econ_discuss_posts for display contexts.\n\nSecurity considerations: this read endpoint is public, but business logic should exclude threads that the current viewer cannot access (e.g., invite_only without authorization) and any rows marked inactive via deleted_at. The access_scope influences who may view or participate; this index should list only those threads visible to the requester. For curated or role-restricted views, the provider may add further filtering based on current user privileges.\n\nValidation and behavior: the request body supports pagination (page, pageSize), sorting (e.g., created_at or started_at desc), and filters by state, expert_only, access_scope, host_user_id, and scheduled time ranges. The response returns a paginated summary optimized for list UIs, including identifiers, current state, key timestamps, host reference, and flags. Related operations include GET /liveThreads/{liveThreadId} for detail retrieval and GET /posts/{postId}/live to fetch the thread bound to a specific post.","summary":"Search and paginate live threads (econ_discuss_live_threads) with filters and sorting.","parameters":[],"requestBody":{"description":"Filter, sort, and paginate live threads (state, expert_only, access_scope, host, time windows)","typeName":"IEconDiscussLiveThread.IRequest"},"responseBody":{"description":"Paginated list of live thread summaries matching the filters","typeName":"IPageIEconDiscussLiveThread.ISummary"},"authorizationRole":null,"name":"index","prerequisites":[],"path":"/econDiscuss/liveThreads","method":"patch"},{"specification":"Retrieve a single live thread by its identifier. Primary table: econ_discuss_live_threads. Includes lifecycle fields (state, timestamps), flags (expert_only, access_scope), and ownership via host_user_id. May also reference message counts from econ_discuss_live_messages for display, but the core resource comes from econ_discuss_live_threads.","authorizationType":null,"description":"Return the full live thread resource identified by liveThreadId. The econ_discuss_live_threads schema includes state (scheduled, waiting, live, paused, ended, archived), scheduling/transition timestamps (scheduled_start_at, started_at, paused_at, ended_at, archived_at), an expert_only boolean, access_scope string, and slow_mode_interval_seconds. Associations link to the host post (econ_discuss_post_id) and the host user (host_user_id). Timestamps are timestamptz and should be serialized as ISO 8601.\n\nSecurity and visibility: although the route is public read, provider logic must enforce access_scope and exclude records where deleted_at is set. If the thread is invite_only and the requester lacks permission, a 404 or forbidden should be returned according to policy. For archived threads, content remains readable but participation is disabled by state.\n\nValidation and related operations: validate that the identifier is a proper UUID and that the record exists. For message retrieval use the dedicated messages route (e.g., per-post live messages), while this endpoint returns the thread’s metadata and current state. Related discovery is provided by PATCH /liveThreads for search and by GET /posts/{postId}/live to fetch a thread via its host post.","summary":"Get a live thread by ID from econ_discuss_live_threads.","parameters":[{"name":"liveThreadId","description":"Identifier of the target live thread","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed live thread resource with lifecycle fields, flags, host, and post linkage","typeName":"IEconDiscussLiveThread"},"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"A live thread must exist before it can be retrieved by its ID. This operation creates the live thread resource that provides the liveThreadId used by the GET endpoint."}],"path":"/econDiscuss/liveThreads/{liveThreadId}","method":"get"},{"specification":"Fetch the live thread attached to a specific post. Operates on econ_discuss_live_threads with a one-to-one relation to econ_discuss_posts via econ_discuss_post_id (unique). This read returns the thread resource if present, enabling clients to discover the room metadata from a post context without knowing the thread ID.","authorizationType":null,"description":"Return the live thread bound to a post identified by postId. The econ_discuss_live_threads schema guarantees at most one thread per post (unique econ_discuss_post_id). The resource includes state transitions (scheduled_start_at, started_at, paused_at, ended_at, archived_at), configuration flags (expert_only, access_scope), host_user_id, and optional slow_mode_interval_seconds. All timestamp columns are timestamptz.\n\nSecurity: public read with policy-based filtering. Records with deleted_at set are considered inactive and must not be returned. If access_scope limits visibility (e.g., invite_only), the provider should respond with denial or not-found for unauthorized viewers, consistent with policy. This endpoint is read-only and does not modify state.\n\nValidation and related endpoints: validate postId format and existence of a corresponding econ_discuss_posts row. If no live thread exists for the post, return 404. For searching threads across posts use PATCH /liveThreads, and for direct ID-based retrieval use GET /liveThreads/{liveThreadId}.","summary":"Get the live thread associated with a post (econ_discuss_live_threads via post relation).","parameters":[{"name":"postId","description":"Identifier of the host post to which the live thread is attached","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Live thread resource for the given post if present","typeName":"IEconDiscussLiveThread"},"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The host post must exist to reference its associated live thread by postId."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"The live thread must be created for the specified post; otherwise the lookup by postId will return not found."}],"path":"/econDiscuss/posts/{postId}/live","method":"get"},{"specification":"Create a live discussion thread record for a specific post using the econ_discuss_live_threads table. The endpoint attaches a single live thread to a post (one-to-one enforced by @@unique([econ_discuss_post_id])) and initializes configuration such as expert-only mode, access scope, scheduled start, and optional slow mode. It also sets the initial lifecycle state (scheduled or waiting/live) consistent with application rules. This operation validates that the parent post exists in econ_discuss_posts and that no other live thread exists for the same post. It returns the newly created IEconDiscussLiveThread resource with identifiers and timestamps populated from the database.","path":"/econDiscuss/member/posts/{postId}/live","method":"post","summary":"Create a live thread for a post (econ_discuss_live_threads)","description":"Create a new live discussion thread for the given post. The econ_discuss_live_threads model defines a one-to-one relationship to posts via econ_discuss_post_id and enforces uniqueness, ensuring each post can host at most one live thread. The table stores lifecycle state in the state column with allowed values managed by application logic (scheduled, waiting, live, paused, ended, archived). It also includes expert_only and access_scope flags to control participation and visibility, as well as timestamps such as scheduled_start_at, started_at, paused_at, ended_at, and archived_at for operational workflows.\n\nSecurity and permissions should ensure only authorized users can create a live thread (typically the post’s author as host, or elevated roles per policy). The host_user_id column links ownership to econ_discuss_users. Moderation and governance policies may require 2FA for moderators/admins, but authentication and enforcement occur at the controller/service level.\n\nThe operation validates that the parent post exists in econ_discuss_posts (referenced by econ_discuss_post_id) and that a live thread does not already exist for the post (unique constraint). It accepts optional configuration such as expert_only participation, access_scope values (public, followers_only, topic_subscribers_only, invite_only), a scheduled_start_at when scheduling, and slow_mode_interval_seconds to limit message frequency. On success, it returns the created live thread with server-populated identifiers and timestamps. Common errors include 404 when the post is not found and 409 when a live thread already exists for the specified post.","parameters":[{"name":"postId","description":"Target post’s ID to host the live thread","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Initial configuration and state for the new live thread","typeName":"IEconDiscussLiveThread.ICreate"},"responseBody":{"description":"Created live thread resource with identifiers and timestamps","typeName":"IEconDiscussLiveThread"},"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A post must be created before attaching a one-to-one live thread to it."}]},{"specification":"Update configuration and/or lifecycle state for a post’s live discussion thread using the econ_discuss_live_threads table. This operation modifies fields such as state (scheduled, waiting, live, paused, ended, archived), expert_only, access_scope, and slow_mode_interval_seconds. Server logic sets operational timestamps (e.g., started_at, paused_at, ended_at, archived_at) based on requested transitions. The target live thread is identified by the parent post’s ID via the one-to-one relation enforced by @@unique([econ_discuss_post_id]).","path":"/econDiscuss/member/posts/{postId}/live","method":"put","summary":"Update a post’s live thread (econ_discuss_live_threads)","description":"Update the existing live thread associated with the given post. The econ_discuss_live_threads model stores the lifecycle state (state) and configuration flags including expert_only and access_scope. It also maintains operational timestamps such as scheduled_start_at, started_at, paused_at, ended_at, and archived_at to accurately record room activity transitions.\n\nSecurity considerations: only the host_user_id (the owner in econ_discuss_live_threads) or authorized staff (e.g., moderators/admins) may perform updates. Policy may require 2FA for elevated roles (see econ_discuss_moderators.enforced_2fa and econ_discuss_admins.enforced_2fa). Authorization checks and session handling occur outside this contract.\n\nBusiness rules: Allowed state transitions are enforced in service logic, for example: scheduled → waiting/live; live → paused/ended; ended → archived. Configuration like expert_only, access_scope, and slow_mode_interval_seconds can be adjusted when permitted by policy and thread state. The operation also validates that a live thread exists for the specified post and returns 404 if not found. It returns the updated live thread including any new timestamps set as a result of state changes.","parameters":[{"name":"postId","description":"Target post’s ID owning the live thread to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to modify on the live thread, including state transitions and settings","typeName":"IEconDiscussLiveThread.IUpdate"},"responseBody":{"description":"Updated live thread resource after applying changes","typeName":"IEconDiscussLiveThread"},"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"The host post must exist to identify which live thread is being updated via its one-to-one relation."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"An existing live thread is required before it can be updated for the given post."}]},{"specification":"Remove a post’s live discussion thread from active use by marking the record in econ_discuss_live_threads as deleted (setting deleted_at). The target resource is identified by the unique one-to-one relation with econ_discuss_posts (econ_discuss_post_id). This operation performs a logical removal so that the live thread no longer appears in active listings, while preserving auditability of the record and related timestamps.","path":"/econDiscuss/member/posts/{postId}/live","method":"delete","summary":"Delete a post’s live thread by marking deleted_at (econ_discuss_live_threads)","description":"Delete the live thread associated with the specified post. The econ_discuss_live_threads table includes a deleted_at timestamp indicating that a thread has been retired from active use. This operation marks the record as deleted so it no longer appears in read endpoints or future operations, while retaining the record for audit and historical purposes. Related messages stored in econ_discuss_live_messages remain intact and continue to reference the thread unless further archival rules apply.\n\nSecurity: only the host (host_user_id) or authorized staff (moderators/admins) can retire a live thread. The service ensures the post exists and that a live thread is currently associated; otherwise, a 404 is returned. If policy requires, the thread may first be transitioned to an ended/archived state prior to removal. The exact behavior of message visibility and transcript preservation is governed by business rules and the state/archival columns on the model.","parameters":[{"name":"postId","description":"Target post’s ID whose live thread will be removed from active use","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Create the parent post so a live thread can be associated with it; deletion targets the thread attached to this post and would return 404 if the post does not exist."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"Create the live thread for the specified post; the delete operation requires an existing thread (1:1 with the post) and will fail with 404 if it does not exist."}]},{"specification":"Retrieve live chat messages for a post’s live thread from econ_discuss_live_messages with advanced filtering and pagination. The endpoint uses the parent post ID to resolve the one-to-one econ_discuss_live_threads relationship and then fetches related messages by econ_discuss_live_thread_id. Supports filters such as since timestamp, message_type, and pinned, along with page/pageSize and sort options for transcript and real-time views.","path":"/econDiscuss/posts/{postId}/live/messages","method":"patch","summary":"Search and paginate live messages for a post’s live thread (econ_discuss_live_messages)","description":"List messages belonging to a post’s live thread. The econ_discuss_live_messages schema stores each message with a foreign key to econ_discuss_live_threads (econ_discuss_live_thread_id), an optional author econ_discuss_user_id to preserve transcripts when accounts are anonymized, and fields such as message_type (e.g., text, system, poll_prompt, poll_result, moderation_notice, pinned via the pinned boolean), edited_at for limited edit windows, and deleted_at for removal that retains transcript placeholders. Messages are ordered and queried using created_at and indexed composite keys to support efficient retrieval.\n\nSecurity and visibility are governed by the parent thread’s access controls on econ_discuss_live_threads (expert_only, access_scope). While the route is public for read, the service must enforce scope, e.g., public vs followers_only vs topic_subscribers_only vs invite_only. The read_at concept is not part of this model; clients should rely on message timestamps. The response uses a paginated container and can support real-time refresh by specifying a since (ISO 8601) filter in the request body to return only newer messages.\n\nValidation and errors: return 404 if the post does not exist or if no live thread is associated; 400 for invalid pagination or filter values; and 403 if access_scope or expert_only rules disallow viewing for the caller.","parameters":[{"name":"postId","description":"Target post’s ID whose live messages are being requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination criteria for retrieving live messages (e.g., since, message types, pinned, page, pageSize)","typeName":"IEconDiscussLiveMessage.IRequest"},"responseBody":{"description":"Paginated list of live messages for the specified post’s live thread","typeName":"IPageIEconDiscussLiveMessage"},"authorizationType":null,"authorizationRole":null,"name":"patchByPostid","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Create the parent post so its associated live thread can be resolved; listing messages relies on the post context and returns 404 if the post is missing."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"Create the live thread for the specified post; messages are scoped by this thread and listing should 404 when no thread exists."}]},{"specification":"Retrieve a paginated timeline of live chat messages for a specific post’s live thread. This operation reads from the econ_discuss_live_messages table, joining through econ_discuss_live_threads (unique per econ_discuss_posts via econ_discuss_post_id) to scope messages to the target post. It supports chronological consumption with page/pageSize and optional client-side time cursors (e.g., since) while respecting the live thread’s access rules.\n\nPrimary entities and relationships:\n- econ_discuss_posts.id → econ_discuss_live_threads.econ_discuss_post_id (1:1)\n- econ_discuss_live_threads.id → econ_discuss_live_messages.econ_discuss_live_thread_id (1:N)\n\nBusiness purpose: allow viewers to fetch the message stream for a post’s live session, including pinned and recent messages, for both real-time participation and archived transcripts. Messages expose metadata like message_type (text, system, poll_prompt, poll_result, moderation_notice, pinned), pinned flag, created_at ordering, and optional author (econ_discuss_user_id nullable for anonymized transcripts).","authorizationType":null,"authorizationRole":null,"description":"Fetch live discussion messages for a post’s associated live thread. According to the Prisma schema comments, econ_discuss_live_threads “represents a live discussion thread (room) attached to a specific post” (1:1 with econ_discuss_posts), and econ_discuss_live_messages stores “raw message content, type, and lifecycle timestamps” with allowed message_type values (text, system, poll_prompt, poll_result, moderation_notice, pinned). Results are chronologically ordered by created_at for fan-out and transcript views, and the pinned boolean can be used by clients for contextual pinning.\n\nSecurity and permissions follow the live thread’s configuration. While many threads are publicly readable, access_scope on econ_discuss_live_threads (public, followers_only, topic_subscribers_only, invite_only) governs visibility. Expert-only participation does not necessarily restrict reading, but implementers must enforce visibility checks based on the live thread record. No authentication is required for publicly readable threads; private scopes must be handled by business logic.\n\nDatabase linkage uses postId to resolve econ_discuss_live_threads via econ_discuss_post_id, then returns associated econ_discuss_live_messages. Only non-removed messages should be returned to end-users; records with internal removal timestamps should be filtered out by provider logic. The API supports paging (page, pageSize) and may accept a client-provided time cursor (e.g., since as ISO 8601) to reduce payloads between polls.\n\nRelated operations include creating a new message (POST /posts/{postId}/live/messages), reading a specific message (GET /posts/{postId}/live/messages/{messageId}), and updating a message (PUT /posts/{postId}/live/messages/{messageId}). Error cases include 404 when the post or its live thread does not exist, and 403 when access_scope disallows reading for the current user context.","method":"get","name":"getByPostid","parameters":[{"name":"postId","description":"Target post’s ID whose live thread messages are requested","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/posts/{postId}/live/messages","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Ensure the post exists to resolve its live thread; without a post the message listing cannot be scoped and should return 404."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"Ensure a live thread exists for the post; messages belong to this thread and retrieval fails (404) if it is absent."}],"requestBody":null,"responseBody":{"description":"Paginated list of live messages ordered by creation time","typeName":"IPageIEconDiscussLiveMessage"},"summary":"List live messages for a post’s live thread (econ_discuss_live_messages)"},{"specification":"Create a new live chat message within the live thread bound to a specific post. Persists a row into econ_discuss_live_messages associated to the thread resolved via econ_discuss_live_threads (1:1 by econ_discuss_post_id). Supports message_type semantics from the schema comment (text, system, poll_prompt, poll_result, moderation_notice, pinned) and the pinned flag. Author linkage is via econ_discuss_user_id, which may be nullable for anonymization scenarios, but standard creation associates the authenticated user.","authorizationType":null,"authorizationRole":"member","description":"Publish a live message to the live thread attached to the given post. The Prisma schema for econ_discuss_live_messages specifies fields including message_type (with allowed values enforced in application), content (nullable for certain system messages), pinned (boolean), edited_at (set when updated), and created_at/updated_at timestamps. The related econ_discuss_live_threads record determines whether participation is allowed (expert_only, access_scope) and tracks the room lifecycle state (scheduled, waiting, live, paused, ended, archived).\n\nSecurity considerations: this endpoint requires an authenticated user (role \"member\" or above in this API) and server-side enforcement that the user is allowed to post given econ_discuss_live_threads.expert_only and access_scope. Writing is typically allowed when state is live (or as configured), and should be blocked when ended/archived. Implementations should enforce per-room rate limits and slow mode via slow_mode_interval_seconds when present.\n\nValidation rules include ensuring the target post exists, there is a live thread bound to it, and the message_type/content combination is valid (e.g., text messages should include non-empty content). On success, the created message is returned with identifiers and timestamps. Errors include 404 for missing post/thread, 403 for disallowed participation, and 409/422 for invalid state or payload.","method":"post","name":"create","parameters":[{"name":"postId","description":"Target post’s ID whose live thread will receive the message","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/posts/{postId}/live/messages","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"Create the parent post which hosts the live thread; messages are ultimately tied to the post via its thread and creation requires a valid post context."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"Create the live thread for the specified post; a message must be associated to an existing thread, otherwise creation fails with not found."}],"requestBody":{"description":"Payload to create a live message including content, message type, and optional pin flag","typeName":"IEconDiscussLiveMessage.ICreate"},"responseBody":{"description":"Newly created live message with identifiers and timestamps","typeName":"IEconDiscussLiveMessage"},"summary":"Create a live message (econ_discuss_live_messages) in a post’s live thread"},{"specification":"Retrieve a single live message by identifier within the context of a post’s live thread. Reads from econ_discuss_live_messages scoped by the resolved econ_discuss_live_threads for the given post. Ensures the message belongs to the post’s thread and is visible per thread access rules.","authorizationType":null,"authorizationRole":null,"description":"Return a specific live message from the live discussion attached to a post. Per Prisma schema, econ_discuss_live_messages stores the message metadata (message_type, content, pinned, edited_at, created_at) and links to the thread via econ_discuss_live_thread_id. The enclosing econ_discuss_live_threads record provides access_scope and expert_only flags that must be enforced to protect visibility, and its lifecycle state (scheduled, live, paused, ended, archived) guides read expectations (e.g., archived threads remain readable per policy).\n\nSecurity: Typically public reads are allowed for public threads, but access_scope may restrict viewing (followers_only, topic_subscribers_only, invite_only). Implementations must validate that the message’s thread corresponds to the provided postId to avoid cross-thread access, and filter out messages not eligible for end-user display.\n\nError handling: 404 when the post, thread, or message is not found or does not belong together; 403 when access is not permitted. This endpoint does not modify data and returns the full message object on success.","method":"get","name":"at","parameters":[{"name":"postId","description":"Owning post’s ID for the live thread","schema":{"type":"string","format":"uuid"}},{"name":"messageId","description":"Live message ID within the post’s live thread","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/posts/{postId}/live/messages/{messageId}","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A post must be created to provide the host context identified by {postId} before any live thread or message can exist."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"A live thread for the post must be created; live messages are scoped to a post’s live thread and cannot exist without it."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live/messages","method":"post"},"description":"The specific live message must be created under the post’s live thread before it can be retrieved by {messageId}."}],"requestBody":null,"responseBody":{"description":"The requested live message with its metadata","typeName":"IEconDiscussLiveMessage"},"summary":"Get a specific live message (econ_discuss_live_messages) by ID for a post"},{"specification":"Update a live chat message in the context of its post’s live thread. Writes to econ_discuss_live_messages (content edits within permitted window, pin/unpin toggles, or message_type adjustments when policy allows). Requires ownership checks or elevated privileges (e.g., host/moderator) enforced in business logic. Updates should set edited_at and updated_at timestamps as appropriate.","authorizationType":null,"authorizationRole":"member","description":"Modify an existing live message belonging to a post’s live thread. The Prisma model econ_discuss_live_messages includes editable fields such as content (nullable for system types), pinned, and implicitly message_type where policy allows. Edits should respect window limits described in business rules, and set edited_at to reflect changes. The parent econ_discuss_live_threads (state, expert_only, access_scope) governs whether updates are allowed in current state and who may perform them (e.g., only author can edit within a short window; hosts/moderators can toggle pinned).\n\nSecurity: This endpoint requires authentication (role \"member\" or above) and must enforce ownership or role-based authorization. It should also ensure the message belongs to the live thread for the supplied postId, preventing cross-thread updates. When the thread is ended or archived, edits should typically be rejected except for governance actions.\n\nError handling: 404 when the post/thread/message linkage is invalid; 403 for insufficient permissions; 409/422 for invalid state transitions (e.g., editing after window, disallowed type changes). On success, returns the updated message including edited_at.","method":"put","name":"update","parameters":[{"name":"postId","description":"Owning post’s ID used to resolve the live thread","schema":{"type":"string","format":"uuid"}},{"name":"messageId","description":"Identifier of the live message to update","schema":{"type":"string","format":"uuid"}}],"path":"/econDiscuss/member/posts/{postId}/live/messages/{messageId}","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A post must be created to provide the host context identified by {postId} before any live thread or message can exist."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"A live thread for the post must be created; live messages are scoped to a post’s live thread and cannot exist without it."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live/messages","method":"post"},"description":"The specific live message must be created under the post’s live thread before it can be updated by {messageId}."}],"requestBody":{"description":"Fields to update on the live message (e.g., content, pin)","typeName":"IEconDiscussLiveMessage.IUpdate"},"responseBody":{"description":"Updated live message including edited_at where applicable","typeName":"IEconDiscussLiveMessage"},"summary":"Update a live message (econ_discuss_live_messages) within a post’s live thread"},{"specification":"Delete a single live message that belongs to a post’s live thread using the econ_discuss_live_messages table. The endpoint takes the host post identifier (postId) and the target live message identifier (messageId) and removes the message from active visibility by setting the deleted_at timestamp on econ_discuss_live_messages. The provider must validate that the message exists, is associated through econ_discuss_live_threads with the given post (econ_discuss_live_threads.econ_discuss_post_id = postId), and that the caller is authorized (message author, the live thread host, or governance staff per policy). This operation references: econ_discuss_live_messages (primary), econ_discuss_live_threads (to confirm the message belongs to the post’s thread), and econ_discuss_posts (owning post).","authorizationType":null,"description":"This operation removes a specific live message from user-visible streams by updating the econ_discuss_live_messages record identified by {messageId} so that its deleted_at column is populated. According to the Prisma schema comments for econ_discuss_live_messages, the model stores per-message lifecycle fields and includes a deleted_at timestamp for moderated or removed messages while preserving transcript placeholders as required. The deletion must be constrained to messages that belong to the live thread associated with the post identified by {postId}, which is modeled by econ_discuss_live_threads (one-to-one with econ_discuss_posts) through econ_discuss_live_threads.econ_discuss_post_id.\n\nSecurity and authorization should follow business policies: only the message author (econ_discuss_live_messages.econ_discuss_user_id), the live thread host (econ_discuss_live_threads.host_user_id), or governance roles (moderators/admins) may remove a message. Moderation-related removals should be auditable, aligning with governance requirements. Even though authorization is enforced in business logic, this endpoint is exposed to authenticated users and must return 403 when the caller lacks permission.\n\nFrom a data relationship perspective, econ_discuss_live_messages references econ_discuss_live_threads via econ_discuss_live_thread_id, and the thread references econ_discuss_posts via econ_discuss_post_id. The provider should verify that the targeted message belongs to the thread whose econ_discuss_post_id equals {postId}. If the thread is archived or ended (see econ_discuss_live_threads.state and archived_at/ended_at), business rules may restrict message removal; implementations can enforce such constraints consistently with platform policy.\n\nValidation and error handling include: returning 404 when the message does not exist or is not linked to the specified post; 403 when the caller is not permitted to remove the message; and 409 where applicable if concurrent state prevents the operation (e.g., thread already archived in a stricter policy). On repeated calls where the message already has deleted_at populated, the provider may treat the request as idempotent and return 204.\n\nRelated operations that are commonly used together include retrieving live messages for a post’s live thread (GET /posts/{postId}/live/messages) and posting a new live message (POST /posts/{postId}/live/messages). Together, these enable full lifecycle management of live conversation content while respecting auditability and integrity described in the Prisma schema comments.","summary":"Remove a live message (econ_discuss_live_messages) for a post’s live thread.","parameters":[{"name":"postId","description":"Owning post’s ID associated with the target live message via its live thread.","schema":{"type":"string","format":"uuid"}},{"name":"messageId","description":"Identifier of the live message to remove from active visibility.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/econDiscuss/member/posts","method":"post"},"description":"A post must be created to provide the host context identified by {postId} before any live thread or message can exist."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live","method":"post"},"description":"A live thread for the post must be created; live messages are scoped to a post’s live thread and cannot exist without it."},{"endpoint":{"path":"/econDiscuss/member/posts/{postId}/live/messages","method":"post"},"description":"The specific live message must be created under the post’s live thread before it can be deleted by {messageId}."}],"path":"/econDiscuss/member/posts/{postId}/live/messages/{messageId}","method":"delete"}],"components":{"authorization":[{"name":"visitor","description":"Unauthenticated reader with access to public content, search, and view trending. Cannot post, vote, comment, follow, or bookmark. Can view expert badges and public profiles.","kind":"guest"},{"name":"member","description":"Authenticated user who can create posts and comments, vote, follow users and topics, save bookmarks, create drafts, and participate in polls. Subject to reputation-based feature unlocks and rate limits.","kind":"member"},{"name":"verifiedExpert","description":"Authenticated user with verified expertise in specified economic domains. Has expert badge, weighted votes, access to expert-only threads or modes, and elevated content curation privileges within policy. May propose topic taxonomy updates.","kind":"member"},{"name":"moderator","description":"Trusted steward responsible for content quality and community health. Can review reports, enforce guidelines, manage expertise verification queue, feature high-quality posts, apply sanctions, and resolve disputes. Cannot modify system-wide settings.","kind":"admin"},{"name":"admin","description":"Platform administrator with full administrative privileges across users, roles, topics, moderation policy, system configurations, and verification workflows.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIEconDiscussUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussReputationEvent":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussReputationEvent"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussExpertDomainBadge.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussExpertDomainBadge.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussTopic.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussTopic.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussPostVote.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPostVote.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussPostBookmark.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPostBookmark.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussNotification"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussTopic"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussPostSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPostSnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussPostDraft":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPostDraft"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussPollOption.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollOption.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussPollResponse":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResponse"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussLiveThread.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussLiveThread.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEconDiscussLiveMessage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussLiveMessage"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IEconDiscussVisitorJoin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's unique email address for authentication and notifications.\n\nMaps to econ_discuss_users.email in the Actors schema. The Prisma model enforces uniqueness via @@unique([email])."},"password":{"type":"string","minLength":8,"description":"Plaintext password submitted by the client for account creation. The backend MUST hash this value into econ_discuss_users.password_hash; plaintext is never persisted.\n\nSecurity: Do not log or echo this value. Hashing occurs server-side before storage."},"display_name":{"type":"string","minLength":1,"maxLength":120,"description":"Publicly visible display name/handle for the account.\n\nMaps to econ_discuss_users.display_name in the Actors schema."},"timezone":{"type":"string","description":"Preferred IANA timezone identifier used for notifications, digests, and scheduling (e.g., \"Asia/Seoul\").\n\nMaps to econ_discuss_users.timezone in the Actors schema."},"locale":{"type":"string","description":"Preferred BCP 47 locale tag for UI and communications (e.g., \"en-US\").\n\nMaps to econ_discuss_users.locale in the Actors schema."},"avatar_uri":{"type":"string","format":"uri","description":"Optional avatar image URI for the profile. Validate maximum length and URI format at application level.\n\nMaps to econ_discuss_users.avatar_uri in the Actors schema."}},"required":["email","password","display_name"],"description":"Visitor registration payload.\n\nCreates a base identity row in Actors.econ_discuss_users (email, password_hash ← derived from password, display_name, optional avatar_uri, timezone, locale; email_verified=false; mfa_enabled=false) and assigns a Visitor role via Actors.econ_discuss_visitors. Timestamps (created_at, updated_at) are managed by the service.\n\nSecurity: Accepts plaintext password only for hashing. Never accept or expose password_hash, mfa_secret, or mfa_recovery_codes in requests."},"IEconDiscussVisitor.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user.\n\nMaps to Actors.econ_discuss_users.id (UUID primary key)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response for a newly registered or refreshed Visitor session.\n\nContains the principal id (econ_discuss_users.id) and the issued JWT token material. Sensitive account fields (password_hash, mfa_secret, mfa_recovery_codes) are never returned.\n\nRole context: Visitor privileges are represented by a row in Actors.econ_discuss_visitors linked to the same user_id."},"IEconDiscussVisitorRefresh.IRequest":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued to the client. Used to rotate and mint a new access token.\n\nImplementation validates signature/claims and confirms Visitor role remains present via Actors.econ_discuss_visitors."}},"required":["refresh_token"],"description":"Visitor refresh request.\n\nConsumes an existing refresh token to obtain a renewed authorization session. No database writes are required for the happy path; role and account state checks are performed against Actors tables."},"IEconDiscussMember.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's unique email address for authentication.\n\nMaps to econ_discuss_users.email in the Actors schema. Must be unique."},"password":{"type":"string","minLength":8,"description":"Plaintext password to be securely hashed into econ_discuss_users.password_hash by the server. Never persisted or logged in plaintext."},"display_name":{"type":"string","minLength":1,"maxLength":120,"description":"Publicly visible display name/handle.\n\nMaps to econ_discuss_users.display_name."},"timezone":{"type":"string","description":"Preferred IANA timezone identifier (e.g., \"Asia/Seoul\").\n\nMaps to econ_discuss_users.timezone."},"locale":{"type":"string","description":"Preferred BCP 47 locale tag for UI and messaging (e.g., \"en-US\").\n\nMaps to econ_discuss_users.locale."},"avatar_uri":{"type":"string","format":"uri","description":"Optional avatar image URI.\n\nMaps to econ_discuss_users.avatar_uri."}},"required":["email","password","display_name"],"description":"Member registration payload.\n\nCreates a base identity in Actors.econ_discuss_users (email, password_hash from password, display_name, optional avatar_uri, timezone, locale; email_verified=false; mfa_enabled=false). Then assigns a Member role via Actors.econ_discuss_members (joined_at set), issuing JWTs on success.\n\nSecurity: Only accept plaintext password for hashing. Do not include system-managed columns like id, created_at, updated_at, or any MFA/verification flags in the request."},"IEconDiscussMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Member account email used for authentication.\n\nMaps to econ_discuss_users.email (unique). The value must be a normalized email address the user controls. This field is only used for credential validation and is never persisted by this DTO itself."},"password":{"type":"string","minLength":8,"description":"Plaintext password submitted by the client for verification.\n\nServer MUST hash this value and compare against econ_discuss_users.password_hash. Never store or log the plaintext. This DTO accepts only the raw password, not a hash or salt."},"mfa_code":{"type":"string","minLength":6,"maxLength":10,"description":"Optional time-based one‑time password (TOTP) or recovery code when econ_discuss_users.mfa_enabled is true or policy requires step-up verification.\n\nIf provided, it is validated against secrets stored in econ_discuss_users.mfa_secret or econ_discuss_users.mfa_recovery_codes. This value is not stored."}},"required":["email","password"],"description":"Login request for Member role.\n\nThis DTO transports the minimum data needed to authenticate a member against the Actors schema. It references econ_discuss_users for identity (email) and secure credential verification (password_hash). When multi-factor authentication is enabled (mfa_enabled), clients may supply mfa_code to complete the flow.\n\nSecurity notes: the password is never persisted in plaintext and must be hashed server-side for comparison. No secrets (password_hash, mfa_secret, recovery codes) are ever returned by the API."},"IEconDiscussMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","minLength":20,"description":"Refresh token previously issued during login or join, presented for rotation.\n\nOn success, the service mints a new short‑lived access token (and optionally a rotated refresh token) while validating the member still exists (econ_discuss_users) and remains a member (econ_discuss_members)."}},"required":["refresh_token"],"description":"Refresh request for Member role.\n\nCarries the opaque refresh token to rotate session credentials. The service validates token integrity, the underlying econ_discuss_users row (active; deleted_at is null), and the presence of an econ_discuss_members assignment. No database writes are required on the happy path beyond audit outside of this DTO."},"IEconDiscussMember.IEmailVerifyRequest":{"type":"object","properties":{"token":{"type":"string","minLength":20,"description":"Time‑limited verification token proving ownership of econ_discuss_users.email.\n\nOn successful verification the server sets econ_discuss_users.email_verified = true and touches updated_at. Tokens are single-use and short‑lived per policy."}},"required":["token"],"description":"Email verification request for Member role.\n\nThis payload conveys the verification token delivered out‑of‑band (e.g., email link). The server validates and, on success, flips econ_discuss_users.email_verified to true. No other identity or secret fields are modified by this operation."},"IEconDiscussMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member.\n\nDirectly maps to econ_discuss_users.id (UUID). Use this identifier as the subject claim (sub) in JWTs and for subsequent resource scoping."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"member":{"$ref":"#/components/schemas/IEconDiscussMember.ISubject","description":"Authenticated member summary derived from econ_discuss_users.\n\nIntended to hydrate clients with profile basics (display name, locale/timezone, verification flags) without exposing sensitive fields like password hashes or MFA secrets."}},"required":["id","token"],"description":"Authorization response for Member role containing issued JWTs and subject context.\n\nReturned by successful join/login/refresh operations. The payload intentionally excludes sensitive fields (password_hash, mfa_secret, mfa_recovery_codes) and any administrative internals. It provides only safe, public-facing identity hints alongside tokens needed for authenticated requests."},"IEconDiscussMember.ISubject":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Member’s unique identifier.\n\nFrom econ_discuss_users.id (UUID)."},"displayName":{"type":"string","description":"Public display name/handle presented on the platform.\n\nMaps to econ_discuss_users.display_name. Client editors should enforce reasonable length and character rules per policy."},"avatarUri":{"type":"string","description":"Optional avatar image URI for the member’s profile.\n\nMaps to econ_discuss_users.avatar_uri (nullable). Application should validate length and format.","maxLength":80000},"timezone":{"type":"string","description":"Preferred IANA timezone identifier used for scheduling, digests, and quiet hours (e.g., Asia/Seoul).\n\nMaps to econ_discuss_users.timezone (nullable)."},"locale":{"type":"string","description":"Preferred UI locale (e.g., en-US) used for localized content and notifications.\n\nMaps to econ_discuss_users.locale (nullable)."},"emailVerified":{"type":"boolean","description":"Email ownership confirmation flag.\n\nReflects econ_discuss_users.email_verified. Many write actions are gated until true."},"mfaEnabled":{"type":"boolean","description":"Whether multi‑factor authentication is active for this account.\n\nReflects econ_discuss_users.mfa_enabled. Secrets (mfa_secret, recovery codes) are never exposed."},"createdAt":{"type":"string","format":"date-time","description":"Record creation timestamp from econ_discuss_users.created_at (ISO 8601)."},"updatedAt":{"type":"string","format":"date-time","description":"Record last update timestamp from econ_discuss_users.updated_at (ISO 8601)."}},"required":["id","displayName","emailVerified","mfaEnabled","createdAt","updatedAt"],"description":"Minimal member profile snapshot derived from econ_discuss_users.\n\nDesigned for safe client hydration after authentication. All fields map directly to non-sensitive columns in the Actors schema and exclude confidential credentials and secrets."},"IEconDiscussMember.IEmailVerification":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Target account email address used for verification workflows.\n\nThis corresponds to econ_discuss_users.email in the Actors schema. It is included here for client clarity and may be omitted by the server when not appropriate for privacy."},"email_verified":{"type":"boolean","description":"Current verification state of the account’s email.\n\nThis reflects the econ_discuss_users.email_verified column. In the verify endpoint, this value becomes true upon successful token validation. In resend flows, it often remains false until the user completes verification."},"status":{"type":"string","description":"High‑level outcome or state label for the verification action.\n\nExamples include: queued, sent, throttled, verified, already_verified. This field is not persisted in Prisma; it is reported for API UX and may be used for client messaging."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when this verification action was requested in ISO 8601 format.\n\nThis value is generated by the service and is not a direct Prisma column."},"processed_at":{"type":"string","format":"date-time","description":"Timestamp when the verification action was processed (e.g., email dispatched or token confirmed), in ISO 8601 format.\n\nNot a direct Prisma column; included for client observability."}},"required":["email_verified"],"description":"Email verification result payload for member accounts.\n\nThis DTO reports verification state transitions and resend outcomes for the email associated with an account in econ_discuss_users. It aligns with the Actors schema column econ_discuss_users.email_verified and is used by endpoints that either send a verification email or confirm a verification token.\n\nSecurity note: never expose secrets or tokens here. The server may omit the email field in contexts where revealing it would violate privacy."},"IEconDiscussMember.IPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address identifying the member account to initiate a password reset for.\n\nMaps to econ_discuss_users.email (unique). The API must avoid account enumeration by returning generic responses regardless of existence."}},"required":["email"],"description":"Password reset initiation payload for member accounts.\n\nClients submit the account email to request a time‑limited reset token be delivered out‑of‑band. This does not modify Prisma state directly; it triggers a delivery workflow referencing econ_discuss_users.email."},"IEconDiscussMember.ISecurityEvent":{"type":"object","properties":{"code":{"type":"string","description":"Machine‑readable outcome code for the security operation.\n\nExamples: RESET_QUEUED, RESET_CONFIRMED, EMAIL_VERIFICATION_SENT, EMAIL_VERIFIED, MFA_REQUIRED. This is not a Prisma field; it is emitted for client handling and telemetry."},"message":{"type":"string","description":"Human‑readable summary describing the security event result.\n\nIntended for direct display or logs; avoid leaking sensitive details."},"timestamp":{"type":"string","format":"date-time","description":"Server time when the event was acknowledged, ISO 8601 format.\n\nThis reflects when the API produced this event response, not necessarily when any underlying data changed in Prisma."}},"required":["code","message","timestamp"],"description":"Generic security event acknowledgement used by authentication and account‑security endpoints.\n\nThis DTO standardizes lightweight confirmations for flows such as password reset requests and email verification dispatch/confirmation. It does not expose secrets and does not require any additional Prisma columns."},"IEconDiscussMember.IPasswordResetConfirm":{"type":"object","properties":{"token":{"type":"string","description":"Time‑limited password reset token issued by the system and delivered out‑of‑band (e.g., email).\n\nThe server validates this token and resolves the target econ_discuss_users row; the token itself is never stored in the econ_discuss_users table."},"new_password":{"type":"string","minLength":8,"format":"password","description":"New plaintext password to be set for the account. The backend hashes this value and stores it into econ_discuss_users.password_hash.\n\nSecurity: clients must never send hashed passwords; hashing is solely the server’s responsibility."}},"required":["token","new_password"],"description":"Password reset confirmation payload for member accounts.\n\nOn success, the server replaces econ_discuss_users.password_hash with a hash of new_password and updates auditing timestamps (e.g., updated_at). This DTO must never include or accept any password hashes or secrets."},"IEconDiscussMember.IUpdatePassword":{"type":"object","properties":{"current_password":{"type":"string","minLength":8,"format":"password","description":"Current account password in plain text submitted by the authenticated member for verification before rotation.\n\nSecurity and data handling: this value is never persisted; the backend hashes and compares it with econ_discuss_users.password_hash from the Actors schema. The Prisma model documents password_hash as the stored credential; plaintext is only accepted at the API boundary."},"new_password":{"type":"string","minLength":8,"format":"password","description":"New password to be set for the account, provided in plain text and hashed server-side before storage.\n\nOn success, the backend replaces econ_discuss_users.password_hash and updates updated_at in econ_discuss_users (Actors schema). Do not include confirmation fields in the request body; client-side confirmation is handled by the UI, while the server trusts a single source of truth here."}},"required":["current_password","new_password"],"description":"Change-password request for an authenticated Member.\n\nThis DTO is used by the password change operation that updates econ_discuss_users.password_hash in the Actors schema. It intentionally accepts plaintext passwords for verification and rotation, while storage remains hashed per the Prisma comment on econ_discuss_users.password_hash. Timestamps like updated_at are system-managed and not part of this request."},"IEconDiscussMember.IMfaSetup":{"type":"object","properties":{"otpauth_uri":{"type":"string","description":"Provisioning URI (otpauth://…) that encodes the TOTP secret and label for authenticator enrollment.\n\nThe secret is stored securely in econ_discuss_users.mfa_secret (Actors schema) and should not be logged. This URI allows the client to configure an authenticator app without exposing internal storage details."},"expires_at":{"type":"string","format":"date-time","description":"Optional expiry for the enrollment session, after which a new setup must be initiated.\n\nThis timestamp is not persisted in Prisma; it is advisory for the client to complete verification before the window ends."}},"required":["otpauth_uri"],"description":"MFA enrollment provisioning payload for Members.\n\nReturned by the setup endpoint that initializes multi-factor authentication artifacts in econ_discuss_users (mfa_secret and provisional mfa_recovery_codes) while keeping mfa_enabled=false until verification. Per the Prisma schema comments, secrets and recovery codes are stored encrypted/hashed and never logged."},"IEconDiscussMember.IMfaVerify":{"oneOf":[{"required":["code"]},{"required":["recovery_code"]}],"description":"Verification request body to finalize MFA enrollment for a Member.\n\nExactly one credential must be provided: either a TOTP code (code) or a recovery_code. On success, the backend sets econ_discuss_users.mfa_enabled=true and updates updated_at. Secrets remain server-side and are never returned."},"IEconDiscussMember.IMfaEnabled":{"type":"object","properties":{"mfa_enabled":{"type":"boolean","description":"Indicates whether multi-factor authentication is now enabled for the account.\n\nThis mirrors the econ_discuss_users.mfa_enabled column in the Actors schema, which is flipped to true after successful verification and to false when MFA is disabled."},"enabled_at":{"type":"string","format":"date-time","description":"Timestamp when MFA became enabled for the account.\n\nThis value reflects system time at activation; the underlying Prisma model provides updated_at on econ_discuss_users for auditing, while this field offers a user-facing instant for confirmation."}},"required":["mfa_enabled"],"description":"Confirmation payload reporting the current MFA enabled state for a Member account.\n\nReturned after verification succeeds (mfa_enabled=true) or in status checks. Sensitive MFA internals (mfa_secret, mfa_recovery_codes) from econ_discuss_users are never exposed here."},"IEconDiscussMember.IMfaDisable":{"oneOf":[{"required":["totp_code"]},{"required":["recovery_code"]}],"description":"Request body to disable MFA for a Member account.\n\nExactly one credential must be provided: either totp_code or recovery_code. On success, the service updates econ_discuss_users.mfa_enabled=false and may clear or rotate MFA secrets per policy."},"IEconDiscussMember.IMfaDisabled":{"type":"object","properties":{"mfa_enabled":{"type":"boolean","const":false,"description":"Reflects the current MFA state on the account in econ_discuss_users.mfa_enabled after the disable operation.\n\nPer policy, disabling sets this to false."},"disabled_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp indicating when MFA was disabled for the account.\n\nThis corresponds to the time the service updated econ_discuss_users to reflect MFA disablement."},"secret_cleared":{"type":"boolean","description":"Indicates whether the server cleared or rotated econ_discuss_users.mfa_secret as part of the disable flow.\n\nSecurity policy may clear or re-encrypt the secret. True means the stored secret was removed/rotated."},"recovery_codes_cleared":{"type":"boolean","description":"Indicates whether the server cleared/rotated econ_discuss_users.mfa_recovery_codes during disablement.\n\nTrue means previously generated recovery codes were invalidated."}},"required":["mfa_enabled","disabled_at"],"description":"Confirmation payload returned after disabling Multi-Factor Authentication (MFA) for a Member.\n\nThis response reflects the new MFA state persisted in econ_discuss_users (mfa_enabled=false) and includes operational details such as the effective timestamp. It documents whether the provider cleared/rotated sensitive MFA artifacts stored in econ_discuss_users.mfa_secret and econ_discuss_users.mfa_recovery_codes as described by the Prisma schema."},"IEconDiscussMember.IMfaRegenerateCodes":{"type":"object","properties":{"totp_code":{"type":"string","minLength":6,"maxLength":12,"pattern":"^[0-9]{6,12}$","description":"A current TOTP value derived from econ_discuss_users.mfa_secret to authorize regeneration of recovery codes.\n\nBusiness rule: The member must already have MFA enabled (econ_discuss_users.mfa_enabled=true). Regeneration replaces econ_discuss_users.mfa_recovery_codes with a new set."}},"required":["totp_code"],"description":"Request body to regenerate MFA recovery codes for a Member.\n\nThe service validates the submitted TOTP code against econ_discuss_users.mfa_secret. Upon success, it rotates econ_discuss_users.mfa_recovery_codes and returns the freshly generated codes for one-time display, as documented in the Prisma Actors schema (econ_discuss_users)."},"IEconDiscussMember.IMfaRecoveryCodes":{"type":"object","properties":{"mfa_enabled":{"type":"boolean","const":true,"description":"Reflects that MFA remains enabled on the account (econ_discuss_users.mfa_enabled=true) after regenerating recovery codes.\n\nRegeneration does not alter the enabled state."},"codes":{"type":"array","items":{"type":"string","minLength":8,"maxLength":128,"description":"A single recovery code in plain text intended for one-time display to the member.\n\nServer stores only hashed/secured forms in econ_discuss_users.mfa_recovery_codes. Clients must store securely offline."},"minItems":1,"maxItems":20,"description":"Newly generated recovery codes for the member. Displayed exactly once after regeneration, never retrievable again.\n\nThese correspond to values stored (hashed/secured) in econ_discuss_users.mfa_recovery_codes."},"generated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when the recovery codes were generated.\n\nUseful for client-side record keeping; not necessarily persisted beyond audit trails."}},"required":["mfa_enabled","codes","generated_at"],"description":"Response payload containing freshly generated MFA recovery codes for a Member.\n\nThese codes replace any previous set stored in econ_discuss_users.mfa_recovery_codes (Actors schema) and are shown once. The account remains MFA-enabled (econ_discuss_users.mfa_enabled=true). Clients should prompt users to store codes securely offline and never transmit them in logs."},"IEconDiscussVerifiedExpertJoin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address used as the unique login identifier (econ_discuss_users.email).\n\nMust be a valid RFC 5322 email string. Stored in normalized, lower-cased form at the application layer to satisfy the Prisma unique constraint on email. This value is persisted into the Actors schema table econ_discuss_users (see schema-01-actors.prisma)."},"password":{"type":"string","minLength":8,"description":"Plaintext password submitted by the client for account creation.\n\nSECURITY: NEVER stored in plaintext. The server must derive and persist a secure password hash into econ_discuss_users.password_hash. Clients MUST NOT send pre-hashed values here. This field maps to business handling for the econ_discuss_users.password_hash column documented in schema-01-actors.prisma."},"display_name":{"type":"string","minLength":1,"maxLength":120,"description":"Public display handle (econ_discuss_users.display_name).\n\nShown on profiles and next to authored content. Validate length and character policy at the application layer per business rules. Stored in the econ_discuss_users table."},"timezone":{"type":"string","description":"Optional IANA timezone identifier (econ_discuss_users.timezone), for example \"Asia/Seoul\".\n\nUsed for digests, quiet hours, poll scheduling, and notification timing. If omitted, backend defaults may apply."},"locale":{"type":"string","description":"Optional preferred locale tag (econ_discuss_users.locale), for example \"en-US\" (BCP 47).\n\nUsed for localized UI and communications."},"avatar_uri":{"type":"string","format":"uri","description":"Optional avatar image URI for the profile (econ_discuss_users.avatar_uri).\n\nApplication should validate length and scheme and may enforce safe-host policies."}},"required":["email","password","display_name"],"description":"Verified Expert registration request DTO for creating a base identity row in econ_discuss_users.\n\nUpon success, the backend persists required columns (email, password_hash derived from password, display_name) and optional preferences (timezone, locale, avatar_uri). System flags are initialized per policy: email_verified=false, mfa_enabled=false, and secret/recovery fields remain null.\n\nSECURITY: This request MUST NOT include system-managed fields such as id, created_at, updated_at, deleted_at, or any role/ownership columns. Ownership is implied via the authenticated context after join flows and through role assignment tables described in the Prisma schema."},"IEconDiscussVerifiedExpert.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated account (econ_discuss_users.id).\n\nUsed as the subject for subsequent API calls and embedded in token claims."},"role":{"const":"verifiedExpert","description":"Logical authorization role for this session.\n\nFor this payload the value is fixed to \"verifiedExpert\" to indicate expert context. Role assignment is ultimately derived from the presence of expert verification records (econ_discuss_verified_experts) and policy, but this field communicates the active context to the client."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"email_verified":{"type":"boolean","description":"Whether the account’s email address has been verified (econ_discuss_users.email_verified).\n\nSome write actions are gated until this is true."},"mfa_enabled":{"type":"boolean","description":"Whether multi-factor authentication is enabled for this account (econ_discuss_users.mfa_enabled).\n\nMFA enforcement policies may require second factor during sensitive actions."},"display_name":{"type":"string","description":"Public display handle (econ_discuss_users.display_name) returned for convenience in the authorization envelope."},"avatar_uri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Avatar image URI (econ_discuss_users.avatar_uri) if configured; null otherwise.\n\nExcluded from token contents; included here for client convenience."},"timezone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred IANA timezone identifier (econ_discuss_users.timezone), e.g., \"Asia/Seoul\".\n\nNull indicates no preference set."},"locale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred locale (econ_discuss_users.locale), e.g., \"en-US\" per BCP 47.\n\nNull indicates no preference set."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp (econ_discuss_users.created_at).\n\nSerialized as ISO 8601 with timezone offset."},"updated_at":{"type":"string","format":"date-time","description":"Account last update timestamp (econ_discuss_users.updated_at).\n\nSerialized as ISO 8601 with timezone offset."}},"required":["id","role","token","email_verified","mfa_enabled","display_name","created_at","updated_at"],"description":"Authorization response payload for the Verified Expert context.\n\nIncludes the subject id (UUID), a role indicator fixed to \"verifiedExpert\", and a token bundle describing the current session. Mirrors select non-sensitive identity fields from econ_discuss_users for immediate client configuration while strictly omitting confidential columns (password_hash, mfa_secret, mfa_recovery_codes) and any soft-delete internals (deleted_at).\n\nAll timestamps are provided in ISO 8601 format. Ownership and actor identity are derived from token claims; clients MUST NOT infer ownership from arbitrary request bodies."},"IEconDiscussVerifiedExpertLogin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Login identifier mapped to econ_discuss_users.email.\n\nThe backend looks up the user by this value (normalized) and validates credentials."},"password":{"type":"string","minLength":8,"description":"Plaintext password used to validate against econ_discuss_users.password_hash.\n\nNever transmit pre-hashed material from clients; servers perform hashing and comparison."},"otp":{"type":"string","minLength":6,"maxLength":10,"description":"Optional one-time code for accounts with MFA enabled.\n\nWhen econ_discuss_users.mfa_enabled is true or policy requires step-up, supply a valid TOTP or recovery code. This field is ignored when MFA is not required."}},"required":["email","password"],"description":"Verified Expert login request DTO.\n\nAccepts email and plaintext password; optionally includes an MFA one-time code when the account requires step-up authentication. On success, the service returns IEconDiscussVerifiedExpert.IAuthorized and issues tokens. This DTO never carries system-managed fields or secrets such as password hashes or MFA secrets; only the ephemeral OTP may be provided when required."},"IEconDiscussVerifiedExpertRefresh.ICreate":{"type":"object","properties":{"refresh_token":{"type":"string","minLength":20,"description":"Long-lived refresh token presented for rotation and issuance of a new access token.\n\nTransported via secure channel (e.g., HTTP-only cookie or authorization header per policy). Not stored in Prisma tables described; rotation/revocation handled by the token service."}},"required":["refresh_token"],"description":"Verified Expert token refresh request DTO.\n\nConsumes a valid refresh token and returns a new IEconDiscussVerifiedExpert.IAuthorized payload with rotated credentials. Stateless with respect to the Prisma schema (no token persistence columns exist)."},"IEconDiscussVerifiedExpertPassword.IUpdate":{"type":"object","properties":{"current_password":{"type":"string","minLength":8,"maxLength":128,"description":"Current credential of the authenticated verified expert.\n\nThis plaintext value is submitted only for verification. The backend MUST hash and compare it against econ_discuss_users.password_hash stored in the Actors schema (see Prisma model econ_discuss_users). No plaintext is ever persisted. On success, service logic updates econ_discuss_users.password_hash and touches updated_at.\n\nSecurity note: Do not log this field. Do not echo this value in responses."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New credential to be set for the account.\n\nOn acceptance, the server replaces econ_discuss_users.password_hash with a secure hash derived from this plaintext and updates econ_discuss_users.updated_at (Prisma: timestamptz). Password strength policies are enforced by the application; the database stores only the hash, never the plaintext.\n\nSecurity note: Never return or store this plaintext value. Enforce strong password rules per policy."},"mfa_code":{"type":"string","description":"Optional one‑time code when multi‑factor authentication is enabled.\n\nIf econ_discuss_users.mfa_enabled is true, the service may require a TOTP or a valid recovery code (stored hashed/encrypted in econ_discuss_users.mfa_recovery_codes). This field is not persisted; it is used only to validate the request at runtime."}},"required":["current_password","new_password"],"description":"Change password for an authenticated verified expert.\n\nThis DTO is used by the password‑change endpoint that verifies the current secret and, on success, updates econ_discuss_users.password_hash and refreshed updated_at (both in the Actors schema). It never writes plaintext to the database; only the derived hash is stored as documented in the Prisma comments of econ_discuss_users.\n\nOwnership and lifecycle: The request is scoped to the authenticated subject (econ_discuss_users.id). Optional MFA code validation aligns with econ_discuss_users.mfa_enabled/mfa_secret. No system fields like id, created_at, or updated_at are accepted from clients."},"IEconDiscussVerifiedExpertPassword.IRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Account email address used to locate the subject in econ_discuss_users.email (unique per @@unique([email]) in the Actors schema).\n\nThe provider MUST avoid email enumeration in responses. This input is used solely to initiate a time‑limited reset token delivery (out‑of‑band)."},"locale":{"type":"string","description":"Optional BCP‑47 locale tag (e.g., \"en-US\") to localize the reset message.\n\nThis value is not persisted in the database tables referenced (e.g., econ_discuss_users); it only informs notification templating at send time."}},"required":["email"],"description":"Begin password reset for a verified expert by email.\n\nThis DTO initiates an out‑of‑band reset flow using econ_discuss_users.email as the lookup key in the Actors schema (Prisma model econ_discuss_users). No writes to database credentials occur at this stage; the server only generates and dispatches a reset token.\n\nSecurity and privacy: Do not disclose whether the email exists. Do not include system‑managed fields (id, timestamps)."},"IEconDiscussVerifiedExpertPasswordReset.ICreate":{"type":"object","properties":{"token":{"type":"string","description":"Time‑limited password reset token issued by the provider.\n\nValidated server‑side and mapped to a specific econ_discuss_users.id. Tokens are single‑use and expire per policy. Not stored in Prisma tables defined here; typically managed by an out‑of‑band token store."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New credential to set for the target account.\n\nOn success, the service writes a new secure hash into econ_discuss_users.password_hash and refreshes econ_discuss_users.updated_at (timestamptz). Plaintext must never be persisted or returned in responses."}},"required":["token","new_password"],"description":"Confirm password reset for a verified expert.\n\nThis DTO finalizes the reset by replacing econ_discuss_users.password_hash for the resolved account in the Actors schema (Prisma model econ_discuss_users). It never accepts or returns database‑managed identifiers or timestamps. Only the hashed credential is stored; plaintext is discarded immediately after verification."},"IEconDiscussVerifiedExpertPasswordReset.IResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password reset confirmation completed successfully.\n\nWhen true, the service has written a new hash to econ_discuss_users.password_hash and updated econ_discuss_users.updated_at."},"message":{"type":"string","description":"Optional human‑readable message describing the outcome.\n\nIntended for UX display (e.g., \"Password reset completed\" or a generic failure notice that avoids account enumeration)."},"occurred_at":{"type":"string","format":"date-time","description":"Server‑side timestamp (ISO 8601, UTC recommended) recording when the reset operation was processed.\n\nThis is a response convenience value; underlying Prisma timestamps affected include econ_discuss_users.updated_at when the reset succeeds."}},"required":["success"],"description":"Response wrapper for verified expert password reset confirmation.\n\nThis object communicates the outcome of updating econ_discuss_users.password_hash in the Actors schema (Prisma model econ_discuss_users). It contains no sensitive data and never returns credentials or token secrets. The occurred_at field can aid client UX and auditing without exposing database internals."},"IEconDiscussVerifiedExpertEmail.IRequest":{"type":"object","properties":{"locale":{"type":"string","description":"Preferred locale for the verification email content.\n\nThis value is used only for message localization and does not alter any database state. Common values follow BCP 47 (e.g., \"en-US\")."},"redirect_uri":{"type":"string","format":"uri","description":"Optional callback/return URI to embed in the verification link so that the client can resume a specific in-app or web flow after verification.\n\nThis field is transport-only and is not persisted in the database. It is useful when orchestrating deep-links after flipping econ_discuss_users.email_verified."}},"required":[],"description":"Send-verification request payload for the verified expert email flow.\n\nThis DTO is used by the endpoint that sends a verification email for an account represented in the Actors namespace (Prisma model econ_discuss_users). It does not write to the database; it only instructs the system to dispatch a message. The database column that ultimately reflects ownership confirmation is econ_discuss_users.email_verified (Boolean)."},"IEconDiscussVerifiedExpertEmail.ISent":{"type":"object","properties":{"queued":{"type":"boolean","description":"Indicates whether the verification email task was accepted and queued for delivery.\n\nWhen true, the provider has accepted the dispatch request and the message will be sent according to policy and rate limits."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) when this verification dispatch was accepted.\n\nThis timestamp is not a Prisma column; it is returned for client diagnostics and timeline rendering."},"rate_limit_reset_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When present, indicates the earliest time a subsequent resend would be accepted if the caller is currently rate-limited.\n\nThis value is not persisted in any econ_discuss_* table; it reflects provider policy state at the time of the request."}},"required":["queued","requested_at"],"description":"Acknowledgement payload for a verification email dispatch request.\n\nThis DTO confirms the send attempt for the verified expert email flow. It does not expose sensitive data. The authoritative verification state is stored in Prisma model econ_discuss_users via the email_verified Boolean and updated_at timestamp."},"IEconDiscussVerifiedExpertEmailVerify.ICreate":{"type":"object","properties":{"token":{"type":"string","description":"Opaque verification token delivered to the user via email.\n\nThe server validates this token and, on success, updates econ_discuss_users.email_verified to true and touches econ_discuss_users.updated_at per schema."}},"required":["token"],"description":"Verification request carrying the email verification token.\n\nOn successful validation, the backend flips econ_discuss_users.email_verified (Boolean) to true for the associated account and updates the updated_at timestamp as defined in the Prisma schema."},"IEconDiscussVerifiedExpertEmail.IVerified":{"type":"object","properties":{"email_verified":{"type":"boolean","description":"Resulting verification state after processing the token.\n\nThis mirrors the econ_discuss_users.email_verified column and is expected to be true on successful verification; it may already have been true for idempotent replays."},"verified_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) when the system recorded the verified state for this account.\n\nThis corresponds to the moment the service set econ_discuss_users.email_verified=true and updated econ_discuss_users.updated_at."}},"required":["email_verified","verified_at"],"description":"Verification outcome payload for the verified expert email flow.\n\nIt reflects the user’s email ownership status as stored in econ_discuss_users (email_verified Boolean) and returns the time of verification for client UX and auditing."},"IEconDiscussVerifiedExpertMfaEnroll.ICreate":{"type":"object","properties":{"method":{"const":"totp","description":"MFA enrollment method requested by the verified expert.\n\nOnly Time-based One-Time Password (TOTP) is supported for econDiscuss verified experts at this time. This aligns with the econ_discuss_users Prisma model, which stores TOTP secrets in mfa_secret and recovery codes in mfa_recovery_codes. Choosing \"totp\" instructs the server to allocate and store a new encrypted secret for the current account while keeping mfa_enabled=false until verification completes."},"device_label":{"type":"string","description":"Optional human-friendly label for the authenticator device (e.g., \"Personal Phone\", \"Work Phone\").\n\nThis is not persisted in the econ_discuss_users Prisma model but can be stored by the application for UX purposes. Use this to help the user recognize which authenticator was enrolled.","maxLength":100}},"required":["method"],"description":"Request payload to begin MFA (2FA) enrollment for a verified expert.\n\nThis DTO starts the TOTP enrollment process backed by Prisma table Actors.econ_discuss_users. The server will generate and store an encrypted TOTP secret in econ_discuss_users.mfa_secret and prepare recovery codes in econ_discuss_users.mfa_recovery_codes, while leaving econ_discuss_users.mfa_enabled=false until the verification step succeeds. No secrets are accepted from the client; the server generates them.\n\nSecurity note: Do not include sensitive values such as the TOTP secret in requests. The enrollment response provides a provisioning URI suitable for authenticator apps."},"IEconDiscussVerifiedExpertMfa.IEnroll":{"type":"object","properties":{"otpauth_uri":{"type":"string","format":"uri","description":"Provisioning URI for authenticator apps in the standard otpauth:// format.\n\nThis URI encodes the server-generated secret that is stored encrypted in econ_discuss_users.mfa_secret. It is presented to the user exactly once at enrollment time to initialize a TOTP application. The value is not persisted in client storage by the server and must not be logged."},"provisioning_expires_at":{"type":"string","format":"date-time","description":"Optional expiration timestamp (ISO 8601) for the enrollment session.\n\nThis is not a Prisma column but an application-level guardrail to limit how long the presented provisioning data should be considered valid before re-initiation is required."}},"required":["otpauth_uri"],"description":"Response payload returned when initiating MFA (2FA) enrollment for a verified expert.\n\nIt supplies an otpauth:// provisioning URI derived from the TOTP secret that the server has stored (encrypted) in econ_discuss_users.mfa_secret. MFA remains disabled (econ_discuss_users.mfa_enabled=false) until the user verifies a code via the verification endpoint. Recovery codes are not included here; they may be delivered through a dedicated endpoint or after successful verification as policy dictates.\n\nSecurity note: The provisioning URI contains secret material and must be handled with care (e.g., one-time display, avoid logging)."},"IEconDiscussVerifiedExpertMfaVerify.ICreate":{"oneOf":[{"required":["totp_code"]},{"required":["recovery_code"]}],"description":"Verification request to complete MFA (2FA) enrollment for a verified expert.\n\nSubmit exactly one of totp_code (preferred) or recovery_code. On success, the server enables MFA by setting Actors.econ_discuss_users.mfa_enabled=true and updates Actors.econ_discuss_users.updated_at. Secrets (mfa_secret, recovery codes) are never exposed in responses."},"IEconDiscussVerifiedExpertMfa.IStatus":{"type":"object","properties":{"mfa_enabled":{"type":"boolean","description":"Current MFA enablement flag for the account.\n\nDirectly reflects Actors.econ_discuss_users.mfa_enabled. True after successful verification; false during enrollment or after disablement."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the MFA-related state was last updated for this user.\n\nMaps to Actors.econ_discuss_users.updated_at, providing clients with a synchronization point for security settings."}},"required":["mfa_enabled","updated_at"],"description":"Status representation of MFA settings for a verified expert account.\n\nThis payload exposes only non-sensitive state derived from econ_discuss_users: the boolean mfa_enabled flag and the updated_at timestamp. It never includes secrets like mfa_secret or recovery codes and is suitable for account settings displays and post-verification confirmations."},"IEconDiscussVerifiedExpertMfaDisable.ITotp":{"type":"object","properties":{"method":{"const":"totp","description":"Discriminator indicating the TOTP-based MFA disable flow.\n\nUse this when disabling MFA by validating a time-based one-time password generated from the secret stored in econ_discuss_users.mfa_secret."},"totp_code":{"type":"string","pattern":"^[0-9]{6}$","description":"Time-based one-time password (TOTP) to authorize MFA disable.\n\nValidation:\n- 6-digit numeric string\n- Verified against econ_discuss_users.mfa_secret within standard time window\n\nExample: \"123456\""}},"required":["method","totp_code"],"description":"Payload for disabling MFA using a TOTP code.\n\nPrisma references:\n- econ_discuss_users.mfa_secret: used to validate totp_code\n- econ_discuss_users.mfa_enabled: will be set to false upon successful disable\n\nThis object is selected by the discriminator value method=\"totp\"."},"IEconDiscussVerifiedExpertMfaDisable.IRecovery":{"type":"object","properties":{"method":{"const":"recovery","description":"Discriminator indicating the recovery-code–based MFA disable flow.\n\nThis explicitly selects the recovery code method for disabling MFA on the account stored in Prisma table Actors.econ_discuss_users. When method is \"recovery\", a valid recovery code previously generated into econ_discuss_users.mfa_recovery_codes must be supplied."},"recovery_code":{"type":"string","pattern":"^[A-Za-z0-9-]{8,64}$","description":"A single-use recovery code provisioned during MFA setup or rotation.\n\nBusiness rules:\n- Must match one of the hashed/encrypted codes stored in econ_discuss_users.mfa_recovery_codes\n- Consumed on use and rotated/invalidated per policy\n\nExamples: \"X7K2-9QJP\" or \"A1B2C3D4E5\""}},"required":["method","recovery_code"],"description":"Payload for disabling MFA using a recovery code.\n\nPrisma references:\n- econ_discuss_users.mfa_recovery_codes: validated/consumed during disable\n- econ_discuss_users.mfa_enabled: will be set to false upon successful disable\n\nThis object is selected by the discriminator value method=\"recovery\"."},"IEconDiscussVerifiedExpertMfaDisable.ICreate":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussVerifiedExpertMfaDisable.ITotp"},{"$ref":"#/components/schemas/IEconDiscussVerifiedExpertMfaDisable.IRecovery"}],"description":"Request body to disable MFA for a verified expert account.\n\nThis union uses discriminator property \"method\" to select one of two flows:\n- method = \"totp\" → provide a 6-digit TOTP code (IEconDiscussVerifiedExpertMfaDisable.ITotp)\n- method = \"recovery\" → provide a recovery code (IEconDiscussVerifiedExpertMfaDisable.IRecovery)\n\nPrisma references:\n- Actors.econ_discuss_users.mfa_secret, mfa_recovery_codes: used for validation\n- Actors.econ_discuss_users.mfa_enabled: set to false upon successful disable\n\nSecurity: Do not log codes; enforce rate limits and step-up verification policies."},"IEconDiscussVerifiedExpertMfaRecovery.ICreate":{"type":"object","properties":{"totp_code":{"type":"string","pattern":"^[0-9]{6}$","description":"Current TOTP code from the authenticator app to authorize regeneration of recovery codes.\n\nValidated against econ_discuss_users.mfa_secret. Typical 6-digit numeric string, valid within standard time window.\n\nExample: \"123456\""}},"required":["totp_code"],"description":"Request body to regenerate MFA recovery codes for a verified expert account.\n\nPrisma references:\n- econ_discuss_users.mfa_secret: used to validate totp_code\n- econ_discuss_users.mfa_recovery_codes: replaced with a new set upon success\n\nSecurity: Display new recovery codes only once; never store or return plaintext codes beyond initial reveal."},"IEconDiscussVerifiedExpertMfa.IRecoveryCodes":{"type":"object","properties":{"codes":{"type":"array","items":{"type":"string","pattern":"^[A-Za-z0-9-]{8,64}$","description":"One-time display recovery code. Store securely offline. Example formats: \"X7K2-9QJP\", \"A1B2-C3D4\" or longer tokens."},"minItems":5,"description":"List of freshly generated recovery codes. Shown exactly once to the client after rotation.\n\nPrivacy and security:\n- Do not return after initial reveal\n- Encourage offline/secure storage\n- Codes will be stored hashed/encrypted at rest"}},"required":["codes"],"description":"Response body carrying the one-time display of newly generated MFA recovery codes for a verified expert.\n\nPrisma references:\n- econ_discuss_users.mfa_recovery_codes: newly generated and stored in hashed/encrypted form\n\nNote: This object is ephemeral for client consumption; it is not a direct row from any Prisma model."},"IEconDiscussModerator.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Moderator’s login email address.\n\nPrisma mapping: econ_discuss_users.email (unique). The server ensures uniqueness and normalization (e.g., lowercase) at the application layer."},"password":{"type":"string","minLength":8,"description":"Plaintext password to be hashed server-side before persistence.\n\nPrisma mapping: econ_discuss_users.password_hash (derived). Never store or echo plaintext."},"display_name":{"type":"string","minLength":1,"maxLength":120,"description":"Public display name/handle for the moderator.\n\nPrisma mapping: econ_discuss_users.display_name. Indexed for discovery via trigram according to schema comments."},"timezone":{"type":"string","description":"Optional IANA timezone identifier used for notifications and scheduling.\n\nPrisma mapping: econ_discuss_users.timezone. Example: \"Asia/Seoul\""},"locale":{"type":"string","description":"Optional UI locale/language tag (BCP 47).\n\nPrisma mapping: econ_discuss_users.locale. Example: \"en-US\""},"avatar_uri":{"type":"string","format":"uri","description":"Optional avatar image URI for the profile.\n\nPrisma mapping: econ_discuss_users.avatar_uri (varchar). Validate format and reasonable length per application policy."}},"required":["email","password","display_name"],"description":"Moderator registration payload.\n\nOn success, the server will:\n- Create Actors.econ_discuss_users with email, password_hash (derived from password), display_name, optional timezone/locale/avatar_uri, and defaults for email_verified=false, mfa_enabled=false, mfa_secret=null, mfa_recovery_codes=null\n- Create Actors.econ_discuss_moderators with user_id and enforced_2fa=true per policy\n\nSecurity:\n- Do not accept system-managed fields like id/created_at/updated_at/enforced_2fa\n- Hash the password before persistence\n- Enforce email uniqueness and strong password policy"},"IEconDiscussModerator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user (econ_discuss_users.id).\n\nPrisma reference: Actors.econ_discuss_users.id — Primary key for the platform account record representing the moderator identity."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"role":{"const":"moderator","description":"Client-facing role indicator for the current authorization context.\n\nDerived from Actors.econ_discuss_moderators (presence of a row linked by user_id)."},"display_name":{"type":"string","description":"Publicly visible handle from econ_discuss_users.display_name.\n\nPrisma reference: Actors.econ_discuss_users.display_name — Human‑readable display name."},"email_verified":{"type":"boolean","description":"Whether the user’s email is verified (econ_discuss_users.email_verified).\n\nPrisma reference: Actors.econ_discuss_users.email_verified — Boolean flag toggled by separate verification flow."},"mfa_enabled":{"type":"boolean","description":"Whether multi‑factor authentication is enabled (econ_discuss_users.mfa_enabled).\n\nPrisma reference: Actors.econ_discuss_users.mfa_enabled — Indicates if the account has successfully completed MFA setup."},"timezone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred IANA timezone identifier used for notifications and scheduling (econ_discuss_users.timezone).\n\nPrisma reference: Actors.econ_discuss_users.timezone — Nullable text field; example: \"Asia/Seoul\"."},"locale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred BCP‑47 locale tag for UI (econ_discuss_users.locale).\n\nPrisma reference: Actors.econ_discuss_users.locale — Nullable; example: \"en-US\"."},"avatar_uri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional avatar image URI (econ_discuss_users.avatar_uri).\n\nPrisma reference: Actors.econ_discuss_users.avatar_uri — Nullable VarChar; URI format recommended at the application layer."}},"required":["id","token"],"description":"Authorization response for a Moderator session.\n\nThis DTO represents the authenticated principal after successful moderator login/join/refresh. It intentionally excludes sensitive fields like password_hash, mfa_secret, and mfa_recovery_codes. The id maps to econ_discuss_users.id and the role is inferred from the presence of a linked row in Actors.econ_discuss_moderators.\n\nSecurity notes: Never include secrets or recovery codes. JWT material is provided via the IAuthorizationToken reference. Timestamps (created_at/updated_at) and internal flags may be omitted from this surface unless business requirements explicitly need them."},"IEconDiscussModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User’s login email (econ_discuss_users.email).\n\nPrisma reference: Actors.econ_discuss_users.email — Unique email used for authentication and notifications."},"password":{"type":"string","minLength":8,"description":"Plaintext password to be verified and hashed server‑side against econ_discuss_users.password_hash.\n\nPrisma reference: Actors.econ_discuss_users.password_hash — Stored hash; plaintext is never persisted."}},"required":["email","password"],"description":"Moderator login request payload.\n\nPer Auth DTO rules, this request contains only email and password. If policy requires MFA, the platform performs a separate MFA verification step/endpoint after primary credential validation using MFA artifacts stored in econ_discuss_users (mfa_enabled, mfa_secret, mfa_recovery_codes)."},"IEconDiscussModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token presented for rotation/renewal.\n\nBusiness note: Token validation/rotation is handled by the auth layer; Prisma schema does not persist tokens."}},"required":["refresh_token"],"description":"Moderator token refresh request.\n\nConsumes a refresh token and returns a new authorized session upon success. The service may revalidate role presence via Actors.econ_discuss_moderators before issuing tokens."},"IEconDiscussAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin account email (unique) to persist into econ_discuss_users.email.\n\nPrisma reference: Actors.econ_discuss_users.email — Uniqueness enforced by @@unique([email])."},"password":{"type":"string","minLength":8,"description":"Plaintext password. The server hashes this into econ_discuss_users.password_hash; plaintext is never stored.\n\nPrisma reference: Actors.econ_discuss_users.password_hash — Secure hash storage only."},"display_name":{"type":"string","minLength":1,"description":"Public display name/handle stored in econ_discuss_users.display_name.\n\nPrisma reference: Actors.econ_discuss_users.display_name — Required for identity surfaces."},"timezone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional IANA timezone identifier mapped to econ_discuss_users.timezone. Example: \"Asia/Seoul\".\n\nPrisma reference: Actors.econ_discuss_users.timezone — Used for digests and scheduling."},"locale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional BCP‑47 locale tag mapped to econ_discuss_users.locale. Example: \"en-US\".\n\nPrisma reference: Actors.econ_discuss_users.locale — UI language preference."},"avatar_uri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional avatar image URI stored in econ_discuss_users.avatar_uri.\n\nPrisma reference: Actors.econ_discuss_users.avatar_uri — Nullable VarChar; URI format recommended at the application layer."}},"required":["email","password","display_name"],"description":"Admin registration payload.\n\nCreates a base identity in Actors.econ_discuss_users with the provided credentials and preferences. Role assignment to Actors.econ_discuss_admins (including superuser/enforced_2fa) is handled by service logic; those flags are not part of this public request to avoid privilege escalation via client input.\n\nSecurity notes: Never accept password_hash from clients; accept plaintext only and hash server‑side. Initialize email_verified=false and mfa_enabled=false on creation per policy; MFA secrets/codes are configured via dedicated endpoints."},"IEconDiscussAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator, taken from Actors.econ_discuss_users.id.\n\nSecurity: never expose password_hash, mfa_secret, or mfa_recovery_codes. This id links the authorization result to the econ_discuss_users row as documented in the Prisma schema comments."},"role":{"const":"admin","description":"Fixed role claim for this authorization context.\n\nPresence indicates administrator scope confirmed by a linked row in Actors.econ_discuss_admins for the same user_id."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"admin":{"$ref":"#/components/schemas/IEconDiscussAdmin.ISubject","description":"Administrator subject profile assembled from Actors.econ_discuss_users (identity and preferences) and role presence in Actors.econ_discuss_admins.\n\nSensitive authentication fields are intentionally omitted."}},"required":["id","token"],"description":"Authorization response for administrator flows (join/login/refresh).\n\nOn success, returns core subject id and a standard JWT token set. Optional fields provide role context and a subject projection. Prisma tables referenced: econ_discuss_users (id, display_name, avatar_uri, timezone, locale, email_verified, mfa_enabled) and econ_discuss_admins (role assignment and policy flags, not exposed directly)."},"IEconDiscussAdmin.ISubject":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Administrator’s user id from Actors.econ_discuss_users.id."},"displayName":{"type":"string","description":"Public display name/handle from Actors.econ_discuss_users.display_name.\n\nUsed for identification in admin consoles and audit views."},"avatarUri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional avatar image URI from Actors.econ_discuss_users.avatar_uri.\n\nApplication should validate URI format; may be null when not configured."},"timezone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred IANA timezone from Actors.econ_discuss_users.timezone (e.g., Asia/Seoul).\n\nUsed for scheduling and timestamp presentation; nullable when unspecified."},"locale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred locale (e.g., en-US) from Actors.econ_discuss_users.locale.\n\nImpacts UI and notification localization; nullable when not set."},"emailVerified":{"type":"boolean","description":"Email verification flag from Actors.econ_discuss_users.email_verified.\n\nCertain administrative actions may be gated until verified."},"mfaEnabled":{"type":"boolean","description":"Multi-factor authentication enabled flag from Actors.econ_discuss_users.mfa_enabled.\n\nUnderlying mfa_secret and mfa_recovery_codes remain confidential and are never exposed."},"createdAt":{"type":"string","format":"date-time","description":"Record creation timestamp from Actors.econ_discuss_users.created_at.\n\nProvided for audit display and client-side freshness."},"updatedAt":{"type":"string","format":"date-time","description":"Record last update timestamp from Actors.econ_discuss_users.updated_at.\n\nUpdated when profile or security-relevant settings change."}},"required":["id","displayName","emailVerified","mfaEnabled"],"description":"Administrator subject projection based on Actors.econ_discuss_users.\n\nContains identity and preference fields suitable for client-side session context while omitting confidential authentication columns described in the Prisma schema (password_hash, mfa_secret, mfa_recovery_codes)."},"IEconDiscussAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator account email for authentication (Actors.econ_discuss_users.email).\n\nUniqueness is enforced by @@unique([email]) in the Prisma schema."},"password":{"type":"string","description":"Plaintext password to be verified against Actors.econ_discuss_users.password_hash.\n\nThe server hashes the password and compares; plaintext is never persisted."},"mfaCode":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional one-time code for MFA verification when required by policy.\n\nWhen econ_discuss_admins.enforced_2fa is true and/or econ_discuss_users.mfa_enabled is true, provide a TOTP or recovery code. Null when not used."}},"required":["email","password"],"description":"Admin login request payload.\n\nValidates credentials against Actors.econ_discuss_users (email/password_hash) and confirms administrator scope via Actors.econ_discuss_admins. Supports optional MFA with mfaCode when enforced."},"IEconDiscussAdmin.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Opaque refresh token presented for rotation and access token renewal.\n\nThe server derives identity from token claims and revalidates admin role via Actors.econ_discuss_admins."}},"required":["refreshToken"],"description":"Admin token refresh request carrying only the refresh token.\n\nNo direct user identifiers are supplied; identity and role are inferred from the validated token."},"IEconDiscussAdmin.IEmailResendRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Target administrator email address (Actors.econ_discuss_users.email) to resend a verification message.\n\nResponses should be neutral to avoid user enumeration."}},"required":["email"],"description":"Resend administrator email verification request.\n\nTriggers mailer flows to deliver a fresh verification link without revealing account existence."},"IEconDiscussAdmin.ISecurityEvent":{"type":"object","description":"Security operation acknowledgement for administrator-focused authentication flows.\n\nThis DTO is returned by endpoints that do not yield domain entities but confirm that a security-sensitive action has been accepted or completed (e.g., email verification dispatch, password reset initiation/confirmation, password change). It intentionally carries no secrets and no database identifiers.\n\nBusiness context: the underlying identity comes from the Actors schema (Prisma) using econ_discuss_users for account state (email/email_verified, mfa_enabled) and econ_discuss_admins for role assignment (superuser, enforced_2fa). This response does not expose columns such as password_hash, mfa_secret, or mfa_recovery_codes; it merely reports the outcome and a timestamp suitable for client UX and audit trails.","properties":{"outcome":{"type":"string","description":"Human-readable outcome keyword describing the security action result.\n\nTypical values include: \"queued\" (e.g., email resend), \"sent\" (message dispatched), \"verified\" (email or MFA confirmed), \"updated\" (password changed), or \"completed\" (flow finished). The exact vocabulary is implementation-defined and may vary by endpoint."},"message":{"type":"string","description":"Optional descriptive message suitable for UI display. Does not contain secrets or internal identifiers.\n\nExample: \"Verification email sent. Please check your inbox.\""},"occurred_at":{"type":"string","format":"date-time","description":"Server-side timestamp (ISO 8601, UTC) when the system accepted/completed the security action.\n\nThis is not a database column; it is derived from the operation time and is useful for client-side logging and user feedback."},"request_id":{"type":"string","description":"Optional request correlation identifier useful for client support and auditing.\n\nThis value can correlate app/server logs and may originate from tracing middleware or API gateway. It is not a Prisma primary key and must not reveal internal infrastructure details."}},"required":["outcome","occurred_at"]},"IEconDiscussAdmin.IEmailVerifyRequest":{"type":"object","description":"Email verification confirmation payload for administrator accounts.\n\nThis request body contains the opaque verification token delivered out-of-band (e.g., email link). On successful verification, the service updates Actors.econ_discuss_users.email_verified to true and touches updated_at per Prisma schema. It does not include or expose any sensitive authentication material.\n\nRelevant Prisma columns referenced by the workflow:\n- econ_discuss_users.email_verified (Boolean)\n- econ_discuss_users.updated_at (timestamp)\n\nNo other columns are modified by this request itself; tokens are validated at the service layer.","properties":{"token":{"type":"string","description":"Opaque verification token proving ownership of econ_discuss_users.email.\n\nSupplied via a secure email link; format is implementation-defined (e.g., JWT or random hash)."}},"required":["token"]},"IEconDiscussAdmin.IChangePassword":{"type":"object","description":"Change-password request for an authenticated administrator.\n\nThe service validates the current credential against Actors.econ_discuss_users.password_hash and, on success, replaces it with a new hash derived from new_password and updates econ_discuss_users.updated_at. The request must never transmit or receive password hashes; only plaintext inputs are accepted over a secure channel (TLS) and hashed server-side.\n\nPrisma columns involved (referenced by service logic):\n- econ_discuss_users.password_hash (String) — updated by this operation\n- econ_discuss_users.updated_at (timestamp) — touched on success\n\nIf 2FA is enforced (see Actors.econ_discuss_admins.enforced_2fa and econ_discuss_users.mfa_enabled), the service may require additional second‑factor validation outside this DTO.","properties":{"current_password":{"type":"string","description":"Current account password in plaintext for verification against econ_discuss_users.password_hash.\n\nMust be provided by the authenticated administrator. Never logged or stored as plaintext."},"new_password":{"type":"string","description":"New account password in plaintext.\n\nServer hashes it to replace econ_discuss_users.password_hash. Apply your platform’s password policy (length, complexity, breach checks) at validation time."}},"required":["current_password","new_password"]},"IEconDiscussAdmin.IPasswordResetRequest":{"type":"object","description":"Initiate a password reset for an administrator account by email.\n\nThis request starts an out-of-band flow: the service locates the user by econ_discuss_users.email (if present), creates a time-limited reset token (not modeled in Prisma), and dispatches an email. To avoid account enumeration, responses must be generic regardless of account existence.\n\nPrisma columns referenced by service logic (read-only at this step):\n- econ_discuss_users.email (unique)\n- econ_discuss_users.email_verified (may influence messaging)\n\nNo columns are modified in this step; password_hash is only updated by the separate reset-confirm endpoint.","properties":{"email":{"type":"string","format":"email","description":"Email address of the account requesting a password reset.\n\nMust be a valid email; uniqueness is enforced in Prisma at econ_discuss_users.email, but the API should not disclose whether the address exists."}},"required":["email"]},"IEconDiscussAdmin.IPasswordResetConfirm":{"type":"object","properties":{"token":{"type":"string","description":"Password reset token delivered out-of-band (e.g., via email link).\n\nThis token identifies the target account in Actors.econ_discuss_users for which the credential update will occur. The token is validated server-side; the client only passes it back unchanged."},"new_password":{"type":"string","format":"password","minLength":8,"description":"New plaintext password to set for the account. The backend hashes this value into Actors.econ_discuss_users.password_hash.\n\nSecurity notes:\n- Never log this field.\n- Transport must be HTTPS.\n- Strong password policy should be enforced by the provider."}},"required":["token","new_password"],"description":"Confirm administrator password reset.\n\nOn success, the service updates Actors.econ_discuss_users.password_hash and touches updated_at. Sensitive MFA fields (mfa_secret, mfa_recovery_codes) are not modified by this operation. This DTO corresponds to the confirm step described in the admin password reset flow and maps to the Prisma table columns documented in the Actors namespace."},"IEAuthMfaMethod":{"const":"totp","description":"Multi-factor authentication method enumeration for enrollment and verification flows.\n\nPermitted value:\n- totp: Time-based One-Time Password using a shared secret stored (encrypted/managed) in Actors.econ_discuss_users.mfa_secret and one-time recovery codes hashed/encrypted in Actors.econ_discuss_users.mfa_recovery_codes. Clients submit TOTP or recovery codes for verification; secrets are never returned in responses.\n\nThis enum is used by authentication endpoints to indicate the factor method in use. Additional methods (e.g., WebAuthn) can be added in the future by extending this enumeration without breaking existing contracts."},"IEconDiscussAdmin.IMfaSetupRequest":{"type":"object","properties":{"method":{"$ref":"#/components/schemas/IEAuthMfaMethod","description":"MFA method to enroll.\n\nIn the current system, TOTP is supported and requires provisioning a secret in Actors.econ_discuss_users.mfa_secret."}},"required":["method"],"description":"Request to begin MFA enrollment for an administrator account.\n\nWhen method=totp, the server generates and stores an encrypted secret in Actors.econ_discuss_users.mfa_secret and prepares recovery codes in Actors.econ_discuss_users.mfa_recovery_codes. It returns provisioning information in the corresponding response. MFA is not enabled until verification completes (mfa_enabled remains false)."},"IEconDiscussAdmin.IMfaSetup":{"type":"object","properties":{"method":{"$ref":"#/components/schemas/IEAuthMfaMethod","description":"Enrolled MFA method for which provisioning data is being returned."},"provisioning_uri":{"type":"string","format":"uri","description":"otpauth:// provisioning URI suitable for TOTP authenticators (e.g., authenticator apps).\n\nThis value encodes issuer/account metadata and the generated secret (never display or log after initial delivery)."},"secret_masked":{"type":"string","description":"Masked representation of the shared secret for human copy if clients do not use a QR flow.\n\nDo not expose full raw secret in logs or subsequent reads. Present only during setup and preferably masked (e.g., show last 4 characters).","examples":{"v0":"JBSW-Y3DP-****-****-9XQY"}}},"required":["method","provisioning_uri"],"description":"Provisioning details returned when starting MFA setup for administrators.\n\nThis DTO conveys client bootstrap data for TOTP enrollment while keeping secrets confidential. The underlying artifacts are persisted in Actors.econ_discuss_users (mfa_secret, mfa_recovery_codes) but MFA is only activated after successful verification (mfa_enabled=true)."},"IEconDiscussAdmin.IMfaVerifyRequest":{"oneOf":[{"required":["code"]},{"required":["recovery_code"]}],"description":"Verify MFA enrollment for an administrator using either a TOTP code or a recovery code.\n\nOn success, the backend sets Actors.econ_discuss_users.mfa_enabled=true and updates updated_at. Provide exactly one of the fields (code or recovery_code)."},"IEconDiscussAdmin.IMfaDisableRequest":{"oneOf":[{"required":["code"]},{"required":["recovery_code"]}],"description":"Disable administrator multi-factor authentication (MFA) by submitting either a current TOTP code or a recovery code.\n\nOn success, the server sets Actors.econ_discuss_users.mfa_enabled=false and rotates/clears mfa_secret and mfa_recovery_codes per policy, updating updated_at."},"IEconDiscussAdmin.IMfaRegenerateRequest":{"type":"object","properties":{"totpCode":{"type":"string","description":"Current valid TOTP code derived from Actors.econ_discuss_users.mfa_secret and used to authorize regeneration of recovery codes.\n\nA successful submission confirms possession of the enrolled factor before replacing econ_discuss_users.mfa_recovery_codes."}},"required":["totpCode"],"description":"Admin request to regenerate MFA recovery codes.\n\nThis payload proves possession of the enrolled second factor using a current TOTP code. Upon success, the service issues a fresh set of one-time recovery codes and securely replaces Actors.econ_discuss_users.mfa_recovery_codes. No database schema change occurs beyond updating the stored codes and timestamps per the Prisma comments."},"IEconDiscussAdmin.IMfaRecoveryCodes":{"type":"object","properties":{"codes":{"type":"array","items":{"type":"string"},"description":"Plaintext recovery codes issued to the administrator. These are displayed exactly once and must be stored securely by the user.\n\nOn the server, only hashed/encrypted forms are retained in Actors.econ_discuss_users.mfa_recovery_codes. Each code is one-time use."},"count":{"type":"integer","format":"int32","description":"Number of recovery codes included in this issuance.\n\nUseful for clients to verify completeness of what was displayed and stored by the user."},"generatedAt":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when this set of recovery codes was generated.\n\nProvided for auditing UX and to help users distinguish recent vs. older sets on their side (server retains only hashed/encrypted codes)."}},"required":["codes","count","generatedAt"],"description":"Response payload containing newly generated MFA recovery codes for an admin.\n\nThis DTO is returned by endpoints that rotate econ_discuss_users.mfa_recovery_codes. It intentionally contains only client‑displayable data (plaintext codes and metadata). Secrets are never persisted in the response beyond this one-time display, consistent with the Prisma schema guidance on secure storage."},"IEconDiscussUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user account.\n\nMaps to Actors.econ_discuss_users.id (UUID primary key)."},"displayName":{"type":"string","description":"Publicly visible display name/handle for the account.\n\nBacked by Actors.econ_discuss_users.display_name as described in the Prisma schema."},"avatarUri":{"type":"string","format":"uri","description":"Optional avatar image URI.\n\nReflects Actors.econ_discuss_users.avatar_uri which stores a URI (application validates length/format)."},"timezone":{"type":"string","description":"Optional IANA time zone identifier used for notifications, digests, and scheduling (e.g., \"Asia/Seoul\").\n\nBacked by Actors.econ_discuss_users.timezone."},"locale":{"type":"string","description":"Optional preferred locale (e.g., \"en-US\") used for UI and communications.\n\nBacked by Actors.econ_discuss_users.locale."},"emailVerified":{"type":"boolean","description":"Indicates whether the account’s email has been verified.\n\nDerived from Actors.econ_discuss_users.email_verified. Exposed as a boolean flag only; the email address itself is not returned for privacy."},"mfaEnabled":{"type":"boolean","description":"Indicates whether multi‑factor authentication is enabled for this account.\n\nReflects Actors.econ_discuss_users.mfa_enabled. MFA secrets and recovery codes are never exposed."},"isExpertVerified":{"type":"boolean","description":"Computed indicator that the user holds at least one active expert domain badge.\n\nDerived by the presence of a related row in Actors.econ_discuss_verified_experts and/or active entries in Actors.econ_discuss_expert_domain_badges joined through Topics.econ_discuss_topics. This field is computed by the service and not stored directly in the user table."},"createdAt":{"type":"string","format":"date-time","description":"Account creation timestamp.\n\nMaps to Actors.econ_discuss_users.created_at (timestamptz). Returned as an ISO 8601 string."},"updatedAt":{"type":"string","format":"date-time","description":"Last account update timestamp.\n\nMaps to Actors.econ_discuss_users.updated_at (timestamptz). Returned as an ISO 8601 string."}},"required":["id","displayName","emailVerified","mfaEnabled","isExpertVerified","createdAt","updatedAt"],"description":"Public-facing user entity built primarily from Actors.econ_discuss_users with security filtering applied.\n\nThis DTO intentionally omits confidential fields from the Prisma model such as password_hash, mfa_secret, mfa_recovery_codes, and the email value itself. It surfaces safe identity and preference attributes (display name, avatar URI, timezone, locale), verification flags (emailVerified, mfaEnabled), a computed expertise indicator (isExpertVerified), and audit timestamps. All timestamps are serialized as ISO 8601 strings and UUIDs follow standard formatting."},"IEconDiscussUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the user.\n\nMaps to econ_discuss_users.id (UUID)."},"displayName":{"type":"string","description":"Publicly visible display name or handle.\n\nMaps to econ_discuss_users.display_name."},"avatarUri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional avatar image URI for the profile. Validate as a web URI in the application layer.\n\nMaps to econ_discuss_users.avatar_uri (nullable VarChar)."},"timezone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred IANA timezone identifier used for notifications, digests, and scheduling (e.g., Asia/Seoul).\n\nMaps to econ_discuss_users.timezone (nullable)."},"locale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred locale (e.g., en-US) for UI and communication.\n\nMaps to econ_discuss_users.locale (nullable)."},"emailVerified":{"type":"boolean","description":"Whether the account’s email address has been verified.\n\nMaps to econ_discuss_users.email_verified. For public profiles, platforms may omit showing this flag; for self endpoints it is typically included."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short biography or professional summary.\n\nMaps to econ_discuss_user_profiles.bio (nullable)."},"affiliation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Current affiliation or organization string.\n\nMaps to econ_discuss_user_profiles.affiliation (nullable)."},"website":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Personal or professional website URI.\n\nMaps to econ_discuss_user_profiles.website (nullable VarChar)."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free‑form location string for public display.\n\nMaps to econ_discuss_user_profiles.location (nullable)."},"isExpertVerified":{"type":"boolean","description":"Computed flag indicating whether this user currently holds a verified expert role/badge.\n\nDerived from presence of related rows in econ_discuss_verified_experts and/or econ_discuss_expert_domain_badges (not a stored column)."},"reputation":{"type":"integer","minimum":0,"description":"Computed reputation score for the user if available at query time.\n\nDerived from econ_discuss_user_reputations.score; exposed for convenience in profile queries. Not a stored column of the profile itself."},"createdAt":{"type":"string","format":"date-time","description":"Record creation timestamp for the base identity.\n\nMaps to econ_discuss_users.created_at (timestamptz)."},"updatedAt":{"type":"string","format":"date-time","description":"Record last update timestamp for the base identity/profile composite.\n\nMaps primarily to econ_discuss_users.updated_at; extended profile updates may also track econ_discuss_user_profiles.updated_at."}},"required":["id","displayName","emailVerified","createdAt","updatedAt"],"description":"User profile view combining base identity (Actors.econ_discuss_users) and extended profile (Actors.econ_discuss_user_profiles).\n\nThis DTO excludes sensitive authentication materials such as password_hash, mfa_secret, and mfa_recovery_codes. It aggregates safe, public-facing fields (display name, avatar, timezone/locale) and optional extended biography fields (bio, affiliation, website, location).\n\nReferences:\n- econ_discuss_users: primary account table with identity, preferences, and lifecycle timestamps.\n- econ_discuss_user_profiles: optional 1:1 profile details (bio/affiliation/website/location).\n- Derived flags/values like isExpertVerified and reputation are computed from related tables (econ_discuss_verified_experts, econ_discuss_user_reputations) without requiring schema changes."},"IEconDiscussUserFollow.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number (1-based) for pagination."},"pageSize":{"type":"integer","minimum":1,"maximum":200,"description":"Number of records per page. Service enforces sensible upper bounds."},"q":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-text query to match follower display names (leverages GIN trigram index on econ_discuss_users.display_name)."},"dateFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter followers created on/after this timestamp.\n\nMaps to econ_discuss_user_follows.created_at (timestamptz)."},"dateTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter followers created on/before this timestamp.\n\nMaps to econ_discuss_user_follows.created_at (timestamptz)."},"sortBy":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussUserFollowSortBy"},{"type":"null"}],"description":"Sort field for follower listing. Default is created_at desc."},"order":{"oneOf":[{"$ref":"#/components/schemas/IESortOrder"},{"type":"null"}],"description":"Sort direction (asc/desc). Default desc when sortBy is created_at."}},"required":["page","pageSize"],"description":"Request body for advanced follower search over Actors.econ_discuss_user_follows.\n\nSupports pagination, basic text search (q), date range filters on created_at, and ordering controls. Only active relationships (deleted_at IS NULL) should be considered by the service."},"IEconDiscussUser.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number (1-based)."},"pageSize":{"type":"integer","minimum":1,"maximum":200,"description":"Page size (upper-bounded by service policy)."},"q":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-text search against econ_discuss_users.display_name for followee discovery."},"isExpertOnly":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"If true, restrict results to users with a verified expert assignment (via econ_discuss_verified_experts / econ_discuss_expert_domain_badges)."},"sortBy":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussUserSortBy"},{"type":"null"}],"description":"Sort field for followee/user listing."},"order":{"oneOf":[{"$ref":"#/components/schemas/IESortOrder"},{"type":"null"}],"description":"Sort direction (asc/desc)."}},"required":["page","pageSize"],"description":"Request body for advanced user/followee searches.\n\nIntended for listing accounts a user follows or general user directory queries. Supports pagination, text search, optional expert-only filter, and sorting."},"IEconDiscussUserReputation":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the reputation aggregate record.\n\nMaps to econ_discuss_user_reputations.id (UUID)."},"userId":{"type":"string","format":"uuid","description":"Related user identifier.\n\nMaps to econ_discuss_user_reputations.user_id referencing econ_discuss_users.id."},"score":{"type":"integer","minimum":0,"description":"Current non-negative reputation score for the user.\n\nMaps to econ_discuss_user_reputations.score."},"lastUpdatedAt":{"type":"string","format":"date-time","description":"Timestamp when the score was last recalculated.\n\nMaps to econ_discuss_user_reputations.last_updated_at (timestamptz)."},"createdAt":{"type":"string","format":"date-time","description":"Aggregate row creation timestamp.\n\nMaps to econ_discuss_user_reputations.created_at (timestamptz)."},"updatedAt":{"type":"string","format":"date-time","description":"Aggregate row last update timestamp.\n\nMaps to econ_discuss_user_reputations.updated_at (timestamptz)."}},"required":["id","userId","score","lastUpdatedAt","createdAt","updatedAt"],"description":"Reputation aggregate snapshot for a user as stored in Actors.econ_discuss_user_reputations.\n\nActs as a fast-access cache derived from immutable ledger entries in Actors.econ_discuss_reputation_events. Excludes rows with deleted_at from active use by convention (not exposed here)."},"IEEconDiscussUserFollowSortBy":{"oneOf":[{"const":"created_at","description":"Sort keys for follower search.\n- created_at: uses econ_discuss_user_follows.created_at\n- display_name: uses econ_discuss_users.display_name (joined)"},{"const":"display_name","description":"Sort keys for follower search.\n- created_at: uses econ_discuss_user_follows.created_at\n- display_name: uses econ_discuss_users.display_name (joined)"}],"description":"Sort keys for follower search.\n- created_at: uses econ_discuss_user_follows.created_at\n- display_name: uses econ_discuss_users.display_name (joined)"},"IEEconDiscussUserSortBy":{"oneOf":[{"const":"created_at","description":"User/followee sort keys for discovery and relationship listings.\n\nAllowed values:\n- created_at: sort by creation time of the relationship or user record depending on context.\n- display_name: sort by econ_discuss_users.display_name (GIN trigram index supports search/sort operations).\n- reputation: sort by derived score from econ_discuss_user_reputations.score when exposed by the endpoint.\n\nSchema alignment:\n- display_name maps to econ_discuss_users.display_name\n- created_at maps to either econ_discuss_user_follows.created_at or econ_discuss_users.created_at per endpoint semantics\n- reputation is derived from econ_discuss_user_reputations.score"},{"const":"display_name","description":"User/followee sort keys for discovery and relationship listings.\n\nAllowed values:\n- created_at: sort by creation time of the relationship or user record depending on context.\n- display_name: sort by econ_discuss_users.display_name (GIN trigram index supports search/sort operations).\n- reputation: sort by derived score from econ_discuss_user_reputations.score when exposed by the endpoint.\n\nSchema alignment:\n- display_name maps to econ_discuss_users.display_name\n- created_at maps to either econ_discuss_user_follows.created_at or econ_discuss_users.created_at per endpoint semantics\n- reputation is derived from econ_discuss_user_reputations.score"},{"const":"reputation","description":"User/followee sort keys for discovery and relationship listings.\n\nAllowed values:\n- created_at: sort by creation time of the relationship or user record depending on context.\n- display_name: sort by econ_discuss_users.display_name (GIN trigram index supports search/sort operations).\n- reputation: sort by derived score from econ_discuss_user_reputations.score when exposed by the endpoint.\n\nSchema alignment:\n- display_name maps to econ_discuss_users.display_name\n- created_at maps to either econ_discuss_user_follows.created_at or econ_discuss_users.created_at per endpoint semantics\n- reputation is derived from econ_discuss_user_reputations.score"}],"description":"User/followee sort keys for discovery and relationship listings.\n\nAllowed values:\n- created_at: sort by creation time of the relationship or user record depending on context.\n- display_name: sort by econ_discuss_users.display_name (GIN trigram index supports search/sort operations).\n- reputation: sort by derived score from econ_discuss_user_reputations.score when exposed by the endpoint.\n\nSchema alignment:\n- display_name maps to econ_discuss_users.display_name\n- created_at maps to either econ_discuss_user_follows.created_at or econ_discuss_users.created_at per endpoint semantics\n- reputation is derived from econ_discuss_user_reputations.score"},"IESortOrder":{"oneOf":[{"const":"asc","description":"Sort order enumeration used by list/search DTOs."},{"const":"desc","description":"Sort order enumeration used by list/search DTOs."}],"description":"Sort order enumeration used by list/search DTOs."},"IEconDiscussReputationEvent.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page index for pagination (1-based).\n\nBusiness: request a specific page of the reputation ledger.\nValidation: positive integer.\nMaps to standard pagination semantics."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of records to return per page.\n\nBusiness: bound result size for stable paging and performance.\nServer may enforce upper bound (e.g., 200)."},"dateFrom":{"type":"string","format":"date-time","description":"Inclusive lower bound for occurred_at filtering (ISO 8601).\n\nMaps to econ_discuss_reputation_events.occurred_at >= dateFrom."},"dateTo":{"type":"string","format":"date-time","description":"Inclusive upper bound for occurred_at filtering (ISO 8601).\n\nMaps to econ_discuss_reputation_events.occurred_at <= dateTo."},"pointsMin":{"type":"integer","description":"Minimum points (delta) to include.\n\nMaps to econ_discuss_reputation_events.points >= pointsMin."},"pointsMax":{"type":"integer","description":"Maximum points (delta) to include.\n\nMaps to econ_discuss_reputation_events.points <= pointsMax."},"reason":{"type":"string","description":"Substring filter applied to econ_discuss_reputation_events.reason.\n\nExamples: upvote_post, curated_feature, moderation_penalty."},"postId":{"type":"string","format":"uuid","description":"Filter events linked to a specific post.\n\nMaps to econ_discuss_reputation_events.post_id (UUID)."},"sortBy":{"$ref":"#/components/schemas/IEReputationEventSortBy","description":"Sort key applied to the results. See IEReputationEventSortBy."},"sortOrder":{"$ref":"#/components/schemas/IESortOrder","description":"Sort direction applied alongside sortBy: asc | desc."}},"required":[],"description":"Request parameters for searching and paginating the reputation ledger per user.\n\nBacked by Prisma model: econ_discuss_reputation_events columns include occurred_at (DateTime), points (Int), reason (String), post_id (String? UUID), created_at/updated_at. This DTO carries filters only; controllers enforce ownership/authorization using the authenticated principal and path parameters.\n\nSecurity: No direct user-id filters are accepted to comply with platform policy. Use path scoping and server-side context for user identity.\n\nPagination: follows platform conventions (page, limit)."},"IEconDiscussReputationEvent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the ledger entry.\n\nMaps to econ_discuss_reputation_events.id (UUID PK)."},"userId":{"type":"string","format":"uuid","description":"Beneficiary user's ID receiving the reputation delta.\n\nMaps to econ_discuss_reputation_events.user_id (FK → econ_discuss_users.id)."},"actorUserId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional actor responsible for the event (e.g., curator, voter).\n\nMaps to econ_discuss_reputation_events.actor_user_id. Nullable in schema, hence union string|null."},"postId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional related post ID for content-scoped events.\n\nMaps to econ_discuss_reputation_events.post_id. Nullable in schema, hence union string|null."},"points":{"type":"integer","description":"Signed integer delta applied to the user's reputation for this event.\n\nMaps to econ_discuss_reputation_events.points. Positive for gains, negative for penalties."},"reason":{"type":"string","description":"Human-readable category for the points change.\n\nMaps to econ_discuss_reputation_events.reason (e.g., upvote_post, curated_feature, moderation_penalty)."},"source":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional source system or process identifier for traceability.\n\nMaps to econ_discuss_reputation_events.source."},"occurredAt":{"type":"string","format":"date-time","description":"Timestamp when the underlying action occurred; used for time-window calculations and decay.\n\nMaps to econ_discuss_reputation_events.occurred_at (timestamptz)."},"createdAt":{"type":"string","format":"date-time","description":"Ledger entry creation timestamp.\n\nMaps to econ_discuss_reputation_events.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp (rare for append-only ledgers, but present in schema).\n\nMaps to econ_discuss_reputation_events.updated_at."}},"required":["id","userId","points","reason","occurredAt","createdAt","updatedAt"],"description":"Reputation ledger entry DTO representing a single immutable event.\n\nBacked by Prisma model: econ_discuss_reputation_events. Key columns: id (UUID), user_id, optional actor_user_id, optional post_id, points (Int), reason (String), source (String?), occurred_at (DateTime), created_at/updated_at. This response omits soft-deletion internals (deleted_at) from public views.\n\nSecurity: contains no passwords, tokens, or other secrets. Ownership/authorization is enforced externally; this type is safe for user-facing history views."},"IEconDiscussExpertDomainBadge.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page index for pagination (1-based)."},"pageSize":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of records per page. Servers may cap to protect performance."},"status":{"oneOf":[{"const":"active","description":"Filter by computed badge status:\n\n- active: revoked_at is null AND (valid_until is null OR valid_until is in the future)\n- expired: valid_until is in the past\n- revoked: revoked_at is not null"},{"const":"expired","description":"Filter by computed badge status:\n\n- active: revoked_at is null AND (valid_until is null OR valid_until is in the future)\n- expired: valid_until is in the past\n- revoked: revoked_at is not null"},{"const":"revoked","description":"Filter by computed badge status:\n\n- active: revoked_at is null AND (valid_until is null OR valid_until is in the future)\n- expired: valid_until is in the past\n- revoked: revoked_at is not null"}],"description":"Filter by computed badge status:\n\n- active: revoked_at is null AND (valid_until is null OR valid_until is in the future)\n- expired: valid_until is in the past\n- revoked: revoked_at is not null"},"topicId":{"type":"string","format":"uuid","description":"Filter by linked topic/domain (econ_discuss_expert_domain_badges.econ_discuss_topic_id)."},"sortBy":{"oneOf":[{"const":"verified_at","description":"Sort key for ordering badge rows:\n\n- verified_at: time of approval\n- created_at: record creation time\n- valid_until: expiry timestamp (nulls sort last by default)"},{"const":"created_at","description":"Sort key for ordering badge rows:\n\n- verified_at: time of approval\n- created_at: record creation time\n- valid_until: expiry timestamp (nulls sort last by default)"},{"const":"valid_until","description":"Sort key for ordering badge rows:\n\n- verified_at: time of approval\n- created_at: record creation time\n- valid_until: expiry timestamp (nulls sort last by default)"}],"description":"Sort key for ordering badge rows:\n\n- verified_at: time of approval\n- created_at: record creation time\n- valid_until: expiry timestamp (nulls sort last by default)"},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction for sortBy."},{"const":"desc","description":"Sort direction for sortBy."}],"description":"Sort direction for sortBy."}},"required":[],"description":"Request parameters for listing a user's expert domain badges.\n\nBacked by Prisma model: econ_discuss_expert_domain_badges with columns id, user_id, econ_discuss_topic_id, verified_at, valid_until?, revoked_at?, revoked_reason?, created_at, updated_at, deleted_at?. Filters map to those lifecycle columns. The status filter is derived from valid_until and revoked_at per business rules."},"IEconDiscussExpertDomainBadge":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the expert domain badge.\n\nMaps to econ_discuss_expert_domain_badges.id (UUID PK)."},"userId":{"type":"string","format":"uuid","description":"Owner expert user's ID.\n\nMaps to econ_discuss_expert_domain_badges.user_id (FK → econ_discuss_users.id)."},"topicId":{"type":"string","format":"uuid","description":"Linked curated topic/domain ID.\n\nMaps to econ_discuss_expert_domain_badges.econ_discuss_topic_id (FK → econ_discuss_topics.id)."},"topic":{"$ref":"#/components/schemas/IEconDiscussTopic.ISummary","description":"Optional topic summary for display (resolved from econ_discuss_topics). Not persisted in the badge row; provided for convenience in read APIs."},"verifiedAt":{"type":"string","format":"date-time","description":"Timestamp when the domain badge was approved.\n\nMaps to econ_discuss_expert_domain_badges.verified_at."},"validUntil":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional expiration timestamp. When null, the badge remains valid until policy change or revocation.\n\nMaps to econ_discuss_expert_domain_badges.valid_until."},"revokedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the badge was revoked for policy reasons, if applicable.\n\nMaps to econ_discuss_expert_domain_badges.revoked_at."},"revokedReason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable rationale for revocation. Intended for governance; public APIs may redact this field per policy.\n\nMaps to econ_discuss_expert_domain_badges.revoked_reason."},"status":{"oneOf":[{"const":"active","description":"Computed badge status for convenience in clients:\n\n- active: revoked_at is null AND (valid_until is null OR valid_until is in the future)\n- expired: valid_until is in the past (and not revoked)\n- revoked: revoked_at is not null\n\nNote: This is a derived field, not an extra database column; allowed by interface rules."},{"const":"expired","description":"Computed badge status for convenience in clients:\n\n- active: revoked_at is null AND (valid_until is null OR valid_until is in the future)\n- expired: valid_until is in the past (and not revoked)\n- revoked: revoked_at is not null\n\nNote: This is a derived field, not an extra database column; allowed by interface rules."},{"const":"revoked","description":"Computed badge status for convenience in clients:\n\n- active: revoked_at is null AND (valid_until is null OR valid_until is in the future)\n- expired: valid_until is in the past (and not revoked)\n- revoked: revoked_at is not null\n\nNote: This is a derived field, not an extra database column; allowed by interface rules."}],"description":"Computed badge status for convenience in clients:\n\n- active: revoked_at is null AND (valid_until is null OR valid_until is in the future)\n- expired: valid_until is in the past (and not revoked)\n- revoked: revoked_at is not null\n\nNote: This is a derived field, not an extra database column; allowed by interface rules."},"createdAt":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nMaps to econ_discuss_expert_domain_badges.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nMaps to econ_discuss_expert_domain_badges.updated_at."}},"required":["id","userId","topicId","verifiedAt","createdAt","updatedAt"],"description":"Expert domain badge granted to a verified expert for a specific curated topic/domain.\n\nBacked by Prisma model: econ_discuss_expert_domain_badges. Key columns include: id (UUID), user_id, econ_discuss_topic_id, verified_at, valid_until?, revoked_at?, revoked_reason?, created_at, updated_at, deleted_at?. The topic relation (econ_discuss_topics) provides human-readable domain metadata (code/name/description).\n\nSecurity: This DTO is designed for public display on profiles. It intentionally omits internal soft-deletion flags. The revokedReason field may be redacted for non-governance consumers per policy."},"IEconDiscussTopic.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Topic identifier.\n\nPrisma: Topics.econ_discuss_topics.id (UUID primary key)."},"code":{"type":"string","description":"Immutable business identifier (slug-like) for the topic.\n\nPrisma: Topics.econ_discuss_topics.code (unique)."},"name":{"type":"string","description":"Human-readable topic name for display and search.\n\nPrisma: Topics.econ_discuss_topics.name (String)."}},"required":["id","code","name"],"description":"Compact topic summary for discovery and references.\n\nDerived from Topics.econ_discuss_topics. Excludes long description to keep list payloads efficient."},"IEconDiscussUserProfile.IUpdate":{"type":"object","properties":{"displayName":{"type":"string","minLength":1,"maxLength":120,"description":"Publicly visible handle displayed across the platform.\n\nMaps to Actors.econ_discuss_users.display_name (Prisma: String). Business policies recommend reasonable length limits for professional readability."},"avatarUri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional avatar image URI for the profile.\n\nMaps to Actors.econ_discuss_users.avatar_uri (Prisma: String?, VarChar). Must be a well‑formed URI when present."},"timezone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred IANA timezone identifier used for notifications, digests, and scheduling (e.g., \"Asia/Seoul\").\n\nMaps to Actors.econ_discuss_users.timezone (Prisma: String?)."},"locale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred locale for UI and communications (e.g., \"en-US\").\n\nMaps to Actors.econ_discuss_users.locale (Prisma: String?)."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short biography or professional summary.\n\nMaps to Actors.econ_discuss_user_profiles.bio (Prisma: String?)."},"affiliation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Current affiliation or organization string for public display.\n\nMaps to Actors.econ_discuss_user_profiles.affiliation (Prisma: String?)."},"website":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Personal or professional website URI for the profile.\n\nMaps to Actors.econ_discuss_user_profiles.website (Prisma: String?, VarChar). Must be a well‑formed URI when present."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Freeform location string for public display.\n\nMaps to Actors.econ_discuss_user_profiles.location (Prisma: String?)."}},"required":[],"description":"Update payload for a user’s public profile and preferences.\n\nThis DTO intentionally restricts updates to safe, public-facing fields spanning two Prisma tables: Actors.econ_discuss_users (display_name, avatar_uri, timezone, locale) and Actors.econ_discuss_user_profiles (bio, affiliation, website, location). It never accepts sensitive authentication properties (password_hash, mfa_secret, mfa_recovery_codes) or email fields.\n\nAll properties are optional to follow a Partial<T> pattern for PATCH/PUT semantics. When a field is not provided, no change is applied. Use explicit null where clearing a value is allowed by policy."},"IEconDiscussUserTopicSubscription.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (1-based)."},"pageSize":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page.\n\nServer enforces maximums to protect performance."},"q":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Keyword for searching Topic metadata (Topics.econ_discuss_topics.name/description). Leverages text indexes noted in Prisma comments."},"topicIds":{"oneOf":[{"type":"array","items":{"type":"string","format":"uuid"}},{"type":"null"}],"description":"Filter by specific topic identifiers (Topics.econ_discuss_topics.id, UUID)."},"createdFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound (inclusive) for subscription creation time window.\n\nMaps to Topics.econ_discuss_user_topic_subscriptions.created_at (timestamptz)."},"createdTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound (inclusive) for subscription creation time window.\n\nMaps to Topics.econ_discuss_user_topic_subscriptions.created_at (timestamptz)."},"sortBy":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussTopicSubscriptionSortBy"},{"type":"null"}],"description":"Sort field applied to the subscription listing or topic metadata. Typical fields: subscription created_at, topic name, topic code."},"sortOrder":{"oneOf":[{"$ref":"#/components/schemas/IESortOrder"},{"type":"null"}],"description":"Sort ordering (ascending/descending)."}},"required":[],"description":"Search and pagination request for a member’s topic subscriptions.\n\nBacked by Topics.econ_discuss_user_topic_subscriptions joined with Topics.econ_discuss_topics. Supports text search across topic metadata, time-range filtering on subscription created_at, and deterministic sorting."},"IEconDiscussPostVote.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (1-based)."},"pageSize":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page."},"voteType":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussVoteType"},{"type":"null"}],"description":"Filter by vote type.\n\nMaps to Interactions.econ_discuss_post_votes.vote_type (\"up\" | \"down\")."},"status":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussVoteStatus"},{"type":"null"}],"description":"Filter by vote lifecycle status.\n\nMaps to Interactions.econ_discuss_post_votes.status (\"active\", \"withdrawn\", \"switched\", \"discounted\", \"invalidated\")."},"postId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Restrict results to a specific post (Articles.econ_discuss_posts.id, UUID)."},"createdFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound (inclusive) for vote creation time window (Interactions.econ_discuss_post_votes.created_at)."},"createdTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound (inclusive) for vote creation time window (Interactions.econ_discuss_post_votes.created_at)."},"sortBy":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussVoteSortBy"},{"type":"null"}],"description":"Sort field for vote history (e.g., created_at)."},"sortOrder":{"oneOf":[{"$ref":"#/components/schemas/IESortOrder"},{"type":"null"}],"description":"Sort ordering (ascending/descending)."}},"required":[],"description":"Search and pagination request for a user’s post voting history.\n\nBacked by Interactions.econ_discuss_post_votes, which stores a single row per (user, post) with lifecycle status and timestamps to support idempotency and history."},"IEconDiscussPostBookmark.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (1-based)."},"pageSize":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page (server-capped)."},"q":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional keyword applied to saved post context (e.g., title/summary via join to Articles.econ_discuss_posts). Not stored on Interactions.econ_discuss_post_bookmarks."},"postId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Restrict to a specific saved post (Articles.econ_discuss_posts.id, UUID)."},"hasNote":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter bookmarks by presence of an owner-only personal note.\n\nMaps to Interactions.econ_discuss_post_bookmarks.note (String?)."},"createdFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound (inclusive) for bookmark creation time window (Interactions.econ_discuss_post_bookmarks.created_at)."},"createdTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound (inclusive) for bookmark creation time window (Interactions.econ_discuss_post_bookmarks.created_at)."},"sortBy":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussBookmarkSortBy"},{"type":"null"}],"description":"Sort field for saved items list (e.g., created_at or updated_at on Interactions.econ_discuss_post_bookmarks)."},"sortOrder":{"oneOf":[{"$ref":"#/components/schemas/IESortOrder"},{"type":"null"}],"description":"Sort ordering (ascending/descending)."}},"required":[],"description":"Search and pagination request for a member’s saved post bookmarks.\n\nBacked by Interactions.econ_discuss_post_bookmarks joined with Articles.econ_discuss_posts for display metadata. Supports filtering by note presence and time windows while excluding rows with deleted_at set."},"IEEconDiscussVoteType":{"oneOf":[{"const":"up","description":"Vote type for post voting interactions.\n\nThis enum corresponds to Interactions.econ_discuss_post_votes.vote_type and restricts input to the two allowed values. Business logic applies idempotency and lifecycle transitions (status) separately.\n\nSecurity note: client requests must not include user or post identifiers; ownership and target are derived from authentication and routing."},{"const":"down","description":"Vote type for post voting interactions.\n\nThis enum corresponds to Interactions.econ_discuss_post_votes.vote_type and restricts input to the two allowed values. Business logic applies idempotency and lifecycle transitions (status) separately.\n\nSecurity note: client requests must not include user or post identifiers; ownership and target are derived from authentication and routing."}],"description":"Vote type for post voting interactions.\n\nThis enum corresponds to Interactions.econ_discuss_post_votes.vote_type and restricts input to the two allowed values. Business logic applies idempotency and lifecycle transitions (status) separately.\n\nSecurity note: client requests must not include user or post identifiers; ownership and target are derived from authentication and routing."},"IEEconDiscussVoteStatus":{"oneOf":[{"const":"active","description":"Vote lifecycle status mapping to Interactions.econ_discuss_post_votes.status.\n\nRepresents whether a vote is currently effective or has transitioned due to user action or integrity moderation."},{"const":"withdrawn","description":"Vote lifecycle status mapping to Interactions.econ_discuss_post_votes.status.\n\nRepresents whether a vote is currently effective or has transitioned due to user action or integrity moderation."},{"const":"switched","description":"Vote lifecycle status mapping to Interactions.econ_discuss_post_votes.status.\n\nRepresents whether a vote is currently effective or has transitioned due to user action or integrity moderation."},{"const":"discounted","description":"Vote lifecycle status mapping to Interactions.econ_discuss_post_votes.status.\n\nRepresents whether a vote is currently effective or has transitioned due to user action or integrity moderation."},{"const":"invalidated","description":"Vote lifecycle status mapping to Interactions.econ_discuss_post_votes.status.\n\nRepresents whether a vote is currently effective or has transitioned due to user action or integrity moderation."}],"description":"Vote lifecycle status mapping to Interactions.econ_discuss_post_votes.status.\n\nRepresents whether a vote is currently effective or has transitioned due to user action or integrity moderation."},"IEEconDiscussTopicSubscriptionSortBy":{"oneOf":[{"const":"createdAt","description":"Sort keys for listing a user’s topic subscriptions that join Topics.econ_discuss_user_topic_subscriptions with Topics.econ_discuss_topics.\n\nUse createdAt to order by the subscription’s creation timestamp in econ_discuss_user_topic_subscriptions.created_at. Use name to order by the curated topic’s human‑readable name in econ_discuss_topics.name.\n\nThis enumeration supports default and user‑selected ordering modes in list/search endpoints. It does not alter data; it only defines permitted sort fields aligned with the underlying Prisma columns."},{"const":"name","description":"Sort keys for listing a user’s topic subscriptions that join Topics.econ_discuss_user_topic_subscriptions with Topics.econ_discuss_topics.\n\nUse createdAt to order by the subscription’s creation timestamp in econ_discuss_user_topic_subscriptions.created_at. Use name to order by the curated topic’s human‑readable name in econ_discuss_topics.name.\n\nThis enumeration supports default and user‑selected ordering modes in list/search endpoints. It does not alter data; it only defines permitted sort fields aligned with the underlying Prisma columns."}],"description":"Sort keys for listing a user’s topic subscriptions that join Topics.econ_discuss_user_topic_subscriptions with Topics.econ_discuss_topics.\n\nUse createdAt to order by the subscription’s creation timestamp in econ_discuss_user_topic_subscriptions.created_at. Use name to order by the curated topic’s human‑readable name in econ_discuss_topics.name.\n\nThis enumeration supports default and user‑selected ordering modes in list/search endpoints. It does not alter data; it only defines permitted sort fields aligned with the underlying Prisma columns."},"IEEconDiscussVoteSortBy":{"oneOf":[{"const":"createdAt","description":"Sort keys for vote history listings that read Interactions.econ_discuss_post_votes.\n\nUse createdAt to order results by econ_discuss_post_votes.created_at, typically reflecting when the vote was first recorded. Use updatedAt to order by econ_discuss_post_votes.updated_at, capturing the most recent lifecycle transition (e.g., switched, withdrawn).\n\nThe values map directly to Prisma timestamps on the vote table to ensure deterministic ordering without ad‑hoc field names."},{"const":"updatedAt","description":"Sort keys for vote history listings that read Interactions.econ_discuss_post_votes.\n\nUse createdAt to order results by econ_discuss_post_votes.created_at, typically reflecting when the vote was first recorded. Use updatedAt to order by econ_discuss_post_votes.updated_at, capturing the most recent lifecycle transition (e.g., switched, withdrawn).\n\nThe values map directly to Prisma timestamps on the vote table to ensure deterministic ordering without ad‑hoc field names."}],"description":"Sort keys for vote history listings that read Interactions.econ_discuss_post_votes.\n\nUse createdAt to order results by econ_discuss_post_votes.created_at, typically reflecting when the vote was first recorded. Use updatedAt to order by econ_discuss_post_votes.updated_at, capturing the most recent lifecycle transition (e.g., switched, withdrawn).\n\nThe values map directly to Prisma timestamps on the vote table to ensure deterministic ordering without ad‑hoc field names."},"IEEconDiscussBookmarkSortBy":{"oneOf":[{"const":"createdAt","description":"Sort keys for saved‑item listings that read Interactions.econ_discuss_post_bookmarks.\n\nUse createdAt to order by econ_discuss_post_bookmarks.created_at to surface most recently saved items first. Use updatedAt to order by econ_discuss_post_bookmarks.updated_at, which reflects note edits or other bookmark updates by the owner.\n\nThese values map 1:1 to Prisma columns so implementations can avoid ambiguous or computed field names during query construction."},{"const":"updatedAt","description":"Sort keys for saved‑item listings that read Interactions.econ_discuss_post_bookmarks.\n\nUse createdAt to order by econ_discuss_post_bookmarks.created_at to surface most recently saved items first. Use updatedAt to order by econ_discuss_post_bookmarks.updated_at, which reflects note edits or other bookmark updates by the owner.\n\nThese values map 1:1 to Prisma columns so implementations can avoid ambiguous or computed field names during query construction."}],"description":"Sort keys for saved‑item listings that read Interactions.econ_discuss_post_bookmarks.\n\nUse createdAt to order by econ_discuss_post_bookmarks.created_at to surface most recently saved items first. Use updatedAt to order by econ_discuss_post_bookmarks.updated_at, which reflects note edits or other bookmark updates by the owner.\n\nThese values map 1:1 to Prisma columns so implementations can avoid ambiguous or computed field names during query construction."},"IEconDiscussNotification.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nNot persisted. Applied by the API layer to build OFFSET/LIMIT queries for econ_discuss_notifications. Must be a positive integer (1-based)."},"pageSize":{"type":"integer","minimum":1,"maximum":200,"description":"Number of notifications per page.\n\nUpper bound (e.g., 200) protects performance. Used by the API layer only; not stored in the database."},"isRead":{"type":"boolean","description":"Filter by read state.\n\nMaps to econ_discuss_notifications.read_at: true when read_at is NOT NULL, false when read_at IS NULL."},"type":{"type":"string","description":"Filter by business type key of the notification.\n\nMaps to econ_discuss_notifications.type. Values are application-defined categories."},"entityType":{"type":"string","description":"Filter by target entity type for deep-linking.\n\nMaps to econ_discuss_notifications.entity_type. Free-form but usually constrained by application."},"entityId":{"type":"string","format":"uuid","description":"Filter by target entity identifier.\n\nMaps to econ_discuss_notifications.entity_id (UUID)."},"dateFrom":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for created_at in UTC.\n\nMaps to econ_discuss_notifications.created_at >= dateFrom."},"dateTo":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for created_at in UTC.\n\nMaps to econ_discuss_notifications.created_at <= dateTo."},"sortBy":{"$ref":"#/components/schemas/IENotificationSortBy","description":"Sort key for ordering results.\n\nBacked by indexed columns such as created_at and read_at."},"sortDir":{"$ref":"#/components/schemas/IESortDirection","description":"Sort direction (ascending or descending)."}},"required":[],"description":"Notification search/filter request for listing a member's persisted notifications.\n\nBacked by Actors.econ_discuss_notifications (columns include: id, recipient_user_id, actor_user_id, type, title, body, entity_type, entity_id, read_at, created_at, updated_at, deleted_at). This DTO is not persisted; it conveys client-side pagination, filters, and sorting.\n\nSecurity: The service must scope the query to the authenticated user by enforcing recipient_user_id = current user. Rows with deleted_at set are excluded from active results."},"IENotificationSortBy":{"oneOf":[{"const":"createdAt","description":"Sort key enumeration for notification listings.\n\nMaps to econ_discuss_notifications columns:\n- createdAt → created_at\n- updatedAt → updated_at\n- readAt → read_at\n\nUse with IESortDirection to construct ORDER BY clauses."},{"const":"updatedAt","description":"Sort key enumeration for notification listings.\n\nMaps to econ_discuss_notifications columns:\n- createdAt → created_at\n- updatedAt → updated_at\n- readAt → read_at\n\nUse with IESortDirection to construct ORDER BY clauses."},{"const":"readAt","description":"Sort key enumeration for notification listings.\n\nMaps to econ_discuss_notifications columns:\n- createdAt → created_at\n- updatedAt → updated_at\n- readAt → read_at\n\nUse with IESortDirection to construct ORDER BY clauses."}],"description":"Sort key enumeration for notification listings.\n\nMaps to econ_discuss_notifications columns:\n- createdAt → created_at\n- updatedAt → updated_at\n- readAt → read_at\n\nUse with IESortDirection to construct ORDER BY clauses."},"IESortDirection":{"oneOf":[{"const":"asc","description":"Sorting direction enumeration used across list endpoints.\n\nApplies to SQL ORDER BY direction for supported sort keys."},{"const":"desc","description":"Sorting direction enumeration used across list endpoints.\n\nApplies to SQL ORDER BY direction for supported sort keys."}],"description":"Sorting direction enumeration used across list endpoints.\n\nApplies to SQL ORDER BY direction for supported sort keys."},"IEconDiscussNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification.\n\nMaps to econ_discuss_notifications.id (UUID primary key)."},"type":{"type":"string","description":"Business type/category key of the notification.\n\nMaps to econ_discuss_notifications.type."},"title":{"type":"string","description":"Short title or summary for the notification.\n\nMaps to econ_discuss_notifications.title."},"body":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed body text for the notification.\n\nMaps to econ_discuss_notifications.body (nullable)."},"actorUserId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional actor user identifier that triggered the notification.\n\nMaps to econ_discuss_notifications.actor_user_id (nullable UUID)."},"entityType":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional target entity type for deep-linking.\n\nMaps to econ_discuss_notifications.entity_type (nullable text)."},"entityId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional target entity identifier for deep-linking.\n\nMaps to econ_discuss_notifications.entity_id (nullable UUID)."},"isRead":{"type":"boolean","description":"Computed convenience flag indicating read state.\n\nDerived from econ_discuss_notifications.read_at (true when non-null, false when null). Exposed to avoid client-side derivation."},"readAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was read, if applicable.\n\nMaps to econ_discuss_notifications.read_at (nullable timestamptz/ISO 8601)."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp (send time) of the notification.\n\nMaps to econ_discuss_notifications.created_at (timestamptz/ISO 8601)."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of the notification record.\n\nMaps to econ_discuss_notifications.updated_at (timestamptz/ISO 8601)."}},"required":["id","type","title","isRead","createdAt","updatedAt"],"description":"Notification entity returned to clients for inbox and detail views.\n\nBacked by Actors.econ_discuss_notifications in Prisma. Sensitive authentication artifacts are not present in this table; this DTO excludes internal lifecycle markers (e.g., deleted_at) and includes a computed isRead flag for ease of use.\n\nOwnership/authorization: Only the recipient (recipient_user_id) may access or mutate read state for a record."},"IEconDiscussNotification.IUpdate":{"type":"object","properties":{"isRead":{"type":"boolean","description":"Desired read state of the notification.\n\nWhen true, the service sets econ_discuss_notifications.read_at to the current timestamp; when false, it clears read_at to null."}},"required":["isRead"],"description":"Notification update request to toggle read state.\n\nMaps to Actors.econ_discuss_notifications.read_at. Other columns (type, title, body, entity linkage) are system-managed and immutable for the recipient."},"IEconDiscussTopic.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based index).\n\nNot persisted; aligns with IPage.IRequest.page."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of records per page.\n\nAligned to standard IPage limit semantics with an enforced upper bound for performance."},"q":{"type":"string","description":"Free-text keyword for topic discovery.\n\nApplies to econ_discuss_topics.name and econ_discuss_topics.description (gin_trgm_ops indexes per Prisma)."},"sortBy":{"$ref":"#/components/schemas/IETopicSortBy","description":"Sort key mapping to econ_discuss_topics columns: name, created_at, or updated_at."},"sortDir":{"$ref":"#/components/schemas/IESortDirection","description":"Sort direction for ordered listings."}},"required":[],"description":"Topic search/filter request for the curated taxonomy (Prisma: Topics.econ_discuss_topics).\n\nIncludes pagination (page/limit), keyword search, and sorting controls. Public read semantics; providers must exclude records where deleted_at is not null."},"IETopicSortBy":{"oneOf":[{"const":"name","description":"Sort key enumeration for topic search/listing.\n\nMaps to econ_discuss_topics columns:\n- name → name\n- createdAt → created_at\n- updatedAt → updated_at"},{"const":"createdAt","description":"Sort key enumeration for topic search/listing.\n\nMaps to econ_discuss_topics columns:\n- name → name\n- createdAt → created_at\n- updatedAt → updated_at"},{"const":"updatedAt","description":"Sort key enumeration for topic search/listing.\n\nMaps to econ_discuss_topics columns:\n- name → name\n- createdAt → created_at\n- updatedAt → updated_at"}],"description":"Sort key enumeration for topic search/listing.\n\nMaps to econ_discuss_topics columns:\n- name → name\n- createdAt → created_at\n- updatedAt → updated_at"},"IEconDiscussTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the curated topic.\n\nPrisma: econ_discuss_topics.id (UUID)."},"code":{"type":"string","description":"Immutable business identifier (slug-like) for the topic used in URLs and references.\n\nPrisma: econ_discuss_topics.code (unique)."},"name":{"type":"string","description":"Human-readable topic name displayed to users.\n\nPrisma: econ_discuss_topics.name."},"description":{"type":"string","description":"Optional longer description explaining the topic scope and curation notes.\n\nPrisma: econ_discuss_topics.description (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the topic record (UTC, ISO 8601 on the wire).\n\nPrisma: econ_discuss_topics.created_at (Timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the topic record (UTC, ISO 8601 on the wire).\n\nPrisma: econ_discuss_topics.updated_at (Timestamptz)."}},"required":["id","code","name","created_at","updated_at"],"description":"Curated taxonomy entry used to organize content, subscriptions, and expert badges.\n\nBacked by Prisma model Topics.econ_discuss_topics, which defines: id (UUID PK), code (unique slug), name, optional description, created_at, updated_at, and a soft deletion column deleted_at for archival. This DTO exposes public fields for active topics and omits internal archival state from responses."},"IEconDiscussTopic.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique, immutable topic code (slug). Must not collide with existing topics.\n\nPrisma: econ_discuss_topics.code (unique)."},"name":{"type":"string","description":"Display name of the topic.\n\nPrisma: econ_discuss_topics.name."},"description":{"type":"string","description":"Optional descriptive text about the topic’s scope.\n\nPrisma: econ_discuss_topics.description (nullable)."}},"required":["code","name"],"description":"Request body to create a new curated topic.\n\nMaps to Prisma model Topics.econ_discuss_topics. Server populates created_at/updated_at and enforces code uniqueness. Do not include id or timestamps in create payloads."},"IEconDiscussTopic.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Updated display name for the topic.\n\nPrisma: econ_discuss_topics.name."},"description":{"type":"string","description":"Updated descriptive text for the topic (optional).\n\nPrisma: econ_discuss_topics.description (nullable)."}},"required":[],"description":"Request body to update an existing topic’s mutable fields.\n\nBased on Prisma model Topics.econ_discuss_topics. The business identifier code is immutable and is not accepted here. Server updates updated_at automatically."},"IEconDiscussPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based)."},"pageSize":{"type":"integer","minimum":1,"description":"Page size (number of records per page)."},"q":{"type":"string","description":"Free-text keyword query applied to post title/body/summary (trigram-indexed columns per Prisma comments)."},"author":{"type":"string","description":"Author filter by handle/display name (non-identifying).\n\nPrisma: filters join Articles.econ_discuss_posts.econ_discuss_user_id → Actors.econ_discuss_users.display_name. Avoids direct user-id filter per security rules."},"topicIds":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Filter by one or more topic IDs linked via post–topic junction.\n\nPrisma: Articles.econ_discuss_post_topics.econ_discuss_topic_id (FK → Topics.econ_discuss_topics.id)."},"expertOnly":{"type":"boolean","description":"When true, restrict results to posts authored by verified experts (join against Actors.econ_discuss_verified_experts)."},"dateFrom":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for publish time filtering (published_at ≥ dateFrom). Timestamps are stored UTC and returned as ISO 8601."},"dateTo":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for publish time filtering (published_at ≤ dateTo). Timestamps are stored UTC and returned as ISO 8601."},"sort":{"oneOf":[{"const":"new","description":"Order by recency (typically published_at desc)."},{"const":"trending","description":"Order by recent weighted interactions (derived from econ_discuss_post_votes and freshness)."}],"description":"Sort mode for the result set."}},"required":[],"description":"Search/filter request for listing posts.\n\nBacked by Prisma Articles.econ_discuss_posts (id, econ_discuss_user_id, title, body, summary, published_at, scheduled_publish_at, created_at, updated_at, deleted_at) with joins to Articles.econ_discuss_post_topics and Topics.econ_discuss_topics for topic filtering, and Actors.econ_discuss_verified_experts for expert-only filtering.\n\nSECURITY: This DTO avoids direct user-id filters (authorId/user_id) and uses non-identifying author text instead, per AutoBE request DTO rules."},"IEconDiscussPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of a post record (econ_discuss_posts.id).\n\nPrisma reference: Articles.econ_discuss_posts → \"Primary Key.\""},"author_user_id":{"type":"string","format":"uuid","description":"Author user's identifier referencing econ_discuss_users (stored in econ_discuss_posts.econ_discuss_user_id).\n\nPrisma reference: Articles.econ_discuss_posts → \"Author user's econ_discuss_users.id. Identifies who created the post.\""},"title":{"type":"string","description":"Human-readable post title used for listing and SEO.\n\nPrisma reference: Articles.econ_discuss_posts → \"Human-readable post title for listing and SEO. Required at publish time.\""},"body":{"type":"string","description":"Main content body in sanitized, possibly markdown-like format.\n\nPrisma reference: Articles.econ_discuss_posts → \"Main content body in sanitized, possibly markdown-like format. Used for full-text search.\""},"summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short abstract or excerpt for previews and feeds.\n\nPrisma reference: Articles.econ_discuss_posts → \"Optional short abstract or excerpt for previews and feeds.\""},"published_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Publication timestamp for feeds and visibility checks.\n\nPrisma reference: Articles.econ_discuss_posts → \"Publication timestamp. Supports chronological feeds and scheduling validations.\""},"scheduled_publish_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional scheduled time for future publication (stored in UTC; displayed in the author's timezone).\n\nPrisma reference: Articles.econ_discuss_posts → \"Optional scheduled time for future publication (stored in UTC, displayed in user timezone).\""},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nPrisma reference: Articles.econ_discuss_posts → \"Creation timestamp for the post record.\""},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nPrisma reference: Articles.econ_discuss_posts → \"Last update timestamp for the post record.\""}},"required":["id","author_user_id","title","body","created_at","updated_at"],"description":"Post entity assembled from Articles.econ_discuss_posts.\n\nThis schema exposes public-facing post fields directly derived from the Prisma model (id, author reference, title, body, optional summary, publication timestamps, created/updated timestamps). It intentionally omits internal lifecycle fields such as deleted_at from responses.\n\nPrisma reference: Articles.econ_discuss_posts — \"Authored, published content items forming the core discussion surface.\""},"IEconDiscussPost.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"Post title to be published.\n\nPrisma: Articles.econ_discuss_posts.title (required at publish)."},"body":{"type":"string","description":"Main content body (sanitized markdown/text).\n\nPrisma: Articles.econ_discuss_posts.body."},"summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short abstract for previews.\n\nPrisma: Articles.econ_discuss_posts.summary (nullable)."},"scheduled_publish_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional future publication time (UTC stored; rendered in user timezone).\n\nPrisma: Articles.econ_discuss_posts.scheduled_publish_at (nullable)."},"topicIds":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Optional topic bindings to apply after creation via junction rows.\n\nPrisma: Articles.econ_discuss_post_topics (post↔topic)."}},"required":["title","body"],"description":"Create DTO for posts (member-authored).\n\nMaps to Prisma Articles.econ_discuss_posts. Excludes system/ownership fields (id, econ_discuss_user_id, created_at, updated_at, deleted_at, published_at). The authenticated user becomes the author. Optional topicIds are applied through junction records."},"IEconDiscussPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Updated title of the post.\n\nPrisma: Articles.econ_discuss_posts.title."},"body":{"type":"string","description":"Updated content body.\n\nPrisma: Articles.econ_discuss_posts.body."},"summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated summary (nullable to clear).\n\nPrisma: Articles.econ_discuss_posts.summary."},"scheduled_publish_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Updated schedule for future publication (UTC).\n\nPrisma: Articles.econ_discuss_posts.scheduled_publish_at."}},"required":[],"description":"Update DTO for posts. All fields optional (Partial pattern).\n\nExcludes identity/ownership and system-managed timestamps (id, econ_discuss_user_id, created_at, updated_at, deleted_at). Publication timestamp policies are service-managed; clients adjust schedule via scheduled_publish_at."},"IEEconDiscussPostTopicSort":{"oneOf":[{"const":"created_at_desc","description":"Sorting options for topics attached to a post.\n\n- created_at_desc: newest association first (post-topic junction created_at)\n- created_at_asc: oldest association first\n- name_asc/name_desc: alphabetical ordering by topic name\n\nPrisma references: Articles.econ_discuss_post_topics.created_at; Topics.econ_discuss_topics.name"},{"const":"created_at_asc","description":"Sorting options for topics attached to a post.\n\n- created_at_desc: newest association first (post-topic junction created_at)\n- created_at_asc: oldest association first\n- name_asc/name_desc: alphabetical ordering by topic name\n\nPrisma references: Articles.econ_discuss_post_topics.created_at; Topics.econ_discuss_topics.name"},{"const":"name_asc","description":"Sorting options for topics attached to a post.\n\n- created_at_desc: newest association first (post-topic junction created_at)\n- created_at_asc: oldest association first\n- name_asc/name_desc: alphabetical ordering by topic name\n\nPrisma references: Articles.econ_discuss_post_topics.created_at; Topics.econ_discuss_topics.name"},{"const":"name_desc","description":"Sorting options for topics attached to a post.\n\n- created_at_desc: newest association first (post-topic junction created_at)\n- created_at_asc: oldest association first\n- name_asc/name_desc: alphabetical ordering by topic name\n\nPrisma references: Articles.econ_discuss_post_topics.created_at; Topics.econ_discuss_topics.name"}],"description":"Sorting options for topics attached to a post.\n\n- created_at_desc: newest association first (post-topic junction created_at)\n- created_at_asc: oldest association first\n- name_asc/name_desc: alphabetical ordering by topic name\n\nPrisma references: Articles.econ_discuss_post_topics.created_at; Topics.econ_discuss_topics.name"},"IEconDiscussPostTopic.IRequest":{"type":"object","properties":{"q":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional keyword to search topic name/description using trigram indexes.\n\nPrisma reference: Topics.econ_discuss_topics has GIN trigram indexes on name/description."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (1-based)."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Page size limit. Server enforces an upper bound. Standard pagination parameter replacing pageSize to align with IPage.IRequest guidance."},"sort":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussPostTopicSort"},{"type":"null"}],"description":"Sort ordering for results.\n\nSee IEEconDiscussPostTopicSort for allowed values."}},"required":[],"description":"Request DTO for searching topics associated with a post via the junction (econ_discuss_post_topics) and taxonomy (econ_discuss_topics).\n\nPrisma references: Articles.econ_discuss_post_topics; Topics.econ_discuss_topics."},"IEconDiscussPostTopic.ICreate":{"type":"object","properties":{"econ_discuss_topic_id":{"type":"string","format":"uuid","description":"Target topic identifier to attach to the post.\n\nMaps to econ_discuss_post_topics.econ_discuss_topic_id (FK → econ_discuss_topics.id) in the Prisma schema. The topic must exist and must not be archived (deleted_at is null) per application policy."}},"required":["econ_discuss_topic_id"],"description":"Create payload to attach a curated topic to a post through the junction table econ_discuss_post_topics.\n\nThis DTO corresponds to the association creation described by the Articles schema model econ_discuss_post_topics (unique per [econ_discuss_post_id, econ_discuss_topic_id]). The post identifier is typically supplied via the path parameter and is not part of this body. System timestamps (created_at, updated_at) are populated by the backend and are not included here."},"IEconDiscussPostTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post–topic association.\n\nMaps to econ_discuss_post_topics.id in Prisma."},"econ_discuss_post_id":{"type":"string","format":"uuid","description":"Associated post identifier.\n\nFK to econ_discuss_posts.id (Prisma: econ_discuss_post_topics.econ_discuss_post_id)."},"econ_discuss_topic_id":{"type":"string","format":"uuid","description":"Associated topic identifier.\n\nFK to econ_discuss_topics.id (Prisma: econ_discuss_post_topics.econ_discuss_topic_id)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this association in UTC (ISO 8601).\n\nMaps to econ_discuss_post_topics.created_at (timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of this association in UTC (ISO 8601).\n\nMaps to econ_discuss_post_topics.updated_at (timestamptz)."}},"required":["id","econ_discuss_post_id","econ_discuss_topic_id","created_at","updated_at"],"description":"Post–topic association entity coming from the Prisma model econ_discuss_post_topics.\n\nThe underlying table enforces uniqueness per (econ_discuss_post_id, econ_discuss_topic_id) and maintains temporal columns created_at and updated_at for auditability. A soft deletion column (deleted_at) exists in the database to retire links, but it is omitted from this response DTO to avoid exposing internal lifecycle markers to clients."},"IEconDiscussPostSnapshot.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number (1-based). If null or omitted, a server default is applied."},"pageSize":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page size (items per page). If null or omitted, a server default/upper bound is applied."},"sort_by":{"oneOf":[{"const":"version"},{"const":"created_at"},{"const":"updated_at"},{"const":"published_at"},{"type":"null"}],"description":"Sort field for version history listing.\n\n- version: numeric post-local version from econ_discuss_post_snapshots.version\n- created_at: snapshot creation timestamp\n- updated_at: snapshot last update timestamp\n- published_at: the post’s published_at value captured at snapshot time (nullable)"},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction to apply with sort_by (asc or desc)."},"version_min":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Lower bound (inclusive) for version filtering. Maps to econ_discuss_post_snapshots.version."},"version_max":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Upper bound (inclusive) for version filtering. Maps to econ_discuss_post_snapshots.version."},"created_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound (inclusive) for created_at filter in ISO 8601 UTC. Maps to econ_discuss_post_snapshots.created_at."},"created_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound (inclusive) for created_at filter in ISO 8601 UTC. Maps to econ_discuss_post_snapshots.created_at."},"q":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional keyword for text search across snapshot title/body (leverages trigram indexes noted on econ_discuss_post_snapshots.title/body in Prisma)."}},"required":[],"description":"Search, sorting, and pagination request for listing versions from econ_discuss_post_snapshots.\n\nThis DTO is designed for advanced queries over the immutable snapshot history captured by the Prisma model econ_discuss_post_snapshots. Supported filters and sort keys reflect actual columns on that table (version, created_at, updated_at) as well as the captured published_at state."},"IEconDiscussPostSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the snapshot row.\n\nMaps to econ_discuss_post_snapshots.id."},"econ_discuss_post_id":{"type":"string","format":"uuid","description":"Source post’s identifier to which this snapshot belongs.\n\nFK to econ_discuss_posts.id (Prisma: econ_discuss_post_snapshots.econ_discuss_post_id)."},"econ_discuss_user_id":{"type":"string","format":"uuid","description":"Editor/author identifier who produced this snapshot.\n\nFK to econ_discuss_users.id (Prisma: econ_discuss_post_snapshots.econ_discuss_user_id)."},"version":{"type":"integer","description":"Monotonic version number per post.\n\nMaps to econ_discuss_post_snapshots.version (unique with post_id)."},"title":{"type":"string","description":"Snapshot of the post title at the time this version was captured. Maps to econ_discuss_post_snapshots.title."},"body":{"type":"string","description":"Snapshot of the post body at the time this version was captured. Maps to econ_discuss_post_snapshots.body."},"summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional snapshot of the post summary captured for this version. Maps to econ_discuss_post_snapshots.summary."},"published_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Post’s published_at value captured when this snapshot was created (nullable). Maps to econ_discuss_post_snapshots.published_at."},"created_at":{"type":"string","format":"date-time","description":"Snapshot creation timestamp in UTC (ISO 8601). Maps to econ_discuss_post_snapshots.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the snapshot record in UTC (ISO 8601). Maps to econ_discuss_post_snapshots.updated_at."}},"required":["id","econ_discuss_post_id","econ_discuss_user_id","version","title","body","created_at","updated_at"],"description":"Post version snapshot entity modeled after the Prisma table econ_discuss_post_snapshots.\n\nEach row captures the exact state of a post at a point in time, including text fields (title, body, optional summary) and the contemporaneous published_at value. Versioning is per post (unique constraint on [econ_discuss_post_id, version]). Temporal columns created_at and updated_at provide auditability. The soft deletion column deleted_at exists in the database for exceptional corrections and is intentionally omitted from this public DTO."},"IEEconDiscussDraftSortBy":{"oneOf":[{"const":"updated_at","description":"Draft sorting field enumeration.\n\nValues map to concrete Prisma columns on Articles.econ_discuss_post_drafts:\n- updated_at: Order by the most recently edited drafts first (primary operational sort).\n- created_at: Order by creation time for chronological auditing or recovery flows.\n- title: Order lexicographically by the working draft title for alphabetical navigation.\n\nAll values reference columns documented in Prisma schema comments for econ_discuss_post_drafts."},{"const":"created_at","description":"Draft sorting field enumeration.\n\nValues map to concrete Prisma columns on Articles.econ_discuss_post_drafts:\n- updated_at: Order by the most recently edited drafts first (primary operational sort).\n- created_at: Order by creation time for chronological auditing or recovery flows.\n- title: Order lexicographically by the working draft title for alphabetical navigation.\n\nAll values reference columns documented in Prisma schema comments for econ_discuss_post_drafts."},{"const":"title","description":"Draft sorting field enumeration.\n\nValues map to concrete Prisma columns on Articles.econ_discuss_post_drafts:\n- updated_at: Order by the most recently edited drafts first (primary operational sort).\n- created_at: Order by creation time for chronological auditing or recovery flows.\n- title: Order lexicographically by the working draft title for alphabetical navigation.\n\nAll values reference columns documented in Prisma schema comments for econ_discuss_post_drafts."}],"description":"Draft sorting field enumeration.\n\nValues map to concrete Prisma columns on Articles.econ_discuss_post_drafts:\n- updated_at: Order by the most recently edited drafts first (primary operational sort).\n- created_at: Order by creation time for chronological auditing or recovery flows.\n- title: Order lexicographically by the working draft title for alphabetical navigation.\n\nAll values reference columns documented in Prisma schema comments for econ_discuss_post_drafts."},"IEEconDiscussSortOrder":{"oneOf":[{"const":"asc","description":"Sort direction enumeration for list endpoints.\n\n- asc: Ascending order.\n- desc: Descending order.\n\nApplies to the selected sort field (e.g., updated_at, created_at, title) when listing drafts or similar resources."},{"const":"desc","description":"Sort direction enumeration for list endpoints.\n\n- asc: Ascending order.\n- desc: Descending order.\n\nApplies to the selected sort field (e.g., updated_at, created_at, title) when listing drafts or similar resources."}],"description":"Sort direction enumeration for list endpoints.\n\n- asc: Ascending order.\n- desc: Descending order.\n\nApplies to the selected sort field (e.g., updated_at, created_at, title) when listing drafts or similar resources."},"IEconDiscussPostVote.ICreate":{"type":"object","properties":{"vote_type":{"$ref":"#/components/schemas/IEEconDiscussVoteType","description":"Desired vote type to apply to the target post.\n\nSECURITY: Do not accept any user or post identifiers here; those are taken from path/auth context. This field maps to Interactions.econ_discuss_post_votes.vote_type and must be either \"up\" or \"down\"."}},"required":["vote_type"],"description":"Request body for casting or changing a member's vote on a post.\n\nThis DTO aligns with Interactions.econ_discuss_post_votes where a single record per (user, post) stores vote_type and lifecycle state. The only client-supplied field is vote_type; identifiers and status fields are system-managed."},"IEconDiscussPostBookmark.ICreate":{"type":"object","properties":{"note":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional owner-only private note to attach to the saved item.\n\nMaps to Interactions.econ_discuss_post_bookmarks.note. This text is visible only to the bookmark owner and is excluded from any shared views. The business requirements recommend a maximum of 2,000 characters."}},"required":[],"description":"Request body to create (or reinstate) a bookmark for a post.\n\nThis DTO corresponds to Interactions.econ_discuss_post_bookmarks where each row is unique per (user, post). Only the private note is accepted from clients; the owning user and target post are derived from auth/path context."},"IEconDiscussPostDraft.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based)."},"pageSize":{"type":"integer","minimum":1,"description":"Number of records per page. Providers should enforce an upper bound for performance."},"q":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional keyword applied to title/body full‑text search.\n\nThis targets Articles.econ_discuss_post_drafts.title and .body, which have trigram indexes per Prisma comments."},"updatedFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter lower bound (inclusive) on updated_at using ISO 8601 (UTC). Maps to Articles.econ_discuss_post_drafts.updated_at."},"updatedTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter upper bound (inclusive) on updated_at using ISO 8601 (UTC). Maps to Articles.econ_discuss_post_drafts.updated_at."},"publishedLink":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"When true, restrict to drafts linked to a published post (econ_discuss_post_id not null). When false, restrict to drafts with no published link. When null/omitted, do not filter on linkage."},"sortBy":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussDraftSortBy"},{"type":"null"}],"description":"Field to sort by. Defaults to updated_at if not provided."},"order":{"oneOf":[{"$ref":"#/components/schemas/IEEconDiscussSortOrder"},{"type":"null"}],"description":"Sort direction. Defaults to desc when omitted."}},"required":["page","pageSize"],"description":"Search/filter request body for listing private drafts (owner scope).\n\nMaps to Articles.econ_discuss_post_drafts. Supports pagination, optional keyword against title/body, updated_at windowing, linkage filter via econ_discuss_post_id, and server-side sorting using updated_at/created_at/title."},"IEconDiscussPostDraft":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the draft.\n\nMaps to Articles.econ_discuss_post_drafts.id (UUID primary key)."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Working draft title (optional for early autosave).\n\nMaps to Articles.econ_discuss_post_drafts.title."},"body":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Working draft body (optional for early autosave).\n\nMaps to Articles.econ_discuss_post_drafts.body."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the published post created from this draft, when applicable.\n\nThis property corresponds to Articles.econ_discuss_post_drafts.econ_discuss_post_id. It is null when the draft has not been published."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the draft (ISO 8601).\n\nMaps to Articles.econ_discuss_post_drafts.created_at (timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the draft (ISO 8601).\n\nMaps to Articles.econ_discuss_post_drafts.updated_at (timestamptz)."}},"required":["id","created_at","updated_at"],"description":"Private draft entity returned to the authenticated owner.\n\nThis DTO reflects Articles.econ_discuss_post_drafts and intentionally excludes internal/ownership fields (econ_discuss_user_id) and lifecycle removal signals (deleted_at). It includes an optional link to the published post via post_id (econ_discuss_post_id) and standard timestamps. Title/body are optional by design to support early autosave."},"IEconDiscussPostDraft.ICreate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Draft working title.\n\nPrisma reference: econ_discuss_post_drafts.title (nullable). Drafts intentionally allow empty or early autosave states. Clients may submit null during autosave to preserve incomplete input."},"body":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Draft working body content.\n\nPrisma reference: econ_discuss_post_drafts.body (nullable). Long-form content under construction; drafts do not enforce post-level length constraints. Null is acceptable during early autosave."}},"required":[],"description":"Create payload for a private long-form draft.\n\nBacked by Articles.econ_discuss_post_drafts, which stores private, autosaved work prior to publication. The underlying Prisma model allows nullable title and body so authors can save early progress without completing required post fields.\n\nSecurity and lifecycle: ownership derives from the authenticated principal and is persisted server-side as econ_discuss_post_drafts.econ_discuss_user_id. No identifiers or system timestamps are accepted here; created_at/updated_at are system-managed."},"IEconDiscussPostDraft.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"New draft title to apply or null to clear.\n\nPrisma reference: econ_discuss_post_drafts.title (nullable)."},"body":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"New draft body to apply or null to clear.\n\nPrisma reference: econ_discuss_post_drafts.body (nullable)."}},"required":[],"description":"Update payload for a private long-form draft.\n\nTargets Articles.econ_discuss_post_drafts. Only user-editable content fields are exposed. Server enforces ownership and updates updated_at accordingly.\n\nNotes: Clearing is represented by explicit nulls where allowed by the Prisma columns."},"IEconDiscussPoll":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the poll.\n\nPrisma reference: econ_discuss_polls.id."},"postId":{"type":"string","format":"uuid","description":"Host post identifier this poll is attached to.\n\nPrisma reference: econ_discuss_polls.econ_discuss_post_id (unique one-to-one with Articles.econ_discuss_posts.id)."},"question":{"type":"string","description":"Poll prompt shown to voters.\n\nPrisma reference: econ_discuss_polls.question."},"questionType":{"$ref":"#/components/schemas/IEconDiscussPollQuestionType","description":"Type of the question controlling how responses are captured.\n\nPrisma reference: econ_discuss_polls.question_type (string domain; application-enforced enumeration)."},"visibilityMode":{"$ref":"#/components/schemas/IEconDiscussPollVisibilityMode","description":"Controls when results are visible to viewers.\n\nPrisma reference: econ_discuss_polls.visibility_mode (string domain; application-enforced enumeration)."},"expertOnly":{"type":"boolean","description":"Whether participation is restricted to verified experts and staff.\n\nPrisma reference: econ_discuss_polls.expert_only."},"allowVoteChange":{"type":"boolean","description":"Whether respondents may change their vote before closure.\n\nPrisma reference: econ_discuss_polls.allow_vote_change."},"minVoterReputation":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum reputation required to participate, when set.\n\nPrisma reference: econ_discuss_polls.min_voter_reputation (nullable integer)."},"minAccountAgeHours":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum account age in hours required to participate, when set.\n\nPrisma reference: econ_discuss_polls.min_account_age_hours (nullable integer)."},"minSelections":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"For multiple_choice: minimum number of options a voter must select.\n\nPrisma reference: econ_discuss_polls.min_selections (nullable integer)."},"maxSelections":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"For multiple_choice: maximum number of options a voter may select.\n\nPrisma reference: econ_discuss_polls.max_selections (nullable integer)."},"scalePoints":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"For likert: number of points on the scale (commonly 5 or 7).\n\nPrisma reference: econ_discuss_polls.scale_points (nullable integer)."},"scaleMinLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"For likert: label for the minimum endpoint.\n\nPrisma reference: econ_discuss_polls.scale_min_label (nullable)."},"scaleMaxLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"For likert: label for the maximum endpoint.\n\nPrisma reference: econ_discuss_polls.scale_max_label (nullable)."},"scaleMidLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"For likert: optional midpoint label.\n\nPrisma reference: econ_discuss_polls.scale_mid_label (nullable)."},"unitLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"For numeric_estimate: unit label (e.g., %, index points).\n\nPrisma reference: econ_discuss_polls.unit_label (nullable)."},"numericMin":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"For numeric_estimate: minimum allowed value.\n\nPrisma reference: econ_discuss_polls.numeric_min (nullable double precision)."},"numericMax":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"For numeric_estimate: maximum allowed value.\n\nPrisma reference: econ_discuss_polls.numeric_max (nullable double precision)."},"numericStep":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"For numeric_estimate: step size/precision for rounding.\n\nPrisma reference: econ_discuss_polls.numeric_step (nullable double precision)."},"startAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Scheduled open time for the poll (UTC).\n\nPrisma reference: econ_discuss_polls.start_at (nullable timestamptz)."},"endAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Scheduled close time for the poll (UTC).\n\nPrisma reference: econ_discuss_polls.end_at (nullable timestamptz)."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of the poll row.\n\nPrisma reference: econ_discuss_polls.created_at (timestamptz)."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of the poll row.\n\nPrisma reference: econ_discuss_polls.updated_at (timestamptz)."},"options":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollOption"},"description":"Answer options associated with the poll when applicable (single_choice, multiple_choice, ranking). Ordered by position.\n\nPrisma reference: econ_discuss_poll_options (per-poll unique option_text and position)."}},"required":["id","postId","question","questionType","visibilityMode","expertOnly","allowVoteChange","createdAt","updatedAt","options"],"description":"Poll entity attached to a post.\n\nBacked by Polls.econ_discuss_polls with a strict one-to-one link to Articles.econ_discuss_posts via econ_discuss_post_id. Captures configuration such as question, type, visibility mode, eligibility thresholds, type-specific parameters, and schedule. Options are provided through econ_discuss_poll_options and surfaced here for convenience.\n\nSecurity note: This DTO omits internal soft-delete markers (deleted_at) and never exposes respondent identities or secrets. Aggregated results are delivered by separate result endpoints."},"IEconDiscussPoll.ICreate":{"type":"object","properties":{"question":{"type":"string","description":"Poll prompt shown to voters.\n\nMaps to econ_discuss_polls.question."},"questionType":{"$ref":"#/components/schemas/IEconDiscussPollQuestionType","description":"Question type controlling response semantics.\n\nMaps to econ_discuss_polls.question_type."},"visibilityMode":{"$ref":"#/components/schemas/IEconDiscussPollVisibilityMode","description":"Result visibility policy for the poll lifecycle.\n\nMaps to econ_discuss_polls.visibility_mode."},"expertOnly":{"type":"boolean","description":"Whether participation is restricted to verified experts and staff.\n\nMaps to econ_discuss_polls.expert_only."},"allowVoteChange":{"type":"boolean","description":"Whether a voter may change their response before closure.\n\nMaps to econ_discuss_polls.allow_vote_change."},"minVoterReputation":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional minimum reputation required to vote.\n\nMaps to econ_discuss_polls.min_voter_reputation."},"minAccountAgeHours":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional minimum account age (hours) required to vote.\n\nMaps to econ_discuss_polls.min_account_age_hours."},"minSelections":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"For multiple_choice: minimum number of selections required.\n\nMaps to econ_discuss_polls.min_selections."},"maxSelections":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"For multiple_choice: maximum number of selections allowed.\n\nMaps to econ_discuss_polls.max_selections."},"scalePoints":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"For likert: number of points on the scale (5 or 7 typical).\n\nMaps to econ_discuss_polls.scale_points."},"scaleMinLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"For likert: label for the minimum endpoint.\n\nMaps to econ_discuss_polls.scale_min_label."},"scaleMaxLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"For likert: label for the maximum endpoint.\n\nMaps to econ_discuss_polls.scale_max_label."},"scaleMidLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"For likert: optional midpoint label.\n\nMaps to econ_discuss_polls.scale_mid_label."},"unitLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"For numeric_estimate: unit label (e.g., %, index points).\n\nMaps to econ_discuss_polls.unit_label."},"numericMin":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"For numeric_estimate: minimum allowed value.\n\nMaps to econ_discuss_polls.numeric_min."},"numericMax":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"For numeric_estimate: maximum allowed value.\n\nMaps to econ_discuss_polls.numeric_max."},"numericStep":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"For numeric_estimate: step size/precision for rounding.\n\nMaps to econ_discuss_polls.numeric_step."},"startAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional scheduled open time (UTC).\n\nMaps to econ_discuss_polls.start_at."},"endAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional scheduled close time (UTC).\n\nMaps to econ_discuss_polls.end_at."},"options":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollOption.ICreate"},"minItems":0,"description":"Initial answer options for option-driven question types (single_choice, multiple_choice, ranking). Ignored for likert and numeric_estimate.\n\nMaps to econ_discuss_poll_options (option_text, position)."}},"required":["question","questionType","visibilityMode","expertOnly","allowVoteChange"],"description":"Create payload to attach a poll to a post.\n\nPersists to Polls.econ_discuss_polls and creates econ_discuss_poll_options when provided. One poll per post is enforced by a unique constraint on econ_discuss_post_id. Do not include identifiers or host post linkage here; the route path supplies the post context.\n\nType-specific constraints: multiple_choice uses min/maxSelections; likert uses scale* fields; numeric_estimate uses unitLabel and numeric* bounds."},"IEconDiscussPollOption":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the poll option.\n\nPrisma reference: econ_discuss_poll_options.id — UUID primary key."},"pollId":{"type":"string","format":"uuid","description":"Identifier of the parent poll that owns this option.\n\nPrisma reference: econ_discuss_poll_options.econ_discuss_poll_id — FK to econ_discuss_polls.id."},"text":{"type":"string","minLength":1,"description":"Display text for the option, unique within a poll.\n\nPrisma reference: econ_discuss_poll_options.option_text — per-poll unique label."},"position":{"type":"integer","description":"Display order index within the poll (zero- or one-based per policy). Must be unique per poll.\n\nPrisma reference: econ_discuss_poll_options.position — ordering integer."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of this option (UTC, ISO 8601).\n\nPrisma reference: econ_discuss_poll_options.created_at — timestamptz."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of this option (UTC, ISO 8601).\n\nPrisma reference: econ_discuss_poll_options.updated_at — timestamptz."}},"required":["id","pollId","text","position","createdAt","updatedAt"],"description":"Poll option entity returned by read endpoints.\n\nMaps to Prisma model econ_discuss_poll_options. Exposes public-facing fields only (id, parent pollId, text, position, and timestamps). Lifecycle markers like deleted_at are intentionally omitted from public responses."},"IEconDiscussPollOption.ICreate":{"type":"object","properties":{"text":{"type":"string","minLength":1,"description":"Display text for the new option. Must be unique within the parent poll.\n\nPrisma reference: econ_discuss_poll_options.option_text — unique per (poll, option_text)."},"position":{"type":"integer","description":"Display order index for this option within the poll. Must be unique in the poll.\n\nPrisma reference: econ_discuss_poll_options.position — unique per (poll, position)."}},"required":["text"],"description":"Create DTO for adding a new poll option to a poll.\n\nBacked by Prisma model econ_discuss_poll_options. Requires option text; position may be provided or assigned by server logic. Uniqueness per poll is enforced over (option_text) and (position)."},"IEconDiscussPoll.IUpdate":{"type":"object","properties":{"question":{"type":"string","minLength":1,"description":"Poll prompt text displayed to respondents.\n\nPrisma reference: econ_discuss_polls.question — freeform prompt text captured at creation/update time. Follow clear, concise wording per Polls requirements."},"visibility_mode":{"$ref":"#/components/schemas/IEconDiscussPollVisibilityMode","description":"Controls when running results are visible to users.\n\nPrisma reference: econ_discuss_polls.visibility_mode — allowed values include hidden_until_close, visible_after_vote, and always_visible (policy may restrict certain modes for expert-only polls)."},"allow_vote_change":{"type":"boolean","description":"Allows respondents to change their answers before the poll closes.\n\nPrisma reference: econ_discuss_polls.allow_vote_change — when true, users may edit responses within the configured window and before end_at."},"min_voter_reputation":{"type":"integer","minimum":0,"description":"Optional minimum reputation score required to participate.\n\nPrisma reference: econ_discuss_polls.min_voter_reputation — non-negative integer gating eligibility."},"min_account_age_hours":{"type":"integer","minimum":0,"description":"Optional minimum account age (in hours) required to participate.\n\nPrisma reference: econ_discuss_polls.min_account_age_hours — non-negative integer threshold."},"min_selections":{"type":"integer","minimum":0,"description":"For multiple_choice questions: minimum number of options a respondent must select.\n\nPrisma reference: econ_discuss_polls.min_selections — applicable only to multiple_choice; must be ≤ max_selections and ≤ total options."},"max_selections":{"type":"integer","minimum":0,"description":"For multiple_choice questions: maximum number of options a respondent may select.\n\nPrisma reference: econ_discuss_polls.max_selections — applicable only to multiple_choice; must be ≥ min_selections and ≤ total options."},"scale_points":{"type":"integer","minimum":2,"description":"For likert questions: number of points on the scale (commonly 5 or 7).\n\nPrisma reference: econ_discuss_polls.scale_points — integer cardinality of the Likert scale."},"scale_min_label":{"type":"string","description":"For likert questions: label for the minimum endpoint (e.g., Strongly disagree).\n\nPrisma reference: econ_discuss_polls.scale_min_label — endpoint label text."},"scale_max_label":{"type":"string","description":"For likert questions: label for the maximum endpoint (e.g., Strongly agree).\n\nPrisma reference: econ_discuss_polls.scale_max_label — endpoint label text."},"scale_mid_label":{"type":"string","description":"For likert questions: optional label for the midpoint, when a midpoint exists.\n\nPrisma reference: econ_discuss_polls.scale_mid_label — midpoint label text."},"unit_label":{"type":"string","description":"For numeric_estimate questions: textual unit label to display (e.g., %, index points).\n\nPrisma reference: econ_discuss_polls.unit_label — freeform unit text."},"numeric_min":{"type":"number","description":"For numeric_estimate questions: minimum allowed numeric value.\n\nPrisma reference: econ_discuss_polls.numeric_min — lower bound for numeric responses."},"numeric_max":{"type":"number","description":"For numeric_estimate questions: maximum allowed numeric value.\n\nPrisma reference: econ_discuss_polls.numeric_max — upper bound for numeric responses."},"numeric_step":{"type":"number","exclusiveMinimum":0,"description":"For numeric_estimate questions: step size/precision for rounding.\n\nPrisma reference: econ_discuss_polls.numeric_step — positive number indicating input granularity."},"start_at":{"type":"string","format":"date-time","description":"Scheduled start time for the poll (UTC, ISO 8601).\n\nPrisma reference: econ_discuss_polls.start_at — when set, participation opens at this timestamp."},"end_at":{"type":"string","format":"date-time","description":"Scheduled end time for the poll (UTC, ISO 8601).\n\nPrisma reference: econ_discuss_polls.end_at — after this timestamp, participation closes and results may publish per visibility rules."}},"required":[],"description":"Update DTO for a poll configuration.\n\nThis type represents the mutable fields of a poll stored in Prisma model econ_discuss_polls. It supports adjusting visibility rules, eligibility thresholds, Likert and numeric parameters, multi-select constraints, and scheduling. Structural fields like question_type and option sets are typically restricted once a poll has responses.\n\nSecurity & integrity: The service must enforce lifecycle constraints (e.g., no structural changes after responses exist) and validate bounds and relationships (min/max, numeric_step > 0)."},"IEconDiscussPollOption.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based)."},"pageSize":{"type":"integer","minimum":1,"description":"Number of records per page."},"q":{"type":"string","description":"Keyword to search within option text (econ_discuss_poll_options.option_text)."},"sort_by":{"$ref":"#/components/schemas/IEconDiscussPollOptionSortBy","description":"Sort field to order option results."},"order":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sorting direction to apply to the selected sort field."}},"required":[],"description":"Request DTO for searching and paginating poll options.\n\nBacked by Prisma model econ_discuss_poll_options. Supports text search on option_text, sorted retrieval (position or recency), and page controls for efficient listing in admin or authoring tools."},"IEEconDiscussPollResponseStatus":{"oneOf":[{"const":"active","description":"Lifecycle status values for econ_discuss_poll_responses.status."},{"const":"withdrawn","description":"Lifecycle status values for econ_discuss_poll_responses.status."},{"const":"quarantined","description":"Lifecycle status values for econ_discuss_poll_responses.status."},{"const":"invalidated","description":"Lifecycle status values for econ_discuss_poll_responses.status."}],"description":"Lifecycle status values for econ_discuss_poll_responses.status."},"IEPollQuestionType":{"oneOf":[{"const":"single_choice","description":"Poll question types per econ_discuss_polls.question_type."},{"const":"multiple_choice","description":"Poll question types per econ_discuss_polls.question_type."},{"const":"likert","description":"Poll question types per econ_discuss_polls.question_type."},{"const":"ranking","description":"Poll question types per econ_discuss_polls.question_type."},{"const":"numeric_estimate","description":"Poll question types per econ_discuss_polls.question_type."}],"description":"Poll question types per econ_discuss_polls.question_type."},"IEconDiscussPollResponse":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the response (econ_discuss_poll_responses.id).\n\nUUID string."},"pollId":{"type":"string","format":"uuid","description":"Foreign key to the parent poll (econ_discuss_poll_responses.econ_discuss_poll_id).\n\nUUID string referencing Polls.econ_discuss_polls.id (one poll per post)."},"userId":{"type":"string","format":"uuid","description":"Respondent user's identifier (econ_discuss_poll_responses.econ_discuss_user_id).\n\nThis value may be omitted from certain public views by policy; it is included here for owner/admin contexts."},"status":{"$ref":"#/components/schemas/IEEconDiscussPollResponseStatus","description":"Lifecycle status mapped from econ_discuss_poll_responses.status.\n\nUsed by integrity and privacy logic."},"likertValue":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Likert scale selection for Likert-type polls (econ_discuss_poll_responses.likert_value).\n\nNull for non-Likert question types or when not set."},"numericValue":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Numeric estimate for numeric_estimate polls (econ_discuss_poll_responses.numeric_value).\n\nNull for non-numeric question types or when not set."},"withdrawnAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the respondent withdrew their vote (econ_discuss_poll_responses.withdrawn_at).\n\nNull if not withdrawn."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of the response (econ_discuss_poll_responses.created_at).\n\nISO 8601 date-time."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of the response (econ_discuss_poll_responses.updated_at).\n\nISO 8601 date-time."},"selections":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResponseOption.ISummary"},"description":"Selected options for option-based question types, assembled from econ_discuss_poll_response_options.\n\nEmpty array for scalar-only question types (likert, numeric_estimate)."}},"required":["id","pollId","userId","status","createdAt","updatedAt","selections"],"description":"Poll response entity assembled from the Prisma table Polls.econ_discuss_poll_responses and, for option-based questions, linked rows in econ_discuss_poll_response_options.\n\nIncludes lifecycle and type-specific fields (likertValue, numericValue) and a normalized selections array for choices/ranking. Sensitive internals are not exposed here."},"IEconDiscussPollResponseOption.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the selection row (econ_discuss_poll_response_options.id).\n\nUUID string."},"optionId":{"type":"string","format":"uuid","description":"Selected option identifier (econ_discuss_poll_response_options.econ_discuss_poll_option_id).\n\nUUID string referencing Polls.econ_discuss_poll_options.id."},"position":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Ranking position for ranking-type questions (econ_discuss_poll_response_options.position). Null for non-ranking types.\n\nPositions are 1..N within a single response for ranking questions."}},"required":["id","optionId"],"description":"Summary of a single selection within a response, reflecting the Prisma row from Polls.econ_discuss_poll_response_options.\n\nFor ranking questions, position carries the ordering; for other types it remains null."},"IEconDiscussPollResponse.ICreate":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResponse.ICreate.ISingleChoice"},{"$ref":"#/components/schemas/IEconDiscussPollResponse.ICreate.IMultipleChoice"},{"$ref":"#/components/schemas/IEconDiscussPollResponse.ICreate.IRanking"},{"$ref":"#/components/schemas/IEconDiscussPollResponse.ICreate.ILikert"},{"$ref":"#/components/schemas/IEconDiscussPollResponse.ICreate.INumericEstimate"}],"description":"Request body to submit a poll response. Shape varies by question type (econ_discuss_polls.question_type).\n\nThe discriminator property questionType selects the appropriate variant. Eligibility and window checks (expert_only, allow_vote_change, start_at/end_at, reputation/age floors) are enforced server-side per Polls.econ_discuss_polls."},"IEconDiscussPollResponse.ICreate.ISingleChoice":{"type":"object","properties":{"questionType":{"$ref":"#/components/schemas/IEPollQuestionType","description":"Must be \"single_choice\" for this variant."},"optionId":{"type":"string","format":"uuid","description":"Chosen option identifier for the single-choice poll.\n\nMust reference an existing econ_discuss_poll_options.id for the post's poll."}},"required":["questionType","optionId"],"description":"Create payload for single_choice polls.\n\nSelect exactly one option by its UUID (econ_discuss_poll_options.id).\n\nquestionType must equal \"single_choice\"."},"IEconDiscussPollResponse.ICreate.IMultipleChoice":{"type":"object","properties":{"questionType":{"$ref":"#/components/schemas/IEPollQuestionType","description":"Must be \"multiple_choice\" for this variant."},"optionIds":{"type":"array","items":{"type":"string","format":"uuid"},"minItems":1,"description":"Array of selected option identifiers.\n\nMust satisfy min_selections/max_selections configured in econ_discuss_polls."}},"required":["questionType","optionIds"],"description":"Create payload for multiple_choice polls.\n\nProvide one or more optionIds referencing econ_discuss_poll_options.id.\n\nquestionType must equal \"multiple_choice\"."},"IEconDiscussPollResponse.ICreate.IRanking":{"type":"object","properties":{"questionType":{"$ref":"#/components/schemas/IEPollQuestionType","description":"Must be \"ranking\" for this variant."},"rankings":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResponse.IRankingItem"},"minItems":1,"description":"Complete ranked list of options with positions.\n\nPositions must be unique and within 1..N for the provided set."}},"required":["questionType","rankings"],"description":"Create payload for ranking polls.\n\nSupply the exact set of ranked options via rankings, each with an explicit 1..N position.\n\nquestionType must equal \"ranking\"."},"IEconDiscussPollResponse.IRankingItem":{"type":"object","properties":{"optionId":{"type":"string","format":"uuid","description":"Selected option identifier (econ_discuss_poll_options.id) included in the ranking."},"position":{"type":"integer","minimum":1,"description":"Position for this option within the ranked list (1..N).\n\nPositions must be unique within the response."}},"required":["optionId","position"],"description":"Ranking item representing one option and its 1..N position for ranking-type questions.\n\nMaps to selection rows in econ_discuss_poll_response_options with the position column set."},"IEconDiscussPollResponse.ICreate.ILikert":{"type":"object","properties":{"questionType":{"$ref":"#/components/schemas/IEPollQuestionType","description":"Must be \"likert\" for this variant."},"likertValue":{"type":"integer","description":"Selected Likert value.\n\nMust be within the configured scale points (econ_discuss_polls.scale_points)."}},"required":["questionType","likertValue"],"description":"Create payload for likert polls.\n\nProvide an integer likertValue that conforms to the poll's scale configuration.\n\nquestionType must equal \"likert\"."},"IEconDiscussPollResponse.ICreate.INumericEstimate":{"type":"object","properties":{"questionType":{"type":"string","const":"numeric_estimate","description":"Discriminator for numeric estimate responses. Must be exactly \"numeric_estimate\" as per econ_discuss_polls.question_type."},"numericValue":{"type":"number","description":"Numeric estimate value supplied by the respondent.\n\nService enforces econ_discuss_polls.numeric_min ≤ numericValue ≤ numeric_max and rounding to numeric_step if configured."}},"required":["questionType","numericValue"],"description":"Create payload variant for numeric_estimate poll responses.\n\nApplies when econ_discuss_polls.question_type is numeric_estimate and enforces discriminator via const."},"IEconDiscussPollResponse.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Pagination page (1-based)."},"pageSize":{"type":"integer","minimum":1,"maximum":200,"description":"Page size. Providers enforce an upper bound (e.g., 200)."},"statuses":{"type":"array","items":{"$ref":"#/components/schemas/IEEconDiscussPollResponseStatus"},"description":"Filter by response lifecycle status (active, withdrawn, quarantined, invalidated)."},"dateFrom":{"type":"string","format":"date-time","description":"Lower bound for econ_discuss_poll_responses.created_at (ISO 8601)."},"dateTo":{"type":"string","format":"date-time","description":"Upper bound for econ_discuss_poll_responses.created_at (ISO 8601)."},"sortBy":{"oneOf":[{"const":"created_at"},{"const":"updated_at"},{"const":"status"}],"description":"Sort key mapped to econ_discuss_poll_responses columns: created_at, updated_at, or status."},"sortOrder":{"$ref":"#/components/schemas/IESortOrder","description":"Sort direction (asc or desc)."}},"required":[],"description":"General/member request DTO for searching poll responses.\n\nSecurity: does not allow direct user ID filtering. Use the admin-only DTO for governance respondent scoping."},"IEconDiscussPollOption.IUpdate":{"type":"object","properties":{"optionText":{"type":"string","minLength":1,"maxLength":50,"description":"New display text for the option (econ_discuss_poll_options.option_text). Must be unique per poll."},"position":{"type":"integer","minimum":0,"description":"Display order within the poll (econ_discuss_poll_options.position). Must be unique per poll."}},"required":[],"description":"Partial update for poll options stored in econ_discuss_poll_options. Supports updating option_text and/or position while respecting per-poll uniqueness."},"IEconDiscussPollResponse.IUpdate":{"type":"object","properties":{"status":{"$ref":"#/components/schemas/IEEconDiscussPollResponseStatus","description":"Lifecycle status for the response. Service enforces valid transitions by role and poll state."},"likertValue":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Likert-scale selection for likert questions (econ_discuss_polls.question_type = likert). Must be within poll scale. Null clears if permitted."},"numericValue":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Numeric estimate for numeric_estimate questions. Must satisfy configured bounds/step. Null clears if permitted."}},"required":[],"description":"Update DTO for econ_discuss_poll_responses supporting status changes and scalar value edits for Likert/Numeric types."},"IEconDiscussPollResponseOption.IRequest":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResponseOption.IRequest.IByOptionIds"},{"$ref":"#/components/schemas/IEconDiscussPollResponseOption.IRequest.IBySelections"}],"description":"Replacement request for a response’s option selections (Prisma: econ_discuss_poll_response_options).\n\nUse IByOptionIds for single_choice or multiple_choice polls (supply the exact set of optionIds). Use IBySelections for ranking polls (supply optionId with a mandatory ranking position). Service enforcement comes from econ_discuss_polls (min/max selections, ranking rules) and the junction table econ_discuss_poll_response_options."},"IEconDiscussPollResponseOption.IRequest.IByOptionIds":{"type":"object","properties":{"optionIds":{"type":"array","items":{"type":"string","format":"uuid"},"minItems":1,"uniqueItems":true,"description":"Exact set of option identifiers (econ_discuss_poll_options.id) to assign to the response.\n\nApplicable to question types that are option-based without ordering (single_choice, multiple_choice). All IDs must belong to options of the poll attached to the target post (econ_discuss_polls → econ_discuss_poll_options)."}},"required":["optionIds"],"description":"Variant for replacing selections by providing the complete set of optionIds.\n\nAll IDs must resolve to options belonging to the poll associated with the target post."},"IEconDiscussPollResponseOption.IRequest.IBySelections":{"type":"object","properties":{"selections":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResponseOption.ISelection.IRanking"},"minItems":1,"description":"Complete ordered selection set for ranking question types. Each item binds one option and its mandatory ranking position (1..N)."}},"required":["selections"],"description":"Variant for replacing selections when the question type is ranking.\n\nEach selection requires an optionId and a unique position within the provided set. Items must belong to options of the poll for the target post."},"IEconDiscussPollResponseOption.ISelection":{"type":"object","properties":{"optionId":{"type":"string","format":"uuid","description":"Selected option identifier referencing Prisma Polls.econ_discuss_poll_options.id.\n\nThis value must belong to the same poll as the parent response (econ_discuss_poll_responses.econ_discuss_poll_id)."},"position":{"oneOf":[{"type":"integer","description":"Ranking order (1..N) when the poll question_type is ranking."},{"type":"null"}],"description":"Ranking position for ranking-type questions (econ_discuss_poll_response_options.position).\n\nFor single_choice and multiple_choice questions, this property SHOULD be omitted or set to null."}},"required":["optionId"],"description":"Selection item used when adding or replacing response options for a poll response.\n\nThis schema maps to the Prisma table econ_discuss_poll_response_options by providing the option linkage (econ_discuss_poll_option_id) and, for ranking questions, the optional position. Ownership and poll-context validation are enforced by service logic."},"IEconDiscussPollResponseOption.ICreate":{"type":"object","properties":{"selections":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResponseOption.ISelection"},"minItems":1,"description":"One or more selections to append to the existing set for the response.\n\nFor multiple_choice, ensure total selections do not exceed econ_discuss_polls.max_selections. For ranking, positions must be unique and valid. For single_choice, prefer replacement semantics (use the IRequest variant)."}},"required":["selections"],"description":"Append-only request for adding response-option rows (econ_discuss_poll_response_options) to an existing response.\n\nThis DTO is used by endpoints that add selections incrementally without replacing the entire set."},"IEconDiscussPollResponseOption":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the response-option row (econ_discuss_poll_response_options.id)."},"responseId":{"type":"string","format":"uuid","description":"Foreign key to the poll response (econ_discuss_poll_response_options.econ_discuss_poll_response_id → econ_discuss_poll_responses.id)."},"optionId":{"type":"string","format":"uuid","description":"Foreign key to the chosen option (econ_discuss_poll_response_options.econ_discuss_poll_option_id → econ_discuss_poll_options.id)."},"position":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Ranking order for ranking-type questions (econ_discuss_poll_response_options.position). Null when not applicable."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp (econ_discuss_poll_response_options.created_at) recorded as an ISO 8601 string."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp (econ_discuss_poll_response_options.updated_at) recorded as an ISO 8601 string."}},"required":["id","responseId","optionId","createdAt","updatedAt"],"description":"Materialized junction entity representing a single selection for a poll response, as stored in Prisma table econ_discuss_poll_response_options.\n\nIncludes identifiers, optional ranking position, and audit timestamps. Soft-deleted rows (deleted_at) are excluded from this DTO by design."},"IEQuestionType":{"oneOf":[{"const":"single_choice","description":"Question type enumeration mapped to Polls.econ_discuss_polls.question_type.\n\nValues correspond to supported poll formats stored in the Prisma schema and drive which aggregate structure is populated in results (options/likert/numeric/ranking)."},{"const":"multiple_choice","description":"Question type enumeration mapped to Polls.econ_discuss_polls.question_type.\n\nValues correspond to supported poll formats stored in the Prisma schema and drive which aggregate structure is populated in results (options/likert/numeric/ranking)."},{"const":"likert","description":"Question type enumeration mapped to Polls.econ_discuss_polls.question_type.\n\nValues correspond to supported poll formats stored in the Prisma schema and drive which aggregate structure is populated in results (options/likert/numeric/ranking)."},{"const":"ranking","description":"Question type enumeration mapped to Polls.econ_discuss_polls.question_type.\n\nValues correspond to supported poll formats stored in the Prisma schema and drive which aggregate structure is populated in results (options/likert/numeric/ranking)."},{"const":"numeric_estimate","description":"Question type enumeration mapped to Polls.econ_discuss_polls.question_type.\n\nValues correspond to supported poll formats stored in the Prisma schema and drive which aggregate structure is populated in results (options/likert/numeric/ranking)."}],"description":"Question type enumeration mapped to Polls.econ_discuss_polls.question_type.\n\nValues correspond to supported poll formats stored in the Prisma schema and drive which aggregate structure is populated in results (options/likert/numeric/ranking)."},"IEVisibilityMode":{"oneOf":[{"const":"hidden_until_close","description":"Visibility mode from Polls.econ_discuss_polls.visibility_mode controlling exposure of running results.\n\nhidden_until_close: results withheld until end_at; visible_after_vote: running results only to voters; always_visible: running results to all viewers."},{"const":"visible_after_vote","description":"Visibility mode from Polls.econ_discuss_polls.visibility_mode controlling exposure of running results.\n\nhidden_until_close: results withheld until end_at; visible_after_vote: running results only to voters; always_visible: running results to all viewers."},{"const":"always_visible","description":"Visibility mode from Polls.econ_discuss_polls.visibility_mode controlling exposure of running results.\n\nhidden_until_close: results withheld until end_at; visible_after_vote: running results only to voters; always_visible: running results to all viewers."}],"description":"Visibility mode from Polls.econ_discuss_polls.visibility_mode controlling exposure of running results.\n\nhidden_until_close: results withheld until end_at; visible_after_vote: running results only to voters; always_visible: running results to all viewers."},"IEPollResponseStatus":{"oneOf":[{"const":"active","description":"Lifecycle statuses for responses in Polls.econ_discuss_poll_responses.status.\n\n- active: counted response\n- withdrawn: withdrawn by voter\n- quarantined: held out of tallies during integrity review\n- invalidated: excluded based on governance decision"},{"const":"withdrawn","description":"Lifecycle statuses for responses in Polls.econ_discuss_poll_responses.status.\n\n- active: counted response\n- withdrawn: withdrawn by voter\n- quarantined: held out of tallies during integrity review\n- invalidated: excluded based on governance decision"},{"const":"quarantined","description":"Lifecycle statuses for responses in Polls.econ_discuss_poll_responses.status.\n\n- active: counted response\n- withdrawn: withdrawn by voter\n- quarantined: held out of tallies during integrity review\n- invalidated: excluded based on governance decision"},{"const":"invalidated","description":"Lifecycle statuses for responses in Polls.econ_discuss_poll_responses.status.\n\n- active: counted response\n- withdrawn: withdrawn by voter\n- quarantined: held out of tallies during integrity review\n- invalidated: excluded based on governance decision"}],"description":"Lifecycle statuses for responses in Polls.econ_discuss_poll_responses.status.\n\n- active: counted response\n- withdrawn: withdrawn by voter\n- quarantined: held out of tallies during integrity review\n- invalidated: excluded based on governance decision"},"IESegmentBy":{"oneOf":[{"const":"role","description":"Segmentation strategy for aggregates.\n\nrole: splits by verified experts vs general (joins Actors.econ_discuss_verified_experts). expertise_domain: segments by expert domain badges joined through Actors.econ_discuss_expert_domain_badges → Topics.econ_discuss_topics."},{"const":"expertise_domain","description":"Segmentation strategy for aggregates.\n\nrole: splits by verified experts vs general (joins Actors.econ_discuss_verified_experts). expertise_domain: segments by expert domain badges joined through Actors.econ_discuss_expert_domain_badges → Topics.econ_discuss_topics."}],"description":"Segmentation strategy for aggregates.\n\nrole: splits by verified experts vs general (joins Actors.econ_discuss_verified_experts). expertise_domain: segments by expert domain badges joined through Actors.econ_discuss_expert_domain_badges → Topics.econ_discuss_topics."},"IEconDiscussPollResults.IOption":{"type":"object","properties":{"optionId":{"type":"string","format":"uuid","description":"Option identifier (Polls.econ_discuss_poll_options.id) included in this aggregate row."},"optionText":{"type":"string","description":"Display text of the option (Polls.econ_discuss_poll_options.option_text) captured at aggregation time.\n\nNote: The authoritative text is in the options table; this field is provided for convenience in result rendering."},"count":{"type":"integer","description":"Number of eligible responses selecting this option after policy filters."},"percent":{"type":"number","description":"Share of eligible responses selecting this option, expressed as a percentage (0–100) with provider-defined precision."}},"required":["optionId","optionText","count","percent"],"description":"Per-option aggregate used in results for single_choice, multiple_choice, and ranking-type summaries.\n\nData derived from Polls.econ_discuss_poll_response_options joined to Polls.econ_discuss_poll_options with response-level eligibility applied."},"IEconDiscussPollResults.ILikert":{"type":"object","properties":{"scalePoints":{"type":"integer","description":"Number of scale points configured for the poll (commonly 5 or 7). Mirrors Polls.econ_discuss_polls.scale_points."},"minLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Label for the minimum endpoint (Polls.econ_discuss_polls.scale_min_label). May be null if not configured."},"maxLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Label for the maximum endpoint (Polls.econ_discuss_polls.scale_max_label). May be null if not configured."},"midLabel":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional midpoint label (Polls.econ_discuss_polls.scale_mid_label)."},"counts":{"type":"array","items":{"type":"integer"},"minItems":1,"description":"Distribution counts per ordinal point (index 1..scalePoints). Values exclude quarantined/invalidated responses and reflect integrity policy."}},"required":["scalePoints","counts"],"description":"Likert distribution aggregates computed for likert-type polls.\n\nComputed from Polls.econ_discuss_poll_responses.likert_value constrained by Polls.econ_discuss_polls.scale_points and endpoint labels."},"IEconDiscussPollResults.INumericSummary":{"type":"object","properties":{"n":{"type":"integer","description":"Number of eligible numeric responses included."},"mean":{"type":"number","description":"Arithmetic mean of numeric responses."},"median":{"type":"number","description":"Median of numeric responses."},"stdDev":{"type":"number","description":"Standard deviation of numeric responses."},"iqr":{"type":"number","description":"Interquartile range (Q3 − Q1)."},"min":{"type":"number","description":"Minimum observed value within the eligible set."},"max":{"type":"number","description":"Maximum observed value within the eligible set."}},"required":["n","mean","median","stdDev","iqr","min","max"],"description":"Summary statistics for numeric_estimate question type.\n\nValues are computed from Polls.econ_discuss_poll_responses.numeric_value within bounds configured on Polls.econ_discuss_polls (numeric_min, numeric_max, numeric_step)."},"IEconDiscussPollResults.IRankingSummary":{"type":"object","properties":{"n":{"type":"integer","description":"Total eligible responses considered in ranking aggregates."},"options":{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResults.IRankingOption"},"description":"Ranking statistics per option sorted by rank quality (e.g., firstPlaceCount/averagePosition)."}},"required":["n","options"],"description":"Ranking aggregation for ranking-type polls.\n\nComputed from Polls.econ_discuss_poll_response_options (position per option) joined to Polls.econ_discuss_poll_options with integrity and eligibility filters applied."},"IEconDiscussPollResults.ISegment":{"type":"object","properties":{"code":{"type":"string","description":"Machine-readable segment code (e.g., \"expert\", \"general\", or a topic code for expertise_domain)."},"label":{"type":"string","description":"Human-readable segment label for display (e.g., \"Verified Experts\")."},"totalResponses":{"type":"integer","description":"Number of eligible responses in this segment (after integrity and policy filters)."},"options":{"oneOf":[{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResults.IOption"}},{"type":"null"}],"description":"Per-option aggregates limited to this segment. Present for option-based question types; null otherwise."},"likert":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.ILikert"},{"type":"null"}],"description":"Likert distribution limited to this segment for Likert-type polls; null otherwise."},"numeric":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.INumericSummary"},{"type":"null"}],"description":"Numeric statistics limited to this segment for numeric_estimate polls; null otherwise."},"ranking":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.IRankingSummary"},{"type":"null"}],"description":"Ranking summary limited to this segment for ranking-type polls; null otherwise."}},"required":["code","label","totalResponses"],"description":"Privacy-preserving segmented aggregates (e.g., role- or domain-based), computed only when segment sizes satisfy k-anonymity thresholds.\n\nSegments are derived from role/badge relations: Actors.econ_discuss_verified_experts and Actors.econ_discuss_expert_domain_badges joined to Topics.econ_discuss_topics."},"IEconDiscussPollResults":{"type":"object","properties":{"pollId":{"type":"string","format":"uuid","description":"Identifier of the poll (Polls.econ_discuss_polls.id) whose results are being returned."},"postId":{"type":"string","format":"uuid","description":"Identifier of the host post (Articles.econ_discuss_posts.id) associated one-to-one with the poll."},"question":{"type":"string","description":"Poll prompt text (Polls.econ_discuss_polls.question)."},"questionType":{"$ref":"#/components/schemas/IEQuestionType","description":"Poll question type as configured in Polls.econ_discuss_polls.question_type."},"visibilityMode":{"$ref":"#/components/schemas/IEVisibilityMode","description":"Poll results visibility mode derived from Polls.econ_discuss_polls.visibility_mode."},"expertOnly":{"type":"boolean","description":"Whether participation is restricted to verified experts and staff per Polls.econ_discuss_polls.expert_only."},"totalResponses":{"type":"integer","description":"Count of eligible responses included in these aggregates (excludes quarantined/invalidated per policy)."},"computedAt":{"type":"string","format":"date-time","description":"Timestamp when aggregates were computed. Provided in ISO 8601. Not persisted in Prisma."},"options":{"oneOf":[{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResults.IOption"}},{"type":"null"}],"description":"Per-option aggregates for single_choice, multiple_choice, and ranking types.\n\nNull for Likert and numeric_estimate."},"likert":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.ILikert"},{"type":"null"}],"description":"Likert distribution for likert-type polls; null for other types."},"numeric":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.INumericSummary"},{"type":"null"}],"description":"Summary statistics for numeric_estimate polls; null for other types."},"ranking":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.IRankingSummary"},{"type":"null"}],"description":"Ranking summary for ranking-type polls; null for other types."},"segments":{"oneOf":[{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResults.ISegment"}},{"type":"null"}],"description":"Optional segmented aggregates (e.g., experts vs general). Only populated when privacy thresholds are satisfied and requested by the client/policy."}},"required":["pollId","postId","question","questionType","totalResponses","computedAt"],"description":"Aggregated, privacy-preserving poll results computed from Polls.econ_discuss_polls, Polls.econ_discuss_poll_options, Polls.econ_discuss_poll_responses, and Polls.econ_discuss_poll_response_options.\n\nContains per-type aggregates (options, likert, numeric, ranking) and optional segments while excluding quarantined/invalidated responses per integrity policy."},"IEconDiscussPollResult":{"type":"object","properties":{"pollId":{"type":"string","format":"uuid","description":"Identifier of the poll (Polls.econ_discuss_polls.id)."},"postId":{"type":"string","format":"uuid","description":"Identifier of the host post (Articles.econ_discuss_posts.id)."},"question":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Poll prompt (optional in this form)."},"questionType":{"$ref":"#/components/schemas/IEQuestionType","description":"Poll question type from Polls.econ_discuss_polls.question_type."},"visibilityMode":{"$ref":"#/components/schemas/IEVisibilityMode","description":"Visibility mode governing running result exposure."},"expertOnly":{"type":"boolean","description":"Expert-only participation flag (Polls.econ_discuss_polls.expert_only)."},"totalResponses":{"type":"integer","description":"Total eligible responses after policy filters."},"computedAt":{"type":"string","format":"date-time","description":"Computation timestamp for this result set."},"options":{"oneOf":[{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResults.IOption"}},{"type":"null"}],"description":"Per-option aggregates when applicable; null for non-option types."},"likert":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.ILikert"},{"type":"null"}],"description":"Likert distribution when applicable; null otherwise."},"numeric":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.INumericSummary"},{"type":"null"}],"description":"Numeric summary when applicable; null otherwise."},"ranking":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussPollResults.IRankingSummary"},{"type":"null"}],"description":"Ranking summary when applicable; null otherwise."},"segments":{"oneOf":[{"type":"array","items":{"$ref":"#/components/schemas/IEconDiscussPollResults.ISegment"}},{"type":"null"}],"description":"Optional segmented aggregates if requested and allowed by privacy thresholds."}},"required":["pollId","postId","questionType","totalResponses","computedAt"],"description":"Aggregated poll results returned by the POST/PATCH computation endpoint.\n\nStructure mirrors IEconDiscussPollResults, allowing the service to tailor included aggregates based on request parameters."},"IEconDiscussPollResult.IRequest":{"type":"object","properties":{"includeSegments":{"type":"boolean","description":"Whether segmented aggregates should be returned when privacy thresholds are satisfied.\n\nSegments derive from role (verified expert vs general) or expert domain badges."},"segmentBy":{"oneOf":[{"$ref":"#/components/schemas/IESegmentBy"},{"type":"null"}],"description":"Segmentation strategy.\n\n- role: experts vs general (joins Actors.econ_discuss_verified_experts).\n- expertise_domain: segments by expert domain badges (Actors.econ_discuss_expert_domain_badges) joined to Topics.econ_discuss_topics."},"minSegmentSize":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"k-anonymity minimum responses required per segment before results are shown. If null, service uses policy defaults."},"includeOptionBreakdown":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"When true, include per-option aggregates for option-based question types."},"includeLikertDistribution":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"When true, include Likert distribution for likert-type polls."},"includeNumericSummary":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"When true, include numeric summary for numeric_estimate polls."},"includeRankingSummary":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"When true, include ranking summary for ranking-type polls."},"includeQuarantined":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"If true, include responses with status=\"quarantined\" in aggregates (normally excluded). Defaults to false when null."},"excludeStatuses":{"oneOf":[{"type":"array","items":{"$ref":"#/components/schemas/IEPollResponseStatus"}},{"type":"null"}],"description":"Optional list of response statuses to exclude from tallies (e.g., [\"quarantined\", \"invalidated\"])."},"since":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional lower bound (ISO 8601) for responses to include by created_at. Null uses all history."},"until":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional upper bound (ISO 8601) for responses to include by created_at. Null uses current time."}},"required":[],"description":"Request parameters to control poll result aggregation returned by the POST/PATCH endpoint.\n\nEnables optional segmentation (role or expertise_domain), privacy thresholds, and selective inclusion of per-type aggregates. Filters are applied over Polls.econ_discuss_poll_responses and related option selections."},"IEconDiscussPollResponseOption.IUpdate":{"type":"object","properties":{"optionId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Change the selected option to this option ID (Polls.econ_discuss_poll_options.id). Null to keep unchanged.\n\nApplicable to single_choice and multiple_choice questions."},"position":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Ranking position to assign for ranking-type questions (1..N). Null to keep unchanged.\n\nApplies only when the poll’s question_type is ranking."}},"required":[],"description":"Payload to update a respondent’s option selection row (Polls.econ_discuss_poll_response_options) for a given poll response.\n\nSupports switching the option (optionId) and/or its ranking position (position) where allowed by econ_discuss_polls.allow_vote_change and within open poll windows. Does not manage scalar values for likert/numeric types."},"IELiveThreadState":{"oneOf":[{"const":"scheduled","description":"Lifecycle states for Live threads.\n\nBacked by Live.econ_discuss_live_threads.state in Prisma. Allowed values reflect the room lifecycle: scheduled, waiting, live, paused, ended, archived."},{"const":"waiting","description":"Lifecycle states for Live threads.\n\nBacked by Live.econ_discuss_live_threads.state in Prisma. Allowed values reflect the room lifecycle: scheduled, waiting, live, paused, ended, archived."},{"const":"live","description":"Lifecycle states for Live threads.\n\nBacked by Live.econ_discuss_live_threads.state in Prisma. Allowed values reflect the room lifecycle: scheduled, waiting, live, paused, ended, archived."},{"const":"paused","description":"Lifecycle states for Live threads.\n\nBacked by Live.econ_discuss_live_threads.state in Prisma. Allowed values reflect the room lifecycle: scheduled, waiting, live, paused, ended, archived."},{"const":"ended","description":"Lifecycle states for Live threads.\n\nBacked by Live.econ_discuss_live_threads.state in Prisma. Allowed values reflect the room lifecycle: scheduled, waiting, live, paused, ended, archived."},{"const":"archived","description":"Lifecycle states for Live threads.\n\nBacked by Live.econ_discuss_live_threads.state in Prisma. Allowed values reflect the room lifecycle: scheduled, waiting, live, paused, ended, archived."}],"description":"Lifecycle states for Live threads.\n\nBacked by Live.econ_discuss_live_threads.state in Prisma. Allowed values reflect the room lifecycle: scheduled, waiting, live, paused, ended, archived."},"IELiveThreadAccessScope":{"oneOf":[{"const":"public","description":"Access/visibility scope for Live threads.\n\nMaps to Live.econ_discuss_live_threads.access_scope (public, followers_only, topic_subscribers_only, invite_only)."},{"const":"followers_only","description":"Access/visibility scope for Live threads.\n\nMaps to Live.econ_discuss_live_threads.access_scope (public, followers_only, topic_subscribers_only, invite_only)."},{"const":"topic_subscribers_only","description":"Access/visibility scope for Live threads.\n\nMaps to Live.econ_discuss_live_threads.access_scope (public, followers_only, topic_subscribers_only, invite_only)."},{"const":"invite_only","description":"Access/visibility scope for Live threads.\n\nMaps to Live.econ_discuss_live_threads.access_scope (public, followers_only, topic_subscribers_only, invite_only)."}],"description":"Access/visibility scope for Live threads.\n\nMaps to Live.econ_discuss_live_threads.access_scope (public, followers_only, topic_subscribers_only, invite_only)."},"IEOrderDirection":{"oneOf":[{"const":"asc","description":"Sort direction for ordered list views.\n\nUse asc for ascending and desc for descending ordering."},{"const":"desc","description":"Sort direction for ordered list views.\n\nUse asc for ascending and desc for descending ordering."}],"description":"Sort direction for ordered list views.\n\nUse asc for ascending and desc for descending ordering."},"IEconDiscussLiveThread":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the live thread.\n\nMaps to Live.econ_discuss_live_threads.id (UUID PK)."},"postId":{"type":"string","format":"uuid","description":"Identifier of the host post to which this live thread is attached.\n\nMaps to Live.econ_discuss_live_threads.econ_discuss_post_id (unique per post)."},"hostUserId":{"type":"string","format":"uuid","description":"Identifier of the host user who can start/pause/end this live thread.\n\nMaps to Live.econ_discuss_live_threads.host_user_id (FK → Actors.econ_discuss_users.id)."},"state":{"$ref":"#/components/schemas/IELiveThreadState","description":"Lifecycle state of the live thread (scheduled, waiting, live, paused, ended, archived).\n\nBacked by Live.econ_discuss_live_threads.state."},"expertOnly":{"type":"boolean","description":"Whether participation is restricted to verified experts and staff.\n\nMaps to Live.econ_discuss_live_threads.expert_only."},"accessScope":{"$ref":"#/components/schemas/IELiveThreadAccessScope","description":"Access scope controlling visibility/participation for the live discussion.\n\nMaps to Live.econ_discuss_live_threads.access_scope."},"scheduledStartAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Planned start time for scheduled rooms (ISO 8601).\n\nMaps to Live.econ_discuss_live_threads.scheduled_start_at."},"startedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Actual time when the live thread transitioned to live (ISO 8601).\n\nMaps to Live.econ_discuss_live_threads.started_at."},"pausedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the live thread was paused (ISO 8601).\n\nMaps to Live.econ_discuss_live_threads.paused_at."},"endedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the live thread ended (ISO 8601).\n\nMaps to Live.econ_discuss_live_threads.ended_at."},"archivedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the live thread was archived (ISO 8601).\n\nMaps to Live.econ_discuss_live_threads.archived_at."},"slowModeIntervalSeconds":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional slow-mode interval limiting how frequently a participant may post (seconds).\n\nMaps to Live.econ_discuss_live_threads.slow_mode_interval_seconds."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of the live thread entity (ISO 8601).\n\nMaps to Live.econ_discuss_live_threads.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of the live thread entity (ISO 8601).\n\nMaps to Live.econ_discuss_live_threads.updated_at."}},"required":["id","postId","hostUserId","state","expertOnly","accessScope","createdAt","updatedAt"],"description":"Live discussion thread resource attached 1:1 to a post, reflecting lifecycle state, access controls, scheduling, and timestamps.\n\nBacked by Live.econ_discuss_live_threads in Prisma. Security note: deleted_at is system-managed and omitted from response DTOs."},"IEconDiscussLiveThread.ICreate":{"type":"object","properties":{"state":{"$ref":"#/components/schemas/IELiveThreadState","description":"Initial lifecycle state for the new live thread. Typical values at creation are \"scheduled\" or \"waiting\"/\"live\" depending on workflow."},"expertOnly":{"type":"boolean","description":"Whether participation is restricted to verified experts and staff for this thread. Defaults to false when omitted."},"accessScope":{"$ref":"#/components/schemas/IELiveThreadAccessScope","description":"Visibility/participation scope for the thread. Defaults to \"public\" when omitted."},"scheduledStartAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Planned start time for a scheduled session (ISO 8601). Null when not scheduled."},"slowModeIntervalSeconds":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional slow mode interval in seconds to rate-limit participant messages. Null disables slow mode."}},"required":[],"description":"Create DTO for a live discussion thread.\n\nServer-managed fields not accepted: id, postId (econ_discuss_post_id), hostUserId, createdAt, updatedAt. These derive from route/auth context or the system clock."},"IEconDiscussLiveThread.IUpdate":{"type":"object","properties":{"state":{"$ref":"#/components/schemas/IELiveThreadState","description":"Requested lifecycle state transition (scheduled, waiting, live, paused, ended, archived). Server sets corresponding timestamps."},"expertOnly":{"type":"boolean","description":"Toggle expert-only participation gating for the thread."},"accessScope":{"$ref":"#/components/schemas/IELiveThreadAccessScope","description":"Update access scope controlling visibility/participation."},"scheduledStartAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Adjust planned start time (ISO 8601). Use null to clear scheduling."},"slowModeIntervalSeconds":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Adjust slow-mode interval in seconds. Use null to disable."}},"required":[],"description":"Update DTO for a live discussion thread.\n\nAll fields optional; server validates legal transitions and permissions. System-managed identifiers/timestamps are excluded."},"IEconDiscussLiveThread.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination (1-based). When null, server defaults apply."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum records per page. When null, server defaults apply."},"q":{"type":"string","description":"Optional free-text query for provider-defined search (e.g., by host handle or post context)."},"state":{"type":"array","items":{"$ref":"#/components/schemas/IELiveThreadState"},"description":"Filter by one or more lifecycle states."},"expertOnly":{"type":"boolean","description":"Filter by expert-only flag (true = expert-only threads)."},"accessScope":{"type":"array","items":{"$ref":"#/components/schemas/IELiveThreadAccessScope"},"description":"Filter by one or more access scopes."},"myThreadsOnly":{"type":"boolean","description":"If true, restrict results to threads hosted by the authenticated user (server derives host from auth context). Avoids direct user_id filters in public DTOs."},"postId":{"type":"string","format":"uuid","description":"Filter by host post id (Live.econ_discuss_live_threads.econ_discuss_post_id)."},"scheduledStartFrom":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for scheduled_start_at (ISO 8601)."},"scheduledStartTo":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for scheduled_start_at (ISO 8601)."},"startedFrom":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for started_at (ISO 8601)."},"startedTo":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for started_at (ISO 8601)."},"endedFrom":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for ended_at (ISO 8601)."},"endedTo":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for ended_at (ISO 8601)."},"orderBy":{"$ref":"#/components/schemas/IELiveThreadOrderBy","description":"Sort field to order results by live thread columns."},"orderDirection":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sort direction (asc or desc)."}},"required":[],"description":"Search/filter DTO for listing live discussion threads.\n\nMaps to Live.econ_discuss_live_threads columns for filtering/sorting while avoiding direct user_id filters. Pagination fields follow the platform’s standard IRequest pattern (page/limit)."},"IELiveMessageType":{"oneOf":[{"const":"text","description":"Enumeration of live message types used by Live.econ_discuss_live_messages.message_type.\n\nAllowed values derive from Prisma model comments and are enforced at the application layer."},{"const":"system","description":"Enumeration of live message types used by Live.econ_discuss_live_messages.message_type.\n\nAllowed values derive from Prisma model comments and are enforced at the application layer."},{"const":"poll_prompt","description":"Enumeration of live message types used by Live.econ_discuss_live_messages.message_type.\n\nAllowed values derive from Prisma model comments and are enforced at the application layer."},{"const":"poll_result","description":"Enumeration of live message types used by Live.econ_discuss_live_messages.message_type.\n\nAllowed values derive from Prisma model comments and are enforced at the application layer."},{"const":"moderation_notice","description":"Enumeration of live message types used by Live.econ_discuss_live_messages.message_type.\n\nAllowed values derive from Prisma model comments and are enforced at the application layer."},{"const":"pinned","description":"Enumeration of live message types used by Live.econ_discuss_live_messages.message_type.\n\nAllowed values derive from Prisma model comments and are enforced at the application layer."},{"const":"pinned","description":"Enumeration of live message types used by Live.econ_discuss_live_messages.message_type.\n\nAllowed values derive from Prisma model comments and are enforced at the application layer."}],"description":"Enumeration of live message types used by Live.econ_discuss_live_messages.message_type.\n\nAllowed values derive from Prisma model comments and are enforced at the application layer."},"IEconDiscussUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user.\n\nPrisma: Actors.econ_discuss_users.id (UUID primary key)."},"displayName":{"type":"string","description":"Public display name or handle for the user.\n\nPrisma: Actors.econ_discuss_users.display_name (String)."},"avatarUri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional avatar image URI for profile displays.\n\nPrisma: Actors.econ_discuss_users.avatar_uri (nullable String)."}},"required":["id","displayName"],"description":"Public-safe user summary containing essential identity fields used in list views and references.\n\nSourced from Actors.econ_discuss_users. Sensitive fields such as email, password_hash, MFA secrets, and tokens are intentionally omitted."},"IEconDiscussLiveMessage.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","minimum":1,"description":"Page number for pagination (1-based).\n\nUsed by list/search operations over Live.econ_discuss_live_messages joined via the post’s live thread. Server applies sensible maximums."},"pageSize":{"type":"integer","format":"int32","minimum":1,"description":"Page size (items per page).\n\nApplies to message listings. The service enforces an upper bound to protect performance."},"since":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional ISO 8601 timestamp cursor. When provided, only messages with created_at strictly greater than this instant are returned.\n\nMaps to Live.econ_discuss_live_messages.created_at (timestamptz)."},"messageTypes":{"oneOf":[{"type":"array","items":{"$ref":"#/components/schemas/IELiveMessageType"}},{"type":"null"}],"description":"Optional filter restricting results to one or more message types.\n\nValues are defined by IELiveMessageType and correspond to econ_discuss_live_messages.message_type."},"pinned":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional filter to return only pinned messages (true) or only non-pinned messages (false). Omit or null to not filter.\n\nMaps to econ_discuss_live_messages.pinned (Boolean)."},"sortBy":{"oneOf":[{"const":"created_at_asc"},{"const":"created_at_desc"},{"type":"null"}],"description":"Sort order for chronological listing.\n\n- created_at_desc (default): newest first\n- created_at_asc: oldest first\n\nBacked by Live.econ_discuss_live_messages.created_at indexes."},"myMessagesOnly":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional security-safe flag to restrict results to messages authored by the authenticated caller.\n\nReplaces direct userId filtering per security policy disallowing arbitrary user_id filters in request DTOs."}},"required":[],"description":"Search request parameters for listing live messages of a post’s live thread.\n\nThis DTO expresses pagination and filtering inputs for queries over Live.econ_discuss_live_messages as related to a post via Live.econ_discuss_live_threads (one-to-one with Articles.econ_discuss_posts). It supports server-side indexes on created_at and type filtering.\n\nSecurity: Avoids direct user_id filters (policy) and instead offers myMessagesOnly to scope to the caller when needed. Private threads remain protected by access controls at the controller level."},"IEconDiscussLiveMessage.ICreate":{"type":"object","properties":{"messageType":{"$ref":"#/components/schemas/IELiveMessageType","description":"Type of the message to create. Must be one of IELiveMessageType values.\n\nMaps to Live.econ_discuss_live_messages.message_type."},"content":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Message body text when applicable (e.g., for messageType=\"text\"). For certain system types this may be absent.\n\nMaps to Live.econ_discuss_live_messages.content (nullable String)."},"pinned":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Whether the newly created message should be pinned. Defaults to false when omitted.\n\nMaps to Live.econ_discuss_live_messages.pinned (Boolean)."}},"required":["messageType"],"description":"Creation DTO for a live message in a post’s live thread.\n\nSecurity policy is enforced by the service: the author is derived from authentication (econ_discuss_live_messages.econ_discuss_user_id), and the target thread is resolved from the path-bound post. Server-managed fields (id, created_at, updated_at, edited_at, deleted_at, live thread linkage) are not accepted here and are set by the backend."},"IEconDiscussLiveMessage.IUpdate":{"type":"object","properties":{"messageType":{"oneOf":[{"$ref":"#/components/schemas/IELiveMessageType"},{"type":"null"}],"description":"Optional message type change. Most installations restrict type changes; if allowed, use one of IELiveMessageType values.\n\nBacked by Live.econ_discuss_live_messages.message_type."},"content":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated message body text. Null can be used to clear content where policy allows (e.g., system notices).\n\nBacked by Live.econ_discuss_live_messages.content (nullable String)."},"pinned":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Toggle the pinned state for the message. True to pin; false to unpin.\n\nBacked by Live.econ_discuss_live_messages.pinned (Boolean)."}},"required":[],"description":"Update DTO for a live message. All fields are optional and subject to policy:\n\n- Edits may be limited by thread state (live vs ended/archived) and time windows.\n- Pin/unpin may require host or moderator privileges.\n\nServer-managed fields (id, author, timestamps, linkages) are excluded from this request."},"IEconDiscussLiveMessage":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Message identifier.\n\nPrisma: Live.econ_discuss_live_messages.id (UUID primary key)."},"liveThreadId":{"type":"string","format":"uuid","description":"Identifier of the live thread that owns this message.\n\nPrisma: Live.econ_discuss_live_messages.econ_discuss_live_thread_id (FK to econ_discuss_live_threads.id)."},"authorUserId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the authoring user, or null if the author has been anonymized per policy.\n\nPrisma: Live.econ_discuss_live_messages.econ_discuss_user_id (nullable FK to econ_discuss_users.id)."},"author":{"oneOf":[{"$ref":"#/components/schemas/IEconDiscussUser.ISummary"},{"type":"null"}],"description":"Optional embedded summary of the author for convenience. Omitted or null when not requested or when author has been anonymized.\n\nDerived from Actors.econ_discuss_users and related expert badge tables; not a direct database column."},"messageType":{"$ref":"#/components/schemas/IELiveMessageType","description":"Type of the message.\n\nPrisma: Live.econ_discuss_live_messages.message_type (application-enforced values)."},"content":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Message body text for text/system styles; may be null for certain system messages.\n\nPrisma: Live.econ_discuss_live_messages.content (nullable String)."},"pinned":{"type":"boolean","description":"Pin flag controlling highlighted placement within the thread.\n\nPrisma: Live.econ_discuss_live_messages.pinned (Boolean)."},"editedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of last edit within the permitted window; null if never edited.\n\nPrisma: Live.econ_discuss_live_messages.edited_at (timestamptz, nullable)."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of the message (ISO 8601, UTC recommended).\n\nPrisma: Live.econ_discuss_live_messages.created_at (timestamptz)."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of the message (ISO 8601).\n\nPrisma: Live.econ_discuss_live_messages.updated_at (timestamptz)."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp when the message has been removed from active visibility; null if active.\n\nPrisma: Live.econ_discuss_live_messages.deleted_at (timestamptz, nullable)."}},"required":["id","liveThreadId","messageType","pinned","createdAt","updatedAt"],"description":"Live message entity representing a single item within a post’s live discussion thread.\n\nBacked by the Prisma model Live.econ_discuss_live_messages which “stores raw message content, type, and lifecycle timestamps for ordering and limited edits,” with the following key columns: id, econ_discuss_live_thread_id, econ_discuss_user_id (nullable), message_type, content (nullable), pinned, edited_at (nullable), created_at, updated_at, and deleted_at (nullable).\n\nSecurity: Sensitive authentication fields do not exist on this entity. Author attribution is limited to non-sensitive identity and may be null when anonymization or deletion has occurred."},"IEconDiscussExpertDomainBadge.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the expert domain badge.\n\nMaps to Actors.econ_discuss_expert_domain_badges.id, the primary key for each per-domain badge assignment."},"topic":{"$ref":"#/components/schemas/IEconDiscussTopic.ISummary","description":"Curated topic/domain associated with the badge.\n\nJoins Actors.econ_discuss_expert_domain_badges.econ_discuss_topic_id to Topics.econ_discuss_topics. The summary exposes only safe, public taxonomy fields."},"verifiedAt":{"type":"string","format":"date-time","description":"Timestamp when the badge was approved for the user.\n\nBacked by econ_discuss_expert_domain_badges.verified_at (timestamptz)."},"validUntil":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional badge expiration timestamp.\n\nMaps to econ_discuss_expert_domain_badges.valid_until (nullable). When null, validity is open-ended until policy change or revocation."},"revokedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating revocation.\n\nBacked by econ_discuss_expert_domain_badges.revoked_at (nullable). Presence indicates the badge is no longer active."}},"required":["id","topic","verifiedAt"],"description":"Compact representation of a user’s verified expertise badge tied to a curated economics topic.\n\nSourced from Actors.econ_discuss_expert_domain_badges and joined to Topics.econ_discuss_topics for human-readable labeling. This summary is tailored for profile badges and expert-only discovery facets and excludes sensitive fields such as any internal revocation rationale."},"IEEconDiscussPostVoteType":{"oneOf":[{"const":"up","description":"Type of post vote.\n\nBacked by Interactions.econ_discuss_post_votes.vote_type (\"up\" or \"down\") in the Prisma schema. Used to indicate whether the voter upvoted or downvoted the target post."},{"const":"down","description":"Type of post vote.\n\nBacked by Interactions.econ_discuss_post_votes.vote_type (\"up\" or \"down\") in the Prisma schema. Used to indicate whether the voter upvoted or downvoted the target post."}],"description":"Type of post vote.\n\nBacked by Interactions.econ_discuss_post_votes.vote_type (\"up\" or \"down\") in the Prisma schema. Used to indicate whether the voter upvoted or downvoted the target post."},"IEEconDiscussPostVoteStatus":{"oneOf":[{"const":"active","description":"Status of a member’s vote as stored in Interactions.econ_discuss_post_votes.status.\n\nThis enumeration represents lifecycle outcomes for a single row in the post voting table. Values include: active (current vote in effect), withdrawn (user intentionally removed their vote within policy windows), switched (user changed their vote type during an allowed window), discounted (integrity system down‑weighted or excluded the vote), and invalidated (moderation or governance removed the vote from tallies).\n\nSee Prisma schema: model econ_discuss_post_votes → status column. This status is used for user‑private history views, integrity workflows, and administrative audits."},{"const":"withdrawn","description":"Status of a member’s vote as stored in Interactions.econ_discuss_post_votes.status.\n\nThis enumeration represents lifecycle outcomes for a single row in the post voting table. Values include: active (current vote in effect), withdrawn (user intentionally removed their vote within policy windows), switched (user changed their vote type during an allowed window), discounted (integrity system down‑weighted or excluded the vote), and invalidated (moderation or governance removed the vote from tallies).\n\nSee Prisma schema: model econ_discuss_post_votes → status column. This status is used for user‑private history views, integrity workflows, and administrative audits."},{"const":"switched","description":"Status of a member’s vote as stored in Interactions.econ_discuss_post_votes.status.\n\nThis enumeration represents lifecycle outcomes for a single row in the post voting table. Values include: active (current vote in effect), withdrawn (user intentionally removed their vote within policy windows), switched (user changed their vote type during an allowed window), discounted (integrity system down‑weighted or excluded the vote), and invalidated (moderation or governance removed the vote from tallies).\n\nSee Prisma schema: model econ_discuss_post_votes → status column. This status is used for user‑private history views, integrity workflows, and administrative audits."},{"const":"discounted","description":"Status of a member’s vote as stored in Interactions.econ_discuss_post_votes.status.\n\nThis enumeration represents lifecycle outcomes for a single row in the post voting table. Values include: active (current vote in effect), withdrawn (user intentionally removed their vote within policy windows), switched (user changed their vote type during an allowed window), discounted (integrity system down‑weighted or excluded the vote), and invalidated (moderation or governance removed the vote from tallies).\n\nSee Prisma schema: model econ_discuss_post_votes → status column. This status is used for user‑private history views, integrity workflows, and administrative audits."},{"const":"invalidated","description":"Status of a member’s vote as stored in Interactions.econ_discuss_post_votes.status.\n\nThis enumeration represents lifecycle outcomes for a single row in the post voting table. Values include: active (current vote in effect), withdrawn (user intentionally removed their vote within policy windows), switched (user changed their vote type during an allowed window), discounted (integrity system down‑weighted or excluded the vote), and invalidated (moderation or governance removed the vote from tallies).\n\nSee Prisma schema: model econ_discuss_post_votes → status column. This status is used for user‑private history views, integrity workflows, and administrative audits."}],"description":"Status of a member’s vote as stored in Interactions.econ_discuss_post_votes.status.\n\nThis enumeration represents lifecycle outcomes for a single row in the post voting table. Values include: active (current vote in effect), withdrawn (user intentionally removed their vote within policy windows), switched (user changed their vote type during an allowed window), discounted (integrity system down‑weighted or excluded the vote), and invalidated (moderation or governance removed the vote from tallies).\n\nSee Prisma schema: model econ_discuss_post_votes → status column. This status is used for user‑private history views, integrity workflows, and administrative audits."},"IEconDiscussPostVote.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the vote record.\n\nBacked by Interactions.econ_discuss_post_votes.id."},"postId":{"type":"string","format":"uuid","description":"Identifier of the target post that was voted on.\n\nMaps to econ_discuss_post_votes.econ_discuss_post_id (FK to Articles.econ_discuss_posts.id)."},"voteType":{"$ref":"#/components/schemas/IEEconDiscussPostVoteType","description":"Type of vote submitted by the user.\n\nBacked by econ_discuss_post_votes.vote_type (\"up\" or \"down\")."},"status":{"$ref":"#/components/schemas/IEEconDiscussPostVoteStatus","description":"Lifecycle status of this vote.\n\nBacked by econ_discuss_post_votes.status, capturing transitions like withdrawn or switched for auditability."},"createdAt":{"type":"string","format":"date-time","description":"Timestamp when the vote was created.\n\nBacked by econ_discuss_post_votes.created_at (timestamptz)."}},"required":["id","postId","voteType","status","createdAt"],"description":"Summary representation of a user’s vote on a post for private history views and administrative summaries.\n\nSourced from Interactions.econ_discuss_post_votes. This DTO excludes user identifiers to preserve privacy and focuses on per-record essentials such as target post, type, status, and timestamps."},"IEconDiscussPostBookmark.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Bookmark identifier.\n\nMaps to Interactions.econ_discuss_post_bookmarks.id (UUID primary key) in the Prisma schema. Used to uniquely reference a saved item record for the owner."},"userId":{"type":"string","format":"uuid","description":"Owner user identifier.\n\nDerived from econ_discuss_post_bookmarks.econ_discuss_user_id (FK → Actors.econ_discuss_users.id). Indicates who created and owns this bookmark entry."},"postId":{"type":"string","format":"uuid","description":"Target post identifier.\n\nDerived from econ_discuss_post_bookmarks.econ_discuss_post_id (FK → Articles.econ_discuss_posts.id). Points to the saved post."},"note":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Owner-only personal note attached to the saved item.\n\nMaps to econ_discuss_post_bookmarks.note. Notes are private to the owner and are excluded from any shared views; null when not provided."},"createdAt":{"type":"string","format":"date-time","description":"Bookmark creation timestamp (ISO 8601).\n\nMaps to econ_discuss_post_bookmarks.created_at (timestamptz). Used for listing and sorting."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of the bookmark (ISO 8601), including note edits.\n\nMaps to econ_discuss_post_bookmarks.updated_at (timestamptz)."}},"required":["id","userId","postId","createdAt","updatedAt"],"description":"Summary view of a post bookmark owned by a member.\n\nBacked by the Interactions table econ_discuss_post_bookmarks, which records per-user saved items for posts and supports private notes, created/updated timestamps, and a soft-deletion column (deleted_at). This summary omits internal lifecycle fields and surfaces only owner-facing attributes suitable for list views."},"IEconDiscussPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Post identifier.\n\nPrisma: Articles.econ_discuss_posts.id."},"title":{"type":"string","description":"Post title for list display.\n\nPrisma: Articles.econ_discuss_posts.title."},"summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short abstract for previews (no full body here).\n\nPrisma: Articles.econ_discuss_posts.summary."},"author_user_id":{"type":"string","format":"uuid","description":"Author user id for linking/profile badges.\n\nPrisma: Articles.econ_discuss_posts.econ_discuss_user_id."},"published_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Publication timestamp used for sorting/visibility.\n\nPrisma: Articles.econ_discuss_posts.published_at."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for tie-break/listing.\n\nPrisma: Articles.econ_discuss_posts.created_at."}},"required":["id","title","author_user_id","created_at"],"description":"Summary DTO for list views of posts.\n\nOptimized to avoid large text fields (excludes body). Contains essential identifiers, display title, optional summary, author linkage, and key dates for sorting."},"IEconDiscussPollOption.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Poll option identifier.\n\nMaps to Polls.econ_discuss_poll_options.id (UUID PK)."},"pollId":{"type":"string","format":"uuid","description":"Parent poll identifier.\n\nDerived from econ_discuss_poll_options.econ_discuss_poll_id (FK → Polls.econ_discuss_polls.id)."},"text":{"type":"string","description":"Display text for the option.\n\nMaps to econ_discuss_poll_options.option_text. Unique within the parent poll."},"position":{"type":"integer","description":"Display ordering index within the poll.\n\nMaps to econ_discuss_poll_options.position (integer). Unique within the parent poll to ensure deterministic ordering."},"createdAt":{"type":"string","format":"date-time","description":"Option creation timestamp (ISO 8601).\n\nMaps to econ_discuss_poll_options.created_at (timestamptz)."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp for the option (ISO 8601).\n\nMaps to econ_discuss_poll_options.updated_at (timestamptz)."}},"required":["id","pollId","text","position","createdAt","updatedAt"],"description":"Summary of a poll answer option.\n\nBacked by Polls.econ_discuss_poll_options, which stores option text and deterministic ordering (position) under a parent poll. This summary omits internal lifecycle fields (deleted_at) and focuses on list-friendly attributes."},"IEEconDiscussLiveThreadState":{"oneOf":[{"const":"scheduled","description":"Allowed lifecycle states for a live discussion thread.\n\nThis enumeration corresponds to Live.econ_discuss_live_threads.state as documented in the Prisma schema. Valid values are:\n- scheduled: a future session with a planned start\n- waiting: prepared and visible to participants but not yet live\n- live: actively running session\n- paused: temporarily suspended session\n- ended: session concluded\n- archived: read-only, retained for transcript access and history"},{"const":"waiting","description":"Allowed lifecycle states for a live discussion thread.\n\nThis enumeration corresponds to Live.econ_discuss_live_threads.state as documented in the Prisma schema. Valid values are:\n- scheduled: a future session with a planned start\n- waiting: prepared and visible to participants but not yet live\n- live: actively running session\n- paused: temporarily suspended session\n- ended: session concluded\n- archived: read-only, retained for transcript access and history"},{"const":"live","description":"Allowed lifecycle states for a live discussion thread.\n\nThis enumeration corresponds to Live.econ_discuss_live_threads.state as documented in the Prisma schema. Valid values are:\n- scheduled: a future session with a planned start\n- waiting: prepared and visible to participants but not yet live\n- live: actively running session\n- paused: temporarily suspended session\n- ended: session concluded\n- archived: read-only, retained for transcript access and history"},{"const":"paused","description":"Allowed lifecycle states for a live discussion thread.\n\nThis enumeration corresponds to Live.econ_discuss_live_threads.state as documented in the Prisma schema. Valid values are:\n- scheduled: a future session with a planned start\n- waiting: prepared and visible to participants but not yet live\n- live: actively running session\n- paused: temporarily suspended session\n- ended: session concluded\n- archived: read-only, retained for transcript access and history"},{"const":"ended","description":"Allowed lifecycle states for a live discussion thread.\n\nThis enumeration corresponds to Live.econ_discuss_live_threads.state as documented in the Prisma schema. Valid values are:\n- scheduled: a future session with a planned start\n- waiting: prepared and visible to participants but not yet live\n- live: actively running session\n- paused: temporarily suspended session\n- ended: session concluded\n- archived: read-only, retained for transcript access and history"},{"const":"archived","description":"Allowed lifecycle states for a live discussion thread.\n\nThis enumeration corresponds to Live.econ_discuss_live_threads.state as documented in the Prisma schema. Valid values are:\n- scheduled: a future session with a planned start\n- waiting: prepared and visible to participants but not yet live\n- live: actively running session\n- paused: temporarily suspended session\n- ended: session concluded\n- archived: read-only, retained for transcript access and history"}],"description":"Allowed lifecycle states for a live discussion thread.\n\nThis enumeration corresponds to Live.econ_discuss_live_threads.state as documented in the Prisma schema. Valid values are:\n- scheduled: a future session with a planned start\n- waiting: prepared and visible to participants but not yet live\n- live: actively running session\n- paused: temporarily suspended session\n- ended: session concluded\n- archived: read-only, retained for transcript access and history"},"IEEconDiscussLiveAccessScope":{"oneOf":[{"const":"public","description":"Allowed access scopes defining who can view/participate in the live thread.\n\nThis enumeration mirrors Live.econ_discuss_live_threads.access_scope in the Prisma schema and is used to enforce visibility and participation policies:\n- public: anyone may view; participation still subject to other flags\n- followers_only: visible to followers of the host\n- topic_subscribers_only: visible to subscribers of related topics\n- invite_only: restricted access by explicit invitation"},{"const":"followers_only","description":"Allowed access scopes defining who can view/participate in the live thread.\n\nThis enumeration mirrors Live.econ_discuss_live_threads.access_scope in the Prisma schema and is used to enforce visibility and participation policies:\n- public: anyone may view; participation still subject to other flags\n- followers_only: visible to followers of the host\n- topic_subscribers_only: visible to subscribers of related topics\n- invite_only: restricted access by explicit invitation"},{"const":"topic_subscribers_only","description":"Allowed access scopes defining who can view/participate in the live thread.\n\nThis enumeration mirrors Live.econ_discuss_live_threads.access_scope in the Prisma schema and is used to enforce visibility and participation policies:\n- public: anyone may view; participation still subject to other flags\n- followers_only: visible to followers of the host\n- topic_subscribers_only: visible to subscribers of related topics\n- invite_only: restricted access by explicit invitation"},{"const":"invite_only","description":"Allowed access scopes defining who can view/participate in the live thread.\n\nThis enumeration mirrors Live.econ_discuss_live_threads.access_scope in the Prisma schema and is used to enforce visibility and participation policies:\n- public: anyone may view; participation still subject to other flags\n- followers_only: visible to followers of the host\n- topic_subscribers_only: visible to subscribers of related topics\n- invite_only: restricted access by explicit invitation"}],"description":"Allowed access scopes defining who can view/participate in the live thread.\n\nThis enumeration mirrors Live.econ_discuss_live_threads.access_scope in the Prisma schema and is used to enforce visibility and participation policies:\n- public: anyone may view; participation still subject to other flags\n- followers_only: visible to followers of the host\n- topic_subscribers_only: visible to subscribers of related topics\n- invite_only: restricted access by explicit invitation"},"IEconDiscussLiveThread.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Live thread identifier.\n\nMaps to Live.econ_discuss_live_threads.id (UUID PK)."},"postId":{"type":"string","format":"uuid","description":"Host post identifier to which this live thread is attached.\n\nDerived from econ_discuss_live_threads.econ_discuss_post_id (unique FK → Articles.econ_discuss_posts.id). Exactly one live thread per post is permitted by schema uniqueness."},"hostUserId":{"type":"string","format":"uuid","description":"Host user identifier for this live thread.\n\nDerived from econ_discuss_live_threads.host_user_id (FK → Actors.econ_discuss_users.id)."},"state":{"$ref":"#/components/schemas/IEEconDiscussLiveThreadState","description":"Lifecycle state of the live thread.\n\nReflects econ_discuss_live_threads.state values (scheduled, waiting, live, paused, ended, archived)."},"expertOnly":{"type":"boolean","description":"Whether participation is restricted to verified experts and staff.\n\nMaps to econ_discuss_live_threads.expert_only (boolean). Reading may remain broader per policy."},"accessScope":{"$ref":"#/components/schemas/IEEconDiscussLiveAccessScope","description":"Access scope for participation/visibility of the live thread.\n\nReflects econ_discuss_live_threads.access_scope values (public, followers_only, topic_subscribers_only, invite_only)."},"scheduledStartAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Planned start time for scheduled rooms (ISO 8601).\n\nMaps to econ_discuss_live_threads.scheduled_start_at (timestamptz)."},"startedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Actual start time when the thread transitions to live (ISO 8601).\n\nMaps to econ_discuss_live_threads.started_at (timestamptz)."},"pausedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the room was paused (ISO 8601), null if not paused.\n\nMaps to econ_discuss_live_threads.paused_at (timestamptz)."},"endedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the room ended (ISO 8601), null if still ongoing.\n\nMaps to econ_discuss_live_threads.ended_at (timestamptz)."},"archivedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the room was archived and made read-only (ISO 8601).\n\nMaps to econ_discuss_live_threads.archived_at (timestamptz)."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of the live thread record (ISO 8601).\n\nMaps to econ_discuss_live_threads.created_at (timestamptz)."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of the live thread record (ISO 8601).\n\nMaps to econ_discuss_live_threads.updated_at (timestamptz)."}},"required":["id","postId","hostUserId","state","expertOnly","accessScope","createdAt","updatedAt"],"description":"Summary view of a live discussion thread attached to a post.\n\nBacked by Live.econ_discuss_live_threads, which stores lifecycle state, access scope, expert-only participation, host user relation, and operational timestamps. This summary omits internal lifecycle fields like deleted_at and surfaces list-friendly attributes appropriate for discovery and status displays."},"IEReputationEventSortBy":{"oneOf":[{"const":"occurred_at","description":"Sort keys for reputation ledger queries (econ_discuss_reputation_events).\n\nAllowed values:\n- occurred_at: time the underlying action happened (recommended default). Maps to econ_discuss_reputation_events.occurred_at.\n- created_at: ledger insertion time. Maps to econ_discuss_reputation_events.created_at.\n- points: numeric delta of the event. Maps to econ_discuss_reputation_events.points."},{"const":"created_at","description":"Sort keys for reputation ledger queries (econ_discuss_reputation_events).\n\nAllowed values:\n- occurred_at: time the underlying action happened (recommended default). Maps to econ_discuss_reputation_events.occurred_at.\n- created_at: ledger insertion time. Maps to econ_discuss_reputation_events.created_at.\n- points: numeric delta of the event. Maps to econ_discuss_reputation_events.points."},{"const":"points","description":"Sort keys for reputation ledger queries (econ_discuss_reputation_events).\n\nAllowed values:\n- occurred_at: time the underlying action happened (recommended default). Maps to econ_discuss_reputation_events.occurred_at.\n- created_at: ledger insertion time. Maps to econ_discuss_reputation_events.created_at.\n- points: numeric delta of the event. Maps to econ_discuss_reputation_events.points."}],"description":"Sort keys for reputation ledger queries (econ_discuss_reputation_events).\n\nAllowed values:\n- occurred_at: time the underlying action happened (recommended default). Maps to econ_discuss_reputation_events.occurred_at.\n- created_at: ledger insertion time. Maps to econ_discuss_reputation_events.created_at.\n- points: numeric delta of the event. Maps to econ_discuss_reputation_events.points."},"IEconDiscussPollQuestionType":{"oneOf":[{"const":"single_choice","description":"Question types as defined by Polls.econ_discuss_polls.question_type in Prisma.\n\nDetermines payload shape and validation for responses:\n- single_choice / multiple_choice / ranking → option selections\n- likert → likert_value within scale_points\n- numeric_estimate → numeric_value within numeric_min/max and numeric_step"},{"const":"multiple_choice","description":"Question types as defined by Polls.econ_discuss_polls.question_type in Prisma.\n\nDetermines payload shape and validation for responses:\n- single_choice / multiple_choice / ranking → option selections\n- likert → likert_value within scale_points\n- numeric_estimate → numeric_value within numeric_min/max and numeric_step"},{"const":"likert","description":"Question types as defined by Polls.econ_discuss_polls.question_type in Prisma.\n\nDetermines payload shape and validation for responses:\n- single_choice / multiple_choice / ranking → option selections\n- likert → likert_value within scale_points\n- numeric_estimate → numeric_value within numeric_min/max and numeric_step"},{"const":"ranking","description":"Question types as defined by Polls.econ_discuss_polls.question_type in Prisma.\n\nDetermines payload shape and validation for responses:\n- single_choice / multiple_choice / ranking → option selections\n- likert → likert_value within scale_points\n- numeric_estimate → numeric_value within numeric_min/max and numeric_step"},{"const":"numeric_estimate","description":"Question types as defined by Polls.econ_discuss_polls.question_type in Prisma.\n\nDetermines payload shape and validation for responses:\n- single_choice / multiple_choice / ranking → option selections\n- likert → likert_value within scale_points\n- numeric_estimate → numeric_value within numeric_min/max and numeric_step"}],"description":"Question types as defined by Polls.econ_discuss_polls.question_type in Prisma.\n\nDetermines payload shape and validation for responses:\n- single_choice / multiple_choice / ranking → option selections\n- likert → likert_value within scale_points\n- numeric_estimate → numeric_value within numeric_min/max and numeric_step"},"IEconDiscussPollVisibilityMode":{"oneOf":[{"const":"hidden_until_close","description":"Visibility mode for poll results as configured in Prisma model econ_discuss_polls.visibility_mode.\n\n- hidden_until_close: Running results are withheld until end_at; results publish after closure.\n- visible_after_vote: Running results are visible only after the viewer has submitted a valid response.\n- always_visible: Running results are visible throughout the poll lifecycle subject to policy.\n\nBusiness policy may restrict certain modes for expert-only polls."},{"const":"visible_after_vote","description":"Visibility mode for poll results as configured in Prisma model econ_discuss_polls.visibility_mode.\n\n- hidden_until_close: Running results are withheld until end_at; results publish after closure.\n- visible_after_vote: Running results are visible only after the viewer has submitted a valid response.\n- always_visible: Running results are visible throughout the poll lifecycle subject to policy.\n\nBusiness policy may restrict certain modes for expert-only polls."},{"const":"always_visible","description":"Visibility mode for poll results as configured in Prisma model econ_discuss_polls.visibility_mode.\n\n- hidden_until_close: Running results are withheld until end_at; results publish after closure.\n- visible_after_vote: Running results are visible only after the viewer has submitted a valid response.\n- always_visible: Running results are visible throughout the poll lifecycle subject to policy.\n\nBusiness policy may restrict certain modes for expert-only polls."}],"description":"Visibility mode for poll results as configured in Prisma model econ_discuss_polls.visibility_mode.\n\n- hidden_until_close: Running results are withheld until end_at; results publish after closure.\n- visible_after_vote: Running results are visible only after the viewer has submitted a valid response.\n- always_visible: Running results are visible throughout the poll lifecycle subject to policy.\n\nBusiness policy may restrict certain modes for expert-only polls."},"IEconDiscussPollOptionSortBy":{"oneOf":[{"const":"position","description":"Sortable columns for poll options.\n\nUsed by list/search endpoints operating over Prisma Polls.econ_discuss_poll_options, which stores option_text, position, and timestamps. Typical sorts:\n- position: deterministic display ordering within a poll\n- created_at: creation chronology (newest/oldest)\n- option_text: alphabetical ordering of the option text"},{"const":"created_at","description":"Sortable columns for poll options.\n\nUsed by list/search endpoints operating over Prisma Polls.econ_discuss_poll_options, which stores option_text, position, and timestamps. Typical sorts:\n- position: deterministic display ordering within a poll\n- created_at: creation chronology (newest/oldest)\n- option_text: alphabetical ordering of the option text"},{"const":"option_text","description":"Sortable columns for poll options.\n\nUsed by list/search endpoints operating over Prisma Polls.econ_discuss_poll_options, which stores option_text, position, and timestamps. Typical sorts:\n- position: deterministic display ordering within a poll\n- created_at: creation chronology (newest/oldest)\n- option_text: alphabetical ordering of the option text"}],"description":"Sortable columns for poll options.\n\nUsed by list/search endpoints operating over Prisma Polls.econ_discuss_poll_options, which stores option_text, position, and timestamps. Typical sorts:\n- position: deterministic display ordering within a poll\n- created_at: creation chronology (newest/oldest)\n- option_text: alphabetical ordering of the option text"},"IEconDiscussPollResponseOption.ISelection.IRanking":{"type":"object","properties":{"optionId":{"type":"string","format":"uuid","description":"Selected option identifier (econ_discuss_poll_options.id) for a ranking response; must belong to the poll owning the response."},"position":{"type":"integer","minimum":1,"description":"Mandatory ranking position for this selection (1..N). Positions must be unique within the response."}},"required":["optionId","position"],"description":"Ranking-specific selection item requiring an explicit position (Prisma: econ_discuss_poll_response_options)."},"IEconDiscussPollResults.IRankingOption":{"type":"object","properties":{"optionId":{"type":"string","format":"uuid","description":"Option identifier (Polls.econ_discuss_poll_options.id)."},"optionText":{"type":"string","description":"Display text for the option (Polls.econ_discuss_poll_options.option_text)."},"firstPlaceCount":{"type":"integer","description":"Number of responses ranking this option in position 1."},"averagePosition":{"type":"number","description":"Average (mean) rank position across eligible responses. Lower is better."},"n":{"type":"integer","description":"Number of eligible responses that ranked this option (may be less than global n if sparse rankings are allowed)."}},"required":["optionId","optionText","firstPlaceCount","averagePosition","n"],"description":"Per-option ranking statistics derived from Polls.econ_discuss_poll_response_options.position for ranking-type polls."},"IELiveThreadOrderBy":{"oneOf":[{"const":"created_at","description":"Sortable columns for Live threads listing.\n\nValues map to Live.econ_discuss_live_threads columns: created_at, updated_at, scheduled_start_at, started_at, ended_at, state, access_scope."},{"const":"updated_at","description":"Sortable columns for Live threads listing.\n\nValues map to Live.econ_discuss_live_threads columns: created_at, updated_at, scheduled_start_at, started_at, ended_at, state, access_scope."},{"const":"scheduled_start_at","description":"Sortable columns for Live threads listing.\n\nValues map to Live.econ_discuss_live_threads columns: created_at, updated_at, scheduled_start_at, started_at, ended_at, state, access_scope."},{"const":"started_at","description":"Sortable columns for Live threads listing.\n\nValues map to Live.econ_discuss_live_threads columns: created_at, updated_at, scheduled_start_at, started_at, ended_at, state, access_scope."},{"const":"ended_at","description":"Sortable columns for Live threads listing.\n\nValues map to Live.econ_discuss_live_threads columns: created_at, updated_at, scheduled_start_at, started_at, ended_at, state, access_scope."},{"const":"state","description":"Sortable columns for Live threads listing.\n\nValues map to Live.econ_discuss_live_threads columns: created_at, updated_at, scheduled_start_at, started_at, ended_at, state, access_scope."},{"const":"access_scope","description":"Sortable columns for Live threads listing.\n\nValues map to Live.econ_discuss_live_threads columns: created_at, updated_at, scheduled_start_at, started_at, ended_at, state, access_scope."}],"description":"Sortable columns for Live threads listing.\n\nValues map to Live.econ_discuss_live_threads columns: created_at, updated_at, scheduled_start_at, started_at, ended_at, state, access_scope."}}}}