import { tags } from "typia";

/**
 * Materialized junction entity representing a single selection for a poll
 * response, as stored in Prisma table econ_discuss_poll_response_options.
 *
 * Includes identifiers, optional ranking position, and audit timestamps.
 * Soft-deleted rows (deleted_at) are excluded from this DTO by design.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussPollResponseOption = {
  /**
   * Primary key of the response-option row
   * (econ_discuss_poll_response_options.id).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key to the poll response
   * (econ_discuss_poll_response_options.econ_discuss_poll_response_id →
   * econ_discuss_poll_responses.id).
   */
  responseId: string & tags.Format<"uuid">;

  /**
   * Foreign key to the chosen option
   * (econ_discuss_poll_response_options.econ_discuss_poll_option_id →
   * econ_discuss_poll_options.id).
   */
  optionId: string & tags.Format<"uuid">;

  /**
   * Ranking order for ranking-type questions
   * (econ_discuss_poll_response_options.position). Null when not applicable.
   */
  position?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * Creation timestamp (econ_discuss_poll_response_options.created_at)
   * recorded as an ISO 8601 string.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last update timestamp (econ_discuss_poll_response_options.updated_at)
   * recorded as an ISO 8601 string.
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace IEconDiscussPollResponseOption {
  /**
   * Summary of a single selection within a response, reflecting the Prisma
   * row from Polls.econ_discuss_poll_response_options.
   *
   * For ranking questions, position carries the ordering; for other types it
   * remains null.
   */
  export type ISummary = {
    /**
     * Primary key of the selection row
     * (econ_discuss_poll_response_options.id).
     *
     * UUID string.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Selected option identifier
     * (econ_discuss_poll_response_options.econ_discuss_poll_option_id).
     *
     * UUID string referencing Polls.econ_discuss_poll_options.id.
     */
    optionId: string & tags.Format<"uuid">;

    /**
     * Ranking position for ranking-type questions
     * (econ_discuss_poll_response_options.position). Null for non-ranking
     * types.
     *
     * Positions are 1..N within a single response for ranking questions.
     */
    position?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Replacement request for a response’s option selections (Prisma:
   * econ_discuss_poll_response_options).
   *
   * Use IByOptionIds for single_choice or multiple_choice polls (supply the
   * exact set of optionIds). Use IBySelections for ranking polls (supply
   * optionId with a mandatory ranking position). Service enforcement comes
   * from econ_discuss_polls (min/max selections, ranking rules) and the
   * junction table econ_discuss_poll_response_options.
   */
  export type IRequest =
    | IEconDiscussPollResponseOption.IRequest.IByOptionIds
    | IEconDiscussPollResponseOption.IRequest.IBySelections;
  export namespace IRequest {
    /**
     * Variant for replacing selections by providing the complete set of
     * optionIds.
     *
     * All IDs must resolve to options belonging to the poll associated with
     * the target post.
     */
    export type IByOptionIds = {
      /**
       * Exact set of option identifiers (econ_discuss_poll_options.id) to
       * assign to the response.
       *
       * Applicable to question types that are option-based without
       * ordering (single_choice, multiple_choice). All IDs must belong to
       * options of the poll attached to the target post
       * (econ_discuss_polls → econ_discuss_poll_options).
       */
      optionIds: (string & tags.Format<"uuid">)[] &
        tags.MinItems<1> &
        tags.UniqueItems;
    };

    /**
     * Variant for replacing selections when the question type is ranking.
     *
     * Each selection requires an optionId and a unique position within the
     * provided set. Items must belong to options of the poll for the target
     * post.
     */
    export type IBySelections = {
      /**
       * Complete ordered selection set for ranking question types. Each
       * item binds one option and its mandatory ranking position (1..N).
       */
      selections: IEconDiscussPollResponseOption.ISelection.IRanking[] &
        tags.MinItems<1>;
    };
  }

  /**
   * Selection item used when adding or replacing response options for a poll
   * response.
   *
   * This schema maps to the Prisma table econ_discuss_poll_response_options
   * by providing the option linkage (econ_discuss_poll_option_id) and, for
   * ranking questions, the optional position. Ownership and poll-context
   * validation are enforced by service logic.
   */
  export type ISelection = {
    /**
     * Selected option identifier referencing Prisma
     * Polls.econ_discuss_poll_options.id.
     *
     * This value must belong to the same poll as the parent response
     * (econ_discuss_poll_responses.econ_discuss_poll_id).
     */
    optionId: string & tags.Format<"uuid">;

    /**
     * Ranking position for ranking-type questions
     * (econ_discuss_poll_response_options.position).
     *
     * For single_choice and multiple_choice questions, this property SHOULD
     * be omitted or set to null.
     */
    position?: (number & tags.Type<"int32">) | null | undefined;
  };
  export namespace ISelection {
    /**
     * Ranking-specific selection item requiring an explicit position
     * (Prisma: econ_discuss_poll_response_options).
     */
    export type IRanking = {
      /**
       * Selected option identifier (econ_discuss_poll_options.id) for a
       * ranking response; must belong to the poll owning the response.
       */
      optionId: string & tags.Format<"uuid">;

      /**
       * Mandatory ranking position for this selection (1..N). Positions
       * must be unique within the response.
       */
      position: number & tags.Type<"int32"> & tags.Minimum<1>;
    };
  }

  /**
   * Append-only request for adding response-option rows
   * (econ_discuss_poll_response_options) to an existing response.
   *
   * This DTO is used by endpoints that add selections incrementally without
   * replacing the entire set.
   */
  export type ICreate = {
    /**
     * One or more selections to append to the existing set for the
     * response.
     *
     * For multiple_choice, ensure total selections do not exceed
     * econ_discuss_polls.max_selections. For ranking, positions must be
     * unique and valid. For single_choice, prefer replacement semantics
     * (use the IRequest variant).
     */
    selections: IEconDiscussPollResponseOption.ISelection[] & tags.MinItems<1>;
  };

  /**
   * Payload to update a respondent’s option selection row
   * (Polls.econ_discuss_poll_response_options) for a given poll response.
   *
   * Supports switching the option (optionId) and/or its ranking position
   * (position) where allowed by econ_discuss_polls.allow_vote_change and
   * within open poll windows. Does not manage scalar values for
   * likert/numeric types.
   */
  export type IUpdate = {
    /**
     * Change the selected option to this option ID
     * (Polls.econ_discuss_poll_options.id). Null to keep unchanged.
     *
     * Applicable to single_choice and multiple_choice questions.
     */
    optionId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Ranking position to assign for ranking-type questions (1..N). Null to
     * keep unchanged.
     *
     * Applies only when the poll’s question_type is ranking.
     */
    position?: (number & tags.Type<"int32">) | null | undefined;
  };
}
