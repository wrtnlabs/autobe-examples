import { tags } from "typia";

import { IEconDiscussPollOptionSortBy } from "./IEconDiscussPollOptionSortBy";
import { IEOrderDirection } from "./IEOrderDirection";

/**
 * Poll option entity returned by read endpoints.
 *
 * Maps to Prisma model econ_discuss_poll_options. Exposes public-facing fields
 * only (id, parent pollId, text, position, and timestamps). Lifecycle markers
 * like deleted_at are intentionally omitted from public responses.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussPollOption = {
  /**
   * Unique identifier of the poll option.
   *
   * Prisma reference: econ_discuss_poll_options.id — UUID primary key.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the parent poll that owns this option.
   *
   * Prisma reference: econ_discuss_poll_options.econ_discuss_poll_id — FK to
   * econ_discuss_polls.id.
   */
  pollId: string & tags.Format<"uuid">;

  /**
   * Display text for the option, unique within a poll.
   *
   * Prisma reference: econ_discuss_poll_options.option_text — per-poll unique
   * label.
   */
  text: string & tags.MinLength<1>;

  /**
   * Display order index within the poll (zero- or one-based per policy). Must
   * be unique per poll.
   *
   * Prisma reference: econ_discuss_poll_options.position — ordering integer.
   */
  position: number & tags.Type<"int32">;

  /**
   * Creation timestamp of this option (UTC, ISO 8601).
   *
   * Prisma reference: econ_discuss_poll_options.created_at — timestamptz.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last update timestamp of this option (UTC, ISO 8601).
   *
   * Prisma reference: econ_discuss_poll_options.updated_at — timestamptz.
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace IEconDiscussPollOption {
  /**
   * Create DTO for adding a new poll option to a poll.
   *
   * Backed by Prisma model econ_discuss_poll_options. Requires option text;
   * position may be provided or assigned by server logic. Uniqueness per poll
   * is enforced over (option_text) and (position).
   */
  export type ICreate = {
    /**
     * Display text for the new option. Must be unique within the parent
     * poll.
     *
     * Prisma reference: econ_discuss_poll_options.option_text — unique per
     * (poll, option_text).
     */
    text: string & tags.MinLength<1>;

    /**
     * Display order index for this option within the poll. Must be unique
     * in the poll.
     *
     * Prisma reference: econ_discuss_poll_options.position — unique per
     * (poll, position).
     */
    position?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Request DTO for searching and paginating poll options.
   *
   * Backed by Prisma model econ_discuss_poll_options. Supports text search on
   * option_text, sorted retrieval (position or recency), and page controls
   * for efficient listing in admin or authoring tools.
   */
  export type IRequest = {
    /** Page number for pagination (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records per page. */
    pageSize?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Keyword to search within option text
     * (econ_discuss_poll_options.option_text).
     */
    q?: string | undefined;

    /** Sort field to order option results. */
    sort_by?: IEconDiscussPollOptionSortBy | undefined;

    /** Sorting direction to apply to the selected sort field. */
    order?: IEOrderDirection | undefined;
  };

  /**
   * Partial update for poll options stored in econ_discuss_poll_options.
   * Supports updating option_text and/or position while respecting per-poll
   * uniqueness.
   */
  export type IUpdate = {
    /**
     * New display text for the option
     * (econ_discuss_poll_options.option_text). Must be unique per poll.
     */
    optionText?: (string & tags.MinLength<1> & tags.MaxLength<50>) | undefined;

    /**
     * Display order within the poll (econ_discuss_poll_options.position).
     * Must be unique per poll.
     */
    position?: (number & tags.Type<"int32"> & tags.Minimum<0>) | undefined;
  };

  /**
   * Summary of a poll answer option.
   *
   * Backed by Polls.econ_discuss_poll_options, which stores option text and
   * deterministic ordering (position) under a parent poll. This summary omits
   * internal lifecycle fields (deleted_at) and focuses on list-friendly
   * attributes.
   */
  export type ISummary = {
    /**
     * Poll option identifier.
     *
     * Maps to Polls.econ_discuss_poll_options.id (UUID PK).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Parent poll identifier.
     *
     * Derived from econ_discuss_poll_options.econ_discuss_poll_id (FK →
     * Polls.econ_discuss_polls.id).
     */
    pollId: string & tags.Format<"uuid">;

    /**
     * Display text for the option.
     *
     * Maps to econ_discuss_poll_options.option_text. Unique within the
     * parent poll.
     */
    text: string;

    /**
     * Display ordering index within the poll.
     *
     * Maps to econ_discuss_poll_options.position (integer). Unique within
     * the parent poll to ensure deterministic ordering.
     */
    position: number & tags.Type<"int32">;

    /**
     * Option creation timestamp (ISO 8601).
     *
     * Maps to econ_discuss_poll_options.created_at (timestamptz).
     */
    createdAt: string & tags.Format<"date-time">;

    /**
     * Last update timestamp for the option (ISO 8601).
     *
     * Maps to econ_discuss_poll_options.updated_at (timestamptz).
     */
    updatedAt: string & tags.Format<"date-time">;
  };
}
