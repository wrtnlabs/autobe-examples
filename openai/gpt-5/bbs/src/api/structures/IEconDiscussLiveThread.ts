import { tags } from "typia";

import { IELiveThreadState } from "./IELiveThreadState";
import { IELiveThreadAccessScope } from "./IELiveThreadAccessScope";
import { IELiveThreadOrderBy } from "./IELiveThreadOrderBy";
import { IEOrderDirection } from "./IEOrderDirection";
import { IEEconDiscussLiveThreadState } from "./IEEconDiscussLiveThreadState";
import { IEEconDiscussLiveAccessScope } from "./IEEconDiscussLiveAccessScope";

/**
 * Live discussion thread resource attached 1:1 to a post, reflecting lifecycle
 * state, access controls, scheduling, and timestamps.
 *
 * Backed by Live.econ_discuss_live_threads in Prisma. Security note: deleted_at
 * is system-managed and omitted from response DTOs.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussLiveThread = {
  /**
   * Primary identifier of the live thread.
   *
   * Maps to Live.econ_discuss_live_threads.id (UUID PK).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the host post to which this live thread is attached.
   *
   * Maps to Live.econ_discuss_live_threads.econ_discuss_post_id (unique per
   * post).
   */
  postId: string & tags.Format<"uuid">;

  /**
   * Identifier of the host user who can start/pause/end this live thread.
   *
   * Maps to Live.econ_discuss_live_threads.host_user_id (FK →
   * Actors.econ_discuss_users.id).
   */
  hostUserId: string & tags.Format<"uuid">;

  /**
   * Lifecycle state of the live thread (scheduled, waiting, live, paused,
   * ended, archived).
   *
   * Backed by Live.econ_discuss_live_threads.state.
   */
  state: IELiveThreadState;

  /**
   * Whether participation is restricted to verified experts and staff.
   *
   * Maps to Live.econ_discuss_live_threads.expert_only.
   */
  expertOnly: boolean;

  /**
   * Access scope controlling visibility/participation for the live
   * discussion.
   *
   * Maps to Live.econ_discuss_live_threads.access_scope.
   */
  accessScope: IELiveThreadAccessScope;

  /**
   * Planned start time for scheduled rooms (ISO 8601).
   *
   * Maps to Live.econ_discuss_live_threads.scheduled_start_at.
   */
  scheduledStartAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Actual time when the live thread transitioned to live (ISO 8601).
   *
   * Maps to Live.econ_discuss_live_threads.started_at.
   */
  startedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when the live thread was paused (ISO 8601).
   *
   * Maps to Live.econ_discuss_live_threads.paused_at.
   */
  pausedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when the live thread ended (ISO 8601).
   *
   * Maps to Live.econ_discuss_live_threads.ended_at.
   */
  endedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp when the live thread was archived (ISO 8601).
   *
   * Maps to Live.econ_discuss_live_threads.archived_at.
   */
  archivedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Optional slow-mode interval limiting how frequently a participant may
   * post (seconds).
   *
   * Maps to Live.econ_discuss_live_threads.slow_mode_interval_seconds.
   */
  slowModeIntervalSeconds?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * Creation timestamp of the live thread entity (ISO 8601).
   *
   * Maps to Live.econ_discuss_live_threads.created_at.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last update timestamp of the live thread entity (ISO 8601).
   *
   * Maps to Live.econ_discuss_live_threads.updated_at.
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace IEconDiscussLiveThread {
  /**
   * Create DTO for a live discussion thread.
   *
   * Server-managed fields not accepted: id, postId (econ_discuss_post_id),
   * hostUserId, createdAt, updatedAt. These derive from route/auth context or
   * the system clock.
   */
  export type ICreate = {
    /**
     * Initial lifecycle state for the new live thread. Typical values at
     * creation are "scheduled" or "waiting"/"live" depending on workflow.
     */
    state?: IELiveThreadState | undefined;

    /**
     * Whether participation is restricted to verified experts and staff for
     * this thread. Defaults to false when omitted.
     */
    expertOnly?: boolean | undefined;

    /**
     * Visibility/participation scope for the thread. Defaults to "public"
     * when omitted.
     */
    accessScope?: IELiveThreadAccessScope | undefined;

    /**
     * Planned start time for a scheduled session (ISO 8601). Null when not
     * scheduled.
     */
    scheduledStartAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional slow mode interval in seconds to rate-limit participant
     * messages. Null disables slow mode.
     */
    slowModeIntervalSeconds?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Update DTO for a live discussion thread.
   *
   * All fields optional; server validates legal transitions and permissions.
   * System-managed identifiers/timestamps are excluded.
   */
  export type IUpdate = {
    /**
     * Requested lifecycle state transition (scheduled, waiting, live,
     * paused, ended, archived). Server sets corresponding timestamps.
     */
    state?: IELiveThreadState | undefined;

    /** Toggle expert-only participation gating for the thread. */
    expertOnly?: boolean | undefined;

    /** Update access scope controlling visibility/participation. */
    accessScope?: IELiveThreadAccessScope | undefined;

    /** Adjust planned start time (ISO 8601). Use null to clear scheduling. */
    scheduledStartAt?: (string & tags.Format<"date-time">) | null | undefined;

    /** Adjust slow-mode interval in seconds. Use null to disable. */
    slowModeIntervalSeconds?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Search/filter DTO for listing live discussion threads.
   *
   * Maps to Live.econ_discuss_live_threads columns for filtering/sorting
   * while avoiding direct user_id filters. Pagination fields follow the
   * platform’s standard IRequest pattern (page/limit).
   */
  export type IRequest = {
    /**
     * Page number for pagination (1-based). When null, server defaults
     * apply.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum records per page. When null, server defaults apply. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Optional free-text query for provider-defined search (e.g., by host
     * handle or post context).
     */
    q?: string | undefined;

    /** Filter by one or more lifecycle states. */
    state?: IELiveThreadState[] | undefined;

    /** Filter by expert-only flag (true = expert-only threads). */
    expertOnly?: boolean | undefined;

    /** Filter by one or more access scopes. */
    accessScope?: IELiveThreadAccessScope[] | undefined;

    /**
     * If true, restrict results to threads hosted by the authenticated user
     * (server derives host from auth context). Avoids direct user_id
     * filters in public DTOs.
     */
    myThreadsOnly?: boolean | undefined;

    /**
     * Filter by host post id
     * (Live.econ_discuss_live_threads.econ_discuss_post_id).
     */
    postId?: (string & tags.Format<"uuid">) | undefined;

    /** Lower bound (inclusive) for scheduled_start_at (ISO 8601). */
    scheduledStartFrom?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound (inclusive) for scheduled_start_at (ISO 8601). */
    scheduledStartTo?: (string & tags.Format<"date-time">) | undefined;

    /** Lower bound (inclusive) for started_at (ISO 8601). */
    startedFrom?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound (inclusive) for started_at (ISO 8601). */
    startedTo?: (string & tags.Format<"date-time">) | undefined;

    /** Lower bound (inclusive) for ended_at (ISO 8601). */
    endedFrom?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound (inclusive) for ended_at (ISO 8601). */
    endedTo?: (string & tags.Format<"date-time">) | undefined;

    /** Sort field to order results by live thread columns. */
    orderBy?: IELiveThreadOrderBy | undefined;

    /** Sort direction (asc or desc). */
    orderDirection?: IEOrderDirection | undefined;
  };

  /**
   * Summary view of a live discussion thread attached to a post.
   *
   * Backed by Live.econ_discuss_live_threads, which stores lifecycle state,
   * access scope, expert-only participation, host user relation, and
   * operational timestamps. This summary omits internal lifecycle fields like
   * deleted_at and surfaces list-friendly attributes appropriate for
   * discovery and status displays.
   */
  export type ISummary = {
    /**
     * Live thread identifier.
     *
     * Maps to Live.econ_discuss_live_threads.id (UUID PK).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Host post identifier to which this live thread is attached.
     *
     * Derived from econ_discuss_live_threads.econ_discuss_post_id (unique
     * FK → Articles.econ_discuss_posts.id). Exactly one live thread per
     * post is permitted by schema uniqueness.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Host user identifier for this live thread.
     *
     * Derived from econ_discuss_live_threads.host_user_id (FK →
     * Actors.econ_discuss_users.id).
     */
    hostUserId: string & tags.Format<"uuid">;

    /**
     * Lifecycle state of the live thread.
     *
     * Reflects econ_discuss_live_threads.state values (scheduled, waiting,
     * live, paused, ended, archived).
     */
    state: IEEconDiscussLiveThreadState;

    /**
     * Whether participation is restricted to verified experts and staff.
     *
     * Maps to econ_discuss_live_threads.expert_only (boolean). Reading may
     * remain broader per policy.
     */
    expertOnly: boolean;

    /**
     * Access scope for participation/visibility of the live thread.
     *
     * Reflects econ_discuss_live_threads.access_scope values (public,
     * followers_only, topic_subscribers_only, invite_only).
     */
    accessScope: IEEconDiscussLiveAccessScope;

    /**
     * Planned start time for scheduled rooms (ISO 8601).
     *
     * Maps to econ_discuss_live_threads.scheduled_start_at (timestamptz).
     */
    scheduledStartAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Actual start time when the thread transitions to live (ISO 8601).
     *
     * Maps to econ_discuss_live_threads.started_at (timestamptz).
     */
    startedAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the room was paused (ISO 8601), null if not paused.
     *
     * Maps to econ_discuss_live_threads.paused_at (timestamptz).
     */
    pausedAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the room ended (ISO 8601), null if still ongoing.
     *
     * Maps to econ_discuss_live_threads.ended_at (timestamptz).
     */
    endedAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the room was archived and made read-only (ISO 8601).
     *
     * Maps to econ_discuss_live_threads.archived_at (timestamptz).
     */
    archivedAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Creation timestamp of the live thread record (ISO 8601).
     *
     * Maps to econ_discuss_live_threads.created_at (timestamptz).
     */
    createdAt: string & tags.Format<"date-time">;

    /**
     * Last update timestamp of the live thread record (ISO 8601).
     *
     * Maps to econ_discuss_live_threads.updated_at (timestamptz).
     */
    updatedAt: string & tags.Format<"date-time">;
  };
}
