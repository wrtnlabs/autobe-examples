import { tags } from "typia";

import { IEEconDiscussPollResponseStatus } from "./IEEconDiscussPollResponseStatus";
import { IEconDiscussPollResponseOption } from "./IEconDiscussPollResponseOption";
import { IEPollQuestionType } from "./IEPollQuestionType";
import { IESortOrder } from "./IESortOrder";

/**
 * Poll response entity assembled from the Prisma table
 * Polls.econ_discuss_poll_responses and, for option-based questions, linked
 * rows in econ_discuss_poll_response_options.
 *
 * Includes lifecycle and type-specific fields (likertValue, numericValue) and a
 * normalized selections array for choices/ranking. Sensitive internals are not
 * exposed here.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussPollResponse = {
  /**
   * Primary key of the response (econ_discuss_poll_responses.id).
   *
   * UUID string.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key to the parent poll
   * (econ_discuss_poll_responses.econ_discuss_poll_id).
   *
   * UUID string referencing Polls.econ_discuss_polls.id (one poll per post).
   */
  pollId: string & tags.Format<"uuid">;

  /**
   * Respondent user's identifier
   * (econ_discuss_poll_responses.econ_discuss_user_id).
   *
   * This value may be omitted from certain public views by policy; it is
   * included here for owner/admin contexts.
   */
  userId: string & tags.Format<"uuid">;

  /**
   * Lifecycle status mapped from econ_discuss_poll_responses.status.
   *
   * Used by integrity and privacy logic.
   */
  status: IEEconDiscussPollResponseStatus;

  /**
   * Likert scale selection for Likert-type polls
   * (econ_discuss_poll_responses.likert_value).
   *
   * Null for non-Likert question types or when not set.
   */
  likertValue?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * Numeric estimate for numeric_estimate polls
   * (econ_discuss_poll_responses.numeric_value).
   *
   * Null for non-numeric question types or when not set.
   */
  numericValue?: number | null | undefined;

  /**
   * Timestamp when the respondent withdrew their vote
   * (econ_discuss_poll_responses.withdrawn_at).
   *
   * Null if not withdrawn.
   */
  withdrawnAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Creation timestamp of the response
   * (econ_discuss_poll_responses.created_at).
   *
   * ISO 8601 date-time.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last update timestamp of the response
   * (econ_discuss_poll_responses.updated_at).
   *
   * ISO 8601 date-time.
   */
  updatedAt: string & tags.Format<"date-time">;

  /**
   * Selected options for option-based question types, assembled from
   * econ_discuss_poll_response_options.
   *
   * Empty array for scalar-only question types (likert, numeric_estimate).
   */
  selections: IEconDiscussPollResponseOption.ISummary[];
};
export namespace IEconDiscussPollResponse {
  /**
   * Request body to submit a poll response. Shape varies by question type
   * (econ_discuss_polls.question_type).
   *
   * The discriminator property questionType selects the appropriate variant.
   * Eligibility and window checks (expert_only, allow_vote_change,
   * start_at/end_at, reputation/age floors) are enforced server-side per
   * Polls.econ_discuss_polls.
   */
  export type ICreate =
    | IEconDiscussPollResponse.ICreate.ISingleChoice
    | IEconDiscussPollResponse.ICreate.IMultipleChoice
    | IEconDiscussPollResponse.ICreate.IRanking
    | IEconDiscussPollResponse.ICreate.ILikert
    | IEconDiscussPollResponse.ICreate.INumericEstimate;
  export namespace ICreate {
    /**
     * Create payload for single_choice polls.
     *
     * Select exactly one option by its UUID (econ_discuss_poll_options.id).
     *
     * QuestionType must equal "single_choice".
     */
    export type ISingleChoice = {
      /** Must be "single_choice" for this variant. */
      questionType: IEPollQuestionType;

      /**
       * Chosen option identifier for the single-choice poll.
       *
       * Must reference an existing econ_discuss_poll_options.id for the
       * post's poll.
       */
      optionId: string & tags.Format<"uuid">;
    };

    /**
     * Create payload for multiple_choice polls.
     *
     * Provide one or more optionIds referencing
     * econ_discuss_poll_options.id.
     *
     * QuestionType must equal "multiple_choice".
     */
    export type IMultipleChoice = {
      /** Must be "multiple_choice" for this variant. */
      questionType: IEPollQuestionType;

      /**
       * Array of selected option identifiers.
       *
       * Must satisfy min_selections/max_selections configured in
       * econ_discuss_polls.
       */
      optionIds: (string & tags.Format<"uuid">)[] & tags.MinItems<1>;
    };

    /**
     * Create payload for ranking polls.
     *
     * Supply the exact set of ranked options via rankings, each with an
     * explicit 1..N position.
     *
     * QuestionType must equal "ranking".
     */
    export type IRanking = {
      /** Must be "ranking" for this variant. */
      questionType: IEPollQuestionType;

      /**
       * Complete ranked list of options with positions.
       *
       * Positions must be unique and within 1..N for the provided set.
       */
      rankings: IEconDiscussPollResponse.IRankingItem[] & tags.MinItems<1>;
    };

    /**
     * Create payload for likert polls.
     *
     * Provide an integer likertValue that conforms to the poll's scale
     * configuration.
     *
     * QuestionType must equal "likert".
     */
    export type ILikert = {
      /** Must be "likert" for this variant. */
      questionType: IEPollQuestionType;

      /**
       * Selected Likert value.
       *
       * Must be within the configured scale points
       * (econ_discuss_polls.scale_points).
       */
      likertValue: number & tags.Type<"int32">;
    };

    /**
     * Create payload variant for numeric_estimate poll responses.
     *
     * Applies when econ_discuss_polls.question_type is numeric_estimate and
     * enforces discriminator via const.
     */
    export type INumericEstimate = {
      /**
       * Discriminator for numeric estimate responses. Must be exactly
       * "numeric_estimate" as per econ_discuss_polls.question_type.
       */
      questionType: "numeric_estimate";

      /**
       * Numeric estimate value supplied by the respondent.
       *
       * Service enforces econ_discuss_polls.numeric_min ≤ numericValue ≤
       * numeric_max and rounding to numeric_step if configured.
       */
      numericValue: number;
    };
  }

  /**
   * Ranking item representing one option and its 1..N position for
   * ranking-type questions.
   *
   * Maps to selection rows in econ_discuss_poll_response_options with the
   * position column set.
   */
  export type IRankingItem = {
    /**
     * Selected option identifier (econ_discuss_poll_options.id) included in
     * the ranking.
     */
    optionId: string & tags.Format<"uuid">;

    /**
     * Position for this option within the ranked list (1..N).
     *
     * Positions must be unique within the response.
     */
    position: number & tags.Type<"int32"> & tags.Minimum<1>;
  };

  /**
   * General/member request DTO for searching poll responses.
   *
   * Security: does not allow direct user ID filtering. Use the admin-only DTO
   * for governance respondent scoping.
   */
  export type IRequest = {
    /** Pagination page (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Page size. Providers enforce an upper bound (e.g., 200). */
    pageSize?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * Filter by response lifecycle status (active, withdrawn, quarantined,
     * invalidated).
     */
    statuses?: IEEconDiscussPollResponseStatus[] | undefined;

    /** Lower bound for econ_discuss_poll_responses.created_at (ISO 8601). */
    dateFrom?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound for econ_discuss_poll_responses.created_at (ISO 8601). */
    dateTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort key mapped to econ_discuss_poll_responses columns: created_at,
     * updated_at, or status.
     */
    sortBy?: "created_at" | "updated_at" | "status" | undefined;

    /** Sort direction (asc or desc). */
    sortOrder?: IESortOrder | undefined;
  };

  /**
   * Update DTO for econ_discuss_poll_responses supporting status changes and
   * scalar value edits for Likert/Numeric types.
   */
  export type IUpdate = {
    /**
     * Lifecycle status for the response. Service enforces valid transitions
     * by role and poll state.
     */
    status?: IEEconDiscussPollResponseStatus | undefined;

    /**
     * Likert-scale selection for likert questions
     * (econ_discuss_polls.question_type = likert). Must be within poll
     * scale. Null clears if permitted.
     */
    likertValue?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Numeric estimate for numeric_estimate questions. Must satisfy
     * configured bounds/step. Null clears if permitted.
     */
    numericValue?: number | null | undefined;
  };
}
