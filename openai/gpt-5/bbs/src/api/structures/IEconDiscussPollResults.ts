import { tags } from "typia";

import { IEQuestionType } from "./IEQuestionType";
import { IEVisibilityMode } from "./IEVisibilityMode";

/**
 * Aggregated, privacy-preserving poll results computed from
 * Polls.econ_discuss_polls, Polls.econ_discuss_poll_options,
 * Polls.econ_discuss_poll_responses, and
 * Polls.econ_discuss_poll_response_options.
 *
 * Contains per-type aggregates (options, likert, numeric, ranking) and optional
 * segments while excluding quarantined/invalidated responses per integrity
 * policy.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussPollResults = {
  /**
   * Identifier of the poll (Polls.econ_discuss_polls.id) whose results are
   * being returned.
   */
  pollId: string & tags.Format<"uuid">;

  /**
   * Identifier of the host post (Articles.econ_discuss_posts.id) associated
   * one-to-one with the poll.
   */
  postId: string & tags.Format<"uuid">;

  /** Poll prompt text (Polls.econ_discuss_polls.question). */
  question: string;

  /**
   * Poll question type as configured in
   * Polls.econ_discuss_polls.question_type.
   */
  questionType: IEQuestionType;

  /**
   * Poll results visibility mode derived from
   * Polls.econ_discuss_polls.visibility_mode.
   */
  visibilityMode?: IEVisibilityMode | undefined;

  /**
   * Whether participation is restricted to verified experts and staff per
   * Polls.econ_discuss_polls.expert_only.
   */
  expertOnly?: boolean | undefined;

  /**
   * Count of eligible responses included in these aggregates (excludes
   * quarantined/invalidated per policy).
   */
  totalResponses: number & tags.Type<"int32">;

  /**
   * Timestamp when aggregates were computed. Provided in ISO 8601. Not
   * persisted in Prisma.
   */
  computedAt: string & tags.Format<"date-time">;

  /**
   * Per-option aggregates for single_choice, multiple_choice, and ranking
   * types.
   *
   * Null for Likert and numeric_estimate.
   */
  options?: IEconDiscussPollResults.IOption[] | null | undefined;

  /** Likert distribution for likert-type polls; null for other types. */
  likert?: IEconDiscussPollResults.ILikert | null | undefined;

  /** Summary statistics for numeric_estimate polls; null for other types. */
  numeric?: IEconDiscussPollResults.INumericSummary | null | undefined;

  /** Ranking summary for ranking-type polls; null for other types. */
  ranking?: IEconDiscussPollResults.IRankingSummary | null | undefined;

  /**
   * Optional segmented aggregates (e.g., experts vs general). Only populated
   * when privacy thresholds are satisfied and requested by the
   * client/policy.
   */
  segments?: IEconDiscussPollResults.ISegment[] | null | undefined;
};
export namespace IEconDiscussPollResults {
  /**
   * Per-option aggregate used in results for single_choice, multiple_choice,
   * and ranking-type summaries.
   *
   * Data derived from Polls.econ_discuss_poll_response_options joined to
   * Polls.econ_discuss_poll_options with response-level eligibility applied.
   */
  export type IOption = {
    /**
     * Option identifier (Polls.econ_discuss_poll_options.id) included in
     * this aggregate row.
     */
    optionId: string & tags.Format<"uuid">;

    /**
     * Display text of the option
     * (Polls.econ_discuss_poll_options.option_text) captured at aggregation
     * time.
     *
     * Note: The authoritative text is in the options table; this field is
     * provided for convenience in result rendering.
     */
    optionText: string;

    /**
     * Number of eligible responses selecting this option after policy
     * filters.
     */
    count: number & tags.Type<"int32">;

    /**
     * Share of eligible responses selecting this option, expressed as a
     * percentage (0–100) with provider-defined precision.
     */
    percent: number;
  };

  /**
   * Likert distribution aggregates computed for likert-type polls.
   *
   * Computed from Polls.econ_discuss_poll_responses.likert_value constrained
   * by Polls.econ_discuss_polls.scale_points and endpoint labels.
   */
  export type ILikert = {
    /**
     * Number of scale points configured for the poll (commonly 5 or 7).
     * Mirrors Polls.econ_discuss_polls.scale_points.
     */
    scalePoints: number & tags.Type<"int32">;

    /**
     * Label for the minimum endpoint
     * (Polls.econ_discuss_polls.scale_min_label). May be null if not
     * configured.
     */
    minLabel?: string | null | undefined;

    /**
     * Label for the maximum endpoint
     * (Polls.econ_discuss_polls.scale_max_label). May be null if not
     * configured.
     */
    maxLabel?: string | null | undefined;

    /** Optional midpoint label (Polls.econ_discuss_polls.scale_mid_label). */
    midLabel?: string | null | undefined;

    /**
     * Distribution counts per ordinal point (index 1..scalePoints). Values
     * exclude quarantined/invalidated responses and reflect integrity
     * policy.
     */
    counts: (number & tags.Type<"int32">)[] & tags.MinItems<1>;
  };

  /**
   * Summary statistics for numeric_estimate question type.
   *
   * Values are computed from Polls.econ_discuss_poll_responses.numeric_value
   * within bounds configured on Polls.econ_discuss_polls (numeric_min,
   * numeric_max, numeric_step).
   */
  export type INumericSummary = {
    /** Number of eligible numeric responses included. */
    n: number & tags.Type<"int32">;

    /** Arithmetic mean of numeric responses. */
    mean: number;

    /** Median of numeric responses. */
    median: number;

    /** Standard deviation of numeric responses. */
    stdDev: number;

    /** Interquartile range (Q3 − Q1). */
    iqr: number;

    /** Minimum observed value within the eligible set. */
    min: number;

    /** Maximum observed value within the eligible set. */
    max: number;
  };

  /**
   * Ranking aggregation for ranking-type polls.
   *
   * Computed from Polls.econ_discuss_poll_response_options (position per
   * option) joined to Polls.econ_discuss_poll_options with integrity and
   * eligibility filters applied.
   */
  export type IRankingSummary = {
    /** Total eligible responses considered in ranking aggregates. */
    n: number & tags.Type<"int32">;

    /**
     * Ranking statistics per option sorted by rank quality (e.g.,
     * firstPlaceCount/averagePosition).
     */
    options: IEconDiscussPollResults.IRankingOption[];
  };

  /**
   * Privacy-preserving segmented aggregates (e.g., role- or domain-based),
   * computed only when segment sizes satisfy k-anonymity thresholds.
   *
   * Segments are derived from role/badge relations:
   * Actors.econ_discuss_verified_experts and
   * Actors.econ_discuss_expert_domain_badges joined to
   * Topics.econ_discuss_topics.
   */
  export type ISegment = {
    /**
     * Machine-readable segment code (e.g., "expert", "general", or a topic
     * code for expertise_domain).
     */
    code: string;

    /** Human-readable segment label for display (e.g., "Verified Experts"). */
    label: string;

    /**
     * Number of eligible responses in this segment (after integrity and
     * policy filters).
     */
    totalResponses: number & tags.Type<"int32">;

    /**
     * Per-option aggregates limited to this segment. Present for
     * option-based question types; null otherwise.
     */
    options?: IEconDiscussPollResults.IOption[] | null | undefined;

    /**
     * Likert distribution limited to this segment for Likert-type polls;
     * null otherwise.
     */
    likert?: IEconDiscussPollResults.ILikert | null | undefined;

    /**
     * Numeric statistics limited to this segment for numeric_estimate
     * polls; null otherwise.
     */
    numeric?: IEconDiscussPollResults.INumericSummary | null | undefined;

    /**
     * Ranking summary limited to this segment for ranking-type polls; null
     * otherwise.
     */
    ranking?: IEconDiscussPollResults.IRankingSummary | null | undefined;
  };

  /**
   * Per-option ranking statistics derived from
   * Polls.econ_discuss_poll_response_options.position for ranking-type
   * polls.
   */
  export type IRankingOption = {
    /** Option identifier (Polls.econ_discuss_poll_options.id). */
    optionId: string & tags.Format<"uuid">;

    /**
     * Display text for the option
     * (Polls.econ_discuss_poll_options.option_text).
     */
    optionText: string;

    /** Number of responses ranking this option in position 1. */
    firstPlaceCount: number & tags.Type<"int32">;

    /**
     * Average (mean) rank position across eligible responses. Lower is
     * better.
     */
    averagePosition: number;

    /**
     * Number of eligible responses that ranked this option (may be less
     * than global n if sparse rankings are allowed).
     */
    n: number & tags.Type<"int32">;
  };
}
