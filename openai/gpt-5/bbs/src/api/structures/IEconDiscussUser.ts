import { tags } from "typia";

import { IEEconDiscussUserSortBy } from "./IEEconDiscussUserSortBy";
import { IESortOrder } from "./IESortOrder";

/**
 * Public-facing user entity built primarily from Actors.econ_discuss_users with
 * security filtering applied.
 *
 * This DTO intentionally omits confidential fields from the Prisma model such
 * as password_hash, mfa_secret, mfa_recovery_codes, and the email value itself.
 * It surfaces safe identity and preference attributes (display name, avatar
 * URI, timezone, locale), verification flags (emailVerified, mfaEnabled), a
 * computed expertise indicator (isExpertVerified), and audit timestamps. All
 * timestamps are serialized as ISO 8601 strings and UUIDs follow standard
 * formatting.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussUser = {
  /**
   * Unique identifier of the user account.
   *
   * Maps to Actors.econ_discuss_users.id (UUID primary key).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Publicly visible display name/handle for the account.
   *
   * Backed by Actors.econ_discuss_users.display_name as described in the
   * Prisma schema.
   */
  displayName: string;

  /**
   * Optional avatar image URI.
   *
   * Reflects Actors.econ_discuss_users.avatar_uri which stores a URI
   * (application validates length/format).
   */
  avatarUri?: (string & tags.Format<"uri">) | undefined;

  /**
   * Optional IANA time zone identifier used for notifications, digests, and
   * scheduling (e.g., "Asia/Seoul").
   *
   * Backed by Actors.econ_discuss_users.timezone.
   */
  timezone?: string | undefined;

  /**
   * Optional preferred locale (e.g., "en-US") used for UI and communications.
   *
   * Backed by Actors.econ_discuss_users.locale.
   */
  locale?: string | undefined;

  /**
   * Indicates whether the account’s email has been verified.
   *
   * Derived from Actors.econ_discuss_users.email_verified. Exposed as a
   * boolean flag only; the email address itself is not returned for privacy.
   */
  emailVerified: boolean;

  /**
   * Indicates whether multi‑factor authentication is enabled for this
   * account.
   *
   * Reflects Actors.econ_discuss_users.mfa_enabled. MFA secrets and recovery
   * codes are never exposed.
   */
  mfaEnabled: boolean;

  /**
   * Computed indicator that the user holds at least one active expert domain
   * badge.
   *
   * Derived by the presence of a related row in
   * Actors.econ_discuss_verified_experts and/or active entries in
   * Actors.econ_discuss_expert_domain_badges joined through
   * Topics.econ_discuss_topics. This field is computed by the service and not
   * stored directly in the user table.
   */
  isExpertVerified: boolean;

  /**
   * Account creation timestamp.
   *
   * Maps to Actors.econ_discuss_users.created_at (timestamptz). Returned as
   * an ISO 8601 string.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last account update timestamp.
   *
   * Maps to Actors.econ_discuss_users.updated_at (timestamptz). Returned as
   * an ISO 8601 string.
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace IEconDiscussUser {
  /**
   * Request body for advanced user/followee searches.
   *
   * Intended for listing accounts a user follows or general user directory
   * queries. Supports pagination, text search, optional expert-only filter,
   * and sorting.
   */
  export type IRequest = {
    /** Page number (1-based). */
    page: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Page size (upper-bounded by service policy). */
    pageSize: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>;

    /**
     * Optional free-text search against econ_discuss_users.display_name for
     * followee discovery.
     */
    q?: string | null | undefined;

    /**
     * If true, restrict results to users with a verified expert assignment
     * (via econ_discuss_verified_experts /
     * econ_discuss_expert_domain_badges).
     */
    isExpertOnly?: boolean | null | undefined;

    /** Sort field for followee/user listing. */
    sortBy?: IEEconDiscussUserSortBy | null | undefined;

    /** Sort direction (asc/desc). */
    order?: IESortOrder | null | undefined;
  };

  /**
   * Public-safe user summary containing essential identity fields used in
   * list views and references.
   *
   * Sourced from Actors.econ_discuss_users. Sensitive fields such as email,
   * password_hash, MFA secrets, and tokens are intentionally omitted.
   */
  export type ISummary = {
    /**
     * Unique identifier of the user.
     *
     * Prisma: Actors.econ_discuss_users.id (UUID primary key).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Public display name or handle for the user.
     *
     * Prisma: Actors.econ_discuss_users.display_name (String).
     */
    displayName: string;

    /**
     * Optional avatar image URI for profile displays.
     *
     * Prisma: Actors.econ_discuss_users.avatar_uri (nullable String).
     */
    avatarUri?: string | null | undefined;
  };
}
