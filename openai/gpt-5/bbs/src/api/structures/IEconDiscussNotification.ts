import { tags } from "typia";

import { IENotificationSortBy } from "./IENotificationSortBy";
import { IESortDirection } from "./IESortDirection";

/**
 * Notification entity returned to clients for inbox and detail views.
 *
 * Backed by Actors.econ_discuss_notifications in Prisma. Sensitive
 * authentication artifacts are not present in this table; this DTO excludes
 * internal lifecycle markers (e.g., deleted_at) and includes a computed isRead
 * flag for ease of use.
 *
 * Ownership/authorization: Only the recipient (recipient_user_id) may access or
 * mutate read state for a record.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussNotification = {
  /**
   * Unique identifier of the notification.
   *
   * Maps to econ_discuss_notifications.id (UUID primary key).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Business type/category key of the notification.
   *
   * Maps to econ_discuss_notifications.type.
   */
  type: string;

  /**
   * Short title or summary for the notification.
   *
   * Maps to econ_discuss_notifications.title.
   */
  title: string;

  /**
   * Optional detailed body text for the notification.
   *
   * Maps to econ_discuss_notifications.body (nullable).
   */
  body?: string | null | undefined;

  /**
   * Optional actor user identifier that triggered the notification.
   *
   * Maps to econ_discuss_notifications.actor_user_id (nullable UUID).
   */
  actorUserId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional target entity type for deep-linking.
   *
   * Maps to econ_discuss_notifications.entity_type (nullable text).
   */
  entityType?: string | null | undefined;

  /**
   * Optional target entity identifier for deep-linking.
   *
   * Maps to econ_discuss_notifications.entity_id (nullable UUID).
   */
  entityId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Computed convenience flag indicating read state.
   *
   * Derived from econ_discuss_notifications.read_at (true when non-null,
   * false when null). Exposed to avoid client-side derivation.
   */
  isRead: boolean;

  /**
   * Timestamp when the notification was read, if applicable.
   *
   * Maps to econ_discuss_notifications.read_at (nullable timestamptz/ISO
   * 8601).
   */
  readAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Creation timestamp (send time) of the notification.
   *
   * Maps to econ_discuss_notifications.created_at (timestamptz/ISO 8601).
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last update timestamp of the notification record.
   *
   * Maps to econ_discuss_notifications.updated_at (timestamptz/ISO 8601).
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace IEconDiscussNotification {
  /**
   * Notification search/filter request for listing a member's persisted
   * notifications.
   *
   * Backed by Actors.econ_discuss_notifications (columns include: id,
   * recipient_user_id, actor_user_id, type, title, body, entity_type,
   * entity_id, read_at, created_at, updated_at, deleted_at). This DTO is not
   * persisted; it conveys client-side pagination, filters, and sorting.
   *
   * Security: The service must scope the query to the authenticated user by
   * enforcing recipient_user_id = current user. Rows with deleted_at set are
   * excluded from active results.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Not persisted. Applied by the API layer to build OFFSET/LIMIT queries
     * for econ_discuss_notifications. Must be a positive integer
     * (1-based).
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of notifications per page.
     *
     * Upper bound (e.g., 200) protects performance. Used by the API layer
     * only; not stored in the database.
     */
    pageSize?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * Filter by read state.
     *
     * Maps to econ_discuss_notifications.read_at: true when read_at is NOT
     * NULL, false when read_at IS NULL.
     */
    isRead?: boolean | undefined;

    /**
     * Filter by business type key of the notification.
     *
     * Maps to econ_discuss_notifications.type. Values are
     * application-defined categories.
     */
    type?: string | undefined;

    /**
     * Filter by target entity type for deep-linking.
     *
     * Maps to econ_discuss_notifications.entity_type. Free-form but usually
     * constrained by application.
     */
    entityType?: string | undefined;

    /**
     * Filter by target entity identifier.
     *
     * Maps to econ_discuss_notifications.entity_id (UUID).
     */
    entityId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Lower bound (inclusive) for created_at in UTC.
     *
     * Maps to econ_discuss_notifications.created_at >= dateFrom.
     */
    dateFrom?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound (inclusive) for created_at in UTC.
     *
     * Maps to econ_discuss_notifications.created_at <= dateTo.
     */
    dateTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort key for ordering results.
     *
     * Backed by indexed columns such as created_at and read_at.
     */
    sortBy?: IENotificationSortBy | undefined;

    /** Sort direction (ascending or descending). */
    sortDir?: IESortDirection | undefined;
  };

  /**
   * Notification update request to toggle read state.
   *
   * Maps to Actors.econ_discuss_notifications.read_at. Other columns (type,
   * title, body, entity linkage) are system-managed and immutable for the
   * recipient.
   */
  export type IUpdate = {
    /**
     * Desired read state of the notification.
     *
     * When true, the service sets econ_discuss_notifications.read_at to the
     * current timestamp; when false, it clears read_at to null.
     */
    isRead: boolean;
  };
}
