import { tags } from "typia";

/**
 * Reputation aggregate snapshot for a user as stored in
 * Actors.econ_discuss_user_reputations.
 *
 * Acts as a fast-access cache derived from immutable ledger entries in
 * Actors.econ_discuss_reputation_events. Excludes rows with deleted_at from
 * active use by convention (not exposed here).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussUserReputation = {
  /**
   * Primary key of the reputation aggregate record.
   *
   * Maps to econ_discuss_user_reputations.id (UUID).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Related user identifier.
   *
   * Maps to econ_discuss_user_reputations.user_id referencing
   * econ_discuss_users.id.
   */
  userId: string & tags.Format<"uuid">;

  /**
   * Current non-negative reputation score for the user.
   *
   * Maps to econ_discuss_user_reputations.score.
   */
  score: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Timestamp when the score was last recalculated.
   *
   * Maps to econ_discuss_user_reputations.last_updated_at (timestamptz).
   */
  lastUpdatedAt: string & tags.Format<"date-time">;

  /**
   * Aggregate row creation timestamp.
   *
   * Maps to econ_discuss_user_reputations.created_at (timestamptz).
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Aggregate row last update timestamp.
   *
   * Maps to econ_discuss_user_reputations.updated_at (timestamptz).
   */
  updatedAt: string & tags.Format<"date-time">;
};
