import { tags } from "typia";

import { IEconDiscussUser } from "./IEconDiscussUser";
import { IELiveMessageType } from "./IELiveMessageType";

/**
 * Live message entity representing a single item within a post’s live
 * discussion thread.
 *
 * Backed by the Prisma model Live.econ_discuss_live_messages which “stores raw
 * message content, type, and lifecycle timestamps for ordering and limited
 * edits,” with the following key columns: id, econ_discuss_live_thread_id,
 * econ_discuss_user_id (nullable), message_type, content (nullable), pinned,
 * edited_at (nullable), created_at, updated_at, and deleted_at (nullable).
 *
 * Security: Sensitive authentication fields do not exist on this entity. Author
 * attribution is limited to non-sensitive identity and may be null when
 * anonymization or deletion has occurred.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussLiveMessage = {
  /**
   * Message identifier.
   *
   * Prisma: Live.econ_discuss_live_messages.id (UUID primary key).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the live thread that owns this message.
   *
   * Prisma: Live.econ_discuss_live_messages.econ_discuss_live_thread_id (FK
   * to econ_discuss_live_threads.id).
   */
  liveThreadId: string & tags.Format<"uuid">;

  /**
   * Identifier of the authoring user, or null if the author has been
   * anonymized per policy.
   *
   * Prisma: Live.econ_discuss_live_messages.econ_discuss_user_id (nullable FK
   * to econ_discuss_users.id).
   */
  authorUserId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional embedded summary of the author for convenience. Omitted or null
   * when not requested or when author has been anonymized.
   *
   * Derived from Actors.econ_discuss_users and related expert badge tables;
   * not a direct database column.
   */
  author?: IEconDiscussUser.ISummary | null | undefined;

  /**
   * Type of the message.
   *
   * Prisma: Live.econ_discuss_live_messages.message_type
   * (application-enforced values).
   */
  messageType: IELiveMessageType;

  /**
   * Message body text for text/system styles; may be null for certain system
   * messages.
   *
   * Prisma: Live.econ_discuss_live_messages.content (nullable String).
   */
  content?: string | null | undefined;

  /**
   * Pin flag controlling highlighted placement within the thread.
   *
   * Prisma: Live.econ_discuss_live_messages.pinned (Boolean).
   */
  pinned: boolean;

  /**
   * Timestamp of last edit within the permitted window; null if never edited.
   *
   * Prisma: Live.econ_discuss_live_messages.edited_at (timestamptz,
   * nullable).
   */
  editedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Creation timestamp of the message (ISO 8601, UTC recommended).
   *
   * Prisma: Live.econ_discuss_live_messages.created_at (timestamptz).
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last update timestamp of the message (ISO 8601).
   *
   * Prisma: Live.econ_discuss_live_messages.updated_at (timestamptz).
   */
  updatedAt: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp when the message has been removed from active
   * visibility; null if active.
   *
   * Prisma: Live.econ_discuss_live_messages.deleted_at (timestamptz,
   * nullable).
   */
  deletedAt?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEconDiscussLiveMessage {
  /**
   * Search request parameters for listing live messages of a post’s live
   * thread.
   *
   * This DTO expresses pagination and filtering inputs for queries over
   * Live.econ_discuss_live_messages as related to a post via
   * Live.econ_discuss_live_threads (one-to-one with
   * Articles.econ_discuss_posts). It supports server-side indexes on
   * created_at and type filtering.
   *
   * Security: Avoids direct user_id filters (policy) and instead offers
   * myMessagesOnly to scope to the caller when needed. Private threads remain
   * protected by access controls at the controller level.
   */
  export type IRequest = {
    /**
     * Page number for pagination (1-based).
     *
     * Used by list/search operations over Live.econ_discuss_live_messages
     * joined via the post’s live thread. Server applies sensible maximums.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Page size (items per page).
     *
     * Applies to message listings. The service enforces an upper bound to
     * protect performance.
     */
    pageSize?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Optional ISO 8601 timestamp cursor. When provided, only messages with
     * created_at strictly greater than this instant are returned.
     *
     * Maps to Live.econ_discuss_live_messages.created_at (timestamptz).
     */
    since?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional filter restricting results to one or more message types.
     *
     * Values are defined by IELiveMessageType and correspond to
     * econ_discuss_live_messages.message_type.
     */
    messageTypes?: IELiveMessageType[] | null | undefined;

    /**
     * Optional filter to return only pinned messages (true) or only
     * non-pinned messages (false). Omit or null to not filter.
     *
     * Maps to econ_discuss_live_messages.pinned (Boolean).
     */
    pinned?: boolean | null | undefined;

    /**
     * Sort order for chronological listing.
     *
     * - Created_at_desc (default): newest first
     * - Created_at_asc: oldest first
     *
     * Backed by Live.econ_discuss_live_messages.created_at indexes.
     */
    sortBy?: "created_at_asc" | "created_at_desc" | null | undefined;

    /**
     * Optional security-safe flag to restrict results to messages authored
     * by the authenticated caller.
     *
     * Replaces direct userId filtering per security policy disallowing
     * arbitrary user_id filters in request DTOs.
     */
    myMessagesOnly?: boolean | null | undefined;
  };

  /**
   * Creation DTO for a live message in a post’s live thread.
   *
   * Security policy is enforced by the service: the author is derived from
   * authentication (econ_discuss_live_messages.econ_discuss_user_id), and the
   * target thread is resolved from the path-bound post. Server-managed fields
   * (id, created_at, updated_at, edited_at, deleted_at, live thread linkage)
   * are not accepted here and are set by the backend.
   */
  export type ICreate = {
    /**
     * Type of the message to create. Must be one of IELiveMessageType
     * values.
     *
     * Maps to Live.econ_discuss_live_messages.message_type.
     */
    messageType: IELiveMessageType;

    /**
     * Message body text when applicable (e.g., for messageType="text"). For
     * certain system types this may be absent.
     *
     * Maps to Live.econ_discuss_live_messages.content (nullable String).
     */
    content?: string | null | undefined;

    /**
     * Whether the newly created message should be pinned. Defaults to false
     * when omitted.
     *
     * Maps to Live.econ_discuss_live_messages.pinned (Boolean).
     */
    pinned?: boolean | null | undefined;
  };

  /**
   * Update DTO for a live message. All fields are optional and subject to
   * policy:
   *
   * - Edits may be limited by thread state (live vs ended/archived) and time
   *   windows.
   * - Pin/unpin may require host or moderator privileges.
   *
   * Server-managed fields (id, author, timestamps, linkages) are excluded
   * from this request.
   */
  export type IUpdate = {
    /**
     * Optional message type change. Most installations restrict type
     * changes; if allowed, use one of IELiveMessageType values.
     *
     * Backed by Live.econ_discuss_live_messages.message_type.
     */
    messageType?: IELiveMessageType | null | undefined;

    /**
     * Updated message body text. Null can be used to clear content where
     * policy allows (e.g., system notices).
     *
     * Backed by Live.econ_discuss_live_messages.content (nullable String).
     */
    content?: string | null | undefined;

    /**
     * Toggle the pinned state for the message. True to pin; false to unpin.
     *
     * Backed by Live.econ_discuss_live_messages.pinned (Boolean).
     */
    pinned?: boolean | null | undefined;
  };
}
