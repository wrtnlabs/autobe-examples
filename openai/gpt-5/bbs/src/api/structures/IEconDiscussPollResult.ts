import { tags } from "typia";

import { IEQuestionType } from "./IEQuestionType";
import { IEVisibilityMode } from "./IEVisibilityMode";
import { IEconDiscussPollResults } from "./IEconDiscussPollResults";
import { IESegmentBy } from "./IESegmentBy";
import { IEPollResponseStatus } from "./IEPollResponseStatus";

/**
 * Aggregated poll results returned by the POST/PATCH computation endpoint.
 *
 * Structure mirrors IEconDiscussPollResults, allowing the service to tailor
 * included aggregates based on request parameters.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussPollResult = {
  /** Identifier of the poll (Polls.econ_discuss_polls.id). */
  pollId: string & tags.Format<"uuid">;

  /** Identifier of the host post (Articles.econ_discuss_posts.id). */
  postId: string & tags.Format<"uuid">;

  /** Poll prompt (optional in this form). */
  question?: string | null | undefined;

  /** Poll question type from Polls.econ_discuss_polls.question_type. */
  questionType: IEQuestionType;

  /** Visibility mode governing running result exposure. */
  visibilityMode?: IEVisibilityMode | undefined;

  /** Expert-only participation flag (Polls.econ_discuss_polls.expert_only). */
  expertOnly?: boolean | undefined;

  /** Total eligible responses after policy filters. */
  totalResponses: number & tags.Type<"int32">;

  /** Computation timestamp for this result set. */
  computedAt: string & tags.Format<"date-time">;

  /** Per-option aggregates when applicable; null for non-option types. */
  options?: IEconDiscussPollResults.IOption[] | null | undefined;

  /** Likert distribution when applicable; null otherwise. */
  likert?: IEconDiscussPollResults.ILikert | null | undefined;

  /** Numeric summary when applicable; null otherwise. */
  numeric?: IEconDiscussPollResults.INumericSummary | null | undefined;

  /** Ranking summary when applicable; null otherwise. */
  ranking?: IEconDiscussPollResults.IRankingSummary | null | undefined;

  /**
   * Optional segmented aggregates if requested and allowed by privacy
   * thresholds.
   */
  segments?: IEconDiscussPollResults.ISegment[] | null | undefined;
};
export namespace IEconDiscussPollResult {
  /**
   * Request parameters to control poll result aggregation returned by the
   * POST/PATCH endpoint.
   *
   * Enables optional segmentation (role or expertise_domain), privacy
   * thresholds, and selective inclusion of per-type aggregates. Filters are
   * applied over Polls.econ_discuss_poll_responses and related option
   * selections.
   */
  export type IRequest = {
    /**
     * Whether segmented aggregates should be returned when privacy
     * thresholds are satisfied.
     *
     * Segments derive from role (verified expert vs general) or expert
     * domain badges.
     */
    includeSegments?: boolean | undefined;

    /**
     * Segmentation strategy.
     *
     * - Role: experts vs general (joins
     *   Actors.econ_discuss_verified_experts).
     * - Expertise_domain: segments by expert domain badges
     *   (Actors.econ_discuss_expert_domain_badges) joined to
     *   Topics.econ_discuss_topics.
     */
    segmentBy?: IESegmentBy | null | undefined;

    /**
     * K-anonymity minimum responses required per segment before results are
     * shown. If null, service uses policy defaults.
     */
    minSegmentSize?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * When true, include per-option aggregates for option-based question
     * types.
     */
    includeOptionBreakdown?: boolean | null | undefined;

    /** When true, include Likert distribution for likert-type polls. */
    includeLikertDistribution?: boolean | null | undefined;

    /** When true, include numeric summary for numeric_estimate polls. */
    includeNumericSummary?: boolean | null | undefined;

    /** When true, include ranking summary for ranking-type polls. */
    includeRankingSummary?: boolean | null | undefined;

    /**
     * If true, include responses with status="quarantined" in aggregates
     * (normally excluded). Defaults to false when null.
     */
    includeQuarantined?: boolean | null | undefined;

    /**
     * Optional list of response statuses to exclude from tallies (e.g.,
     * ["quarantined", "invalidated"]).
     */
    excludeStatuses?: IEPollResponseStatus[] | null | undefined;

    /**
     * Optional lower bound (ISO 8601) for responses to include by
     * created_at. Null uses all history.
     */
    since?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional upper bound (ISO 8601) for responses to include by
     * created_at. Null uses current time.
     */
    until?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
