import { tags } from "typia";

import { IEconDiscussPollQuestionType } from "./IEconDiscussPollQuestionType";
import { IEconDiscussPollVisibilityMode } from "./IEconDiscussPollVisibilityMode";
import { IEconDiscussPollOption } from "./IEconDiscussPollOption";

/**
 * Poll entity attached to a post.
 *
 * Backed by Polls.econ_discuss_polls with a strict one-to-one link to
 * Articles.econ_discuss_posts via econ_discuss_post_id. Captures configuration
 * such as question, type, visibility mode, eligibility thresholds,
 * type-specific parameters, and schedule. Options are provided through
 * econ_discuss_poll_options and surfaced here for convenience.
 *
 * Security note: This DTO omits internal soft-delete markers (deleted_at) and
 * never exposes respondent identities or secrets. Aggregated results are
 * delivered by separate result endpoints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEconDiscussPoll = {
  /**
   * Unique identifier of the poll.
   *
   * Prisma reference: econ_discuss_polls.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Host post identifier this poll is attached to.
   *
   * Prisma reference: econ_discuss_polls.econ_discuss_post_id (unique
   * one-to-one with Articles.econ_discuss_posts.id).
   */
  postId: string & tags.Format<"uuid">;

  /**
   * Poll prompt shown to voters.
   *
   * Prisma reference: econ_discuss_polls.question.
   */
  question: string;

  /**
   * Type of the question controlling how responses are captured.
   *
   * Prisma reference: econ_discuss_polls.question_type (string domain;
   * application-enforced enumeration).
   */
  questionType: IEconDiscussPollQuestionType;

  /**
   * Controls when results are visible to viewers.
   *
   * Prisma reference: econ_discuss_polls.visibility_mode (string domain;
   * application-enforced enumeration).
   */
  visibilityMode: IEconDiscussPollVisibilityMode;

  /**
   * Whether participation is restricted to verified experts and staff.
   *
   * Prisma reference: econ_discuss_polls.expert_only.
   */
  expertOnly: boolean;

  /**
   * Whether respondents may change their vote before closure.
   *
   * Prisma reference: econ_discuss_polls.allow_vote_change.
   */
  allowVoteChange: boolean;

  /**
   * Minimum reputation required to participate, when set.
   *
   * Prisma reference: econ_discuss_polls.min_voter_reputation (nullable
   * integer).
   */
  minVoterReputation?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * Minimum account age in hours required to participate, when set.
   *
   * Prisma reference: econ_discuss_polls.min_account_age_hours (nullable
   * integer).
   */
  minAccountAgeHours?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * For multiple_choice: minimum number of options a voter must select.
   *
   * Prisma reference: econ_discuss_polls.min_selections (nullable integer).
   */
  minSelections?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * For multiple_choice: maximum number of options a voter may select.
   *
   * Prisma reference: econ_discuss_polls.max_selections (nullable integer).
   */
  maxSelections?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * For likert: number of points on the scale (commonly 5 or 7).
   *
   * Prisma reference: econ_discuss_polls.scale_points (nullable integer).
   */
  scalePoints?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * For likert: label for the minimum endpoint.
   *
   * Prisma reference: econ_discuss_polls.scale_min_label (nullable).
   */
  scaleMinLabel?: string | null | undefined;

  /**
   * For likert: label for the maximum endpoint.
   *
   * Prisma reference: econ_discuss_polls.scale_max_label (nullable).
   */
  scaleMaxLabel?: string | null | undefined;

  /**
   * For likert: optional midpoint label.
   *
   * Prisma reference: econ_discuss_polls.scale_mid_label (nullable).
   */
  scaleMidLabel?: string | null | undefined;

  /**
   * For numeric_estimate: unit label (e.g., %, index points).
   *
   * Prisma reference: econ_discuss_polls.unit_label (nullable).
   */
  unitLabel?: string | null | undefined;

  /**
   * For numeric_estimate: minimum allowed value.
   *
   * Prisma reference: econ_discuss_polls.numeric_min (nullable double
   * precision).
   */
  numericMin?: number | null | undefined;

  /**
   * For numeric_estimate: maximum allowed value.
   *
   * Prisma reference: econ_discuss_polls.numeric_max (nullable double
   * precision).
   */
  numericMax?: number | null | undefined;

  /**
   * For numeric_estimate: step size/precision for rounding.
   *
   * Prisma reference: econ_discuss_polls.numeric_step (nullable double
   * precision).
   */
  numericStep?: number | null | undefined;

  /**
   * Scheduled open time for the poll (UTC).
   *
   * Prisma reference: econ_discuss_polls.start_at (nullable timestamptz).
   */
  startAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Scheduled close time for the poll (UTC).
   *
   * Prisma reference: econ_discuss_polls.end_at (nullable timestamptz).
   */
  endAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Creation timestamp of the poll row.
   *
   * Prisma reference: econ_discuss_polls.created_at (timestamptz).
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last update timestamp of the poll row.
   *
   * Prisma reference: econ_discuss_polls.updated_at (timestamptz).
   */
  updatedAt: string & tags.Format<"date-time">;

  /**
   * Answer options associated with the poll when applicable (single_choice,
   * multiple_choice, ranking). Ordered by position.
   *
   * Prisma reference: econ_discuss_poll_options (per-poll unique option_text
   * and position).
   */
  options: IEconDiscussPollOption[];
};
export namespace IEconDiscussPoll {
  /**
   * Create payload to attach a poll to a post.
   *
   * Persists to Polls.econ_discuss_polls and creates
   * econ_discuss_poll_options when provided. One poll per post is enforced by
   * a unique constraint on econ_discuss_post_id. Do not include identifiers
   * or host post linkage here; the route path supplies the post context.
   *
   * Type-specific constraints: multiple_choice uses min/maxSelections; likert
   * uses scale* fields; numeric_estimate uses unitLabel and numeric* bounds.
   */
  export type ICreate = {
    /**
     * Poll prompt shown to voters.
     *
     * Maps to econ_discuss_polls.question.
     */
    question: string;

    /**
     * Question type controlling response semantics.
     *
     * Maps to econ_discuss_polls.question_type.
     */
    questionType: IEconDiscussPollQuestionType;

    /**
     * Result visibility policy for the poll lifecycle.
     *
     * Maps to econ_discuss_polls.visibility_mode.
     */
    visibilityMode: IEconDiscussPollVisibilityMode;

    /**
     * Whether participation is restricted to verified experts and staff.
     *
     * Maps to econ_discuss_polls.expert_only.
     */
    expertOnly: boolean;

    /**
     * Whether a voter may change their response before closure.
     *
     * Maps to econ_discuss_polls.allow_vote_change.
     */
    allowVoteChange: boolean;

    /**
     * Optional minimum reputation required to vote.
     *
     * Maps to econ_discuss_polls.min_voter_reputation.
     */
    minVoterReputation?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Optional minimum account age (hours) required to vote.
     *
     * Maps to econ_discuss_polls.min_account_age_hours.
     */
    minAccountAgeHours?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * For multiple_choice: minimum number of selections required.
     *
     * Maps to econ_discuss_polls.min_selections.
     */
    minSelections?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * For multiple_choice: maximum number of selections allowed.
     *
     * Maps to econ_discuss_polls.max_selections.
     */
    maxSelections?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * For likert: number of points on the scale (5 or 7 typical).
     *
     * Maps to econ_discuss_polls.scale_points.
     */
    scalePoints?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * For likert: label for the minimum endpoint.
     *
     * Maps to econ_discuss_polls.scale_min_label.
     */
    scaleMinLabel?: string | null | undefined;

    /**
     * For likert: label for the maximum endpoint.
     *
     * Maps to econ_discuss_polls.scale_max_label.
     */
    scaleMaxLabel?: string | null | undefined;

    /**
     * For likert: optional midpoint label.
     *
     * Maps to econ_discuss_polls.scale_mid_label.
     */
    scaleMidLabel?: string | null | undefined;

    /**
     * For numeric_estimate: unit label (e.g., %, index points).
     *
     * Maps to econ_discuss_polls.unit_label.
     */
    unitLabel?: string | null | undefined;

    /**
     * For numeric_estimate: minimum allowed value.
     *
     * Maps to econ_discuss_polls.numeric_min.
     */
    numericMin?: number | null | undefined;

    /**
     * For numeric_estimate: maximum allowed value.
     *
     * Maps to econ_discuss_polls.numeric_max.
     */
    numericMax?: number | null | undefined;

    /**
     * For numeric_estimate: step size/precision for rounding.
     *
     * Maps to econ_discuss_polls.numeric_step.
     */
    numericStep?: number | null | undefined;

    /**
     * Optional scheduled open time (UTC).
     *
     * Maps to econ_discuss_polls.start_at.
     */
    startAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional scheduled close time (UTC).
     *
     * Maps to econ_discuss_polls.end_at.
     */
    endAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Initial answer options for option-driven question types
     * (single_choice, multiple_choice, ranking). Ignored for likert and
     * numeric_estimate.
     *
     * Maps to econ_discuss_poll_options (option_text, position).
     */
    options?: (IEconDiscussPollOption.ICreate[] & tags.MinItems<0>) | undefined;
  };

  /**
   * Update DTO for a poll configuration.
   *
   * This type represents the mutable fields of a poll stored in Prisma model
   * econ_discuss_polls. It supports adjusting visibility rules, eligibility
   * thresholds, Likert and numeric parameters, multi-select constraints, and
   * scheduling. Structural fields like question_type and option sets are
   * typically restricted once a poll has responses.
   *
   * Security & integrity: The service must enforce lifecycle constraints
   * (e.g., no structural changes after responses exist) and validate bounds
   * and relationships (min/max, numeric_step > 0).
   */
  export type IUpdate = {
    /**
     * Poll prompt text displayed to respondents.
     *
     * Prisma reference: econ_discuss_polls.question — freeform prompt text
     * captured at creation/update time. Follow clear, concise wording per
     * Polls requirements.
     */
    question?: (string & tags.MinLength<1>) | undefined;

    /**
     * Controls when running results are visible to users.
     *
     * Prisma reference: econ_discuss_polls.visibility_mode — allowed values
     * include hidden_until_close, visible_after_vote, and always_visible
     * (policy may restrict certain modes for expert-only polls).
     */
    visibility_mode?: IEconDiscussPollVisibilityMode | undefined;

    /**
     * Allows respondents to change their answers before the poll closes.
     *
     * Prisma reference: econ_discuss_polls.allow_vote_change — when true,
     * users may edit responses within the configured window and before
     * end_at.
     */
    allow_vote_change?: boolean | undefined;

    /**
     * Optional minimum reputation score required to participate.
     *
     * Prisma reference: econ_discuss_polls.min_voter_reputation —
     * non-negative integer gating eligibility.
     */
    min_voter_reputation?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | undefined;

    /**
     * Optional minimum account age (in hours) required to participate.
     *
     * Prisma reference: econ_discuss_polls.min_account_age_hours —
     * non-negative integer threshold.
     */
    min_account_age_hours?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | undefined;

    /**
     * For multiple_choice questions: minimum number of options a respondent
     * must select.
     *
     * Prisma reference: econ_discuss_polls.min_selections — applicable only
     * to multiple_choice; must be ≤ max_selections and ≤ total options.
     */
    min_selections?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | undefined;

    /**
     * For multiple_choice questions: maximum number of options a respondent
     * may select.
     *
     * Prisma reference: econ_discuss_polls.max_selections — applicable only
     * to multiple_choice; must be ≥ min_selections and ≤ total options.
     */
    max_selections?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | undefined;

    /**
     * For likert questions: number of points on the scale (commonly 5 or
     * 7).
     *
     * Prisma reference: econ_discuss_polls.scale_points — integer
     * cardinality of the Likert scale.
     */
    scale_points?: (number & tags.Type<"int32"> & tags.Minimum<2>) | undefined;

    /**
     * For likert questions: label for the minimum endpoint (e.g., Strongly
     * disagree).
     *
     * Prisma reference: econ_discuss_polls.scale_min_label — endpoint label
     * text.
     */
    scale_min_label?: string | undefined;

    /**
     * For likert questions: label for the maximum endpoint (e.g., Strongly
     * agree).
     *
     * Prisma reference: econ_discuss_polls.scale_max_label — endpoint label
     * text.
     */
    scale_max_label?: string | undefined;

    /**
     * For likert questions: optional label for the midpoint, when a
     * midpoint exists.
     *
     * Prisma reference: econ_discuss_polls.scale_mid_label — midpoint label
     * text.
     */
    scale_mid_label?: string | undefined;

    /**
     * For numeric_estimate questions: textual unit label to display (e.g.,
     * %, index points).
     *
     * Prisma reference: econ_discuss_polls.unit_label — freeform unit text.
     */
    unit_label?: string | undefined;

    /**
     * For numeric_estimate questions: minimum allowed numeric value.
     *
     * Prisma reference: econ_discuss_polls.numeric_min — lower bound for
     * numeric responses.
     */
    numeric_min?: number | undefined;

    /**
     * For numeric_estimate questions: maximum allowed numeric value.
     *
     * Prisma reference: econ_discuss_polls.numeric_max — upper bound for
     * numeric responses.
     */
    numeric_max?: number | undefined;

    /**
     * For numeric_estimate questions: step size/precision for rounding.
     *
     * Prisma reference: econ_discuss_polls.numeric_step — positive number
     * indicating input granularity.
     */
    numeric_step?: number | undefined;

    /**
     * Scheduled start time for the poll (UTC, ISO 8601).
     *
     * Prisma reference: econ_discuss_polls.start_at — when set,
     * participation opens at this timestamp.
     */
    start_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Scheduled end time for the poll (UTC, ISO 8601).
     *
     * Prisma reference: econ_discuss_polls.end_at — after this timestamp,
     * participation closes and results may publish per visibility rules.
     */
    end_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
