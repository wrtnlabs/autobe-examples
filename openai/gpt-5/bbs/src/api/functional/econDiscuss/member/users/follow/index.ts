import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Create or reinstate a follow edge in econ_discuss_user_follows (auth
 * required).
 *
 * This operation establishes a follow edge in econ_discuss_user_follows from
 * the authenticated account (follower_user_id) to the target account identified
 * by the {userId} path parameter (followee_user_id). The schema documents
 * econ_discuss_user_follows as the social graph table with primary key id,
 * created_at timestamps, and a deleted_at timestamp to retire links while
 * preserving auditability. A unique (follower_user_id, followee_user_id)
 * constraint enforces idempotency.
 *
 * Provider logic typically inserts a new row when none exists, or, if a
 * matching row exists with deleted_at set, clears deleted_at to reactivate the
 * relationship. Attempts to follow oneself should be rejected. Authorization
 * requires a signed-in user. On success, this endpoint returns no content (204)
 * consistent with side-effect-only operations.
 *
 * Related endpoints: DELETE /econDiscuss/member/users/{userId}/follow to retire
 * the relationship (sets deleted_at), and GET/PATCH
 * /econDiscuss/users/{userId}/following to read the resulting followees list.
 *
 * @param props.connection
 * @param props.userId Identifier of the target user to follow
 * @path /econDiscuss/member/users/:userId/follow
 * @accessor api.functional.econDiscuss.member.users.follow.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<void> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
      );
}
export namespace create {
  export type Props = {
    /** Identifier of the target user to follow */
    userId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "POST",
    path: "/econDiscuss/member/users/:userId/follow",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/member/users/${encodeURIComponent(props.userId ?? "null")}/follow`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retire a follow edge (set deleted_at) in econ_discuss_user_follows (auth
 * required).
 *
 * This operation retires an existing follow relationship by locating the
 * econ_discuss_user_follows row where follower_user_id is the authenticated
 * account and followee_user_id equals the {userId} path value, then setting the
 * deleted_at timestamp. The schema for econ_discuss_user_follows includes
 * deleted_at specifically to retire links while preserving history, rather than
 * immediately removing rows.
 *
 * If no active relationship exists, providers may return 204 (idempotent) or
 * 404 depending on policy. Authorization is required to ensure only the
 * follower can modify their own edges. This operation returns no content on
 * success, and complements POST /econDiscuss/member/users/{userId}/follow
 * (creation) and GET/PATCH /econDiscuss/users/{userId}/following (read).
 *
 * Error handling considerations include rejecting attempts to unfollow oneself
 * where not applicable and handling concurrent state changes gracefully given
 * the unique (follower_user_id, followee_user_id) constraint.
 *
 * @param props.connection
 * @param props.userId Identifier of the target user to unfollow
 * @path /econDiscuss/member/users/:userId/follow
 * @accessor api.functional.econDiscuss.member.users.follow.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Identifier of the target user to unfollow */
    userId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/econDiscuss/member/users/:userId/follow",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/member/users/${encodeURIComponent(props.userId ?? "null")}/follow`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
