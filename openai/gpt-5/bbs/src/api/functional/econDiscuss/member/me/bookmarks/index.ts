import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIEconDiscussPostBookmark } from "../../../../../structures/IPageIEconDiscussPostBookmark";
import { IEconDiscussPostBookmark } from "../../../../../structures/IEconDiscussPostBookmark";

/**
 * List member’s bookmarks (econ_discuss_post_bookmarks) with defaults.
 *
 * This collection read returns the member’s active saved items from
 * econ_discuss_post_bookmarks where econ_discuss_user_id equals the
 * authenticated user and deleted_at is null. Core fields include id,
 * econ_discuss_post_id, note, created_at, and updated_at. The response is
 * suitable for list views and may incorporate related post information by
 * joining econ_discuss_posts.
 *
 * Security and access control ensure only the owner can retrieve their
 * bookmarks. Rate limits and standard error semantics apply. Empty pages are
 * valid when no bookmarks exist. To apply advanced filters or custom sort
 * beyond defaults, the PATCH /me/bookmarks variant should be used.
 *
 * @param props.connection
 * @path /econDiscuss/member/me/bookmarks
 * @accessor api.functional.econDiscuss.member.me.bookmarks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIEconDiscussPostBookmark.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/member/me/bookmarks",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/bookmarks";
  export const random = (): IPageIEconDiscussPostBookmark.ISummary =>
    typia.random<IPageIEconDiscussPostBookmark.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Search and paginate member’s bookmarks from econ_discuss_post_bookmarks.
 *
 * This operation queries the econ_discuss_post_bookmarks table to return the
 * current member’s saved items. It uses the authenticated identity to match
 * econ_discuss_post_bookmarks.econ_discuss_user_id and returns only entries
 * that are active (deleted_at is null). Key columns referenced include id,
 * econ_discuss_user_id, econ_discuss_post_id, note, created_at, and updated_at.
 * The target post linkage via econ_discuss_post_id allows the provider to
 * enrich summaries with details from econ_discuss_posts when composing response
 * DTOs.
 *
 * Security and authorization follow the platform’s business policies: only the
 * owner can list their bookmarks. The controller/provider must enforce
 * ownership using the authenticated user context. Administrative and moderation
 * roles are not exposed through this endpoint; the intended audience is a
 * signed-in member managing their own data.
 *
 * Business behavior and validation: the request body supports pagination and
 * optional filters (e.g., time windows over created_at, presence of a note, or
 * post targeting using valid UUIDs). Results are typically ordered by
 * created_at in descending order to reflect most recently saved first. If no
 * records are found, an empty page is returned. Any malformed identifiers or
 * invalid pagination parameters result in validation errors; authorization
 * failures produce 401/403 per policy. For a simpler default listing without
 * complex filters, clients may use GET /me/bookmarks; for fine-grained
 * filtering and sorting, use this PATCH endpoint.
 *
 * @param props.connection
 * @param props.body Search, sorting, and pagination inputs for the owner’s
 *   bookmarks
 * @path /econDiscuss/member/me/bookmarks
 * @accessor api.functional.econDiscuss.member.me.bookmarks.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search, sorting, and pagination inputs for the owner’s bookmarks */
    body: IEconDiscussPostBookmark.IRequest;
  };
  export type Body = IEconDiscussPostBookmark.IRequest;
  export type Response = IPageIEconDiscussPostBookmark.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/member/me/bookmarks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/bookmarks";
  export const random = (): IPageIEconDiscussPostBookmark.ISummary =>
    typia.random<IPageIEconDiscussPostBookmark.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
