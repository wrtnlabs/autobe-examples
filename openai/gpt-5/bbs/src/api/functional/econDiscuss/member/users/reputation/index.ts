import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussUserReputation } from "../../../../../structures/IEconDiscussUserReputation";
export * as events from "./events/index";

/**
 * Get current reputation aggregate (econ_discuss_user_reputations) for a user.
 *
 * This operation reads the reputation aggregate for a user from the
 * econ_discuss_user_reputations table. The Prisma schema describes
 * econ_discuss_user_reputations with fields id, user_id (unique), score
 * (non-negative integer), last_updated_at, created_at, updated_at, and an
 * optional deleted_at to indicate a retired aggregate. The table acts as a
 * fast-access cache for authorization gates while the immutable history is kept
 * in econ_discuss_reputation_events.
 *
 * Security and visibility depend on policy. Business requirements note that the
 * platform computes a per-user reputation to gate features; exposure of raw
 * numeric scores may be policy-bound. This endpoint requires authentication
 * (role "member") and should apply additional business checks to restrict
 * access when necessary (e.g., show only to authenticated viewers or comply
 * with privacy settings). The controller/provider must exclude rows with
 * deleted_at set.
 *
 * This aggregate is tied to the ledger in econ_discuss_reputation_events via
 * user_id; writes to the ledger recompute the aggregate. Related APIs include
 * listing reputation events for the same user. On errors, return standard
 * validation and authorization errors. If no aggregate exists for the user,
 * return 404.
 *
 * @param props.connection
 * @param props.userId Target user’s ID to retrieve reputation for
 * @path /econDiscuss/member/users/:userId/reputation
 * @accessor api.functional.econDiscuss.member.users.reputation.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target user’s ID to retrieve reputation for */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IEconDiscussUserReputation;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/member/users/:userId/reputation",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/member/users/${encodeURIComponent(props.userId ?? "null")}/reputation`;
  export const random = (): IEconDiscussUserReputation =>
    typia.random<IEconDiscussUserReputation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
