import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussPostBookmark } from "../../../../../structures/IEconDiscussPostBookmark";
export * as self from "./self/index";

/**
 * Create a member’s bookmark for a post in econ_discuss_post_bookmarks
 * (idempotent).
 *
 * Create a personal bookmark for the target post. The
 * econ_discuss_post_bookmarks model contains one row per saved (user, post) and
 * includes columns such as note (owner-only), created_at, updated_at, and a
 * deletion timestamp used by retention logic. A unique (econ_discuss_user_id,
 * econ_discuss_post_id) constraint ensures idempotent behavior when the same
 * post is saved multiple times by the same member.
 *
 * Security and behavior: the caller must be an authenticated member with
 * visibility to the post. The operation should succeed idempotently when
 * already bookmarked and may optionally restore a previously retired record.
 * The note field remains private to the owner and is excluded from any shared
 * views in other parts of the system.
 *
 * Errors and validation: return not found if the post does not exist or is not
 * visible to the caller. Enforce application-level validations on note length
 * or format where required. Related operations include listing a member’s
 * bookmarks and removing a bookmark, which update or retire the corresponding
 * row as appropriate.
 *
 * @param props.connection
 * @param props.postId UUID of the post to bookmark
 * @param props.body Optional private note and context for creating the bookmark
 * @path /econDiscuss/member/posts/:postId/bookmarks
 * @accessor api.functional.econDiscuss.member.posts.bookmarks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<void> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the post to bookmark */
    postId: string & tags.Format<"uuid">;

    /** Optional private note and context for creating the bookmark */
    body: IEconDiscussPostBookmark.ICreate;
  };
  export type Body = IEconDiscussPostBookmark.ICreate;

  export const METADATA = {
    method: "POST",
    path: "/econDiscuss/member/posts/:postId/bookmarks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/bookmarks`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
