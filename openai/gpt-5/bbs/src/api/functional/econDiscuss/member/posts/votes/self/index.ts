import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Withdraw the caller’s vote by updating status in econ_discuss_post_votes.
 *
 * Remove the caller’s active vote from the post by transitioning the related
 * econ_discuss_post_votes row to status="withdrawn" while preserving
 * auditability. The schema models lifecycle through the status column with
 * allowed values such as "active", "withdrawn", "switched", "discounted", and
 * "invalidated". Implementations also maintain created_at and updated_at for
 * historical analysis and rely on indexes such as (econ_discuss_user_id,
 * created_at) for user history queries.
 *
 * Security and policy: the caller must be an authenticated member with an
 * existing vote. Business rules may impose withdrawal windows; after such
 * windows, reject with a policy error. If no vote exists, either respond
 * idempotently with success without change or return not found per policy. This
 * action only affects the caller’s own record; it does not change other users’
 * votes.
 *
 * Related endpoints: POST /posts/{postId}/votes to cast or change a vote and
 * PATCH /posts/{postId}/votes for administrative listing and review. This
 * deletion updates lifecycle state rather than physically deleting the row,
 * maintaining consistency with audit requirements.
 *
 * @param props.connection
 * @param props.postId UUID of the post from which the caller withdraws the vote
 * @path /econDiscuss/member/posts/:postId/votes/self
 * @accessor api.functional.econDiscuss.member.posts.votes.self.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the post from which the caller withdraws the vote */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/econDiscuss/member/posts/:postId/votes/self",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/votes/self`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
