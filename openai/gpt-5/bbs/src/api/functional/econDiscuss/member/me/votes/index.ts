import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIEconDiscussPostVote } from "../../../../../structures/IPageIEconDiscussPostVote";
import { IEconDiscussPostVote } from "../../../../../structures/IEconDiscussPostVote";

/**
 * Get current user’s post votes (econ_discuss_post_votes).
 *
 * This operation lists the caller’s post vote history from
 * econ_discuss_post_votes, limiting to rows where econ_discuss_user_id equals
 * the authenticated user and deleted_at is null. Fields available in the model
 * include vote_type, status, optional status_reason, created_at/updated_at, and
 * the target econ_discuss_post_id. The response presents vote records suitable
 * for a private voting history view.
 *
 * Security and behavior: authentication is required; results are private to the
 * owner and never include other users’ voting identities. For advanced
 * querying—filtering by vote_type/status, narrowing to a date range, or
 * changing sort—use PATCH /me/votes with a structured request body. Errors
 * follow the standard pattern (401 for unauthenticated, 400 for invalid
 * parameters if any defaults are overridden by query-to-body adapters).
 *
 * @param props.connection
 * @path /econDiscuss/member/me/votes
 * @accessor api.functional.econDiscuss.member.me.votes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIEconDiscussPostVote.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/member/me/votes",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/votes";
  export const random = (): IPageIEconDiscussPostVote.ISummary =>
    typia.random<IPageIEconDiscussPostVote.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Search current user’s post votes (econ_discuss_post_votes).
 *
 * Retrieve a filtered, paginated list of the caller’s post voting history. The
 * Prisma model econ_discuss_post_votes defines one row per (user, post) vote
 * with fields: econ_discuss_user_id, econ_discuss_post_id, vote_type ("up" or
 * "down"), status ("active", "withdrawn", "switched", "discounted", or
 * "invalidated"), optional status_reason, and timestamps created_at/updated_at
 * plus a deleted_at column for exceptional removals. Queries restrict to the
 * authenticated user and exclude rows where deleted_at is not null.
 *
 * Security and privacy: this endpoint requires authentication and returns only
 * the caller’s own vote records, aligning with privacy expectations where
 * individual vote choices are private to the voter. The response may include
 * post identifiers (econ_discuss_post_id) to enable navigation, but will not
 * expose other users’ identities.
 *
 * Validation and business logic: the request body allows filtering by
 * vote_type/status and time windows (created_at). Sorting may be applied by
 * created_at descending by default. Unknown filter values yield 400 validation
 * errors via the standard error model. If the user is not authenticated, a 401
 * is returned. Related operations include GET /me/votes for default listing
 * without a request body and POST/DELETE vote actions on specific posts for
 * casting or withdrawing a vote, which are separate write endpoints.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for listing the
 *   caller’s post votes.
 * @path /econDiscuss/member/me/votes
 * @accessor api.functional.econDiscuss.member.me.votes.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search, filter, and pagination parameters for listing the caller’s
     * post votes.
     */
    body: IEconDiscussPostVote.IRequest;
  };
  export type Body = IEconDiscussPostVote.IRequest;
  export type Response = IPageIEconDiscussPostVote.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/member/me/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/votes";
  export const random = (): IPageIEconDiscussPostVote.ISummary =>
    typia.random<IPageIEconDiscussPostVote.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
