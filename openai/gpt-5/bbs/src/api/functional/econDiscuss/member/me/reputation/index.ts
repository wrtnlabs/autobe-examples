import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IEconDiscussUserReputation } from "../../../../../structures/IEconDiscussUserReputation";
export * as events from "./events/index";

/**
 * Get current reputation aggregate for authenticated user
 * (econ_discuss_user_reputations).
 *
 * Fetch the current reputation score for the caller from
 * econ_discuss_user_reputations.
 *
 * The econ_discuss_user_reputations table provides a compact view containing
 * user_id, score (Int), last_updated_at, and temporal columns (created_at,
 * updated_at, deleted_at). It is maintained based on entries in
 * econ_discuss_reputation_events. This endpoint is optimized for read
 * performance so client applications can determine eligibility for gated
 * features (e.g., polls, live rooms) without scanning the ledger.
 *
 * Security considerations: the caller must be authenticated and will receive
 * only their own reputation information. Entries with a non-null deleted_at are
 * treated as inactive/retired and should not be returned.
 *
 * Error handling: return 200 with the current aggregate when present. If no
 * aggregate exists yet for the user (e.g., new account), providers may return a
 * default score of zero or a 404 according to business policy; the DTO supports
 * explicit values to avoid ambiguity.
 *
 * @param props.connection
 * @path /econDiscuss/member/me/reputation
 * @accessor api.functional.econDiscuss.member.me.reputation.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(connection: IConnection): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(),
          status: null,
        },
      );
}
export namespace at {
  export type Response = IEconDiscussUserReputation;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/member/me/reputation",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/reputation";
  export const random = (): IEconDiscussUserReputation =>
    typia.random<IEconDiscussUserReputation>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
