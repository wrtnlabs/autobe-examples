import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussPoll } from "../../../../../structures/IEconDiscussPoll";
export * as options from "./options/index";
export * as responses from "./responses/index";

/**
 * Create a poll for a post (econ_discuss_polls and options).
 *
 * This POST endpoint creates a poll for the specified post using the
 * econ_discuss_polls table fields described in the Prisma schema: question,
 * question_type (single_choice, multiple_choice, likert, ranking,
 * numeric_estimate), visibility_mode (hidden_until_close, visible_after_vote,
 * always_visible), expert_only, allow_vote_change, min_voter_reputation,
 * min_account_age_hours, min_selections/max_selections for multiple choice,
 * likert scale parameters (scale_points with endpoint/mid labels), numeric
 * parameters (unit_label, numeric_min/numeric_max/numeric_step), and
 * start_at/end_at scheduling. Options are saved in econ_discuss_poll_options
 * with per-poll uniqueness on option_text and position.
 *
 * Permissions and validation: Only authenticated members (e.g., post authors or
 * authorized users) can create a poll. Enforce one‑poll‑per‑post via the unique
 * econ_discuss_post_id constraint. Validate that provided parameters satisfy
 * business and schema rules such as min_selections ≤ max_selections,
 * numeric_min < numeric_max, numeric_step > 0, and start_at < end_at when both
 * are provided. Ensure question_type and visibility_mode values align with
 * policy constraints, including expert_only implications.
 *
 * Related operations: Use GET /posts/{postId}/poll to read back the
 * configuration, PUT /posts/{postId}/poll to adjust allowed fields later, and
 * DELETE /posts/{postId}/poll to retire the poll by marking it deleted. Errors
 * include 404 if the post does not exist, 409 when a poll already exists for
 * the post, and 400 for invalid payloads.
 *
 * @param props.connection
 * @param props.postId Target post’s UUID that will host the poll.
 * @param props.body Poll configuration and options to create.
 * @path /econDiscuss/member/posts/:postId/poll
 * @accessor api.functional.econDiscuss.member.posts.poll.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target post’s UUID that will host the poll. */
    postId: string & tags.Format<"uuid">;

    /** Poll configuration and options to create. */
    body: IEconDiscussPoll.ICreate;
  };
  export type Body = IEconDiscussPoll.ICreate;
  export type Response = IEconDiscussPoll;

  export const METADATA = {
    method: "POST",
    path: "/econDiscuss/member/posts/:postId/poll",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/poll`;
  export const random = (): IEconDiscussPoll =>
    typia.random<IEconDiscussPoll>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a post’s poll (econ_discuss_polls).
 *
 * This PUT endpoint updates the poll in econ_discuss_polls associated with the
 * given post (via econ_discuss_post_id). Per the Prisma comments, editable
 * fields include question, visibility_mode, eligibility thresholds
 * (min_voter_reputation, min_account_age_hours), per-type parameters (min/max
 * selections for multiple choice, likert scale configuration, numeric bounds
 * and step), and start/end scheduling. Business rules commonly restrict
 * structural changes such as question_type or option set once responses exist
 * in econ_discuss_poll_responses or the start time has passed; providers should
 * enforce those constraints while allowing benign text clarifications.
 *
 * Authorization and validation: Only authenticated members with appropriate
 * privileges may update the poll. Validate that updated values remain
 * consistent with schema constraints (e.g., numeric_min < numeric_max, valid
 * scale_points, min_selections ≤ max_selections). If options are updated,
 * maintain uniqueness on option_text and position within
 * econ_discuss_poll_options.
 *
 * Error handling and related endpoints: Return 404 if the poll or post is not
 * found or the poll is already retired (deleted_at populated). Return 400 for
 * invalid updates or policies violated, and 409 for conflicts such as
 * disallowed structural changes. Clients can retrieve the current configuration
 * via GET /posts/{postId}/poll and retire the poll using DELETE
 * /posts/{postId}/poll.
 *
 * @param props.connection
 * @param props.postId Target post’s UUID hosting the poll to update.
 * @param props.body Fields to update for the poll, respecting lifecycle
 *   constraints.
 * @path /econDiscuss/member/posts/:postId/poll
 * @accessor api.functional.econDiscuss.member.posts.poll.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target post’s UUID hosting the poll to update. */
    postId: string & tags.Format<"uuid">;

    /** Fields to update for the poll, respecting lifecycle constraints. */
    body: IEconDiscussPoll.IUpdate;
  };
  export type Body = IEconDiscussPoll.IUpdate;
  export type Response = IEconDiscussPoll;

  export const METADATA = {
    method: "PUT",
    path: "/econDiscuss/member/posts/:postId/poll",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/poll`;
  export const random = (): IEconDiscussPoll =>
    typia.random<IEconDiscussPoll>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a post’s poll by setting deleted_at (econ_discuss_polls).
 *
 * This DELETE endpoint marks the poll linked to the given post as deleted by
 * setting the deleted_at timestamp in econ_discuss_polls. As described in the
 * Prisma comments, deleted_at indicates removal from active use while retaining
 * records for audit and history. After this action, GET /posts/{postId}/poll
 * should return 404 because the poll is no longer active.
 *
 * Security and behavior: Only authenticated members with the proper rights
 * (e.g., the post author or governance roles) can perform this operation.
 * Providers should verify the post and poll exist and are currently active
 * (deleted_at is null) before proceeding. Treat repeated requests as
 * idempotent: if already marked deleted, the operation should succeed without
 * further changes.
 *
 * Errors and related operations: Return 404 if no active poll exists for the
 * specified post, and 403 when the caller lacks permission. Related operations
 * include POST to create a new poll, GET to read configuration, and PUT to
 * update allowable fields prior to retirement.
 *
 * @param props.connection
 * @param props.postId Target post’s UUID hosting the poll to remove.
 * @path /econDiscuss/member/posts/:postId/poll
 * @accessor api.functional.econDiscuss.member.posts.poll.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target post’s UUID hosting the poll to remove. */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/econDiscuss/member/posts/:postId/poll",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/poll`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
