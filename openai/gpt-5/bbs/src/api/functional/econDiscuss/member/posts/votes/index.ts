import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussPostVote } from "../../../../../structures/IEconDiscussPostVote";
export * as self from "./self/index";

/**
 * Cast or change the current member’s vote in econ_discuss_post_votes for a
 * post.
 *
 * Cast or change the caller’s vote on the target post. The
 * econ_discuss_post_votes model represents a single user’s vote with fields
 * vote_type and status, enforcing one row per user/post via a unique
 * constraint. On initial voting, create a row linked to econ_discuss_posts (via
 * econ_discuss_post_id) and econ_discuss_users (via econ_discuss_user_id),
 * setting status to "active". When changing an existing vote within policy
 * windows, update the existing row’s vote_type and status (for example, to
 * "switched"), preserving the unique constraint without creating duplicates.
 *
 * Security and policy: the caller must be an authenticated member and eligible
 * to vote (not voting on own content, within quotas, and not restricted by
 * sanctions). This operation should be idempotent; sending the same vote_type
 * for an already matching record succeeds without additional mutations.
 * Integrity or moderation logic may later adjust status to "discounted" or
 * "invalidated" when necessary per policy.
 *
 * Errors and behavior: return not found if the post does not exist or is not
 * eligible for voting (e.g., locked/archived). Return validation errors for
 * invalid vote_type. Concurrency is handled via upsert semantics honoring the
 * unique (econ_discuss_user_id, econ_discuss_post_id) constraint. Related
 * operations include listing votes for admins and withdrawing one’s vote
 * (DELETE /posts/{postId}/votes/self).
 *
 * @param props.connection
 * @param props.postId UUID of the post to vote on
 * @param props.body Desired vote payload with vote_type selection
 * @path /econDiscuss/member/posts/:postId/votes
 * @accessor api.functional.econDiscuss.member.posts.votes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<void> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the post to vote on */
    postId: string & tags.Format<"uuid">;

    /** Desired vote payload with vote_type selection */
    body: IEconDiscussPostVote.ICreate;
  };
  export type Body = IEconDiscussPostVote.ICreate;

  export const METADATA = {
    method: "POST",
    path: "/econDiscuss/member/posts/:postId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
