import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIEconDiscussNotification } from "../../../../../structures/IPageIEconDiscussNotification";
import { IEconDiscussNotification } from "../../../../../structures/IEconDiscussNotification";

/**
 * List member’s notifications (econ_discuss_notifications) with defaults.
 *
 * Return the current member’s active notifications by selecting from
 * econ_discuss_notifications where recipient_user_id equals the authenticated
 * user and deleted_at is null. Exposed fields include id, type, title, body,
 * read_at, created_at, updated_at, and optional entity_type/entity_id for
 * deep-linking. Default sort is typically created_at desc.
 *
 * Security limits access strictly to the owner. An empty page indicates no
 * available notifications. For advanced filtering (e.g., unread-only, by type,
 * or per entity), use PATCH /me/notifications with a request body. Standard
 * error handling applies for authorization failures and transient server
 * issues.
 *
 * @param props.connection
 * @path /econDiscuss/member/me/notifications
 * @accessor api.functional.econDiscuss.member.me.notifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIEconDiscussNotification;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/member/me/notifications",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/notifications";
  export const random = (): IPageIEconDiscussNotification =>
    typia.random<IPageIEconDiscussNotification>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Search and paginate member’s notifications from econ_discuss_notifications.
 *
 * This operation lists inbox-style notifications for the signed-in member by
 * selecting from econ_discuss_notifications with recipient_user_id equal to the
 * authenticated user. Records with deleted_at set are excluded from normal
 * responses. Relevant columns include the categorical type, title/body,
 * optional polymorphic linkage via entity_type/entity_id, and read state
 * represented by read_at (null indicates unread).
 *
 * Security ensures that only the intended recipient can access their
 * notifications. Providers must enforce ownership using the authenticated
 * context. The endpoint supports rich filtering—such as isRead (mapped to
 * read_at non-null), type lists, entity scoping, and created_at time
 * windows—and uses pagination to deliver stable, ordered pages (commonly
 * created_at desc). Invalid inputs produce validation errors; authorization
 * failures return 401/403; empty pages are valid outcomes. For simpler defaults
 * without complex criteria, clients may call GET /me/notifications.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination for notifications (read
 *   state, type, entities, time range)
 * @path /econDiscuss/member/me/notifications
 * @accessor api.functional.econDiscuss.member.me.notifications.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination for notifications (read state, type,
     * entities, time range)
     */
    body: IEconDiscussNotification.IRequest;
  };
  export type Body = IEconDiscussNotification.IRequest;
  export type Response = IPageIEconDiscussNotification;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/member/me/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/notifications";
  export const random = (): IPageIEconDiscussNotification =>
    typia.random<IPageIEconDiscussNotification>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get one notification (econ_discuss_notifications) belonging to current user.
 *
 * Fetch a specific persisted notification for the current authenticated user
 * using its UUID.
 *
 * Security and permissions: Only the notification recipient may access the
 * record. Authorization checks ensure that
 * econ_discuss_notifications.recipient_user_id equals the authenticated user's
 * econ_discuss_users.id. Attempts to access another user's notification must
 * result in a 403 Forbidden. If the record is not found or is marked removed
 * (deleted_at is set), return 404 Not Found.
 *
 * Database relationship: The econ_discuss_notifications table stores per-user
 * notifications with columns id (UUID primary key), recipient_user_id (FK to
 * econ_discuss_users), optional actor_user_id (FK), type, title, body, optional
 * entity_type/entity_id for deep links, read_at for read state, and
 * created_at/updated_at for ordering and auditing. This operation returns a
 * materialized view of those fields via the IEconDiscussNotification DTO,
 * excluding anything removed for the user.
 *
 * Validation and behavior: Validate that notificationId is a UUID. Enforce
 * ownership checks and hidden/removed states. No request body is required. The
 * endpoint is designed to complement list/search endpoints and the update
 * endpoint that toggles read state.
 *
 * Related operations: Use PUT /me/notifications/{notificationId} to update read
 * state and POST /me/notifications/markAllRead to set read_at on multiple
 * notifications.
 *
 * @param props.connection
 * @param props.notificationId Notification UUID to retrieve for the current
 *   user
 * @path /econDiscuss/member/me/notifications/:notificationId
 * @accessor api.functional.econDiscuss.member.me.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Notification UUID to retrieve for the current user */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IEconDiscussNotification;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/member/me/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/member/me/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IEconDiscussNotification =>
    typia.random<IEconDiscussNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update user notification read state (econ_discuss_notifications).
 *
 * Mark or unmark a notification as read for the current user by updating
 * econ_discuss_notifications.read_at.
 *
 * Security and permissions: The authenticated user must match
 * econ_discuss_notifications.recipient_user_id. If the notification does not
 * belong to the user, return 403. If not found or marked removed (deleted_at
 * set), return 404. All changes are limited to the read state; other columns
 * like type, title, body, entity metadata are not editable by recipients.
 *
 * Database relationship: econ_discuss_notifications stores id (UUID),
 * recipient_user_id (FK), optional actor_user_id (FK), type, title, body,
 * optional entity_type/entity_id, read_at, created_at, updated_at, and a
 * removal timestamp. This operation updates read_at based on client intent
 * while preserving immutability of other system-managed fields.
 *
 * Validation and business rules: The request body
 * IEconDiscussNotification.IUpdate should contain an isRead boolean (and may
 * include no other modifiable fields). On isRead=true, set read_at to the
 * current time; on isRead=false, set read_at to null. The response returns the
 * updated notification via IEconDiscussNotification. Handle id format
 * validation and ownership checks.
 *
 * Related operations: GET /me/notifications/{notificationId} retrieves a single
 * notification. POST /me/notifications/markAllRead updates multiple
 * notifications for the current user.
 *
 * @param props.connection
 * @param props.notificationId Notification UUID to update for the current user
 * @param props.body Fields to update on the notification (read/unread intent
 *   only)
 * @path /econDiscuss/member/me/notifications/:notificationId
 * @accessor api.functional.econDiscuss.member.me.notifications.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Notification UUID to update for the current user */
    notificationId: string & tags.Format<"uuid">;

    /** Fields to update on the notification (read/unread intent only) */
    body: IEconDiscussNotification.IUpdate;
  };
  export type Body = IEconDiscussNotification.IUpdate;
  export type Response = IEconDiscussNotification;

  export const METADATA = {
    method: "PUT",
    path: "/econDiscuss/member/me/notifications/:notificationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/member/me/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IEconDiscussNotification =>
    typia.random<IEconDiscussNotification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Mark all current user notifications as read (econ_discuss_notifications).
 *
 * Bulk-set read_at for all unread notifications belonging to the current user.
 *
 * Security and permissions: Only authenticated users can invoke this operation.
 * It updates only rows where econ_discuss_notifications.recipient_user_id
 * equals the caller’s econ_discuss_users.id. It must ignore records flagged as
 * removed. If no records are affected, still return 204 to indicate success.
 *
 * Database relationship: Operates on econ_discuss_notifications by updating
 * read_at in bulk based on recipient ownership. No other columns are modified.
 *
 * Behavior and errors: The endpoint is idempotent. Concurrent executions should
 * be safe; subsequent calls will do nothing and still succeed. This endpoint
 * complements single-record update and retrieval operations.
 *
 * @param props.connection
 * @path /econDiscuss/member/me/notifications/markAllRead
 * @accessor api.functional.econDiscuss.member.me.notifications.markAllRead
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function markAllRead(connection: IConnection): Promise<void> {
  return true === connection.simulate
    ? markAllRead.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...markAllRead.METADATA,
          path: markAllRead.path(),
          status: null,
        },
      );
}
export namespace markAllRead {
  export const METADATA = {
    method: "POST",
    path: "/econDiscuss/member/me/notifications/markAllRead",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/notifications/markAllRead";
  export const random = (): void => typia.random<void>();
  export const simulate = (_connection: IConnection): void => {
    return random();
  };
}
