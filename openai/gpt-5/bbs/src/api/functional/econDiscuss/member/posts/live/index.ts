import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussLiveThread } from "../../../../../structures/IEconDiscussLiveThread";
export * as messages from "./messages/index";

/**
 * Create a live thread for a post (econ_discuss_live_threads).
 *
 * Create a new live discussion thread for the given post. The
 * econ_discuss_live_threads model defines a one-to-one relationship to posts
 * via econ_discuss_post_id and enforces uniqueness, ensuring each post can host
 * at most one live thread. The table stores lifecycle state in the state column
 * with allowed values managed by application logic (scheduled, waiting, live,
 * paused, ended, archived). It also includes expert_only and access_scope flags
 * to control participation and visibility, as well as timestamps such as
 * scheduled_start_at, started_at, paused_at, ended_at, and archived_at for
 * operational workflows.
 *
 * Security and permissions should ensure only authorized users can create a
 * live thread (typically the post’s author as host, or elevated roles per
 * policy). The host_user_id column links ownership to econ_discuss_users.
 * Moderation and governance policies may require 2FA for moderators/admins, but
 * authentication and enforcement occur at the controller/service level.
 *
 * The operation validates that the parent post exists in econ_discuss_posts
 * (referenced by econ_discuss_post_id) and that a live thread does not already
 * exist for the post (unique constraint). It accepts optional configuration
 * such as expert_only participation, access_scope values (public,
 * followers_only, topic_subscribers_only, invite_only), a scheduled_start_at
 * when scheduling, and slow_mode_interval_seconds to limit message frequency.
 * On success, it returns the created live thread with server-populated
 * identifiers and timestamps. Common errors include 404 when the post is not
 * found and 409 when a live thread already exists for the specified post.
 *
 * @param props.connection
 * @param props.postId Target post’s ID to host the live thread
 * @param props.body Initial configuration and state for the new live thread
 * @path /econDiscuss/member/posts/:postId/live
 * @accessor api.functional.econDiscuss.member.posts.live.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target post’s ID to host the live thread */
    postId: string & tags.Format<"uuid">;

    /** Initial configuration and state for the new live thread */
    body: IEconDiscussLiveThread.ICreate;
  };
  export type Body = IEconDiscussLiveThread.ICreate;
  export type Response = IEconDiscussLiveThread;

  export const METADATA = {
    method: "POST",
    path: "/econDiscuss/member/posts/:postId/live",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/live`;
  export const random = (): IEconDiscussLiveThread =>
    typia.random<IEconDiscussLiveThread>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a post’s live thread (econ_discuss_live_threads).
 *
 * Update the existing live thread associated with the given post. The
 * econ_discuss_live_threads model stores the lifecycle state (state) and
 * configuration flags including expert_only and access_scope. It also maintains
 * operational timestamps such as scheduled_start_at, started_at, paused_at,
 * ended_at, and archived_at to accurately record room activity transitions.
 *
 * Security considerations: only the host_user_id (the owner in
 * econ_discuss_live_threads) or authorized staff (e.g., moderators/admins) may
 * perform updates. Policy may require 2FA for elevated roles (see
 * econ_discuss_moderators.enforced_2fa and econ_discuss_admins.enforced_2fa).
 * Authorization checks and session handling occur outside this contract.
 *
 * Business rules: Allowed state transitions are enforced in service logic, for
 * example: scheduled → waiting/live; live → paused/ended; ended → archived.
 * Configuration like expert_only, access_scope, and slow_mode_interval_seconds
 * can be adjusted when permitted by policy and thread state. The operation also
 * validates that a live thread exists for the specified post and returns 404 if
 * not found. It returns the updated live thread including any new timestamps
 * set as a result of state changes.
 *
 * @param props.connection
 * @param props.postId Target post’s ID owning the live thread to update
 * @param props.body Fields to modify on the live thread, including state
 *   transitions and settings
 * @path /econDiscuss/member/posts/:postId/live
 * @accessor api.functional.econDiscuss.member.posts.live.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target post’s ID owning the live thread to update */
    postId: string & tags.Format<"uuid">;

    /**
     * Fields to modify on the live thread, including state transitions and
     * settings
     */
    body: IEconDiscussLiveThread.IUpdate;
  };
  export type Body = IEconDiscussLiveThread.IUpdate;
  export type Response = IEconDiscussLiveThread;

  export const METADATA = {
    method: "PUT",
    path: "/econDiscuss/member/posts/:postId/live",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/live`;
  export const random = (): IEconDiscussLiveThread =>
    typia.random<IEconDiscussLiveThread>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a post’s live thread by marking deleted_at
 * (econ_discuss_live_threads).
 *
 * Delete the live thread associated with the specified post. The
 * econ_discuss_live_threads table includes a deleted_at timestamp indicating
 * that a thread has been retired from active use. This operation marks the
 * record as deleted so it no longer appears in read endpoints or future
 * operations, while retaining the record for audit and historical purposes.
 * Related messages stored in econ_discuss_live_messages remain intact and
 * continue to reference the thread unless further archival rules apply.
 *
 * Security: only the host (host_user_id) or authorized staff
 * (moderators/admins) can retire a live thread. The service ensures the post
 * exists and that a live thread is currently associated; otherwise, a 404 is
 * returned. If policy requires, the thread may first be transitioned to an
 * ended/archived state prior to removal. The exact behavior of message
 * visibility and transcript preservation is governed by business rules and the
 * state/archival columns on the model.
 *
 * @param props.connection
 * @param props.postId Target post’s ID whose live thread will be removed from
 *   active use
 * @path /econDiscuss/member/posts/:postId/live
 * @accessor api.functional.econDiscuss.member.posts.live.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target post’s ID whose live thread will be removed from active use */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/econDiscuss/member/posts/:postId/live",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/member/posts/${encodeURIComponent(props.postId ?? "null")}/live`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
