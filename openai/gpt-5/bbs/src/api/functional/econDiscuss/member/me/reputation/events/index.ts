import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussReputationEvent } from "../../../../../../structures/IEconDiscussReputationEvent";
import { IPageIEconDiscussReputationEvent } from "../../../../../../structures/IPageIEconDiscussReputationEvent";

/**
 * List authenticated user’s reputation events (econ_discuss_reputation_events)
 * with pagination and filters.
 *
 * Retrieve a paginated list of reputation-impacting events for the current user
 * from econ_discuss_reputation_events.
 *
 * Each ledger entry contains user_id, optional actor_user_id (e.g., curator or
 * voter), optional post_id, points (signed Int), reason (category such as
 * upvote_post, curated_feature, moderation_penalty), optional source for
 * traceability, and occurred_at to support time-window calculations and decay.
 * Temporal fields include created_at and updated_at; entries may carry a
 * deleted_at for exceptional corrections, but normal operation treats the
 * ledger as append-only.
 *
 * The request supports pagination, search, and sorting parameters in the body
 * to handle complex filtering: page, pageSize, dateFrom/dateTo mapped to
 * occurred_at, reason substring match, and optional postId filtering. Results
 * are ordered by occurred_at descending by default to facilitate recent-history
 * views.
 *
 * Security considerations: only the authenticated user’s events are returned,
 * enforced by server-side scoping. Events associated with records in a removed
 * state (e.g., when deleted_at is non-null) should be excluded from normal
 * responses unless an audit mode is explicitly requested by governance tools,
 * which is out of scope here.
 *
 * Error handling returns a paginated container with zero or more events.
 * Validation errors (e.g., invalid date range) should return 400 with details;
 * authentication/authorization failures return 401/403.
 *
 * @param props.connection
 * @param props.body Query parameters for pagination, filtering, and sorting of
 *   reputation events
 * @path /econDiscuss/member/me/reputation/events
 * @accessor api.functional.econDiscuss.member.me.reputation.events.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Query parameters for pagination, filtering, and sorting of reputation
     * events
     */
    body: IEconDiscussReputationEvent.IRequest;
  };
  export type Body = IEconDiscussReputationEvent.IRequest;
  export type Response = IPageIEconDiscussReputationEvent;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/member/me/reputation/events",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/econDiscuss/member/me/reputation/events";
  export const random = (): IPageIEconDiscussReputationEvent =>
    typia.random<IPageIEconDiscussReputationEvent>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
