import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussUser } from "../../../structures/IEconDiscussUser";
export * as profile from "./profile/index";
export * as followers from "./followers/index";
export * as following from "./following/index";
export * as expertDomainBadges from "./expertDomainBadges/index";

/**
 * Get a single user by ID from econ_discuss_users (Actors schema).
 *
 * This operation reads a single user’s public-facing profile details from the
 * econ_discuss_users table using the id path parameter. The Prisma schema
 * documents econ_discuss_users with fields like display_name, avatar_uri
 * (optional URI for the avatar), timezone (IANA identifier such as Asia/Seoul),
 * locale (preferred locale like en-US), email_verified, mfa_enabled, and
 * timestamps created_at/updated_at. Sensitive columns including password_hash,
 * mfa_secret, and mfa_recovery_codes are never included in the response
 * payload. The record is considered active when deleted_at is null;
 * implementations should not return records where deleted_at is set.
 *
 * Security considerations: This is a public read endpoint and typically does
 * not require authentication for viewing public profile information. Never
 * include confidential values. If the application wants to indicate whether a
 * user is an expert for discovery, it can derive an "isExpertVerified" flag by
 * checking the presence of a row in econ_discuss_verified_experts for the same
 * user_id; the underlying verification artifacts are out of scope for this
 * response. Authorization logic must ensure private data from related tables
 * (like email) is not exposed.
 *
 * Database relationships: While the primary data comes from econ_discuss_users,
 * related tables like econ_discuss_user_profiles (bio, affiliation, website,
 * location) and role assignments (econ_discuss_members,
 * econ_discuss_verified_experts, econ_discuss_moderators, econ_discuss_admins)
 * can inform computed fields or separate resource calls. Any enrichment should
 * respect that econ_discuss_user_profiles is optional (1:1, nullable via
 * optional relation).
 *
 * Validation and behavior: The id must be a UUID corresponding to
 * econ_discuss_users.id. If no active record is found (deleted_at not null or
 * not present), return a not found condition. Implementers should normalize
 * response timestamps to ISO 8601 strings. Related operations include GET
 * /users/{userId}/profile for extended profile content and follower listing
 * endpoints for social graph views.
 *
 * Error handling: Return 404 when the user cannot be found or is inactive.
 * Avoid leaking whether an email exists on the platform. Rate limiting is
 * recommended for abusive enumeration attempts.
 *
 * @param props.connection
 * @param props.userId Target user’s unique identifier (econ_discuss_users.id).
 * @path /econDiscuss/users/:userId
 * @accessor api.functional.econDiscuss.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target user’s unique identifier (econ_discuss_users.id). */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IEconDiscussUser;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): IEconDiscussUser =>
    typia.random<IEconDiscussUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
