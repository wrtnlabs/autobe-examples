import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIEconDiscussUser } from "../../../../structures/IPageIEconDiscussUser";
import { IEconDiscussUser } from "../../../../structures/IEconDiscussUser";

/**
 * List followees for a user using econ_discuss_user_follows (public read).
 *
 * Retrieve the list of followee accounts for the specified user by reading from
 * the econ_discuss_user_follows table, which “stores user-to-user follow
 * relationships forming the social graph” and enforces idempotency with a
 * unique (follower_user_id, followee_user_id) constraint. Each returned item
 * represents a followee referenced by followee_user_id and is resolved against
 * econ_discuss_users to build a user summary for display.
 *
 * According to the Prisma schema, econ_discuss_user_follows contains: id (PK),
 * follower_user_id, followee_user_id, created_at, and deleted_at for lifecycle
 * control. The deleted_at column indicates relationship retirement while
 * keeping an audit trail. Only active links (deleted_at is null) are included.
 * The econ_discuss_users model provides display_name, avatar_uri, locale,
 * timezone, and other profile-related fields used to construct summaries, while
 * respecting that some details (like email) are private.
 *
 * Security and privacy: this read-only endpoint is intended for public viewing
 * of social graph edges, consistent with business rules that follower/following
 * counts and lists are typically visible unless policy dictates otherwise. No
 * authentication is required for read access. Rate limits may still apply.
 *
 * Related operations: use PATCH /econDiscuss/users/{userId}/following for
 * advanced filtering or sorting when needed; use POST
 * /econDiscuss/member/users/{userId}/follow and DELETE
 * /econDiscuss/member/users/{userId}/follow for creating and retiring follow
 * relationships, which operate on the same econ_discuss_user_follows table.
 *
 * @param props.connection
 * @param props.userId Identifier of the user whose followees to list
 * @path /econDiscuss/users/:userId/following
 * @accessor api.functional.econDiscuss.users.following.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the user whose followees to list */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIEconDiscussUser.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/users/:userId/following",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/users/${encodeURIComponent(props.userId ?? "null")}/following`;
  export const random = (): IPageIEconDiscussUser.ISummary =>
    typia.random<IPageIEconDiscussUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search of followees for a user via econ_discuss_user_follows
 * (paginated).
 *
 * This operation provides advanced, request-body-driven retrieval of followees
 * for the specified user. It reads from econ_discuss_user_follows — described
 * in the schema as the table for user-to-user follow relationships with a
 * unique (follower_user_id, followee_user_id) constraint and a deleted_at
 * column for logical retirement. Only active relationships (deleted_at is null)
 * are considered, and the join to econ_discuss_users supplies display fields
 * for summaries.
 *
 * Use this endpoint when you need explicit pagination objects, free-text
 * filtering on followee display_name (leveraging the GIN trigram index on
 * econ_discuss_users.display_name), or custom sort orders tied to created_at on
 * econ_discuss_user_follows. The request body follows the EconDiscuss prefixed
 * DTO convention and should include paging and optional search/sort keys
 * appropriate for list endpoints.
 *
 * Security: this is a read-only operation and typically public. Business logic
 * may still apply visibility policies or rate limits. It pairs with the simpler
 * GET variant for default listings and with POST/DELETE
 * /econDiscuss/member/users/{userId}/follow for write operations.
 *
 * @param props.connection
 * @param props.userId Identifier of the user whose followees to search
 * @param props.body Pagination, search, and sorting parameters for listing a
 *   user’s followees
 * @path /econDiscuss/users/:userId/following
 * @accessor api.functional.econDiscuss.users.following.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Identifier of the user whose followees to search */
    userId: string & tags.Format<"uuid">;

    /**
     * Pagination, search, and sorting parameters for listing a user’s
     * followees
     */
    body: IEconDiscussUser.IRequest;
  };
  export type Body = IEconDiscussUser.IRequest;
  export type Response = IPageIEconDiscussUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/users/:userId/following",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/users/${encodeURIComponent(props.userId ?? "null")}/following`;
  export const random = (): IPageIEconDiscussUser.ISummary =>
    typia.random<IPageIEconDiscussUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
