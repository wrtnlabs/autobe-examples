import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIEconDiscussUser } from "../../../../structures/IPageIEconDiscussUser";
import { IEconDiscussUserFollow } from "../../../../structures/IEconDiscussUserFollow";

/**
 * List followers of a user from econ_discuss_user_follows (Actors schema).
 *
 * This operation lists followers for the user identified by userId by reading
 * from econ_discuss_user_follows where followee_user_id matches and deleted_at
 * is null. It then joins follower_user_id to econ_discuss_users to render
 * public-friendly user summaries. The econ_discuss_user_follows table includes
 * created_at for ordering and deleted_at for inactive relationships.
 *
 * Security considerations: The list is typically public; however, privacy
 * constraints may apply per platform policy. Never return private attributes
 * like email or secrets from econ_discuss_users.
 *
 * Database relationships: Followers are sourced from econ_discuss_user_follows
 * (follower_user_id → econ_discuss_users.id). Only include active users
 * (econ_discuss_users.deleted_at is null) and active relationships (deleted_at
 * is null).
 *
 * Validation and behavior: The userId path parameter must be a UUID referencing
 * econ_discuss_users.id. As a GET without a request body, pagination should be
 * handled by default server settings or query-level defaults (the response
 * still uses the standard paginated container type). For complex searches,
 * clients should use PATCH /users/{userId}/followers.
 *
 * Related operations: PATCH /users/{userId}/followers provides advanced
 * filtering; GET /users/{userId} and GET /users/{userId}/profile provide
 * identity and profile information that can be combined with this list in UIs.
 *
 * Error handling: Return 404 when the target user is not found or inactive.
 * Otherwise return 200 with an empty page when there are no followers.
 *
 * @param props.connection
 * @param props.userId Followee user’s identifier whose followers are being
 *   listed (econ_discuss_users.id).
 * @path /econDiscuss/users/:userId/followers
 * @accessor api.functional.econDiscuss.users.followers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /**
     * Followee user’s identifier whose followers are being listed
     * (econ_discuss_users.id).
     */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIEconDiscussUser.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/users/:userId/followers",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/users/${encodeURIComponent(props.userId ?? "null")}/followers`;
  export const random = (): IPageIEconDiscussUser.ISummary =>
    typia.random<IPageIEconDiscussUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search followers of a user from econ_discuss_user_follows (Actors schema).
 *
 * This operation enumerates followers of a target user leveraging
 * econ_discuss_user_follows, which records follower_user_id, followee_user_id,
 * created_at, and deleted_at. The request body
 * (IEconDiscussUserFollow.IRequest) supports pagination (page, pageSize) and
 * may include filters like date windows on created_at or sorting by recency.
 * Only active relationships (where deleted_at is null) must be included.
 *
 * Security considerations: Follower lists are generally public. However,
 * implementations should enforce privacy policies if needed (e.g., restricted
 * accounts). Do not expose private user attributes; each follower is returned
 * as a summary of econ_discuss_users suitable for public consumption.
 *
 * Database relationships: The endpoint identifies followers by selecting
 * records with followee_user_id = {userId}, then joining to econ_discuss_users
 * on follower_user_id to build summaries. Ensure that user summaries exclude
 * accounts with non-null deleted_at and avoid revealing confidential fields
 * from econ_discuss_users.
 *
 * Validation and behavior: The userId path parameter is a UUID referencing
 * econ_discuss_users.id. The request body carries pagination and optional
 * filters; when absent fields are used, default server-side limits should
 * apply. The response wraps results in a pagination container
 * IPageIEconDiscussUser.ISummary.
 *
 * Related operations: GET /users/{userId}/followers provides a simple listing
 * without a request body; both return followers but this PATCH variant enables
 * advanced searching and sorting.
 *
 * Error handling: Return 404 when the target user does not exist or is
 * inactive. Return 200 with an empty page when no followers match. Validate
 * page bounds, and enforce reasonable pageSize limits to protect performance.
 *
 * @param props.connection
 * @param props.userId Followee user’s identifier whose followers are being
 *   listed (econ_discuss_users.id).
 * @param props.body Pagination, filters, and sorting for follower search on
 *   econ_discuss_user_follows.
 * @path /econDiscuss/users/:userId/followers
 * @accessor api.functional.econDiscuss.users.followers.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Followee user’s identifier whose followers are being listed
     * (econ_discuss_users.id).
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Pagination, filters, and sorting for follower search on
     * econ_discuss_user_follows.
     */
    body: IEconDiscussUserFollow.IRequest;
  };
  export type Body = IEconDiscussUserFollow.IRequest;
  export type Response = IPageIEconDiscussUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/users/:userId/followers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/users/${encodeURIComponent(props.userId ?? "null")}/followers`;
  export const random = (): IPageIEconDiscussUser.ISummary =>
    typia.random<IPageIEconDiscussUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
