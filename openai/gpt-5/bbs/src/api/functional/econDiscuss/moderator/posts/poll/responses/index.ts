import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussPollResponse } from "../../../../../../structures/IEconDiscussPollResponse";
import { IPageIEconDiscussPollResponse } from "../../../../../../structures/IPageIEconDiscussPollResponse";

/**
 * Search and list poll responses (econ_discuss_poll_responses) for a post.
 *
 * This operation lists responses from econ_discuss_poll_responses that belong
 * to the poll uniquely associated with the specified post (via
 * econ_discuss_polls.econ_discuss_post_id). The response model includes fields
 * such as status (active, withdrawn, quarantined, invalidated), created_at,
 * updated_at, and optional values corresponding to question types
 * (likert_value, numeric_value). For multiple-choice and ranking questions,
 * selections are recorded in econ_discuss_poll_response_options, which can be
 * joined as needed for detailed inspection.
 *
 * Because response-level data can be sensitive, access should be limited to
 * governance roles. The endpoint accepts a structured request body
 * (IEconDiscussPollResponse.IRequest) to support complex filtering: status
 * filters, respondent user constraints, created_at ranges, and
 * sorting/pagination parameters. The result returns a page container
 * (IPageIEconDiscussPollResponse) for consistent pagination semantics.
 *
 * The underlying tables referenced include econ_discuss_polls (one-to-one with
 * econ_discuss_posts), econ_discuss_poll_responses (primary dataset), and
 * optionally econ_discuss_poll_response_options for selection details.
 * Validation ensures that the target post has an associated poll and that
 * requested filters are applied only to responses within that poll context.
 *
 * Typical errors include 404 when the target post or poll does not exist, and
 * 403 when the caller is not authorized. This operation complements the detail
 * retrieval of an individual response and the response submission API. It does
 * not modify data and is suitable for internal dashboards and audits.
 *
 * @param props.connection
 * @param props.postId Identifier of the post whose poll responses are being
 *   queried
 * @param props.body Filtering, sorting, and pagination criteria for poll
 *   responses
 * @path /econDiscuss/moderator/posts/:postId/poll/responses
 * @accessor api.functional.econDiscuss.moderator.posts.poll.responses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the post whose poll responses are being queried */
    postId: string & tags.Format<"uuid">;

    /** Filtering, sorting, and pagination criteria for poll responses */
    body: IEconDiscussPollResponse.IRequest;
  };
  export type Body = IEconDiscussPollResponse.IRequest;
  export type Response = IPageIEconDiscussPollResponse;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/moderator/posts/:postId/poll/responses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/moderator/posts/${encodeURIComponent(props.postId ?? "null")}/poll/responses`;
  export const random = (): IPageIEconDiscussPollResponse =>
    typia.random<IPageIEconDiscussPollResponse>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
