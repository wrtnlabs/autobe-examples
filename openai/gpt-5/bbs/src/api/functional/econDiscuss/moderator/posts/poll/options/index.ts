import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Remove a poll option (econ_discuss_poll_options) for a post’s poll.
 *
 * This endpoint removes a single answer option from the poll associated with
 * the specified post. According to the Prisma schema, econ_discuss_polls has a
 * one-to-one relationship with econ_discuss_posts via econ_discuss_post_id, and
 * the available options are stored in econ_discuss_poll_options with a per-poll
 * uniqueness constraint across option_text and position. The option record
 * includes created_at, updated_at, and a deleted_at timestamp used to retire
 * options while preserving history for audits and result integrity.
 *
 * Security considerations apply: only authorized governance roles should be
 * able to remove options, and application logic should enforce timing
 * restrictions (for example, disallowing removal after responses have been
 * collected to preserve result validity). The request must reference both the
 * post identifier (postId) and the option identifier (optionId) to precisely
 * target the option under the correct poll context. The system should also
 * verify there is exactly one poll for the post as enforced by the
 * econ_discuss_polls uniqueness on econ_discuss_post_id.
 *
 * From a database perspective, this relates to econ_discuss_poll_options
 * (primary) and validates existence against econ_discuss_polls and
 * econ_discuss_posts. The option row contains option_text and position fields
 * for display order and uniqueness per poll. Removal should mark the record
 * with a deleted_at timestamp so it is excluded from active queries while
 * preserving audit integrity per the schema’s temporal columns.
 *
 * Error handling should include: 404 when the post or poll or option does not
 * exist or is already removed, 409 when business rules disallow removal (e.g.,
 * votes already recorded in econ_discuss_poll_responses), and 403 if the caller
 * lacks permission. Related operations include poll response submission and
 * listing, which depend on stable option sets.
 *
 * @param props.connection
 * @param props.postId Identifier of the host post whose poll owns the option
 * @param props.optionId Identifier of the poll option to remove
 * @path /econDiscuss/moderator/posts/:postId/poll/options/:optionId
 * @accessor api.functional.econDiscuss.moderator.posts.poll.options.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Identifier of the host post whose poll owns the option */
    postId: string & tags.Format<"uuid">;

    /** Identifier of the poll option to remove */
    optionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/econDiscuss/moderator/posts/:postId/poll/options/:optionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/moderator/posts/${encodeURIComponent(props.postId ?? "null")}/poll/options/${encodeURIComponent(props.optionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("optionId")(() => typia.assert(props.optionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
