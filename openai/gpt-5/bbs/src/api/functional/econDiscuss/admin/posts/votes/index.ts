import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussPostVote } from "../../../../../structures/IEconDiscussPostVote";
import { IPageIEconDiscussPostVote } from "../../../../../structures/IPageIEconDiscussPostVote";

/**
 * Search and paginate post vote records from econ_discuss_post_votes (admin
 * only).
 *
 * Retrieve a filtered, paginated list of vote records associated with a given
 * post to support governance, integrity review, and appeals workflows. In the
 * Prisma schema, econ_discuss_post_votes captures a single member’s vote on a
 * post and includes the columns vote_type (allowed values: "up" or "down") and
 * status ("active", "withdrawn", "switched", "discounted", or "invalidated").
 * Time-series analysis and review are aided by indexes on
 * (econ_discuss_post_id, created_at) and (econ_discuss_user_id, status,
 * created_at).
 *
 * Access to per-user vote records is sensitive because individual vote choices
 * are private except to the voter; therefore, this operation is intended for
 * authorized staff performing moderation or integrity checks. Client
 * implementations must ensure only appropriately privileged actors invoke this
 * operation. Public surfaces should continue to expose only aggregate counts,
 * and individual users should rely on self-scoped history endpoints for their
 * own votes.
 *
 * This operation ties records to posts via econ_discuss_post_id (foreign key to
 * econ_discuss_posts) and to voters via econ_discuss_user_id (foreign key to
 * econ_discuss_users). The unique constraint on (econ_discuss_user_id,
 * econ_discuss_post_id) ensures idempotency for a user’s vote on a given post.
 * Implementations may exclude rows with a non-null deleted_at from active
 * result sets while preserving them in storage for audit purposes. Validation
 * includes checking enum values for vote_type and status, applying created_at
 * date-range bounds, and enforcing page and pageSize limits. Related
 * operations: casting or changing a vote (POST /posts/{postId}/votes) and
 * withdrawing a self vote (DELETE /posts/{postId}/votes/self).
 *
 * @param props.connection
 * @param props.postId Target post’s UUID whose votes are being queried
 * @param props.body Filter set and pagination controls for vote search (type,
 *   status, date range, sort)
 * @path /econDiscuss/admin/posts/:postId/votes
 * @accessor api.functional.econDiscuss.admin.posts.votes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target post’s UUID whose votes are being queried */
    postId: string & tags.Format<"uuid">;

    /**
     * Filter set and pagination controls for vote search (type, status,
     * date range, sort)
     */
    body: IEconDiscussPostVote.IRequest;
  };
  export type Body = IEconDiscussPostVote.IRequest;
  export type Response = IPageIEconDiscussPostVote.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/admin/posts/:postId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/admin/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): IPageIEconDiscussPostVote.ISummary =>
    typia.random<IPageIEconDiscussPostVote.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
