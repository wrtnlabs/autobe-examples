import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIEconDiscussPostSnapshot } from "../../../../structures/IPageIEconDiscussPostSnapshot";
import { IEconDiscussPostSnapshot } from "../../../../structures/IEconDiscussPostSnapshot";

/**
 * List versions of a post from econ_discuss_post_snapshots (simple listing).
 *
 * This read-only endpoint enumerates the version history of a post using the
 * econ_discuss_post_snapshots table, which stores immutable snapshots of a
 * post’s title, body, optional summary, and the contemporaneous published_at
 * value. Each snapshot is uniquely identified by (econ_discuss_post_id,
 * version) and carries created_at/updated_at timestamps to support ordering.
 * Implementations should default to a consistent ordering such as version DESC
 * or created_at DESC.
 *
 * Visibility must respect policy: snapshots linked to posts or records that
 * have been retired via deleted_at should not be exposed to public users unless
 * permitted by governance rules. If the parent post cannot be found, the server
 * returns 404. This endpoint is designed for straightforward listing, while
 * more advanced filtering and sorting are provided by the PATCH variant.
 *
 * Related entities: econ_discuss_posts (parent post),
 * econ_discuss_post_snapshots (versions), and econ_discuss_users (editor).
 * Common errors include 400 for malformed identifiers, 404 for missing post,
 * and 429 for rate limits.
 *
 * @param props.connection
 * @param props.postId Target post identifier (econ_discuss_posts.id).
 * @path /econDiscuss/posts/:postId/versions
 * @accessor api.functional.econDiscuss.posts.versions.list
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function list(
  connection: IConnection,
  props: list.Props,
): Promise<list.Response> {
  return true === connection.simulate
    ? list.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...list.METADATA,
          path: list.path(props),
          status: null,
        },
      );
}
export namespace list {
  export type Props = {
    /** Target post identifier (econ_discuss_posts.id). */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIEconDiscussPostSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/posts/:postId/versions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/posts/${encodeURIComponent(props.postId ?? "null")}/versions`;
  export const random = (): IPageIEconDiscussPostSnapshot =>
    typia.random<IPageIEconDiscussPostSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: list.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: list.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search versions of a post from econ_discuss_post_snapshots with pagination.
 *
 * The econ_discuss_post_snapshots model records immutable versioned copies of a
 * post’s text fields and publication state, keyed by (econ_discuss_post_id,
 * version). Each record includes title, body, optional summary, optional
 * published_at at the time of capture, and timestamps (created_at, updated_at).
 * This endpoint lists those snapshots for a specific post identified by postId.
 * Clients can request pagination and sorting (e.g., by version descending or
 * created_at) and optionally filter by version ranges via the request body.
 *
 * This operation is read-only and is typically public, as it exposes the
 * historical states of published content. However, providers should ensure
 * appropriate filtering if the parent post or individual snapshots have been
 * retired via deleted_at or are otherwise restricted by policy. The endpoint
 * only surfaces snapshots where policy permits; if the parent post does not
 * exist, the server should return 404.
 *
 * Related entities include econ_discuss_posts (the parent),
 * econ_discuss_post_snapshots (the versions), and joins to econ_discuss_users
 * for the editor/author metadata stored in
 * econ_discuss_post_snapshots.econ_discuss_user_id. Standard errors: 400 for
 * invalid pagination parameters, 404 if the postId is unknown, and 429 if
 * search rate limits are exceeded.
 *
 * @param props.connection
 * @param props.postId Target post identifier (econ_discuss_posts.id).
 * @param props.body Search, filter, sort, and pagination parameters for listing
 *   snapshots of the specified post.
 * @path /econDiscuss/posts/:postId/versions
 * @accessor api.functional.econDiscuss.posts.versions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target post identifier (econ_discuss_posts.id). */
    postId: string & tags.Format<"uuid">;

    /**
     * Search, filter, sort, and pagination parameters for listing snapshots
     * of the specified post.
     */
    body: IEconDiscussPostSnapshot.IRequest;
  };
  export type Body = IEconDiscussPostSnapshot.IRequest;
  export type Response = IPageIEconDiscussPostSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/posts/:postId/versions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/posts/${encodeURIComponent(props.postId ?? "null")}/versions`;
  export const random = (): IPageIEconDiscussPostSnapshot =>
    typia.random<IPageIEconDiscussPostSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific post version (econ_discuss_post_snapshots) by version number.
 *
 * This operation retrieves a single immutable snapshot from
 * econ_discuss_post_snapshots for the post identified by postId and the
 * specific version number provided in the URL. The snapshot includes the
 * versioned title, body, optional summary, and the published_at value at the
 * time of capture, as defined in the schema comments. These records serve
 * public version history and audit requirements, enabling clients to display
 * precise historical content states.
 *
 * Access is typically public for published content; however, providers should
 * apply visibility rules if the post or the snapshot has been retired
 * (deleted_at populated) or restricted by policy. If the parent post or the
 * requested version does not exist, return 404. Implementations should validate
 * that version is a positive integer and handle malformed values with 400
 * responses.
 *
 * This endpoint ties to econ_discuss_posts for the parent and may reference the
 * editor via econ_discuss_post_snapshots.econ_discuss_user_id. Expected errors:
 * 400 for invalid version format, 404 when the snapshot is not found, and 429
 * for rate limits. The response returns the detailed snapshot entity.
 *
 * @param props.connection
 * @param props.postId Target post identifier (econ_discuss_posts.id).
 * @param props.version Version number of the snapshot within the post.
 * @path /econDiscuss/posts/:postId/versions/:version
 * @accessor api.functional.econDiscuss.posts.versions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target post identifier (econ_discuss_posts.id). */
    postId: string & tags.Format<"uuid">;

    /** Version number of the snapshot within the post. */
    version: number & tags.Type<"int32">;
  };
  export type Response = IEconDiscussPostSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/posts/:postId/versions/:version",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/posts/${encodeURIComponent(props.postId ?? "null")}/versions/${encodeURIComponent(props.version ?? "null")}`;
  export const random = (): IEconDiscussPostSnapshot =>
    typia.random<IEconDiscussPostSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("version")(() => typia.assert(props.version));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
