import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussPollOption } from "../../../../../structures/IEconDiscussPollOption";
import { IPageIEconDiscussPollOption } from "../../../../../structures/IPageIEconDiscussPollOption";

/**
 * List poll options for a post’s poll (Prisma: econ_discuss_poll_options).
 *
 * This operation lists poll options for the poll that belongs to the specified
 * post. At the database level, options are stored in the
 * econ_discuss_poll_options table, which includes columns id (UUID),
 * econ_discuss_poll_id (UUID FK), option_text (String), position (Int),
 * created_at (timestamp with time zone), updated_at (timestamp with time zone),
 * and deleted_at (timestamp with time zone). Options are linked to the parent
 * poll in econ_discuss_polls via econ_discuss_poll_id. The parent poll is
 * itself one-to-one with the post in econ_discuss_posts through a unique
 * constraint on econ_discuss_post_id.
 *
 * Security and authorization are handled by business logic. Read access to
 * published poll options is typically public. The controller/provider should
 * verify that the given postId exists and that a poll exists for it. Role- and
 * policy-based filtering can be applied as needed (for example, hiding options
 * for unsupported question types), but this endpoint itself is designed as a
 * public read surface.
 *
 * This list operation supports pagination and optional searching by
 * option_text. The provider may default sorting to position ascending to
 * reflect the intended display order defined by the position column in
 * econ_discuss_poll_options. Records where deleted_at is not null should be
 * excluded by default. If the post has no poll configured, return an empty page
 * rather than an error.
 *
 * Related operations include creating new options (POST
 * /posts/{postId}/poll/options), retrieving a specific option (GET
 * /posts/{postId}/poll/options/{optionId}), and updating an option (PUT
 * /posts/{postId}/poll/options/{optionId}). Errors include 404 when the post
 * does not exist, 400 for malformed pagination parameters, and 500 for
 * unexpected failures.
 *
 * @param props.connection
 * @param props.postId Post identifier whose poll’s options are being listed
 * @param props.body Search and pagination parameters for listing poll options
 * @path /econDiscuss/posts/:postId/poll/options
 * @accessor api.functional.econDiscuss.posts.poll.options.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Post identifier whose poll’s options are being listed */
    postId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for listing poll options */
    body: IEconDiscussPollOption.IRequest;
  };
  export type Body = IEconDiscussPollOption.IRequest;
  export type Response = IPageIEconDiscussPollOption.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/econDiscuss/posts/:postId/poll/options",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/econDiscuss/posts/${encodeURIComponent(props.postId ?? "null")}/poll/options`;
  export const random = (): IPageIEconDiscussPollOption.ISummary =>
    typia.random<IPageIEconDiscussPollOption.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific poll option by ID for a post’s poll (Prisma:
 * econ_discuss_poll_options).
 *
 * This operation returns a single poll option record after verifying context.
 * In the Prisma schema, the econ_discuss_poll_options table contains id (UUID),
 * econ_discuss_poll_id (UUID FK), option_text (String), position (Int),
 * created_at, updated_at, and deleted_at. The parent poll is in
 * econ_discuss_polls and is uniquely associated to a post in econ_discuss_posts
 * through econ_discuss_post_id.
 *
 * For security, read access to poll options is typically public; however, the
 * provider must ensure the specified optionId indeed belongs to the poll
 * attached to postId. If the option’s deleted_at is not null or if the post has
 * no poll, the resource should be treated as not found. This operation does not
 * change data and does not require authentication for public polls; business
 * logic may still apply policy checks.
 *
 * Validation rules include confirming that the post exists, that a poll exists
 * for that post, and that the option belongs to that poll. Expected errors are
 * 404 when any of these checks fail, 400 for invalid UUID formats in path
 * parameters, and 500 on unexpected failures.
 *
 * @param props.connection
 * @param props.postId Post identifier whose poll owns the target option
 * @param props.optionId Target poll option’s ID
 * @path /econDiscuss/posts/:postId/poll/options/:optionId
 * @accessor api.functional.econDiscuss.posts.poll.options.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Post identifier whose poll owns the target option */
    postId: string & tags.Format<"uuid">;

    /** Target poll option’s ID */
    optionId: string & tags.Format<"uuid">;
  };
  export type Response = IEconDiscussPollOption;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/posts/:postId/poll/options/:optionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/posts/${encodeURIComponent(props.postId ?? "null")}/poll/options/${encodeURIComponent(props.optionId ?? "null")}`;
  export const random = (): IEconDiscussPollOption =>
    typia.random<IEconDiscussPollOption>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("optionId")(() => typia.assert(props.optionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
