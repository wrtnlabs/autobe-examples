import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussPoll } from "../../../../structures/IEconDiscussPoll";
export * as options from "./options/index";
export * as results from "./results/index";

/**
 * Get poll configuration for a post (econ_discuss_polls).
 *
 * This GET endpoint returns the poll configuration for the given post based on
 * the econ_discuss_polls table. According to the Prisma comments,
 * econ_discuss_polls captures the question prompt, question_type
 * (single_choice, multiple_choice, likert, ranking, numeric_estimate),
 * visibility_mode (hidden_until_close, visible_after_vote, always_visible), an
 * expert_only boolean gate, allow_vote_change, optional eligibility thresholds
 * (min_voter_reputation, min_account_age_hours), per-type configuration
 * (min_selections, max_selections for multiple choice; scale_points and
 * endpoint labels for likert; unit_label and
 * numeric_min/numeric_max/numeric_step for numeric estimates), and scheduling
 * via start_at and end_at timestamps.
 *
 * Security and visibility: This is a read-only operation that does not expose
 * respondent identities or individual response data from
 * econ_discuss_poll_responses. It should respect policy signals implied by
 * visibility_mode and expert_only when clients later decide whether to show
 * running results; those behaviors are handled in other endpoints. If a row
 * exists with a deletion timestamp (deleted_at), providers SHOULD return 404 to
 * signal the poll is unavailable.
 *
 * Relationships: Options are stored in econ_discuss_poll_options (unique
 * option_text and position per poll). Responses are in
 * econ_discuss_poll_responses with selection rows in
 * econ_discuss_poll_response_options. This operation does not modify any of
 * those tables and returns 404 when no poll is associated with the specified
 * post (no econ_discuss_polls row for the given econ_discuss_post_id).
 *
 * @param props.connection
 * @param props.postId Target post’s UUID that hosts the poll.
 * @path /econDiscuss/posts/:postId/poll
 * @accessor api.functional.econDiscuss.posts.poll.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target post’s UUID that hosts the poll. */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IEconDiscussPoll;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/posts/:postId/poll",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/posts/${encodeURIComponent(props.postId ?? "null")}/poll`;
  export const random = (): IEconDiscussPoll =>
    typia.random<IEconDiscussPoll>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
