import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussLiveThread } from "../../../../structures/IEconDiscussLiveThread";
export * as messages from "./messages/index";

/**
 * Get the live thread associated with a post (econ_discuss_live_threads via
 * post relation).
 *
 * Return the live thread bound to a post identified by postId. The
 * econ_discuss_live_threads schema guarantees at most one thread per post
 * (unique econ_discuss_post_id). The resource includes state transitions
 * (scheduled_start_at, started_at, paused_at, ended_at, archived_at),
 * configuration flags (expert_only, access_scope), host_user_id, and optional
 * slow_mode_interval_seconds. All timestamp columns are timestamptz.
 *
 * Security: public read with policy-based filtering. Records with deleted_at
 * set are considered inactive and must not be returned. If access_scope limits
 * visibility (e.g., invite_only), the provider should respond with denial or
 * not-found for unauthorized viewers, consistent with policy. This endpoint is
 * read-only and does not modify state.
 *
 * Validation and related endpoints: validate postId format and existence of a
 * corresponding econ_discuss_posts row. If no live thread exists for the post,
 * return 404. For searching threads across posts use PATCH /liveThreads, and
 * for direct ID-based retrieval use GET /liveThreads/{liveThreadId}.
 *
 * @param props.connection
 * @param props.postId Identifier of the host post to which the live thread is
 *   attached
 * @path /econDiscuss/posts/:postId/live
 * @accessor api.functional.econDiscuss.posts.live.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the host post to which the live thread is attached */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IEconDiscussLiveThread;

  export const METADATA = {
    method: "GET",
    path: "/econDiscuss/posts/:postId/live",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/econDiscuss/posts/${encodeURIComponent(props.postId ?? "null")}/live`;
  export const random = (): IEconDiscussLiveThread =>
    typia.random<IEconDiscussLiveThread>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
