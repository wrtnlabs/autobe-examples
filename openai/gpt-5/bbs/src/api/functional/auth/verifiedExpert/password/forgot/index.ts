import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussVerifiedExpertPassword } from "../../../../../structures/IEconDiscussVerifiedExpertPassword";

/**
 * Request password reset for an econ_discuss_users account by email.
 *
 * This public operation accepts an email and, if a matching
 * econ_discuss_users.email exists, initiates a reset process by sending a
 * tokenized link. To prevent user enumeration, responses are generic regardless
 * of account presence. The endpoint does not modify econ_discuss_users at this
 * stage; password_hash is changed only by the reset endpoint.
 *
 * Security considerations include rate limiting and token TTL enforcement. The
 * presence of email_verified does not block issuing a reset; however, business
 * policy may choose to require verified emails.
 *
 * Use together with the password reset endpoint that consumes the token and
 * writes a new password hash to econ_discuss_users.password_hash.
 *
 * @param props.connection
 * @param props.body Email address to receive reset instructions.
 * @path /auth/verifiedExpert/password/forgot
 * @accessor api.functional.auth.verifiedExpert.password.forgot.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<void> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Email address to receive reset instructions. */
    body: IEconDiscussVerifiedExpertPassword.IRequest;
  };
  export type Body = IEconDiscussVerifiedExpertPassword.IRequest;

  export const METADATA = {
    method: "POST",
    path: "/auth/verifiedExpert/password/forgot",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/verifiedExpert/password/forgot";
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
