import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussVerifiedExpertEmailVerify } from "../../../../../structures/IEconDiscussVerifiedExpertEmailVerify";
import { IEconDiscussVerifiedExpertEmail } from "../../../../../structures/IEconDiscussVerifiedExpertEmail";

/**
 * Verify email by setting econ_discuss_users.email_verified = true.
 *
 * This public endpoint processes a verification token, and on success, sets
 * econ_discuss_users.email_verified to true for the corresponding account in
 * econ_discuss_users, refreshing updated_at. It does not alter password_hash,
 * MFA fields, or profile preferences.
 *
 * Security considerations include one‑time token consumption, short token
 * expiry, and neutral error messaging to avoid account enumeration. After
 * success, the account’s participation restrictions related to email
 * verification can be lifted immediately per policy.
 *
 * @param props.connection
 * @param props.body Verification token container.
 * @path /auth/verifiedExpert/email/verify
 * @accessor api.functional.auth.verifiedExpert.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Verification token container. */
    body: IEconDiscussVerifiedExpertEmailVerify.ICreate;
  };
  export type Body = IEconDiscussVerifiedExpertEmailVerify.ICreate;
  export type Response = IEconDiscussVerifiedExpertEmail.IVerified;

  export const METADATA = {
    method: "POST",
    path: "/auth/verifiedExpert/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/verifiedExpert/email/verify";
  export const random = (): IEconDiscussVerifiedExpertEmail.IVerified =>
    typia.random<IEconDiscussVerifiedExpertEmail.IVerified>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
