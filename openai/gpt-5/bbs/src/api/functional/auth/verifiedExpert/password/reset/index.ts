import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussVerifiedExpertPasswordReset } from "../../../../../structures/IEconDiscussVerifiedExpertPasswordReset";

/**
 * Reset password by updating econ_discuss_users.password_hash after token
 * validation.
 *
 * This endpoint finalizes a password reset by validating a token and setting a
 * new econ_discuss_users.password_hash derived from the submitted password. It
 * does not change email, display_name, or MFA fields. updated_at is refreshed
 * for audit purposes.
 *
 * Security rules include singleâ€‘use tokens, short expiry, and generic error
 * messaging. A successful reset can optionally invalidate outstanding refresh
 * tokens according to policy, implemented outside of the schema.
 *
 * This endpoint pairs with the password reset request and can be followed by a
 * normal login to obtain tokens.
 *
 * @param props.connection
 * @param props.body Token and new password for resetting credentials.
 * @path /auth/verifiedExpert/password/reset
 * @accessor api.functional.auth.verifiedExpert.password.reset.resetPassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPassword(
  connection: IConnection,
  props: resetPassword.Props,
): Promise<resetPassword.Response> {
  return true === connection.simulate
    ? resetPassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPassword.METADATA,
          path: resetPassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resetPassword {
  export type Props = {
    /** Token and new password for resetting credentials. */
    body: IEconDiscussVerifiedExpertPasswordReset.ICreate;
  };
  export type Body = IEconDiscussVerifiedExpertPasswordReset.ICreate;
  export type Response = IEconDiscussVerifiedExpertPasswordReset.IResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/verifiedExpert/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/verifiedExpert/password/reset";
  export const random = (): IEconDiscussVerifiedExpertPasswordReset.IResult =>
    typia.random<IEconDiscussVerifiedExpertPasswordReset.IResult>();
  export const simulate = (
    connection: IConnection,
    props: resetPassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
