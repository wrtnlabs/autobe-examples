import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussVerifiedExpertEmail } from "../../../../structures/IEconDiscussVerifiedExpertEmail";
export * as verify from "./verify/index";

/**
 * Send email verification link for econ_discuss_users.email (sets
 * email_verified via separate verify).
 *
 * This authenticated endpoint triggers delivery of a verification link to the
 * current userâ€™s econ_discuss_users.email. It does not write to the database
 * itself; instead, the link leads to the verification endpoint which flips
 * econ_discuss_users.email_verified to true upon successful token validation.
 * The endpoint is restricted to the verifiedExpert role context for the current
 * session.
 *
 * Security notes include rate limiting and generic responses to avoid email
 * enumeration through timing. The presence of deleted_at should prevent
 * sending. This endpoint supports policies that require verified email for
 * posting, voting, and following.
 *
 * @param props.connection
 * @param props.body Optional payload to localize or route the verification
 *   send.
 * @path /auth/verifiedExpert/email/sendVerification
 * @accessor api.functional.auth.verifiedExpert.email.sendVerification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function sendVerification(
  connection: IConnection,
  props: sendVerification.Props,
): Promise<sendVerification.Response> {
  return true === connection.simulate
    ? sendVerification.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...sendVerification.METADATA,
          path: sendVerification.path(),
          status: null,
        },
        props.body,
      );
}
export namespace sendVerification {
  export type Props = {
    /** Optional payload to localize or route the verification send. */
    body: IEconDiscussVerifiedExpertEmail.IRequest;
  };
  export type Body = IEconDiscussVerifiedExpertEmail.IRequest;
  export type Response = IEconDiscussVerifiedExpertEmail.ISent;

  export const METADATA = {
    method: "POST",
    path: "/auth/verifiedExpert/email/sendVerification",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/verifiedExpert/email/sendVerification";
  export const random = (): IEconDiscussVerifiedExpertEmail.ISent =>
    typia.random<IEconDiscussVerifiedExpertEmail.ISent>();
  export const simulate = (
    connection: IConnection,
    props: sendVerification.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: sendVerification.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
