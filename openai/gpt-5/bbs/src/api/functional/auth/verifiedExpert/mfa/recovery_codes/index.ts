import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussVerifiedExpertMfaRecovery } from "../../../../../structures/IEconDiscussVerifiedExpertMfaRecovery";
import { IEconDiscussVerifiedExpertMfa } from "../../../../../structures/IEconDiscussVerifiedExpertMfa";

/**
 * Regenerate econ_discuss_users.mfa_recovery_codes for an MFA‑enabled account.
 *
 * This endpoint produces a fresh set of recovery codes and persists them in
 * econ_discuss_users.mfa_recovery_codes, invalidating any previously issued
 * codes. It requires the user to be MFA‑enabled (econ_discuss_users.mfa_enabled
 * = true) and authenticated in the verifiedExpert context. The operation does
 * not alter the TOTP secret unless policy dictates rotation.
 *
 * On completion, the response returns the newly generated codes once; they
 * should not be retrievable again, aligning with security best practices.
 *
 * @param props.connection
 * @param props.body Recovery code regeneration request.
 * @path /auth/verifiedExpert/mfa/recovery-codes
 * @accessor api.functional.auth.verifiedExpert.mfa.recovery_codes.regenerateMfaRecoveryCodes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function regenerateMfaRecoveryCodes(
  connection: IConnection,
  props: regenerateMfaRecoveryCodes.Props,
): Promise<regenerateMfaRecoveryCodes.Response> {
  return true === connection.simulate
    ? regenerateMfaRecoveryCodes.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...regenerateMfaRecoveryCodes.METADATA,
          path: regenerateMfaRecoveryCodes.path(),
          status: null,
        },
        props.body,
      );
}
export namespace regenerateMfaRecoveryCodes {
  export type Props = {
    /** Recovery code regeneration request. */
    body: IEconDiscussVerifiedExpertMfaRecovery.ICreate;
  };
  export type Body = IEconDiscussVerifiedExpertMfaRecovery.ICreate;
  export type Response = IEconDiscussVerifiedExpertMfa.IRecoveryCodes;

  export const METADATA = {
    method: "POST",
    path: "/auth/verifiedExpert/mfa/recovery-codes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/verifiedExpert/mfa/recovery-codes";
  export const random = (): IEconDiscussVerifiedExpertMfa.IRecoveryCodes =>
    typia.random<IEconDiscussVerifiedExpertMfa.IRecoveryCodes>();
  export const simulate = (
    connection: IConnection,
    props: regenerateMfaRecoveryCodes.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: regenerateMfaRecoveryCodes.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
