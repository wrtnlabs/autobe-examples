import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussVerifiedExpertMfaEnroll } from "../../../../../structures/IEconDiscussVerifiedExpertMfaEnroll";
import { IEconDiscussVerifiedExpertMfa } from "../../../../../structures/IEconDiscussVerifiedExpertMfa";

/**
 * Begin 2FA setup using econ_discuss_users.mfa_secret and recovery codes.
 *
 * This endpoint prepares multi‑factor authentication by creating a new secret
 * for TOTP (stored in econ_discuss_users.mfa_secret) and issuing provisional
 * recovery codes (stored in econ_discuss_users.mfa_recovery_codes after
 * confirmation). It should present a provisioning URI for authenticator apps.
 * mfa_enabled remains false until the verify step succeeds, ensuring incomplete
 * enrollments do not lock users out.
 *
 * Security and integrity require rotating any existing secret and invalidating
 * prior recovery codes on re‑enroll attempts. This operation affects only the
 * current user’s econ_discuss_users row and records updated_at; email and
 * password_hash remain unchanged.
 *
 * @param props.connection
 * @param props.body Enrollment request (e.g., method TOTP).
 * @path /auth/verifiedExpert/mfa/enroll
 * @accessor api.functional.auth.verifiedExpert.mfa.enroll.enrollMfa
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function enrollMfa(
  connection: IConnection,
  props: enrollMfa.Props,
): Promise<enrollMfa.Response> {
  return true === connection.simulate
    ? enrollMfa.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...enrollMfa.METADATA,
          path: enrollMfa.path(),
          status: null,
        },
        props.body,
      );
}
export namespace enrollMfa {
  export type Props = {
    /** Enrollment request (e.g., method TOTP). */
    body: IEconDiscussVerifiedExpertMfaEnroll.ICreate;
  };
  export type Body = IEconDiscussVerifiedExpertMfaEnroll.ICreate;
  export type Response = IEconDiscussVerifiedExpertMfa.IEnroll;

  export const METADATA = {
    method: "POST",
    path: "/auth/verifiedExpert/mfa/enroll",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/verifiedExpert/mfa/enroll";
  export const random = (): IEconDiscussVerifiedExpertMfa.IEnroll =>
    typia.random<IEconDiscussVerifiedExpertMfa.IEnroll>();
  export const simulate = (
    connection: IConnection,
    props: enrollMfa.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: enrollMfa.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
