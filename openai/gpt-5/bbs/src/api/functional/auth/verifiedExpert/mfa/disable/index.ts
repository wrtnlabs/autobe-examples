import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussVerifiedExpertMfaDisable } from "../../../../../structures/IEconDiscussVerifiedExpertMfaDisable";
import { IEconDiscussVerifiedExpertMfa } from "../../../../../structures/IEconDiscussVerifiedExpertMfa";

/**
 * Disable MFA by updating econ_discuss_users.mfa_enabled and clearing secrets.
 *
 * This operation turns off multi‑factor authentication by updating
 * econ_discuss_users: set mfa_enabled = false and clear or rotate mfa_secret
 * and mfa_recovery_codes according to policy after validating a current TOTP or
 * a valid recovery code. It does not touch email, password_hash, or display
 * fields.
 *
 * Disabling MFA should be guarded by recent authentication and step‑up
 * verification. On success, subsequent logins will no longer require a second
 * factor.
 *
 * @param props.connection
 * @param props.body Confirmation via code to disable.
 * @path /auth/verifiedExpert/mfa/disable
 * @accessor api.functional.auth.verifiedExpert.mfa.disable.disableMfa
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function disableMfa(
  connection: IConnection,
  props: disableMfa.Props,
): Promise<disableMfa.Response> {
  return true === connection.simulate
    ? disableMfa.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...disableMfa.METADATA,
          path: disableMfa.path(),
          status: null,
        },
        props.body,
      );
}
export namespace disableMfa {
  export type Props = {
    /** Confirmation via code to disable. */
    body: IEconDiscussVerifiedExpertMfaDisable.ICreate;
  };
  export type Body = IEconDiscussVerifiedExpertMfaDisable.ICreate;
  export type Response = IEconDiscussVerifiedExpertMfa.IStatus;

  export const METADATA = {
    method: "POST",
    path: "/auth/verifiedExpert/mfa/disable",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/verifiedExpert/mfa/disable";
  export const random = (): IEconDiscussVerifiedExpertMfa.IStatus =>
    typia.random<IEconDiscussVerifiedExpertMfa.IStatus>();
  export const simulate = (
    connection: IConnection,
    props: disableMfa.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: disableMfa.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
