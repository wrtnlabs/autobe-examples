import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussMember } from "../../../../../structures/IEconDiscussMember";

/**
 * Enable 2FA by setting econ_discuss_users.mfa_enabled=true after verifying
 * code.
 *
 * This endpoint completes 2FA activation. It checks a submitted code against
 * the secret stored in econ_discuss_users.mfa_secret. When valid, it flips
 * mfa_enabled to true and updates updated_at. Recovery codes
 * (mfa_recovery_codes) remain available for emergency login and are not
 * returned again.
 *
 * This operation is restricted to authenticated members and can be required
 * before elevated actions per policy.
 *
 * @param props.connection
 * @param props.body Verification code or recovery code to complete 2FA
 *   activation.
 * @path /auth/member/mfa/verify
 * @accessor api.functional.auth.member.mfa.verify.mfaVerify
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function mfaVerify(
  connection: IConnection,
  props: mfaVerify.Props,
): Promise<mfaVerify.Response> {
  return true === connection.simulate
    ? mfaVerify.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...mfaVerify.METADATA,
          path: mfaVerify.path(),
          status: null,
        },
        props.body,
      );
}
export namespace mfaVerify {
  export type Props = {
    /** Verification code or recovery code to complete 2FA activation. */
    body: IEconDiscussMember.IMfaVerify;
  };
  export type Body = IEconDiscussMember.IMfaVerify;
  export type Response = IEconDiscussMember.IMfaEnabled;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/mfa/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/mfa/verify";
  export const random = (): IEconDiscussMember.IMfaEnabled =>
    typia.random<IEconDiscussMember.IMfaEnabled>();
  export const simulate = (
    connection: IConnection,
    props: mfaVerify.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: mfaVerify.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
