import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussMember } from "../../../../../structures/IEconDiscussMember";

/**
 * Verify member email by setting econ_discuss_users.email_verified=true.
 *
 * This operation flips the email_verified boolean in econ_discuss_users to true
 * after successful verification of a client-provided token. The table columns
 * referenced include email_verified and updated_at for auditing. The userâ€™s
 * identity mapping aligns with econ_discuss_users.id derived from the token.
 *
 * This function complements registration at /auth/member/join and unlocks
 * platform actions gated by verified email. It does not return secrets or
 * tokens; it simply confirms verification status.
 *
 * Error cases include invalid or expired verification token or already verified
 * addresses. On idempotent replays where email_verified is already true, the
 * service may return success without change.
 *
 * @param props.connection
 * @param props.body Verification token to confirm the email address.
 * @path /auth/member/email/verify
 * @accessor api.functional.auth.member.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Verification token to confirm the email address. */
    body: IEconDiscussMember.IEmailVerifyRequest;
  };
  export type Body = IEconDiscussMember.IEmailVerifyRequest;
  export type Response = IEconDiscussMember.IEmailVerification;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/email/verify";
  export const random = (): IEconDiscussMember.IEmailVerification =>
    typia.random<IEconDiscussMember.IEmailVerification>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
