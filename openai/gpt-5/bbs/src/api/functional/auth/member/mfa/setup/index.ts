import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IEconDiscussMember } from "../../../../../structures/IEconDiscussMember";

/**
 * Initiate 2FA enrollment using econ_discuss_users.mfa_secret and
 * mfa_recovery_codes (mfa_enabled remains false).
 *
 * This operation initiates multi-factor authentication for a Member. In the
 * econ_discuss_users table, 2FA artifacts include mfa_secret,
 * mfa_recovery_codes, and mfa_enabled. The setup call stores a new mfa_secret
 * and a fresh set of mfa_recovery_codes in encrypted/hashed form and keeps
 * mfa_enabled=false until a successful verification occurs.
 *
 * The response DTO presents client-side provisioning data suitable for an
 * authenticator app (URI string representation) and any necessary hints; raw
 * secrets are never logged, and recovery codes are presented only at generation
 * time.
 *
 * This endpoint is restricted to authenticated members and does not affect role
 * assignments in econ_discuss_members.
 *
 * @param props.connection
 * @path /auth/member/mfa/setup
 * @accessor api.functional.auth.member.mfa.setup.mfaSetup
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function mfaSetup(
  connection: IConnection,
): Promise<mfaSetup.Response> {
  return true === connection.simulate
    ? mfaSetup.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...mfaSetup.METADATA,
          path: mfaSetup.path(),
          status: null,
        },
      );
}
export namespace mfaSetup {
  export type Response = IEconDiscussMember.IMfaSetup;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/mfa/setup",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/mfa/setup";
  export const random = (): IEconDiscussMember.IMfaSetup =>
    typia.random<IEconDiscussMember.IMfaSetup>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
