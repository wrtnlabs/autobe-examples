import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussMember } from "../../../../structures/IEconDiscussMember";
export * as reset from "./reset/index";

/**
 * Change credential by updating econ_discuss_users.password_hash for the
 * authenticated member.
 *
 * This operation allows a logged-in member to change their password. It
 * validates the current password against password_hash in econ_discuss_users,
 * computes a new password_hash from the submitted new password, and updates the
 * record (also updating updated_at). Email and role rows (econ_discuss_members)
 * are unaffected.
 *
 * This endpoint complements password reset flows and follows the schema
 * guidance never to store plaintext passwords. It may optionally require
 * additional confirmation when mfa_enabled is true.
 *
 * @param props.connection
 * @param props.body Current and new password values for update.
 * @path /auth/member/password
 * @accessor api.functional.auth.member.password.updatePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePassword(
  connection: IConnection,
  props: updatePassword.Props,
): Promise<updatePassword.Response> {
  return true === connection.simulate
    ? updatePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePassword.METADATA,
          path: updatePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace updatePassword {
  export type Props = {
    /** Current and new password values for update. */
    body: IEconDiscussMember.IUpdatePassword;
  };
  export type Body = IEconDiscussMember.IUpdatePassword;
  export type Response = IEconDiscussMember.ISecurityEvent;

  export const METADATA = {
    method: "PUT",
    path: "/auth/member/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password";
  export const random = (): IEconDiscussMember.ISecurityEvent =>
    typia.random<IEconDiscussMember.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: updatePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
