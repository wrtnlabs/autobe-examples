import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussMember } from "../../../../../structures/IEconDiscussMember";
export * as confirm from "./confirm/index";

/**
 * Start password reset flow for econ_discuss_users by email (send token).
 *
 * This public endpoint starts a password reset by accepting an email and, if
 * present in econ_discuss_users (unique by email), generating a reset token
 * delivered via email. The service does not reveal whether the address exists,
 * aligning with security guidance. No changes to econ_discuss_users are
 * required at initiation time beyond optional updated_at bookkeeping.
 *
 * Related follow-up is /auth/member/password/reset/confirm which performs the
 * actual credential update. This operation is safe to expose publicly as it
 * does not disclose user existence.
 *
 * @param props.connection
 * @param props.body Email of the account to reset password for.
 * @path /auth/member/password/reset
 * @accessor api.functional.auth.member.password.reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Email of the account to reset password for. */
    body: IEconDiscussMember.IPasswordResetRequest;
  };
  export type Body = IEconDiscussMember.IPasswordResetRequest;
  export type Response = IEconDiscussMember.ISecurityEvent;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/reset";
  export const random = (): IEconDiscussMember.ISecurityEvent =>
    typia.random<IEconDiscussMember.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
