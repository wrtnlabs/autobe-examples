import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IEconDiscussMember } from "../../../../../../structures/IEconDiscussMember";

/**
 * Resend verification email for econ_discuss_users.email when email_verified is
 * false.
 *
 * This operation is available to authenticated members whose
 * econ_discuss_users.email_verified is false. It sends a new verification email
 * to the address stored in econ_discuss_users.email. The endpoint does not
 * change schema fields other than potentially touching updated_at for
 * bookkeeping.
 *
 * The API avoids email enumeration by requiring authentication and not exposing
 * whether an address exists for other accounts. It references the userâ€™s
 * current email from the database and reuses standard verification flows
 * handled by /auth/member/email/verify.
 *
 * Errors include already-verified state and rate-limit restrictions for
 * resends.
 *
 * @param props.connection
 * @path /auth/member/email/verification/resend
 * @accessor api.functional.auth.member.email.verification.resend.resendVerification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resendVerification(
  connection: IConnection,
): Promise<resendVerification.Response> {
  return true === connection.simulate
    ? resendVerification.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resendVerification.METADATA,
          path: resendVerification.path(),
          status: null,
        },
      );
}
export namespace resendVerification {
  export type Response = IEconDiscussMember.IEmailVerification;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/email/verification/resend",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/email/verification/resend";
  export const random = (): IEconDiscussMember.IEmailVerification =>
    typia.random<IEconDiscussMember.IEmailVerification>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
