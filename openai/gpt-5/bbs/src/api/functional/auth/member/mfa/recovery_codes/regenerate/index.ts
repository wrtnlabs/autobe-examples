import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussMember } from "../../../../../../structures/IEconDiscussMember";

/**
 * Regenerate recovery codes by updating econ_discuss_users.mfa_recovery_codes.
 *
 * This endpoint rotates recovery codes used for MFA fallback. It writes a new
 * encrypted/hashed set to econ_discuss_users.mfa_recovery_codes and touches
 * updated_at. The user must provide a valid current TOTP code (or equivalent)
 * to authorize rotation.
 *
 * The operation maintains mfa_enabled as-is and does not alter role membership
 * records.
 *
 * @param props.connection
 * @param props.body Authorization code to regenerate recovery codes.
 * @path /auth/member/mfa/recovery-codes/regenerate
 * @accessor api.functional.auth.member.mfa.recovery_codes.regenerate.regenerateMfaRecoveryCodes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function regenerateMfaRecoveryCodes(
  connection: IConnection,
  props: regenerateMfaRecoveryCodes.Props,
): Promise<regenerateMfaRecoveryCodes.Response> {
  return true === connection.simulate
    ? regenerateMfaRecoveryCodes.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...regenerateMfaRecoveryCodes.METADATA,
          path: regenerateMfaRecoveryCodes.path(),
          status: null,
        },
        props.body,
      );
}
export namespace regenerateMfaRecoveryCodes {
  export type Props = {
    /** Authorization code to regenerate recovery codes. */
    body: IEconDiscussMember.IMfaRegenerateCodes;
  };
  export type Body = IEconDiscussMember.IMfaRegenerateCodes;
  export type Response = IEconDiscussMember.IMfaRecoveryCodes;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/mfa/recovery-codes/regenerate",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/mfa/recovery-codes/regenerate";
  export const random = (): IEconDiscussMember.IMfaRecoveryCodes =>
    typia.random<IEconDiscussMember.IMfaRecoveryCodes>();
  export const simulate = (
    connection: IConnection,
    props: regenerateMfaRecoveryCodes.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: regenerateMfaRecoveryCodes.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
