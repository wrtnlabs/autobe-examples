import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussMember } from "../../../../structures/IEconDiscussMember";
export * as setup from "./setup/index";
export * as verify from "./verify/index";
export * as recovery_codes from "./recovery_codes/index";

/**
 * Disable 2FA by updating econ_discuss_users.mfa_enabled=false and adjusting
 * secrets as required.
 *
 * This endpoint turns off MFA for the user in econ_discuss_users by setting
 * mfa_enabled=false. It may also clear mfa_secret and regenerate
 * mfa_recovery_codes depending on policy; at minimum updated_at is changed. A
 * valid verification (TOTP or recovery code) is required to prevent
 * unauthorized disablement.
 *
 * The operation does not change role assignments in econ_discuss_members and is
 * available only to authenticated members.
 *
 * @param props.connection
 * @param props.body Confirmation code to authorize MFA disable.
 * @path /auth/member/mfa
 * @accessor api.functional.auth.member.mfa.mfaDisable
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function mfaDisable(
  connection: IConnection,
  props: mfaDisable.Props,
): Promise<mfaDisable.Response> {
  return true === connection.simulate
    ? mfaDisable.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...mfaDisable.METADATA,
          path: mfaDisable.path(),
          status: null,
        },
        props.body,
      );
}
export namespace mfaDisable {
  export type Props = {
    /** Confirmation code to authorize MFA disable. */
    body: IEconDiscussMember.IMfaDisable;
  };
  export type Body = IEconDiscussMember.IMfaDisable;
  export type Response = IEconDiscussMember.IMfaDisabled;

  export const METADATA = {
    method: "DELETE",
    path: "/auth/member/mfa",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/mfa";
  export const random = (): IEconDiscussMember.IMfaDisabled =>
    typia.random<IEconDiscussMember.IMfaDisabled>();
  export const simulate = (
    connection: IConnection,
    props: mfaDisable.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: mfaDisable.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
