import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../../../structures/IEconDiscussAdmin";

/**
 * Initiate admin password reset using econ_discuss_users.email.
 *
 * This endpoint starts a password reset flow for an administrator by accepting
 * an email address corresponding to econ_discuss_users.email. It does not
 * directly mutate econ_discuss_users or econ_discuss_admins in the Prisma
 * schema; instead, it triggers an out-of-band token delivery (not modeled).
 *
 * Security considerations include neutral responses to prevent enumeration,
 * rate limiting, and token expiration. The endpoint pairs with the confirm
 * operation that will ultimately update econ_discuss_users.password_hash.
 *
 * This is an unauthenticated security action (authorizationType=null). It
 * exists alongside join/login, refresh, and MFA endpoints as part of the
 * account security toolkit the schema supports through password_hash.
 *
 * @param props.connection
 * @param props.body Email payload to request a password reset link/token.
 * @path /auth/admin/password/reset/request
 * @accessor api.functional.auth.admin.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Email payload to request a password reset link/token. */
    body: IEconDiscussAdmin.IPasswordResetRequest;
  };
  export type Body = IEconDiscussAdmin.IPasswordResetRequest;
  export type Response = IEconDiscussAdmin.ISecurityEvent;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/reset/request";
  export const random = (): IEconDiscussAdmin.ISecurityEvent =>
    typia.random<IEconDiscussAdmin.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
