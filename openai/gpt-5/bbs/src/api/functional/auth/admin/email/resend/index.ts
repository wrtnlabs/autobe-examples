import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../../structures/IEconDiscussAdmin";

/**
 * Resend admin email verification leveraging econ_discuss_users.email and
 * email_verified.
 *
 * This operation resends a verification message to the specified administrator
 * email. It references econ_discuss_users.email to locate the account and
 * checks econ_discuss_users.email_verified to avoid unnecessary dispatch when
 * already verified. The schema comment for econ_discuss_users clarifies that
 * email is the unique login identifier and email_verified tracks ownership
 * confirmation.
 *
 * Because administrators are created via /auth/admin/join and later
 * authenticate with /auth/admin/login, email verification ensures posting
 * sensitive actions (per business policy) occurs only after ownership
 * confirmation. No changes are made to econ_discuss_admins; the role assignment
 * remains intact.
 *
 * Security considerations: the response should avoid disclosing whether an
 * email exists. Rate limiting and lockouts (business policy) should be applied
 * to protect this endpoint. The operation is authorizationType=null because it
 * is not join/login/refresh.
 *
 * The endpoint interacts conceptually with login and MFA flows; once email
 * ownership is confirmed, econ_discuss_users.email_verified can be flipped by
 * the verification-finalization endpoint. Error handling must remain neutral to
 * prevent user enumeration.
 *
 * @param props.connection
 * @param props.body Resend email verification to the provided admin email
 *   address.
 * @path /auth/admin/email/resend
 * @accessor api.functional.auth.admin.email.resend.resendVerificationEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resendVerificationEmail(
  connection: IConnection,
  props: resendVerificationEmail.Props,
): Promise<resendVerificationEmail.Response> {
  return true === connection.simulate
    ? resendVerificationEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resendVerificationEmail.METADATA,
          path: resendVerificationEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resendVerificationEmail {
  export type Props = {
    /** Resend email verification to the provided admin email address. */
    body: IEconDiscussAdmin.IEmailResendRequest;
  };
  export type Body = IEconDiscussAdmin.IEmailResendRequest;
  export type Response = IEconDiscussAdmin.ISecurityEvent;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/email/resend",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/email/resend";
  export const random = (): IEconDiscussAdmin.ISecurityEvent =>
    typia.random<IEconDiscussAdmin.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: resendVerificationEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resendVerificationEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
