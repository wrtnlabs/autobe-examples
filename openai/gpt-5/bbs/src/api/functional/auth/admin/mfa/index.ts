import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../structures/IEconDiscussAdmin";
export * as setup from "./setup/index";
export * as verify from "./verify/index";
export * as recovery_codes from "./recovery_codes/index";

/**
 * Disable admin MFA by updating econ_discuss_users.mfa_enabled and related
 * secrets.
 *
 * This operation disables MFA on an administrator account. It updates
 * econ_discuss_users.mfa_enabled=false and, depending on policy, clears or
 * rotates mfa_secret and mfa_recovery_codes. The econ_discuss_admins row is not
 * directly modified; however, if enforced_2fa is true, this operation may be
 * prevented by policy.
 *
 * Security considerations include strong re-authentication or code verification
 * to authorize disabling MFA and audit logging. Recovery codes should be
 * invalidated during this process to prevent reuse.
 *
 * Used alongside setup and verification endpoints, this completes the MFA
 * lifecycle reflected by the econ_discuss_users schema fields.
 *
 * @param props.connection
 * @param props.body Confirmation payload (e.g., TOTP code or recovery code) to
 *   disable MFA.
 * @path /auth/admin/mfa
 * @accessor api.functional.auth.admin.mfa.disableMfa
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function disableMfa(
  connection: IConnection,
  props: disableMfa.Props,
): Promise<disableMfa.Response> {
  return true === connection.simulate
    ? disableMfa.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...disableMfa.METADATA,
          path: disableMfa.path(),
          status: null,
        },
        props.body,
      );
}
export namespace disableMfa {
  export type Props = {
    /**
     * Confirmation payload (e.g., TOTP code or recovery code) to disable
     * MFA.
     */
    body: IEconDiscussAdmin.IMfaDisableRequest;
  };
  export type Body = IEconDiscussAdmin.IMfaDisableRequest;
  export type Response = IEconDiscussAdmin.ISecurityEvent;

  export const METADATA = {
    method: "DELETE",
    path: "/auth/admin/mfa",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/mfa";
  export const random = (): IEconDiscussAdmin.ISecurityEvent =>
    typia.random<IEconDiscussAdmin.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: disableMfa.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: disableMfa.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
