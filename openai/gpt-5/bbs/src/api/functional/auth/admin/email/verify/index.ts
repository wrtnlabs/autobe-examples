import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../../structures/IEconDiscussAdmin";

/**
 * Verify admin email by toggling econ_discuss_users.email_verified to true
 * using a token.
 *
 * This operation finalizes email verification for an administrator. It
 * processes a verification token (delivered out-of-band) and, on success, sets
 * econ_discuss_users.email_verified=true. The econ_discuss_users schema
 * explicitly includes the email_verified Boolean for this purpose. The
 * operation does not modify econ_discuss_admins; the role assignment is
 * unaffected.
 *
 * Security considerations include token validity windows, single-use semantics,
 * and neutral responses on failure to prevent enumeration. Upon successful
 * verification, implementations may choose to return new tokens if the user is
 * in-session, but token management remains a business decision and does not
 * alter the schema.
 *
 * This endpoint is closely related to /auth/admin/email/resend,
 * /auth/admin/join, and /auth/admin/login. MFA and other security settings
 * (e.g., econ_discuss_users.mfa_enabled) are independent of email
 * verification.
 *
 * The response conveys a security event acknowledgement rather than the full
 * authorization payload, since the authorization state may already be active in
 * the client session.
 *
 * @param props.connection
 * @param props.body Verification token payload to confirm email ownership.
 * @path /auth/admin/email/verify
 * @accessor api.functional.auth.admin.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Verification token payload to confirm email ownership. */
    body: IEconDiscussAdmin.IEmailVerifyRequest;
  };
  export type Body = IEconDiscussAdmin.IEmailVerifyRequest;
  export type Response = IEconDiscussAdmin.ISecurityEvent;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/email/verify";
  export const random = (): IEconDiscussAdmin.ISecurityEvent =>
    typia.random<IEconDiscussAdmin.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
