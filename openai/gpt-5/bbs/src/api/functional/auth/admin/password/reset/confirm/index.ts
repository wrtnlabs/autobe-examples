import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../../../structures/IEconDiscussAdmin";

/**
 * Confirm admin password reset by updating econ_discuss_users.password_hash.
 *
 * This operation completes the password reset by accepting a reset token and
 * new password. On success, it updates econ_discuss_users.password_hash for the
 * identified account. The econ_discuss_admins role assignment is unchanged by
 * this flow.
 *
 * Security considerations include single-use tokens, strict expiration, and
 * neutral error messaging. It should also consider invalidating active refresh
 * tokens where applicable (implementation detail not represented in Prisma
 * schema).
 *
 * This endpoint complements the initiation endpoint and aligns with schema
 * fields by updating only the password_hash column.
 *
 * @param props.connection
 * @param props.body Token and new password to finalize password reset.
 * @path /auth/admin/password/reset/confirm
 * @accessor api.functional.auth.admin.password.reset.confirm.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Token and new password to finalize password reset. */
    body: IEconDiscussAdmin.IPasswordResetConfirm;
  };
  export type Body = IEconDiscussAdmin.IPasswordResetConfirm;
  export type Response = IEconDiscussAdmin.ISecurityEvent;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/password/reset/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password/reset/confirm";
  export const random = (): IEconDiscussAdmin.ISecurityEvent =>
    typia.random<IEconDiscussAdmin.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
