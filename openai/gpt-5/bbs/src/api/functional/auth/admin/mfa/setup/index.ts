import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../../structures/IEconDiscussAdmin";

/**
 * Start admin MFA enrollment using econ_discuss_users.mfa_secret and prepare
 * recovery codes.
 *
 * This endpoint begins MFA enrollment for an authenticated admin. According to
 * Actors.econ_discuss_users, MFA-related fields include mfa_enabled (Boolean),
 * mfa_secret (encrypted/managed), and mfa_recovery_codes (hashed/encrypted).
 * The enrollment step securely generates mfa_secret and provides client
 * bootstrapping data (e.g., an otpauth URI) without enabling MFA yet
 * (mfa_enabled remains false until verification).
 *
 * This operation does not modify econ_discuss_admins, though admins may have
 * enforced_2fa=true in econ_discuss_admins requiring completion of this flow.
 * The field enforced_2fa in econ_discuss_admins is policy enforcement metadata;
 * the secret and enablement flags live in econ_discuss_users.
 *
 * Security considerations include never returning raw recovery codes after
 * initial generation except through dedicated endpoints and ensuring the secret
 * is not stored in plaintext. The response type communicates setup details
 * necessary for the second step.
 *
 * Follow-up verification is required via /auth/admin/mfa/verify, which will
 * flip mfa_enabled to true upon successful code validation against mfa_secret.
 *
 * @param props.connection
 * @param props.body Request to begin MFA setup (e.g., TOTP).
 * @path /auth/admin/mfa/setup
 * @accessor api.functional.auth.admin.mfa.setup.startMfaEnrollment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function startMfaEnrollment(
  connection: IConnection,
  props: startMfaEnrollment.Props,
): Promise<startMfaEnrollment.Response> {
  return true === connection.simulate
    ? startMfaEnrollment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...startMfaEnrollment.METADATA,
          path: startMfaEnrollment.path(),
          status: null,
        },
        props.body,
      );
}
export namespace startMfaEnrollment {
  export type Props = {
    /** Request to begin MFA setup (e.g., TOTP). */
    body: IEconDiscussAdmin.IMfaSetupRequest;
  };
  export type Body = IEconDiscussAdmin.IMfaSetupRequest;
  export type Response = IEconDiscussAdmin.IMfaSetup;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/mfa/setup",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/mfa/setup";
  export const random = (): IEconDiscussAdmin.IMfaSetup =>
    typia.random<IEconDiscussAdmin.IMfaSetup>();
  export const simulate = (
    connection: IConnection,
    props: startMfaEnrollment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: startMfaEnrollment.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
