import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../../../structures/IEconDiscussAdmin";

/**
 * Regenerate admin MFA recovery codes and update
 * econ_discuss_users.mfa_recovery_codes.
 *
 * This operation regenerates recovery codes for an administrator with MFA
 * enabled. It replaces econ_discuss_users.mfa_recovery_codes with a newly
 * generated set (stored securely) and returns the plaintext codes once for the
 * user to store offline. The econ_discuss_users.mfa_enabled Boolean is not
 * changed.
 *
 * Security considerations include strict authentication, rate limits, and
 * one-time display of the new codes. The econ_discuss_admins role assignment is
 * unaffected; enforced_2fa continues to apply.
 *
 * This endpoint should be used after MFA is enabled to maintain account safety
 * in line with the schemaâ€™s mfa_recovery_codes column.
 *
 * @param props.connection
 * @param props.body Confirmation payload for regeneration (e.g., TOTP code).
 * @path /auth/admin/mfa/recovery-codes/regen
 * @accessor api.functional.auth.admin.mfa.recovery_codes.regen.regenerateMfaRecoveryCodes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function regenerateMfaRecoveryCodes(
  connection: IConnection,
  props: regenerateMfaRecoveryCodes.Props,
): Promise<regenerateMfaRecoveryCodes.Response> {
  return true === connection.simulate
    ? regenerateMfaRecoveryCodes.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...regenerateMfaRecoveryCodes.METADATA,
          path: regenerateMfaRecoveryCodes.path(),
          status: null,
        },
        props.body,
      );
}
export namespace regenerateMfaRecoveryCodes {
  export type Props = {
    /** Confirmation payload for regeneration (e.g., TOTP code). */
    body: IEconDiscussAdmin.IMfaRegenerateRequest;
  };
  export type Body = IEconDiscussAdmin.IMfaRegenerateRequest;
  export type Response = IEconDiscussAdmin.IMfaRecoveryCodes;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/mfa/recovery-codes/regen",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/mfa/recovery-codes/regen";
  export const random = (): IEconDiscussAdmin.IMfaRecoveryCodes =>
    typia.random<IEconDiscussAdmin.IMfaRecoveryCodes>();
  export const simulate = (
    connection: IConnection,
    props: regenerateMfaRecoveryCodes.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: regenerateMfaRecoveryCodes.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
