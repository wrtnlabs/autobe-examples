import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../structures/IEconDiscussAdmin";
export * as reset from "./reset/index";

/**
 * Change admin password by updating econ_discuss_users.password_hash.
 *
 * This operation enables a logged-in administrator to change their password. It
 * uses econ_discuss_users.password_hash to verify the current password and
 * persists a new password_hash generated from the provided new password,
 * leaving other identity fields (display_name, timezone, locale) unchanged. The
 * econ_discuss_admins role assignment remains unaffected.
 *
 * Security considerations include strong password policies and invalidation of
 * existing sessions if required by policy. The endpoint must avoid exposing
 * whether password mismatches occurred specifically. Rate limiting should
 * protect against brute-force attempts.
 *
 * Because this is a modification of an existing record, the request follows an
 * update pattern and is restricted by authorizationRole="admin". No path
 * parameters are used.
 *
 * This operation is typically used in conjunction with login/refresh and MFA
 * management endpoints to maintain account hygiene consistent with the schemaâ€™s
 * password_hash field.
 *
 * @param props.connection
 * @param props.body Payload with current and new password for password
 *   rotation.
 * @path /auth/admin/password
 * @accessor api.functional.auth.admin.password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Payload with current and new password for password rotation. */
    body: IEconDiscussAdmin.IChangePassword;
  };
  export type Body = IEconDiscussAdmin.IChangePassword;
  export type Response = IEconDiscussAdmin.ISecurityEvent;

  export const METADATA = {
    method: "PUT",
    path: "/auth/admin/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/password";
  export const random = (): IEconDiscussAdmin.ISecurityEvent =>
    typia.random<IEconDiscussAdmin.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
