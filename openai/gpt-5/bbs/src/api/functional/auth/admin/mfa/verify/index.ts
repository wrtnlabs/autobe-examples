import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEconDiscussAdmin } from "../../../../../structures/IEconDiscussAdmin";

/**
 * Verify admin TOTP and set econ_discuss_users.mfa_enabled=true.
 *
 * This operation completes MFA enrollment by validating a submitted TOTP code
 * against the previously created econ_discuss_users.mfa_secret. On success, it
 * updates econ_discuss_users.mfa_enabled=true. The econ_discuss_admins record
 * remains unchanged, but its enforced_2fa flag should now be satisfiable by the
 * userâ€™s MFA state.
 *
 * Security considerations include limited retries and neutral error messages.
 * The endpoint must ensure the setup step has executed (mfa_secret present)
 * before verification and should not expose secrets.
 *
 * This endpoint is used with the setup endpoint and is required for admins with
 * enforced_2fa in econ_discuss_admins. It reflects the MFA capabilities
 * embedded in the econ_discuss_users schema.
 *
 * @param props.connection
 * @param props.body One-time code verification payload for MFA enablement.
 * @path /auth/admin/mfa/verify
 * @accessor api.functional.auth.admin.mfa.verify.verifyMfa
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyMfa(
  connection: IConnection,
  props: verifyMfa.Props,
): Promise<verifyMfa.Response> {
  return true === connection.simulate
    ? verifyMfa.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyMfa.METADATA,
          path: verifyMfa.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyMfa {
  export type Props = {
    /** One-time code verification payload for MFA enablement. */
    body: IEconDiscussAdmin.IMfaVerifyRequest;
  };
  export type Body = IEconDiscussAdmin.IMfaVerifyRequest;
  export type Response = IEconDiscussAdmin.ISecurityEvent;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/mfa/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/mfa/verify";
  export const random = (): IEconDiscussAdmin.ISecurityEvent =>
    typia.random<IEconDiscussAdmin.ISecurityEvent>();
  export const simulate = (
    connection: IConnection,
    props: verifyMfa.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyMfa.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
