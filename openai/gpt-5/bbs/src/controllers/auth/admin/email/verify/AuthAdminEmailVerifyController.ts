import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminEmailVerify } from "../../../../../providers/postAuthAdminEmailVerify";

import { IEconDiscussAdmin } from "../../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/email/verify")
export class AuthAdminEmailVerifyController {
  /**
   * Verify admin email by toggling econ_discuss_users.email_verified to true
   * using a token.
   *
   * This operation finalizes email verification for an administrator. It
   * processes a verification token (delivered out-of-band) and, on success,
   * sets econ_discuss_users.email_verified=true. The econ_discuss_users schema
   * explicitly includes the email_verified Boolean for this purpose. The
   * operation does not modify econ_discuss_admins; the role assignment is
   * unaffected.
   *
   * Security considerations include token validity windows, single-use
   * semantics, and neutral responses on failure to prevent enumeration. Upon
   * successful verification, implementations may choose to return new tokens if
   * the user is in-session, but token management remains a business decision
   * and does not alter the schema.
   *
   * This endpoint is closely related to /auth/admin/email/resend,
   * /auth/admin/join, and /auth/admin/login. MFA and other security settings
   * (e.g., econ_discuss_users.mfa_enabled) are independent of email
   * verification.
   *
   * The response conveys a security event acknowledgement rather than the full
   * authorization payload, since the authorization state may already be active
   * in the client session.
   *
   * @param connection
   * @param body Verification token payload to confirm email ownership.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: IEconDiscussAdmin.IEmailVerifyRequest,
  ): Promise<IEconDiscussAdmin.ISecurityEvent> {
    try {
      return await postAuthAdminEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
