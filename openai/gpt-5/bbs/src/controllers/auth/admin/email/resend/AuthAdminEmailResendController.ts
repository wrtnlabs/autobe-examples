import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminEmailResend } from "../../../../../providers/postAuthAdminEmailResend";

import { IEconDiscussAdmin } from "../../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/email/resend")
export class AuthAdminEmailResendController {
  /**
   * Resend admin email verification leveraging econ_discuss_users.email and
   * email_verified.
   *
   * This operation resends a verification message to the specified
   * administrator email. It references econ_discuss_users.email to locate the
   * account and checks econ_discuss_users.email_verified to avoid unnecessary
   * dispatch when already verified. The schema comment for econ_discuss_users
   * clarifies that email is the unique login identifier and email_verified
   * tracks ownership confirmation.
   *
   * Because administrators are created via /auth/admin/join and later
   * authenticate with /auth/admin/login, email verification ensures posting
   * sensitive actions (per business policy) occurs only after ownership
   * confirmation. No changes are made to econ_discuss_admins; the role
   * assignment remains intact.
   *
   * Security considerations: the response should avoid disclosing whether an
   * email exists. Rate limiting and lockouts (business policy) should be
   * applied to protect this endpoint. The operation is authorizationType=null
   * because it is not join/login/refresh.
   *
   * The endpoint interacts conceptually with login and MFA flows; once email
   * ownership is confirmed, econ_discuss_users.email_verified can be flipped by
   * the verification-finalization endpoint. Error handling must remain neutral
   * to prevent user enumeration.
   *
   * @param connection
   * @param body Resend email verification to the provided admin email address.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resendVerificationEmail(
    @TypedBody()
    body: IEconDiscussAdmin.IEmailResendRequest,
  ): Promise<IEconDiscussAdmin.ISecurityEvent> {
    try {
      return await postAuthAdminEmailResend({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
