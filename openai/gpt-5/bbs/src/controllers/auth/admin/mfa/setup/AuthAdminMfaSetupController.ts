import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminMfaSetup } from "../../../../../providers/postAuthAdminMfaSetup";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IEconDiscussAdmin } from "../../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/mfa/setup")
export class AuthAdminMfaSetupController {
  /**
   * Start admin MFA enrollment using econ_discuss_users.mfa_secret and prepare
   * recovery codes.
   *
   * This endpoint begins MFA enrollment for an authenticated admin. According
   * to Actors.econ_discuss_users, MFA-related fields include mfa_enabled
   * (Boolean), mfa_secret (encrypted/managed), and mfa_recovery_codes
   * (hashed/encrypted). The enrollment step securely generates mfa_secret and
   * provides client bootstrapping data (e.g., an otpauth URI) without enabling
   * MFA yet (mfa_enabled remains false until verification).
   *
   * This operation does not modify econ_discuss_admins, though admins may have
   * enforced_2fa=true in econ_discuss_admins requiring completion of this flow.
   * The field enforced_2fa in econ_discuss_admins is policy enforcement
   * metadata; the secret and enablement flags live in econ_discuss_users.
   *
   * Security considerations include never returning raw recovery codes after
   * initial generation except through dedicated endpoints and ensuring the
   * secret is not stored in plaintext. The response type communicates setup
   * details necessary for the second step.
   *
   * Follow-up verification is required via /auth/admin/mfa/verify, which will
   * flip mfa_enabled to true upon successful code validation against
   * mfa_secret.
   *
   * @param connection
   * @param body Request to begin MFA setup (e.g., TOTP).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async startMfaEnrollment(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconDiscussAdmin.IMfaSetupRequest,
  ): Promise<IEconDiscussAdmin.IMfaSetup> {
    try {
      return await postAuthAdminMfaSetup({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
