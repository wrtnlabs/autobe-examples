import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminMfaVerify } from "../../../../../providers/postAuthAdminMfaVerify";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IEconDiscussAdmin } from "../../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/mfa/verify")
export class AuthAdminMfaVerifyController {
  /**
   * Verify admin TOTP and set econ_discuss_users.mfa_enabled=true.
   *
   * This operation completes MFA enrollment by validating a submitted TOTP code
   * against the previously created econ_discuss_users.mfa_secret. On success,
   * it updates econ_discuss_users.mfa_enabled=true. The econ_discuss_admins
   * record remains unchanged, but its enforced_2fa flag should now be
   * satisfiable by the userâ€™s MFA state.
   *
   * Security considerations include limited retries and neutral error messages.
   * The endpoint must ensure the setup step has executed (mfa_secret present)
   * before verification and should not expose secrets.
   *
   * This endpoint is used with the setup endpoint and is required for admins
   * with enforced_2fa in econ_discuss_admins. It reflects the MFA capabilities
   * embedded in the econ_discuss_users schema.
   *
   * @param connection
   * @param body One-time code verification payload for MFA enablement.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyMfa(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconDiscussAdmin.IMfaVerifyRequest,
  ): Promise<IEconDiscussAdmin.ISecurityEvent> {
    try {
      return await postAuthAdminMfaVerify({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
