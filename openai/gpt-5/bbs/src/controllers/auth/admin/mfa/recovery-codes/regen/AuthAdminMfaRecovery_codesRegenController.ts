import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminMfaRecoveryCodesRegen } from "../../../../../../providers/postAuthAdminMfaRecoveryCodesRegen";
import { AdminAuth } from "../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../decorators/payload/AdminPayload";

import { IEconDiscussAdmin } from "../../../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/mfa/recovery-codes/regen")
export class AuthAdminMfaRecovery_codesRegenController {
  /**
   * Regenerate admin MFA recovery codes and update
   * econ_discuss_users.mfa_recovery_codes.
   *
   * This operation regenerates recovery codes for an administrator with MFA
   * enabled. It replaces econ_discuss_users.mfa_recovery_codes with a newly
   * generated set (stored securely) and returns the plaintext codes once for
   * the user to store offline. The econ_discuss_users.mfa_enabled Boolean is
   * not changed.
   *
   * Security considerations include strict authentication, rate limits, and
   * one-time display of the new codes. The econ_discuss_admins role assignment
   * is unaffected; enforced_2fa continues to apply.
   *
   * This endpoint should be used after MFA is enabled to maintain account
   * safety in line with the schemaâ€™s mfa_recovery_codes column.
   *
   * @param connection
   * @param body Confirmation payload for regeneration (e.g., TOTP code).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async regenerateMfaRecoveryCodes(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconDiscussAdmin.IMfaRegenerateRequest,
  ): Promise<IEconDiscussAdmin.IMfaRecoveryCodes> {
    try {
      return await postAuthAdminMfaRecoveryCodesRegen({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
