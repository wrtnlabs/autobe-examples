import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { deleteAuthAdminMfa } from "../../../../providers/deleteAuthAdminMfa";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IEconDiscussAdmin } from "../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/mfa")
export class AuthAdminMfaController {
  /**
   * Disable admin MFA by updating econ_discuss_users.mfa_enabled and related
   * secrets.
   *
   * This operation disables MFA on an administrator account. It updates
   * econ_discuss_users.mfa_enabled=false and, depending on policy, clears or
   * rotates mfa_secret and mfa_recovery_codes. The econ_discuss_admins row is
   * not directly modified; however, if enforced_2fa is true, this operation may
   * be prevented by policy.
   *
   * Security considerations include strong re-authentication or code
   * verification to authorize disabling MFA and audit logging. Recovery codes
   * should be invalidated during this process to prevent reuse.
   *
   * Used alongside setup and verification endpoints, this completes the MFA
   * lifecycle reflected by the econ_discuss_users schema fields.
   *
   * @param connection
   * @param body Confirmation payload (e.g., TOTP code or recovery code) to
   *   disable MFA.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async disableMfa(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconDiscussAdmin.IMfaDisableRequest,
  ): Promise<IEconDiscussAdmin.ISecurityEvent> {
    try {
      return await deleteAuthAdminMfa({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
