import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthAdminPassword } from "../../../../providers/putAuthAdminPassword";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IEconDiscussAdmin } from "../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/password")
export class AuthAdminPasswordController {
  /**
   * Change admin password by updating econ_discuss_users.password_hash.
   *
   * This operation enables a logged-in administrator to change their password.
   * It uses econ_discuss_users.password_hash to verify the current password and
   * persists a new password_hash generated from the provided new password,
   * leaving other identity fields (display_name, timezone, locale) unchanged.
   * The econ_discuss_admins role assignment remains unaffected.
   *
   * Security considerations include strong password policies and invalidation
   * of existing sessions if required by policy. The endpoint must avoid
   * exposing whether password mismatches occurred specifically. Rate limiting
   * should protect against brute-force attempts.
   *
   * Because this is a modification of an existing record, the request follows
   * an update pattern and is restricted by authorizationRole="admin". No path
   * parameters are used.
   *
   * This operation is typically used in conjunction with login/refresh and MFA
   * management endpoints to maintain account hygiene consistent with the
   * schemaâ€™s password_hash field.
   *
   * @param connection
   * @param body Payload with current and new password for password rotation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconDiscussAdmin.IChangePassword,
  ): Promise<IEconDiscussAdmin.ISecurityEvent> {
    try {
      return await putAuthAdminPassword({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
