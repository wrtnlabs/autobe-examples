import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminPasswordResetRequest } from "../../../../../../providers/postAuthAdminPasswordResetRequest";

import { IEconDiscussAdmin } from "../../../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/password/reset/request")
export class AuthAdminPasswordResetRequestController {
  /**
   * Initiate admin password reset using econ_discuss_users.email.
   *
   * This endpoint starts a password reset flow for an administrator by
   * accepting an email address corresponding to econ_discuss_users.email. It
   * does not directly mutate econ_discuss_users or econ_discuss_admins in the
   * Prisma schema; instead, it triggers an out-of-band token delivery (not
   * modeled).
   *
   * Security considerations include neutral responses to prevent enumeration,
   * rate limiting, and token expiration. The endpoint pairs with the confirm
   * operation that will ultimately update econ_discuss_users.password_hash.
   *
   * This is an unauthenticated security action (authorizationType=null). It
   * exists alongside join/login, refresh, and MFA endpoints as part of the
   * account security toolkit the schema supports through password_hash.
   *
   * @param connection
   * @param body Email payload to request a password reset link/token.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IEconDiscussAdmin.IPasswordResetRequest,
  ): Promise<IEconDiscussAdmin.ISecurityEvent> {
    try {
      return await postAuthAdminPasswordResetRequest({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
