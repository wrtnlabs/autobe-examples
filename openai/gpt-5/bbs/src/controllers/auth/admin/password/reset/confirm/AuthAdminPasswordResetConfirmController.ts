import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminPasswordResetConfirm } from "../../../../../../providers/postAuthAdminPasswordResetConfirm";

import { IEconDiscussAdmin } from "../../../../../../api/structures/IEconDiscussAdmin";

@Controller("/auth/admin/password/reset/confirm")
export class AuthAdminPasswordResetConfirmController {
  /**
   * Confirm admin password reset by updating econ_discuss_users.password_hash.
   *
   * This operation completes the password reset by accepting a reset token and
   * new password. On success, it updates econ_discuss_users.password_hash for
   * the identified account. The econ_discuss_admins role assignment is
   * unchanged by this flow.
   *
   * Security considerations include single-use tokens, strict expiration, and
   * neutral error messaging. It should also consider invalidating active
   * refresh tokens where applicable (implementation detail not represented in
   * Prisma schema).
   *
   * This endpoint complements the initiation endpoint and aligns with schema
   * fields by updating only the password_hash column.
   *
   * @param connection
   * @param body Token and new password to finalize password reset.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: IEconDiscussAdmin.IPasswordResetConfirm,
  ): Promise<IEconDiscussAdmin.ISecurityEvent> {
    try {
      return await postAuthAdminPasswordResetConfirm({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
