import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthVerifiedExpertEmailSendVerification } from "../../../../../providers/postAuthVerifiedExpertEmailSendVerification";
import { VerifiedexpertAuth } from "../../../../../decorators/VerifiedexpertAuth";
import { VerifiedexpertPayload } from "../../../../../decorators/payload/VerifiedexpertPayload";

import { IEconDiscussVerifiedExpertEmail } from "../../../../../api/structures/IEconDiscussVerifiedExpertEmail";

@Controller("/auth/verifiedExpert/email/sendVerification")
export class AuthVerifiedexpertEmailController {
  /**
   * Send email verification link for econ_discuss_users.email (sets
   * email_verified via separate verify).
   *
   * This authenticated endpoint triggers delivery of a verification link to the
   * current userâ€™s econ_discuss_users.email. It does not write to the database
   * itself; instead, the link leads to the verification endpoint which flips
   * econ_discuss_users.email_verified to true upon successful token validation.
   * The endpoint is restricted to the verifiedExpert role context for the
   * current session.
   *
   * Security notes include rate limiting and generic responses to avoid email
   * enumeration through timing. The presence of deleted_at should prevent
   * sending. This endpoint supports policies that require verified email for
   * posting, voting, and following.
   *
   * @param connection
   * @param body Optional payload to localize or route the verification send.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async sendVerification(
    @VerifiedexpertAuth()
    verifiedExpert: VerifiedexpertPayload,
    @TypedBody()
    body: IEconDiscussVerifiedExpertEmail.IRequest,
  ): Promise<IEconDiscussVerifiedExpertEmail.ISent> {
    try {
      return await postAuthVerifiedExpertEmailSendVerification({
        verifiedExpert,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
