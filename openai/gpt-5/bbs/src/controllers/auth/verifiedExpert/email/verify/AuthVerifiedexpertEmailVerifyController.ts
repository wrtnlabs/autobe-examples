import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthVerifiedExpertEmailVerify } from "../../../../../providers/postAuthVerifiedExpertEmailVerify";

import { IEconDiscussVerifiedExpertEmail } from "../../../../../api/structures/IEconDiscussVerifiedExpertEmail";
import { IEconDiscussVerifiedExpertEmailVerify } from "../../../../../api/structures/IEconDiscussVerifiedExpertEmailVerify";

@Controller("/auth/verifiedExpert/email/verify")
export class AuthVerifiedexpertEmailVerifyController {
  /**
   * Verify email by setting econ_discuss_users.email_verified = true.
   *
   * This public endpoint processes a verification token, and on success, sets
   * econ_discuss_users.email_verified to true for the corresponding account in
   * econ_discuss_users, refreshing updated_at. It does not alter password_hash,
   * MFA fields, or profile preferences.
   *
   * Security considerations include one‑time token consumption, short token
   * expiry, and neutral error messaging to avoid account enumeration. After
   * success, the account’s participation restrictions related to email
   * verification can be lifted immediately per policy.
   *
   * @param connection
   * @param body Verification token container.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: IEconDiscussVerifiedExpertEmailVerify.ICreate,
  ): Promise<IEconDiscussVerifiedExpertEmail.IVerified> {
    try {
      return await postAuthVerifiedExpertEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
