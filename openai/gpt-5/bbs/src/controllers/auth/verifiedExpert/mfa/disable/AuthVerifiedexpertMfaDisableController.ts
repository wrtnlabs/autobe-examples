import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthVerifiedExpertMfaDisable } from "../../../../../providers/postAuthVerifiedExpertMfaDisable";
import { VerifiedexpertAuth } from "../../../../../decorators/VerifiedexpertAuth";
import { VerifiedexpertPayload } from "../../../../../decorators/payload/VerifiedexpertPayload";

import { IEconDiscussVerifiedExpertMfa } from "../../../../../api/structures/IEconDiscussVerifiedExpertMfa";
import { IEconDiscussVerifiedExpertMfaDisable } from "../../../../../api/structures/IEconDiscussVerifiedExpertMfaDisable";

@Controller("/auth/verifiedExpert/mfa/disable")
export class AuthVerifiedexpertMfaDisableController {
  /**
   * Disable MFA by updating econ_discuss_users.mfa_enabled and clearing
   * secrets.
   *
   * This operation turns off multi‑factor authentication by updating
   * econ_discuss_users: set mfa_enabled = false and clear or rotate mfa_secret
   * and mfa_recovery_codes according to policy after validating a current TOTP
   * or a valid recovery code. It does not touch email, password_hash, or
   * display fields.
   *
   * Disabling MFA should be guarded by recent authentication and step‑up
   * verification. On success, subsequent logins will no longer require a second
   * factor.
   *
   * @param connection
   * @param body Confirmation via code to disable.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async disableMfa(
    @VerifiedexpertAuth()
    verifiedExpert: VerifiedexpertPayload,
    @TypedBody()
    body: IEconDiscussVerifiedExpertMfaDisable.ICreate,
  ): Promise<IEconDiscussVerifiedExpertMfa.IStatus> {
    try {
      return await postAuthVerifiedExpertMfaDisable({
        verifiedExpert,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
