import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthVerifiedExpertMfaRecoveryCodes } from "../../../../../providers/postAuthVerifiedExpertMfaRecoveryCodes";
import { VerifiedexpertAuth } from "../../../../../decorators/VerifiedexpertAuth";
import { VerifiedexpertPayload } from "../../../../../decorators/payload/VerifiedexpertPayload";

import { IEconDiscussVerifiedExpertMfa } from "../../../../../api/structures/IEconDiscussVerifiedExpertMfa";
import { IEconDiscussVerifiedExpertMfaRecovery } from "../../../../../api/structures/IEconDiscussVerifiedExpertMfaRecovery";

@Controller("/auth/verifiedExpert/mfa/recovery-codes")
export class AuthVerifiedexpertMfaRecovery_codesController {
  /**
   * Regenerate econ_discuss_users.mfa_recovery_codes for an MFA‑enabled
   * account.
   *
   * This endpoint produces a fresh set of recovery codes and persists them in
   * econ_discuss_users.mfa_recovery_codes, invalidating any previously issued
   * codes. It requires the user to be MFA‑enabled
   * (econ_discuss_users.mfa_enabled = true) and authenticated in the
   * verifiedExpert context. The operation does not alter the TOTP secret unless
   * policy dictates rotation.
   *
   * On completion, the response returns the newly generated codes once; they
   * should not be retrievable again, aligning with security best practices.
   *
   * @param connection
   * @param body Recovery code regeneration request.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async regenerateMfaRecoveryCodes(
    @VerifiedexpertAuth()
    verifiedExpert: VerifiedexpertPayload,
    @TypedBody()
    body: IEconDiscussVerifiedExpertMfaRecovery.ICreate,
  ): Promise<IEconDiscussVerifiedExpertMfa.IRecoveryCodes> {
    try {
      return await postAuthVerifiedExpertMfaRecoveryCodes({
        verifiedExpert,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
