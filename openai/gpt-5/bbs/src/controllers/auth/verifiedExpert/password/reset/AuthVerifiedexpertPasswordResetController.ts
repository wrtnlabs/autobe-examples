import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthVerifiedExpertPasswordReset } from "../../../../../providers/postAuthVerifiedExpertPasswordReset";

import { IEconDiscussVerifiedExpertPasswordReset } from "../../../../../api/structures/IEconDiscussVerifiedExpertPasswordReset";

@Controller("/auth/verifiedExpert/password/reset")
export class AuthVerifiedexpertPasswordResetController {
  /**
   * Reset password by updating econ_discuss_users.password_hash after token
   * validation.
   *
   * This endpoint finalizes a password reset by validating a token and setting
   * a new econ_discuss_users.password_hash derived from the submitted password.
   * It does not change email, display_name, or MFA fields. updated_at is
   * refreshed for audit purposes.
   *
   * Security rules include singleâ€‘use tokens, short expiry, and generic error
   * messaging. A successful reset can optionally invalidate outstanding refresh
   * tokens according to policy, implemented outside of the schema.
   *
   * This endpoint pairs with the password reset request and can be followed by
   * a normal login to obtain tokens.
   *
   * @param connection
   * @param body Token and new password for resetting credentials.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resetPassword(
    @TypedBody()
    body: IEconDiscussVerifiedExpertPasswordReset.ICreate,
  ): Promise<IEconDiscussVerifiedExpertPasswordReset.IResult> {
    try {
      return await postAuthVerifiedExpertPasswordReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
