import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthVerifiedExpertPasswordForgot } from "../../../../../providers/postAuthVerifiedExpertPasswordForgot";

import { IEconDiscussVerifiedExpertPassword } from "../../../../../api/structures/IEconDiscussVerifiedExpertPassword";

@Controller("/auth/verifiedExpert/password/forgot")
export class AuthVerifiedexpertPasswordForgotController {
  /**
   * Request password reset for an econ_discuss_users account by email.
   *
   * This public operation accepts an email and, if a matching
   * econ_discuss_users.email exists, initiates a reset process by sending a
   * tokenized link. To prevent user enumeration, responses are generic
   * regardless of account presence. The endpoint does not modify
   * econ_discuss_users at this stage; password_hash is changed only by the
   * reset endpoint.
   *
   * Security considerations include rate limiting and token TTL enforcement.
   * The presence of email_verified does not block issuing a reset; however,
   * business policy may choose to require verified emails.
   *
   * Use together with the password reset endpoint that consumes the token and
   * writes a new password hash to econ_discuss_users.password_hash.
   *
   * @param connection
   * @param body Email address to receive reset instructions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IEconDiscussVerifiedExpertPassword.IRequest,
  ): Promise<void> {
    try {
      return await postAuthVerifiedExpertPasswordForgot({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
