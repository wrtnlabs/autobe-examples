import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthVerifiedExpertPassword } from "../../../../providers/putAuthVerifiedExpertPassword";
import { VerifiedexpertAuth } from "../../../../decorators/VerifiedexpertAuth";
import { VerifiedexpertPayload } from "../../../../decorators/payload/VerifiedexpertPayload";

import { IEconDiscussVerifiedExpertPassword } from "../../../../api/structures/IEconDiscussVerifiedExpertPassword";

@Controller("/auth/verifiedExpert/password")
export class AuthVerifiedexpertPasswordController {
  /**
   * Update econ_discuss_users.password_hash for the current verified expert.
   *
   * This operation updates credentials for the currently authenticated account
   * by writing a new hash into econ_discuss_users.password_hash after verifying
   * the current password. It does not alter email, display_name, timezone,
   * locale, or any MFA fields. The endpoint is available only to authenticated
   * users with the verifiedExpert role and should respect lockout and
   * rate‑limit policies.
   *
   * Implementation writes only to econ_discuss_users.password_hash and
   * updated_at, leaving email_verified and mfa columns unchanged. If the
   * account has deleted_at set, access should be denied. On success, no body is
   * returned to avoid leaking details.
   *
   * This endpoint complements the password reset flow for unauthenticated users
   * and the login/refresh pair for session management.
   *
   * @param connection
   * @param body Current and new password for in‑session change.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updatePassword(
    @VerifiedexpertAuth()
    verifiedExpert: VerifiedexpertPayload,
    @TypedBody()
    body: IEconDiscussVerifiedExpertPassword.IUpdate,
  ): Promise<void> {
    try {
      return await putAuthVerifiedExpertPassword({
        verifiedExpert,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
