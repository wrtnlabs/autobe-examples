import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberPasswordResetConfirm } from "../../../../../../providers/postAuthMemberPasswordResetConfirm";

import { IEconDiscussMember } from "../../../../../../api/structures/IEconDiscussMember";

@Controller("/auth/member/password/reset/confirm")
export class AuthMemberPasswordResetConfirmController {
  /**
   * Finalize password reset by updating econ_discuss_users.password_hash.
   *
   * This endpoint finalizes password recovery. After validating a reset token,
   * the server updates the userâ€™s credential by replacing password_hash in
   * econ_discuss_users and updating updated_at for auditing. No other fields
   * (such as email_verified, mfa_enabled) are changed here.
   *
   * Clients should require the user to re-authenticate after a reset. This
   * operation is complementary to /auth/member/password/reset and independent
   * of member role assignment in econ_discuss_members.
   *
   * @param connection
   * @param body Reset confirmation payload including token and new password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: IEconDiscussMember.IPasswordResetConfirm,
  ): Promise<IEconDiscussMember.ISecurityEvent> {
    try {
      return await postAuthMemberPasswordResetConfirm({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
