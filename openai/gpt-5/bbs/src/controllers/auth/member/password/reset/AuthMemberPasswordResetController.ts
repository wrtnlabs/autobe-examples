import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberPasswordReset } from "../../../../../providers/postAuthMemberPasswordReset";

import { IEconDiscussMember } from "../../../../../api/structures/IEconDiscussMember";

@Controller("/auth/member/password/reset")
export class AuthMemberPasswordResetController {
  /**
   * Start password reset flow for econ_discuss_users by email (send token).
   *
   * This public endpoint starts a password reset by accepting an email and, if
   * present in econ_discuss_users (unique by email), generating a reset token
   * delivered via email. The service does not reveal whether the address
   * exists, aligning with security guidance. No changes to econ_discuss_users
   * are required at initiation time beyond optional updated_at bookkeeping.
   *
   * Related follow-up is /auth/member/password/reset/confirm which performs the
   * actual credential update. This operation is safe to expose publicly as it
   * does not disclose user existence.
   *
   * @param connection
   * @param body Email of the account to reset password for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IEconDiscussMember.IPasswordResetRequest,
  ): Promise<IEconDiscussMember.ISecurityEvent> {
    try {
      return await postAuthMemberPasswordReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
