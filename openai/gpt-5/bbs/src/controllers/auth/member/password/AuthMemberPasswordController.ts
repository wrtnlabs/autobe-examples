import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthMemberPassword } from "../../../../providers/putAuthMemberPassword";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { IEconDiscussMember } from "../../../../api/structures/IEconDiscussMember";

@Controller("/auth/member/password")
export class AuthMemberPasswordController {
  /**
   * Change credential by updating econ_discuss_users.password_hash for the
   * authenticated member.
   *
   * This operation allows a logged-in member to change their password. It
   * validates the current password against password_hash in econ_discuss_users,
   * computes a new password_hash from the submitted new password, and updates
   * the record (also updating updated_at). Email and role rows
   * (econ_discuss_members) are unaffected.
   *
   * This endpoint complements password reset flows and follows the schema
   * guidance never to store plaintext passwords. It may optionally require
   * additional confirmation when mfa_enabled is true.
   *
   * @param connection
   * @param body Current and new password values for update.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updatePassword(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IEconDiscussMember.IUpdatePassword,
  ): Promise<IEconDiscussMember.ISecurityEvent> {
    try {
      return await putAuthMemberPassword({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
