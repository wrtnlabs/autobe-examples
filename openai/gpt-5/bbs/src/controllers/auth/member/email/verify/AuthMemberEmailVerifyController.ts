import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberEmailVerify } from "../../../../../providers/postAuthMemberEmailVerify";

import { IEconDiscussMember } from "../../../../../api/structures/IEconDiscussMember";

@Controller("/auth/member/email/verify")
export class AuthMemberEmailVerifyController {
  /**
   * Verify member email by setting econ_discuss_users.email_verified=true.
   *
   * This operation flips the email_verified boolean in econ_discuss_users to
   * true after successful verification of a client-provided token. The table
   * columns referenced include email_verified and updated_at for auditing. The
   * userâ€™s identity mapping aligns with econ_discuss_users.id derived from the
   * token.
   *
   * This function complements registration at /auth/member/join and unlocks
   * platform actions gated by verified email. It does not return secrets or
   * tokens; it simply confirms verification status.
   *
   * Error cases include invalid or expired verification token or already
   * verified addresses. On idempotent replays where email_verified is already
   * true, the service may return success without change.
   *
   * @param connection
   * @param body Verification token to confirm the email address.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: IEconDiscussMember.IEmailVerifyRequest,
  ): Promise<IEconDiscussMember.IEmailVerification> {
    try {
      return await postAuthMemberEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
