import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberMfaVerify } from "../../../../../providers/postAuthMemberMfaVerify";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IEconDiscussMember } from "../../../../../api/structures/IEconDiscussMember";

@Controller("/auth/member/mfa/verify")
export class AuthMemberMfaVerifyController {
  /**
   * Enable 2FA by setting econ_discuss_users.mfa_enabled=true after verifying
   * code.
   *
   * This endpoint completes 2FA activation. It checks a submitted code against
   * the secret stored in econ_discuss_users.mfa_secret. When valid, it flips
   * mfa_enabled to true and updates updated_at. Recovery codes
   * (mfa_recovery_codes) remain available for emergency login and are not
   * returned again.
   *
   * This operation is restricted to authenticated members and can be required
   * before elevated actions per policy.
   *
   * @param connection
   * @param body Verification code or recovery code to complete 2FA activation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async mfaVerify(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IEconDiscussMember.IMfaVerify,
  ): Promise<IEconDiscussMember.IMfaEnabled> {
    try {
      return await postAuthMemberMfaVerify({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
