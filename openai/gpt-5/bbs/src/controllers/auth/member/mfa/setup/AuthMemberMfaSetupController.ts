import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postAuthMemberMfaSetup } from "../../../../../providers/postAuthMemberMfaSetup";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IEconDiscussMember } from "../../../../../api/structures/IEconDiscussMember";

@Controller("/auth/member/mfa/setup")
export class AuthMemberMfaSetupController {
  /**
   * Initiate 2FA enrollment using econ_discuss_users.mfa_secret and
   * mfa_recovery_codes (mfa_enabled remains false).
   *
   * This operation initiates multi-factor authentication for a Member. In the
   * econ_discuss_users table, 2FA artifacts include mfa_secret,
   * mfa_recovery_codes, and mfa_enabled. The setup call stores a new mfa_secret
   * and a fresh set of mfa_recovery_codes in encrypted/hashed form and keeps
   * mfa_enabled=false until a successful verification occurs.
   *
   * The response DTO presents client-side provisioning data suitable for an
   * authenticator app (URI string representation) and any necessary hints; raw
   * secrets are never logged, and recovery codes are presented only at
   * generation time.
   *
   * This endpoint is restricted to authenticated members and does not affect
   * role assignments in econ_discuss_members.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async mfaSetup(
    @MemberAuth()
    member: MemberPayload,
  ): Promise<IEconDiscussMember.IMfaSetup> {
    try {
      return await postAuthMemberMfaSetup({
        member,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
