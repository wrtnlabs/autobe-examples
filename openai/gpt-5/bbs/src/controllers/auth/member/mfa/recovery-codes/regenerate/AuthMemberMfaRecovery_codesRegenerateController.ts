import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberMfaRecoveryCodesRegenerate } from "../../../../../../providers/postAuthMemberMfaRecoveryCodesRegenerate";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";

import { IEconDiscussMember } from "../../../../../../api/structures/IEconDiscussMember";

@Controller("/auth/member/mfa/recovery-codes/regenerate")
export class AuthMemberMfaRecovery_codesRegenerateController {
  /**
   * Regenerate recovery codes by updating
   * econ_discuss_users.mfa_recovery_codes.
   *
   * This endpoint rotates recovery codes used for MFA fallback. It writes a new
   * encrypted/hashed set to econ_discuss_users.mfa_recovery_codes and touches
   * updated_at. The user must provide a valid current TOTP code (or equivalent)
   * to authorize rotation.
   *
   * The operation maintains mfa_enabled as-is and does not alter role
   * membership records.
   *
   * @param connection
   * @param body Authorization code to regenerate recovery codes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async regenerateMfaRecoveryCodes(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IEconDiscussMember.IMfaRegenerateCodes,
  ): Promise<IEconDiscussMember.IMfaRecoveryCodes> {
    try {
      return await postAuthMemberMfaRecoveryCodesRegenerate({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
