import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteEconDiscussModeratorPostsPostIdPollOptionsOptionId } from "../../../../../../providers/deleteEconDiscussModeratorPostsPostIdPollOptionsOptionId";
import { ModeratorAuth } from "../../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../../decorators/payload/ModeratorPayload";

@Controller("/econDiscuss/moderator/posts/:postId/poll/options/:optionId")
export class EcondiscussModeratorPostsPollOptionsController {
  /**
   * Remove a poll option (econ_discuss_poll_options) for a post’s poll.
   *
   * This endpoint removes a single answer option from the poll associated with
   * the specified post. According to the Prisma schema, econ_discuss_polls has
   * a one-to-one relationship with econ_discuss_posts via econ_discuss_post_id,
   * and the available options are stored in econ_discuss_poll_options with a
   * per-poll uniqueness constraint across option_text and position. The option
   * record includes created_at, updated_at, and a deleted_at timestamp used to
   * retire options while preserving history for audits and result integrity.
   *
   * Security considerations apply: only authorized governance roles should be
   * able to remove options, and application logic should enforce timing
   * restrictions (for example, disallowing removal after responses have been
   * collected to preserve result validity). The request must reference both the
   * post identifier (postId) and the option identifier (optionId) to precisely
   * target the option under the correct poll context. The system should also
   * verify there is exactly one poll for the post as enforced by the
   * econ_discuss_polls uniqueness on econ_discuss_post_id.
   *
   * From a database perspective, this relates to econ_discuss_poll_options
   * (primary) and validates existence against econ_discuss_polls and
   * econ_discuss_posts. The option row contains option_text and position fields
   * for display order and uniqueness per poll. Removal should mark the record
   * with a deleted_at timestamp so it is excluded from active queries while
   * preserving audit integrity per the schema’s temporal columns.
   *
   * Error handling should include: 404 when the post or poll or option does not
   * exist or is already removed, 409 when business rules disallow removal
   * (e.g., votes already recorded in econ_discuss_poll_responses), and 403 if
   * the caller lacks permission. Related operations include poll response
   * submission and listing, which depend on stable option sets.
   *
   * @param connection
   * @param postId Identifier of the host post whose poll owns the option
   * @param optionId Identifier of the poll option to remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussModeratorPostsPostIdPollOptionsOptionId({
        moderator,
        postId,
        optionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
