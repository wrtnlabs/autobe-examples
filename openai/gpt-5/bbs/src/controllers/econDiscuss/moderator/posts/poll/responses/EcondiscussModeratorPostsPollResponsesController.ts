import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconDiscussModeratorPostsPostIdPollResponses } from "../../../../../../providers/patchEconDiscussModeratorPostsPostIdPollResponses";
import { ModeratorAuth } from "../../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../../decorators/payload/ModeratorPayload";

import { IPageIEconDiscussPollResponse } from "../../../../../../api/structures/IPageIEconDiscussPollResponse";
import { IEconDiscussPollResponse } from "../../../../../../api/structures/IEconDiscussPollResponse";

@Controller("/econDiscuss/moderator/posts/:postId/poll/responses")
export class EcondiscussModeratorPostsPollResponsesController {
  /**
   * Search and list poll responses (econ_discuss_poll_responses) for a post.
   *
   * This operation lists responses from econ_discuss_poll_responses that belong
   * to the poll uniquely associated with the specified post (via
   * econ_discuss_polls.econ_discuss_post_id). The response model includes
   * fields such as status (active, withdrawn, quarantined, invalidated),
   * created_at, updated_at, and optional values corresponding to question types
   * (likert_value, numeric_value). For multiple-choice and ranking questions,
   * selections are recorded in econ_discuss_poll_response_options, which can be
   * joined as needed for detailed inspection.
   *
   * Because response-level data can be sensitive, access should be limited to
   * governance roles. The endpoint accepts a structured request body
   * (IEconDiscussPollResponse.IRequest) to support complex filtering: status
   * filters, respondent user constraints, created_at ranges, and
   * sorting/pagination parameters. The result returns a page container
   * (IPageIEconDiscussPollResponse) for consistent pagination semantics.
   *
   * The underlying tables referenced include econ_discuss_polls (one-to-one
   * with econ_discuss_posts), econ_discuss_poll_responses (primary dataset),
   * and optionally econ_discuss_poll_response_options for selection details.
   * Validation ensures that the target post has an associated poll and that
   * requested filters are applied only to responses within that poll context.
   *
   * Typical errors include 404 when the target post or poll does not exist, and
   * 403 when the caller is not authorized. This operation complements the
   * detail retrieval of an individual response and the response submission API.
   * It does not modify data and is suitable for internal dashboards and
   * audits.
   *
   * @param connection
   * @param postId Identifier of the post whose poll responses are being queried
   * @param body Filtering, sorting, and pagination criteria for poll responses
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPollResponse.IRequest,
  ): Promise<IPageIEconDiscussPollResponse> {
    try {
      return await patchEconDiscussModeratorPostsPostIdPollResponses({
        moderator,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
