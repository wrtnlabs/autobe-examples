import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussPostsPostIdVersions } from "../../../../providers/getEconDiscussPostsPostIdVersions";
import { patchEconDiscussPostsPostIdVersions } from "../../../../providers/patchEconDiscussPostsPostIdVersions";
import { getEconDiscussPostsPostIdVersionsVersion } from "../../../../providers/getEconDiscussPostsPostIdVersionsVersion";

import { IPageIEconDiscussPostSnapshot } from "../../../../api/structures/IPageIEconDiscussPostSnapshot";
import { IEconDiscussPostSnapshot } from "../../../../api/structures/IEconDiscussPostSnapshot";

@Controller("/econDiscuss/posts/:postId/versions")
export class EcondiscussPostsVersionsController {
  /**
   * List versions of a post from econ_discuss_post_snapshots (simple listing).
   *
   * This read-only endpoint enumerates the version history of a post using the
   * econ_discuss_post_snapshots table, which stores immutable snapshots of a
   * post’s title, body, optional summary, and the contemporaneous published_at
   * value. Each snapshot is uniquely identified by (econ_discuss_post_id,
   * version) and carries created_at/updated_at timestamps to support ordering.
   * Implementations should default to a consistent ordering such as version
   * DESC or created_at DESC.
   *
   * Visibility must respect policy: snapshots linked to posts or records that
   * have been retired via deleted_at should not be exposed to public users
   * unless permitted by governance rules. If the parent post cannot be found,
   * the server returns 404. This endpoint is designed for straightforward
   * listing, while more advanced filtering and sorting are provided by the
   * PATCH variant.
   *
   * Related entities: econ_discuss_posts (parent post),
   * econ_discuss_post_snapshots (versions), and econ_discuss_users (editor).
   * Common errors include 400 for malformed identifiers, 404 for missing post,
   * and 429 for rate limits.
   *
   * @param connection
   * @param postId Target post identifier (econ_discuss_posts.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async list(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IPageIEconDiscussPostSnapshot> {
    try {
      return await getEconDiscussPostsPostIdVersions({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search versions of a post from econ_discuss_post_snapshots with pagination.
   *
   * The econ_discuss_post_snapshots model records immutable versioned copies of
   * a post’s text fields and publication state, keyed by (econ_discuss_post_id,
   * version). Each record includes title, body, optional summary, optional
   * published_at at the time of capture, and timestamps (created_at,
   * updated_at). This endpoint lists those snapshots for a specific post
   * identified by postId. Clients can request pagination and sorting (e.g., by
   * version descending or created_at) and optionally filter by version ranges
   * via the request body.
   *
   * This operation is read-only and is typically public, as it exposes the
   * historical states of published content. However, providers should ensure
   * appropriate filtering if the parent post or individual snapshots have been
   * retired via deleted_at or are otherwise restricted by policy. The endpoint
   * only surfaces snapshots where policy permits; if the parent post does not
   * exist, the server should return 404.
   *
   * Related entities include econ_discuss_posts (the parent),
   * econ_discuss_post_snapshots (the versions), and joins to econ_discuss_users
   * for the editor/author metadata stored in
   * econ_discuss_post_snapshots.econ_discuss_user_id. Standard errors: 400 for
   * invalid pagination parameters, 404 if the postId is unknown, and 429 if
   * search rate limits are exceeded.
   *
   * @param connection
   * @param postId Target post identifier (econ_discuss_posts.id).
   * @param body Search, filter, sort, and pagination parameters for listing
   *   snapshots of the specified post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPostSnapshot.IRequest,
  ): Promise<IPageIEconDiscussPostSnapshot> {
    try {
      return await patchEconDiscussPostsPostIdVersions({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific post version (econ_discuss_post_snapshots) by version
   * number.
   *
   * This operation retrieves a single immutable snapshot from
   * econ_discuss_post_snapshots for the post identified by postId and the
   * specific version number provided in the URL. The snapshot includes the
   * versioned title, body, optional summary, and the published_at value at the
   * time of capture, as defined in the schema comments. These records serve
   * public version history and audit requirements, enabling clients to display
   * precise historical content states.
   *
   * Access is typically public for published content; however, providers should
   * apply visibility rules if the post or the snapshot has been retired
   * (deleted_at populated) or restricted by policy. If the parent post or the
   * requested version does not exist, return 404. Implementations should
   * validate that version is a positive integer and handle malformed values
   * with 400 responses.
   *
   * This endpoint ties to econ_discuss_posts for the parent and may reference
   * the editor via econ_discuss_post_snapshots.econ_discuss_user_id. Expected
   * errors: 400 for invalid version format, 404 when the snapshot is not found,
   * and 429 for rate limits. The response returns the detailed snapshot
   * entity.
   *
   * @param connection
   * @param postId Target post identifier (econ_discuss_posts.id).
   * @param version Version number of the snapshot within the post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":version")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("version")
    version: number & tags.Type<"int32">,
  ): Promise<IEconDiscussPostSnapshot> {
    try {
      return await getEconDiscussPostsPostIdVersionsVersion({
        postId,
        version,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
