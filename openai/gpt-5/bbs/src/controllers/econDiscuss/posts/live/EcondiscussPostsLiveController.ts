import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussPostsPostIdLive } from "../../../../providers/getEconDiscussPostsPostIdLive";

import { IEconDiscussLiveThread } from "../../../../api/structures/IEconDiscussLiveThread";

@Controller("/econDiscuss/posts/:postId/live")
export class EcondiscussPostsLiveController {
  /**
   * Get the live thread associated with a post (econ_discuss_live_threads via
   * post relation).
   *
   * Return the live thread bound to a post identified by postId. The
   * econ_discuss_live_threads schema guarantees at most one thread per post
   * (unique econ_discuss_post_id). The resource includes state transitions
   * (scheduled_start_at, started_at, paused_at, ended_at, archived_at),
   * configuration flags (expert_only, access_scope), host_user_id, and optional
   * slow_mode_interval_seconds. All timestamp columns are timestamptz.
   *
   * Security: public read with policy-based filtering. Records with deleted_at
   * set are considered inactive and must not be returned. If access_scope
   * limits visibility (e.g., invite_only), the provider should respond with
   * denial or not-found for unauthorized viewers, consistent with policy. This
   * endpoint is read-only and does not modify state.
   *
   * Validation and related endpoints: validate postId format and existence of a
   * corresponding econ_discuss_posts row. If no live thread exists for the
   * post, return 404. For searching threads across posts use PATCH
   * /liveThreads, and for direct ID-based retrieval use GET
   * /liveThreads/{liveThreadId}.
   *
   * @param connection
   * @param postId Identifier of the host post to which the live thread is
   *   attached
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussLiveThread> {
    try {
      return await getEconDiscussPostsPostIdLive({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
