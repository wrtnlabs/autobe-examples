import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussPostsPostIdPoll } from "../../../../providers/getEconDiscussPostsPostIdPoll";

import { IEconDiscussPoll } from "../../../../api/structures/IEconDiscussPoll";

@Controller("/econDiscuss/posts/:postId/poll")
export class EcondiscussPostsPollController {
  /**
   * Get poll configuration for a post (econ_discuss_polls).
   *
   * This GET endpoint returns the poll configuration for the given post based
   * on the econ_discuss_polls table. According to the Prisma comments,
   * econ_discuss_polls captures the question prompt, question_type
   * (single_choice, multiple_choice, likert, ranking, numeric_estimate),
   * visibility_mode (hidden_until_close, visible_after_vote, always_visible),
   * an expert_only boolean gate, allow_vote_change, optional eligibility
   * thresholds (min_voter_reputation, min_account_age_hours), per-type
   * configuration (min_selections, max_selections for multiple choice;
   * scale_points and endpoint labels for likert; unit_label and
   * numeric_min/numeric_max/numeric_step for numeric estimates), and scheduling
   * via start_at and end_at timestamps.
   *
   * Security and visibility: This is a read-only operation that does not expose
   * respondent identities or individual response data from
   * econ_discuss_poll_responses. It should respect policy signals implied by
   * visibility_mode and expert_only when clients later decide whether to show
   * running results; those behaviors are handled in other endpoints. If a row
   * exists with a deletion timestamp (deleted_at), providers SHOULD return 404
   * to signal the poll is unavailable.
   *
   * Relationships: Options are stored in econ_discuss_poll_options (unique
   * option_text and position per poll). Responses are in
   * econ_discuss_poll_responses with selection rows in
   * econ_discuss_poll_response_options. This operation does not modify any of
   * those tables and returns 404 when no poll is associated with the specified
   * post (no econ_discuss_polls row for the given econ_discuss_post_id).
   *
   * @param connection
   * @param postId Target postâ€™s UUID that hosts the poll.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussPoll> {
    try {
      return await getEconDiscussPostsPostIdPoll({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
