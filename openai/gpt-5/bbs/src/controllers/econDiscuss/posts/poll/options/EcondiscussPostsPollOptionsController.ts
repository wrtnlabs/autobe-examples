import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconDiscussPostsPostIdPollOptions } from "../../../../../providers/patchEconDiscussPostsPostIdPollOptions";
import { getEconDiscussPostsPostIdPollOptionsOptionId } from "../../../../../providers/getEconDiscussPostsPostIdPollOptionsOptionId";

import { IPageIEconDiscussPollOption } from "../../../../../api/structures/IPageIEconDiscussPollOption";
import { IEconDiscussPollOption } from "../../../../../api/structures/IEconDiscussPollOption";

@Controller("/econDiscuss/posts/:postId/poll/options")
export class EcondiscussPostsPollOptionsController {
  /**
   * List poll options for a post’s poll (Prisma: econ_discuss_poll_options).
   *
   * This operation lists poll options for the poll that belongs to the
   * specified post. At the database level, options are stored in the
   * econ_discuss_poll_options table, which includes columns id (UUID),
   * econ_discuss_poll_id (UUID FK), option_text (String), position (Int),
   * created_at (timestamp with time zone), updated_at (timestamp with time
   * zone), and deleted_at (timestamp with time zone). Options are linked to the
   * parent poll in econ_discuss_polls via econ_discuss_poll_id. The parent poll
   * is itself one-to-one with the post in econ_discuss_posts through a unique
   * constraint on econ_discuss_post_id.
   *
   * Security and authorization are handled by business logic. Read access to
   * published poll options is typically public. The controller/provider should
   * verify that the given postId exists and that a poll exists for it. Role-
   * and policy-based filtering can be applied as needed (for example, hiding
   * options for unsupported question types), but this endpoint itself is
   * designed as a public read surface.
   *
   * This list operation supports pagination and optional searching by
   * option_text. The provider may default sorting to position ascending to
   * reflect the intended display order defined by the position column in
   * econ_discuss_poll_options. Records where deleted_at is not null should be
   * excluded by default. If the post has no poll configured, return an empty
   * page rather than an error.
   *
   * Related operations include creating new options (POST
   * /posts/{postId}/poll/options), retrieving a specific option (GET
   * /posts/{postId}/poll/options/{optionId}), and updating an option (PUT
   * /posts/{postId}/poll/options/{optionId}). Errors include 404 when the post
   * does not exist, 400 for malformed pagination parameters, and 500 for
   * unexpected failures.
   *
   * @param connection
   * @param postId Post identifier whose poll’s options are being listed
   * @param body Search and pagination parameters for listing poll options
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPollOption.IRequest,
  ): Promise<IPageIEconDiscussPollOption.ISummary> {
    try {
      return await patchEconDiscussPostsPostIdPollOptions({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific poll option by ID for a post’s poll (Prisma:
   * econ_discuss_poll_options).
   *
   * This operation returns a single poll option record after verifying context.
   * In the Prisma schema, the econ_discuss_poll_options table contains id
   * (UUID), econ_discuss_poll_id (UUID FK), option_text (String), position
   * (Int), created_at, updated_at, and deleted_at. The parent poll is in
   * econ_discuss_polls and is uniquely associated to a post in
   * econ_discuss_posts through econ_discuss_post_id.
   *
   * For security, read access to poll options is typically public; however, the
   * provider must ensure the specified optionId indeed belongs to the poll
   * attached to postId. If the option’s deleted_at is not null or if the post
   * has no poll, the resource should be treated as not found. This operation
   * does not change data and does not require authentication for public polls;
   * business logic may still apply policy checks.
   *
   * Validation rules include confirming that the post exists, that a poll
   * exists for that post, and that the option belongs to that poll. Expected
   * errors are 404 when any of these checks fail, 400 for invalid UUID formats
   * in path parameters, and 500 on unexpected failures.
   *
   * @param connection
   * @param postId Post identifier whose poll owns the target option
   * @param optionId Target poll option’s ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":optionId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussPollOption> {
    try {
      return await getEconDiscussPostsPostIdPollOptionsOptionId({
        postId,
        optionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
