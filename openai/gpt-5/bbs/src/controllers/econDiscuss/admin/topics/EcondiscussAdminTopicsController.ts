import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussAdminTopics } from "../../../../providers/postEconDiscussAdminTopics";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putEconDiscussAdminTopicsTopicId } from "../../../../providers/putEconDiscussAdminTopicsTopicId";
import { deleteEconDiscussAdminTopicsTopicId } from "../../../../providers/deleteEconDiscussAdminTopicsTopicId";

import { IEconDiscussTopic } from "../../../../api/structures/IEconDiscussTopic";

@Controller("/econDiscuss/admin/topics")
export class EcondiscussAdminTopicsController {
  /**
   * Create a curated topic record in econ_discuss_topics (admin-only).
   *
   * This operation writes to the econ_discuss_topics table, defined in the
   * Prisma schema as the authoritative taxonomy used across the platform. The
   * table includes a unique code intended as an immutable business identifier
   * for URLs and external references, a required name, optional description,
   * and temporal columns created_at and updated_at. A record-level archival
   * timestamp (deleted_at) exists for retirement handling but is not set on
   * creation.
   *
   * Security and permissions: topic creation is restricted to administrative
   * users due to the global impact of taxonomy changes on discovery,
   * subscriptions, and expert badges. The authorizationRole reflects this by
   * requiring admin. Moderators may manage topics according to governance
   * policy, but to minimize endpoint multiplication, this API is scoped to
   * admin.
   *
   * Validation and business logic: request must provide a unique code and a
   * non-empty name; description is optional. The server must enforce code
   * uniqueness (Prisma unique index) and return a 409 Conflict if a duplicate
   * code is submitted. Timestamps are system-managed. On success, the operation
   * returns the created IEconDiscussTopic.
   *
   * Related flows: clients typically call GET /topics to confirm creation
   * results and GET /topics/{topicId} for subsequent detail views. If the
   * request body is malformed or fails validation, respond with 400; unexpected
   * errors yield 500.
   *
   * @param connection
   * @param body Topic creation payload including unique code, name, and
   *   optional description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEconDiscussTopic.ICreate,
  ): Promise<IEconDiscussTopic> {
    try {
      return await postEconDiscussAdminTopics({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update name/description of a topic in econ_discuss_topics (admin-only).
   *
   * This operation modifies records in econ_discuss_topics, the curated
   * taxonomy that powers filtering, subscriptions, and expert domain badges.
   * The Prisma schema specifies the following key columns: id (UUID), code
   * (unique slug-like identifier), name, description, created_at, updated_at,
   * and an archival timestamp deleted_at. Consistent with the schema commentary
   * that code is an immutable business identifier, this endpoint should not
   * permit changing code; attempts to change it should be rejected with a
   * validation error.
   *
   * Authorization: restricted to administrative users due to the broad impact
   * of taxonomy changes. The endpointâ€™s authorizationRole is limited to admin
   * to prevent role multiplication while aligning with governance that only
   * privileged users manage topics.
   *
   * Validation and behavior: the request body should allow updating name and
   * description only. If the topic does not exist or has been retired from
   * active use, return 404. The server sets updated_at automatically and
   * returns the updated IEconDiscussTopic. Conflicts (e.g., attempting to set
   * fields violating constraints) should yield 409, while malformed input
   * returns 400.
   *
   * Related operations: clients may retrieve the current state via GET
   * /topics/{topicId} before updating and use GET /topics afterwards to observe
   * list changes. This endpoint is not responsible for archival or removal
   * actions, which are handled separately by governance workflows.
   *
   * @param connection
   * @param topicId Unique identifier of the topic to update.
   * @param body Topic update payload (name and description only; code is
   *   immutable).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":topicId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussTopic.IUpdate,
  ): Promise<IEconDiscussTopic> {
    try {
      return await putEconDiscussAdminTopicsTopicId({
        admin,
        topicId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Archive a topic in econ_discuss_topics by setting deleted_at (admin only).
   *
   * This operation targets the curated taxonomy stored in econ_discuss_topics.
   * The model includes columns id (UUID primary key), code (unique business
   * identifier), name, description, created_at, updated_at, and deleted_at for
   * archival. Executing this endpoint sets deleted_at to the current time,
   * which removes the topic from user-facing lists and prevents new
   * associations in econ_discuss_post_topics while keeping historical records
   * intact for auditability.
   *
   * Only administrators should perform this action. The econDiscuss governance
   * documents specify that topic curation is an administrative responsibility;
   * therefore, authorization ensures only users assigned an admin role can call
   * this operation. Since the table includes a deleted_at column, the behavior
   * is to mark the record as no longer active rather than physically deleting
   * the row to keep referential integrity with existing associations.
   *
   * On validation, the service confirms that topicId is a valid UUID and that
   * the topic exists and is not already marked as deleted. If the topic has
   * already been archived (deleted_at is not null), the provider may treat the
   * request as idempotent and return success without additional changes.
   * Related read endpoints (e.g., listing topics or searching posts by topic)
   * should exclude records where deleted_at is not null. Errors include 404
   * when the topic does not exist and 409 if policy or dependency checks
   * prevent archival (e.g., active policy hold).
   *
   * @param connection
   * @param topicId Unique identifier of the topic to archive.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":topicId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussAdminTopicsTopicId({
        admin,
        topicId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
