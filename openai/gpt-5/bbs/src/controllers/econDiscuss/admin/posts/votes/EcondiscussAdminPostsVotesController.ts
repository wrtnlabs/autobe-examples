import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconDiscussAdminPostsPostIdVotes } from "../../../../../providers/patchEconDiscussAdminPostsPostIdVotes";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IPageIEconDiscussPostVote } from "../../../../../api/structures/IPageIEconDiscussPostVote";
import { IEconDiscussPostVote } from "../../../../../api/structures/IEconDiscussPostVote";

@Controller("/econDiscuss/admin/posts/:postId/votes")
export class EcondiscussAdminPostsVotesController {
  /**
   * Search and paginate post vote records from econ_discuss_post_votes (admin
   * only).
   *
   * Retrieve a filtered, paginated list of vote records associated with a given
   * post to support governance, integrity review, and appeals workflows. In the
   * Prisma schema, econ_discuss_post_votes captures a single member’s vote on a
   * post and includes the columns vote_type (allowed values: "up" or "down")
   * and status ("active", "withdrawn", "switched", "discounted", or
   * "invalidated"). Time-series analysis and review are aided by indexes on
   * (econ_discuss_post_id, created_at) and (econ_discuss_user_id, status,
   * created_at).
   *
   * Access to per-user vote records is sensitive because individual vote
   * choices are private except to the voter; therefore, this operation is
   * intended for authorized staff performing moderation or integrity checks.
   * Client implementations must ensure only appropriately privileged actors
   * invoke this operation. Public surfaces should continue to expose only
   * aggregate counts, and individual users should rely on self-scoped history
   * endpoints for their own votes.
   *
   * This operation ties records to posts via econ_discuss_post_id (foreign key
   * to econ_discuss_posts) and to voters via econ_discuss_user_id (foreign key
   * to econ_discuss_users). The unique constraint on (econ_discuss_user_id,
   * econ_discuss_post_id) ensures idempotency for a user’s vote on a given
   * post. Implementations may exclude rows with a non-null deleted_at from
   * active result sets while preserving them in storage for audit purposes.
   * Validation includes checking enum values for vote_type and status, applying
   * created_at date-range bounds, and enforcing page and pageSize limits.
   * Related operations: casting or changing a vote (POST /posts/{postId}/votes)
   * and withdrawing a self vote (DELETE /posts/{postId}/votes/self).
   *
   * @param connection
   * @param postId Target post’s UUID whose votes are being queried
   * @param body Filter set and pagination controls for vote search (type,
   *   status, date range, sort)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPostVote.IRequest,
  ): Promise<IPageIEconDiscussPostVote.ISummary> {
    try {
      return await patchEconDiscussAdminPostsPostIdVotes({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
