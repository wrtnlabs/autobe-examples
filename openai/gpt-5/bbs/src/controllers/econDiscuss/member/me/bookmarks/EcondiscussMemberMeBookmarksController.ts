import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { getEconDiscussMemberMeBookmarks } from "../../../../../providers/getEconDiscussMemberMeBookmarks";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchEconDiscussMemberMeBookmarks } from "../../../../../providers/patchEconDiscussMemberMeBookmarks";

import { IPageIEconDiscussPostBookmark } from "../../../../../api/structures/IPageIEconDiscussPostBookmark";
import { IEconDiscussPostBookmark } from "../../../../../api/structures/IEconDiscussPostBookmark";

@Controller("/econDiscuss/member/me/bookmarks")
export class EcondiscussMemberMeBookmarksController {
  /**
   * List member’s bookmarks (econ_discuss_post_bookmarks) with defaults.
   *
   * This collection read returns the member’s active saved items from
   * econ_discuss_post_bookmarks where econ_discuss_user_id equals the
   * authenticated user and deleted_at is null. Core fields include id,
   * econ_discuss_post_id, note, created_at, and updated_at. The response is
   * suitable for list views and may incorporate related post information by
   * joining econ_discuss_posts.
   *
   * Security and access control ensure only the owner can retrieve their
   * bookmarks. Rate limits and standard error semantics apply. Empty pages are
   * valid when no bookmarks exist. To apply advanced filters or custom sort
   * beyond defaults, the PATCH /me/bookmarks variant should be used.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @MemberAuth()
    member: MemberPayload,
  ): Promise<IPageIEconDiscussPostBookmark.ISummary> {
    try {
      return await getEconDiscussMemberMeBookmarks({
        member,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate member’s bookmarks from econ_discuss_post_bookmarks.
   *
   * This operation queries the econ_discuss_post_bookmarks table to return the
   * current member’s saved items. It uses the authenticated identity to match
   * econ_discuss_post_bookmarks.econ_discuss_user_id and returns only entries
   * that are active (deleted_at is null). Key columns referenced include id,
   * econ_discuss_user_id, econ_discuss_post_id, note, created_at, and
   * updated_at. The target post linkage via econ_discuss_post_id allows the
   * provider to enrich summaries with details from econ_discuss_posts when
   * composing response DTOs.
   *
   * Security and authorization follow the platform’s business policies: only
   * the owner can list their bookmarks. The controller/provider must enforce
   * ownership using the authenticated user context. Administrative and
   * moderation roles are not exposed through this endpoint; the intended
   * audience is a signed-in member managing their own data.
   *
   * Business behavior and validation: the request body supports pagination and
   * optional filters (e.g., time windows over created_at, presence of a note,
   * or post targeting using valid UUIDs). Results are typically ordered by
   * created_at in descending order to reflect most recently saved first. If no
   * records are found, an empty page is returned. Any malformed identifiers or
   * invalid pagination parameters result in validation errors; authorization
   * failures produce 401/403 per policy. For a simpler default listing without
   * complex filters, clients may use GET /me/bookmarks; for fine-grained
   * filtering and sorting, use this PATCH endpoint.
   *
   * @param connection
   * @param body Search, sorting, and pagination inputs for the owner’s
   *   bookmarks
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IEconDiscussPostBookmark.IRequest,
  ): Promise<IPageIEconDiscussPostBookmark.ISummary> {
    try {
      return await patchEconDiscussMemberMeBookmarks({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
