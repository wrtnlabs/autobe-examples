import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchEconDiscussMemberMeReputationEvents } from "../../../../../../providers/patchEconDiscussMemberMeReputationEvents";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";

import { IPageIEconDiscussReputationEvent } from "../../../../../../api/structures/IPageIEconDiscussReputationEvent";
import { IEconDiscussReputationEvent } from "../../../../../../api/structures/IEconDiscussReputationEvent";

@Controller("/econDiscuss/member/me/reputation/events")
export class EcondiscussMemberMeReputationEventsController {
  /**
   * List authenticated user’s reputation events
   * (econ_discuss_reputation_events) with pagination and filters.
   *
   * Retrieve a paginated list of reputation-impacting events for the current
   * user from econ_discuss_reputation_events.
   *
   * Each ledger entry contains user_id, optional actor_user_id (e.g., curator
   * or voter), optional post_id, points (signed Int), reason (category such as
   * upvote_post, curated_feature, moderation_penalty), optional source for
   * traceability, and occurred_at to support time-window calculations and
   * decay. Temporal fields include created_at and updated_at; entries may carry
   * a deleted_at for exceptional corrections, but normal operation treats the
   * ledger as append-only.
   *
   * The request supports pagination, search, and sorting parameters in the body
   * to handle complex filtering: page, pageSize, dateFrom/dateTo mapped to
   * occurred_at, reason substring match, and optional postId filtering. Results
   * are ordered by occurred_at descending by default to facilitate
   * recent-history views.
   *
   * Security considerations: only the authenticated user’s events are returned,
   * enforced by server-side scoping. Events associated with records in a
   * removed state (e.g., when deleted_at is non-null) should be excluded from
   * normal responses unless an audit mode is explicitly requested by governance
   * tools, which is out of scope here.
   *
   * Error handling returns a paginated container with zero or more events.
   * Validation errors (e.g., invalid date range) should return 400 with
   * details; authentication/authorization failures return 401/403.
   *
   * @param connection
   * @param body Query parameters for pagination, filtering, and sorting of
   *   reputation events
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IEconDiscussReputationEvent.IRequest,
  ): Promise<IPageIEconDiscussReputationEvent> {
    try {
      return await patchEconDiscussMemberMeReputationEvents({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
