import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { getEconDiscussMemberMeTopics } from "../../../../../providers/getEconDiscussMemberMeTopics";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchEconDiscussMemberMeTopics } from "../../../../../providers/patchEconDiscussMemberMeTopics";

import { IPageIEconDiscussTopic } from "../../../../../api/structures/IPageIEconDiscussTopic";
import { IEconDiscussUserTopicSubscription } from "../../../../../api/structures/IEconDiscussUserTopicSubscription";

@Controller("/econDiscuss/member/me/topics")
export class EcondiscussMemberMeTopicsController {
  /**
   * Get current user’s topic subscriptions
   * (econ_discuss_user_topic_subscriptions + econ_discuss_topics).
   *
   * This operation lists the current user’s topic subscriptions by reading rows
   * from econ_discuss_user_topic_subscriptions associated with the caller and
   * joining to econ_discuss_topics for display metadata (code, name,
   * description). Per the Prisma schema, both entities include
   * created_at/updated_at timestamps and a deleted_at column; the selection
   * excludes rows where deleted_at is not null to avoid returning inactive
   * items.
   *
   * Security: the endpoint is available only to authenticated members and
   * returns data scoped to the caller (“me”), enforcing ownership in the query.
   * No path parameters are needed; user linkage comes from the session
   * context.
   *
   * Behavior and related operations: this GET variant is optimized for
   * straightforward listing with defaults. For advanced search and custom
   * sort/pagination through a structured body, use PATCH /me/topics, which
   * accepts a request payload for filters like text search on
   * econ_discuss_topics.name or date ranges on
   * econ_discuss_user_topic_subscriptions.created_at. Both endpoints project
   * topic summaries in the response.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @MemberAuth()
    member: MemberPayload,
  ): Promise<IPageIEconDiscussTopic.ISummary> {
    try {
      return await getEconDiscussMemberMeTopics({
        member,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search current user’s topic subscriptions
   * (econ_discuss_user_topic_subscriptions + econ_discuss_topics).
   *
   * Retrieve a filtered, paginated list of the current user’s topic
   * subscriptions. The underlying data model uses
   * econ_discuss_user_topic_subscriptions (user-to-topic subscription
   * relationships) and econ_discuss_topics (curated taxonomy). As noted in the
   * Prisma schema, econ_discuss_topics provides fields like code (immutable
   * identifier), name (human-readable), description (optional),
   * created_at/updated_at, and a deleted_at timestamp used to flag archived
   * topics. The subscription table captures econ_discuss_user_id,
   * econ_discuss_topic_id, created_at/updated_at, and a deleted_at column for
   * inactivation while keeping auditability.
   *
   * Security and permissions: this endpoint requires an authenticated caller.
   * The user scope is implicit ("me"), so filters are applied to the caller’s
   * own econ_discuss_user_topic_subscriptions rows where deleted_at is null,
   * and topics are included where the topic’s deleted_at is null. Authorization
   * roles are limited to standard members as the data returned is private to
   * the owner.
   *
   * Relationships and behavior: results are produced by joining subscriptions
   * (econ_discuss_user_topic_subscriptions) to topics (econ_discuss_topics) and
   * projecting topic summaries for response consumption. Clients can filter by
   * topic code/name text search, subscription created_at ranges, or restrict to
   * certain topic identifiers. Pagination and sorting apply to the effective
   * query. Records with any non-null deleted_at in either table are excluded to
   * avoid returning inactive records.
   *
   * Validation and error handling: request validation ensures well-formed
   * pagination (page/pageSize) and acceptable filter structures; out-of-range
   * values or unknown sort keys result in 400 responses handled by the standard
   * error model. If the caller is unauthenticated, a 401 is returned. This
   * operation complements GET /me/topics, which returns the same resource
   * without a request body, while this PATCH variant supports richer search and
   * sorting.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for listing the
   *   caller’s topic subscriptions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IEconDiscussUserTopicSubscription.IRequest,
  ): Promise<IPageIEconDiscussTopic.ISummary> {
    try {
      return await patchEconDiscussMemberMeTopics({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
