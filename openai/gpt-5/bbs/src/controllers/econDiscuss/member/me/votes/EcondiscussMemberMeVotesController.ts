import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { getEconDiscussMemberMeVotes } from "../../../../../providers/getEconDiscussMemberMeVotes";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchEconDiscussMemberMeVotes } from "../../../../../providers/patchEconDiscussMemberMeVotes";

import { IPageIEconDiscussPostVote } from "../../../../../api/structures/IPageIEconDiscussPostVote";
import { IEconDiscussPostVote } from "../../../../../api/structures/IEconDiscussPostVote";

@Controller("/econDiscuss/member/me/votes")
export class EcondiscussMemberMeVotesController {
  /**
   * Get current user’s post votes (econ_discuss_post_votes).
   *
   * This operation lists the caller’s post vote history from
   * econ_discuss_post_votes, limiting to rows where econ_discuss_user_id equals
   * the authenticated user and deleted_at is null. Fields available in the
   * model include vote_type, status, optional status_reason,
   * created_at/updated_at, and the target econ_discuss_post_id. The response
   * presents vote records suitable for a private voting history view.
   *
   * Security and behavior: authentication is required; results are private to
   * the owner and never include other users’ voting identities. For advanced
   * querying—filtering by vote_type/status, narrowing to a date range, or
   * changing sort—use PATCH /me/votes with a structured request body. Errors
   * follow the standard pattern (401 for unauthenticated, 400 for invalid
   * parameters if any defaults are overridden by query-to-body adapters).
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @MemberAuth()
    member: MemberPayload,
  ): Promise<IPageIEconDiscussPostVote.ISummary> {
    try {
      return await getEconDiscussMemberMeVotes({
        member,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search current user’s post votes (econ_discuss_post_votes).
   *
   * Retrieve a filtered, paginated list of the caller’s post voting history.
   * The Prisma model econ_discuss_post_votes defines one row per (user, post)
   * vote with fields: econ_discuss_user_id, econ_discuss_post_id, vote_type
   * ("up" or "down"), status ("active", "withdrawn", "switched", "discounted",
   * or "invalidated"), optional status_reason, and timestamps
   * created_at/updated_at plus a deleted_at column for exceptional removals.
   * Queries restrict to the authenticated user and exclude rows where
   * deleted_at is not null.
   *
   * Security and privacy: this endpoint requires authentication and returns
   * only the caller’s own vote records, aligning with privacy expectations
   * where individual vote choices are private to the voter. The response may
   * include post identifiers (econ_discuss_post_id) to enable navigation, but
   * will not expose other users’ identities.
   *
   * Validation and business logic: the request body allows filtering by
   * vote_type/status and time windows (created_at). Sorting may be applied by
   * created_at descending by default. Unknown filter values yield 400
   * validation errors via the standard error model. If the user is not
   * authenticated, a 401 is returned. Related operations include GET /me/votes
   * for default listing without a request body and POST/DELETE vote actions on
   * specific posts for casting or withdrawing a vote, which are separate write
   * endpoints.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for listing the
   *   caller’s post votes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IEconDiscussPostVote.IRequest,
  ): Promise<IPageIEconDiscussPostVote.ISummary> {
    try {
      return await patchEconDiscussMemberMeVotes({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
