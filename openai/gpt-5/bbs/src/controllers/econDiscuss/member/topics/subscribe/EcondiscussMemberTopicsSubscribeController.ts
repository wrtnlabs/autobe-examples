import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberTopicsTopicIdSubscribe } from "../../../../../providers/postEconDiscussMemberTopicsTopicIdSubscribe";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { deleteEconDiscussMemberTopicsTopicIdSubscribe } from "../../../../../providers/deleteEconDiscussMemberTopicsTopicIdSubscribe";

@Controller("/econDiscuss/member/topics/:topicId/subscribe")
export class EcondiscussMemberTopicsSubscribeController {
  /**
   * Subscribe the authenticated user to a topic via
   * econ_discuss_user_topic_subscriptions.
   *
   * This operation writes to econ_discuss_user_topic_subscriptions, which
   * contains id (UUID), econ_discuss_user_id, econ_discuss_topic_id,
   * created_at, updated_at, and deleted_at. Subscribing inserts a new row when
   * none exists or clears deleted_at when a prior record exists but was marked
   * inactive. The subscription is used by personalization to prioritize content
   * tagged with the topic and to build digests.
   *
   * Security requires an authenticated user context; the provider derives
   * econ_discuss_user_id from the session. The topicId path parameter must be a
   * valid UUID matching an existing row in econ_discuss_topics whose deleted_at
   * is null. The operation is designed to be idempotent: attempting to
   * subscribe when already active results in a no-op with a 204 response.
   *
   * Validation errors include 404 when the topic does not exist or is archived
   * and 409 if uniqueness or policy checks fail unexpectedly. Downstream read
   * APIs (e.g., GET /me/topics) will reflect the active subscription after this
   * call. No response body is returned by design, returning 204 No Content on
   * success.
   *
   * @param connection
   * @param topicId Target topic’s UUID to subscribe to.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await postEconDiscussMemberTopicsTopicIdSubscribe({
        member,
        topicId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Unsubscribe the authenticated user from a topic by marking the subscription
   * as inactive.
   *
   * This operation updates econ_discuss_user_topic_subscriptions by locating
   * the unique (econ_discuss_user_id, econ_discuss_topic_id) record and setting
   * deleted_at to indicate the subscription is inactive while retaining the row
   * for audit. Columns include id (UUID), econ_discuss_user_id,
   * econ_discuss_topic_id, created_at, updated_at, and deleted_at. This design
   * supports straightforward reactivation via the POST subscribe operation by
   * clearing deleted_at.
   *
   * The caller must be an authenticated user; the service resolves
   * econ_discuss_user_id from the session. If the subscription does not exist
   * or is already inactive, the provider may treat the request as idempotent
   * and return 204 No Content. The topicId path parameter must be a valid UUID
   * referencing econ_discuss_topics; archived topics can be treated as a no-op
   * for unsubscription.
   *
   * Error handling includes 404 when the topic is not found in
   * econ_discuss_topics (optional, as unsubscribe can be idempotent), and
   * generic conflict responses when policy prevents changes. No response body
   * is returned, conforming to the platform’s standard for toggle-style
   * operations.
   *
   * @param connection
   * @param topicId Target topic’s UUID to unsubscribe from.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussMemberTopicsTopicIdSubscribe({
        member,
        topicId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
