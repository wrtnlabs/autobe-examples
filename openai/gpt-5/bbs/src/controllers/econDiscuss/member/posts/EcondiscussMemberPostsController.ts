import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberPosts } from "../../../../providers/postEconDiscussMemberPosts";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putEconDiscussMemberPostsPostId } from "../../../../providers/putEconDiscussMemberPostsPostId";
import { deleteEconDiscussMemberPostsPostId } from "../../../../providers/deleteEconDiscussMemberPostsPostId";

import { IEconDiscussPost } from "../../../../api/structures/IEconDiscussPost";

@Controller("/econDiscuss/member/posts")
export class EcondiscussMemberPostsController {
  /**
   * Create a new post record in econ_discuss_posts.
   *
   * Insert a new record into econ_discuss_posts as the authenticated author.
   * Required business fields typically include title and body; optional fields
   * include summary and scheduled_publish_at to enable scheduled publication.
   * The schema stores timestamps as timestamptz and provides text indexes over
   * title/body/summary for discovery.
   *
   * Security and permissions: only authenticated members may create posts. The
   * author is bound via econ_discuss_user_id from the authenticated session.
   * Implementations may validate required topic bindings by inserting rows into
   * econ_discuss_post_topics linking to econ_discuss_topics. Validation errors
   * (400) occur for missing/invalid fields; 403 is returned when the actor
   * lacks permission.
   *
   * @param connection
   * @param body Data for creating a post (title, body, optional summary and
   *   scheduling, optional topic bindings)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IEconDiscussPost.ICreate,
  ): Promise<IEconDiscussPost> {
    try {
      return await postEconDiscussMemberPosts({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a post in econ_discuss_posts by ID.
   *
   * Modify an existing post’s fields in econ_discuss_posts. Common updates
   * include title, body, summary, and publication/scheduling adjustments
   * (published_at or scheduled_publish_at where policy allows). The model
   * maintains created_at/updated_at for auditing. Version history can be
   * recorded in econ_discuss_post_snapshots using a monotonic per-post
   * version.
   *
   * Security and validation: only the author or appropriately privileged roles
   * may update a post. Ownership checks should use the authenticated user
   * context, and an edit window policy may apply after publication. The path
   * parameter must be a valid UUID. Typical errors include 400 (invalid data),
   * 403 (forbidden), and 404 (not found).
   *
   * @param connection
   * @param postId Unique identifier of the post to update
   * @param body Fields permitted to be updated for the target post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPost.IUpdate,
  ): Promise<IEconDiscussPost> {
    try {
      return await putEconDiscussMemberPostsPostId({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Mark a post (econ_discuss_posts) as deleted by setting deleted_at.
   *
   * Remove a published or draft-backed post from public visibility by setting
   * the deleted_at timestamp in econ_discuss_posts. The Posts model comment
   * states it supports publication timestamps, scheduled publishing, and a soft
   * deletion timestamp when the post is removed from public visibility. This
   * operation leverages that deleted_at field to retire a post without erasing
   * historical data or breaking referential integrity.
   *
   * Security and permissions: Only the owning author or elevated roles
   * (moderator/admin) should be allowed to delete. Moderators and admins may
   * require 2FA per platform policy (see role tables econ_discuss_moderators
   * and econ_discuss_admins) and actions must be audited. Ownership and
   * sanction checks occur in service logic. Attempts by unauthorized users
   * should return a suitable error (403 if authenticated but not permitted, 401
   * if unauthenticated).
   *
   * Database relationships: The econ_discuss_posts record is connected to
   * multiple tables, including econ_discuss_post_topics (post–topic junction),
   * econ_discuss_post_votes (member votes and statuses),
   * econ_discuss_post_bookmarks (owner-only saved items with notes),
   * econ_discuss_polls (one-to-one poll attached to a post),
   * econ_discuss_live_threads (one-to-one live room), and
   * econ_discuss_post_snapshots (version history). Setting deleted_at on the
   * post preserves these relationships for audit and internal analytics while
   * excluding the post from public discovery. Because this is a deletion via
   * deleted_at, hard-delete cascades are not triggered; repository queries
   * should consistently filter deleted_at IS NULL for user-facing listings.
   *
   * Validation and business rules: If a post is already marked as deleted
   * (deleted_at IS NOT NULL), return a 409 conflict or idempotent success
   * depending on policy. If compliance/legal holds are active at higher layers,
   * the deletion should be blocked with a reason. Implementers should ensure
   * that search indices and caches are updated to remove the post from public
   * results shortly after the operation.
   *
   * Related operations: Use GET /posts/{postId} to read details prior to
   * deletion and POST /posts to create new posts. After deletion, list
   * endpoints and trending queries must ignore the record. Error handling
   * should include 404 when the postId does not exist or the caller lacks
   * access to view it, 403 for permission failures, and 429 when rate limits
   * are exceeded.
   *
   * @param connection
   * @param postId Target post's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussMemberPostsPostId({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
