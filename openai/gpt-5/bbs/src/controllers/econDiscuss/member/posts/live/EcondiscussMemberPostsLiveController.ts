import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberPostsPostIdLive } from "../../../../../providers/postEconDiscussMemberPostsPostIdLive";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putEconDiscussMemberPostsPostIdLive } from "../../../../../providers/putEconDiscussMemberPostsPostIdLive";
import { deleteEconDiscussMemberPostsPostIdLive } from "../../../../../providers/deleteEconDiscussMemberPostsPostIdLive";

import { IEconDiscussLiveThread } from "../../../../../api/structures/IEconDiscussLiveThread";

@Controller("/econDiscuss/member/posts/:postId/live")
export class EcondiscussMemberPostsLiveController {
  /**
   * Create a live thread for a post (econ_discuss_live_threads).
   *
   * Create a new live discussion thread for the given post. The
   * econ_discuss_live_threads model defines a one-to-one relationship to posts
   * via econ_discuss_post_id and enforces uniqueness, ensuring each post can
   * host at most one live thread. The table stores lifecycle state in the state
   * column with allowed values managed by application logic (scheduled,
   * waiting, live, paused, ended, archived). It also includes expert_only and
   * access_scope flags to control participation and visibility, as well as
   * timestamps such as scheduled_start_at, started_at, paused_at, ended_at, and
   * archived_at for operational workflows.
   *
   * Security and permissions should ensure only authorized users can create a
   * live thread (typically the post’s author as host, or elevated roles per
   * policy). The host_user_id column links ownership to econ_discuss_users.
   * Moderation and governance policies may require 2FA for moderators/admins,
   * but authentication and enforcement occur at the controller/service level.
   *
   * The operation validates that the parent post exists in econ_discuss_posts
   * (referenced by econ_discuss_post_id) and that a live thread does not
   * already exist for the post (unique constraint). It accepts optional
   * configuration such as expert_only participation, access_scope values
   * (public, followers_only, topic_subscribers_only, invite_only), a
   * scheduled_start_at when scheduling, and slow_mode_interval_seconds to limit
   * message frequency. On success, it returns the created live thread with
   * server-populated identifiers and timestamps. Common errors include 404 when
   * the post is not found and 409 when a live thread already exists for the
   * specified post.
   *
   * @param connection
   * @param postId Target post’s ID to host the live thread
   * @param body Initial configuration and state for the new live thread
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussLiveThread.ICreate,
  ): Promise<IEconDiscussLiveThread> {
    try {
      return await postEconDiscussMemberPostsPostIdLive({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a post’s live thread (econ_discuss_live_threads).
   *
   * Update the existing live thread associated with the given post. The
   * econ_discuss_live_threads model stores the lifecycle state (state) and
   * configuration flags including expert_only and access_scope. It also
   * maintains operational timestamps such as scheduled_start_at, started_at,
   * paused_at, ended_at, and archived_at to accurately record room activity
   * transitions.
   *
   * Security considerations: only the host_user_id (the owner in
   * econ_discuss_live_threads) or authorized staff (e.g., moderators/admins)
   * may perform updates. Policy may require 2FA for elevated roles (see
   * econ_discuss_moderators.enforced_2fa and econ_discuss_admins.enforced_2fa).
   * Authorization checks and session handling occur outside this contract.
   *
   * Business rules: Allowed state transitions are enforced in service logic,
   * for example: scheduled → waiting/live; live → paused/ended; ended →
   * archived. Configuration like expert_only, access_scope, and
   * slow_mode_interval_seconds can be adjusted when permitted by policy and
   * thread state. The operation also validates that a live thread exists for
   * the specified post and returns 404 if not found. It returns the updated
   * live thread including any new timestamps set as a result of state changes.
   *
   * @param connection
   * @param postId Target post’s ID owning the live thread to update
   * @param body Fields to modify on the live thread, including state
   *   transitions and settings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussLiveThread.IUpdate,
  ): Promise<IEconDiscussLiveThread> {
    try {
      return await putEconDiscussMemberPostsPostIdLive({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a post’s live thread by marking deleted_at
   * (econ_discuss_live_threads).
   *
   * Delete the live thread associated with the specified post. The
   * econ_discuss_live_threads table includes a deleted_at timestamp indicating
   * that a thread has been retired from active use. This operation marks the
   * record as deleted so it no longer appears in read endpoints or future
   * operations, while retaining the record for audit and historical purposes.
   * Related messages stored in econ_discuss_live_messages remain intact and
   * continue to reference the thread unless further archival rules apply.
   *
   * Security: only the host (host_user_id) or authorized staff
   * (moderators/admins) can retire a live thread. The service ensures the post
   * exists and that a live thread is currently associated; otherwise, a 404 is
   * returned. If policy requires, the thread may first be transitioned to an
   * ended/archived state prior to removal. The exact behavior of message
   * visibility and transcript preservation is governed by business rules and
   * the state/archival columns on the model.
   *
   * @param connection
   * @param postId Target post’s ID whose live thread will be removed from
   *   active use
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussMemberPostsPostIdLive({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
