import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions } from "../../../../../../../providers/postEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions";
import { MemberAuth } from "../../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../../decorators/payload/MemberPayload";
import { putEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions } from "../../../../../../../providers/putEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions";
import { patchEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions } from "../../../../../../../providers/patchEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions";
import { getEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId } from "../../../../../../../providers/getEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId";
import { putEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId } from "../../../../../../../providers/putEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId";
import { deleteEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId } from "../../../../../../../providers/deleteEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId";

import { IEconDiscussPollResponse } from "../../../../../../../api/structures/IEconDiscussPollResponse";
import { IEconDiscussPollResponseOption } from "../../../../../../../api/structures/IEconDiscussPollResponseOption";

@Controller(
  "/econDiscuss/member/posts/:postId/poll/responses/:responseId/options",
)
export class EcondiscussMemberPostsPollResponsesOptionsController {
  /**
   * Add option selections to a poll response
   * (econ_discuss_poll_response_options).
   *
   * This endpoint appends option selections to the current responseâ€™s selection
   * set. Per schema, econ_discuss_poll_response_options links a response to
   * options with an optional position for ranking questions. For
   * multiple_choice, ensure that after adding, the total selections do not
   * exceed max_selections defined on econ_discuss_polls. For single_choice
   * questions, clients SHOULD NOT use this endpoint (use the PATCH replacement
   * instead) because only one selection is permitted. For ranking, each added
   * option may include a position that must be unique and within the 1..N
   * range, and must not conflict with existing positions.
   *
   * Security and permissions: only the authenticated owner may append
   * selections, and the server SHOULD enforce allow_vote_change=true, active
   * poll windows (start_at/end_at), and eligibility checks
   * (min_voter_reputation, min_account_age_hours). If the response belongs to a
   * poll that is closed or change is disallowed, reject with 400/403
   * accordingly.
   *
   * Validation and integrity: all option IDs must reference options from the
   * same poll; duplicates with existing selections must be rejected. For
   * ranking, adding an option with a position already taken must fail
   * validation. This operation does not remove prior selections; use the PATCH
   * endpoint for replacement semantics. Related operations include the PATCH
   * options replacement endpoint, the response PUT endpoint for scalar value
   * updates, and the DELETE response endpoint for withdrawal.
   *
   * @param connection
   * @param postId Host post ID that owns the poll for this response
   * @param responseId Target poll response ID to which options will be added
   * @param body Options to append to the existing selection set. Provide
   *   optionIds (and positions for ranking). Reject duplicates or capacity
   *   violations.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async addOptions(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("responseId")
    responseId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPollResponseOption.ICreate,
  ): Promise<IEconDiscussPollResponse> {
    try {
      return await postEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions(
        {
          member,
          postId,
          responseId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Replace selection options for a poll response
   * (econ_discuss_poll_response_options).
   *
   * This endpoint updates option selections for a given response by replacing
   * the entire selection set in econ_discuss_poll_response_options. The schema
   * models selections with a response-to-option link and an optional position
   * for ranking questions. For multiple_choice, the number of selected options
   * must respect min_selections and max_selections on econ_discuss_polls; for
   * single_choice, exactly one option should be provided; for ranking, each
   * provided option may include a unique position (1..N) with no duplicates.
   *
   * Security and permissions: only the authenticated owner of the response may
   * modify selections, and the server SHOULD enforce allow_vote_change=true,
   * poll open windows (start_at/end_at), and user eligibility
   * (min_voter_reputation, min_account_age_hours) from econ_discuss_polls. If
   * the poll is closed or edits are disallowed, the server SHOULD return
   * 400/403 with an explanatory message.
   *
   * Data integrity and validation: all option IDs in the request MUST belong to
   * the same poll tied to the response, or the request MUST be rejected. For
   * ranking, positions MUST be unique and within bounds of provided options;
   * for multiple_choice/single_choice, positions SHOULD be omitted. The
   * operation should delete any prior econ_discuss_poll_response_options rows
   * not present in the new set, then insert or update rows to match the
   * provided list. Related operations include POST to add options incrementally
   * and the response PUT endpoint for scalar updates (likert_value or
   * numeric_value).
   *
   * @param connection
   * @param postId Host post ID that owns the poll for this response
   * @param responseId Target poll response ID whose selections will be replaced
   * @param body Complete set of option selections for this response. For
   *   multiple_choice provide 1..N optionIds; for single_choice provide exactly
   *   1; for ranking include positions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async putByPostidAndResponseid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("responseId")
    responseId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPollResponseOption.IRequest,
  ): Promise<IEconDiscussPollResponse> {
    try {
      return await putEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions(
        {
          member,
          postId,
          responseId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Replace selection options for a poll response
   * (econ_discuss_poll_response_options).
   *
   * This endpoint updates option selections for a given response by replacing
   * the entire selection set in econ_discuss_poll_response_options. The schema
   * models selections with a response-to-option link and an optional position
   * for ranking questions. For multiple_choice, the number of selected options
   * must respect min_selections and max_selections on econ_discuss_polls; for
   * single_choice, exactly one option should be provided; for ranking, each
   * provided option may include a unique position (1..N) with no duplicates.
   *
   * Security and permissions: only the authenticated owner of the response may
   * modify selections, and the server SHOULD enforce allow_vote_change=true,
   * poll open windows (start_at/end_at), and user eligibility
   * (min_voter_reputation, min_account_age_hours) from econ_discuss_polls. If
   * the poll is closed or edits are disallowed, the server SHOULD return
   * 400/403 with an explanatory message.
   *
   * Data integrity and validation: all option IDs in the request MUST belong to
   * the same poll tied to the response, or the request MUST be rejected. For
   * ranking, positions MUST be unique and within bounds of provided options;
   * for multiple_choice/single_choice, positions SHOULD be omitted. The
   * operation should delete any prior econ_discuss_poll_response_options rows
   * not present in the new set, then insert or update rows to match the
   * provided list. Related operations include POST to add options incrementally
   * and the response PUT endpoint for scalar updates (likert_value or
   * numeric_value).
   *
   * @param connection
   * @param postId Host post ID that owns the poll for this response
   * @param responseId Target poll response ID whose selections will be replaced
   * @param body Complete set of option selections for this response. For
   *   multiple_choice provide 1..N optionIds; for single_choice provide exactly
   *   1; for ranking include positions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async patchByPostidAndResponseid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("responseId")
    responseId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPollResponseOption.IRequest,
  ): Promise<IEconDiscussPollResponse> {
    try {
      return await patchEconDiscussMemberPostsPostIdPollResponsesResponseIdOptions(
        {
          member,
          postId,
          responseId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific response option (econ_discuss_poll_response_options) for a
   * poll response.
   *
   * Fetch a single poll response option entry associated with a respondentâ€™s
   * selection. According to the Prisma schema,
   * econ_discuss_poll_response_options is a junction table that links a
   * response (econ_discuss_poll_responses.id) to one selected option
   * (econ_discuss_poll_options.id), with an optional position field used when
   * the question type is ranking. Each row represents either one of multiple
   * selections (multiple_choice) or the sole selection (single_choice), and
   * persists even if the authorâ€™s account is anonymized, per auditability rules
   * in the schema comments.
   *
   * Security and privacy considerations: the schema for
   * econ_discuss_poll_responses explicitly models response status states
   * (active, withdrawn, quarantined, invalidated), and the platformâ€™s business
   * rules require that individual selections are private. Implementations must
   * restrict access so that only the response owner (econ_discuss_users.id
   * matching the authenticated user), or authorized moderation/admin roles, can
   * read raw selection rows. This endpoint should therefore be protected for
   * authenticated users and perform ownership checks; public aggregation is
   * exposed via the separate results endpoint.
   *
   * Entity relationships: the path requires a valid postId that owns a poll
   * (econ_discuss_polls with unique econ_discuss_post_id), then a responseId
   * that belongs to that poll (econ_discuss_poll_responses with unique
   * (poll,user)), then a responseOptionId that belongs to that response
   * (econ_discuss_poll_response_options). The provider should verify these
   * relationships to prevent IDOR issues. The returned object corresponds to
   * IEconDiscussPollResponseOption, reflecting fields from
   * econ_discuss_poll_response_options (ids, foreign keys, position,
   * created_at/updated_at).
   *
   * Validation and errors: return 404 if the response or option does not exist
   * under the specified postâ€™s poll; 403 if the caller is not permitted to see
   * raw response content; 409 if state prohibits reading (e.g., response
   * invalidated and hidden by policy). Timestamps are ISO 8601 strings; follow
   * the standard error model.
   *
   * @param connection
   * @param postId Host post ID (UUID) that owns the poll
   * @param responseId Poll response ID (UUID) belonging to the postâ€™s poll
   * @param responseOptionId Response option row ID (UUID) within the response
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":responseOptionId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("responseId")
    responseId: string & tags.Format<"uuid">,
    @TypedParam("responseOptionId")
    responseOptionId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussPollResponseOption> {
    try {
      return await getEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId(
        {
          member,
          postId,
          responseId,
          responseOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a response option row in econ_discuss_poll_response_options.
   *
   * Modify the selected option row linked to a poll response. The
   * econ_discuss_poll_response_options table stores the mapping between a
   * response (econ_discuss_poll_responses) and a selected option
   * (econ_discuss_poll_options), with an optional position used for ranking
   * questions. Per schema comments, these rows are retained for history, with
   * deleted_at supporting removal while preserving auditability.
   *
   * Security and permissions: because raw selections are private, only the
   * response owner (econ_discuss_poll_responses.econ_discuss_user_id) or
   * authorized staff may update this row. Implementation must also enforce
   * business rules from econDiscuss polls: for example, allow updates only if
   * allow_vote_change is true on econ_discuss_polls and the poll is within its
   * open window (start_at/end_at). For ranking, position may be adjusted; for
   * multiple_choice, switching the option may be allowed; for single_choice,
   * updates typically replace the selected option.
   *
   * Validation and relationships: verify that postId â†’ poll
   * (econ_discuss_polls.econ_discuss_post_id) exists, that responseId belongs
   * to that poll (via econ_discuss_poll_responses.econ_discuss_poll_id), and
   * that responseOptionId belongs to the response
   * (econ_discuss_poll_response_options.econ_discuss_poll_response_id). Return
   * 404 for non-existent chains or mismatches; 403 on permission failures; 409
   * if the response is in a terminal status (withdrawn/invalidated) or the poll
   * configuration disallows changes.
   *
   * Error handling and auditing: apply standard error model with clear
   * messages, and record changes for auditability. Timestamps are ISO 8601
   * strings in responses.
   *
   * @param connection
   * @param postId Host post ID (UUID) that owns the poll
   * @param responseId Poll response ID (UUID) belonging to the postâ€™s poll
   * @param responseOptionId Response option row ID (UUID) within the response
   * @param body Fields to update for the response option (e.g.,
   *   econ_discuss_poll_option_id and/or ranking position) within policy
   *   constraints
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":responseOptionId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("responseId")
    responseId: string & tags.Format<"uuid">,
    @TypedParam("responseOptionId")
    responseOptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPollResponseOption.IUpdate,
  ): Promise<IEconDiscussPollResponseOption> {
    try {
      return await putEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId(
        {
          member,
          postId,
          responseId,
          responseOptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a response option (econ_discuss_poll_response_options) from a poll
   * response.
   *
   * Remove a selected option entry from a poll response. In the Prisma schema,
   * econ_discuss_poll_response_options includes a deleted_at field to support
   * reversible removals. Business logic should honor polling policy: e.g.,
   * allow removal only when allow_vote_change is true and the poll window is
   * still open, or when a withdrawal process is invoked. For ranking questions,
   * deletion removes that ranked item from the userâ€™s ordering; for multiple
   * choice, it unselects that option.
   *
   * Security and relationships: enforce that postId resolves to a poll
   * (econ_discuss_polls unique per post), responseId belongs to that poll, and
   * responseOptionId belongs to the response. Only the response owner or
   * authorized moderators/admins may remove selections. Return 404 for missing
   * resources, 403 for permission issues, and 409 if removal conflicts with
   * poll state (e.g., closed or response invalidated by moderation).
   *
   * Behavior and auditing: This operation typically sets deleted_at on the
   * response-option record; records so marked are excluded from tallies. No
   * body is returned on success.
   *
   * @param connection
   * @param postId Host post ID (UUID) that owns the poll
   * @param responseId Poll response ID (UUID) belonging to the postâ€™s poll
   * @param responseOptionId Response option row ID (UUID) within the response
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":responseOptionId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("responseId")
    responseId: string & tags.Format<"uuid">,
    @TypedParam("responseOptionId")
    responseOptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussMemberPostsPostIdPollResponsesResponseIdOptionsResponseOptionId(
        {
          member,
          postId,
          responseId,
          responseOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
