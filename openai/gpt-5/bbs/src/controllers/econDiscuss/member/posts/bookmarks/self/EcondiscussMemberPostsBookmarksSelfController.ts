import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteEconDiscussMemberPostsPostIdBookmarksSelf } from "../../../../../../providers/deleteEconDiscussMemberPostsPostIdBookmarksSelf";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";

@Controller("/econDiscuss/member/posts/:postId/bookmarks/self")
export class EcondiscussMemberPostsBookmarksSelfController {
  /**
   * Remove a user's post bookmark in econ_discuss_post_bookmarks.
   *
   * This endpoint removes the current user's bookmark of a target post
   * identified by postId. It operates on the econ_discuss_post_bookmarks table,
   * which according to the Prisma schema keeps a unique pair of
   * econ_discuss_user_id and econ_discuss_post_id with a created_at and
   * updated_at timeline and a deleted_at column for retiring records. The model
   * also includes an optional note property that remains private to the owner
   * and is not exposed via this endpoint.
   *
   * Security and permissions: only authenticated users can call this API, and
   * the provider must enforce ownership by matching the authenticated user with
   * econ_discuss_user_id. Attempting to remove a bookmark that does not exist
   * should be treated as idempotent success or return a 404 based on product
   * policy; in all cases, no other user's bookmarks are impacted. The operation
   * does not return a response body on success.
   *
   * Relationship to underlying entities: bookmarks reference posts via
   * econ_discuss_post_id and users via econ_discuss_user_id (both with onDelete
   * Cascade in the schema), ensuring automatic cleanup when either side is
   * deleted. Business logic may choose to retire a record by setting deleted_at
   * for reversibility and audit or permanently delete it when policy allows.
   *
   * Validation and errors: the postId must be a valid UUID referencing an
   * existing post; if the post is not visible to the user due to policy, the
   * provider should still permit removal of the user’s bookmark record if
   * present. Typical errors include 401 for unauthenticated requests and 403 if
   * cross-user attempts are detected.
   *
   * @param connection
   * @param postId Target post ID to remove current user’s bookmark for
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussMemberPostsPostIdBookmarksSelf({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
