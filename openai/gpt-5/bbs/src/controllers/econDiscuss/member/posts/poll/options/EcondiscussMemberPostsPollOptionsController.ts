import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberPostsPostIdPollOptions } from "../../../../../../providers/postEconDiscussMemberPostsPostIdPollOptions";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";
import { putEconDiscussMemberPostsPostIdPollOptionsOptionId } from "../../../../../../providers/putEconDiscussMemberPostsPostIdPollOptionsOptionId";

import { IEconDiscussPollOption } from "../../../../../../api/structures/IEconDiscussPollOption";

@Controller("/econDiscuss/member/posts/:postId/poll/options")
export class EcondiscussMemberPostsPollOptionsController {
  /**
   * Create a new poll option for a post’s poll (Prisma:
   * econ_discuss_poll_options).
   *
   * This operation appends a new option to the poll that belongs to the given
   * post. Storage is in econ_discuss_poll_options, which includes id,
   * econ_discuss_poll_id, option_text, position, created_at, updated_at, and
   * deleted_at columns. The parent poll must exist in econ_discuss_polls for
   * the specified post (unique econ_discuss_post_id). For question types that
   * utilize options (single_choice, multiple_choice, ranking), creation is
   * permitted; for types like likert and numeric_estimate, business logic
   * should prevent creation or ignore options according to policy.
   *
   * Security considerations: only authenticated users with rights to modify the
   * poll (typically the post owner or privileged staff) can create options.
   * This endpoint requires authentication and performs authorization/ownership
   * checks in the provider. The provider should also normalize and validate
   * option_text, and assign or validate position while respecting the unique
   * constraints (econ_discuss_poll_id, option_text) and (econ_discuss_poll_id,
   * position). If a duplicate is attempted, return a conflict error.
   *
   * Validation and error handling: verify the postId exists and has a poll;
   * validate that the request body includes a non-empty option_text and a valid
   * position integer if provided; ensure deleted options are not reused in a
   * way that violates uniqueness without proper handling. Typical errors: 400
   * on validation failure, 401 when unauthenticated, 403 when not authorized to
   * modify the poll, 404 if the post or poll is missing, 409 on uniqueness
   * violation, and 500 for unexpected errors.
   *
   * @param connection
   * @param postId Post identifier whose poll will receive the new option
   * @param body Creation payload for a poll option, including option text and
   *   ordering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPollOption.ICreate,
  ): Promise<IEconDiscussPollOption> {
    try {
      return await postEconDiscussMemberPostsPostIdPollOptions({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing poll option for a post’s poll (Prisma:
   * econ_discuss_poll_options).
   *
   * This operation updates a poll option identified by optionId under the poll
   * associated with the given postId. The underlying table
   * econ_discuss_poll_options stores option_text and position and enforces
   * uniqueness within each poll for both fields combined with the poll FK. The
   * provider must ensure the target option belongs to the poll attached to the
   * specified post, and that the new values respect uniqueness and ordering
   * constraints.
   *
   * Security: authenticated users with appropriate permissions (typically the
   * post owner or privileged roles) may update options. The provider should
   * enforce authorization and ownership checks. Records with deleted_at not
   * null should be considered unavailable for updates.
   *
   * Validation and business rules: ensure non-empty option_text when provided;
   * validate position as an integer consistent with intended display order;
   * prevent duplication across (econ_discuss_poll_id, option_text) and
   * (econ_discuss_poll_id, position). For polls whose question_type does not
   * utilize options, providers should reject updates with a clear validation
   * error. Expected errors: 400 for validation issues, 401 for unauthenticated,
   * 403 for unauthorized, 404 when the post/poll/option is not found or is not
   * associated as required, 409 for uniqueness conflicts, and 500 on unexpected
   * failures.
   *
   * @param connection
   * @param postId Post identifier whose poll owns the option being updated
   * @param optionId Target poll option’s ID to update
   * @param body Update payload for a poll option, such as text or position
   *   changes
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":optionId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPollOption.IUpdate,
  ): Promise<IEconDiscussPollOption> {
    try {
      return await putEconDiscussMemberPostsPostIdPollOptionsOptionId({
        member,
        postId,
        optionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
