import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteEconDiscussMemberPostsPostIdVotesSelf } from "../../../../../../providers/deleteEconDiscussMemberPostsPostIdVotesSelf";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";

@Controller("/econDiscuss/member/posts/:postId/votes/self")
export class EcondiscussMemberPostsVotesSelfController {
  /**
   * Withdraw the caller’s vote by updating status in econ_discuss_post_votes.
   *
   * Remove the caller’s active vote from the post by transitioning the related
   * econ_discuss_post_votes row to status="withdrawn" while preserving
   * auditability. The schema models lifecycle through the status column with
   * allowed values such as "active", "withdrawn", "switched", "discounted", and
   * "invalidated". Implementations also maintain created_at and updated_at for
   * historical analysis and rely on indexes such as (econ_discuss_user_id,
   * created_at) for user history queries.
   *
   * Security and policy: the caller must be an authenticated member with an
   * existing vote. Business rules may impose withdrawal windows; after such
   * windows, reject with a policy error. If no vote exists, either respond
   * idempotently with success without change or return not found per policy.
   * This action only affects the caller’s own record; it does not change other
   * users’ votes.
   *
   * Related endpoints: POST /posts/{postId}/votes to cast or change a vote and
   * PATCH /posts/{postId}/votes for administrative listing and review. This
   * deletion updates lifecycle state rather than physically deleting the row,
   * maintaining consistency with audit requirements.
   *
   * @param connection
   * @param postId UUID of the post from which the caller withdraws the vote
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussMemberPostsPostIdVotesSelf({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
