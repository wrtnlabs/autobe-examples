import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberPostsPostIdPoll } from "../../../../../providers/postEconDiscussMemberPostsPostIdPoll";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putEconDiscussMemberPostsPostIdPoll } from "../../../../../providers/putEconDiscussMemberPostsPostIdPoll";
import { deleteEconDiscussMemberPostsPostIdPoll } from "../../../../../providers/deleteEconDiscussMemberPostsPostIdPoll";

import { IEconDiscussPoll } from "../../../../../api/structures/IEconDiscussPoll";

@Controller("/econDiscuss/member/posts/:postId/poll")
export class EcondiscussMemberPostsPollController {
  /**
   * Create a poll for a post (econ_discuss_polls and options).
   *
   * This POST endpoint creates a poll for the specified post using the
   * econ_discuss_polls table fields described in the Prisma schema: question,
   * question_type (single_choice, multiple_choice, likert, ranking,
   * numeric_estimate), visibility_mode (hidden_until_close, visible_after_vote,
   * always_visible), expert_only, allow_vote_change, min_voter_reputation,
   * min_account_age_hours, min_selections/max_selections for multiple choice,
   * likert scale parameters (scale_points with endpoint/mid labels), numeric
   * parameters (unit_label, numeric_min/numeric_max/numeric_step), and
   * start_at/end_at scheduling. Options are saved in econ_discuss_poll_options
   * with per-poll uniqueness on option_text and position.
   *
   * Permissions and validation: Only authenticated members (e.g., post authors
   * or authorized users) can create a poll. Enforce one‑poll‑per‑post via the
   * unique econ_discuss_post_id constraint. Validate that provided parameters
   * satisfy business and schema rules such as min_selections ≤ max_selections,
   * numeric_min < numeric_max, numeric_step > 0, and start_at < end_at when
   * both are provided. Ensure question_type and visibility_mode values align
   * with policy constraints, including expert_only implications.
   *
   * Related operations: Use GET /posts/{postId}/poll to read back the
   * configuration, PUT /posts/{postId}/poll to adjust allowed fields later, and
   * DELETE /posts/{postId}/poll to retire the poll by marking it deleted.
   * Errors include 404 if the post does not exist, 409 when a poll already
   * exists for the post, and 400 for invalid payloads.
   *
   * @param connection
   * @param postId Target post’s UUID that will host the poll.
   * @param body Poll configuration and options to create.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPoll.ICreate,
  ): Promise<IEconDiscussPoll> {
    try {
      return await postEconDiscussMemberPostsPostIdPoll({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a post’s poll (econ_discuss_polls).
   *
   * This PUT endpoint updates the poll in econ_discuss_polls associated with
   * the given post (via econ_discuss_post_id). Per the Prisma comments,
   * editable fields include question, visibility_mode, eligibility thresholds
   * (min_voter_reputation, min_account_age_hours), per-type parameters (min/max
   * selections for multiple choice, likert scale configuration, numeric bounds
   * and step), and start/end scheduling. Business rules commonly restrict
   * structural changes such as question_type or option set once responses exist
   * in econ_discuss_poll_responses or the start time has passed; providers
   * should enforce those constraints while allowing benign text
   * clarifications.
   *
   * Authorization and validation: Only authenticated members with appropriate
   * privileges may update the poll. Validate that updated values remain
   * consistent with schema constraints (e.g., numeric_min < numeric_max, valid
   * scale_points, min_selections ≤ max_selections). If options are updated,
   * maintain uniqueness on option_text and position within
   * econ_discuss_poll_options.
   *
   * Error handling and related endpoints: Return 404 if the poll or post is not
   * found or the poll is already retired (deleted_at populated). Return 400 for
   * invalid updates or policies violated, and 409 for conflicts such as
   * disallowed structural changes. Clients can retrieve the current
   * configuration via GET /posts/{postId}/poll and retire the poll using DELETE
   * /posts/{postId}/poll.
   *
   * @param connection
   * @param postId Target post’s UUID hosting the poll to update.
   * @param body Fields to update for the poll, respecting lifecycle
   *   constraints.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPoll.IUpdate,
  ): Promise<IEconDiscussPoll> {
    try {
      return await putEconDiscussMemberPostsPostIdPoll({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a post’s poll by setting deleted_at (econ_discuss_polls).
   *
   * This DELETE endpoint marks the poll linked to the given post as deleted by
   * setting the deleted_at timestamp in econ_discuss_polls. As described in the
   * Prisma comments, deleted_at indicates removal from active use while
   * retaining records for audit and history. After this action, GET
   * /posts/{postId}/poll should return 404 because the poll is no longer
   * active.
   *
   * Security and behavior: Only authenticated members with the proper rights
   * (e.g., the post author or governance roles) can perform this operation.
   * Providers should verify the post and poll exist and are currently active
   * (deleted_at is null) before proceeding. Treat repeated requests as
   * idempotent: if already marked deleted, the operation should succeed without
   * further changes.
   *
   * Errors and related operations: Return 404 if no active poll exists for the
   * specified post, and 403 when the caller lacks permission. Related
   * operations include POST to create a new poll, GET to read configuration,
   * and PUT to update allowable fields prior to retirement.
   *
   * @param connection
   * @param postId Target post’s UUID hosting the poll to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussMemberPostsPostIdPoll({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
