import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberPostsPostIdVotes } from "../../../../../providers/postEconDiscussMemberPostsPostIdVotes";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IEconDiscussPostVote } from "../../../../../api/structures/IEconDiscussPostVote";

@Controller("/econDiscuss/member/posts/:postId/votes")
export class EcondiscussMemberPostsVotesController {
  /**
   * Cast or change the current member’s vote in econ_discuss_post_votes for a
   * post.
   *
   * Cast or change the caller’s vote on the target post. The
   * econ_discuss_post_votes model represents a single user’s vote with fields
   * vote_type and status, enforcing one row per user/post via a unique
   * constraint. On initial voting, create a row linked to econ_discuss_posts
   * (via econ_discuss_post_id) and econ_discuss_users (via
   * econ_discuss_user_id), setting status to "active". When changing an
   * existing vote within policy windows, update the existing row’s vote_type
   * and status (for example, to "switched"), preserving the unique constraint
   * without creating duplicates.
   *
   * Security and policy: the caller must be an authenticated member and
   * eligible to vote (not voting on own content, within quotas, and not
   * restricted by sanctions). This operation should be idempotent; sending the
   * same vote_type for an already matching record succeeds without additional
   * mutations. Integrity or moderation logic may later adjust status to
   * "discounted" or "invalidated" when necessary per policy.
   *
   * Errors and behavior: return not found if the post does not exist or is not
   * eligible for voting (e.g., locked/archived). Return validation errors for
   * invalid vote_type. Concurrency is handled via upsert semantics honoring the
   * unique (econ_discuss_user_id, econ_discuss_post_id) constraint. Related
   * operations include listing votes for admins and withdrawing one’s vote
   * (DELETE /posts/{postId}/votes/self).
   *
   * @param connection
   * @param postId UUID of the post to vote on
   * @param body Desired vote payload with vote_type selection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPostVote.ICreate,
  ): Promise<void> {
    try {
      return await postEconDiscussMemberPostsPostIdVotes({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
