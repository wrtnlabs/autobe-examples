import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberPostsPostIdBookmarks } from "../../../../../providers/postEconDiscussMemberPostsPostIdBookmarks";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IEconDiscussPostBookmark } from "../../../../../api/structures/IEconDiscussPostBookmark";

@Controller("/econDiscuss/member/posts/:postId/bookmarks")
export class EcondiscussMemberPostsBookmarksController {
  /**
   * Create a member’s bookmark for a post in econ_discuss_post_bookmarks
   * (idempotent).
   *
   * Create a personal bookmark for the target post. The
   * econ_discuss_post_bookmarks model contains one row per saved (user, post)
   * and includes columns such as note (owner-only), created_at, updated_at, and
   * a deletion timestamp used by retention logic. A unique
   * (econ_discuss_user_id, econ_discuss_post_id) constraint ensures idempotent
   * behavior when the same post is saved multiple times by the same member.
   *
   * Security and behavior: the caller must be an authenticated member with
   * visibility to the post. The operation should succeed idempotently when
   * already bookmarked and may optionally restore a previously retired record.
   * The note field remains private to the owner and is excluded from any shared
   * views in other parts of the system.
   *
   * Errors and validation: return not found if the post does not exist or is
   * not visible to the caller. Enforce application-level validations on note
   * length or format where required. Related operations include listing a
   * member’s bookmarks and removing a bookmark, which update or retire the
   * corresponding row as appropriate.
   *
   * @param connection
   * @param postId UUID of the post to bookmark
   * @param body Optional private note and context for creating the bookmark
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussPostBookmark.ICreate,
  ): Promise<void> {
    try {
      return await postEconDiscussMemberPostsPostIdBookmarks({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
