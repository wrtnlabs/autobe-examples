import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussMemberUsersUserIdReputationEvents } from "../../../../../../providers/getEconDiscussMemberUsersUserIdReputationEvents";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";
import { patchEconDiscussMemberUsersUserIdReputationEvents } from "../../../../../../providers/patchEconDiscussMemberUsersUserIdReputationEvents";
import { getEconDiscussMemberUsersUserIdReputationEventsEventId } from "../../../../../../providers/getEconDiscussMemberUsersUserIdReputationEventsEventId";

import { IPageIEconDiscussReputationEvent } from "../../../../../../api/structures/IPageIEconDiscussReputationEvent";
import { IEconDiscussReputationEvent } from "../../../../../../api/structures/IEconDiscussReputationEvent";

@Controller("/econDiscuss/member/users/:userId/reputation/events")
export class EcondiscussMemberUsersReputationEventsController {
  /**
   * List recent reputation events (econ_discuss_reputation_events) for a user.
   *
   * This operation retrieves a default, paginated list of the latest reputation
   * events for the specified user from econ_discuss_reputation_events. The
   * Prisma schema defines each ledger entry with id, user_id, optional
   * actor_user_id, optional post_id, points (signed integer), reason, source
   * (optional), occurred_at, created_at, updated_at, and optional deleted_at.
   * Records where deleted_at is set should be excluded from normal lists.
   *
   * Security: Requires authentication (role "member"). Business rules commonly
   * restrict detailed ledger visibility to the owner; providers should ensure
   * that the caller is authorized to view the specified userId or apply
   * policy-based redaction as necessary.
   *
   * Behavior: Sorting defaults to occurred_at descending. Pagination, search,
   * or sorting parameters (if any) should be provided via conventional query
   * params handled by the controller, while this contract focuses on path
   * parameters. For complex queries, use the PATCH variant on the same path.
   * Related operations include the aggregate retrieval and detailed event
   * retrieval by ID.
   *
   * @param connection
   * @param userId Target user’s ID whose reputation events are listed
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IPageIEconDiscussReputationEvent> {
    try {
      return await getEconDiscussMemberUsersUserIdReputationEvents({
        member,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search paginated reputation ledger (econ_discuss_reputation_events) for a
   * user.
   *
   * This operation provides advanced search over the
   * econ_discuss_reputation_events ledger for a given user. The Prisma model
   * includes id, user_id, optional actor_user_id, optional post_id, points
   * (signed integer), reason (categorical/human-readable), source (optional),
   * occurred_at, created_at, updated_at, and an optional deleted_at used for
   * exceptional corrections. Indexes on (user_id, occurred_at) and (post_id,
   * occurred_at) make time-window queries efficient.
   *
   * Security: Access should be limited to authenticated viewers (role
   * "member"). While the ledger supports audit and recomputation, user-facing
   * exposure should include only the target user’s own events unless policy
   * permits broader visibility. The provider should enforce that the path
   * userId matches the authenticated principal or apply role-based checks. The
   * results must exclude entries where deleted_at is set.
   *
   * Validation and business logic: The IEconDiscussReputationEvent.IRequest
   * body should support pagination (page, pageSize), sorting (e.g., occurred_at
   * desc), and optional filters: occurred_at range, points min/max, reason
   * substring match, actor_user_id, post_id, and status categories if
   * represented in reason/source. Related operations include GET
   * /users/{userId}/reputation for the aggregate and GET
   * /users/{userId}/reputation/events/{eventId} for a specific ledger entry.
   * Standard error handling applies for invalid filters or unauthorized
   * access.
   *
   * @param connection
   * @param userId Target user’s ID whose reputation events are being queried
   * @param body Search criteria, sorting, and pagination for reputation events
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussReputationEvent.IRequest,
  ): Promise<IPageIEconDiscussReputationEvent> {
    try {
      return await patchEconDiscussMemberUsersUserIdReputationEvents({
        member,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific reputation event (econ_discuss_reputation_events) by ID for
   * a user.
   *
   * This operation fetches a single event from econ_discuss_reputation_events.
   * The Prisma schema includes fields id, user_id, optional actor_user_id,
   * optional post_id, points (signed integer), reason, source (optional),
   * occurred_at, created_at, updated_at, and optional deleted_at. The
   * controller must enforce that the path userId matches the row’s user_id and
   * that the eventId matches id. If the event is marked inactive via
   * deleted_at, it should not be returned in active views.
   *
   * Security: Authentication (role "member") is required. The provider should
   * ensure only authorized viewers access the event details, typically
   * restricting to the owner of the events unless policy permits broader
   * visibility.
   *
   * Error handling: Return 404 if no matching event is found for the given
   * userId and eventId, or if it is not visible due to retirement. Related
   * endpoints include the aggregate reputation retrieval and the events
   * listing/search endpoints for the same user.
   *
   * @param connection
   * @param userId Owner user’s ID used to validate the event belongs to this
   *   account
   * @param eventId Reputation event’s ID to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussReputationEvent> {
    try {
      return await getEconDiscussMemberUsersUserIdReputationEventsEventId({
        member,
        userId,
        eventId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
