import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postEconDiscussMemberUsersUserIdFollow } from "../../../../../providers/postEconDiscussMemberUsersUserIdFollow";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { deleteEconDiscussMemberUsersUserIdFollow } from "../../../../../providers/deleteEconDiscussMemberUsersUserIdFollow";

@Controller("/econDiscuss/member/users/:userId/follow")
export class EcondiscussMemberUsersFollowController {
  /**
   * Create or reinstate a follow edge in econ_discuss_user_follows (auth
   * required).
   *
   * This operation establishes a follow edge in econ_discuss_user_follows from
   * the authenticated account (follower_user_id) to the target account
   * identified by the {userId} path parameter (followee_user_id). The schema
   * documents econ_discuss_user_follows as the social graph table with primary
   * key id, created_at timestamps, and a deleted_at timestamp to retire links
   * while preserving auditability. A unique (follower_user_id,
   * followee_user_id) constraint enforces idempotency.
   *
   * Provider logic typically inserts a new row when none exists, or, if a
   * matching row exists with deleted_at set, clears deleted_at to reactivate
   * the relationship. Attempts to follow oneself should be rejected.
   * Authorization requires a signed-in user. On success, this endpoint returns
   * no content (204) consistent with side-effect-only operations.
   *
   * Related endpoints: DELETE /econDiscuss/member/users/{userId}/follow to
   * retire the relationship (sets deleted_at), and GET/PATCH
   * /econDiscuss/users/{userId}/following to read the resulting followees
   * list.
   *
   * @param connection
   * @param userId Identifier of the target user to follow
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await postEconDiscussMemberUsersUserIdFollow({
        member,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retire a follow edge (set deleted_at) in econ_discuss_user_follows (auth
   * required).
   *
   * This operation retires an existing follow relationship by locating the
   * econ_discuss_user_follows row where follower_user_id is the authenticated
   * account and followee_user_id equals the {userId} path value, then setting
   * the deleted_at timestamp. The schema for econ_discuss_user_follows includes
   * deleted_at specifically to retire links while preserving history, rather
   * than immediately removing rows.
   *
   * If no active relationship exists, providers may return 204 (idempotent) or
   * 404 depending on policy. Authorization is required to ensure only the
   * follower can modify their own edges. This operation returns no content on
   * success, and complements POST /econDiscuss/member/users/{userId}/follow
   * (creation) and GET/PATCH /econDiscuss/users/{userId}/following (read).
   *
   * Error handling considerations include rejecting attempts to unfollow
   * oneself where not applicable and handling concurrent state changes
   * gracefully given the unique (follower_user_id, followee_user_id)
   * constraint.
   *
   * @param connection
   * @param userId Identifier of the target user to unfollow
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteEconDiscussMemberUsersUserIdFollow({
        member,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
