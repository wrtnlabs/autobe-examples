import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussMemberUsersUserIdReputation } from "../../../../../providers/getEconDiscussMemberUsersUserIdReputation";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IEconDiscussUserReputation } from "../../../../../api/structures/IEconDiscussUserReputation";

@Controller("/econDiscuss/member/users/:userId/reputation")
export class EcondiscussMemberUsersReputationController {
  /**
   * Get current reputation aggregate (econ_discuss_user_reputations) for a
   * user.
   *
   * This operation reads the reputation aggregate for a user from the
   * econ_discuss_user_reputations table. The Prisma schema describes
   * econ_discuss_user_reputations with fields id, user_id (unique), score
   * (non-negative integer), last_updated_at, created_at, updated_at, and an
   * optional deleted_at to indicate a retired aggregate. The table acts as a
   * fast-access cache for authorization gates while the immutable history is
   * kept in econ_discuss_reputation_events.
   *
   * Security and visibility depend on policy. Business requirements note that
   * the platform computes a per-user reputation to gate features; exposure of
   * raw numeric scores may be policy-bound. This endpoint requires
   * authentication (role "member") and should apply additional business checks
   * to restrict access when necessary (e.g., show only to authenticated viewers
   * or comply with privacy settings). The controller/provider must exclude rows
   * with deleted_at set.
   *
   * This aggregate is tied to the ledger in econ_discuss_reputation_events via
   * user_id; writes to the ledger recompute the aggregate. Related APIs include
   * listing reputation events for the same user. On errors, return standard
   * validation and authorization errors. If no aggregate exists for the user,
   * return 404.
   *
   * @param connection
   * @param userId Target userâ€™s ID to retrieve reputation for
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussUserReputation> {
    try {
      return await getEconDiscussMemberUsersUserIdReputation({
        member,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
