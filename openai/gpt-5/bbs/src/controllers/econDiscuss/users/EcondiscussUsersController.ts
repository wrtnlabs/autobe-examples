import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussUsersUserId } from "../../../providers/getEconDiscussUsersUserId";

import { IEconDiscussUser } from "../../../api/structures/IEconDiscussUser";

@Controller("/econDiscuss/users/:userId")
export class EcondiscussUsersController {
  /**
   * Get a single user by ID from econ_discuss_users (Actors schema).
   *
   * This operation reads a single user’s public-facing profile details from the
   * econ_discuss_users table using the id path parameter. The Prisma schema
   * documents econ_discuss_users with fields like display_name, avatar_uri
   * (optional URI for the avatar), timezone (IANA identifier such as
   * Asia/Seoul), locale (preferred locale like en-US), email_verified,
   * mfa_enabled, and timestamps created_at/updated_at. Sensitive columns
   * including password_hash, mfa_secret, and mfa_recovery_codes are never
   * included in the response payload. The record is considered active when
   * deleted_at is null; implementations should not return records where
   * deleted_at is set.
   *
   * Security considerations: This is a public read endpoint and typically does
   * not require authentication for viewing public profile information. Never
   * include confidential values. If the application wants to indicate whether a
   * user is an expert for discovery, it can derive an "isExpertVerified" flag
   * by checking the presence of a row in econ_discuss_verified_experts for the
   * same user_id; the underlying verification artifacts are out of scope for
   * this response. Authorization logic must ensure private data from related
   * tables (like email) is not exposed.
   *
   * Database relationships: While the primary data comes from
   * econ_discuss_users, related tables like econ_discuss_user_profiles (bio,
   * affiliation, website, location) and role assignments (econ_discuss_members,
   * econ_discuss_verified_experts, econ_discuss_moderators,
   * econ_discuss_admins) can inform computed fields or separate resource calls.
   * Any enrichment should respect that econ_discuss_user_profiles is optional
   * (1:1, nullable via optional relation).
   *
   * Validation and behavior: The id must be a UUID corresponding to
   * econ_discuss_users.id. If no active record is found (deleted_at not null or
   * not present), return a not found condition. Implementers should normalize
   * response timestamps to ISO 8601 strings. Related operations include GET
   * /users/{userId}/profile for extended profile content and follower listing
   * endpoints for social graph views.
   *
   * Error handling: Return 404 when the user cannot be found or is inactive.
   * Avoid leaking whether an email exists on the platform. Rate limiting is
   * recommended for abusive enumeration attempts.
   *
   * @param connection
   * @param userId Target user’s unique identifier (econ_discuss_users.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussUser> {
    try {
      return await getEconDiscussUsersUserId({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
