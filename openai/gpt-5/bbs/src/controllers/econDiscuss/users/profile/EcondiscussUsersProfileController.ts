import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussUsersUserIdProfile } from "../../../../providers/getEconDiscussUsersUserIdProfile";

import { IEconDiscussUserProfile } from "../../../../api/structures/IEconDiscussUserProfile";

@Controller("/econDiscuss/users/:userId/profile")
export class EcondiscussUsersProfileController {
  /**
   * Get a user’s extended profile from econ_discuss_user_profiles (Actors
   * schema).
   *
   * This operation returns a user’s extended profile from
   * econ_discuss_user_profiles using the owner’s UUID in the path. The Prisma
   * schema documents fields including bio (short biography), affiliation
   * (current organization), website (public URI), and location (freeform
   * string), as well as created_at and updated_at timestamps. A profile exists
   * at most once per user (unique user_id). Implementations should only serve
   * profiles where deleted_at is null.
   *
   * Security considerations: This is typically a public read endpoint. Ensure
   * that only public profile attributes are returned. Private account
   * attributes from econ_discuss_users such as email, password_hash,
   * mfa_secret, or recovery codes must never be exposed here. The application
   * may pair this endpoint with the user core endpoint to compose a complete
   * public profile view.
   *
   * Database relationships: The profile is owned by econ_discuss_users via
   * user_id. If a profile does not exist for a given user, return a 404 or a
   * representation consistent with your API’s not-found policy. This resource
   * is distinct from role assignment tables like econ_discuss_members or
   * econ_discuss_verified_experts, which are not part of the profile payload.
   *
   * Validation and behavior: The userId must be a valid UUID referencing
   * econ_discuss_users.id. The provider should query econ_discuss_user_profiles
   * by user_id. If no row exists or if the profile is inactive (deleted_at not
   * null), respond with not found. Timestamps should be returned as ISO 8601
   * strings.
   *
   * Related operations include GET /users/{userId} for core identity and the
   * followers endpoints for social graph views.
   *
   * Error handling: Return 404 when no active profile is found. Apply rate
   * limiting to reduce enumeration risks.
   *
   * @param connection
   * @param userId Owner user’s unique identifier (econ_discuss_users.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussUserProfile> {
    try {
      return await getEconDiscussUsersUserIdProfile({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
