import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussUsersUserIdFollowing } from "../../../../providers/getEconDiscussUsersUserIdFollowing";
import { patchEconDiscussUsersUserIdFollowing } from "../../../../providers/patchEconDiscussUsersUserIdFollowing";

import { IPageIEconDiscussUser } from "../../../../api/structures/IPageIEconDiscussUser";
import { IEconDiscussUser } from "../../../../api/structures/IEconDiscussUser";

@Controller("/econDiscuss/users/:userId/following")
export class EcondiscussUsersFollowingController {
  /**
   * List followees for a user using econ_discuss_user_follows (public read).
   *
   * Retrieve the list of followee accounts for the specified user by reading
   * from the econ_discuss_user_follows table, which “stores user-to-user follow
   * relationships forming the social graph” and enforces idempotency with a
   * unique (follower_user_id, followee_user_id) constraint. Each returned item
   * represents a followee referenced by followee_user_id and is resolved
   * against econ_discuss_users to build a user summary for display.
   *
   * According to the Prisma schema, econ_discuss_user_follows contains: id
   * (PK), follower_user_id, followee_user_id, created_at, and deleted_at for
   * lifecycle control. The deleted_at column indicates relationship retirement
   * while keeping an audit trail. Only active links (deleted_at is null) are
   * included. The econ_discuss_users model provides display_name, avatar_uri,
   * locale, timezone, and other profile-related fields used to construct
   * summaries, while respecting that some details (like email) are private.
   *
   * Security and privacy: this read-only endpoint is intended for public
   * viewing of social graph edges, consistent with business rules that
   * follower/following counts and lists are typically visible unless policy
   * dictates otherwise. No authentication is required for read access. Rate
   * limits may still apply.
   *
   * Related operations: use PATCH /econDiscuss/users/{userId}/following for
   * advanced filtering or sorting when needed; use POST
   * /econDiscuss/member/users/{userId}/follow and DELETE
   * /econDiscuss/member/users/{userId}/follow for creating and retiring follow
   * relationships, which operate on the same econ_discuss_user_follows table.
   *
   * @param connection
   * @param userId Identifier of the user whose followees to list
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IPageIEconDiscussUser.ISummary> {
    try {
      return await getEconDiscussUsersUserIdFollowing({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Advanced search of followees for a user via econ_discuss_user_follows
   * (paginated).
   *
   * This operation provides advanced, request-body-driven retrieval of
   * followees for the specified user. It reads from econ_discuss_user_follows —
   * described in the schema as the table for user-to-user follow relationships
   * with a unique (follower_user_id, followee_user_id) constraint and a
   * deleted_at column for logical retirement. Only active relationships
   * (deleted_at is null) are considered, and the join to econ_discuss_users
   * supplies display fields for summaries.
   *
   * Use this endpoint when you need explicit pagination objects, free-text
   * filtering on followee display_name (leveraging the GIN trigram index on
   * econ_discuss_users.display_name), or custom sort orders tied to created_at
   * on econ_discuss_user_follows. The request body follows the EconDiscuss
   * prefixed DTO convention and should include paging and optional search/sort
   * keys appropriate for list endpoints.
   *
   * Security: this is a read-only operation and typically public. Business
   * logic may still apply visibility policies or rate limits. It pairs with the
   * simpler GET variant for default listings and with POST/DELETE
   * /econDiscuss/member/users/{userId}/follow for write operations.
   *
   * @param connection
   * @param userId Identifier of the user whose followees to search
   * @param body Pagination, search, and sorting parameters for listing a user’s
   *   followees
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussUser.IRequest,
  ): Promise<IPageIEconDiscussUser.ISummary> {
    try {
      return await patchEconDiscussUsersUserIdFollowing({
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
