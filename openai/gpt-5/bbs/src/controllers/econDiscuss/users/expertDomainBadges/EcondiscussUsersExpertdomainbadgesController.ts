import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchEconDiscussUsersUserIdExpertDomainBadges } from "../../../../providers/patchEconDiscussUsersUserIdExpertDomainBadges";
import { getEconDiscussUsersUserIdExpertDomainBadgesBadgeId } from "../../../../providers/getEconDiscussUsersUserIdExpertDomainBadgesBadgeId";

import { IPageIEconDiscussExpertDomainBadge } from "../../../../api/structures/IPageIEconDiscussExpertDomainBadge";
import { IEconDiscussExpertDomainBadge } from "../../../../api/structures/IEconDiscussExpertDomainBadge";

@Controller("/econDiscuss/users/:userId/expertDomainBadges")
export class EcondiscussUsersExpertdomainbadgesController {
  /**
   * List expert domain badges (econ_discuss_expert_domain_badges) for a user
   * with pagination and filters.
   *
   * Retrieve a paginated, filterable list of expert domain badges associated
   * with a given user. According to the Prisma schema,
   * econ_discuss_expert_domain_badges stores per-domain badges with fields
   * including id (PK), user_id (FK to econ_discuss_users),
   * econ_discuss_topic_id (FK to econ_discuss_topics), verified_at,
   * valid_until, revoked_at, revoked_reason, created_at, updated_at, and
   * deleted_at. These columns enable client-side experiences like showing when
   * an expert was verified, whether a badge is still within validity, and if it
   * has ever been revoked for policy reasons.
   *
   * Security and visibility: expert badges are designed to be publicly visible
   * on user profiles to promote trust and expertise emphasis. This endpoint
   * does not require authentication and exposes only non-sensitive badge
   * information. Governance staff may have additional internal views; however,
   * this public list restricts itself to badge-level metadata and associated
   * topic labels derived via econ_discuss_topics.
   *
   * Relationships and behavior: Each badge belongs to a single user (user_id)
   * and a single curated topic (econ_discuss_topic_id). Clients typically join
   * with econ_discuss_topics to present human-readable domain names
   * (name/code). Consumers can filter by effective status, such as currently
   * active (revoked_at is null and (valid_until is null or in the future)),
   * expired (valid_until in the past), or revoked (revoked_at not null).
   * Sorting commonly uses verified_at or created_at to present the chronology
   * of recognition.
   *
   * Validation and request model: The request body
   * (IEconDiscussExpertDomainBadge.IRequest) may include page/pageSize for
   * pagination, optional status filters (active/expired/revoked), optional
   * topicId filters, and sort directives (e.g., verified_at desc). The provider
   * should normalize inputs and apply safe defaults. If the specified userId
   * does not exist, return an empty page rather than an error.
   *
   * Related operations: Use GET /users/{userId}/expertDomainBadges/{badgeId} to
   * retrieve a single badge’s full details including revocation rationale if
   * the requester is authorized to see it. Topic catalog is exposed separately
   * by topic endpoints. Error handling should favor 404 only when the user is
   * not addressable according to policy; otherwise return an empty result set.
   *
   * Expected behavior and errors: Returns a page container with pagination
   * metadata and an array of badge summaries. Common errors include invalid
   * page/pageSize (400), or nonexistent identifiers in filters (ignored or 400
   * depending on policy).
   *
   * @param connection
   * @param userId Target user’s ID whose badges are being listed.
   * @param body Search, filter, and pagination parameters for listing a user’s
   *   expert domain badges.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussExpertDomainBadge.IRequest,
  ): Promise<IPageIEconDiscussExpertDomainBadge.ISummary> {
    try {
      return await patchEconDiscussUsersUserIdExpertDomainBadges({
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific expert domain badge (econ_discuss_expert_domain_badges) for
   * a user.
   *
   * This operation returns one expert domain badge for a given user using the
   * econ_discuss_expert_domain_badges entity. The Prisma schema defines key
   * columns: id (badge identifier), user_id (owner), econ_discuss_topic_id
   * (linked curated topic), verified_at (approval time), valid_until (optional
   * expiry), revoked_at and revoked_reason (policy-driven lifecycle fields),
   * and timestamps (created_at, updated_at). These reflect the verification
   * flow described in the requirements, including approvals, expirations, and
   * revocations.
   *
   * Security and permissions: Badge visibility is generally public to promote
   * transparency of expertise. This endpoint is therefore unauthenticated.
   * Sensitive rationale fields such as revoked_reason may be redacted unless
   * the requester has appropriate governance roles; the provider logic should
   * enforce such redaction policies while keeping the contract stable.
   *
   * Entity relationships: The badge ties to econ_discuss_users via user_id and
   * to econ_discuss_topics via econ_discuss_topic_id. Clients commonly present
   * topic.name and topic.code to display the domain succinctly. The provider
   * should validate that the badgeId belongs to the given userId; otherwise,
   * respond with 404 to prevent leaking cross-user existence.
   *
   * Validation and behavior: The provider looks up a record where id =
   * {badgeId} AND user_id = {userId}. If not found, return 404. If found but
   * marked revoked or beyond validity, still return the object, allowing the
   * client to render appropriate state (e.g., inactive). The response type
   * (IEconDiscussExpertDomainBadge) contains full details needed for profile
   * rendering and auditing cues consistent with public visibility.
   *
   * Related operations: For collections, use PATCH
   * /users/{userId}/expertDomainBadges. Topic metadata is managed via topics
   * endpoints. Governance-specific mutation endpoints are out of scope here per
   * business constraints.
   *
   * @param connection
   * @param userId Owner user’s ID for scoping the badge lookup.
   * @param badgeId Identifier of the expert domain badge to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":badgeId")
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("badgeId")
    badgeId: string & tags.Format<"uuid">,
  ): Promise<IEconDiscussExpertDomainBadge> {
    try {
      return await getEconDiscussUsersUserIdExpertDomainBadgesBadgeId({
        userId,
        badgeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
