import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getEconDiscussUsersUserIdFollowers } from "../../../../providers/getEconDiscussUsersUserIdFollowers";
import { patchEconDiscussUsersUserIdFollowers } from "../../../../providers/patchEconDiscussUsersUserIdFollowers";

import { IPageIEconDiscussUser } from "../../../../api/structures/IPageIEconDiscussUser";
import { IEconDiscussUserFollow } from "../../../../api/structures/IEconDiscussUserFollow";

@Controller("/econDiscuss/users/:userId/followers")
export class EcondiscussUsersFollowersController {
  /**
   * List followers of a user from econ_discuss_user_follows (Actors schema).
   *
   * This operation lists followers for the user identified by userId by reading
   * from econ_discuss_user_follows where followee_user_id matches and
   * deleted_at is null. It then joins follower_user_id to econ_discuss_users to
   * render public-friendly user summaries. The econ_discuss_user_follows table
   * includes created_at for ordering and deleted_at for inactive
   * relationships.
   *
   * Security considerations: The list is typically public; however, privacy
   * constraints may apply per platform policy. Never return private attributes
   * like email or secrets from econ_discuss_users.
   *
   * Database relationships: Followers are sourced from
   * econ_discuss_user_follows (follower_user_id → econ_discuss_users.id). Only
   * include active users (econ_discuss_users.deleted_at is null) and active
   * relationships (deleted_at is null).
   *
   * Validation and behavior: The userId path parameter must be a UUID
   * referencing econ_discuss_users.id. As a GET without a request body,
   * pagination should be handled by default server settings or query-level
   * defaults (the response still uses the standard paginated container type).
   * For complex searches, clients should use PATCH /users/{userId}/followers.
   *
   * Related operations: PATCH /users/{userId}/followers provides advanced
   * filtering; GET /users/{userId} and GET /users/{userId}/profile provide
   * identity and profile information that can be combined with this list in
   * UIs.
   *
   * Error handling: Return 404 when the target user is not found or inactive.
   * Otherwise return 200 with an empty page when there are no followers.
   *
   * @param connection
   * @param userId Followee user’s identifier whose followers are being listed
   *   (econ_discuss_users.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IPageIEconDiscussUser.ISummary> {
    try {
      return await getEconDiscussUsersUserIdFollowers({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search followers of a user from econ_discuss_user_follows (Actors schema).
   *
   * This operation enumerates followers of a target user leveraging
   * econ_discuss_user_follows, which records follower_user_id,
   * followee_user_id, created_at, and deleted_at. The request body
   * (IEconDiscussUserFollow.IRequest) supports pagination (page, pageSize) and
   * may include filters like date windows on created_at or sorting by recency.
   * Only active relationships (where deleted_at is null) must be included.
   *
   * Security considerations: Follower lists are generally public. However,
   * implementations should enforce privacy policies if needed (e.g., restricted
   * accounts). Do not expose private user attributes; each follower is returned
   * as a summary of econ_discuss_users suitable for public consumption.
   *
   * Database relationships: The endpoint identifies followers by selecting
   * records with followee_user_id = {userId}, then joining to
   * econ_discuss_users on follower_user_id to build summaries. Ensure that user
   * summaries exclude accounts with non-null deleted_at and avoid revealing
   * confidential fields from econ_discuss_users.
   *
   * Validation and behavior: The userId path parameter is a UUID referencing
   * econ_discuss_users.id. The request body carries pagination and optional
   * filters; when absent fields are used, default server-side limits should
   * apply. The response wraps results in a pagination container
   * IPageIEconDiscussUser.ISummary.
   *
   * Related operations: GET /users/{userId}/followers provides a simple listing
   * without a request body; both return followers but this PATCH variant
   * enables advanced searching and sorting.
   *
   * Error handling: Return 404 when the target user does not exist or is
   * inactive. Return 200 with an empty page when no followers match. Validate
   * page bounds, and enforce reasonable pageSize limits to protect
   * performance.
   *
   * @param connection
   * @param userId Followee user’s identifier whose followers are being listed
   *   (econ_discuss_users.id).
   * @param body Pagination, filters, and sorting for follower search on
   *   econ_discuss_user_follows.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEconDiscussUserFollow.IRequest,
  ): Promise<IPageIEconDiscussUser.ISummary> {
    try {
      return await patchEconDiscussUsersUserIdFollowers({
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
