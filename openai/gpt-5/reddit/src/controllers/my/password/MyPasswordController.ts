import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putMyPassword } from "../../../providers/putMyPassword";
import { CommunitymoderatorAuth } from "../../../decorators/CommunitymoderatorAuth";
import { CommunitymoderatorPayload } from "../../../decorators/payload/CommunitymoderatorPayload";

import { ICommunityPlatformCommunityModerator } from "../../../api/structures/ICommunityPlatformCommunityModerator";
import { ICommunityPlatformCommunityModeratorPassword } from "../../../api/structures/ICommunityPlatformCommunityModeratorPassword";

@Controller("/my/password")
export class MyPasswordController {
  /**
   * Change own password by updating password_hash in community_platform_users
   * for the authenticated communityModerator.
   *
   * Purpose and functionality: Enables a logged-in user to change their
   * password securely. The implementation verifies the current credential
   * against password_hash in community_platform_users, and on success, replaces
   * password_hash with the new value. The endpoint also updates updated_at and
   * may rotate tokens for continued access, aligning with security guidance.
   *
   * Implementation details: The only persisted fields affected are
   * password_hash and updated_at on community_platform_users. last_login_at is
   * not necessarily modified by a password change. No changes are made to
   * email_verified, account_state, terms_accepted_at, privacy_accepted_at, or
   * marketing_opt_in fields. Soft deletion (deleted_at) must be null to
   * proceed.
   *
   * Role-specific integration and business context: The caller holds
   * communityModerator capabilities in specific communities via
   * community_platform_community_moderators; password changes do not affect
   * those assignments. This is a self-scope operation and therefore uses a
   * "/my/" path. The user remains a member-kind user.
   *
   * Security considerations: Require the current password and validate against
   * password_hash; enforce password strength; on success, consider revoking
   * other sessions and rotating tokens per policy. Avoid leaking whether an
   * account exists to other parties. Ensure audit coverage through external
   * logging consistent with non-functional requirements.
   *
   * Related operations: Users may need to re-login or refresh tokens
   * post-change. Password reset via emailed one-time links is intentionally
   * omitted because no reset-token persistence exists in the provided schema.
   *
   * @param connection
   * @param body Current password and new password to set.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updatePassword(
    @CommunitymoderatorAuth()
    communityModerator: CommunitymoderatorPayload,
    @TypedBody()
    body: ICommunityPlatformCommunityModeratorPassword.IUpdate,
  ): Promise<ICommunityPlatformCommunityModerator.ISecurity> {
    try {
      return await putMyPassword({
        communityModerator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
