import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCommunityOwnerEmailVerify } from "../../../../../providers/postAuthCommunityOwnerEmailVerify";

import { ICommunityPlatformCommunityOwner } from "../../../../../api/structures/ICommunityPlatformCommunityOwner";

@Controller("/auth/communityOwner/email/verify")
export class AuthCommunityownerEmailVerifyController {
  /**
   * Confirm email for a community owner by setting
   * community_platform_users.email_verified and adjusting account_state.
   *
   * This endpoint finalizes email verification by updating
   * community_platform_users.email_verified to true and, where applicable,
   * transitioning community_platform_users.account_state from values like
   * "PendingVerification" to an allowed state such as "Active". These fields
   * are explicitly defined on community_platform_users and control
   * participation eligibility elsewhere on the platform.
   *
   * The request supplies a verification artifact that the service validates
   * out-of-band (token storage is implementation-specific and not modeled in
   * the schema). Upon success, the server updates updated_at, may set
   * last_login_at if a session is resumed, and returns fresh tokens to
   * streamline the onboarding flow. The operation ties directly into the
   * registration and login lifecycle documented in the business requirements.
   *
   * Security considerations include one-time use and short-lived verification
   * artifacts, throttling resends, and neutral error messages that avoid user
   * enumeration. Failures include invalid or expired verification artifacts, or
   * records not found in community_platform_users.
   *
   * Use this endpoint after POST /auth/communityOwner/join when email_verified
   * is false, or when a user re-requests verification. Related flows include
   * POST /auth/communityOwner/login and POST /auth/communityOwner/refresh.
   *
   * @param connection
   * @param body Verification payload containing the verification artifact.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: ICommunityPlatformCommunityOwner.IVerifyEmail,
  ): Promise<ICommunityPlatformCommunityOwner.IAuthorized> {
    try {
      return await postAuthCommunityOwnerEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
