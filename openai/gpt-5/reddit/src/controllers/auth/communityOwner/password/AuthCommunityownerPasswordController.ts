import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthCommunityOwnerPassword } from "../../../../providers/putAuthCommunityOwnerPassword";
import { CommunityownerAuth } from "../../../../decorators/CommunityownerAuth";
import { CommunityownerPayload } from "../../../../decorators/payload/CommunityownerPayload";

import { ICommunityPlatformCommunityOwner } from "../../../../api/structures/ICommunityPlatformCommunityOwner";

@Controller("/auth/communityOwner/password")
export class AuthCommunityownerPasswordController {
  /**
   * Change password by updating community_platform_users.password_hash for the
   * authenticated community owner.
   *
   * This operation allows a logged-in community owner to rotate credentials by
   * updating community_platform_users.password_hash with a hash of the new
   * password. The request includes the current password for verification and a
   * new password; the service compares against password_hash stored on
   * community_platform_users. On success, updated_at is advanced, and security
   * policies may also update last_login_at to reflect credential rotation.
   *
   * Access is restricted to authenticated users in the communityOwner role. The
   * endpoint does not interact with role assignment tables like
   * community_platform_community_owners; it strictly operates on the core
   * identity in community_platform_users. This aligns with schema comments
   * emphasizing non-reversible password hashes and audit timestamps
   * created_at/updated_at.
   *
   * Error handling includes invalid current password, missing new password, or
   * disallowed account_state (e.g., Locked/Deactivated). Pair this operation
   * with /auth/communityOwner/login for sign-in and
   * /auth/communityOwner/refresh for session renewal post-rotation.
   *
   * @param connection
   * @param body Current and new password values for rotation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @CommunityownerAuth()
    communityOwner: CommunityownerPayload,
    @TypedBody()
    body: ICommunityPlatformCommunityOwner.IChangePassword,
  ): Promise<ICommunityPlatformCommunityOwner.IAuthorized> {
    try {
      return await putAuthCommunityOwnerPassword({
        communityOwner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
