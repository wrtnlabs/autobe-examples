import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminUserEmailVerify } from "../../../../../providers/postAuthAdminUserEmailVerify";

import { ICommunityPlatformAdminUserVerification } from "../../../../../api/structures/ICommunityPlatformAdminUserVerification";
import { ICommunityPlatformAdminUserEmailVerify } from "../../../../../api/structures/ICommunityPlatformAdminUserEmailVerify";

@Controller("/auth/adminUser/email/verify")
export class AuthAdminuserEmailVerifyController {
  /**
   * Verify admin user email by updating
   * community_platform_users.email_verified.
   *
   * This endpoint verifies an admin userâ€™s email address by flipping
   * community_platform_users.email_verified to true for the identified
   * account.
   *
   * The request contains a verification token that resolves to a specific
   * community_platform_users.id. After validating the token, the provider sets
   * email_verified to true and may update
   * community_platform_users.account_state to an active value consistent with
   * platform policy.
   *
   * Only community_platform_users is written in this process;
   * community_platform_admin_users is not modified. Standard audit fields
   * community_platform_users.updated_at are updated to reflect the
   * verification.
   *
   * If the token is invalid or expired, the operation returns a business error
   * without changing any records. Successful execution returns a concise
   * summary suitable for user feedback and client routing.
   *
   * This verification step is required by business rules to unlock
   * participation capabilities controlled by email gating.
   *
   * @param connection
   * @param body Email verification payload carrying the verification token.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: ICommunityPlatformAdminUserEmailVerify.ICreate,
  ): Promise<ICommunityPlatformAdminUserVerification.ISummary> {
    try {
      return await postAuthAdminUserEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
