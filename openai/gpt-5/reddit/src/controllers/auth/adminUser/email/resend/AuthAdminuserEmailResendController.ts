import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminUserEmailResend } from "../../../../../providers/postAuthAdminUserEmailResend";

import { ICommunityPlatformAdminUserVerification } from "../../../../../api/structures/ICommunityPlatformAdminUserVerification";
import { ICommunityPlatformAdminUserEmailResend } from "../../../../../api/structures/ICommunityPlatformAdminUserEmailResend";

@Controller("/auth/adminUser/email/resend")
export class AuthAdminuserEmailResendController {
  /**
   * Resend admin email verification using community_platform_users.email.
   *
   * This operation resends a verification email for an administrator account
   * using the email in community_platform_users.email.
   *
   * It first checks community_platform_users.email_verified to avoid
   * unnecessary sends when the account is already verified. The operation may
   * apply rate limits, but those are handled outside this schema. It can update
   * community_platform_users.updated_at for audit purposes if configured.
   *
   * No records in community_platform_admin_users are changed by this operation.
   * Its sole purpose is to issue a new verification link to the adminâ€™s email
   * address.
   *
   * If the administrator is already verified or the account cannot be found,
   * the provider returns a business error. On success, a summary response
   * indicates that a new verification email has been sent.
   *
   * This operation complements /auth/adminUser/email/verify to complete the
   * verification lifecycle.
   *
   * @param connection
   * @param body Resend email verification request (identifies the target admin
   *   by email or username).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resendVerification(
    @TypedBody()
    body: ICommunityPlatformAdminUserEmailResend.ICreate,
  ): Promise<ICommunityPlatformAdminUserVerification.ISummary> {
    try {
      return await postAuthAdminUserEmailResend({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
