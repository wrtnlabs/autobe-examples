import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthAdminUserPassword } from "../../../../providers/putAuthAdminUserPassword";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";

import { ICommunityPlatformAdminUserPasswordChange } from "../../../../api/structures/ICommunityPlatformAdminUserPasswordChange";

@Controller("/auth/adminUser/password")
export class AuthAdminuserPasswordController {
  /**
   * Change password for the authenticated admin by updating
   * community_platform_users.password_hash.
   *
   * This role-protected operation lets a logged-in admin rotate credentials
   * safely.
   *
   * The provider verifies the current password against
   * community_platform_users.password_hash before persisting the new hash. On
   * success, it updates community_platform_users.updated_at and may set
   * community_platform_users.last_login_at per auditing policy.
   *
   * The operation does not modify community_platform_admin_users; it affects
   * only community_platform_users for the authenticated subject. The change is
   * limited to the current user; no path parameters are required because
   * identity derives from the authenticated session.
   *
   * If the current password does not match or the new password violates policy,
   * the service returns a business error. On success, a brief status summary is
   * returned to the client.
   *
   * Security-wise, this is a sensitive action and therefore requires the caller
   * to be an authenticated admin user.
   *
   * @param connection
   * @param body Authenticated password change payload with current and new
   *   password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: ICommunityPlatformAdminUserPasswordChange.IUpdate,
  ): Promise<ICommunityPlatformAdminUserPasswordChange.ISummary> {
    try {
      return await putAuthAdminUserPassword({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
