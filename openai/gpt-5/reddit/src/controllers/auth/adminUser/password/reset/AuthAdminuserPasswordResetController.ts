import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminUserPasswordReset } from "../../../../../providers/postAuthAdminUserPasswordReset";

import { ICommunityPlatformAdminUserPasswordReset } from "../../../../../api/structures/ICommunityPlatformAdminUserPasswordReset";
import { ICommunityPlatformAdminUserPasswordResetRequest } from "../../../../../api/structures/ICommunityPlatformAdminUserPasswordResetRequest";

@Controller("/auth/adminUser/password/reset")
export class AuthAdminuserPasswordResetController {
  /**
   * Initiate admin password reset (may set
   * community_platform_users.account_state policy value).
   *
   * This operation starts a password reset for an admin user by issuing a
   * one-time reset token associated with a community_platform_users.id.
   *
   * The request locates the user by community_platform_users.email or
   * community_platform_users.username. Based on business rules,
   * community_platform_users.account_state may be updated to a value such as
   * "PasswordResetRequired" to enforce a reset at next login. The provider may
   * also update community_platform_users.updated_at.
   *
   * No change is made to community_platform_users.password_hash in this step.
   * Role assignment rows in community_platform_admin_users are not altered. The
   * operation sends a reset link to the userâ€™s email address.
   *
   * If the account is not found or cannot accept resets due to account_state,
   * the provider returns a business error. On success, the response summarizes
   * that a reset link has been sent.
   *
   * This operation precedes confirmation at
   * /auth/adminUser/password/reset/confirm.
   *
   * @param connection
   * @param body Admin password reset request (identify account by email or
   *   username).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ICommunityPlatformAdminUserPasswordResetRequest.ICreate,
  ): Promise<ICommunityPlatformAdminUserPasswordReset.ISummary> {
    try {
      return await postAuthAdminUserPasswordReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
