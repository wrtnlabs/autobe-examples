import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminUserPasswordResetConfirm } from "../../../../../../providers/postAuthAdminUserPasswordResetConfirm";

import { ICommunityPlatformAdminUserPasswordReset } from "../../../../../../api/structures/ICommunityPlatformAdminUserPasswordReset";
import { ICommunityPlatformAdminUserPasswordResetConfirm } from "../../../../../../api/structures/ICommunityPlatformAdminUserPasswordResetConfirm";

@Controller("/auth/adminUser/password/reset/confirm")
export class AuthAdminuserPasswordResetConfirmController {
  /**
   * Confirm admin password reset by updating
   * community_platform_users.password_hash.
   *
   * This endpoint finalizes an administratorâ€™s password reset.
   *
   * After validating the provided reset token, the provider sets
   * community_platform_users.password_hash to the new credential and updates
   * community_platform_users.updated_at. It may also transition
   * community_platform_users.account_state from a reset-required state back to
   * an active state according to policy, and revoke existing sessions where
   * applicable.
   *
   * The operation targets only community_platform_users; it does not modify
   * community_platform_admin_users. Timestamps and auditing fields are recorded
   * for compliance.
   *
   * If the token is invalid, expired, or the new password fails policy, the
   * provider returns a business error. On success, a concise summary indicates
   * completion of the reset.
   *
   * This endpoint follows /auth/adminUser/password/reset and precedes
   * subsequent login with the new credentials.
   *
   * @param connection
   * @param body Reset confirmation payload with token and new password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: ICommunityPlatformAdminUserPasswordResetConfirm.ICreate,
  ): Promise<ICommunityPlatformAdminUserPasswordReset.ISummary> {
    try {
      return await postAuthAdminUserPasswordResetConfirm({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
