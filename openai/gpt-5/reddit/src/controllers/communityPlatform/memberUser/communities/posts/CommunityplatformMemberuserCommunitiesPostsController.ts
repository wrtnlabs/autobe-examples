import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberUserCommunitiesCommunityIdPosts } from "../../../../../providers/postCommunityPlatformMemberUserCommunitiesCommunityIdPosts";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";

import { ICommunityPlatformPost } from "../../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/memberUser/communities/:communityId/posts")
export class CommunityplatformMemberuserCommunitiesPostsController {
  /**
   * Create a new post record (community_platform_posts) within a specified
   * community.
   *
   * Publish a new community post associated with community_platform_posts. The
   * Prisma schema models posts with fields including title, type
   * (application-enforced TEXT | LINK | IMAGE), body (TEXT only), link_url
   * (LINK only), image_url (IMAGE only), label booleans nsfw and spoiler, and
   * lifecycle attributes such as visibility_state (e.g., Active, PendingReview,
   * Locked, Archived), locked_at, archived_at, edited_at, edit_count,
   * created_at, updated_at, and deleted_at. This endpoint creates a record
   * linked to the target community (community_platform_communities.id) and the
   * authenticated author (community_platform_users.id).
   *
   * Validation and business logic follow the platform requirements: for TEXT
   * posts, require a non-empty body within allowed length; for LINK posts,
   * require an http/https URL within length limits; for IMAGE posts, require an
   * image resource URI string (the API uses URIs rather than binary payloads).
   * Communities can enforce defaults like nsfw or spoiler gating based on
   * community_platform_communities.nsfw and visibility rules; initial
   * visibility_state is typically set to Active unless moderation or automated
   * policies choose PendingReview. The authorâ€™s eligibility can be derived from
   * community_platform_users fields such as email_verified (must be true for
   * participation) and account_state (must allow posting).
   *
   * On success, the operation returns the newly created post including
   * identifiers and the submitted content fields mapped to the appropriate
   * columns (title, type, body/link_url/image_url). Common error cases include
   * invalid content type/payload combinations, community not found, author not
   * eligible (e.g., email not verified), or community constraints that disallow
   * the selected post type for that community.
   *
   * This operation complements listing and detail retrieval endpoints (not
   * defined here) and is intentionally limited to creation per the interface
   * instructions. Any moderation workflows (lock, archive, remove) are outside
   * the scope of this endpoint.
   *
   * @param connection
   * @param communityId The community ID where the post will be created.
   * @param body Post creation payload including title, type, and type-specific
   *   content fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPost.ICreate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await postCommunityPlatformMemberUserCommunitiesCommunityIdPosts({
        memberUser,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
