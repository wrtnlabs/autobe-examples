import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberUserPostsPostIdComments } from "../../../../../providers/postCommunityPlatformMemberUserPostsPostIdComments";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";

import { ICommunityPlatformComment } from "../../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/memberUser/posts/:postId/comments")
export class CommunityplatformMemberuserPostsCommentsController {
  /**
   * Create a comment (community_platform_comments) under a post with optional
   * parent for nesting.
   *
   * This operation creates a new comment record in the
   * community_platform_comments table for the given post. The model defines
   * required fields including body and foreign keys to the post
   * (community_platform_post_id) and author (community_platform_user_id). The
   * optional parent_id supports hierarchical replies in the same post. The body
   * must be validated to meet the business requirement of 1–10,000 characters
   * after trimming whitespace; empty-only bodies are not permitted. The created
   * comment initializes edit_count and timestamps (created_at/updated_at)
   * appropriately and may set edited_at when edits occur later.
   *
   * Security and authorization follow role rules where only authenticated
   * participants (memberUser and above) may create comments. The server must
   * ensure the acting user has permission to participate in the target
   * community context and is not banned or restricted. The endpoint should also
   * enforce comment creation eligibility against the target post’s lifecycle,
   * including checks against community_platform_posts.locked_at, archived_at,
   * and visibility_state (e.g., Locked, Archived), where comments should not be
   * accepted. Records with deleted_at set in either the post or the chosen
   * parent comment must not be eligible as targets.
   *
   * This operation is related to the community_platform_posts and
   * community_platform_users tables through foreign keys, and supports nested
   * replies through the parent_id self-relation in community_platform_comments.
   * Implementation should ensure parent-child relationships remain within the
   * same post. Validation must surface business errors such as invalid length,
   * ineligible state (post locked or archived), or depth overflow. Additional
   * logic like rate limits and spam checks may apply according to business
   * requirements documents.
   *
   * Consumers typically pair this operation with GET /posts/{postId}/comments
   * to render the full comment tree after creation. Error handling should use
   * the platform’s standardized error model (e.g., COMMENT_VALIDATION_FAILED,
   * COMMENT_RATE_LIMITED, COMMENT_LOCKED, POST_ARCHIVED) and provide actionable
   * guidance. The response includes the newly created comment for immediate
   * client insertion into the thread.
   *
   * @param connection
   * @param postId Identifier of the target post to comment on
   * @param body Comment creation payload including body and optional parentId
   *   for nesting under the same post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.ICreate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await postCommunityPlatformMemberUserPostsPostIdComments({
        memberUser,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
