import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPlatformMemberUserCommentsCommentIdVote } from "../../../../../providers/putCommunityPlatformMemberUserCommentsCommentIdVote";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";
import { deleteCommunityPlatformMemberUserCommentsCommentIdVote } from "../../../../../providers/deleteCommunityPlatformMemberUserCommentsCommentIdVote";

import { ICommunityPlatformCommentVote } from "../../../../../api/structures/ICommunityPlatformCommentVote";

@Controller("/communityPlatform/memberUser/comments/:commentId/vote")
export class CommunityplatformMemberuserCommentsVoteController {
  /**
   * Upsert or change a member’s vote (-1 or +1) for a comment
   * (community_platform_comment_votes).
   *
   * This operation modifies or creates a vote record in the Votes namespace for
   * a specific comment, aligning with the Prisma model
   * community_platform_comment_votes. The model defines: id (UUID),
   * community_platform_user_id (voter), community_platform_comment_id (target),
   * value (Int; valid values −1 or +1 only), created_at/updated_at, and
   * deleted_at. It enforces uniqueness for a user-target pair so that only one
   * vote can exist at a time via
   *
   * @param connection
   * @param commentId Target comment’s ID (UUID) to vote on
   * @param body Vote value to set for this comment. Only -1 (downvote) or +1
   *   (upvote) are accepted.
   * @@unique([community_platform_user_id,
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommentVote.IUpdate,
  ): Promise<ICommunityPlatformCommentVote> {
    try {
      return await putCommunityPlatformMemberUserCommentsCommentIdVote({
        memberUser,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Clear the member’s vote on a comment by timestamping deleted_at
   * (community_platform_comment_votes).
   *
   * This operation interacts with the Votes namespace and the Prisma model
   * community_platform_comment_votes. The model stores one vote per user per
   * comment with fields id, community_platform_user_id,
   * community_platform_comment_id, value (−1 or +1), created_at, updated_at,
   * and deleted_at. Clearing a vote populates deleted_at for the (user,
   * comment) row, so it no longer counts toward scores and karma computations,
   * while retaining history for governance analytics. Subsequent read models
   * should exclude rows with deleted_at set from active tallies.
   *
   * Security and permissions: Only authenticated members can clear their own
   * votes. If no existing vote row is found, treat the request as a no-op for
   * idempotency. Enforce business constraints from the requirements, including
   * restrictions when the comment/post is locked or archived. Implementations
   * may allow clear-only semantics under lock/archival if policy permits, but
   * must not allow setting or changing vote values in those states.
   *
   * Database relationships: The record references community_platform_users
   * (voter) and community_platform_comments (target). The composite unique
   * constraint ensures at most one row exists for each (user, comment).
   * Clearing does not permanently remove the row; instead, it timestamps
   * deleted_at to indicate it is inactive in standard queries.
   *
   * Behavior and errors: If a vote exists with deleted_at already set, repeated
   * clear requests should succeed without additional changes (idempotent
   * behavior). Apply rate limits consistent with the requirements and respond
   * with standardized error keys when limits are exceeded.
   *
   * Related operations: To set or change the vote value, use PUT
   * /comments/{commentId}/vote, which updates or creates the row and clears
   * deleted_at.
   *
   * @param connection
   * @param commentId Target comment’s ID (UUID) for which to clear the vote
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberUserCommentsCommentIdVote({
        memberUser,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
