import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberUserCommentsCommentIdReports } from "../../../../../providers/postCommunityPlatformMemberUserCommentsCommentIdReports";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";

import { ICommunityPlatformReport } from "../../../../../api/structures/ICommunityPlatformReport";

@Controller("/communityPlatform/memberUser/comments/:commentId/reports")
export class CommunityplatformMemberuserCommentsReportsController {
  /**
   * Create a report for a comment (community_platform_reports).
   *
   * Submit a safety report for a comment. The community_platform_reports table
   * models reports with: id (PK), community_platform_user_id (reporter user),
   * community_platform_comment_id (target comment), category (categorical
   * reason), reason (free-text explanation), and created_at/updated_at
   * timestamps. The schema comments emphasize that exactly one target reference
   * is provided (post or comment). This endpoint sets
   * community_platform_comment_id from the path and leaves the post reference
   * unset.
   *
   * Security and permissions: Only authenticated users may report comments; the
   * reporter is the current session user written to
   * community_platform_reports.community_platform_user_id. Business rules from
   * the requirements cover deduplication (per reporter, category, and target
   * within a time window) and abuse controls. The table’s composite indexes
   * support efficient checks, and violations should surface standard errors
   * such as REPORT_DUPLICATE_OPEN or REPORT_RATE_LIMITED.
   *
   * Entity relationships: The report ties to the target comment via
   * community_platform_reports.community_platform_comment_id and to the
   * reporter via community_platform_reports.community_platform_user_id. The
   * target comment must exist (community_platform_comments.id). The service
   * should ensure the reporter has access to the underlying post/community
   * context before accepting the report.
   *
   * Validation and business logic: The request requires a category string and a
   * non-empty, trimmed reason. Categories follow the moderation taxonomy (e.g.,
   * spam, harassment/hate, sexual_content/child_safety, violence/threats,
   * self_harm_risk, illegal, doxxing, misinformation, off_topic/low_effort,
   * copyright, other). The service sets timestamps and associates commentId
   * from the path parameter.
   *
   * Related operations: To report posts, use POST /posts/{postId}/reports. Both
   * operations persist to the same table with distinct target columns. Error
   * handling follows the standard model, including REPORT_INVALID_CATEGORY,
   * REPORT_DUPLICATE_OPEN, and PERM_INSUFFICIENT_ROLE.
   *
   * @param connection
   * @param commentId Target comment’s ID to report.
   * @param body Categorical reason and free-text explanation for reporting the
   *   comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformReport.ICreate,
  ): Promise<ICommunityPlatformReport> {
    try {
      return await postCommunityPlatformMemberUserCommentsCommentIdReports({
        memberUser,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
