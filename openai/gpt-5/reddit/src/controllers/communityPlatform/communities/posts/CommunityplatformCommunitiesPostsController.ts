import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformCommunitiesCommunityIdPosts } from "../../../../providers/getCommunityPlatformCommunitiesCommunityIdPosts";

import { IPageICommunityPlatformPost } from "../../../../api/structures/IPageICommunityPlatformPost";

@Controller("/communityPlatform/communities/:communityId/posts")
export class CommunityplatformCommunitiesPostsController {
  /**
   * List community posts (community_platform_posts) with deterministic,
   * paginated results.
   *
   * Retrieve a paginated, eligibility-filtered list of posts from the
   * community_platform_posts table for the specified community.
   *
   * Security and eligibility: Implementations must enforce community visibility
   * (public/restricted/private), NSFW preference handling, and quarantine
   * behavior from community_platform_communities. Items in states like
   * RemovedByModeration, RemovedByAdmin, DeletedByAuthor, or PendingReview are
   * typically excluded from general lists, while archived posts remain visible
   * but read-only. Always exclude rows where deleted_at is set.
   *
   * Sorting behavior: The platform supports New (created_at desc), Top (net
   * approval over a time window), Hot (recency-weighted engagement), and
   * Controversial (high total votes, near-balanced polarity). If a client does
   * not provide optional query parameters for sort/time window, the
   * implementation SHOULD apply a sensible default (e.g., New for community
   * view) consistent with business rules. This contract does not define query
   * parameters beyond the path; query usage is implementation-specific.
   *
   * Relationships and ranking sources: Posts belong to a community via
   * community_platform_community_id and to authors via
   * community_platform_user_id. Vote data in community_platform_post_votes
   * provides aggregates for Top/Controversial/Hot. Implementations should
   * ensure list projections include fields suitable for list UIs (e.g., title,
   * type, nsfw, spoiler, visibility_state, locked_at, archived_at, created_at)
   * without exposing sensitive data.
   *
   * Errors: COMMUNITY_PRIVATE (insufficient permission), SORT_UNSUPPORTED (when
   * unsupported query sort is supplied), and not found when community does not
   * exist or is inaccessible.
   *
   * @param connection
   * @param communityId Target communityâ€™s ID (UUID) whose posts will be listed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<IPageICommunityPlatformPost> {
    try {
      return await getCommunityPlatformCommunitiesCommunityIdPosts({
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
