import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformCommunitiesCommunityId } from "../../../providers/getCommunityPlatformCommunitiesCommunityId";

import { ICommunityPlatformCommunity } from "../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/communities/:communityId")
export class CommunityplatformCommunitiesController {
  /**
   * Get community details by id from community_platform_communities.
   *
   * Fetch community details according to the community_platform_communities
   * model. As described in the schema comments, each record represents a
   * top-level space organizing posts and memberships with a unique name handle
   * and optional display_name and description. The visibility field indicates
   * public, restricted, or private access modes; nsfw influences safety gating;
   * auto_archive_days configures when threads move to read-only state. Language
   * and region provide discovery defaults, and quarantined indicates
   * safety-restricted discovery behavior with quarantined_at capturing the
   * start timestamp.
   *
   * Security and permissions: This read operation can be exposed publicly, but
   * the provider must enforce business policies based on the communityâ€™s
   * visibility and safety flags. For example, private communities should only
   * reveal details to approved viewers, and quarantined content may require
   * acknowledgment before exposure. Records where deleted_at is set should be
   * treated as removed from general listings and not returned by default.
   *
   * Relationships and error behavior: Communities are linked to owners and
   * moderators through community_platform_community_owners and
   * community_platform_community_moderators, and to subscriptions via
   * community_platform_subscriptions. If the requested id does not correspond
   * to a visible community (e.g., missing, treated as removed, or access denied
   * by visibility settings), return a not-found or access-denied style error
   * consistent with the exception model. This endpoint pairs naturally with
   * POST /communities for creation flows.
   *
   * @param connection
   * @param communityId Unique identifier (UUID) of the target community
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await getCommunityPlatformCommunitiesCommunityId({
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
