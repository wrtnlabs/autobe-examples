import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformPostsPostId } from "../../../providers/getCommunityPlatformPostsPostId";

import { ICommunityPlatformPost } from "../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/posts/:postId")
export class CommunityplatformPostsController {
  /**
   * Get detailed post (community_platform_posts) by ID.
   *
   * Fetch detailed information for a single post stored in
   * community_platform_posts.
   *
   * Security and eligibility: Enforce community visibility
   * (public/restricted/private), NSFW preferences, and quarantine behavior from
   * community_platform_communities before returning content. Use
   * visibility_state to gate interactions (Locked disables new comments/vote
   * changes; Archived disables edits and new interactions). Exclude posts with
   * deleted_at set from normal results.
   *
   * Relationships: The post references its author via
   * community_platform_user_id (community_platform_users) and its community via
   * community_platform_community_id (community_platform_communities). Votes are
   * recorded in community_platform_post_votes and may be used to derive metrics
   * such as score in the response if supported by the DTO.
   *
   * Errors: not found when post does not exist or is ineligible for viewing
   * under policy; access denied for private/restricted communities when the
   * viewer lacks permission; temporary unavailability when systems are
   * degraded.
   *
   * @param connection
   * @param postId Target postâ€™s ID (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await getCommunityPlatformPostsPostId({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
