import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformUsersUserIdKarma } from "../../../../providers/getCommunityPlatformUsersUserIdKarma";

import { ICommunityPlatformUserKarma } from "../../../../api/structures/ICommunityPlatformUserKarma";

@Controller("/communityPlatform/users/:userId/karma")
export class CommunityplatformUsersKarmaController {
  /**
   * Get a user’s karma totals from community_platform_user_karmas.
   *
   * This endpoint returns the current karma snapshot for a user. The
   * community_platform_user_karmas model contains integer aggregates:
   * post_karma (from votes on posts), comment_karma (from votes on comments),
   * and total_karma (overall). The schema notes the application maintains these
   * values based on voting activity. The endpoint performs no recalculation; it
   * simply reads the latest stored values.
   *
   * The user linkage is community_platform_user_id referencing
   * community_platform_users.id. Providers should ensure the path parameter
   * userId is a valid UUID and resolve the corresponding karma row. If no karma
   * row exists yet for a legitimate user, the service may return zeros or an
   * initialized structure as per business policy, but must not fabricate data
   * that conflicts with the schema.
   *
   * Security and privacy: karma totals are non-sensitive aggregates suitable
   * for public display in accordance with profile visibility rules. The
   * endpoint is public, but downstream logic should still honor any
   * platform-wide restrictions that might affect exposure (e.g., banned
   * accounts’ visibility policies).
   *
   * Relationship to other entities: while this operation does not retrieve
   * content, it is related to voting tables community_platform_post_votes and
   * community_platform_comment_votes, which the application uses to compute or
   * update karma. It also complements the profile endpoint, which may embed the
   * same totals when returning broader profile information.
   *
   * Expected behavior and errors: return a not-found outcome if the referenced
   * user does not exist; if the user exists but has no karma record yet, return
   * an initialized response consistent with platform defaults. Input validation
   * ensures userId is a UUID.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   *   (community_platform_users.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformUserKarma> {
    try {
      return await getCommunityPlatformUsersUserIdKarma({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
