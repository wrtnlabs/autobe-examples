import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityModeratorPassword } from "../../../structures/ICommunityPlatformCommunityModeratorPassword";
import { ICommunityPlatformCommunityModerator } from "../../../structures/ICommunityPlatformCommunityModerator";

/**
 * Change own password by updating password_hash in community_platform_users for
 * the authenticated communityModerator.
 *
 * Purpose and functionality: Enables a logged-in user to change their password
 * securely. The implementation verifies the current credential against
 * password_hash in community_platform_users, and on success, replaces
 * password_hash with the new value. The endpoint also updates updated_at and
 * may rotate tokens for continued access, aligning with security guidance.
 *
 * Implementation details: The only persisted fields affected are password_hash
 * and updated_at on community_platform_users. last_login_at is not necessarily
 * modified by a password change. No changes are made to email_verified,
 * account_state, terms_accepted_at, privacy_accepted_at, or marketing_opt_in
 * fields. Soft deletion (deleted_at) must be null to proceed.
 *
 * Role-specific integration and business context: The caller holds
 * communityModerator capabilities in specific communities via
 * community_platform_community_moderators; password changes do not affect those
 * assignments. This is a self-scope operation and therefore uses a "/my/" path.
 * The user remains a member-kind user.
 *
 * Security considerations: Require the current password and validate against
 * password_hash; enforce password strength; on success, consider revoking other
 * sessions and rotating tokens per policy. Avoid leaking whether an account
 * exists to other parties. Ensure audit coverage through external logging
 * consistent with non-functional requirements.
 *
 * Related operations: Users may need to re-login or refresh tokens post-change.
 * Password reset via emailed one-time links is intentionally omitted because no
 * reset-token persistence exists in the provided schema.
 *
 * @param props.connection
 * @param props.body Current password and new password to set.
 * @path /my/password
 * @accessor api.functional.my.password.updatePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePassword(
  connection: IConnection,
  props: updatePassword.Props,
): Promise<updatePassword.Response> {
  return true === connection.simulate
    ? updatePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePassword.METADATA,
          path: updatePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace updatePassword {
  export type Props = {
    /** Current password and new password to set. */
    body: ICommunityPlatformCommunityModeratorPassword.IUpdate;
  };
  export type Body = ICommunityPlatformCommunityModeratorPassword.IUpdate;
  export type Response = ICommunityPlatformCommunityModerator.ISecurity;

  export const METADATA = {
    method: "PUT",
    path: "/my/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/my/password";
  export const random = (): ICommunityPlatformCommunityModerator.ISecurity =>
    typia.random<ICommunityPlatformCommunityModerator.ISecurity>();
  export const simulate = (
    connection: IConnection,
    props: updatePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
