import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdminUserPasswordResetConfirm } from "../../../../../../structures/ICommunityPlatformAdminUserPasswordResetConfirm";
import { ICommunityPlatformAdminUserPasswordReset } from "../../../../../../structures/ICommunityPlatformAdminUserPasswordReset";

/**
 * Confirm admin password reset by updating
 * community_platform_users.password_hash.
 *
 * This endpoint finalizes an administratorâ€™s password reset.
 *
 * After validating the provided reset token, the provider sets
 * community_platform_users.password_hash to the new credential and updates
 * community_platform_users.updated_at. It may also transition
 * community_platform_users.account_state from a reset-required state back to an
 * active state according to policy, and revoke existing sessions where
 * applicable.
 *
 * The operation targets only community_platform_users; it does not modify
 * community_platform_admin_users. Timestamps and auditing fields are recorded
 * for compliance.
 *
 * If the token is invalid, expired, or the new password fails policy, the
 * provider returns a business error. On success, a concise summary indicates
 * completion of the reset.
 *
 * This endpoint follows /auth/adminUser/password/reset and precedes subsequent
 * login with the new credentials.
 *
 * @param props.connection
 * @param props.body Reset confirmation payload with token and new password.
 * @path /auth/adminUser/password/reset/confirm
 * @accessor api.functional.auth.adminUser.password.reset.confirm.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Reset confirmation payload with token and new password. */
    body: ICommunityPlatformAdminUserPasswordResetConfirm.ICreate;
  };
  export type Body = ICommunityPlatformAdminUserPasswordResetConfirm.ICreate;
  export type Response = ICommunityPlatformAdminUserPasswordReset.ISummary;

  export const METADATA = {
    method: "POST",
    path: "/auth/adminUser/password/reset/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/adminUser/password/reset/confirm";
  export const random = (): ICommunityPlatformAdminUserPasswordReset.ISummary =>
    typia.random<ICommunityPlatformAdminUserPasswordReset.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
