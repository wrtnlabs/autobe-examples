import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdminUserPasswordResetRequest } from "../../../../../structures/ICommunityPlatformAdminUserPasswordResetRequest";
import { ICommunityPlatformAdminUserPasswordReset } from "../../../../../structures/ICommunityPlatformAdminUserPasswordReset";
export * as confirm from "./confirm/index";

/**
 * Initiate admin password reset (may set community_platform_users.account_state
 * policy value).
 *
 * This operation starts a password reset for an admin user by issuing a
 * one-time reset token associated with a community_platform_users.id.
 *
 * The request locates the user by community_platform_users.email or
 * community_platform_users.username. Based on business rules,
 * community_platform_users.account_state may be updated to a value such as
 * "PasswordResetRequired" to enforce a reset at next login. The provider may
 * also update community_platform_users.updated_at.
 *
 * No change is made to community_platform_users.password_hash in this step.
 * Role assignment rows in community_platform_admin_users are not altered. The
 * operation sends a reset link to the userâ€™s email address.
 *
 * If the account is not found or cannot accept resets due to account_state, the
 * provider returns a business error. On success, the response summarizes that a
 * reset link has been sent.
 *
 * This operation precedes confirmation at
 * /auth/adminUser/password/reset/confirm.
 *
 * @param props.connection
 * @param props.body Admin password reset request (identify account by email or
 *   username).
 * @path /auth/adminUser/password/reset
 * @accessor api.functional.auth.adminUser.password.reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Admin password reset request (identify account by email or username). */
    body: ICommunityPlatformAdminUserPasswordResetRequest.ICreate;
  };
  export type Body = ICommunityPlatformAdminUserPasswordResetRequest.ICreate;
  export type Response = ICommunityPlatformAdminUserPasswordReset.ISummary;

  export const METADATA = {
    method: "POST",
    path: "/auth/adminUser/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/adminUser/password/reset";
  export const random = (): ICommunityPlatformAdminUserPasswordReset.ISummary =>
    typia.random<ICommunityPlatformAdminUserPasswordReset.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
