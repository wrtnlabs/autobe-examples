import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdminUserEmailVerify } from "../../../../../structures/ICommunityPlatformAdminUserEmailVerify";
import { ICommunityPlatformAdminUserVerification } from "../../../../../structures/ICommunityPlatformAdminUserVerification";

/**
 * Verify admin user email by updating community_platform_users.email_verified.
 *
 * This endpoint verifies an admin userâ€™s email address by flipping
 * community_platform_users.email_verified to true for the identified account.
 *
 * The request contains a verification token that resolves to a specific
 * community_platform_users.id. After validating the token, the provider sets
 * email_verified to true and may update community_platform_users.account_state
 * to an active value consistent with platform policy.
 *
 * Only community_platform_users is written in this process;
 * community_platform_admin_users is not modified. Standard audit fields
 * community_platform_users.updated_at are updated to reflect the verification.
 *
 * If the token is invalid or expired, the operation returns a business error
 * without changing any records. Successful execution returns a concise summary
 * suitable for user feedback and client routing.
 *
 * This verification step is required by business rules to unlock participation
 * capabilities controlled by email gating.
 *
 * @param props.connection
 * @param props.body Email verification payload carrying the verification token.
 * @path /auth/adminUser/email/verify
 * @accessor api.functional.auth.adminUser.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification payload carrying the verification token. */
    body: ICommunityPlatformAdminUserEmailVerify.ICreate;
  };
  export type Body = ICommunityPlatformAdminUserEmailVerify.ICreate;
  export type Response = ICommunityPlatformAdminUserVerification.ISummary;

  export const METADATA = {
    method: "POST",
    path: "/auth/adminUser/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/adminUser/email/verify";
  export const random = (): ICommunityPlatformAdminUserVerification.ISummary =>
    typia.random<ICommunityPlatformAdminUserVerification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
