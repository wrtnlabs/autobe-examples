import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdminUserPasswordChange } from "../../../../structures/ICommunityPlatformAdminUserPasswordChange";
export * as reset from "./reset/index";

/**
 * Change password for the authenticated admin by updating
 * community_platform_users.password_hash.
 *
 * This role-protected operation lets a logged-in admin rotate credentials
 * safely.
 *
 * The provider verifies the current password against
 * community_platform_users.password_hash before persisting the new hash. On
 * success, it updates community_platform_users.updated_at and may set
 * community_platform_users.last_login_at per auditing policy.
 *
 * The operation does not modify community_platform_admin_users; it affects only
 * community_platform_users for the authenticated subject. The change is limited
 * to the current user; no path parameters are required because identity derives
 * from the authenticated session.
 *
 * If the current password does not match or the new password violates policy,
 * the service returns a business error. On success, a brief status summary is
 * returned to the client.
 *
 * Security-wise, this is a sensitive action and therefore requires the caller
 * to be an authenticated admin user.
 *
 * @param props.connection
 * @param props.body Authenticated password change payload with current and new
 *   password.
 * @path /auth/adminUser/password
 * @accessor api.functional.auth.adminUser.password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Authenticated password change payload with current and new password. */
    body: ICommunityPlatformAdminUserPasswordChange.IUpdate;
  };
  export type Body = ICommunityPlatformAdminUserPasswordChange.IUpdate;
  export type Response = ICommunityPlatformAdminUserPasswordChange.ISummary;

  export const METADATA = {
    method: "PUT",
    path: "/auth/adminUser/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/adminUser/password";
  export const random =
    (): ICommunityPlatformAdminUserPasswordChange.ISummary =>
      typia.random<ICommunityPlatformAdminUserPasswordChange.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
