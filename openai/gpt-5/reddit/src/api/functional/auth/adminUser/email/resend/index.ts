import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdminUserEmailResend } from "../../../../../structures/ICommunityPlatformAdminUserEmailResend";
import { ICommunityPlatformAdminUserVerification } from "../../../../../structures/ICommunityPlatformAdminUserVerification";

/**
 * Resend admin email verification using community_platform_users.email.
 *
 * This operation resends a verification email for an administrator account
 * using the email in community_platform_users.email.
 *
 * It first checks community_platform_users.email_verified to avoid unnecessary
 * sends when the account is already verified. The operation may apply rate
 * limits, but those are handled outside this schema. It can update
 * community_platform_users.updated_at for audit purposes if configured.
 *
 * No records in community_platform_admin_users are changed by this operation.
 * Its sole purpose is to issue a new verification link to the adminâ€™s email
 * address.
 *
 * If the administrator is already verified or the account cannot be found, the
 * provider returns a business error. On success, a summary response indicates
 * that a new verification email has been sent.
 *
 * This operation complements /auth/adminUser/email/verify to complete the
 * verification lifecycle.
 *
 * @param props.connection
 * @param props.body Resend email verification request (identifies the target
 *   admin by email or username).
 * @path /auth/adminUser/email/resend
 * @accessor api.functional.auth.adminUser.email.resend.resendVerification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resendVerification(
  connection: IConnection,
  props: resendVerification.Props,
): Promise<resendVerification.Response> {
  return true === connection.simulate
    ? resendVerification.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resendVerification.METADATA,
          path: resendVerification.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resendVerification {
  export type Props = {
    /**
     * Resend email verification request (identifies the target admin by
     * email or username).
     */
    body: ICommunityPlatformAdminUserEmailResend.ICreate;
  };
  export type Body = ICommunityPlatformAdminUserEmailResend.ICreate;
  export type Response = ICommunityPlatformAdminUserVerification.ISummary;

  export const METADATA = {
    method: "POST",
    path: "/auth/adminUser/email/resend",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/adminUser/email/resend";
  export const random = (): ICommunityPlatformAdminUserVerification.ISummary =>
    typia.random<ICommunityPlatformAdminUserVerification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: resendVerification.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resendVerification.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
