import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityOwner } from "../../../../../structures/ICommunityPlatformCommunityOwner";

/**
 * Confirm email for a community owner by setting
 * community_platform_users.email_verified and adjusting account_state.
 *
 * This endpoint finalizes email verification by updating
 * community_platform_users.email_verified to true and, where applicable,
 * transitioning community_platform_users.account_state from values like
 * "PendingVerification" to an allowed state such as "Active". These fields are
 * explicitly defined on community_platform_users and control participation
 * eligibility elsewhere on the platform.
 *
 * The request supplies a verification artifact that the service validates
 * out-of-band (token storage is implementation-specific and not modeled in the
 * schema). Upon success, the server updates updated_at, may set last_login_at
 * if a session is resumed, and returns fresh tokens to streamline the
 * onboarding flow. The operation ties directly into the registration and login
 * lifecycle documented in the business requirements.
 *
 * Security considerations include one-time use and short-lived verification
 * artifacts, throttling resends, and neutral error messages that avoid user
 * enumeration. Failures include invalid or expired verification artifacts, or
 * records not found in community_platform_users.
 *
 * Use this endpoint after POST /auth/communityOwner/join when email_verified is
 * false, or when a user re-requests verification. Related flows include POST
 * /auth/communityOwner/login and POST /auth/communityOwner/refresh.
 *
 * @param props.connection
 * @param props.body Verification payload containing the verification artifact.
 * @path /auth/communityOwner/email/verify
 * @accessor api.functional.auth.communityOwner.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Verification payload containing the verification artifact. */
    body: ICommunityPlatformCommunityOwner.IVerifyEmail;
  };
  export type Body = ICommunityPlatformCommunityOwner.IVerifyEmail;
  export type Response = ICommunityPlatformCommunityOwner.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/communityOwner/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/communityOwner/email/verify";
  export const random = (): ICommunityPlatformCommunityOwner.IAuthorized =>
    typia.random<ICommunityPlatformCommunityOwner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
