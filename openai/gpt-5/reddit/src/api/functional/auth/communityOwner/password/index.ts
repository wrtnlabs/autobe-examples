import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityOwner } from "../../../../structures/ICommunityPlatformCommunityOwner";

/**
 * Change password by updating community_platform_users.password_hash for the
 * authenticated community owner.
 *
 * This operation allows a logged-in community owner to rotate credentials by
 * updating community_platform_users.password_hash with a hash of the new
 * password. The request includes the current password for verification and a
 * new password; the service compares against password_hash stored on
 * community_platform_users. On success, updated_at is advanced, and security
 * policies may also update last_login_at to reflect credential rotation.
 *
 * Access is restricted to authenticated users in the communityOwner role. The
 * endpoint does not interact with role assignment tables like
 * community_platform_community_owners; it strictly operates on the core
 * identity in community_platform_users. This aligns with schema comments
 * emphasizing non-reversible password hashes and audit timestamps
 * created_at/updated_at.
 *
 * Error handling includes invalid current password, missing new password, or
 * disallowed account_state (e.g., Locked/Deactivated). Pair this operation with
 * /auth/communityOwner/login for sign-in and /auth/communityOwner/refresh for
 * session renewal post-rotation.
 *
 * @param props.connection
 * @param props.body Current and new password values for rotation.
 * @path /auth/communityOwner/password
 * @accessor api.functional.auth.communityOwner.password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Current and new password values for rotation. */
    body: ICommunityPlatformCommunityOwner.IChangePassword;
  };
  export type Body = ICommunityPlatformCommunityOwner.IChangePassword;
  export type Response = ICommunityPlatformCommunityOwner.IAuthorized;

  export const METADATA = {
    method: "PUT",
    path: "/auth/communityOwner/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/communityOwner/password";
  export const random = (): ICommunityPlatformCommunityOwner.IAuthorized =>
    typia.random<ICommunityPlatformCommunityOwner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
