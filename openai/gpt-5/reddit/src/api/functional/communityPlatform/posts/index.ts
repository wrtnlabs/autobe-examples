import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../structures/ICommunityPlatformPost";
export * as comments from "./comments/index";

/**
 * Get detailed post (community_platform_posts) by ID.
 *
 * Fetch detailed information for a single post stored in
 * community_platform_posts.
 *
 * Security and eligibility: Enforce community visibility
 * (public/restricted/private), NSFW preferences, and quarantine behavior from
 * community_platform_communities before returning content. Use visibility_state
 * to gate interactions (Locked disables new comments/vote changes; Archived
 * disables edits and new interactions). Exclude posts with deleted_at set from
 * normal results.
 *
 * Relationships: The post references its author via community_platform_user_id
 * (community_platform_users) and its community via
 * community_platform_community_id (community_platform_communities). Votes are
 * recorded in community_platform_post_votes and may be used to derive metrics
 * such as score in the response if supported by the DTO.
 *
 * Errors: not found when post does not exist or is ineligible for viewing under
 * policy; access denied for private/restricted communities when the viewer
 * lacks permission; temporary unavailability when systems are degraded.
 *
 * @param props.connection
 * @param props.postId Target post’s ID (UUID).
 * @path /communityPlatform/posts/:postId
 * @accessor api.functional.communityPlatform.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target post’s ID (UUID). */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPost;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityPlatformPost =>
    typia.random<ICommunityPlatformPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
