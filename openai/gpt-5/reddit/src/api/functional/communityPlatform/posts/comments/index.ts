import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../structures/ICommunityPlatformComment";

/**
 * Get tree-structured comments (community_platform_comments) for a post.
 *
 * This operation reads comment data from the community_platform_comments table
 * for the given post identifier and organizes results into a tree based on the
 * parent_id self-relation. Each comment includes core fields from the schema:
 * id, community_platform_post_id, community_platform_user_id, optional
 * parent_id for nesting, body, locked_at for thread-level locking, edit_count
 * and edited_at for edit transparency, and created_at/updated_at timestamps.
 * Results should exclude comments where deleted_at is set and may indicate
 * placeholders for unavailable content according to business policies.
 *
 * Security-wise, this endpoint is designed for public read access where the
 * target post and community are publicly visible. If the community or post has
 * more restrictive visibility (e.g., private, restricted, quarantined), the
 * provider should enforce eligibility based on viewer context. The operation
 * does not require authentication for public content, and sensitive states
 * (e.g., Removed by moderation) should be represented according to the
 * platformâ€™s visibility rules rather than leaking private details.
 *
 * This operation relates directly to community_platform_posts for the target
 * post and to community_platform_users for authorship, while modeling
 * hierarchical structure through the parent_id relation in
 * community_platform_comments. It complements POST /posts/{postId}/comments for
 * write operations. Error handling should align with the exception model (e.g.,
 * PROFILE_PRIVATE when viewer cannot access, SYS_TEMPORARY_UNAVAILABLE on
 * transient failures). The response returns a comment tree for client rendering
 * without pagination or sorting parameters, focusing on complete nested
 * structure for the specified post.
 *
 * @param props.connection
 * @param props.postId Identifier of the post whose comments are requested
 * @path /communityPlatform/posts/:postId/comments
 * @accessor api.functional.communityPlatform.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the post whose comments are requested */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformComment.ITree;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId/comments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): ICommunityPlatformComment.ITree =>
    typia.random<ICommunityPlatformComment.ITree>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
