import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../structures/ICommunityPlatformCommunity";
export * as posts from "./posts/index";

/**
 * Get community details by id from community_platform_communities.
 *
 * Fetch community details according to the community_platform_communities
 * model. As described in the schema comments, each record represents a
 * top-level space organizing posts and memberships with a unique name handle
 * and optional display_name and description. The visibility field indicates
 * public, restricted, or private access modes; nsfw influences safety gating;
 * auto_archive_days configures when threads move to read-only state. Language
 * and region provide discovery defaults, and quarantined indicates
 * safety-restricted discovery behavior with quarantined_at capturing the start
 * timestamp.
 *
 * Security and permissions: This read operation can be exposed publicly, but
 * the provider must enforce business policies based on the communityâ€™s
 * visibility and safety flags. For example, private communities should only
 * reveal details to approved viewers, and quarantined content may require
 * acknowledgment before exposure. Records where deleted_at is set should be
 * treated as removed from general listings and not returned by default.
 *
 * Relationships and error behavior: Communities are linked to owners and
 * moderators through community_platform_community_owners and
 * community_platform_community_moderators, and to subscriptions via
 * community_platform_subscriptions. If the requested id does not correspond to
 * a visible community (e.g., missing, treated as removed, or access denied by
 * visibility settings), return a not-found or access-denied style error
 * consistent with the exception model. This endpoint pairs naturally with POST
 * /communities for creation flows.
 *
 * @param props.connection
 * @param props.communityId Unique identifier (UUID) of the target community
 * @path /communityPlatform/communities/:communityId
 * @accessor api.functional.communityPlatform.communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target community */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
