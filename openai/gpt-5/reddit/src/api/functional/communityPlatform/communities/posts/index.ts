import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageICommunityPlatformPost } from "../../../../structures/IPageICommunityPlatformPost";

/**
 * List community posts (community_platform_posts) with deterministic, paginated
 * results.
 *
 * Retrieve a paginated, eligibility-filtered list of posts from the
 * community_platform_posts table for the specified community.
 *
 * Security and eligibility: Implementations must enforce community visibility
 * (public/restricted/private), NSFW preference handling, and quarantine
 * behavior from community_platform_communities. Items in states like
 * RemovedByModeration, RemovedByAdmin, DeletedByAuthor, or PendingReview are
 * typically excluded from general lists, while archived posts remain visible
 * but read-only. Always exclude rows where deleted_at is set.
 *
 * Sorting behavior: The platform supports New (created_at desc), Top (net
 * approval over a time window), Hot (recency-weighted engagement), and
 * Controversial (high total votes, near-balanced polarity). If a client does
 * not provide optional query parameters for sort/time window, the
 * implementation SHOULD apply a sensible default (e.g., New for community view)
 * consistent with business rules. This contract does not define query
 * parameters beyond the path; query usage is implementation-specific.
 *
 * Relationships and ranking sources: Posts belong to a community via
 * community_platform_community_id and to authors via
 * community_platform_user_id. Vote data in community_platform_post_votes
 * provides aggregates for Top/Controversial/Hot. Implementations should ensure
 * list projections include fields suitable for list UIs (e.g., title, type,
 * nsfw, spoiler, visibility_state, locked_at, archived_at, created_at) without
 * exposing sensitive data.
 *
 * Errors: COMMUNITY_PRIVATE (insufficient permission), SORT_UNSUPPORTED (when
 * unsupported query sort is supplied), and not found when community does not
 * exist or is inaccessible.
 *
 * @param props.connection
 * @param props.communityId Target community’s ID (UUID) whose posts will be
 *   listed.
 * @path /communityPlatform/communities/:communityId/posts
 * @accessor api.functional.communityPlatform.communities.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Target community’s ID (UUID) whose posts will be listed. */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = IPageICommunityPlatformPost;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId/posts",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}/posts`;
  export const random = (): IPageICommunityPlatformPost =>
    typia.random<IPageICommunityPlatformPost>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
