import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../../../structures/ICommunityPlatformPost";

/**
 * Create a new post record (community_platform_posts) within a specified
 * community.
 *
 * Publish a new community post associated with community_platform_posts. The
 * Prisma schema models posts with fields including title, type
 * (application-enforced TEXT | LINK | IMAGE), body (TEXT only), link_url (LINK
 * only), image_url (IMAGE only), label booleans nsfw and spoiler, and lifecycle
 * attributes such as visibility_state (e.g., Active, PendingReview, Locked,
 * Archived), locked_at, archived_at, edited_at, edit_count, created_at,
 * updated_at, and deleted_at. This endpoint creates a record linked to the
 * target community (community_platform_communities.id) and the authenticated
 * author (community_platform_users.id).
 *
 * Validation and business logic follow the platform requirements: for TEXT
 * posts, require a non-empty body within allowed length; for LINK posts,
 * require an http/https URL within length limits; for IMAGE posts, require an
 * image resource URI string (the API uses URIs rather than binary payloads).
 * Communities can enforce defaults like nsfw or spoiler gating based on
 * community_platform_communities.nsfw and visibility rules; initial
 * visibility_state is typically set to Active unless moderation or automated
 * policies choose PendingReview. The authorâ€™s eligibility can be derived from
 * community_platform_users fields such as email_verified (must be true for
 * participation) and account_state (must allow posting).
 *
 * On success, the operation returns the newly created post including
 * identifiers and the submitted content fields mapped to the appropriate
 * columns (title, type, body/link_url/image_url). Common error cases include
 * invalid content type/payload combinations, community not found, author not
 * eligible (e.g., email not verified), or community constraints that disallow
 * the selected post type for that community.
 *
 * This operation complements listing and detail retrieval endpoints (not
 * defined here) and is intentionally limited to creation per the interface
 * instructions. Any moderation workflows (lock, archive, remove) are outside
 * the scope of this endpoint.
 *
 * @param props.connection
 * @param props.communityId The community ID where the post will be created.
 * @param props.body Post creation payload including title, type, and
 *   type-specific content fields.
 * @path /communityPlatform/memberUser/communities/:communityId/posts
 * @accessor api.functional.communityPlatform.memberUser.communities.posts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The community ID where the post will be created. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Post creation payload including title, type, and type-specific
     * content fields.
     */
    body: ICommunityPlatformPost.ICreate;
  };
  export type Body = ICommunityPlatformPost.ICreate;
  export type Response = ICommunityPlatformPost;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/memberUser/communities/:communityId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/memberUser/communities/${encodeURIComponent(props.communityId ?? "null")}/posts`;
  export const random = (): ICommunityPlatformPost =>
    typia.random<ICommunityPlatformPost>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
