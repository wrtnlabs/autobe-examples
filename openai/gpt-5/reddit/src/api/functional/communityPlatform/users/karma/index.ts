import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformUserKarma } from "../../../../structures/ICommunityPlatformUserKarma";

/**
 * Get a user’s karma totals from community_platform_user_karmas.
 *
 * This endpoint returns the current karma snapshot for a user. The
 * community_platform_user_karmas model contains integer aggregates: post_karma
 * (from votes on posts), comment_karma (from votes on comments), and
 * total_karma (overall). The schema notes the application maintains these
 * values based on voting activity. The endpoint performs no recalculation; it
 * simply reads the latest stored values.
 *
 * The user linkage is community_platform_user_id referencing
 * community_platform_users.id. Providers should ensure the path parameter
 * userId is a valid UUID and resolve the corresponding karma row. If no karma
 * row exists yet for a legitimate user, the service may return zeros or an
 * initialized structure as per business policy, but must not fabricate data
 * that conflicts with the schema.
 *
 * Security and privacy: karma totals are non-sensitive aggregates suitable for
 * public display in accordance with profile visibility rules. The endpoint is
 * public, but downstream logic should still honor any platform-wide
 * restrictions that might affect exposure (e.g., banned accounts’ visibility
 * policies).
 *
 * Relationship to other entities: while this operation does not retrieve
 * content, it is related to voting tables community_platform_post_votes and
 * community_platform_comment_votes, which the application uses to compute or
 * update karma. It also complements the profile endpoint, which may embed the
 * same totals when returning broader profile information.
 *
 * Expected behavior and errors: return a not-found outcome if the referenced
 * user does not exist; if the user exists but has no karma record yet, return
 * an initialized response consistent with platform defaults. Input validation
 * ensures userId is a UUID.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 *   (community_platform_users.id).
 * @path /communityPlatform/users/:userId/karma
 * @accessor api.functional.communityPlatform.users.karma.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user (community_platform_users.id). */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformUserKarma;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/users/:userId/karma",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/users/${encodeURIComponent(props.userId ?? "null")}/karma`;
  export const random = (): ICommunityPlatformUserKarma =>
    typia.random<ICommunityPlatformUserKarma>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
