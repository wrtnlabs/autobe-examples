import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformUserProfile } from "../../../../structures/ICommunityPlatformUserProfile";

/**
 * Get a user’s consolidated profile from community_platform_users with authored
 * posts/comments and aggregated karma.
 *
 * This endpoint returns a consolidated public profile for a single user. It is
 * centered on the community_platform_users model, whose description states it
 * stores login identifiers, credential hash, account lifecycle, consent
 * timestamps, and profile basics, and is referenced by role assignment tables
 * and content authorship. From this table, only non-sensitive, public-facing
 * attributes should be surfaced in the profile (e.g., id, username,
 * display_name, avatar_uri). Fields such as password_hash and email must never
 * be exposed in the response. The account_state and email_verified flags may
 * influence visibility decisions per business policy, but the response should
 * remain limited to allowed public information.
 *
 * Karma information is sourced from community_platform_user_karmas, which
 * aggregates post_karma, comment_karma, and total_karma for the user. These
 * values provide the profile’s reputation summary. The schema comment indicates
 * these totals are maintained by application logic based on votes; the endpoint
 * only reads the current snapshot without recalculating.
 *
 * Authored content summaries derive from community_platform_posts and
 * community_platform_comments where community_platform_user_id matches the path
 * userId. For posts, relevant fields include id, community references, title,
 * type (TEXT|LINK|IMAGE enforced at the application layer), content pointers
 * (body/link_url/image_url used according to type), labels (nsfw, spoiler),
 * timestamps (created_at, updated_at, edited_at, locked_at, archived_at), and
 * an optional visibility_state describing lifecycle (Active, Locked, Archived,
 * RemovedByModeration, RemovedByAdmin, DeletedByAuthor, PendingReview,
 * LegalHold). For comments, relevant fields include id, post linkage, parent_id
 * for nesting, body, timestamps (created_at, updated_at, edited_at),
 * edit_count, and locked_at for thread restrictions.
 *
 * Security and privacy: guest viewers may access public profile data; sensitive
 * attributes like email and password_hash must be excluded. If community or
 * content-level policies restrict visibility (e.g., NSFW gating, private
 * communities), the provider should omit or redact items accordingly. The
 * operation itself is public, but downstream business logic enforces role-based
 * visibility and community access rules.
 *
 * Validation and behavior: the path parameter userId must be a valid UUID
 * referencing community_platform_users.id. If the user does not exist or is not
 * accessible by policy, the service should return an appropriate not-found or
 * privacy-constrained response. This endpoint is a simple detail retrieval; it
 * does not paginate or sort activity beyond a basic, provider-defined ordering
 * consistent with business expectations for a compact profile view.
 *
 * Related operations: GET /communityPlatform/users/{userId}/karma provides a
 * focused view of karma totals and may be used when only reputation data is
 * needed. Profile retrieval may also be followed by separate calls to post or
 * comment detail endpoints if clients need full content objects beyond the
 * lightweight summaries included here.
 *
 * Error handling expectations: return a not-found outcome when the target user
 * record does not exist, and a privacy outcome when the viewer cannot access
 * the profile due to privacy settings or blocks. Avoid leaking information
 * about restricted records in error messages.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 *   (community_platform_users.id).
 * @path /communityPlatform/users/:userId/profile
 * @accessor api.functional.communityPlatform.users.profile.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user (community_platform_users.id). */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformUserProfile;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/users/:userId/profile",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/users/${encodeURIComponent(props.userId ?? "null")}/profile`;
  export const random = (): ICommunityPlatformUserProfile =>
    typia.random<ICommunityPlatformUserProfile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
