import { tags } from "typia";

import { ICommunityPlatformCommentNode } from "./ICommunityPlatformCommentNode";

/**
 * Comment entity (Prisma: community_platform_comments) with nesting via
 * parent_id and lifecycle fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformComment = {
  /**
   * Primary key.
   *
   * Prisma: id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Target post id.
   *
   * Prisma: community_platform_post_id.
   */
  community_platform_post_id: string & tags.Format<"uuid">;

  /**
   * Author user id.
   *
   * Prisma: community_platform_user_id.
   */
  community_platform_user_id: string & tags.Format<"uuid">;

  /**
   * Optional parent comment id.
   *
   * Prisma: parent_id (nullable).
   */
  parent_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Comment text (1–10,000 chars).
   *
   * Prisma: body.
   */
  body: string;

  /**
   * Timestamp when this thread node was locked.
   *
   * Prisma: locked_at (nullable).
   */
  locked_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Last edit timestamp.
   *
   * Prisma: edited_at (nullable).
   */
  edited_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Number of author edits.
   *
   * Prisma: edit_count.
   */
  edit_count: number & tags.Type<"int32">;

  /**
   * Creation timestamp.
   *
   * Prisma: created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp.
   *
   * Prisma: updated_at.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformComment {
  /**
   * Request body for creating a new comment under a post, with optional
   * nesting.
   *
   * This DTO is used by write operations that create comments in the Content
   * domain. It accepts only end-user-editable fields: the comment body and
   * optional parent_id for nested replies. The target postId and author are
   * derived from the path parameter and authenticated session, respectively,
   * and therefore are not accepted here to prevent impersonation or
   * cross-posting.
   *
   * Security and validation notes:
   *
   * - The author identity (user) comes from the authenticated context and is
   *   never taken from client input.
   * - The target post is specified via the request path, not the body.
   * - The parent_id, if present, must belong to the same post and respect
   *   maximum depth and lock/archive rules. The provider enforces these
   *   constraints before creation.
   * - Body must be 1–10,000 characters after trimming, consistent with Prisma
   *   column comments for community_platform_comments.body.
   */
  export type ICreate = {
    /**
     * Comment text content to create.
     *
     * Maps to community_platform_comments.body in the Prisma schema.
     * Business rule: 1–10,000 Unicode characters after trimming whitespace;
     * empty-only text is not permitted. The service will normalize line
     * endings and may apply additional policy validation (e.g., word
     * filters) per business requirements.
     */
    body: string & tags.MinLength<1> & tags.MaxLength<10000>;

    /**
     * Optional parent comment identifier for nesting within the same post.
     *
     * Directly corresponds to community_platform_comments.parent_id in the
     * Prisma model (nullable UUID). When provided, this must reference an
     * existing comment on the same post. Depth limits and lock/archive
     * constraints are enforced by the service.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Tree-structured comment response. Uses ICommunityPlatformCommentNode for
   * hierarchical representation.
   *
   * Not a direct Prisma mapping; built from community_platform_comments.
   */
  export type ITree = {
    /** The post whose comments are represented. */
    post_id: string & tags.Format<"uuid">;

    /** Tree roots with nested replies in each node. */
    items: ICommunityPlatformCommentNode[];
  };

  /**
   * Summary DTO for comments based on Prisma model
   * community_platform_comments.
   *
   * Omits large text content (body) for efficiency and privacy in list views,
   * while preserving essential relational and lifecycle metadata for
   * threading and moderation-aware displays.
   */
  export type ISummary = {
    /**
     * Primary key of the comment (community_platform_comments.id).
     *
     * Serves as the stable identifier in thread structures.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Foreign key referencing the target post
     * (community_platform_posts.id).
     *
     * Ensures the comment is associated to a single post.
     */
    community_platform_post_id: string & tags.Format<"uuid">;

    /**
     * Optional parent comment id enabling nested replies.
     *
     * Backed by community_platform_comments.parent_id (nullable).
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Timestamp when this comment node was locked; prevents new replies
     * beneath this node.
     *
     * Maps to community_platform_comments.locked_at.
     */
    locked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp of the last author edit for this comment.
     *
     * Maps to community_platform_comments.edited_at.
     */
    edited_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Number of times the comment was edited by the author.
     *
     * Stored in community_platform_comments.edit_count and used for edit
     * transparency indicators.
     */
    edit_count: number & tags.Type<"int32">;

    /**
     * Creation timestamp (UTC) of the comment.
     *
     * Backed by community_platform_comments.created_at.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
