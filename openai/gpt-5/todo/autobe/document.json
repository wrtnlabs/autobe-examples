{"operations":[{"specification":"Design the guest registration endpoint for the Minimal Todo List service. This operation creates a new guest actor record and immediately issues JWT tokens for temporary access, scoped to the guest role. It is associated with the Prisma table Actors.todo_list_guest_visitors, which stores anonymous visitor actors used before full authentication. The model contains: id (UUID primary key), created_at (timestamp), updated_at (timestamp), and deleted_at (nullable timestamp used to mark a record as logically removed; null indicates active). No authentication credentials are stored in this table.\n\nThe endpoint path follows the role-based authentication convention: /auth/guestVisitor/join. It accepts an optional, minimal request body used for client context if needed by policy. The request body structure references components schemas using ITodoListGuestVisitor.ICreate. The response returns an authorization payload typed as ITodoListGuestVisitor.IAuthorized, containing the issued tokens and the minimal actor identity. This operation is public and does not require prior authentication.\n\nThis operation strictly maps to the Actors domain table todo_list_guest_visitors and does not touch business entities like Todos. It must ensure newly created records set created_at and updated_at according to application policy and avoid any reference to credentials, since password_hash or email do not exist on this table. If a previously created guest actor has a non-null deleted_at (logically removed), a new record should be created rather than attempting to revive the old one, consistent with the table’s semantics.","authorizationType":"join","description":"This endpoint registers a temporary guest actor for the Minimal Todo List service and issues JWT tokens appropriate for anonymous usage prior to becoming a member. It directly relates to the Prisma model Actors.todo_list_guest_visitors, which defines anonymous visitor records with id as the UUID primary key, created_at for creation time, updated_at for last modification time, and a nullable deleted_at column used to mark a record as logically removed or deactivated (null means active).\n\nBecause todo_list_guest_visitors stores no authentication credentials, this operation must not accept or persist passwords or emails. The application should only create a new actor entry and set created_at and updated_at based on the current time policy. The lack of credential fields in this model aligns with the business requirement that guests are unauthenticated and operate with temporary tokens only.\n\nThe registration integrates with the authorization layer by returning an authorization payload (ITodoListGuestVisitor.IAuthorized) that contains tokens and the minimal actor identity. Tokens enable subsequent public interactions that require a guest actor context without granting access to member-only Todo operations. The underlying database entity for this operation is limited to todo_list_guest_visitors and has no relations to the Todos domain.\n\nSecurity-wise, the endpoint is public but must enforce rate limiting and basic abuse protections at the application layer. Since deleted_at exists to indicate logical removal, the provider should avoid returning or reactivating logically removed records during registration; instead, it should create a new guest actor record to keep state clean and predictable.\n\nRelated operations include /auth/guestVisitor/refresh for renewing tokens. Typical errors include validation failures on malformed request payloads (though the body is minimal), and system conditions that prevent record creation. No ownership checks apply because guests do not own Todos and this endpoint is open to unauthenticated callers.","summary":"Register a guest actor (todo_list_guest_visitors) and issue initial JWT tokens.","parameters":[],"requestBody":{"description":"Optional client context for creating a guest actor; may be an empty object per policy.","typeName":"ITodoListGuestVisitor.ICreate"},"responseBody":{"description":"Authorized guest payload with issued tokens and minimal actor identity.","typeName":"ITodoListGuestVisitor.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guestVisitor/join","method":"post"},{"specification":"Design the guest token refresh endpoint for the Minimal Todo List service. This operation exchanges a valid refresh token for a new access token (and typically a new refresh token). It is associated with the Prisma table Actors.todo_list_guest_visitors for identity context only; the table stores guest actor metadata: id (UUID primary key), created_at, updated_at, and deleted_at (nullable timestamp indicating logical removal when non-null). No credential fields exist on this table.\n\nThe endpoint path follows the role-based authentication convention: /auth/guestVisitor/refresh. The request body carries the refresh token and any required client context, referenced via ITodoListGuestVisitor.IRefresh. The successful response returns a new authorization payload typed as ITodoListGuestVisitor.IAuthorized. The operation requires a valid refresh token but does not rely on password-based authentication.\n\nThis endpoint should validate that the referenced guest actor (if embedded in token claims) is not logically removed (deleted_at is null) before issuing new tokens. If the actor is logically removed or the token is invalid/expired, the operation must fail safely without revealing sensitive details. The operation does not interact with business entities like Todos and is limited to the Actors domain.","authorizationType":"refresh","description":"This endpoint renews guest authorization by exchanging a valid refresh token for a fresh access token and, where applicable, a rotated refresh token. It references the Prisma model Actors.todo_list_guest_visitors for identity, which includes id (UUID primary key), created_at (creation time), updated_at (last modification), and a nullable deleted_at column used to indicate that a record has been logically removed (null means active).\n\nThe request body (ITodoListGuestVisitor.IRefresh) provides the refresh token and minimal client context needed to perform validation. As todo_list_guest_visitors has no credential fields, this flow relies entirely on token verification logic and does not consult passwords or email identifiers.\n\nImplementation should verify that the guest actor indicated by token claims corresponds to an active record (deleted_at is null) and that token integrity, expiration, and rotation policy checks pass. If validation fails, the provider must return a safe error without exposing internal state or indicating which aspect failed.\n\nThis operation is part of the guest authentication workflow and complements /auth/guestVisitor/join, which issues the initial tokens. It does not alter business entities in the Todos domain and solely manages authorization tokens for an existing guest actor.\n\nTypical errors include invalid or expired refresh tokens, actor state indicating logical removal, and policy violations such as reuse of a revoked token. Successful responses return ITodoListGuestVisitor.IAuthorized with the new tokens and any required session metadata.","summary":"Refresh guest tokens for an active guest actor (todo_list_guest_visitors).","parameters":[],"requestBody":{"description":"Refresh token exchange request for guest actors.","typeName":"ITodoListGuestVisitor.IRefresh"},"responseBody":{"description":"Authorized guest payload containing renewed tokens.","typeName":"ITodoListGuestVisitor.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guestVisitor/refresh","method":"post"},{"specification":"Create a registration endpoint for member users of the Minimal Todo List service. This operation targets the Prisma table `todo_list_todo_members` (Actors namespace). It accepts an email and a plaintext password, hashes the password to persist into `password_hash`, and creates a new member row with timestamps `created_at` and `updated_at`. The `email` column is unique and should be normalized to lowercase at the application layer as described in the Prisma schema comments. The record’s `deleted_at` remains null to indicate an active account. Upon successful registration, the service issues JWTs and returns an authorization payload for the member session.\n\nThis endpoint is strictly about authentication/authorization workflow: creating a member account mapped to `todo_list_todo_members.id`, storing `password_hash`, and returning tokens. It does not touch business Todo entities (`todo_list_todos`). The Prisma schema comments emphasize storing only strong password hashes and maintaining uniqueness on `email`. The controller/provider must set `created_at` and `updated_at` to current timestamps on insert.\n\nSecurity considerations: input validation for `email` format and password policy, collision handling for the unique `email` constraint, and avoidance of leaking whether an email already exists beyond a neutral message. No soft deletion logic is triggered here; however, if a duplicate registration attempt is made for a previously deactivated account (non-null `deleted_at`), policy may allow restoration flow instead of a new row.\n\nRelated operations include member login and token refresh which rely on the created `todo_list_todo_members` row and its `password_hash`. Downstream Todo operations require authentication established by this join step.","authorizationType":"join","description":"Purpose: Register a new todoMember account using `email` and a password, persisting to the Prisma table `todo_list_todo_members`. The table defines `id` (PK, UUID), `email` (unique), `password_hash` (hashed credential), `created_at`, `updated_at`, and `deleted_at` (nullable). Registration inserts a new row with `email` normalized to lowercase and a securely computed `password_hash`. `created_at` and `updated_at` are set to the current time, and `deleted_at` remains null to indicate an active member.\n\nImplementation: The provider must hash the incoming password before storage, never persisting plaintext. The unique constraint on `email` (see `@@unique([email])`) requires collision handling. On success, the service generates JWTs for session establishment and returns an authorization DTO representing the authenticated state. The flow does not modify other entities like `todo_list_todos`.\n\nRole integration: This operation applies to the member role (business role: todoMember) and results in ownership for future Todos via the relationship from `todo_list_todos.todo_list_todo_member_id` to `todo_list_todo_members.id`. Although Todos are not created here, this account becomes the owner reference for all personal Todo operations.\n\nSecurity: Enforce password strength policies; minimize error detail on `email` uniqueness conflicts to avoid enumeration. Ensure timestamps (`created_at`, `updated_at`) are properly set. `deleted_at` must be null for active accounts; attempts to register an email with a previously deactivated account should follow policy (e.g., restoration) without disclosing sensitive state.\n\nRelated operations: Use Login to authenticate existing members using `email` and `password_hash` verification, and Refresh to renew tokens using a valid refresh token. Together these endpoints form the authentication lifecycle for `todo_list_todo_members`.","summary":"Register a member in Prisma table todo_list_todo_members and issue JWTs.","parameters":[],"requestBody":{"description":"Registration payload including email and password.","typeName":"ITodoListTodoMemberJoin.ICreate"},"responseBody":{"description":"Authorized member session after successful registration.","typeName":"ITodoListTodoMember.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/todoMember/join","method":"post"},{"specification":"Create a login endpoint for existing member users backed by the Prisma table `todo_list_todo_members`. The operation verifies credentials by finding a row via `email` (case-normalized) and comparing the provided password against the stored `password_hash`. It must ensure the account is active (`deleted_at` is null). On success, issue JWTs and return an authorization DTO. The operation updates no member columns except potentially `updated_at` for bookkeeping if desired by policy.\n\nThe schema comments specify that passwords are stored as strong hashes (e.g., Argon2id/Bcrypt) and that `email` is unique. The provider must protect against timing attacks, user enumeration, and disclose minimal information on failure. This endpoint does not interact with `todo_list_todos` but enables access to personal Todo operations after authentication.\n\nRelated operations: Registration (Join) to create the member record, and Refresh to renew tokens using a refresh token. If an account’s `deleted_at` is set, login should be denied or follow a policy-driven restoration flow.","authorizationType":"login","description":"Purpose: Authenticate a todoMember whose identity is recorded in `todo_list_todo_members` with fields `email`, `password_hash`, `created_at`, `updated_at`, and `deleted_at`. Login verifies that `deleted_at` is null (active account) and the provided password matches `password_hash` using a strong hash verifier.\n\nImplementation: Normalize the input email to lowercase before lookup, then perform constant-time password verification against `password_hash`. Do not reveal whether the email exists or whether the password is wrong; return a neutral authentication failure. On success, issue new JWTs and return an authorization payload. Optionally refresh `updated_at` to reflect recent activity per policy.\n\nRole integration: Successful login yields authorization for the todoMember role, enabling access to personal Todo operations via the relationship from `todo_list_todos.todo_list_todo_member_id` to `todo_list_todo_members.id`.\n\nSecurity: Enforce lockout or throttling on repeated failures according to policy; ensure safe handling of unique constraint on `email`. Prevent authentication for deactivated accounts where `deleted_at` is not null unless an explicit restore flow is executed.\n\nRelated operations: Join for initial account creation and Refresh for token renewal. These operations together manage the session lifecycle for `todo_list_todo_members`.","summary":"Authenticate against Prisma table todo_list_todo_members and issue JWTs.","parameters":[],"requestBody":{"description":"Login payload including email and password.","typeName":"ITodoListTodoMemberLogin.ICreate"},"responseBody":{"description":"Authorized member session after successful login.","typeName":"ITodoListTodoMember.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/todoMember/login","method":"post"},{"specification":"Provide a token refresh endpoint for member users that renews JWTs without re-supplying credentials. This endpoint belongs to the authentication lifecycle of the Prisma table `todo_list_todo_members` but does not modify any `todo_list_todo_members` columns directly. It validates the refresh token, identifies the member by `id`, ensures the account is active (`deleted_at` is null), and issues new tokens represented by an authorization DTO.\n\nThe schema notes password storage in `password_hash` and uniqueness of `email`, but refresh concerns only token validation and the member account’s active status. No Todo entities (`todo_list_todos`) are affected.\n\nRelated operations: Join (to create the account) and Login (to obtain the initial token pair). Refresh extends authenticated sessions for valid, active accounts.","authorizationType":"refresh","description":"Purpose: Renew access for an authenticated todoMember using a valid refresh token. The member identity is anchored to the `todo_list_todo_members` table which defines `id`, `email`, `password_hash`, `created_at`, `updated_at`, and `deleted_at`. Refresh verifies the token, locates the member, confirms `deleted_at` is null, and returns newly minted JWTs.\n\nImplementation: Validate refresh token integrity and expiration, map it to the member `id`, and ensure the corresponding row remains active. Avoid touching `password_hash` or other member fields; only token issuance occurs. Do not disclose account existence or state beyond necessary error semantics.\n\nRole integration: Successful refresh maintains the todoMember’s authenticated state required for personal Todo operations whose ownership is tied via `todo_list_todos.todo_list_todo_member_id`.\n\nSecurity: Enforce rotation/invalidation policies on refresh tokens; reject tokens for deactivated accounts where `deleted_at` is not null. Log minimal, non-sensitive telemetry.\n\nRelated operations: Join for registration and Login for authenticating credentials; Refresh for renewing session continuity.","summary":"Refresh JWTs for an active member anchored to todo_list_todo_members.","parameters":[],"requestBody":{"description":"Refresh token payload for renewing session.","typeName":"ITodoListTodoMemberRefresh.ICreate"},"responseBody":{"description":"Authorized member session after successful token refresh.","typeName":"ITodoListTodoMember.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/todoMember/refresh","method":"post"},{"specification":"Provide a password change endpoint for authenticated members represented in the Prisma table `todo_list_todo_members`. The operation verifies the current password against the stored `password_hash`, then updates `password_hash` to a new strong hash for the supplied new password, and sets `updated_at` to the current time. The `email` remains unchanged; `created_at` is immutable; `deleted_at` must be null for an active account. This endpoint is an account security operation and part of the authorization domain, not general profile management.\n\nThis endpoint does not interact with `todo_list_todos` and only affects the actor record in `todo_list_todo_members`. It may optionally rotate tokens upon success (implementation choice) but must avoid leaking sensitive details.\n\nRelated operations: Login (uses `password_hash` verification), Refresh (token renewal), and Deactivate/Restore (account state via `deleted_at`).","authorizationType":null,"description":"Purpose: Let an authenticated todoMember change their password. The member is stored in `todo_list_todo_members` with columns `id`, `email` (unique), `password_hash` (hashed), `created_at`, `updated_at`, and `deleted_at`. The operation checks the provided current password against `password_hash`, writes a new `password_hash` for the new password, and updates `updated_at`. `email` is not modified; `created_at` remains unchanged.\n\nImplementation: Require the member to be authenticated (role todoMember). Perform constant-time verification for the current password, compute a strong hash for the new password, persist it to `password_hash`, and set `updated_at` to now. If `deleted_at` is not null, deny the operation as the account is deactivated.\n\nRole integration: This is a security maintenance action for the todoMember role, ensuring continuity of secure access to personal Todo features linked through ownership (`todo_list_todos.todo_list_todo_member_id`).\n\nSecurity: Enforce password policy, throttle repeated failures, and consider rotating JWTs on success to mitigate token compromise risk. Do not reveal whether verification failed due to the current password mismatch vs. other reasons beyond a neutral message.\n\nRelated operations: Use Login for credential-based entry, Refresh for renewing tokens, and Deactivate/Restore to manage account activity via `deleted_at`.","summary":"Change password by updating password_hash in todo_list_todo_members.","parameters":[],"requestBody":{"description":"Current and new password for password rotation.","typeName":"ITodoListTodoMemberPassword.IUpdate"},"responseBody":{"description":"Security event confirmation and possibly renewed session context.","typeName":"ITodoListTodoMember.ISecurity"},"authorizationRole":"todoMember","name":"changePassword","prerequisites":[],"path":"/auth/todoMember/password","method":"put"},{"specification":"Provide an account deactivation endpoint for authenticated members that implements logical removal via the `deleted_at` column of the Prisma table `todo_list_todo_members`. When invoked, it sets `deleted_at` to the current timestamp to mark the account as deactivated (soft deletion per schema comments). `created_at` and `updated_at` should be updated appropriately (`updated_at` set to now). This is a reversible security action and does not remove `todo_list_todos`, though future access to them is blocked by authorization.\n\nThe schema explicitly documents `deleted_at` as a soft deletion timestamp; null means active. This operation is part of the authorization/security surface and does not involve general profile fields. After deactivation, login and refresh should be denied until restoration.\n\nRelated operations: Restore (sets `deleted_at` back to null), Login (should reject deactivated accounts), and Refresh (should reject tokens for deactivated accounts).","authorizationType":null,"description":"Purpose: Deactivate the authenticated todoMember account by setting `deleted_at` on the corresponding row in `todo_list_todo_members`. This aligns with the schema’s description of `deleted_at` as a soft deletion marker where null means active.\n\nImplementation: Require authentication (role todoMember). Set `deleted_at` to the current timestamp and update `updated_at` to now. Do not modify `email` or `password_hash`. After success, the member should not be able to authenticate or refresh tokens until restored. This operation does not remove personal Todos in `todo_list_todos`; instead, authorization rules prevent access while deactivated.\n\nRole integration: Represents a member-controlled security state change, gating access to all personal Todo operations linked by ownership from `todo_list_todos.todo_list_todo_member_id` to `todo_list_todo_members.id`.\n\nSecurity: Ensure confirmation semantics and neutral messaging. Consider immediate token invalidation after deactivation to enforce session closure across devices.\n\nRelated operations: `restore` to clear `deleted_at`, `login` and `refresh` to deny access while deactivated.","summary":"Deactivate member by setting deleted_at in todo_list_todo_members.","parameters":[],"requestBody":{"description":"Optional reason or confirmation metadata for deactivation.","typeName":"ITodoListTodoMemberDeactivate.ICreate"},"responseBody":{"description":"Security event confirmation for deactivation.","typeName":"ITodoListTodoMember.ISecurity"},"authorizationRole":"todoMember","name":"deactivate","prerequisites":[],"path":"/auth/todoMember/deactivate","method":"post"},{"specification":"Provide an account restoration endpoint that clears the `deleted_at` column for a previously deactivated member in the Prisma table `todo_list_todo_members`. This security operation is available to an authenticated member whose account is undergoing restoration according to policy (e.g., via a privileged session or out-of-band validation). It sets `deleted_at` back to null and updates `updated_at` to the current time, making the account active again for authentication flows.\n\nThis operation focuses on the `todo_list_todo_members` table and does not modify Todos. After successful restoration, login and refresh operations are again permitted under normal policy. The operation must avoid leaking sensitive state to unauthorized actors.\n\nRelated operations: Deactivate (sets `deleted_at`), Login, and Refresh.","authorizationType":null,"description":"Purpose: Restore a deactivated todoMember account by clearing `deleted_at` on the member’s row in `todo_list_todo_members`. The schema defines `deleted_at` as a nullable timestamp: null indicates an active account; a set value indicates deactivation.\n\nImplementation: Require authenticated context with appropriate policy to perform self-restore. Set `deleted_at` to null and update `updated_at` to the current time. Do not change `email` or `password_hash`. This action re-enables normal authentication and token refresh flows for the account.\n\nRole integration: Restoration reactivates access to personal Todo features whose ownership is linked from `todo_list_todos.todo_list_todo_member_id` to `todo_list_todo_members.id`.\n\nSecurity: Consider session hardening, audit logging, and requiring recent authentication. Use neutral messages on failure to avoid disclosure.\n\nRelated operations: `deactivate` to set `deleted_at`, `login` and `refresh` to resume normal sessions after restoration.","summary":"Restore member by clearing deleted_at in todo_list_todo_members.","parameters":[],"requestBody":{"description":"Optional confirmation metadata for restoration.","typeName":"ITodoListTodoMemberRestore.ICreate"},"responseBody":{"description":"Security event confirmation for restoration.","typeName":"ITodoListTodoMember.ISecurity"},"authorizationRole":"todoMember","name":"restore","prerequisites":[{"endpoint":{"path":"/auth/todoMember/deactivate","method":"post"},"description":"Member account must be deactivated (deleted_at set) before restoration can proceed. This ensures the restore operation targets an account in deactivated state; otherwise it may be a no-op or be rejected by policy."}],"path":"/auth/todoMember/restore","method":"post"},{"specification":"Create a registration (join) endpoint for administrative users of the Minimal Todo List service. This operation creates a new record in the Prisma table Actors.todo_list_system_admins and immediately issues JWT credentials for the newly created admin. The table includes: id (UUID, PK), email (unique), password_hash (hashed secret), created_at, updated_at, and deleted_at (nullable deactivation timestamp). The API must ensure email uniqueness per @@unique([email]) and populate created_at/updated_at on insert. The application must lower-case/normalize email before persistence and store only strong password hashes in password_hash. The response returns an authorized session DTO for the admin, not the raw database entity. Path contains no parameters, and the request body contains the minimal fields required to create an admin account (e.g., email and password to be hashed).","authorizationType":"join","description":"This endpoint registers a new administrative user by inserting a record into the Prisma model todo_list_system_admins. The core fields relevant to registration are email for unique identity and password_hash for credential storage. At creation time, created_at and updated_at must be set, and deleted_at must remain null to represent an active administrator. The primary key id is a UUID generated by the service layer.\n\nImplementation uses the table’s @@unique([email]) constraint to prevent duplicates. The service must normalize email to lowercase prior to validation and persistence, and it must derive password_hash using a strong algorithm such as Argon2id or Bcrypt; plaintext passwords are never stored. On successful creation, the system issues JWT credentials and returns an authorization payload instead of raw database fields. The request body carries the minimal inputs necessary to produce the new admin record (email, password) which are transformed into email and password_hash in persistence.\n\nThis operation is specific to the systemAdmin role and establishes an account able to administer service-level settings. It does not grant routine access to private member Todos; such access is out of scope and would be separately policy-gated. The returned authorization DTO reflects the authenticated identity and token set for a systemAdmin.\n\nSecurity considerations include enforcing the unique email constraint and rejecting attempts to register an email that already exists in todo_list_system_admins. The service must ensure password hashing is applied before storing to password_hash and should avoid timing leakage in error responses. Records with a non-null deleted_at are deactivated and must not be used to establish new sessions.\n\nRelated operations include the systemAdmin login for credential-based authentication and the token refresh operation for renewing access tokens. Clients generally call join once for initial setup, then subsequently use login and refresh as needed.","summary":"Register a new administrator in Prisma table todo_list_system_admins and issue JWT authorization.","parameters":[],"requestBody":{"description":"Admin registration payload (e.g., email and password to be hashed).","typeName":"ITodoListSystemAdmin.ICreate"},"responseBody":{"description":"Authorized admin session with tokens and profile information.","typeName":"ITodoListSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/systemAdmin/join","method":"post"},{"specification":"Create a login endpoint for administrative users authenticating against Actors.todo_list_system_admins. It validates the supplied email and password by locating a matching todo_list_system_admins record (unique by email) and verifying the password against password_hash. The account must be active (deleted_at is null). On success, produce a JWT-based authorized session DTO. No path parameters are required; the request payload carries credential fields.","authorizationType":"login","description":"This login operation authenticates a system administrator using the todo_list_system_admins schema. The table provides email as the unique login identifier and password_hash for credential verification. Only administrators whose records have deleted_at set to null are eligible to authenticate, ensuring deactivated accounts cannot log in. The service must not expose whether an email exists; responses should remain neutral while still enforcing correctness.\n\nImplementation must normalize the incoming email to lowercase before lookup and compare the supplied password to password_hash using a strong password verifier corresponding to the chosen hash algorithm. The operation must update no persistent fields during a normal login, though a separate audit system may record access events outside of this schema. Successful authentication results in issuing JWTs and returning an authorization DTO for the admin identity rather than the raw database entity.\n\nThis endpoint is role-specific to systemAdmin, aligning with administrative responsibilities without implying access to private member Todo content. The login result embodies permissions appropriate to administrators in the Minimal Todo List service.\n\nSecurity considerations include consistently rejecting invalid credentials, preventing enumeration by using consistent timing/error messages, and denying access when deleted_at is non-null. The underlying Prisma model’s @@unique([email]) ensures a single record per email.\n\nRelated operations include registration (join) to create the admin account and refresh to renew tokens before expiry. Clients will typically call login after a join or whenever a new session is needed.","summary":"Authenticate a system administrator via todo_list_system_admins and issue JWT authorization.","parameters":[],"requestBody":{"description":"Admin login credentials to authenticate (email and password).","typeName":"ITodoListSystemAdmin.ILogin"},"responseBody":{"description":"Authorized admin session with newly issued tokens.","typeName":"ITodoListSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/systemAdmin/login","method":"post"},{"specification":"Create a token refresh endpoint for system administrators. Given a valid refresh token, the service validates the token, optionally rechecks the corresponding account in Actors.todo_list_system_admins (ensuring the record remains active with deleted_at null), and issues new JWTs. No path parameters are required; the request body carries the refresh token. The response returns the authorized session DTO for the systemAdmin role.","authorizationType":"refresh","description":"This operation renews an existing authenticated session for a system administrator without re-supplying primary credentials. While tokens are typically validated independently of the database, the service should ensure the referenced administrator still exists in todo_list_system_admins and remains active (deleted_at is null) before issuing new tokens. This aligns token lifecycle with the authoritative account state defined by the Prisma model.\n\nImplementation accepts a refresh token in the request body, validates its integrity and expiry, and, on success, generates a fresh access token (and, if applicable, a rotated refresh token). No changes are made to fields in todo_list_system_admins during a standard refresh; created_at and updated_at remain as originally persisted. The id and email from the admin record inform claims appropriate to the systemAdmin role.\n\nThe endpoint’s role context is systemAdmin, ensuring that the renewed session continues to carry administrator permissions relevant to service-level actions and excluding routine access to private member Todo content.\n\nSecurity considerations include invalidating refresh tokens when deactivation occurs (deleted_at non-null), enforcing token rotation policies where applicable, and returning neutral errors on invalid or expired tokens. Validation should be performed without leaking whether a given token corresponds to a specific account.\n\nRelated operations are login for initial credential-based authentication and join for first-time account creation. Clients should prefer refresh prior to token expiry to maintain a consistent administrative session.","summary":"Refresh JWT credentials for a system administrator after validating the refresh token and account state in todo_list_system_admins.","parameters":[],"requestBody":{"description":"Refresh token payload used to renew administrator credentials.","typeName":"ITodoListSystemAdmin.IRefresh"},"responseBody":{"description":"Authorized admin session with refreshed tokens.","typeName":"ITodoListSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/systemAdmin/refresh","method":"post"},{"specification":"List/search Todo items owned by the authenticated member using advanced request-body parameters. This operation targets the Prisma table Todos namespace model: todo_list_todos. It supports owner-scoped retrieval, basic status filtering (All/Active/Completed via is_completed), default ordering by created_at descending, and page-based pagination consistent with business policy (default 20; allowed 10–50). Request schema is ITodoListTodo.IRequest and response schema is IPageITodoListTodo.ISummary. The provider must join the owner relation to todo_list_todo_members via todo_list_todo_member_id to enforce per-member scoping.","path":"/todoList/todoMember/todos","method":"patch","summary":"Search and paginate member-owned Todos from Prisma table todo_list_todos","description":"Retrieve a filtered, ordered, and paginated list of Todo records from the Prisma model todo_list_todos. According to the schema comments, each Todo belongs to exactly one member via the foreign key column todo_list_todo_member_id and has fields: id, title, is_completed, completed_at (nullable), created_at, and updated_at. The list is strictly scoped to the requesting member by matching todo_list_todo_member_id to the authenticated member’s identifier. Business filtering includes three states derived from is_completed: All (no additional filter), Active (is_completed = false), and Completed (is_completed = true). The default ordering is created_at descending so that newly created items appear first.\n\nSecurity considerations align with role-based access described in the requirements: only todoMember actors can call this operation. guestVisitor actors are denied. The provider must not return Todos owned by other members and should avoid messages that reveal whether other members’ items exist. Ownership enforcement is performed through the todo_list_todo_member_id relation to the owner table todo_list_todo_members.\n\nThis operation integrates directly with the underlying database entity todo_list_todos and its relation owner. Validation rules include enforcing allowed pagination bounds (default size 20; allowed 10–50 inclusive) and accepted status filter values. Request parameters should be validated before querying. The response returns a paginated collection optimized for list displays as ITodoListTodo summaries, including page metadata.\n\nRelated operations include the detail retrieval GET /todos/{todoId}, which returns a single record owned by the requester. Typical error handling includes returning an empty page when the requested page index exceeds available results, and a validation error when pagination or filter parameters violate policy.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for the member’s Todos","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of Todo summaries owned by the requesting member","typeName":"IPageITodoListTodo.ISummary"},"authorizationType":null,"authorizationRole":"todoMember","name":"index","prerequisites":[]},{"specification":"Fetch a single Todo by its identifier from the Prisma table todo_list_todos. This detail retrieval is strictly owner-scoped using the relation to todo_list_todo_members via column todo_list_todo_member_id. Returns the full Todo representation ITodoListTodo, including id, title, is_completed, completed_at (nullable), created_at, and updated_at as defined by the schema comments.","path":"/todoList/todoMember/todos/{todoId}","method":"get","summary":"Get a single Todo from Prisma table todo_list_todos by id","description":"Return a single Todo record from the Prisma model todo_list_todos identified by the path parameter todoId. The database schema defines columns id (UUID primary key), title, is_completed, completed_at (nullable), created_at, and updated_at. The record is also linked to the owner via todo_list_todo_member_id with a relation to todo_list_todo_members. Only the owner is permitted to access the record in normal operation; other users must not be able to infer its existence.\n\nSecurity and permissions: This endpoint is available to todoMember actors only. The provider must verify that the requested record’s todo_list_todo_member_id matches the authenticated member’s id. If the record is not owned by the requester or does not exist, respond with a neutral not-available outcome consistent with privacy requirements rather than leaking ownership.\n\nValidation and error handling: Validate that todoId is a well-formed UUID before querying. If the item is not found within the requester’s scope, return a not-found response. This operation complements the collection retrieval /todos (PATCH), which provides pagination and filtering. Timestamps (created_at and updated_at) are returned as stored; completed_at is present only when is_completed is true.","parameters":[{"name":"todoId","description":"Identifier of the Todo to retrieve (UUID from todo_list_todos.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full Todo record owned by the requesting member","typeName":"ITodoListTodo"},"authorizationType":null,"authorizationRole":"todoMember","name":"at","prerequisites":[{"endpoint":{"path":"/todoList/todos","method":"post"},"description":"A Todo record must exist (owned by the requesting member) before it can be retrieved by ID. Creating a Todo provides the todoId used in this GET endpoint; otherwise, the retrieval would result in not found."}]},{"specification":"Create a new Todo item in the minimal Todo service. This operation persists a record into the Prisma table \"todo_list_todos\". The payload supplies only the required business field (title). The service layer sets default and system-managed fields: is_completed=false, created_at, and updated_at. Ownership is maintained through the relation column todo_list_todo_member_id (referencing table \"todo_list_todo_members\"), which is resolved by the server according to deployment mode (e.g., authenticated member or single-user local mode) and is not part of the client payload. The response returns the created Todo using the service DTO that maps to Prisma fields: id (UUID in DB exposed as string), title, isCompleted (from is_completed), createdAt (from created_at), and updatedAt (from updated_at).","authorizationType":null,"description":"This endpoint creates a new Todo for the current user using the underlying Prisma model todo_list_todos. According to the model description, each Todo has a required single-line title, a completion state recorded in is_completed (default false on creation), an optional completed_at timestamp used only when completed, and lifecycle timestamps created_at and updated_at. The operation sets defaults and timestamps in alignment with these rules and persists the new record.\n\nSecurity and ownership considerations: the database column todo_list_todo_member_id on todo_list_todos enforces strict per-owner scoping via a foreign key to todo_list_todo_members.id. While this API surface accepts only the minimal business field (title), the service determines the owner and assigns todo_list_todo_member_id internally. In deployments with authentication, the owner is the authenticated member; in single-user local mode, an implicit member context is used. Clients do not provide ownership identifiers directly in this minimal design.\n\nValidation and business rules: the title must be trimmed and validated per business policy (e.g., length 1–100 characters and single-line with no newline characters) consistent with the schema comments indicating title is a required single-line task title. On success, the record is stored with is_completed=false, created_at set once, and updated_at set to the current time. The response maps Prisma fields to the DTO shape: id (string), title (string), isCompleted (boolean), createdAt (string date-time), updatedAt (string date-time).\n\nRelated operations: clients typically follow creation with list retrieval or detail retrieval to present the new item among the newest-first ordering, though list retrieval is not defined in this minimal operation set. Error handling includes rejecting invalid titles (validation failures) and reporting temporary processing issues with appropriate messages. The operation returns 201 Created semantics with the created entity in the response body.","summary":"Create a Todo item in the todo_list_todos table","parameters":[],"requestBody":{"description":"Todo creation payload containing only the required title field","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"The created Todo entity with server-assigned identifiers and timestamps","typeName":"ITodoListTodo"},"authorizationRole":"todoMember","name":"create","prerequisites":[],"path":"/todoList/todos","method":"post"},{"specification":"Update an existing Todo item identified by its id in the Prisma table \"todo_list_todos\". This operation accepts partial changes via the DTO ITodoListTodo.IUpdate to modify the title and/or the completion state (isCompleted). The service maps request fields to Prisma columns: title → title, isCompleted → is_completed. When isCompleted transitions to true, completed_at is set; when transitioning to false, completed_at is cleared. The system also updates updated_at. The response returns the updated Todo mapped to the DTO fields: id, title, isCompleted, createdAt, updatedAt.","authorizationType":null,"description":"This endpoint updates a single Todo using the underlying Prisma model todo_list_todos, which defines fields id (primary key UUID), title (required single-line), is_completed (boolean), completed_at (optional timestamp when completed), created_at (creation time), and updated_at (last modification time). The operation modifies only user-editable fields: title and isCompleted. Any change sets updated_at to the current time. If the completion state changes to completed, completed_at is recorded; if reverted to active, completed_at is cleared.\n\nSecurity and ownership: every todo_list_todos record is owned by a member via todo_list_todo_member_id referencing todo_list_todo_members.id. The provider enforces that the caller may only update items owned by the current context. In single-user local mode, an implicit owner is used. Clients do not pass ownership identifiers; authorization and scoping are handled server-side against todo_list_todo_member_id.\n\nValidation and business rules: updates must honor title validation rules (trimmed, single-line, length 1–100). Completion toggles are idempotent: applying the same state repeatedly results in no additional changes beyond ensuring the state is correct. The created_at field remains immutable. The API returns the updated entity with mapped DTO fields (id, title, isCompleted, createdAt, updatedAt). If the identifier does not correspond to an item within the caller’s scope, the service returns a neutral not-available outcome (commonly represented as 404 in transport-level semantics). Invalid inputs produce validation errors.\n\nRelated operations and error handling: this operation is typically paired with create and list/detail retrieval in client flows. Validation failures should be communicated with field-specific messages for title where applicable. Transient errors should preserve durability guarantees so that clients can safely retry without unintended duplication.","summary":"Update a Todo in the todo_list_todos table by identifier","parameters":[{"name":"todoId","description":"Identifier of the Todo to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the Todo: title and/or isCompleted","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"The updated Todo entity reflecting the applied changes","typeName":"ITodoListTodo"},"authorizationRole":"todoMember","name":"update","prerequisites":[{"endpoint":{"path":"/todoList/todos","method":"post"},"description":"A Todo must be created to obtain a valid todoId before it can be updated. This ensures the target record exists within the caller's ownership scope."}],"path":"/todoList/todos/{todoId}","method":"put"},{"specification":"Permanently remove a single Todo record from the todo_list_todos table by its identifier. This endpoint enforces ownership by ensuring the authenticated actor (todo_list_todo_members) is the owner of the targeted Todo via the foreign key todo_list_todo_member_id. The operation performs a hard delete because the todo_list_todos table does not contain a logical deletion column; records are removed entirely. Related relationships: owner relation to todo_list_todo_members (onDelete: Cascade applies when a member is removed, not within this operation).","description":"Delete a specific Todo item identified by todoId from the todo_list_todos table. The Prisma schema comment describes this table as the core entity for the minimal personal task list with a required title, a simple completion state (is_completed), an optional completed_at timestamp recorded when transitioning to completed, and lifecycle timestamps created_at and updated_at. Each record belongs to exactly one member through todo_list_todo_member_id and an owner relation to todo_list_todo_members.\n\nSecurity and permissions: Only the owning member is allowed to delete the Todo. The provider must verify that the authenticated todo_list_todo_members.id matches the todo_list_todos.todo_list_todo_member_id for the target record. If the record is not owned by the requester or is not visible, the service should return a privacy-preserving not-available outcome without leaking existence details.\n\nDatabase relationships: The owner relation connects todo_list_todos to todo_list_todo_members with onDelete: Cascade. This operation deletes a single todo_list_todos record by id and does not modify the owner record. The table lacks a deletion marker column; therefore, the deletion here is complete and records are removed from storage.\n\nValidation and business rules: The path parameter todoId must be a valid UUID string. The operation should be idempotent from a client perspective: if the record is already absent or inaccessible to the requester, return a neutral not-available result. When the deletion succeeds, subsequent list and detail requests must no longer return the item.\n\nRelated operations and behavior: Typical client flows include creating Todos, listing per owner with newest-first ordering, updating titles, and toggling completion. After a successful delete, client UIs should refresh lists to reflect removal. Error handling should provide clear messages for validation errors (malformed identifiers) and neutral handling for not-available cases.","summary":"Delete a Todo (todo_list_todos) by ID with ownership enforcement and hard deletion","parameters":[{"name":"todoId","description":"Unique identifier of the Todo to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["todoMember"],"name":"erase","path":"/todoList/todoMember/todos/{todoId}","method":"delete","authorizationRole":"todoMember","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/todos","method":"post"},"description":"A Todo must exist (have a valid todoId) before it can be permanently deleted. This guarantees the deletion targets an existing record owned by the caller."}]},{"specification":"Retrieve a single member actor from the todo_list_todo_members table by its identifier. This endpoint is designed for administrative or policy-bound retrieval and must not expose secret fields such as password_hash. The table contains member authentication attributes (email, password_hash) and lifecycle timestamps (created_at, updated_at) plus an optional deleted_at timestamp used to indicate deactivation at the record level.","description":"Fetch a todo_list_todo_members record identified by todoMemberId. According to the Prisma schema description, this table represents authenticated members who own personal Todos. Fields include id (UUID primary key), email (unique identifier), password_hash (stored securely and never returned in responses), created_at, updated_at, and a nullable deleted_at column for deactivation. The relationship to business data is explicit: members own multiple todo_list_todos through the owner relation.\n\nSecurity and permissions: Because member records contain sensitive account information, access should be restricted to policy-authorized actors, typically administrative users. The response must exclude credential secrets such as password_hash and should present only safe account metadata (e.g., id, email, created_at, updated_at, and deactivation status if represented). If the target record is not available within the requester’s authorized scope, return a neutral not-available outcome.\n\nDatabase relationships and consistency: The todo_list_todo_members table has a one-to-many relationship to todo_list_todos. Deleting a member cascades to their Todos (onDelete: Cascade), but this operation is read-only and returns only the member view. If deleted_at is populated per business policy, implementations may treat the member as deactivated for operations, while still allowing administrative reads.\n\nValidation and error handling: The path parameter todoMemberId must be a valid UUID string. If the identifier does not correspond to any accessible record, return a not-available result. Validation errors (malformed UUIDs) should be conveyed clearly. The response DTO must intentionally omit password_hash and any similarly sensitive fields.","summary":"Retrieve a Todo member (todo_list_todo_members) by ID for administrative use","parameters":[{"name":"todoMemberId","description":"Unique identifier of the Todo member to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Member account information excluding secrets like password_hash","typeName":"ITodoListTodoMember"},"authorizationRoles":["systemAdmin"],"name":"at","path":"/todoList/systemAdmin/todoMembers/{todoMemberId}","method":"get","authorizationRole":"systemAdmin","authorizationType":null,"prerequisites":[]},{"specification":"Retrieve a single System Admin actor by its UUID from the todo_list_system_admins Prisma table. This read-only operation exposes administrative actor metadata for service-level oversight while ensuring sensitive authentication fields remain protected. The endpoint returns an ITodoListSystemAdmin DTO that omits password_hash and is intended for administrative consoles and policy tooling. It accepts a path-scoped systemAdminId parameter (UUID) and responds with 200 on success.","authorizationType":null,"description":"This operation fetches one administrative actor from the todo_list_system_admins table by its primary key id. The Prisma schema defines todo_list_system_admins with fields: id (UUID primary key), email (unique), password_hash (never exposed by APIs), created_at, updated_at, and a deleted_at timestamp used to mark records as deactivated. Emails should be normalized to lowercase at the application layer per the schema comment. This endpoint is intended for administrative consoles and system policy tools; it does not expose secrets.\n\nOnly actors with the systemAdmin role are allowed to access this resource. Clients must treat the returned data as administrative metadata and must not display or store confidential values. The provider implementation SHOULD exclude records where deleted_at is set and return a privacy-safe \"not available\" outcome instead of revealing whether a deactivated entry exists.\n\nThe operation is tightly coupled to the todo_list_system_admins entity and returns a single resource. It validates the systemAdminId format as a UUID and resolves exactly one record. If no accessible record exists, implementations should surface a 404 Not Found without leaking whether the identifier was ever valid. This endpoint pairs naturally with administrative listing/search endpoints (not defined here) and with account management flows that require verifying an admin’s presence.\n\nInput validation includes ensuring the path parameter is a valid UUID. Error handling should return clear outcomes: 400 for invalid UUID format, and 404 when the record is unavailable in the requester’s scope. No request body is used, and the response body conforms to the ITodoListSystemAdmin schema, which intentionally excludes password_hash while including non-sensitive fields such as id, email, created_at, and updated_at.","summary":"Get one System Admin (todo_list_system_admins) by ID","parameters":[{"name":"systemAdminId","description":"Unique identifier (UUID) of the target system admin","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrative actor details excluding sensitive authentication fields","typeName":"ITodoListSystemAdmin"},"authorizationRole":"systemAdmin","name":"at","prerequisites":[],"path":"/todoList/systemAdmin/systemAdmins/{systemAdminId}","method":"get"},{"specification":"Retrieve a single Guest Visitor actor by its UUID from the todo_list_guest_visitors Prisma table. This read-only endpoint supports administrative observability and policy analysis of unauthenticated visitor entries. It returns an ITodoListGuestVisitor DTO containing non-sensitive metadata and is restricted to system administrators.","authorizationType":null,"description":"This operation returns one guest visitor actor from the todo_list_guest_visitors table by its primary key id. The Prisma schema defines todo_list_guest_visitors with id (UUID primary key), created_at, updated_at, and a deleted_at timestamp used to mark records as deactivated. These entries are standalone within the Actors domain and are not linked to business entities in this minimal scope, per the schema comment. They are useful for optional auditing or policy analysis and are typically not user-managed directly.\n\nAccess is restricted to the systemAdmin role. Implementations should treat these records as administrative metadata and avoid exposing any information beyond what is necessary for oversight. When deleted_at is present, providers should treat the record as not available and return a neutral 404 response rather than disclosing details.\n\nThe endpoint validates the guestVisitorId path parameter as a UUID and returns a single ITodoListGuestVisitor resource when available. If the identifier is malformed, respond with 400. If the record does not exist in the accessible scope, respond with 404. No request body is required. This read operation complements higher-level administrative reporting (not defined here) and does not interact with user-managed Todo content.","summary":"Get one Guest Visitor (todo_list_guest_visitors) by ID","parameters":[{"name":"guestVisitorId","description":"Unique identifier (UUID) of the target guest visitor","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Guest visitor actor metadata for administrative oversight","typeName":"ITodoListGuestVisitor"},"authorizationRole":"systemAdmin","name":"at","prerequisites":[],"path":"/todoList/systemAdmin/guestVisitors/{guestVisitorId}","method":"get"}],"components":{"authorization":[{"name":"guestVisitor","description":"Unauthenticated visitor with access only to public information and entry points for registration or login. Cannot view, create, or manage any Todo items.","kind":"guest"},{"name":"todoMember","description":"Authenticated user who manages only their own Todo items. Can create, read, update, mark complete, unmark, and delete personal Todos; can manage personal account settings.","kind":"member"},{"name":"systemAdmin","description":"Administrative user with oversight capabilities to manage system-wide settings and moderate abusive behavior if necessary. No requirement to access members’ private Todos unless required for policy or abuse handling.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListGuestVisitor":{"type":"object","x-autobe-prisma-schema":"todo_list_guest_visitors","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the guest visitor actor as defined in Prisma model todo_list_guest_visitors.id.\n\nThis UUID uniquely identifies an anonymous actor used before full authentication. Records are standalone within the Actors domain and are not linked to Todos in this minimal scope."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp mapped from Prisma column todo_list_guest_visitors.created_at.\n\nSet when the guest visitor record is created during the join flow and used for administrative observability."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp mapped from Prisma column todo_list_guest_visitors.updated_at.\n\nUpdated when the guest record is modified according to policy, enabling operational insight into lifecycle changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Logical removal/deactivation timestamp mapped from Prisma column todo_list_guest_visitors.deleted_at where null means active.\n\nWhen non-null, the guest record is considered deactivated. Registration should create a new record rather than reviving logically removed entries, per the Prisma schema comments and business policy."}},"required":["id","created_at","updated_at"],"description":"Guest visitor actor DTO corresponding to Prisma table todo_list_guest_visitors.\n\nThis representation contains only non-sensitive metadata suitable for administrative oversight and policy analysis. It does not include authentication credentials because none exist on this table by design; guests operate solely with temporary tokens."},"ITodoListGuestVisitor.ICreate":{"type":"object","properties":{},"required":[],"description":"Create DTO for Guest Visitor registration.\n\nThis request body is intentionally minimal and may be an empty object per policy. No identity or credential fields are accepted for guest creation."},"ITodoListGuestVisitor.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated guest actor.\n\nThis corresponds to todo_list_guest_visitors.id and is included to clearly identify the authorized subject."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp mapped from Prisma column todo_list_guest_visitors.created_at.\n\nSet when the guest visitor record is created during the join flow and used for administrative observability."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp mapped from Prisma column todo_list_guest_visitors.updated_at.\n\nUpdated when the guest record is modified according to policy, enabling operational insight into lifecycle changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Logical removal/deactivation timestamp mapped from Prisma column todo_list_guest_visitors.deleted_at where null means active.\n\nWhen non-null, the guest record is considered deactivated. Registration should create a new record rather than reviving logically removed entries, per the Prisma schema comments and business policy."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"guestVisitor":{"$ref":"#/components/schemas/ITodoListGuestVisitor","description":"Minimal actor identity for the authorized guest visitor.\n\nThis embeds non-sensitive metadata from the underlying Prisma record (todo_list_guest_visitors) suitable for client-side context."}},"required":["id","created_at","updated_at","token"],"description":"Authorization response for a Guest Visitor.\n\nReturned after successful guest registration or token refresh operations. Contains the actor id, a standard authorization token payload, and the minimal guest actor identity derived from the Prisma model todo_list_guest_visitors. Passwords or credential fields are never present because the guest model contains none."},"ITodoListGuestVisitor.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token to be exchanged for a new access token (and typically a rotated refresh token).\n\nThis value originates from a prior successful authorization for the guest role. The token must pass integrity and expiry checks during processing."},"client":{"$ref":"#/components/schemas/IClientContext","description":"Optional client context used by policy for telemetry, rate-limiting hints, or device-bound validation.\n\nThis object does not persist to the database and is not tied to any Prisma model."}},"required":["refreshToken"],"description":"Guest token refresh request body for exchanging a valid refresh token for new credentials.\n\nThis DTO is used by the guest refresh endpoint (/auth/guestVisitor/refresh). It does not map directly to a Prisma model table. The related Prisma entity for identity is Actors.todo_list_guest_visitors (id, created_at, updated_at, deleted_at), but no properties from that table are provided by clients in this request.\n\nSecurity note: Do not include secrets beyond the refresh token. No password or email fields exist for guest actors, and none must be accepted here."},"ITodoListTodoMemberJoin.ICreate":{"type":"object","x-autobe-prisma-schema":"todo_list_todo_members","properties":{"email":{"type":"string","format":"email","description":"Member’s login identifier (email) to persist in the todo_list_todo_members.email column.\n\nPer Prisma schema comments, this value should be normalized to lowercase at the application layer. A unique constraint exists (@@unique([email]))."},"password":{"type":"string","description":"Plaintext password submitted by the client for credential creation.\n\nBack-end MUST hash this value (e.g., Argon2id/Bcrypt) before storage into the password_hash column of the todo_list_todo_members table. Plaintext MUST NEVER be persisted."}},"required":["email","password"],"description":"Registration (join) payload for creating a new todoMember account.\n\nDirectly associated with the Prisma model Actors.todo_list_todo_members, which defines id (UUID PK), email (unique), password_hash (stored hash only), created_at, updated_at, and deleted_at (nullable soft-deactivation marker). This DTO intentionally excludes system-managed fields (id, created_at, updated_at, deleted_at) and excludes password_hash, accepting only the plain password for server-side hashing."},"IClientContext":{"type":"object","properties":{"deviceId":{"type":"string","description":"Optional client-provided device identifier used for telemetry or policy decisions.\n\nNot persisted in any Prisma model; strictly contextual."},"userAgent":{"type":"string","description":"User agent string presented by the client environment.\n\nUsed for diagnostics, analytics, or policy checks; not persisted in the Actors or Todos tables."},"ip":{"type":"string","description":"Client IP address observed or supplied for policy checks. May be IPv4 or IPv6 in textual form.\n\nThis field is contextual only and is not persisted in Prisma models."}},"required":[],"description":"Non-persistent contextual information supplied by clients to aid telemetry, rate limiting, or device-bound policies.\n\nThis system type has no direct Prisma correspondence and must never be stored as-is in any of the provided tables."},"ITodoListTodoMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member.\n\nMaps to `todo_list_todo_members.id` (UUID primary key) in the Actors domain of the Prisma schema. This value identifies the owner of personal Todos."},"email":{"type":"string","format":"email","description":"Member’s login identifier.\n\nPrisma column: `email`. Uniquely indexed (`@@unique([email])`) in the database. Applications should normalize to lowercase before persistence."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this member record.\n\nPrisma column: `created_at`. Set when the row is inserted and never modified thereafter."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this member record.\n\nPrisma column: `updated_at`. Refreshed when mutable account attributes change (e.g., credential rotation)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion (deactivation) timestamp.\n\nPrisma column: `deleted_at`. Null means the account is active; a set value indicates a deactivated account. Clients should treat non-null values as deactivated state."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","created_at","updated_at","token"],"description":"Authorization response for a Todo member (todoMember role) containing the authenticated identity and JWT tokens.\n\nThis DTO is returned by member authentication workflows such as join/registration, login, and token refresh. The `id` corresponds to `todo_list_todo_members.id` defined in the Prisma schema, while `token` contains runtime-issued credentials used by clients to authenticate subsequent requests."},"ITodoListTodoMemberLogin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Member’s login identifier.\n\nCorresponds to `todo_list_todo_members.email` (unique) as described in the Prisma schema comments. The application normalizes emails to lowercase before lookup to honor case-insensitive policies."},"password":{"type":"string","minLength":8,"description":"Plaintext password submitted for verification during login.\n\nBack-end validates this against `todo_list_todo_members.password_hash` using a strong algorithm (e.g., Argon2id/Bcrypt). The plaintext password is never stored."}},"required":["email","password"],"description":"Login request payload for existing Todo members.\n\nThis DTO carries credentials for authentication against the Actors table `todo_list_todo_members`. The service normalizes `email`, verifies `password` against `password_hash`, ensures the account is active (`deleted_at` is null), and issues an `ITodoListTodoMember.IAuthorized` response on success."},"ITodoListTodoMemberRefresh.ICreate":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token to renew a todoMember session.\n\nThis value represents the client's refresh token, typically a JWT in compact JWS form, issued during a prior authentication flow. It is presented to obtain a new access token without re-supplying primary credentials.\n\nSecurity note: Treat this token as a secret. Do not log or expose it inadvertently."}},"required":["refresh_token"],"description":"Request body for renewing JWTs of a member (todoMember) account.\n\nThis DTO is used by the token refresh operation associated with the Prisma model `todo_list_todo_members`, which contains identity and credential columns such as `id`, `email`, `password_hash`, `created_at`, `updated_at`, and `deleted_at`. The refresh workflow validates this token, rechecks that the corresponding member record remains active (`deleted_at` is null), and then issues new tokens.\n\nImportant: This schema does not map 1:1 to a Prisma table and therefore does not include database fields like `password_hash`. It only carries the refresh token required to perform the renewal."},"ITodoListTodoMemberPassword.IUpdate":{"type":"object","properties":{"current_password":{"type":"string","minLength":8,"format":"password","description":"The member's current plaintext password for verification.\n\nProvided by the authenticated user to prove possession of existing credentials. The backend MUST verify this value against the stored `password_hash` in `todo_list_todo_members` using a constant-time comparison. This value is never persisted in plaintext."},"new_password":{"type":"string","minLength":8,"format":"password","description":"The desired new plaintext password to replace the existing secret.\n\nOn success, the backend MUST hash this value (e.g., Argon2id/Bcrypt) and store the resulting hash in `todo_list_todo_members.password_hash`. The plaintext value is never stored. Enforce policy such as minimum length and strength according to business requirements."}},"required":[],"description":"Password rotation request for a todoMember account.\n\nThis DTO drives a security operation against the Prisma model `todo_list_todo_members` which defines `password_hash` and lifecycle timestamps. The operation verifies `current_password`, computes a new strong hash from `new_password`, updates `password_hash`, and updates `updated_at`. It must only be available to active accounts where `deleted_at` is null.\n\nNote: This request schema does not directly correspond to database columns; it intentionally excludes fields like `password_hash`, `email`, and timestamps. It accepts only the minimal values necessary to perform secure password rotation."},"ITodoListTodoMember.ISecurity":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the security operation (password change, deactivate, restore) succeeded."},"at":{"type":"string","format":"date-time","description":"Timestamp when the security operation was completed."},"message":{"type":"string","description":"Optional human-readable message describing the outcome."}},"required":["success","at"],"description":"Security event confirmation payload used for member security operations.\n\nProvides a clear outcome, completion timestamp, and optional message."},"ITodoListTodoMemberDeactivate.ICreate":{"type":"object","properties":{"reason":{"type":"string","maxLength":500,"description":"Optional human-readable reason for deactivation.\n\nUsed for audit or policy workflows; not persisted in the Prisma model unless implemented separately."}},"required":[],"description":"Account deactivation request for Todo Member.\n\nThis payload is optional and does not map directly to a Prisma model."},"ITodoListTodoMemberRestore.ICreate":{"type":"object","properties":{"reason":{"type":"string","maxLength":500,"description":"Optional human-readable reason for restoration.\n\nUsed for audit or policy workflows; not persisted in the Prisma model unless implemented separately."}},"required":[],"description":"Account restoration request for Todo Member.\n\nThis payload is optional and does not map directly to a Prisma model."},"ITodoListSystemAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator’s login identifier.\n\nMaps to email column in Prisma model todo_list_system_admins. The column is unique (see @@unique([email])). Per schema comments, the application should normalize emails to lowercase before persistence to ensure consistent uniqueness semantics. Accept only valid email address formats at the API boundary."},"password":{"type":"string","description":"Plaintext password supplied by the client for account creation.\n\nCRITICAL: Do not store this value directly. The service must derive a strong password_hash (e.g., Argon2id/Bcrypt) and persist only the hash into the Prisma model todo_list_system_admins.password_hash. The underlying table does not contain a plaintext password field.\n\nSecurity guidance: Enforce server-side password policy (length/complexity, breach checks as policy dictates). Avoid echoing this value in logs or responses."}},"required":["email","password"],"description":"Create DTO for registering a System Administrator.\n\nThis request body is used to create a new record in the Prisma table todo_list_system_admins, which contains id (UUID PK), email (unique), password_hash (hashed credential), created_at, updated_at, and deleted_at (nullable deactivation marker). On successful creation, the provider sets created_at and updated_at, stores a strong password_hash derived from the provided password, and leaves deleted_at as null (active).\n\nImportant mapping notes:\n- This DTO includes email and a plaintext password only. The server transforms password into password_hash before persistence.\n- System-managed fields (id, created_at, updated_at, deleted_at) are NOT accepted in this request and are assigned by the system.\n- Because this DTO does not directly mirror database column names (password vs password_hash), x-autobe-prisma-schema is intentionally omitted for validation consistency."},"ITodoListSystemAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the authenticated system administrator.\n\nThis maps to the primary key column `id` of the Prisma model `todo_list_system_admins`. The value identifies the administrative actor for the current authorized session."},"email":{"type":"string","format":"email","description":"Administrator’s unique login identifier stored in `todo_list_system_admins.email`. The application layer should normalize to lowercase before persistence and lookup, consistent with Prisma schema comments."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the administrator account, sourced from `todo_list_system_admins.created_at`.\n\nSet once at insert time for auditing and chronology in administrative tools."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp from `todo_list_system_admins.updated_at`.\n\nUpdated when mutable attributes change (for example, password rotation). Useful for operational visibility and auditing."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"admin":{"$ref":"#/components/schemas/ITodoListSystemAdmin","description":"Optional administrative actor profile containing non-sensitive account metadata (excluding secrets like `password_hash`).\n\nWhen present, this embeds a safe view of the administrator consistent with the Prisma model while omitting soft-deletion internals for security."}},"required":["id","email","created_at","updated_at","token"],"description":"Authorization response for a System Administrator session.\n\nReturned after successful authentication operations (join, login, or refresh). It encapsulates the authorized identity (`id`) and the JWT token information required for subsequent calls.\n\nThis DTO intentionally excludes credential secrets such as `password_hash`. It includes non-sensitive account metadata (`email`, `created_at`, `updated_at`) derived from the Prisma model `todo_list_system_admins`. The optional `admin` property references a safe administrator profile type if available in the schema set."},"ITodoListSystemAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator’s login identifier.\n\nMaps to the `email` column in Prisma model `todo_list_system_admins`. Email should be normalized to lowercase at the application layer before lookup, as recommended by the schema comments."},"password":{"type":"string","description":"Plaintext password submitted for verification.\n\nBackends MUST perform constant-time verification against the stored `password_hash` in `todo_list_system_admins`. The plaintext value is never persisted; only strong password hashes (e.g., Argon2id/Bcrypt) are stored per schema guidance."}},"required":["email","password"],"description":"Login request payload for authenticating a System Administrator.\n\nThis DTO carries the minimal credentials required to authenticate against `todo_list_system_admins`: the unique `email` and a plaintext `password` that is verified against the stored `password_hash`.\n\nSecurity rules: do not include any other fields; never accept or transmit `password_hash`. Normalize email to lowercase prior to lookup and ensure neutral error handling to prevent enumeration."},"ITodoListSystemAdmin":{"type":"object","x-autobe-prisma-schema":"todo_list_system_admins","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the administrative actor as defined in Prisma model todo_list_system_admins.id.\n\nThis UUID uniquely identifies a system administrator record used for service-level oversight and policy management."},"email":{"type":"string","format":"email","description":"Unique login identifier stored in todo_list_system_admins.email per Prisma schema comments. Application policy recommends normalizing to lowercase before persistence and enforcing uniqueness via @@unique([email]).\n\nThis field is safe to expose to administrative clients but must never be confused with credential secrets. It is immutable for most flows except dedicated account-management operations."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp mapped from Prisma column todo_list_system_admins.created_at.\n\nSet once when the administrator record is created. Used for auditing and chronology in administrative tools."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp mapped from Prisma column todo_list_system_admins.updated_at.\n\nUpdated whenever mutable attributes of the administrator record change (e.g., password rotation). Useful for operational visibility and auditing."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deactivation timestamp taken from Prisma column todo_list_system_admins.deleted_at where null means active.\n\nWhen non-null, the account is considered deactivated, and authentication flows (login/refresh) must be denied by policy. Administrative read endpoints may treat deactivated entries as not available depending on authorization policy."}},"required":["id","email","created_at","updated_at"],"description":"Administrative actor DTO corresponding to Prisma table todo_list_system_admins.\n\nThis representation intentionally excludes sensitive credential secrets such as password_hash as mandated by security guidance in the Prisma schema comments. It surfaces only non-sensitive metadata fields necessary for administrative consoles and policy tooling. Timestamps reflect the lifecycle of the administrator record, and deleted_at models soft deactivation state."},"ITodoListSystemAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token used to renew a system administrator's authenticated session.\n\nThis string contains the JWT refresh token previously issued during admin authentication. It is presented to the refresh endpoint to obtain a new access token (and typically a rotated refresh token). The token must be validated for integrity, expiration, rotation policy, and association with an active administrator account.\n\nSecurity note: Treat this value as a credential. Do not log or expose it in plaintext."}},"required":["refresh_token"],"description":"Request body for renewing JWT credentials for a system administrator.\n\nAlthough the identity is anchored to the Prisma model \"todo_list_system_admins\" (id, email, password_hash, created_at, updated_at, deleted_at), this DTO itself is not a direct database mapping and therefore omits any Prisma linkage metadata. It only carries the refresh token needed to validate and issue new credentials.\n\nImplementation must verify that the referenced admin account is active (deleted_at is null) before issuing new tokens. No password verification occurs in this flow; only token validation and account state checks apply."},"IETodoListTodoStatusFilter":{"oneOf":[{"const":"all","description":"Status filter for listing Todos owned by the authenticated member.\n\n- all: No constraint on completion; return all owned Todos.\n- active: Only Todos where is_completed = false.\n- completed: Only Todos where is_completed = true.\n\nThis enumeration aligns with the Prisma model \"todo_list_todos\" and its boolean column is_completed used by the service to filter results."},{"const":"active","description":"Status filter for listing Todos owned by the authenticated member.\n\n- all: No constraint on completion; return all owned Todos.\n- active: Only Todos where is_completed = false.\n- completed: Only Todos where is_completed = true.\n\nThis enumeration aligns with the Prisma model \"todo_list_todos\" and its boolean column is_completed used by the service to filter results."},{"const":"completed","description":"Status filter for listing Todos owned by the authenticated member.\n\n- all: No constraint on completion; return all owned Todos.\n- active: Only Todos where is_completed = false.\n- completed: Only Todos where is_completed = true.\n\nThis enumeration aligns with the Prisma model \"todo_list_todos\" and its boolean column is_completed used by the service to filter results."}],"description":"Status filter for listing Todos owned by the authenticated member.\n\n- all: No constraint on completion; return all owned Todos.\n- active: Only Todos where is_completed = false.\n- completed: Only Todos where is_completed = true.\n\nThis enumeration aligns with the Prisma model \"todo_list_todos\" and its boolean column is_completed used by the service to filter results."},"ITodoListTodo.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1,"description":"1-based page index to retrieve. Values less than 1 are invalid."},{"type":"null"}],"description":"Requested page number for paginated list results.\n\nIf omitted or null, the service applies its default. Page numbering starts at 1 per business rules."},"limit":{"oneOf":[{"type":"integer","minimum":10,"maximum":50,"description":"Maximum items per page. Allowed inclusive range: 10–50."},{"type":"null"}],"description":"Page size limit to apply to the listing operation.\n\nBusiness policy allows values between 10 and 50 items inclusive, with a default of 20 when not specified or when null is provided. Out-of-range values are rejected or coerced by policy."},"status":{"$ref":"#/components/schemas/IETodoListTodoStatusFilter","description":"Completion-state filter for the listing operation.\n\nDefaults to \"all\" when not provided. The service translates this value into a predicate over the Prisma column is_completed of table todo_list_todos."}},"required":[],"description":"Search, filter, and pagination parameters for listing member-owned Todos.\n\nThis DTO configures retrieval from Prisma model \"todo_list_todos\" (id, title, is_completed, completed_at?, created_at, updated_at), scoped strictly to the calling member by the relation todo_list_todo_member_id → todo_list_todo_members.id.\n\nSecurity: Do not include actor identifiers such as user_id/owner_id. Ownership is enforced by authentication context. Default ordering by created_at descending is applied server-side in this minimal interface."},"ITodoListTodo":{"type":"object","x-autobe-prisma-schema":"todo_list_todos","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the Todo.\n\nMaps to Prisma column todo_list_todos.id (UUID primary key). The value is generated by the system and uniquely identifies a single Todo record."},"title":{"type":"string","minLength":1,"maxLength":100,"pattern":"^[^\\r\\n]+$","description":"Required single-line title of the Todo.\n\nCorresponds to Prisma column todo_list_todos.title. Business rules require trimming of leading/trailing whitespace, single-line content (no newline characters), and a length between 1 and 100 characters after trimming."},"isCompleted":{"type":"boolean","description":"Completion state of the Todo.\n\nBacked by Prisma column todo_list_todos.is_completed. Defaults to false on creation; toggled explicitly by the user through update operations."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of the Todo.\n\nBacked by Prisma column todo_list_todos.created_at. Set once when the record is created and never modified thereafter."},"updatedAt":{"type":"string","format":"date-time","description":"Last modification timestamp of the Todo.\n\nBacked by Prisma column todo_list_todos.updated_at. Updated whenever mutable fields change (title or completion state)."},"completedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp recorded when the Todo transitions to completed; cleared when uncompleted.\n\nBacked by Prisma column todo_list_todos.completed_at (nullable). Present when isCompleted is true; null otherwise."}},"required":["id","title","isCompleted","createdAt","updatedAt"],"description":"Full Todo entity used in responses.\n\nThis DTO represents the Prisma model Todos.todo_list_todos, which defines a minimal personal task with a required title, a boolean completion state, an optional completion timestamp, and lifecycle timestamps (created and last updated). Ownership is enforced at the service layer through the foreign key todo_list_todo_member_id and is not exposed here.\n\nSecurity note: This response deliberately omits internal or ownership-identifying fields (e.g., todo_list_todo_member_id) and contains no secrets. Timestamp fields are included because they exist in the Prisma schema for this table."},"ITodoListTodo.ICreate":{"type":"object","x-autobe-prisma-schema":"todo_list_todos","properties":{"title":{"type":"string","minLength":1,"maxLength":100,"pattern":"^[^\\r\\n]+$","description":"Required single-line title for the new Todo.\n\nMaps to Prisma column todo_list_todos.title. Business validation trims leading/trailing whitespace, requires a length of 1–100 characters after trimming, and disallows newline characters."}},"required":["title"],"description":"Request body for creating a Todo.\n\nThis DTO maps to the Prisma model Todos.todo_list_todos but accepts only the minimal business field required for creation: title. System-managed fields (id, is_completed, completed_at, created_at, updated_at) and ownership (todo_list_todo_member_id) are populated by the service using authenticated context and application policy. On creation, is_completed defaults to false and timestamps are set by the system."},"ITodoListTodo.IUpdate":{"type":"object","x-autobe-prisma-schema":"todo_list_todos","properties":{"title":{"type":"string","minLength":1,"maxLength":100,"description":"New title for the Todo (maps to todo_list_todos.title).\n\nMust satisfy trimming and length rules; single-line content only."},"is_completed":{"type":"boolean","description":"Toggle completion state (maps to todo_list_todos.is_completed).\n\nWhen state changes, the server sets or clears completed_at and updates updated_at accordingly."}},"required":[],"description":"Update DTO for Todo records.\n\nAll fields are optional (Partial pattern). Identity, ownership, and system-managed timestamps are excluded from the request and managed by the server."},"ITodoListTodoMember":{"type":"object","x-autobe-prisma-schema":"todo_list_todo_members","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member.\n\nPrisma column: `id` (UUID primary key)."},"email":{"type":"string","format":"email","description":"Member’s login identifier.\n\nPrisma column: `email`. Uniquely indexed (`@@unique([email])`) in the database. Applications should normalize to lowercase before persistence."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this member record.\n\nPrisma column: `created_at`. Set when the row is inserted and never modified thereafter."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this member record.\n\nPrisma column: `updated_at`. Refreshed when mutable account attributes change (e.g., credential rotation)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion (deactivation) timestamp.\n\nPrisma column: `deleted_at`. Null means the account is active; a set value indicates a deactivated account. Clients should treat non-null values as deactivated state."}},"required":["id","email","created_at","updated_at"],"description":"Member actor DTO derived from the Prisma model `todo_list_todo_members` (Actors namespace).\n\nThis response type exposes non-sensitive account metadata for administrative or policy-bound views and intentionally omits secrets like `password_hash`. It includes identifiers and lifecycle timestamps to reflect account state, including the optional deactivation marker `deleted_at`.\n\nSecurity: Never include `password_hash` or any credential material in responses. Ownership to business entities is represented in the database by the relation from `todo_list_todos.todo_list_todo_member_id` to this member’s `id`, but relation collections are not included in this DTO."},"ITodoListTodo.ISummary":{"type":"object","x-autobe-prisma-schema":"todo_list_todos","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the Todo record.\n\nPrisma mapping: todo_list_todos.id (String @db.Uuid). This is the primary key defined in the Prisma schema comment as the record's unique identity. It is generated by the system and is immutable once created."},"title":{"type":"string","description":"Short, single-line task title suitable for list rendering.\n\nPrisma mapping: todo_list_todos.title. The Prisma schema comment specifies this as a required single-line field. Business validation commonly trims leading/trailing whitespace and enforces a length policy (e.g., 1–100 characters) and disallows newline characters. This Summary DTO presents the exact stored title without multi-line content, consistent with the minimal Todo scope."},"isCompleted":{"type":"boolean","description":"Boolean completion state of the Todo optimized for list display.\n\nPrisma mapping: todo_list_todos.is_completed. Defaults to false on creation and flips only through explicit user action. In this API-facing DTO, the property name is presented in camelCase (isCompleted) while referring to the underlying snake_case column (is_completed) in the Prisma model."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of the Todo, used for default newest-first ordering in lists.\n\nPrisma mapping: todo_list_todos.created_at (DateTime @db.Timestamptz). Set once when the record is created and never modified thereafter. For human-facing contexts the system presents times in the user's timezone; where unspecified, Asia/Seoul is the default per business policy."}},"required":["id","title","isCompleted","createdAt"],"description":"Summary view of a Todo optimized for list endpoints and compact representations.\n\nThis DTO corresponds to the Prisma model Todos.todo_list_todos, which defines the core personal task entity with required title, a simple completion state, and lifecycle timestamps. In accordance with the Prisma schema comments, the summary excludes heavy relations and large text, and includes only fields essential for list rendering and sorting.\n\nField name mappings follow API-friendly camelCase while referencing the original Prisma columns: isCompleted maps to is_completed and createdAt maps to created_at. These are straightforward aliases of the underlying fields, not additional database columns."}}}}