import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getTodoListSystemAdminGuestVisitorsGuestVisitorId } from "../../../../providers/getTodoListSystemAdminGuestVisitorsGuestVisitorId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

import { ITodoListGuestVisitor } from "../../../../api/structures/ITodoListGuestVisitor";

@Controller("/todoList/systemAdmin/guestVisitors/:guestVisitorId")
export class TodolistSystemadminGuestvisitorsController {
  /**
   * Get one Guest Visitor (todo_list_guest_visitors) by ID.
   *
   * This operation returns one guest visitor actor from the
   * todo_list_guest_visitors table by its primary key id. The Prisma schema
   * defines todo_list_guest_visitors with id (UUID primary key), created_at,
   * updated_at, and a deleted_at timestamp used to mark records as deactivated.
   * These entries are standalone within the Actors domain and are not linked to
   * business entities in this minimal scope, per the schema comment. They are
   * useful for optional auditing or policy analysis and are typically not
   * user-managed directly.
   *
   * Access is restricted to the systemAdmin role. Implementations should treat
   * these records as administrative metadata and avoid exposing any information
   * beyond what is necessary for oversight. When deleted_at is present,
   * providers should treat the record as not available and return a neutral 404
   * response rather than disclosing details.
   *
   * The endpoint validates the guestVisitorId path parameter as a UUID and
   * returns a single ITodoListGuestVisitor resource when available. If the
   * identifier is malformed, respond with 400. If the record does not exist in
   * the accessible scope, respond with 404. No request body is required. This
   * read operation complements higher-level administrative reporting (not
   * defined here) and does not interact with user-managed Todo content.
   *
   * @param connection
   * @param guestVisitorId Unique identifier (UUID) of the target guest visitor
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("guestVisitorId")
    guestVisitorId: string & tags.Format<"uuid">,
  ): Promise<ITodoListGuestVisitor> {
    try {
      return await getTodoListSystemAdminGuestVisitorsGuestVisitorId({
        systemAdmin,
        guestVisitorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
