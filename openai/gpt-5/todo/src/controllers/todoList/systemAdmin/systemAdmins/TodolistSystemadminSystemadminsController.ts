import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getTodoListSystemAdminSystemAdminsSystemAdminId } from "../../../../providers/getTodoListSystemAdminSystemAdminsSystemAdminId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

import { ITodoListSystemAdmin } from "../../../../api/structures/ITodoListSystemAdmin";

@Controller("/todoList/systemAdmin/systemAdmins/:systemAdminId")
export class TodolistSystemadminSystemadminsController {
  /**
   * Get one System Admin (todo_list_system_admins) by ID.
   *
   * This operation fetches one administrative actor from the
   * todo_list_system_admins table by its primary key id. The Prisma schema
   * defines todo_list_system_admins with fields: id (UUID primary key), email
   * (unique), password_hash (never exposed by APIs), created_at, updated_at,
   * and a deleted_at timestamp used to mark records as deactivated. Emails
   * should be normalized to lowercase at the application layer per the schema
   * comment. This endpoint is intended for administrative consoles and system
   * policy tools; it does not expose secrets.
   *
   * Only actors with the systemAdmin role are allowed to access this resource.
   * Clients must treat the returned data as administrative metadata and must
   * not display or store confidential values. The provider implementation
   * SHOULD exclude records where deleted_at is set and return a privacy-safe
   * "not available" outcome instead of revealing whether a deactivated entry
   * exists.
   *
   * The operation is tightly coupled to the todo_list_system_admins entity and
   * returns a single resource. It validates the systemAdminId format as a UUID
   * and resolves exactly one record. If no accessible record exists,
   * implementations should surface a 404 Not Found without leaking whether the
   * identifier was ever valid. This endpoint pairs naturally with
   * administrative listing/search endpoints (not defined here) and with account
   * management flows that require verifying an admin’s presence.
   *
   * Input validation includes ensuring the path parameter is a valid UUID.
   * Error handling should return clear outcomes: 400 for invalid UUID format,
   * and 404 when the record is unavailable in the requester’s scope. No request
   * body is used, and the response body conforms to the ITodoListSystemAdmin
   * schema, which intentionally excludes password_hash while including
   * non-sensitive fields such as id, email, created_at, and updated_at.
   *
   * @param connection
   * @param systemAdminId Unique identifier (UUID) of the target system admin
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
  ): Promise<ITodoListSystemAdmin> {
    try {
      return await getTodoListSystemAdminSystemAdminsSystemAdminId({
        systemAdmin,
        systemAdminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
