import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestVisitorJoin } from "../../../providers/postAuthGuestVisitorJoin";
import { postAuthGuestVisitorRefresh } from "../../../providers/postAuthGuestVisitorRefresh";

import { ITodoListGuestVisitor } from "../../../api/structures/ITodoListGuestVisitor";

@Controller("/auth/guestVisitor")
export class AuthGuestvisitorController {
  /**
   * Register a guest actor (todo_list_guest_visitors) and issue initial JWT
   * tokens.
   *
   * This endpoint registers a temporary guest actor for the Minimal Todo List
   * service and issues JWT tokens appropriate for anonymous usage prior to
   * becoming a member. It directly relates to the Prisma model
   * Actors.todo_list_guest_visitors, which defines anonymous visitor records
   * with id as the UUID primary key, created_at for creation time, updated_at
   * for last modification time, and a nullable deleted_at column used to mark a
   * record as logically removed or deactivated (null means active).
   *
   * Because todo_list_guest_visitors stores no authentication credentials, this
   * operation must not accept or persist passwords or emails. The application
   * should only create a new actor entry and set created_at and updated_at
   * based on the current time policy. The lack of credential fields in this
   * model aligns with the business requirement that guests are unauthenticated
   * and operate with temporary tokens only.
   *
   * The registration integrates with the authorization layer by returning an
   * authorization payload (ITodoListGuestVisitor.IAuthorized) that contains
   * tokens and the minimal actor identity. Tokens enable subsequent public
   * interactions that require a guest actor context without granting access to
   * member-only Todo operations. The underlying database entity for this
   * operation is limited to todo_list_guest_visitors and has no relations to
   * the Todos domain.
   *
   * Security-wise, the endpoint is public but must enforce rate limiting and
   * basic abuse protections at the application layer. Since deleted_at exists
   * to indicate logical removal, the provider should avoid returning or
   * reactivating logically removed records during registration; instead, it
   * should create a new guest actor record to keep state clean and
   * predictable.
   *
   * Related operations include /auth/guestVisitor/refresh for renewing tokens.
   * Typical errors include validation failures on malformed request payloads
   * (though the body is minimal), and system conditions that prevent record
   * creation. No ownership checks apply because guests do not own Todos and
   * this endpoint is open to unauthenticated callers.
   *
   * @param connection
   * @param body Optional client context for creating a guest actor; may be an
   *   empty object per policy.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITodoListGuestVisitor.ICreate,
  ): Promise<ITodoListGuestVisitor.IAuthorized> {
    try {
      return await postAuthGuestVisitorJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh guest tokens for an active guest actor (todo_list_guest_visitors).
   *
   * This endpoint renews guest authorization by exchanging a valid refresh
   * token for a fresh access token and, where applicable, a rotated refresh
   * token. It references the Prisma model Actors.todo_list_guest_visitors for
   * identity, which includes id (UUID primary key), created_at (creation time),
   * updated_at (last modification), and a nullable deleted_at column used to
   * indicate that a record has been logically removed (null means active).
   *
   * The request body (ITodoListGuestVisitor.IRefresh) provides the refresh
   * token and minimal client context needed to perform validation. As
   * todo_list_guest_visitors has no credential fields, this flow relies
   * entirely on token verification logic and does not consult passwords or
   * email identifiers.
   *
   * Implementation should verify that the guest actor indicated by token claims
   * corresponds to an active record (deleted_at is null) and that token
   * integrity, expiration, and rotation policy checks pass. If validation
   * fails, the provider must return a safe error without exposing internal
   * state or indicating which aspect failed.
   *
   * This operation is part of the guest authentication workflow and complements
   * /auth/guestVisitor/join, which issues the initial tokens. It does not alter
   * business entities in the Todos domain and solely manages authorization
   * tokens for an existing guest actor.
   *
   * Typical errors include invalid or expired refresh tokens, actor state
   * indicating logical removal, and policy violations such as reuse of a
   * revoked token. Successful responses return
   * ITodoListGuestVisitor.IAuthorized with the new tokens and any required
   * session metadata.
   *
   * @param connection
   * @param body Refresh token exchange request for guest actors.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITodoListGuestVisitor.IRefresh,
  ): Promise<ITodoListGuestVisitor.IAuthorized> {
    try {
      return await postAuthGuestVisitorRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
