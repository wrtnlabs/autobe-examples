import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthTodoMemberPassword } from "../../../../providers/putAuthTodoMemberPassword";
import { TodomemberAuth } from "../../../../decorators/TodomemberAuth";
import { TodomemberPayload } from "../../../../decorators/payload/TodomemberPayload";

import { ITodoListTodoMember } from "../../../../api/structures/ITodoListTodoMember";
import { ITodoListTodoMemberPassword } from "../../../../api/structures/ITodoListTodoMemberPassword";

@Controller("/auth/todoMember/password")
export class AuthTodomemberPasswordController {
  /**
   * Change password by updating password_hash in todo_list_todo_members.
   *
   * Purpose: Let an authenticated todoMember change their password. The member
   * is stored in `todo_list_todo_members` with columns `id`, `email` (unique),
   * `password_hash` (hashed), `created_at`, `updated_at`, and `deleted_at`. The
   * operation checks the provided current password against `password_hash`,
   * writes a new `password_hash` for the new password, and updates
   * `updated_at`. `email` is not modified; `created_at` remains unchanged.
   *
   * Implementation: Require the member to be authenticated (role todoMember).
   * Perform constant-time verification for the current password, compute a
   * strong hash for the new password, persist it to `password_hash`, and set
   * `updated_at` to now. If `deleted_at` is not null, deny the operation as the
   * account is deactivated.
   *
   * Role integration: This is a security maintenance action for the todoMember
   * role, ensuring continuity of secure access to personal Todo features linked
   * through ownership (`todo_list_todos.todo_list_todo_member_id`).
   *
   * Security: Enforce password policy, throttle repeated failures, and consider
   * rotating JWTs on success to mitigate token compromise risk. Do not reveal
   * whether verification failed due to the current password mismatch vs. other
   * reasons beyond a neutral message.
   *
   * Related operations: Use Login for credential-based entry, Refresh for
   * renewing tokens, and Deactivate/Restore to manage account activity via
   * `deleted_at`.
   *
   * @param connection
   * @param body Current and new password for password rotation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @TodomemberAuth()
    todoMember: TodomemberPayload,
    @TypedBody()
    body: ITodoListTodoMemberPassword.IUpdate,
  ): Promise<ITodoListTodoMember.ISecurity> {
    try {
      return await putAuthTodoMemberPassword({
        todoMember,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
