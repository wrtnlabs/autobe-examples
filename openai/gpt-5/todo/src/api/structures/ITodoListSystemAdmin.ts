import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrative actor DTO corresponding to Prisma table
 * todo_list_system_admins.
 *
 * This representation intentionally excludes sensitive credential secrets such
 * as password_hash as mandated by security guidance in the Prisma schema
 * comments. It surfaces only non-sensitive metadata fields necessary for
 * administrative consoles and policy tooling. Timestamps reflect the lifecycle
 * of the administrator record, and deleted_at models soft deactivation state.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListSystemAdmin = {
  /**
   * Primary key of the administrative actor as defined in Prisma model
   * todo_list_system_admins.id.
   *
   * This UUID uniquely identifies a system administrator record used for
   * service-level oversight and policy management.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique login identifier stored in todo_list_system_admins.email per
   * Prisma schema comments. Application policy recommends normalizing to
   * lowercase before persistence and enforcing uniqueness via
   * @@unique([email]).
   *
   * This field is safe to expose to administrative clients but must never be
   * confused with credential secrets. It is immutable for most flows except
   * dedicated account-management operations.
   */
  email: string & tags.Format<"email">;

  /**
   * Creation timestamp mapped from Prisma column
   * todo_list_system_admins.created_at.
   *
   * Set once when the administrator record is created. Used for auditing and
   * chronology in administrative tools.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last modification timestamp mapped from Prisma column
   * todo_list_system_admins.updated_at.
   *
   * Updated whenever mutable attributes of the administrator record change
   * (e.g., password rotation). Useful for operational visibility and
   * auditing.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deactivation timestamp taken from Prisma column
   * todo_list_system_admins.deleted_at where null means active.
   *
   * When non-null, the account is considered deactivated, and authentication
   * flows (login/refresh) must be denied by policy. Administrative read
   * endpoints may treat deactivated entries as not available depending on
   * authorization policy.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListSystemAdmin {
  /**
   * Create DTO for registering a System Administrator.
   *
   * This request body is used to create a new record in the Prisma table
   * todo_list_system_admins, which contains id (UUID PK), email (unique),
   * password_hash (hashed credential), created_at, updated_at, and deleted_at
   * (nullable deactivation marker). On successful creation, the provider sets
   * created_at and updated_at, stores a strong password_hash derived from the
   * provided password, and leaves deleted_at as null (active).
   *
   * Important mapping notes:
   *
   * - This DTO includes email and a plaintext password only. The server
   *   transforms password into password_hash before persistence.
   * - System-managed fields (id, created_at, updated_at, deleted_at) are NOT
   *   accepted in this request and are assigned by the system.
   * - Because this DTO does not directly mirror database column names (password
   *   vs password_hash), x-autobe-prisma-schema is intentionally omitted for
   *   validation consistency.
   */
  export type ICreate = {
    /**
     * Administrator’s login identifier.
     *
     * Maps to email column in Prisma model todo_list_system_admins. The
     * column is unique (see @@unique([email])). Per schema comments, the
     * application should normalize emails to lowercase before persistence
     * to ensure consistent uniqueness semantics. Accept only valid email
     * address formats at the API boundary.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password supplied by the client for account creation.
     *
     * CRITICAL: Do not store this value directly. The service must derive a
     * strong password_hash (e.g., Argon2id/Bcrypt) and persist only the
     * hash into the Prisma model todo_list_system_admins.password_hash. The
     * underlying table does not contain a plaintext password field.
     *
     * Security guidance: Enforce server-side password policy
     * (length/complexity, breach checks as policy dictates). Avoid echoing
     * this value in logs or responses.
     */
    password: string;
  };

  /**
   * Authorization response for a System Administrator session.
   *
   * Returned after successful authentication operations (join, login, or
   * refresh). It encapsulates the authorized identity (`id`) and the JWT
   * token information required for subsequent calls.
   *
   * This DTO intentionally excludes credential secrets such as
   * `password_hash`. It includes non-sensitive account metadata (`email`,
   * `created_at`, `updated_at`) derived from the Prisma model
   * `todo_list_system_admins`. The optional `admin` property references a
   * safe administrator profile type if available in the schema set.
   */
  export type IAuthorized = {
    /**
     * Unique identifier (UUID) of the authenticated system administrator.
     *
     * This maps to the primary key column `id` of the Prisma model
     * `todo_list_system_admins`. The value identifies the administrative
     * actor for the current authorized session.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Administrator’s unique login identifier stored in
     * `todo_list_system_admins.email`. The application layer should
     * normalize to lowercase before persistence and lookup, consistent with
     * Prisma schema comments.
     */
    email: string & tags.Format<"email">;

    /**
     * Creation timestamp of the administrator account, sourced from
     * `todo_list_system_admins.created_at`.
     *
     * Set once at insert time for auditing and chronology in administrative
     * tools.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last modification timestamp from
     * `todo_list_system_admins.updated_at`.
     *
     * Updated when mutable attributes change (for example, password
     * rotation). Useful for operational visibility and auditing.
     */
    updated_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Optional administrative actor profile containing non-sensitive
     * account metadata (excluding secrets like `password_hash`).
     *
     * When present, this embeds a safe view of the administrator consistent
     * with the Prisma model while omitting soft-deletion internals for
     * security.
     */
    admin?: ITodoListSystemAdmin | undefined;
  };

  /**
   * Login request payload for authenticating a System Administrator.
   *
   * This DTO carries the minimal credentials required to authenticate against
   * `todo_list_system_admins`: the unique `email` and a plaintext `password`
   * that is verified against the stored `password_hash`.
   *
   * Security rules: do not include any other fields; never accept or transmit
   * `password_hash`. Normalize email to lowercase prior to lookup and ensure
   * neutral error handling to prevent enumeration.
   */
  export type ILogin = {
    /**
     * Administrator’s login identifier.
     *
     * Maps to the `email` column in Prisma model `todo_list_system_admins`.
     * Email should be normalized to lowercase at the application layer
     * before lookup, as recommended by the schema comments.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password submitted for verification.
     *
     * Backends MUST perform constant-time verification against the stored
     * `password_hash` in `todo_list_system_admins`. The plaintext value is
     * never persisted; only strong password hashes (e.g., Argon2id/Bcrypt)
     * are stored per schema guidance.
     */
    password: string;
  };

  /**
   * Request body for renewing JWT credentials for a system administrator.
   *
   * Although the identity is anchored to the Prisma model
   * "todo_list_system_admins" (id, email, password_hash, created_at,
   * updated_at, deleted_at), this DTO itself is not a direct database mapping
   * and therefore omits any Prisma linkage metadata. It only carries the
   * refresh token needed to validate and issue new credentials.
   *
   * Implementation must verify that the referenced admin account is active
   * (deleted_at is null) before issuing new tokens. No password verification
   * occurs in this flow; only token validation and account state checks
   * apply.
   */
  export type IRefresh = {
    /**
     * Refresh token used to renew a system administrator's authenticated
     * session.
     *
     * This string contains the JWT refresh token previously issued during
     * admin authentication. It is presented to the refresh endpoint to
     * obtain a new access token (and typically a rotated refresh token).
     * The token must be validated for integrity, expiration, rotation
     * policy, and association with an active administrator account.
     *
     * Security note: Treat this value as a credential. Do not log or expose
     * it in plaintext.
     */
    refresh_token: string;
  };
}
