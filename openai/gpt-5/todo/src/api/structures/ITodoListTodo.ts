import { tags } from "typia";

import { IETodoListTodoStatusFilter } from "./IETodoListTodoStatusFilter";

/**
 * Full Todo entity used in responses.
 *
 * This DTO represents the Prisma model Todos.todo_list_todos, which defines a
 * minimal personal task with a required title, a boolean completion state, an
 * optional completion timestamp, and lifecycle timestamps (created and last
 * updated). Ownership is enforced at the service layer through the foreign key
 * todo_list_todo_member_id and is not exposed here.
 *
 * Security note: This response deliberately omits internal or
 * ownership-identifying fields (e.g., todo_list_todo_member_id) and contains no
 * secrets. Timestamp fields are included because they exist in the Prisma
 * schema for this table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodo = {
  /**
   * Primary identifier of the Todo.
   *
   * Maps to Prisma column todo_list_todos.id (UUID primary key). The value is
   * generated by the system and uniquely identifies a single Todo record.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Required single-line title of the Todo.
   *
   * Corresponds to Prisma column todo_list_todos.title. Business rules
   * require trimming of leading/trailing whitespace, single-line content (no
   * newline characters), and a length between 1 and 100 characters after
   * trimming.
   */
  title: string &
    tags.MinLength<1> &
    tags.MaxLength<100> &
    tags.Pattern<"^[^\\r\\n]+$">;

  /**
   * Completion state of the Todo.
   *
   * Backed by Prisma column todo_list_todos.is_completed. Defaults to false
   * on creation; toggled explicitly by the user through update operations.
   */
  isCompleted: boolean;

  /**
   * Creation timestamp of the Todo.
   *
   * Backed by Prisma column todo_list_todos.created_at. Set once when the
   * record is created and never modified thereafter.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last modification timestamp of the Todo.
   *
   * Backed by Prisma column todo_list_todos.updated_at. Updated whenever
   * mutable fields change (title or completion state).
   */
  updatedAt: string & tags.Format<"date-time">;

  /**
   * Timestamp recorded when the Todo transitions to completed; cleared when
   * uncompleted.
   *
   * Backed by Prisma column todo_list_todos.completed_at (nullable). Present
   * when isCompleted is true; null otherwise.
   */
  completedAt?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListTodo {
  /**
   * Search, filter, and pagination parameters for listing member-owned Todos.
   *
   * This DTO configures retrieval from Prisma model "todo_list_todos" (id,
   * title, is_completed, completed_at?, created_at, updated_at), scoped
   * strictly to the calling member by the relation todo_list_todo_member_id →
   * todo_list_todo_members.id.
   *
   * Security: Do not include actor identifiers such as user_id/owner_id.
   * Ownership is enforced by authentication context. Default ordering by
   * created_at descending is applied server-side in this minimal interface.
   */
  export type IRequest = {
    /**
     * Requested page number for paginated list results.
     *
     * If omitted or null, the service applies its default. Page numbering
     * starts at 1 per business rules.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Page size limit to apply to the listing operation.
     *
     * Business policy allows values between 10 and 50 items inclusive, with
     * a default of 20 when not specified or when null is provided.
     * Out-of-range values are rejected or coerced by policy.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<10> & tags.Maximum<50>)
      | null
      | undefined;

    /**
     * Completion-state filter for the listing operation.
     *
     * Defaults to "all" when not provided. The service translates this
     * value into a predicate over the Prisma column is_completed of table
     * todo_list_todos.
     */
    status?: IETodoListTodoStatusFilter | undefined;
  };

  /**
   * Request body for creating a Todo.
   *
   * This DTO maps to the Prisma model Todos.todo_list_todos but accepts only
   * the minimal business field required for creation: title. System-managed
   * fields (id, is_completed, completed_at, created_at, updated_at) and
   * ownership (todo_list_todo_member_id) are populated by the service using
   * authenticated context and application policy. On creation, is_completed
   * defaults to false and timestamps are set by the system.
   */
  export type ICreate = {
    /**
     * Required single-line title for the new Todo.
     *
     * Maps to Prisma column todo_list_todos.title. Business validation
     * trims leading/trailing whitespace, requires a length of 1–100
     * characters after trimming, and disallows newline characters.
     */
    title: string &
      tags.MinLength<1> &
      tags.MaxLength<100> &
      tags.Pattern<"^[^\\r\\n]+$">;
  };

  /**
   * Update DTO for Todo records.
   *
   * All fields are optional (Partial pattern). Identity, ownership, and
   * system-managed timestamps are excluded from the request and managed by
   * the server.
   */
  export type IUpdate = {
    /**
     * New title for the Todo (maps to todo_list_todos.title).
     *
     * Must satisfy trimming and length rules; single-line content only.
     */
    title?: (string & tags.MinLength<1> & tags.MaxLength<100>) | undefined;

    /**
     * Toggle completion state (maps to todo_list_todos.is_completed).
     *
     * When state changes, the server sets or clears completed_at and
     * updates updated_at accordingly.
     */
    is_completed?: boolean | undefined;
  };

  /**
   * Summary view of a Todo optimized for list endpoints and compact
   * representations.
   *
   * This DTO corresponds to the Prisma model Todos.todo_list_todos, which
   * defines the core personal task entity with required title, a simple
   * completion state, and lifecycle timestamps. In accordance with the Prisma
   * schema comments, the summary excludes heavy relations and large text, and
   * includes only fields essential for list rendering and sorting.
   *
   * Field name mappings follow API-friendly camelCase while referencing the
   * original Prisma columns: isCompleted maps to is_completed and createdAt
   * maps to created_at. These are straightforward aliases of the underlying
   * fields, not additional database columns.
   */
  export type ISummary = {
    /**
     * Unique identifier of the Todo record.
     *
     * Prisma mapping: todo_list_todos.id (String @db.Uuid). This is the
     * primary key defined in the Prisma schema comment as the record's
     * unique identity. It is generated by the system and is immutable once
     * created.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Short, single-line task title suitable for list rendering.
     *
     * Prisma mapping: todo_list_todos.title. The Prisma schema comment
     * specifies this as a required single-line field. Business validation
     * commonly trims leading/trailing whitespace and enforces a length
     * policy (e.g., 1–100 characters) and disallows newline characters.
     * This Summary DTO presents the exact stored title without multi-line
     * content, consistent with the minimal Todo scope.
     */
    title: string;

    /**
     * Boolean completion state of the Todo optimized for list display.
     *
     * Prisma mapping: todo_list_todos.is_completed. Defaults to false on
     * creation and flips only through explicit user action. In this
     * API-facing DTO, the property name is presented in camelCase
     * (isCompleted) while referring to the underlying snake_case column
     * (is_completed) in the Prisma model.
     */
    isCompleted: boolean;

    /**
     * Creation timestamp of the Todo, used for default newest-first
     * ordering in lists.
     *
     * Prisma mapping: todo_list_todos.created_at (DateTime
     * @db.Timestamptz). Set once when the record is created and never
     * modified thereafter. For human-facing contexts the system presents
     * times in the user's timezone; where unspecified, Asia/Seoul is the
     * default per business policy.
     */
    createdAt: string & tags.Format<"date-time">;
  };
}
