import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Member actor DTO derived from the Prisma model `todo_list_todo_members`
 * (Actors namespace).
 *
 * This response type exposes non-sensitive account metadata for administrative
 * or policy-bound views and intentionally omits secrets like `password_hash`.
 * It includes identifiers and lifecycle timestamps to reflect account state,
 * including the optional deactivation marker `deleted_at`.
 *
 * Security: Never include `password_hash` or any credential material in
 * responses. Ownership to business entities is represented in the database by
 * the relation from `todo_list_todos.todo_list_todo_member_id` to this member’s
 * `id`, but relation collections are not included in this DTO.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodoMember = {
  /**
   * Unique identifier of the member.
   *
   * Prisma column: `id` (UUID primary key).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Member’s login identifier.
   *
   * Prisma column: `email`. Uniquely indexed (`@@unique([email])`) in the
   * database. Applications should normalize to lowercase before persistence.
   */
  email: string & tags.Format<"email">;

  /**
   * Creation timestamp for this member record.
   *
   * Prisma column: `created_at`. Set when the row is inserted and never
   * modified thereafter.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for this member record.
   *
   * Prisma column: `updated_at`. Refreshed when mutable account attributes
   * change (e.g., credential rotation).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion (deactivation) timestamp.
   *
   * Prisma column: `deleted_at`. Null means the account is active; a set
   * value indicates a deactivated account. Clients should treat non-null
   * values as deactivated state.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListTodoMember {
  /**
   * Authorization response for a Todo member (todoMember role) containing the
   * authenticated identity and JWT tokens.
   *
   * This DTO is returned by member authentication workflows such as
   * join/registration, login, and token refresh. The `id` corresponds to
   * `todo_list_todo_members.id` defined in the Prisma schema, while `token`
   * contains runtime-issued credentials used by clients to authenticate
   * subsequent requests.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated member.
     *
     * Maps to `todo_list_todo_members.id` (UUID primary key) in the Actors
     * domain of the Prisma schema. This value identifies the owner of
     * personal Todos.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Member’s login identifier.
     *
     * Prisma column: `email`. Uniquely indexed (`@@unique([email])`) in the
     * database. Applications should normalize to lowercase before
     * persistence.
     */
    email: string & tags.Format<"email">;

    /**
     * Creation timestamp for this member record.
     *
     * Prisma column: `created_at`. Set when the row is inserted and never
     * modified thereafter.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp for this member record.
     *
     * Prisma column: `updated_at`. Refreshed when mutable account
     * attributes change (e.g., credential rotation).
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion (deactivation) timestamp.
     *
     * Prisma column: `deleted_at`. Null means the account is active; a set
     * value indicates a deactivated account. Clients should treat non-null
     * values as deactivated state.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Security event confirmation payload used for member security operations.
   *
   * Provides a clear outcome, completion timestamp, and optional message.
   */
  export type ISecurity = {
    /**
     * Indicates whether the security operation (password change,
     * deactivate, restore) succeeded.
     */
    success: boolean;

    /** Timestamp when the security operation was completed. */
    at: string & tags.Format<"date-time">;

    /** Optional human-readable message describing the outcome. */
    message?: string | undefined;
  };
}
