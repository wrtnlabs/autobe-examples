import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodo } from "../../../structures/ITodoListTodo";

/**
 * Create a Todo item in the todo_list_todos table.
 *
 * This endpoint creates a new Todo for the current user using the underlying
 * Prisma model todo_list_todos. According to the model description, each Todo
 * has a required single-line title, a completion state recorded in is_completed
 * (default false on creation), an optional completed_at timestamp used only
 * when completed, and lifecycle timestamps created_at and updated_at. The
 * operation sets defaults and timestamps in alignment with these rules and
 * persists the new record.
 *
 * Security and ownership considerations: the database column
 * todo_list_todo_member_id on todo_list_todos enforces strict per-owner scoping
 * via a foreign key to todo_list_todo_members.id. While this API surface
 * accepts only the minimal business field (title), the service determines the
 * owner and assigns todo_list_todo_member_id internally. In deployments with
 * authentication, the owner is the authenticated member; in single-user local
 * mode, an implicit member context is used. Clients do not provide ownership
 * identifiers directly in this minimal design.
 *
 * Validation and business rules: the title must be trimmed and validated per
 * business policy (e.g., length 1–100 characters and single-line with no
 * newline characters) consistent with the schema comments indicating title is a
 * required single-line task title. On success, the record is stored with
 * is_completed=false, created_at set once, and updated_at set to the current
 * time. The response maps Prisma fields to the DTO shape: id (string), title
 * (string), isCompleted (boolean), createdAt (string date-time), updatedAt
 * (string date-time).
 *
 * Related operations: clients typically follow creation with list retrieval or
 * detail retrieval to present the new item among the newest-first ordering,
 * though list retrieval is not defined in this minimal operation set. Error
 * handling includes rejecting invalid titles (validation failures) and
 * reporting temporary processing issues with appropriate messages. The
 * operation returns 201 Created semantics with the created entity in the
 * response body.
 *
 * @param props.connection
 * @param props.body Todo creation payload containing only the required title
 *   field
 * @path /todoList/todos
 * @accessor api.functional.todoList.todos.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Todo creation payload containing only the required title field */
    body: ITodoListTodo.ICreate;
  };
  export type Body = ITodoListTodo.ICreate;
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "POST",
    path: "/todoList/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/todos";
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a Todo in the todo_list_todos table by identifier.
 *
 * This endpoint updates a single Todo using the underlying Prisma model
 * todo_list_todos, which defines fields id (primary key UUID), title (required
 * single-line), is_completed (boolean), completed_at (optional timestamp when
 * completed), created_at (creation time), and updated_at (last modification
 * time). The operation modifies only user-editable fields: title and
 * isCompleted. Any change sets updated_at to the current time. If the
 * completion state changes to completed, completed_at is recorded; if reverted
 * to active, completed_at is cleared.
 *
 * Security and ownership: every todo_list_todos record is owned by a member via
 * todo_list_todo_member_id referencing todo_list_todo_members.id. The provider
 * enforces that the caller may only update items owned by the current context.
 * In single-user local mode, an implicit owner is used. Clients do not pass
 * ownership identifiers; authorization and scoping are handled server-side
 * against todo_list_todo_member_id.
 *
 * Validation and business rules: updates must honor title validation rules
 * (trimmed, single-line, length 1–100). Completion toggles are idempotent:
 * applying the same state repeatedly results in no additional changes beyond
 * ensuring the state is correct. The created_at field remains immutable. The
 * API returns the updated entity with mapped DTO fields (id, title,
 * isCompleted, createdAt, updatedAt). If the identifier does not correspond to
 * an item within the caller’s scope, the service returns a neutral
 * not-available outcome (commonly represented as 404 in transport-level
 * semantics). Invalid inputs produce validation errors.
 *
 * Related operations and error handling: this operation is typically paired
 * with create and list/detail retrieval in client flows. Validation failures
 * should be communicated with field-specific messages for title where
 * applicable. Transient errors should preserve durability guarantees so that
 * clients can safely retry without unintended duplication.
 *
 * @param props.connection
 * @param props.todoId Identifier of the Todo to update
 * @param props.body Fields to update on the Todo: title and/or isCompleted
 * @path /todoList/todos/:todoId
 * @accessor api.functional.todoList.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the Todo to update */
    todoId: string & tags.Format<"uuid">;

    /** Fields to update on the Todo: title and/or isCompleted */
    body: ITodoListTodo.IUpdate;
  };
  export type Body = ITodoListTodo.IUpdate;
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/todos/:todoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
