import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListSystemAdmin } from "../../../../structures/ITodoListSystemAdmin";

/**
 * Get one System Admin (todo_list_system_admins) by ID.
 *
 * This operation fetches one administrative actor from the
 * todo_list_system_admins table by its primary key id. The Prisma schema
 * defines todo_list_system_admins with fields: id (UUID primary key), email
 * (unique), password_hash (never exposed by APIs), created_at, updated_at, and
 * a deleted_at timestamp used to mark records as deactivated. Emails should be
 * normalized to lowercase at the application layer per the schema comment. This
 * endpoint is intended for administrative consoles and system policy tools; it
 * does not expose secrets.
 *
 * Only actors with the systemAdmin role are allowed to access this resource.
 * Clients must treat the returned data as administrative metadata and must not
 * display or store confidential values. The provider implementation SHOULD
 * exclude records where deleted_at is set and return a privacy-safe "not
 * available" outcome instead of revealing whether a deactivated entry exists.
 *
 * The operation is tightly coupled to the todo_list_system_admins entity and
 * returns a single resource. It validates the systemAdminId format as a UUID
 * and resolves exactly one record. If no accessible record exists,
 * implementations should surface a 404 Not Found without leaking whether the
 * identifier was ever valid. This endpoint pairs naturally with administrative
 * listing/search endpoints (not defined here) and with account management flows
 * that require verifying an admin’s presence.
 *
 * Input validation includes ensuring the path parameter is a valid UUID. Error
 * handling should return clear outcomes: 400 for invalid UUID format, and 404
 * when the record is unavailable in the requester’s scope. No request body is
 * used, and the response body conforms to the ITodoListSystemAdmin schema,
 * which intentionally excludes password_hash while including non-sensitive
 * fields such as id, email, created_at, and updated_at.
 *
 * @param props.connection
 * @param props.systemAdminId Unique identifier (UUID) of the target system
 *   admin
 * @path /todoList/systemAdmin/systemAdmins/:systemAdminId
 * @accessor api.functional.todoList.systemAdmin.systemAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target system admin */
    systemAdminId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListSystemAdmin;

  export const METADATA = {
    method: "GET",
    path: "/todoList/systemAdmin/systemAdmins/:systemAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/systemAdmin/systemAdmins/${encodeURIComponent(props.systemAdminId ?? "null")}`;
  export const random = (): ITodoListSystemAdmin =>
    typia.random<ITodoListSystemAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemAdminId")(() => typia.assert(props.systemAdminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
