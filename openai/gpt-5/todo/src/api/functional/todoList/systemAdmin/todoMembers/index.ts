import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodoMember } from "../../../../structures/ITodoListTodoMember";

/**
 * Retrieve a Todo member (todo_list_todo_members) by ID for administrative use.
 *
 * Fetch a todo_list_todo_members record identified by todoMemberId. According
 * to the Prisma schema description, this table represents authenticated members
 * who own personal Todos. Fields include id (UUID primary key), email (unique
 * identifier), password_hash (stored securely and never returned in responses),
 * created_at, updated_at, and a nullable deleted_at column for deactivation.
 * The relationship to business data is explicit: members own multiple
 * todo_list_todos through the owner relation.
 *
 * Security and permissions: Because member records contain sensitive account
 * information, access should be restricted to policy-authorized actors,
 * typically administrative users. The response must exclude credential secrets
 * such as password_hash and should present only safe account metadata (e.g.,
 * id, email, created_at, updated_at, and deactivation status if represented).
 * If the target record is not available within the requesterâ€™s authorized
 * scope, return a neutral not-available outcome.
 *
 * Database relationships and consistency: The todo_list_todo_members table has
 * a one-to-many relationship to todo_list_todos. Deleting a member cascades to
 * their Todos (onDelete: Cascade), but this operation is read-only and returns
 * only the member view. If deleted_at is populated per business policy,
 * implementations may treat the member as deactivated for operations, while
 * still allowing administrative reads.
 *
 * Validation and error handling: The path parameter todoMemberId must be a
 * valid UUID string. If the identifier does not correspond to any accessible
 * record, return a not-available result. Validation errors (malformed UUIDs)
 * should be conveyed clearly. The response DTO must intentionally omit
 * password_hash and any similarly sensitive fields.
 *
 * @param props.connection
 * @param props.todoMemberId Unique identifier of the Todo member to retrieve
 * @path /todoList/systemAdmin/todoMembers/:todoMemberId
 * @accessor api.functional.todoList.systemAdmin.todoMembers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the Todo member to retrieve */
    todoMemberId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTodoMember;

  export const METADATA = {
    method: "GET",
    path: "/todoList/systemAdmin/todoMembers/:todoMemberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/systemAdmin/todoMembers/${encodeURIComponent(props.todoMemberId ?? "null")}`;
  export const random = (): ITodoListTodoMember =>
    typia.random<ITodoListTodoMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoMemberId")(() => typia.assert(props.todoMemberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
