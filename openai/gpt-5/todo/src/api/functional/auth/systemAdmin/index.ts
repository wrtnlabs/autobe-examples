import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListSystemAdmin } from "../../../structures/ITodoListSystemAdmin";

/**
 * Register a new administrator in Prisma table todo_list_system_admins and
 * issue JWT authorization.
 *
 * This endpoint registers a new administrative user by inserting a record into
 * the Prisma model todo_list_system_admins. The core fields relevant to
 * registration are email for unique identity and password_hash for credential
 * storage. At creation time, created_at and updated_at must be set, and
 * deleted_at must remain null to represent an active administrator. The primary
 * key id is a UUID generated by the service layer.
 *
 * Implementation uses the table’s @@unique([email]) constraint to prevent
 * duplicates. The service must normalize email to lowercase prior to validation
 * and persistence, and it must derive password_hash using a strong algorithm
 * such as Argon2id or Bcrypt; plaintext passwords are never stored. On
 * successful creation, the system issues JWT credentials and returns an
 * authorization payload instead of raw database fields. The request body
 * carries the minimal inputs necessary to produce the new admin record (email,
 * password) which are transformed into email and password_hash in persistence.
 *
 * This operation is specific to the systemAdmin role and establishes an account
 * able to administer service-level settings. It does not grant routine access
 * to private member Todos; such access is out of scope and would be separately
 * policy-gated. The returned authorization DTO reflects the authenticated
 * identity and token set for a systemAdmin.
 *
 * Security considerations include enforcing the unique email constraint and
 * rejecting attempts to register an email that already exists in
 * todo_list_system_admins. The service must ensure password hashing is applied
 * before storing to password_hash and should avoid timing leakage in error
 * responses. Records with a non-null deleted_at are deactivated and must not be
 * used to establish new sessions.
 *
 * Related operations include the systemAdmin login for credential-based
 * authentication and the token refresh operation for renewing access tokens.
 * Clients generally call join once for initial setup, then subsequently use
 * login and refresh as needed.
 *
 * @param props.connection
 * @param props.body Admin registration payload (e.g., email and password to be
 *   hashed).
 * @setHeader token.access Authorization
 *
 * @path /auth/systemAdmin/join
 * @accessor api.functional.auth.systemAdmin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Admin registration payload (e.g., email and password to be hashed). */
    body: ITodoListSystemAdmin.ICreate;
  };
  export type Body = ITodoListSystemAdmin.ICreate;
  export type Response = ITodoListSystemAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/join";
  export const random = (): ITodoListSystemAdmin.IAuthorized =>
    typia.random<ITodoListSystemAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a system administrator via todo_list_system_admins and issue JWT
 * authorization.
 *
 * This login operation authenticates a system administrator using the
 * todo_list_system_admins schema. The table provides email as the unique login
 * identifier and password_hash for credential verification. Only administrators
 * whose records have deleted_at set to null are eligible to authenticate,
 * ensuring deactivated accounts cannot log in. The service must not expose
 * whether an email exists; responses should remain neutral while still
 * enforcing correctness.
 *
 * Implementation must normalize the incoming email to lowercase before lookup
 * and compare the supplied password to password_hash using a strong password
 * verifier corresponding to the chosen hash algorithm. The operation must
 * update no persistent fields during a normal login, though a separate audit
 * system may record access events outside of this schema. Successful
 * authentication results in issuing JWTs and returning an authorization DTO for
 * the admin identity rather than the raw database entity.
 *
 * This endpoint is role-specific to systemAdmin, aligning with administrative
 * responsibilities without implying access to private member Todo content. The
 * login result embodies permissions appropriate to administrators in the
 * Minimal Todo List service.
 *
 * Security considerations include consistently rejecting invalid credentials,
 * preventing enumeration by using consistent timing/error messages, and denying
 * access when deleted_at is non-null. The underlying Prisma model’s
 * @@unique([email]) ensures a single record per email.
 *
 * Related operations include registration (join) to create the admin account
 * and refresh to renew tokens before expiry. Clients will typically call login
 * after a join or whenever a new session is needed.
 *
 * @param props.connection
 * @param props.body Admin login credentials to authenticate (email and
 *   password).
 * @setHeader token.access Authorization
 *
 * @path /auth/systemAdmin/login
 * @accessor api.functional.auth.systemAdmin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Admin login credentials to authenticate (email and password). */
    body: ITodoListSystemAdmin.ILogin;
  };
  export type Body = ITodoListSystemAdmin.ILogin;
  export type Response = ITodoListSystemAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/login";
  export const random = (): ITodoListSystemAdmin.IAuthorized =>
    typia.random<ITodoListSystemAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT credentials for a system administrator after validating the
 * refresh token and account state in todo_list_system_admins.
 *
 * This operation renews an existing authenticated session for a system
 * administrator without re-supplying primary credentials. While tokens are
 * typically validated independently of the database, the service should ensure
 * the referenced administrator still exists in todo_list_system_admins and
 * remains active (deleted_at is null) before issuing new tokens. This aligns
 * token lifecycle with the authoritative account state defined by the Prisma
 * model.
 *
 * Implementation accepts a refresh token in the request body, validates its
 * integrity and expiry, and, on success, generates a fresh access token (and,
 * if applicable, a rotated refresh token). No changes are made to fields in
 * todo_list_system_admins during a standard refresh; created_at and updated_at
 * remain as originally persisted. The id and email from the admin record inform
 * claims appropriate to the systemAdmin role.
 *
 * The endpoint’s role context is systemAdmin, ensuring that the renewed session
 * continues to carry administrator permissions relevant to service-level
 * actions and excluding routine access to private member Todo content.
 *
 * Security considerations include invalidating refresh tokens when deactivation
 * occurs (deleted_at non-null), enforcing token rotation policies where
 * applicable, and returning neutral errors on invalid or expired tokens.
 * Validation should be performed without leaking whether a given token
 * corresponds to a specific account.
 *
 * Related operations are login for initial credential-based authentication and
 * join for first-time account creation. Clients should prefer refresh prior to
 * token expiry to maintain a consistent administrative session.
 *
 * @param props.connection
 * @param props.body Refresh token payload used to renew administrator
 *   credentials.
 * @setHeader token.access Authorization
 *
 * @path /auth/systemAdmin/refresh
 * @accessor api.functional.auth.systemAdmin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token payload used to renew administrator credentials. */
    body: ITodoListSystemAdmin.IRefresh;
  };
  export type Body = ITodoListSystemAdmin.IRefresh;
  export type Response = ITodoListSystemAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/refresh";
  export const random = (): ITodoListSystemAdmin.IAuthorized =>
    typia.random<ITodoListSystemAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
