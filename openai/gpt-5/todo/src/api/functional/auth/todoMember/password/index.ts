import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodoMemberPassword } from "../../../../structures/ITodoListTodoMemberPassword";
import { ITodoListTodoMember } from "../../../../structures/ITodoListTodoMember";

/**
 * Change password by updating password_hash in todo_list_todo_members.
 *
 * Purpose: Let an authenticated todoMember change their password. The member is
 * stored in `todo_list_todo_members` with columns `id`, `email` (unique),
 * `password_hash` (hashed), `created_at`, `updated_at`, and `deleted_at`. The
 * operation checks the provided current password against `password_hash`,
 * writes a new `password_hash` for the new password, and updates `updated_at`.
 * `email` is not modified; `created_at` remains unchanged.
 *
 * Implementation: Require the member to be authenticated (role todoMember).
 * Perform constant-time verification for the current password, compute a strong
 * hash for the new password, persist it to `password_hash`, and set
 * `updated_at` to now. If `deleted_at` is not null, deny the operation as the
 * account is deactivated.
 *
 * Role integration: This is a security maintenance action for the todoMember
 * role, ensuring continuity of secure access to personal Todo features linked
 * through ownership (`todo_list_todos.todo_list_todo_member_id`).
 *
 * Security: Enforce password policy, throttle repeated failures, and consider
 * rotating JWTs on success to mitigate token compromise risk. Do not reveal
 * whether verification failed due to the current password mismatch vs. other
 * reasons beyond a neutral message.
 *
 * Related operations: Use Login for credential-based entry, Refresh for
 * renewing tokens, and Deactivate/Restore to manage account activity via
 * `deleted_at`.
 *
 * @param props.connection
 * @param props.body Current and new password for password rotation.
 * @path /auth/todoMember/password
 * @accessor api.functional.auth.todoMember.password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Current and new password for password rotation. */
    body: ITodoListTodoMemberPassword.IUpdate;
  };
  export type Body = ITodoListTodoMemberPassword.IUpdate;
  export type Response = ITodoListTodoMember.ISecurity;

  export const METADATA = {
    method: "PUT",
    path: "/auth/todoMember/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/todoMember/password";
  export const random = (): ITodoListTodoMember.ISecurity =>
    typia.random<ITodoListTodoMember.ISecurity>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
