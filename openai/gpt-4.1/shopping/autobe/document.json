{"operations":[{"specification":"Create a new customer account (registration) in the shoppingMall platform. The endpoint allows public clients to register as customers, requiring unique email, password (hashed), full name, phone, and initial address data. It enforces uniqueness on email at the schema level and triggers email verification flows and account initialization. The operation references Prisma schema fields: email (unique), password_hash, full_name, phone, status, email_verified, created_at, updated_at of shopping_mall_customers.\n\nThis API operation is essential for onboarding new customers to the platform, in accordance with requirements analysis documenting end-user registration and onboarding experiences. Upon successful registration, a JWT is issued and an email verification is initiated. The endpoint returns customer profile info plus authorization tokens using the DTO naming convention IShoppingMallCustomer.IAuthorized.\n\nSecurity: No authentication required for registration. Input is strictly validated and attempts to re-use existing emails are rejected.\n\nThis operation is always paired with login and refresh APIs for the customer role, but RESTfully separated. If the Prisma customer schema lacks fields required for direct onboarding, registration is blocked at the model level and explicit error messaging provided. Throttling and spam mitigation are required but handled at the infrastructure/proxy level rather than in the schema.\n\nRelated operations: /auth/customer/login and /auth/customer/refresh for full authentication loop. Error responses are aligned with schema uniqueness and verification triggers.","authorizationType":"join","description":"This endpoint supports new customer registration for the shoppingMall platform. It creates a record in the shopping_mall_customers table, requiring unique email, password (hashed), full name, and phone. The implementation uses Prisma's model for shopping_mall_customers, referencing fields such as email (unique, string), password_hash (string), full_name (string), phone (string), status (string), email_verified (boolean), created_at (datetime), and updated_at (datetime).\n\nCustomers are not considered verified until completing the external email verification workflow. Registration attempts are rejected if the email already exists, and status is initially set to a pending state until verification. Soft-deletion semantics use the deleted_at field, preventing re-registration after account removal unless handled with explicit logic (verifying deleted_at is null).\n\nThe endpoint is public; no authentication is required for registration. Upon success, the system issues a JWT and customer profile DTO using IShoppingMallCustomer.IAuthorized, and triggers subsequent flows for login/verification.\n\nSecurity is enforced at both API and DB schema levels. Throttling, spam protection, and infrastructure-level input filtering are outside direct scope but required in production. Related operations: login and refresh for full authentication lifecycle. Account verification is triggered as a necessary step before granting full access to platform features.\n\nRelated operation references: /auth/customer/login, /auth/customer/refresh.","summary":"Register new customer account (shopping_mall_customers) with JWT issuance.","parameters":[],"requestBody":{"description":"New customer registration payload.","typeName":"IShoppingMallCustomer.IJoin"},"responseBody":{"description":"Authorized customer info and tokens after registration.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/customer/join","method":"post"},{"specification":"Authenticate a customer (login) in the shoppingMall platform based on registered email and password. The endpoint verifies credentials against shopping_mall_customers, ensures the status is active and email is verified, and blocks access for inactive or unverified accounts. Password check is performed against password_hash (bcrypt). Successful authentication issues new JWT tokens; failed attempts are logged and throttled by infrastructure or authentication middleware.\n\nThis endpoint maps to shopping_mall_customers fields: email (input), password_hash, status, email_verified, last_login_at. Only active, verified customers may login. Platform ensures sensitive error responses and security best practices.\n\nReturned DTO uses IShoppingMallCustomer.IAuthorized. Related endpoints: join (registration) and refresh (token reissuance). Error handling complies with schema uniqueness and authentication logic.","authorizationType":"login","description":"This endpoint supports customer authentication by validating login credentials. It uses the shopping_mall_customers table, where the client provides email and password. The API checks email (unique, string), compares the password to the stored password_hash (bcrypt), ensures the account status is active, and verifies the email_verified flag.\n\nIf authentication succeeds, an access and refresh token are issued and returned as IShoppingMallCustomer.IAuthorized. Failed attempts are metered and logged to mitigate brute-force risk (handled at the infra/auth middleware level).\n\nThe operation does not return detailed error cause on authentication failure, complying with security best practices. The process is always paired with registration and token refresh endpoints. Blocking removed (deleted) or suspended accounts is enforced by checking the deleted_at and status fields in the schema. The endpoint is public (no authentication required).\n\nRelated references: /auth/customer/join (registration), /auth/customer/refresh (refresh token), shopping_mall_customers Prisma definition.","summary":"Authenticate customer (shopping_mall_customers) and issue tokens.","parameters":[],"requestBody":{"description":"Customer login credentials (email, password).","typeName":"IShoppingMallCustomer.ILogin"},"responseBody":{"description":"Authorized customer data and JWT tokens on successful login.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/customer/login","method":"post"},{"specification":"Refresh JWT tokens for an authenticated customer session, using a valid (unexpired, not blacklisted) refresh token tied to the shopping_mall_user_sessions table. The endpoint enforces access to non-revoked, non-expired sessions, returning a new access and refresh token if allowed. Revoked, blacklisted, or expired tokens are denied and logged. Based on fields: user_id, access_token, refresh_token, expires_at, revoked_at of shopping_mall_user_sessions.\n\nThis operation is a standard part of customer authentication flow, allowing prolonged access while enforcing overall session expiration. It is paired with the /auth/customer/join and /auth/customer/login APIs. DTO follows the IShoppingMallCustomer.IAuthorized convention, embedding new tokens with profile info. Security logic ensures session state is coherent with unique device and token constraints per Prisma schema.\n\nNo user identifier is present in the path; the refresh token is provided in the request, and proper session-lookup logic is enforced at the handler level. Related logic disables access for logically deleted (deleted_at) or status-blocked users.\n\nRelated endpoint references: /auth/customer/login, /auth/customer/join.","authorizationType":"refresh","description":"This endpoint supports refreshing JWT tokens for customer sessions by accepting a valid refresh token. It validates session state using shopping_mall_user_sessions, checking refresh_token (unique, string), and ensures the session is not expired or revoked via expires_at and revoked_at fields.\n\nOn success, a new access token is issued along with updated tokens, following the authorized DTO IShoppingMallCustomer.IAuthorized. Invalid or expired refresh tokens are rejected with generic error responses to prevent information disclosure.\n\nThe endpoint is unauthenticated but requires a valid refresh token for operation. It is always paired with login and join for standard authentication lifecycle management. Session integrity rules and maximum concurrent session policies may be enforced at the DB or handler layer (tracked via unique tokens and session records).\n\nAll logic is based strictly on existing fields in shopping_mall_user_sessions. Related references: Prisma schema, customer session management flows across platform.","summary":"Refresh customer JWT tokens (shopping_mall_user_sessions).","parameters":[],"requestBody":{"description":"Refresh token for acquiring new session tokens.","typeName":"IShoppingMallCustomer.IRefresh"},"responseBody":{"description":"Authorized customer data and new JWT tokens.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/customer/refresh","method":"post"},{"specification":"Initiate a password reset workflow for customers who have forgotten their password. The endpoint accepts a registered email address, checks for its existence in shopping_mall_customers (email field), and, if present, creates a password reset token in the shopping_mall_password_resets table. The endpoint never reveals whether the email exists for privacy.\n\nReferencing curated fields: shopping_mall_customers.email (unique), shopping_mall_password_resets.user_id, token, expires_at. This operation is a security-critical customer self-service path required by requirements and is strictly aligned with shopping_mall_password_resets Prisma schema. Further steps (token delivery and usage) are handled by related APIs and delivery infrastructure.\n\nThis endpoint is public/unprotected, but is always paired with API operations verifying and using the supplied token before actual password change. The implementation does not leak data about unregistered emails, mitigating discovery attacks.","authorizationType":null,"description":"This endpoint initiates the password reset flow for customers who have forgotten their password. The API accepts an email address, checks if it matches a customer in shopping_mall_customers (unique, string), and if so, creates a password reset record in shopping_mall_password_resets table, including user_id, a random token, expires_at. For security and privacy, the endpoint never reveals whether the email is registered. This aligns with both requirements analysis and the Prisma schema.\n\nThe workflow is completed via a separate endpoint that verifies a valid token and allows password update. This operation is unauthenticated and idempotent for input emails. Actual token delivery (email) is handled by out-of-band infrastructure. Throttling and abuse risk are mitigated externally.\n\nThe underlying Prisma schemas are strictly verified. Related fields: email (shopping_mall_customers), user_id/token/expires_at (shopping_mall_password_resets). Related endpoints: resetPassword (set/reset new password with valid token).\n\nFull compliance with best practices for account recovery, no information leakage, and prevention of user enumeration is observed.","summary":"Initiate password reset process for customer (shopping_mall_customers, shopping_mall_password_resets).","parameters":[],"requestBody":{"description":"Payload for initiating password reset (email address).","typeName":"IShoppingMallCustomer.IRequestPasswordReset"},"responseBody":{"description":"Password reset request accepted (no data revealed about existence).","typeName":"IShoppingMallCustomer.IPasswordResetRequestResult"},"authorizationRole":null,"name":"requestPasswordReset","prerequisites":[],"path":"/auth/customer/password/request-reset","method":"post"},{"specification":"Complete a password reset for a customer by providing a valid reset token and the new desired password. The endpoint validates the token and expiration from shopping_mall_password_resets (token, expires_at, used_at), ensures a matching customer exists, and then updates the customer's password_hash in shopping_mall_customers. On success, the token is marked used and all active sessions of the customer are revoked (per Prisma business logic).\n\nThis operation uniquely references the Prisma schemas: shopping_mall_password_resets (token, used_at, expires_at, user_id), shopping_mall_customers (id, password_hash). Password policy is enforced by input validation prior to hash update. The reset uses a secure random token, and all steps are transactional for security.\n\nOn success, the customer may log in with the new password. The endpoint never reveals whether the reset was successful for privacy. If token is invalid, expired, or already used, a generic error is returned. Further business audit fields (timestamp, IP, etc.) can be tracked externally via logs or platform events.","authorizationType":null,"description":"This operation completes the password reset flow for customers who have a valid reset token. The endpoint expects the new password and a reset token as input, checking the token's validity, expiration (expires_at), and usage status (used_at) in shopping_mall_password_resets. If valid, it updates the password_hash in shopping_mall_customers (for the referenced user) and marks the token as used, revoking all customer sessions.\n\nNo sensitive information is returned about credentials; the presence or absence of token/customer is not revealed in the response. Prisma schema checks are enforced transactionally. The operation is public but secured by cryptographically strong tokens. Output is a generic result schema confirming the action. Password policy is enforced via input validation, in line with platform requirements analysis.\n\nReferences: shopping_mall_password_resets (token, user_id, expires_at, used_at), shopping_mall_customers (password_hash). Related endpoints: requestPasswordReset for token issuance, login for subsequent access.","summary":"Reset lost customer password with valid token (shopping_mall_password_resets, shopping_mall_customers).","parameters":[],"requestBody":{"description":"Payload with reset token and new password.","typeName":"IShoppingMallCustomer.IResetPassword"},"responseBody":{"description":"Result of password reset operation, no credential or account data is leaked.","typeName":"IShoppingMallCustomer.IPasswordResetResult"},"authorizationRole":null,"name":"resetPassword","prerequisites":[],"path":"/auth/customer/password/reset","method":"post"},{"specification":"Send an email verification code or link to a customer's email address to verify identity. This endpoint is only accessible for customers who have registered but not yet verified email (shopping_mall_customers.email_verified = false). It issues a new token in shopping_mall_email_verifications, referenced by user_id, token, expires_at. No info about user existence is revealed.\n\nThe endpoint is required by business requirements to enforce email verification flows for customer onboarding. Delivery of token is handled by infrastructure (email service), not directly by the API. Attempted misuse or spamming is mitigated via rate limiting elsewhere. Schema-level fields: shopping_mall_email_verifications.user_id, token, email, expires_at.\n\nThis operation may be triggered by end users or by automated onboarding triggers. Success response is generic. It is paired with an endpoint that processes email verification by token (below).","authorizationType":null,"description":"This endpoint sends a verification email to a customer who has registered but not yet verified their email address. The underlying logic checks the existence of a customer record in shopping_mall_customers (email_verified = false) and, if true, creates a new shopping_mall_email_verifications record (user_id, token, expires_at, email). No information about whether a customer exists or is verified is revealed by this API response.\n\nThe delivery of the actual verification email is handled externally by platform infrastructure (e.g., email service provider). Throttling of repeated requests is required but implemented outside of the business API logic.\n\nSchema reference: shopping_mall_customers.email_verified (boolean), shopping_mall_email_verifications.user_id/token/expires_at/email (string/date).\n\nRelated operation: verifyEmail, which confirms the validity of the token.","summary":"Trigger customer email verification (shopping_mall_customers, shopping_mall_email_verifications).","parameters":[],"requestBody":{"description":"Payload with email to start verification process.","typeName":"IShoppingMallCustomer.IRequestEmailVerification"},"responseBody":{"description":"Email verification initiation result (no data about user exists).","typeName":"IShoppingMallCustomer.IEmailVerificationRequestResult"},"authorizationRole":null,"name":"requestEmailVerification","prerequisites":[],"path":"/auth/customer/email/request-verification","method":"post"},{"specification":"Verify a customer's email address by checking a one-time verification token delivered via email. The endpoint checks shopping_mall_email_verifications for validity, match to customer (user_id, email), token, and expiration (expires_at), and, if successful, marks shopping_mall_customers.email_verified = true and removes the verification record.\n\nThe workflow completes the onboarding loop for customers and is required for login. On success, returns a generic result status. On failure (invalid/expired token), returns a generic failure, never revealing account existence. Prisma fields: shopping_mall_email_verifications (token, user_id, expires_at), shopping_mall_customers (email_verified, id).","authorizationType":null,"description":"This endpoint verifies a customer's email address using a unique, time-limited verification token issued by shopping_mall_email_verifications. It checks the token's existence and expiry, updates the referenced customer's email_verified field (shopping_mall_customers), and deletes the used verification record.\n\nIf the token is invalid or expired, a generic error is returned with no information about account existence. This API does not require authentication and only returns a status indicating the outcome, for security and privacy compliance.\n\nPrisma schema references: shopping_mall_email_verifications.token/user_id/expires_at, shopping_mall_customers.email_verified/ id. Related endpoint: requestEmailVerification to (re)start the workflow.","summary":"Complete customer email verification process (shopping_mall_email_verifications, shopping_mall_customers).","parameters":[],"requestBody":{"description":"Token for verifying customer email address.","typeName":"IShoppingMallCustomer.IVerifyEmail"},"responseBody":{"description":"Email verification completion/result (generic, non-leaking).","typeName":"IShoppingMallCustomer.IEmailVerificationResult"},"authorizationRole":null,"name":"verifyEmail","prerequisites":[],"path":"/auth/customer/email/verify","method":"post"},{"specification":"This operation registers a new seller account, including storing authentication credentials, business identity fields, and verification state, and issues the initial set of JWT tokens upon success. The underlying Prisma schema used is shopping_mall_sellers, which provides the fields: email (unique, for login), password_hash (BCrypt), business_name, contact_name, phone, kyc_document_uri (optional KYC file), approval_status (for admin approval workflow), business_registration_number (mandatory for business identification), email_verified (registration initializes as false), plus operational timestamps. Security-sensitive information (such as password hash, KYC documents, and approval status) is handled according to regulatory and business policies, with the response never exposing hashes or sensitive documents. Registration requires all mandatory seller business/payment information, and upon success, an email verification process is triggered using the shopping_mall_email_verifications table connected via user_id. The JWT token encodes seller id, role, and expiry as per JWT requirements. Profile data must not be returned in this API; focus instead on secure setup of credential and token issuance. The response DTO type is IShoppingMallSeller.IAuthorized. Any errors such as duplicate email or missing business registration cause clear error messages.","authorizationType":"join","description":"This API allows a new seller to register for an account on the e-commerce platform by providing all legally required business information and credentials. It interacts directly with the shopping_mall_sellers table to create a new seller record and initializes the email_verified field to false until verification is completed.\n\nAfter inserting the new record, the system generates a pending account requiring email verification by sending a verification record (referencing the user's new id) to shopping_mall_email_verifications, which is not exposed by this endpoint. The approval_status is set to 'pending', and KYC document upload is optional at registration. Passwords are securely hashed using BCrypt and only the hash is stored, with the response masking all sensitive values and tokens.\n\nThis operation never allows registration if the seller email or business registration number are already present in the database, enforcing unique constraints for both. Any validation errors produce clear error responses, and rate limiting can be enforced as a security precaution for abuse prevention.\n\nThe response never includes the password_hash, kyc_document_uri, or approval_status. Upon successful registration, a JWT is issued in the response of type IShoppingMallSeller.IAuthorized. This token incorporates user id, role, permissions array, and expiry as required by the requirements and reflected in the schema.\n\nSecurity and business compliance are strictly enforced by only referencing fields that exist in the shopping_mall_sellers schema, and integration with the shopping_mall_email_verifications table for subsequent flows. Related API: email verification endpoint (external to this interface), login, refresh.\n\nThis endpoint provides the initial step in the seller authentication workflow. To obtain tokens after email verification, use the login endpoint.","summary":"Register a new seller and issue first JWT tokens (shopping_mall_sellers table)","parameters":[],"requestBody":{"description":"Seller registration form, including all legal business details and credentials.","typeName":"IShoppingMallSeller.IJoin"},"responseBody":{"description":"Authorized JWT/token envelope for sellers (upon registration).","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/seller/join","method":"post"},{"specification":"This operation authenticates an existing seller by validating submitted credentials (email + password) against the shopping_mall_sellers database entity. Successful authentication checks the password_hash (BCrypt) for a match, verifies the account's approval_status is 'approved', and that the email_verified boolean is true. The Prisma schema for shopping_mall_sellers defines all fields used here: email, password_hash (for verification, not exposed in response), email_verified, status/approval_status (both must indicate an active/approved account status). Upon successful login, a new session is created (using the shopping_mall_user_sessions table), generating a short-lived JWT access token and a long-lived refresh token, matching the business requirements for seller role session management. The tokens are returned together in a secure envelope as per the IShoppingMallSeller.IAuthorized DTO, incorporating the seller's id, their role ('seller'), permissions, and expiry timestamps. The operation never exposes password hashes or inactive seller profiles. All failed authentication attempts are logged, trigger error responses, and may be rate-limited against brute-force attacks.","authorizationType":"login","description":"Authenticates a seller by checking the email/password combination against the shopping_mall_sellers schema. The endpoint requires the provided email to match an existing seller with email_verified true and approval_status 'approved'. The seller's password is checked using a secure BCrypt comparison with the stored password_hash, and no sensitive credential data is ever returned.\n\nIf authentication is successful, the system creates a new record in the shopping_mall_user_sessions table, generating a new pair of JWT tokens (access + refresh) as per platform session policy. The response consists of these tokens inside the IShoppingMallSeller.IAuthorized response body, which encodes the seller's id, their role, permissions, and expiry in JWT claims.\n\nThe API strictly enforces business and security rules: rejected or suspended seller accounts, unverified emails, or pending admin approval status all prevent authentication. Any failed login attempt is recorded for brute-force detection and rate-limited as necessary. The tokens are securely formed and never expose underlying user or session secrets.\n\nThis API does not return profile or business details, only the authentication envelope. For session refresh, use the dedicated refresh endpoint with a valid refresh token. This is the core login operation for authorized sessions of sellers.","summary":"Authenticate a seller by email/password and issue session JWT tokens (shopping_mall_sellers table)","parameters":[],"requestBody":{"description":"Seller credential (login) form with email and password.","typeName":"IShoppingMallSeller.ILogin"},"responseBody":{"description":"Authorized JWT/token envelope for sellers (upon login success).","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/seller/login","method":"post"},{"specification":"This operation allows a seller to obtain a new access token using an existing refresh token. It leverages session data stored in shopping_mall_user_sessions, which is related to sellers via the user_id FK. The refresh operation first checks that the provided refresh token is present and valid (not expired, not revoked, and matched to a legitimate seller/user_id). Upon validation, a new short-lived access token and a new refresh token are generated and returned, fully encapsulated as the IShoppingMallSeller.IAuthorized envelope. The Prisma schema for shopping_mall_user_sessions is used for session validation and refresh logic. Only the tokens and JWT claims are returned—no business or profile data is ever exposed. Any failure to validate the refresh token causes this API to return an authentication error. The endpoint enforces security and business rules regarding token expiration, blacklist, and sufficient seller role for session validation.","authorizationType":"refresh","description":"Refreshes the authentication token for a seller given a valid refresh token. The endpoint validates the provided refresh token by checking it against the shopping_mall_user_sessions table, ensuring the token is active, not expired, and not revoked. Only matching tokens granted to approved and fully verified seller accounts are permitted to be refreshed.\n\nIf validation succeeds, a new access and refresh token are issued and returned using the IShoppingMallSeller.IAuthorized DTO, encoding the seller's id, role, and updated JWT expiry in the payload. No business or sensitive profile information is returned.\n\nAny invalid, expired, or revoked refresh tokens trigger an explicit error response. Tokens are securely rotated and blacklisted as necessary, per shopping_mall_user_sessions logic. The session's device_info, if present, may be used for additional security validations but is not exposed via this endpoint.\n\nThe refresh endpoint is a key part of the seller authentication lifecycle, providing seamless session extension while enforcing security and compliance. For registration and initial login, use the /auth/seller/join and /auth/seller/login endpoints respectively, as required by business rules.","summary":"Exchange a seller's refresh token for a new access token (shopping_mall_user_sessions table)","parameters":[],"requestBody":{"description":"Refresh token envelope for sellers. Must include valid refresh_token.","typeName":"IShoppingMallSeller.IRefresh"},"responseBody":{"description":"Authorized JWT/token envelope for sellers (upon refresh success).","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/seller/refresh","method":"post"},{"specification":"Implements admin account registration (join) for the shoppingMall e-commerce platform. This operation creates a new admin account by inserting a record into the 'shopping_mall_admins' table. It requires unique email, a password_hash (to be generated before storage), full_name for identification, and optionally status and a two_factor_secret for security. Email is verified via a separate process. Registration logic enforces uniqueness on the email field, rejects duplicates, and timestamps creation. This endpoint is public; upon success, it returns a JWT token and basic admin authorization context. Passwords are never stored in plaintext. Upon completion, the created admin is given status 'pending' until manual verification or email confirmation. No business, product, or customer objects are affected. This operation is only for admin account creation—login and token refresh are separate endpoints. Business validation errors and uniqueness violations are returned as 409 or 400 errors as appropriate.","authorizationType":"join","description":"This operation allows a new system administrator to register an admin account in the shoppingMall platform. The core purpose is to facilitate initial onboarding for platform administrators by creating a secure and unique admin record in the 'shopping_mall_admins' table. \n\nAll required authentication fields—including 'email', 'password_hash', and 'full_name'—must be provided and validated for uniqueness. The system enforces email uniqueness at the database level, ensuring no duplicate accounts. Upon registration, a status (such as 'pending') is set, and a timestamp is created. Email verification and two-factor authentication are configured separately.\n\nThe implementation strictly uses the fields defined in the schema—email, password_hash, full_name, status, two_factor_secret, with password_hash being securely hashed (never plaintext). The response returns a new JWT for the admin, following issuance standards for access and refresh tokens.\n\nThis endpoint is accessed by unauthenticated users only (public), and does not interact with any business entities, product records, or customer accounts. Registration validation occurs at both API and database levels, returning errors for constraint violations or invalid payloads.\n\nRelated endpoints include admin login (authenticate and issue token with credentials) and refresh (token renewal), but these are handled independently and reference this admin record for credentials. All admin registration attempts are logged for audit purposes.","summary":"Register a new admin account in the shopping_mall_admins table (admin join)","parameters":[],"requestBody":{"description":"Admin registration information (email, password_hash, full_name, etc.)","typeName":"IShoppingMallAdmin.ICreate"},"responseBody":{"description":"Admin JWT access/refresh tokens and context after registration","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"Authenticates an admin user for the shoppingMall platform, verifying credentials against the 'shopping_mall_admins' table. Accepts admin email and password (in plaintext; must be hashed for match) and checks the password_hash field in the database. If authentication succeeds, issues a new JWT access and refresh token according to system standards, embedding admin context, sign-in timestamp, and permissions. It validates 'email' as unique, ensures the user exists, and that the account's status is not suspended or deleted ('status' checked in table). Two-factor authentication is checked if enabled (verifies 'two_factor_secret'). Login attempts are logged for audit. Returns standard error codes for failed authentication, invalid credentials, or locked/suspended user states. Access is public (for unauthenticated clients) with no prerequisites besides account existence. Successful login updates 'last_login_at' and may update session info. Related operations: admin registration (/join) and token refresh (/refresh).","authorizationType":"login","description":"This operation handles system administrator login for the shoppingMall platform, providing core authentication by comparing submitted credentials to fields in the 'shopping_mall_admins' table. It references only existing schema fields: 'email', 'password_hash', and 'status' for verifying identity and account state. \n\nCredentials are validated by comparing the submitted (hashed) password to the stored 'password_hash' field, and the email must match a unique record. If two-factor is enabled for this admin (presence of 'two_factor_secret'), the system enforces code verification.\n\nUpon successful match and status verification, the system issues a JWT set (access and refresh tokens) with all required role/permissions in the payload. This endpoint is public and stateless; on error, standard 401/403/409 codes are returned depending on reason—invalid credentials, account locked, or conflict. Failed logins and suspicious attempts are logged for security audit in the admin logs.\n\nThe login operation never returns password data or partial credentials in any response. After successful login, 'last_login_at' is updated for audit. Related endpoints include admin registration (join) for account creation and refresh for token renewal.","summary":"Authenticate an admin using 'shopping_mall_admins' table credentials; issue JWT tokens on success","parameters":[],"requestBody":{"description":"Admin login credentials (email and password)","typeName":"IShoppingMallAdmin.ILogin"},"responseBody":{"description":"Admin JWT access/refresh tokens and role context after successful login","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"Refreshes an admin's authentication token for the shoppingMall platform as part of JWT token lifecycle flow. This endpoint checks the validity of the refresh token provided by the admin, which must correspond to a stored session in 'shopping_mall_user_sessions' or equivalent session management. Verifies that the token has not been revoked (revoked_at == null), is unexpired (expires_at > now), and matches the admin's session data. If validation passes, issues new access and refresh tokens in standard format, embedding admin context and role. The operation does not manipulate any other actor or system entity. Failed or expired refresh tokens result in 401/403 errors. Account suspension or deletion (checked via status field in 'shopping_mall_admins') prevents regular refresh flow. Related endpoints: login (authenticate with credentials), join (admin registration). All refresh attempts are recorded for audit. Only available to clients with a valid refresh token.","authorizationType":"refresh","description":"Handles admin token renewal for authenticated sessions in the shoppingMall platform, aligning with JWT session best practices. This operation checks the presence and validity of the admin's refresh token against stored sessions in 'shopping_mall_user_sessions', following the schema's session, expiry, and revocation fields.\n\nOn valid, unexpired, and active session, it generates a new access and refresh token for the admin, encoding necessary context (admin id, role, permissions, expiry, etc.) in the JWT payload. Invalid, expired, or revoked tokens lead to immediate rejection and security logging.\n\nAccount status (active, disabled, or suspended) is enforced by referencing the 'status' field in 'shopping_mall_admins', preventing token renewal for non-active admins. Related operations include login (for initial authentication), join (for admin account creation), and logout (to revoke the refresh token/session).\n\nThis endpoint requires a valid refresh token and returns only new JWT tokens—never sensitive account details or password data. All refresh actions are logged for admin session audit and monitoring compliance.","summary":"Refresh admin JWT session tokens using a stored valid refresh token","parameters":[],"requestBody":{"description":"Refresh token provided after admin login","typeName":"IShoppingMallAdmin.IRefresh"},"responseBody":{"description":"New JWT access and refresh tokens for authorized admin session","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation allows clients to retrieve a paginated, searchable, and sortable list of product categories. It works on the shopping_mall_categories table in the database, enabling platform administrators or public clients to browse categories. The endpoint supports filtering by name (both English and Korean), parent category, active status, and display order. The implementation utilizes pagination to support large category trees (including hierarchical queries), with optional multi-language support and filtering for enabled categories. The response provides summary information on category IDs, names, hierarchy, enabled/disabled status, and intended display order. All access aligns with the business requirement that categories are the foundation for product navigation, search, and administration across the e-commerce platform.","description":"This API operation returns a list of categories from the shopping_mall_categories table with advanced filtering functionality. The operation supports searching categories by partial name matches (either in Korean or English), filtering by parent_id to fetch subcategories, and filtering by is_active status. Pagination is supported so clients can request categories by page number and size, enabling efficient navigation even through large or multi-level category trees.\n\nSecurity considerations depend on platform policy: if category data is public-facing (catalog, navigation), the endpoint may be unauthenticated; if used for admin or moderation actions, access should be scoped to the admin role. All results are based on the underlying Prisma schema, including fields such as display_order for UI navigation and multilingual descriptions for proper localization. Error cases such as invalid pagination parameters, or attempts to access disabled categories can be addressed with descriptive error messages.","summary":"Retrieve a filtered and paginated list of shopping mall categories from shopping_mall_categories.","parameters":[],"requestBody":{"description":"Criteria and pagination parameters for filtering and searching category listings.","typeName":"IShoppingMallCategory.IRequest"},"responseBody":{"description":"Paginated result containing summary data for each matching category, including hierarchy and status.","typeName":"IPageIShoppingMallCategory.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/shoppingMall/categories","method":"patch","prerequisites":[]},{"specification":"This operation retrieves the detailed information of a specific product category by its unique categoryId. It accesses the shopping_mall_categories table, supporting both administrative dashboard and category browser views. The operation is essential for displaying category detail pages, editing flows, or constructing category navigation hierarchies with complete data, including parent-child relationships, localized names/descriptions, and enabled/disabled status. The endpoint is fundamental for platform-wide product and content organization.","description":"This API operation fetches the complete details of a single category using its unique categoryId from the shopping_mall_categories table. It returns all relevant properties for the category, including multilingual names and descriptions, parent_id for hierarchical navigation, display_order, is_active flag, and audit fields such as created_at, updated_at, and deleted_at. This allows clients to render detail views, administrative forms, or build parent-child tree data.\n\nAccess control is informed by platform usage: for public navigation, authentication may be optional; for administrative settings (e.g., updating a category), additional permissions would be required. Validators ensure that provided categoryId is a valid UUID and refers to an existing record. If the specified category does not exist, the endpoint responds with a clear error. Related APIs include list (index), category creation, and update operations. Business logic aligns with requirements for multilingual and hierarchical e-commerce category data.","summary":"Retrieve detailed information for a specific category by categoryId from shopping_mall_categories.","parameters":[{"name":"categoryId","description":"Unique identifier (UUID) of the desired category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the selected category, including multilingual names, hierarchy, and status.","typeName":"IShoppingMallCategory"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/shoppingMall/categories/{categoryId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Category must be created before its details can be retrieved by categoryId."}]},{"specification":"This operation enables administrators to create a new product category in the e-commerce platform. It is associated with the shopping_mall_categories table in the Prisma schema. Creation requires specifying names in both Korean and English, optional descriptions, the parent category (or null for a root), display order, and activation status. System supports unique name constraints within each parent for localization and hierarchical browsing. Upon creation, related cache invalidation and navigation updates are triggered platform-wide. The designed API enables category tree growth for better product catalog structuring, discoverability, and SEO.","path":"/shoppingMall/admin/categories","method":"post","summary":"Create a new product category in the shoppingMall_categories table.","description":"This operation allows an admin user to create a new category under the shopping_mall_categories table. Creation requires specifying category names in Korean and English, both of which must be unique within the assigned parent. The description fields are optional, enabling richer category context for navigation and search UI.\n\nThe parent_id is used for building the category hierarchy, supporting unlimited levels (root categories have a null parent_id). Display_order enables precise control of sibling ordering. The is_active boolean controls if this category (and its children) are visible throughout the storefront and search.\n\nAll changes propagate as cache invalidation events system-wide for catalog and navigation. Category creation is allowed only to admin-role users to prevent arbitrary structure changes by external actors. Validation rejects missing mandatory fields, duplicate names, or invalid parent references. Error details will indicate the cause (e.g., duplicate name or parent not found).\n\nThis endpoint is strictly for administrative product catalog management and is not accessible by sellers or customers directly.","parameters":[],"requestBody":{"description":"Category creation details including names, descriptions, parent assignment, display order, and status.","typeName":"IShoppingMallCategory.ICreate"},"responseBody":{"description":"Detailed information of the created category as stored in the system.","typeName":"IShoppingMallCategory"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows an admin to update an existing product category in the platform, modifying any of the fields in the shopping_mall_categories table. Fields that can be changed include the Korean and English names, descriptions, display order, parent assignment, and activation status. Enforces unique name constraint and supports category tree reorganization. Critical for catalog management, this endpoint enables seamless navigation structure adjustments for the e-commerce system.","path":"/shoppingMall/admin/categories/{categoryId}","method":"put","summary":"Update an existing product category by categoryId in the shoppingMall_categories table.","description":"This operation lets an admin update any editable field of a category identified by categoryId in the shopping_mall_categories table. Updatable properties include name_ko, name_en, description_ko, description_en, parent_id (for moving category in hierarchy), display_order, and is_active. Unique constraints remain enforced per parent node for both names.\n\nThe operation supports re-parenting categories (moving to different parent), updating display order for navigation purposes, bulk enabling/disabling, and adjusting multilingual metadata for SEO or branding reasons. Inactivation is recursive—making a category inactive also inactivates all its children, making associated products undiscoverable to end users.\n\nOnly admin users can perform this operation to keep catalog structure consistent and prevent accidental disruption. Error responses specify reasons, such as duplicate name, invalid parent assignment (e.g., loop), or constraint violation. On success, the response returns the full updated record.","parameters":[{"name":"categoryId","description":"The UUID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Category update information: new names, descriptions, parent, order, or status.","typeName":"IShoppingMallCategory.IUpdate"},"responseBody":{"description":"Complete updated category data after changes are saved.","typeName":"IShoppingMallCategory"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"A category must already exist (created via POST /shoppingMall/admin/categories) before it can be updated by categoryId. If a new parent_id is being assigned, that parent category must also be created via POST /shoppingMall/admin/categories before updating the child category's hierarchy."}]},{"specification":"This operation permanently removes a category from the e-commerce platform's product catalog. It operates on the 'shopping_mall_categories' table from the Prisma schema, representing hierarchical product categories. Deleting a category will also affect all subcategories and any products associated with this category, in accordance with foreign key constraint rules and business logic outlined in requirements. The operation expects the categoryId as a path parameter and ensures that only active, non-protected categories without dependent products or subcategories can be deleted by an admin user. Soft delete is implemented via the 'deleted_at' field; affected records are marked as deleted and excluded from standard query results, aligning with audit and regulatory requirements.","description":"This API endpoint allows an administrator to delete a product category from the shopping mall's catalog, as defined in the 'shopping_mall_categories' table of the Prisma schema. When invoked, the operation first checks if the target category has any active child categories or associated products. If so, deletion is blocked and a meaningful error is returned, instructing the user to reassign or remove dependent objects before retrying.\n\nThe deletion is implemented as a soft delete by setting the 'deleted_at' timestamp, ensuring compliance with audit and recovery policies. All soft-deleted categories are hidden from normal user and seller queries but remain in the database for compliance, reporting, or potential restoration by admins. Child categories and related product assignments may also be affected based on cascading rules. This operation is strictly restricted to administrators, reflecting the elevated privilege required for catalog structure changes.\n\nValidation guards against accidental or malicious removal of critical categories, and the operation logs a full audit record including the acting admin and affected entity. Related endpoints include category creation, update, and recovery/restoration APIs, which together maintain catalog integrity across the platform.","summary":"Soft-delete a product category (admin only) from the 'shopping_mall_categories' table.","parameters":[{"name":"categoryId","description":"Unique identifier (UUID) of the target category to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/categories/{categoryId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Category must exist before it can be deleted. The POST /shoppingMall/admin/categories operation creates a new category, which is necessary before a category with categoryId can be soft-deleted by this operation."}]},{"specification":"This operation allows administrators to search and filter dynamic runtime system configurations for the platform, operating on the 'shopping_mall_system_configs' table. It supports complex filtering and search scenarios by config key, scope, type, and value, and is primarily used for managing feature toggles, operational limits, credentials, and other admin-controlled settings. The endpoint is restricted to admin users and provides paginated, filterable results suitable for admin UIs.","description":"This endpoint retrieves a paginated and filterable list of system configuration settings from the 'shopping_mall_system_configs' table, supporting admin maintenance, diagnostics, and feature management. Admins can filter results by config key, configuration scope (e.g., 'global', 'payment', 'product'), value type, or specific value fields, ensuring rapid access to targeted settings during routine platform operations or incident response.\n\nSearch requests support partial match by key, scope, and value, and advanced queries using structured search DTOs. Pagination and sorting are fully supported, with configurable page size and ordering. Access is strictly limited to admins, and all access to configuration data is logged for audit compliance.\n\nThis operation is typically used together with create, update, and detail/retrieval endpoints for system configuration, and forms the backbone of platform feature toggling, runtime operational adjustments, and infrastructure credentials management.","summary":"Search and filter system configuration settings in the 'shopping_mall_system_configs' table (admin only).","parameters":[],"requestBody":{"description":"Structured search/filter parameters and pagination/sorting instructions for admin config retrieval.","typeName":"IShoppingMallSystemConfig.IRequest"},"responseBody":{"description":"Paginated, filterable list of system configuration records matching search criteria.","typeName":"IPageIShoppingMallSystemConfig"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/systemConfigs","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/systemConfigs","method":"post"},"description":"System configuration must exist to be searched or filtered. The POST /shoppingMall/admin/systemConfigs operation creates a new system configuration entry, which is necessary before this search/filter operation can return relevant results."}]},{"specification":"This operation retrieves a single system configuration entity from the shopping_mall_system_configs table using its unique identifier (UUID). It allows platform administrators to fetch details of a specific configuration used for feature toggles, runtime settings, or other operational controls. The endpoint is intended for admin-level access and returns all fields of the configuration, including its type, scope, value(s), and audit timestamps. Only entries not soft-deleted (deleted_at is null) should be returned. This supports admin dashboard and service configuration management interfaces.","description":"Fetch a single system configuration object by its unique ID from the shopping_mall_system_configs table. This endpoint enables platform administrators to inspect or audit details of a specific configuration, such as feature toggles, rate limits, third-party credentials, or operational switches.\n\nSecurity is enforced by restricting access to the admin role. The operation returns all attributes of the configuration record, including value type, scope, and typed values (string/int/boolean/double/json), as well as audit timestamps such as creation and last update. Entries marked as soft-deleted via deleted_at will not be returned in results.\n\nParameters must specify the correct system configuration ID as a UUID. This operation references the shopping_mall_system_configs Prisma model and is related to configuration dashboard and system diagnostics flows. Error handling includes not-found for non-existent or deleted records, and forbidden for non-admin users.","summary":"Retrieve a specific system configuration entry by ID from shopping_mall_system_configs.","parameters":[{"name":"systemConfigId","description":"The unique identifier (UUID) of the target system configuration entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single system configuration record matching the provided ID.","typeName":"IShoppingMallSystemConfig"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/systemConfigs/{systemConfigId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new system configuration entry in the shopping_mall_system_configs table. It allows platform administrators to define or update dynamic runtime settings, feature toggles, and operational switches for the platform. Each configuration requires a unique (key, scope) pair, a value type indicator, and an appropriately typed value field (string, int, double, boolean, json). The operation audits creation metadata for compliance and platform traceability. Only admin users may perform this operation.","description":"Create a new system configuration setting in the shopping_mall_system_configs table. This operation is available exclusively to platform administrators for defining runtime flags, feature switches, maximum limits, external service credentials, or other advanced platform settings.\n\nThe configuration requires a unique combination of config_key and config_scope, identification of the intended value_type (string, int, boolean, double, or json), and the typing of one of the value fields accordingly. If a value is specified in an incompatible field (e.g., string value for int type), validation errors will be returned.\n\nSecurity is enforced for admin access only. The service checks for duplicate config keys within the same scope, rejecting if non-unique. Audit fields record time and identity of creation for compliance. The endpoint's response returns the created configuration entry, including all metadata and value fields.\n\nThis operation implements complex business logic related to platform-wide runtime configurability, supports admin dashboard use cases, and ensures traceability through auditing.","summary":"Create a new system configuration entry in shopping_mall_system_configs.","parameters":[],"requestBody":{"description":"The configuration data required for creation, including key, scope, value type, and the appropriate typed value field.","typeName":"IShoppingMallSystemConfig.ICreate"},"responseBody":{"description":"The newly created system configuration entity.","typeName":"IShoppingMallSystemConfig"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/systemConfigs","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing system configuration record in the shopping_mall_system_configs table. It enables authorized platform administrators to change configuration values of dynamic runtime settings and feature toggles used throughout the e-commerce platform. Each system configuration is uniquely identified by a combination of config_key and config_scope; however, the primary key is the systemConfigId. The operation supports updates to any property of the configuration including string, integer, float, boolean, and JSON values as appropriate to the config. Changes to configurations trigger audit logs and may result in global or scoped feature changes, including enablement/disablement of core integrations (such as payments or analytics), adjustment of system limits (such as max cart size), and dynamic UI/branding changes. The operation enforces validation of the configuration's value type and supports audit-tracing by recording update timestamps. Only admin users may invoke this operation.","description":"Update a system configuration entry in the shopping_mall_system_configs table. The operation allows an administrator to modify any attributes of a system config, such as changing feature flags, limit values, or JSON structures controlling platform behavior.\n\nSecurity requirements strictly limit access to admin users. The operation checks that the specified systemConfigId exists; if not, it returns an appropriate error. Upon a valid update request, the value type must be consistent with the selected key's expected type (e.g., integer value when value_type is \"int\").\n\nAll updates trigger audit logging of the admin actor, old and new values, and the update timestamp. System-wide cache invalidation or runtime refresh may also occur following core config updates. Editable fields include all value columns (string, int, double, boolean, json) and meta attributes. Operation is aligned with the business imperative of feature flexibility and runtime control from the admin dashboard.","summary":"Update a platform system configuration entry by its unique systemConfigId.","parameters":[{"name":"systemConfigId","description":"Unique identifier of the system configuration to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New configuration values to update for the specified systemConfigId.","typeName":"IShoppingMallSystemConfig.IUpdate"},"responseBody":{"description":"The updated system configuration resource with all new values and metadata.","typeName":"IShoppingMallSystemConfig"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/systemConfigs/{systemConfigId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/systemConfigs","method":"post"},"description":"System configuration must exist before it can be updated. Creating a configuration ensures the systemConfigId is valid for the update operation."}]},{"specification":"This operation permanently deletes a system configuration record from the shopping_mall_system_configs table identified by systemConfigId. Configurations in this table represent critical feature toggles, runtime settings, and operational switches managed by platform administrators. Removing a configuration is a sensitive action and is restricted to admin role, as it may impact system-wide or modular behaviors instantly. The operation ensures that the specified systemConfigId exists before deletion and removes the record so it is no longer retrievable by any system process. Any deletion is logged for audit purposes, and platform-wide cache invalidation or reload procedures are enforced to ensure consistency post-removal. This hard delete is only available for configurations not essential to platform operation.","description":"Delete a system configuration entry by its unique identifier systemConfigId from the shopping_mall_system_configs table. Only platform admin users have permission to perform this operation due to the potential system-wide impact of removing feature toggles or critical settings.\n\nThe operation checks that the systemConfigId exists and is not a protected configuration (e.g., essential bootstrapping settings are protected against deletion by business logic). If deletion is permitted, the configuration is removed from the database and will not be referenced by any system process or client read. Actions are logged, and system contexts referencing the setting will detect removal and react accordingly (reload, fallback, or error as defined by business rules).\n\nThis operation is considered a hard delete: the record is completely removed from the table and cannot be recovered except by external backup or administrator intervention. All deletions are audit-trailed, including the acting admin and timestamp.","summary":"Delete a platform system configuration entry by its unique systemConfigId.","parameters":[{"name":"systemConfigId","description":"Unique identifier of the system configuration to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/systemConfigs/{systemConfigId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/systemConfigs","method":"post"},"description":"System configuration must exist before it can be deleted. Creating the configuration ensures the systemConfigId is valid for deletion."}]},{"specification":"This operation retrieves a paginated and filterable list of platform settings for the e-commerce system, allowing administrators to search, filter, and view global configuration and branding details—including site title, descriptions, support info, branding assets, and legal policy links—in multiple languages. It enables effective dashboard and settings management for site administrators and supports updates through other endpoints. The operation relies on the shopping_mall_platform_settings table from the Prisma schema and supports complex queries with sorting and pagination for large-scale admin requirements.","description":"Retrieve a filtered and paginated list of platform settings used across the shopping mall platform. This operation supports advanced search and sort capabilities for administrators managing global system configuration, SEO/branding details, legal reference URIs, and support information. Administrators can filter by site title, status, or creation/update date, and paginate results to efficiently review or update settings as needed.\n\nThe operation enforces platform-wide administrative access control, ensuring only authorized admins may view or modify platform-wide settings. This endpoint interacts directly with the shopping_mall_platform_settings table, referencing its schema comment and column definitions. The list may include settings in both Korean and English localizations for full internationalization support.\n\nErrors may be returned if access permissions are insufficient, filters are malformed, or if there is an issue with platform settings retrieval from the database. Related settings update and single-platform-setting retrieval operations are typically used in conjunction with this endpoint.","summary":"Retrieve a paginated and filterable list of shopping mall platform settings from shopping_mall_platform_settings.","authorizationType":null,"authorizationRole":"admin","method":"patch","parameters":[],"requestBody":{"description":"Filter, search, and pagination specifications for retrieving platform settings.","typeName":"IShoppingMallPlatformSetting.IRequest"},"responseBody":{"description":"Paginated list of platform setting summaries matching filter criteria.","typeName":"IPageIShoppingMallPlatformSetting.ISummary"},"name":"index","path":"/shoppingMall/admin/platformSettings","prerequisites":[]},{"specification":"This operation retrieves the full detailed record for a single platform setting, including all available configuration fields (site title, multi-language descriptions, branding/logo URIs, customer support information, and legal document links) corresponding to the specified platformSettingId. This is essential for admin inspection, review, and detail editing of site- and platform-wide branding and configuration settings. Directly maps to a single row of the shopping_mall_platform_settings table.","description":"Retrieve the detailed information of a single platform setting record by its unique platformSettingId. This operation is restricted to admin users and includes all configuration and branding fields, such as Korean and English site titles, descriptions, support contacts, logo/image URIs, and links to privacy policy and terms of service documents as persisted in the shopping_mall_platform_settings table.\n\nThis endpoint allows administrative review and editing preparation for settings, supports error feedback for request failures (e.g., not found, unauthorized access), and integrates tightly with the platform's configuration dashboard. Path parameter enforcement ensures that the provided platformSettingId is a valid UUID matching an existing settings record.\n\nDetailed inspection of this record is typically used for further update or administrative actions, and error handling covers missing, deleted, or permission-denied records.","summary":"Retrieve a single shopping mall platform setting by ID from shopping_mall_platform_settings.","authorizationType":null,"authorizationRole":"admin","method":"get","parameters":[{"name":"platformSettingId","description":"Unique identifier of the target platform setting (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the requested platform setting record.","typeName":"IShoppingMallPlatformSetting"},"name":"at","path":"/shoppingMall/admin/platformSettings/{platformSettingId}","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/platformSettings","method":"post"},"description":"A platform setting must exist (created via POST) before its details can be retrieved by ID."}]},{"specification":"This operation creates a new platform settings record, allowing administrators to define or update static metadata such as site titles, descriptions, customer support contacts, branding images, and legal document URIs. The operation applies to the shopping_mall_platform_settings table in the Prisma schema and enables platform-wide branding and policy display customization.","description":"Create a new set of site-wide platform settings for the e-commerce shopping mall. Administrators use this endpoint to specify information such as localized site titles and descriptions, support contact details, branding assets (logo URI), and legal document links (privacy policy and terms of service URIs).\n\nThis operation is restricted to admin users to maintain security and compliance. The platform settings table is intended for infrequent updates by authorized operators, as changes propagate immediately to UI and SEO/metadata references across the platform.\n\nCare is required to ensure that provided URIs and contact information meet business policy and legal requirements. All fields must be filled according to platform standards described in business requirements. Error handling must guard against duplicate settings or attempts to create more than one active configuration when the table is intended as a singleton.","summary":"Create new e-commerce platform-wide settings (shopping_mall_platform_settings).","parameters":[],"requestBody":{"description":"Payload for new platform settings creation, including site titles, descriptions, contact, branding, and policy URIs.","typeName":"IShoppingMallPlatformSettings.ICreate"},"responseBody":{"description":"The newly created platform settings entity with all provided site metadata and branding configuration.","typeName":"IShoppingMallPlatformSettings"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/platformSettings","method":"post","prerequisites":[]},{"specification":"This operation allows administrators to update an existing platform settings record for the e-commerce site, covering any static metadata such as titles, descriptions, branding assets, and legal policy URIs. It modifies the corresponding row in the shopping_mall_platform_settings table by ID, enabling changes to be immediately reflected across the business platform.","description":"Update an existing platform-wide settings record, referenced by its unique ID. This operation is restricted to admin users and is used to revise core metadata for the entire site, including localized titles and descriptions, customer support details, branding logos, and legal document links.\n\nSecurity is paramount; only properly authenticated admin users may perform this action. The operation must validate the existence of the referenced settings record, ensure appropriate formatting and completeness of updated fields, and propagate updated settings to relevant caches and displays.\n\nAttempting to update a non-existent or deleted platform setting record must result in a clear error response. Business logic must prevent unauthorized changes and maintain detailed audit logs as per platform requirements.","summary":"Update an existing e-commerce platform settings record (shopping_mall_platform_settings) by ID.","parameters":[{"name":"platformSettingId","description":"Target platform settings record's unique ID (UUID) for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update the platform settings record, including site titles, descriptions, support contacts, branding, and policies.","typeName":"IShoppingMallPlatformSettings.IUpdate"},"responseBody":{"description":"The updated platform settings entity reflecting all modifications.","typeName":"IShoppingMallPlatformSettings"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/platformSettings/{platformSettingId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/platformSettings","method":"post"},"description":"Platform settings record must be created before it can be updated."}]},{"specification":"This operation permanently deletes a specific platform setting by its unique identifier. It leverages the shopping_mall_platform_settings table from the Prisma schema. The operation performs a hard or soft delete based on the table's 'deleted_at' field, ensuring that platform-wide editable metadata such as site title, branding details, support contacts, and legal document URIs are removed from the active configuration. Only platform administrators should be permitted to perform this action, given its system-wide impact. Any deletion triggers cache invalidation and requires audit logging for compliance and rollback.","description":"This API operation allows a platform administrator to delete a global platform setting entry identified by the specified 'platformSettingId'. These settings manage editable site metadata including branding, descriptions, support contacts, and legal policy URIs. When invoked, the system sets the 'deleted_at' timestamp for a soft delete, preserving the historical data for recovery and audit purposes.\n\nThe operation checks the acting user's role to confirm they have 'admin' privileges. It enforces that only precisely the record matching the provided ID is affected. The response is empty on success. Audit trails of the action are maintained through shopping_mall_admin_action_logs, linking the acting admin and affected setting. All relevant caches are invalidated to prevent stale UI or logic references to the deleted setting.\n\nThe operation expects a valid UUID in the 'platformSettingId' path parameter. If the specified ID does not exist or is already deleted, an explicit not found or idempotency response is returned. Attempts by non-admin users are denied with an error. Related API operations include creation and update endpoints for platform settings management.","summary":"Delete a specific platform-wide editable setting using its unique identifier (soft delete if supported).","parameters":[{"name":"platformSettingId","description":"Unique identifier of the platform setting to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/platformSettings/{platformSettingId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/platformSettings","method":"post"},"description":"Platform setting must exist before it can be deleted. Creating a platform setting provides a valid 'platformSettingId' for deletion."}]},{"specification":"This operation retrieves a filtered and paginated list of customer accounts (shopping_mall_customers) using advanced search and filtering options. Leveraging the shopping_mall_customers table, the endpoint supports complex queries including searching by name, email, registration status, and account state. Especially useful for admin account management screens and customer self-service history. Supports business requirements to show registration flows, account verification, and filtering inactive or suspended customers.","description":"Retrieve a paginated, filterable list of all registered customers on the platform. This operation supports advanced search use-cases, including filtering by registration date, status (active, suspended, pending_verification), name, and email. Designed for admin dashboard usage, it provides UI-ready pagination, sorting, and search fields.\n\nThe Prisma shopping_mall_customers table provides the data model, including profile fields, email verification state, and account activity status. Response records allow navigation to customer detail, order summaries, and address management. Query complexity accommodates both bulk admin operations and contextual search (e.g., find all new users for the last 30 days).\n\nSecurity wise, only users with admin privileges can access this endpoint to ensure customer personal data (email, phone, full_name, status) privacy. The system enforces strict access control and logs queries performed. This endpoint is intended to be paired with single-customer detail, create, update, or erase operations for full admin management coverage.","summary":"Search and retrieve a paginated, filterable list of all registered customers for admin management purposes.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination/sorting parameters for customer search.","typeName":"IShoppingMallCustomer.IRequest"},"responseBody":{"description":"Paginated list of customer summary data matching filter and search criteria.","typeName":"IPageIShoppingMallCustomer.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/customers","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation enables the retrieval of detailed information about a specific customer account in the shopping mall platform. It is directly linked to the shopping_mall_customers table, which manages core authentication credentials, profile attributes, account verification status, and soft deletion tracking. This API is used by the owner of the account (when authenticated) or by admins with sufficient access for customer service, profile management, or auditing needs. The endpoint supports access to the customer's full legal name, email, phone number, status, verification state, timestamps for creation and updates, and soft-deleted state (if applicable). Any sensitive data should be filtered according to the requesting user's authorization role and business policies.","description":"This API endpoint provides detailed profile information for a specific customer, referencing the shopping_mall_customers table from the database schema. This includes core user data such as email, hashed password (NOT returned), legal name, contact phone, status (active/suspended/pending_verification), and email verification flag.\n\nSensitive information, such as email and phone, must only be returned to either the account owner (when authenticated) or to admin users with the right permissions. Unauthorized access should be denied, and attempts to access non-existent accounts must result in clear error reporting.\n\nThe operation is read-only and does not expose password hashes or sensitive authentication data. Timestamps for account creation and last update are included for audit purposes. Soft-deletion markers (deleted_at) are available for admin review, but not for end-users. This API is closely tied to profile management, admin support tools, and customer authentication workflows. It is often followed by update or delete operations for profile lifecycle management.","summary":"Retrieve a specific customer account's detailed profile information (shopping_mall_customers table).","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose information is to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed customer account information corresponding to the provided customerId, including all profile attributes, status, verification, and audit timestamps.","typeName":"IShoppingMallCustomer"},"authorizationRoles":["customer","admin"],"name":"at","path":"/shoppingMall/customer/customers/{customerId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/auth/customer/password/request-reset","method":"post"},"description":"A customer must be registered via the password reset request workflow, which ensures that a customer is created and has a profile in shopping_mall_customers before detailed profile information can be retrieved."}]},{"specification":"This operation enables the retrieval of detailed information about a specific customer account in the shopping mall platform. It is directly linked to the shopping_mall_customers table, which manages core authentication credentials, profile attributes, account verification status, and soft deletion tracking. This API is used by the owner of the account (when authenticated) or by admins with sufficient access for customer service, profile management, or auditing needs. The endpoint supports access to the customer's full legal name, email, phone number, status, verification state, timestamps for creation and updates, and soft-deleted state (if applicable). Any sensitive data should be filtered according to the requesting user's authorization role and business policies.","description":"This API endpoint provides detailed profile information for a specific customer, referencing the shopping_mall_customers table from the database schema. This includes core user data such as email, hashed password (NOT returned), legal name, contact phone, status (active/suspended/pending_verification), and email verification flag.\n\nSensitive information, such as email and phone, must only be returned to either the account owner (when authenticated) or to admin users with the right permissions. Unauthorized access should be denied, and attempts to access non-existent accounts must result in clear error reporting.\n\nThe operation is read-only and does not expose password hashes or sensitive authentication data. Timestamps for account creation and last update are included for audit purposes. Soft-deletion markers (deleted_at) are available for admin review, but not for end-users. This API is closely tied to profile management, admin support tools, and customer authentication workflows. It is often followed by update or delete operations for profile lifecycle management.","summary":"Retrieve a specific customer account's detailed profile information (shopping_mall_customers table).","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose information is to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed customer account information corresponding to the provided customerId, including all profile attributes, status, verification, and audit timestamps.","typeName":"IShoppingMallCustomer"},"authorizationRoles":["customer","admin"],"name":"at","path":"/shoppingMall/admin/customers/{customerId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/auth/customer/password/request-reset","method":"post"},"description":"A customer must be registered via the password reset request workflow, which ensures that a customer is created and has a profile in shopping_mall_customers before detailed profile information can be retrieved by admin."}]},{"specification":"This operation allows updating the information associated with a specific customer account in the shopping mall platform, targeting the shopping_mall_customers table. It covers changes to profile attributes such as full_name, phone, status, and email verification flag, but never allows direct modification of protected credentials (password hash is not updated here; password resets use a separate workflow). Only the account owner (when authenticated) or authorized admins can use this endpoint, and strict validation rules are enforced to prevent unauthorized or invalid updates. All changes are audit-logged for compliance and security purposes.","description":"This API endpoint updates the properties of a single customer account, referencing the shopping_mall_customers entity in the Prisma schema. Only fields that are explicitly updatable by end-users or admins are accepted: full_name, phone, status, and email verification flag can be modified, subject to validation. Email address may also be changed if business logic requires it, but must ensure uniqueness across accounts.\n\nDirect updates to security-sensitive fields such as password_hash are not allowed here—users must use dedicated password reset flows. The API validates the authenticity of the user or administrative privileges before applying any changes. Unauthorized or invalid update attempts must be cleanly rejected, with error codes explaining the failure. All field changes are tracked with updated_at timestamp for audit purposes.\n\nThis operation supports core customer profile update flows (address and order associations update separately) and integrates into admin dashboards to enable account corrections, suspension/reactivation, and more advanced customer service. The operation references all business rules and validation logic specified in the shopping_mall_customers table comments.","summary":"Update the profile information of a specific customer account (shopping_mall_customers table).","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose profile is being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated customer profile information to be applied; all fields subject to validation and business rules.","typeName":"IShoppingMallCustomer.IUpdate"},"responseBody":{"description":"The updated customer profile information reflecting changes successfully applied to the target account.","typeName":"IShoppingMallCustomer"},"authorizationRoles":["customer","admin"],"name":"update","path":"/shoppingMall/customer/customers/{customerId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/auth/customer/password/request-reset","method":"post"},"description":"The customer account must exist before their profile information can be updated. This endpoint initiates the account creation flow by requesting a password reset, which is the business mechanism to create a customer entity when direct account creation is not available as a POST endpoint."}]},{"specification":"This operation allows updating the information associated with a specific customer account in the shopping mall platform, targeting the shopping_mall_customers table. It covers changes to profile attributes such as full_name, phone, status, and email verification flag, but never allows direct modification of protected credentials (password hash is not updated here; password resets use a separate workflow). Only the account owner (when authenticated) or authorized admins can use this endpoint, and strict validation rules are enforced to prevent unauthorized or invalid updates. All changes are audit-logged for compliance and security purposes.","description":"This API endpoint updates the properties of a single customer account, referencing the shopping_mall_customers entity in the Prisma schema. Only fields that are explicitly updatable by end-users or admins are accepted: full_name, phone, status, and email verification flag can be modified, subject to validation. Email address may also be changed if business logic requires it, but must ensure uniqueness across accounts.\n\nDirect updates to security-sensitive fields such as password_hash are not allowed here—users must use dedicated password reset flows. The API validates the authenticity of the user or administrative privileges before applying any changes. Unauthorized or invalid update attempts must be cleanly rejected, with error codes explaining the failure. All field changes are tracked with updated_at timestamp for audit purposes.\n\nThis operation supports core customer profile update flows (address and order associations update separately) and integrates into admin dashboards to enable account corrections, suspension/reactivation, and more advanced customer service. The operation references all business rules and validation logic specified in the shopping_mall_customers table comments.","summary":"Update the profile information of a specific customer account (shopping_mall_customers table).","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose profile is being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated customer profile information to be applied; all fields subject to validation and business rules.","typeName":"IShoppingMallCustomer.IUpdate"},"responseBody":{"description":"The updated customer profile information reflecting changes successfully applied to the target account.","typeName":"IShoppingMallCustomer"},"authorizationRoles":["customer","admin"],"name":"update","path":"/shoppingMall/admin/customers/{customerId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/auth/customer/password/request-reset","method":"post"},"description":"The customer account must exist before an admin can update the customer profile. This endpoint is used for creating a customer entity in business logic as it is the only available creation flow for customers."}]},{"specification":"This operation permanently deletes (hard delete) a customer account from the platform. It targets the shopping_mall_customers table based on the primary key (id). All associated records, such as addresses, sessions, carts, wishlists, orders, and reviews, are either cascade deleted or remain for audit depending on foreign key constraints. This operation is designed for irreversible removal by authorized admin functions and cannot be undone; the deleted_at field is used for soft deletion tracking. No request body is required—a valid customerId path parameter is mandatory.","description":"Permanently erase a shopping mall customer account based on the provided customerId. This API operation is typically used by administrative actors to enforce compliance, policy violations, GDPR/account erasure requests, or permanent account withdrawal. The operation targets the shopping_mall_customers table, referencing the id primary key column defined in the Prisma schema.\n\nAll related records that reference this customer, such as addresses (shopping_mall_customer_addresses), carts (shopping_mall_carts), wishlists, orders, and reviews, are subject to cascading deletion or orphan retention according to the Prisma relations and ON DELETE behavior. This hard delete operation sets the deleted_at column for audit but also physically removes data where compliance or security requires complete erasure.\n\nSecurity is critical—this erase operation is restricted to admin users. Authorization via JWT with role validation is mandatory. The operation validates that the customerId is well-formed, exists, and has no dependent compliance holds before proceeding. In cases where the customer cannot be deleted due to unresolved orders, refunds, or legal holds, an error describing the blocking condition is returned.\n\nThis operation is related to the creation, updating, and retrieval APIs for customer data, forming the DELETE operation in the REST lifecycle. It must be used with caution and is logged in system audit tables for compliance and traceability. This operation does not implement a soft-delete pattern but will set deleted_at for audit/tombstone if present in schema.","summary":"Hard delete a shopping mall customer account (shopping_mall_customers table) by customerId.","parameters":[{"name":"customerId","description":"Unique identifier of the customer to be permanently removed (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/customers/{customerId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/roles","method":"post"},"description":"Role must exist before a customer can be assigned or authorized for hard deletion (admin-only operation, referenced by authorizationRole='admin')."}]},{"specification":"Fetches the list of all address entries managed by a given customer in the shopping mall. This operation allows customers to retrieve their full address book for viewing or management. Addresses are returned from the shopping_mall_customer_addresses table with complete data and in defined display order. This is a search/index operation supporting pagination, with advanced filtering or sorting by created_at, region, or is_default.","description":"Retrieve a paginated and optionally filtered list of all addresses registered by a specified customer. The API operates on the shopping_mall_customer_addresses table, using customer_id as the foreign key to retrieve addresses belonging to a single customer. All relevant address fields—recipient_name, phone, region, postal_code, address lines, is_default, and timestamps—are included per the Prisma column definitions.\n\nCustomers must be authenticated to fetch their own address book; authorization is enforced on customerId to ensure ownership. Advanced features support filtering by region, postal_code, or searching for partial address text, as well as sorting by created_at, updated_at, or is_default flag.\n\nThis endpoint is typically used in the account dashboard for browsing or managing shipping information, as well as in checkout workflows for selecting or updating delivery addresses. Security checks ensure that the requesting token's user matches the customerId path parameter, or else admin override is required. All data is returned in paginated form to support users with many addresses.\n\nThis operation is related to address creation, update, and deletion endpoints, and is a primary part of customer self-service interfaces. Errors are returned if customerId is not found or the user is not authorized to view specified addresses.","summary":"Fetch a paginated list of addresses for a given customerId in shopping_mall_customer_addresses.","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose addresses should be fetched (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body to specify search, filtering, sorting, and pagination options for fetching address list.","typeName":"IShoppingMallCustomerAddress.IRequest"},"responseBody":{"description":"Paginated list of all address objects for the target customer, including details such as recipient, region, postal code, and is_default flag.","typeName":"IPageIShoppingMallCustomerAddress"},"authorizationRoles":["customer","admin"],"name":"index","path":"/shoppingMall/customer/customers/{customerId}/addresses","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"Fetches the list of all address entries managed by a given customer in the shopping mall. This operation allows customers to retrieve their full address book for viewing or management. Addresses are returned from the shopping_mall_customer_addresses table with complete data and in defined display order. This is a search/index operation supporting pagination, with advanced filtering or sorting by created_at, region, or is_default.","description":"Retrieve a paginated and optionally filtered list of all addresses registered by a specified customer. The API operates on the shopping_mall_customer_addresses table, using customer_id as the foreign key to retrieve addresses belonging to a single customer. All relevant address fields—recipient_name, phone, region, postal_code, address lines, is_default, and timestamps—are included per the Prisma column definitions.\n\nCustomers must be authenticated to fetch their own address book; authorization is enforced on customerId to ensure ownership. Advanced features support filtering by region, postal_code, or searching for partial address text, as well as sorting by created_at, updated_at, or is_default flag.\n\nThis endpoint is typically used in the account dashboard for browsing or managing shipping information, as well as in checkout workflows for selecting or updating delivery addresses. Security checks ensure that the requesting token's user matches the customerId path parameter, or else admin override is required. All data is returned in paginated form to support users with many addresses.\n\nThis operation is related to address creation, update, and deletion endpoints, and is a primary part of customer self-service interfaces. Errors are returned if customerId is not found or the user is not authorized to view specified addresses.","summary":"Fetch a paginated list of addresses for a given customerId in shopping_mall_customer_addresses.","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose addresses should be fetched (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body to specify search, filtering, sorting, and pagination options for fetching address list.","typeName":"IShoppingMallCustomerAddress.IRequest"},"responseBody":{"description":"Paginated list of all address objects for the target customer, including details such as recipient, region, postal code, and is_default flag.","typeName":"IPageIShoppingMallCustomerAddress"},"authorizationRoles":["customer","admin"],"name":"index","path":"/shoppingMall/admin/customers/{customerId}/addresses","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/auth/customer/email/request-verification","method":"post"},"description":"Customer must exist before their address list can be queried; use email verification initiation as the POST operation associated with customer creation."}]},{"specification":"Retrieve the detailed information of a specific customer address by customer ID and address ID. This operation allows an authenticated customer to view the full record of one of their saved shipping/billing addresses (recipient name, phone, region, postal code, address lines, is_default, timestamps, etc.). It is based on the shopping_mall_customer_addresses table which supports multiple addresses-per-customer, tied by customer_id and uniquely identified by addressId (UUID). Access is restricted to the owner/customer. All address lookups must validate that the requesting customer matches the address's customer_id and has not been soft-deleted (deleted_at is null), and that the addressId belongs to the specified customer. Returns full details of the address, suitable for detail views or pre-filling in order checkout and profile management interfaces.","description":"This operation enables an authenticated customer to retrieve the full details of a single address from their address book, identified by the specified addressId and customerId. It covers fields such as recipient name, phone number, region, postal code, address_line1 and address_line2, is_default flag, creation and updated timestamps, and soft-deletion status (address is ignored if deleted_at is not null).\n\nSecurity is enforced by ensuring only the owning customer (customerId) is allowed to view their own addresses; cross-customer access is forbidden. The operation returns a single address as defined in the shopping_mall_customer_addresses Prisma model, with all available fields. Any attempt to access an address not belonging to the customer, or a soft-deleted address, should return an appropriate error (not found or forbidden).\n\nThis operation is essential for the customer profile management flow, order checkout pre-fill, and address editing. It directly references the shopping_mall_customer_addresses table in the Prisma DB. Related API operations include updating (PUT) or deleting an address, as well as listing all addresses for a customer. Implementers must validate both the path parameters and apply authorization logic matching the business rule: only the address owner can view the address detail.","summary":"Get a specific customer address by customerId and addressId (shopping_mall_customer_addresses table)","parameters":[{"name":"customerId","description":"Unique identifier (UUID) of the customer who owns the address.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"Unique identifier (UUID) of the address to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the specified customer address, matching the shopping_mall_customer_addresses model. Includes all fields: id, customer_id, recipient_name, phone, region, postal_code, address_line1, address_line2, is_default, created_at, updated_at, deleted_at.","typeName":"IShoppingMallCustomerAddress"},"authorizationRoles":["customer"],"name":"at","path":"/shoppingMall/customer/customers/{customerId}/addresses/{addressId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/auth/customer/email/request-verification","method":"post"},"description":"Customer must exist before any owned address can be queried; use email verification initiation as the POST operation associated with customer creation."},{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"AddressId only exists if customer creates related resources; use wishlist creation as a proxy for a detailed owned resource since there is no explicit POST address operation in the available operations."}]},{"specification":"Update an existing customer address for the specified customer by addressId. This operation allows an authenticated customer to edit one of their own saved shipping/billing addresses, replacing fields such as recipient name, phone, region, postal code, address lines, or setting the address as default. It is based on the shopping_mall_customer_addresses table, which allows multiple addresses per customer, each identified by a unique id (addressId). Only the owning customer may update their own addresses, and updates are validated to ensure addressId matches the customerId, and the address has not been soft-deleted (deleted_at is null). Changing is_default to true will revoke default status for previous default addresses. All updates are audit-logged for compliance and change history.","description":"This operation allows an authenticated customer to update the information for a specific address in their address book, referenced by customerId and addressId. Supports updates to recipient_name, phone, region, postal_code, address_line1, address_line2, and is_default flag. The operation ensures only addresses belonging to the specified customer may be edited, and only if the address is not soft-deleted. Business logic enforces that if is_default is set to true, any previous default address for this customer is updated to is_default=false so that at most one default address exists per customer.\n\nSecurity is critical: only the owning customer is allowed to perform updates, and attempts to edit non-owned or deleted addresses are forbidden. The request body must match the IShoppingMallCustomerAddress.IUpdate type, referencing all updatable fields. Accurate timestamping and audit logging for compliance are required.\n\nThis relates directly to shopping_mall_customer_addresses in the Prisma schema. Related operations include get (GET) and delete (DELETE) address, and the update method must respect uniqueness and referential integrity for customerId/addressId. Proper error handling must distinguish between not found, forbidden, and validation errors.","summary":"Update an existing customer address for a customer (shopping_mall_customer_addresses table)","parameters":[{"name":"customerId","description":"Unique identifier (UUID) of the customer who owns the address.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"Unique identifier (UUID) of the address to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the customer address as defined in IShoppingMallCustomerAddress.IUpdate. Includes recipient name, phone, region, postal code, address lines, optional is_default flag, etc.","typeName":"IShoppingMallCustomerAddress.IUpdate"},"responseBody":{"description":"The newly updated full customer address record (after changes), with all fields per shopping_mall_customer_addresses model.","typeName":"IShoppingMallCustomerAddress"},"authorizationRoles":["customer"],"name":"update","path":"/shoppingMall/customer/customers/{customerId}/addresses/{addressId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Customer cart must be created to ensure the base customer resource is available. This enables valid address management underneath the customer context."}]},{"specification":"This operation removes a customer address from the shopping mall platform for the given customer. It operates on the shopping_mall_customer_addresses table in the Prisma schema and is responsible for hard-deleting (permanently removing) the address record. The operation ensures that only the address owner (the authenticated customer) or an admin with proper authority can invoke this endpoint. The database will permanently remove the address; recovery is not possible after this action. Relational integrity is maintained, and all address usage in ongoing orders or active shipments should be checked in the business logic before deletion is allowed. Deletion logic must ensure that the address belongs to the requesting customer and that, if it was the default address, another address must be set as default or the customer left with no default. Only addresses with a matching customerId and addressId path can be deleted via this operation.","description":"This operation provides a mechanism for customers to manage their own address book by removing an address entry. When the customer requests to delete an address, the system will verify that the address exists and is owned by the currently authenticated user. Only the address owner or administrators are permitted to invoke this operation, ensuring that private address data is secured against unauthorized deletion.\n\nUpon successful validation, the address is permanently removed from the shopping_mall_customer_addresses table. Since the column 'deleted_at' exists, this operation should perform a soft delete, marking the deleted_at timestamp instead of physically removing the row, in order to preserve deletion history for audit trails. Any attempt to delete an address that does not belong to the user should trigger a forbidden error.\n\nThe system must check for business logic such as whether the address is currently associated with pending orders or if it was the only or default address on file. Appropriate validation or error handling must communicate to the user if the address cannot be deleted due to these business constraints. Related APIs for managing addresses (add, update, set as default) should be referenced for complete address management flows.\n\nError handling covers edge cases such as trying to delete non-existent addresses, deleting another user's address, or attempting to remove the only default address without providing an alternative.","summary":"Soft-delete a customer's address (shopping_mall_customer_addresses table) with authorization and ownership checks.","parameters":[{"name":"customerId","description":"The unique identifier of the customer who owns the address being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"The unique identifier of the customer address to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/customers/{customerId}/addresses/{addressId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Customer cart must be created to guarantee that the main customer exists and is eligible for address deletion actions."}]},{"specification":"This operation removes a customer address from the shopping mall platform for the given customer. It operates on the shopping_mall_customer_addresses table in the Prisma schema and is responsible for hard-deleting (permanently removing) the address record. The operation ensures that only the address owner (the authenticated customer) or an admin with proper authority can invoke this endpoint. The database will permanently remove the address; recovery is not possible after this action. Relational integrity is maintained, and all address usage in ongoing orders or active shipments should be checked in the business logic before deletion is allowed. Deletion logic must ensure that the address belongs to the requesting customer and that, if it was the default address, another address must be set as default or the customer left with no default. Only addresses with a matching customerId and addressId path can be deleted via this operation.","description":"This operation provides a mechanism for customers to manage their own address book by removing an address entry. When the customer requests to delete an address, the system will verify that the address exists and is owned by the currently authenticated user. Only the address owner or administrators are permitted to invoke this operation, ensuring that private address data is secured against unauthorized deletion.\n\nUpon successful validation, the address is permanently removed from the shopping_mall_customer_addresses table. Since the column 'deleted_at' exists, this operation should perform a soft delete, marking the deleted_at timestamp instead of physically removing the row, in order to preserve deletion history for audit trails. Any attempt to delete an address that does not belong to the user should trigger a forbidden error.\n\nThe system must check for business logic such as whether the address is currently associated with pending orders or if it was the only or default address on file. Appropriate validation or error handling must communicate to the user if the address cannot be deleted due to these business constraints. Related APIs for managing addresses (add, update, set as default) should be referenced for complete address management flows.\n\nError handling covers edge cases such as trying to delete non-existent addresses, deleting another user's address, or attempting to remove the only default address without providing an alternative.","summary":"Soft-delete a customer's address (shopping_mall_customer_addresses table) with authorization and ownership checks.","parameters":[{"name":"customerId","description":"The unique identifier of the customer who owns the address being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"The unique identifier of the customer address to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/customers/{customerId}/addresses/{addressId}","method":"delete","prerequisites":[{"endpoint":{"path":"/auth/customer/password/request-reset","method":"post"},"description":"Customer must exist before their address can be managed or deleted."}]},{"specification":"This operation allows advanced searching, listing, and filtering of sellers registered on the platform. It queries the shopping_mall_sellers table in the Prisma schema, supporting various filter criteria such as business name, email, approval status, registration date, and KYC verification. The response is paginated and can be sorted by relevant fields including creation date, approval status, and business name. This operation is essential for admin dashboards and platform management tools to review, audit, and moderate sellers. Sensitive data is visible only to users with the admin role. Search logic may support partial matches, status filtering, and advanced sorting scenarios for platform operations.","description":"Administrators and platform operators can request this endpoint to search, retrieve, and manage the list of registered sellers. The operation provides robust filtering and pagination features, enabling admins to quickly locate sellers by their business name, contact details, registration time frame, and onboarding/approval status.\n\nThis endpoint helps admins to conduct compliance reviews, process KYC verifications, or monitor pending sellers. It also supports batch operations, analytics, and integration with other admin platform modules. Returned data includes key attributes such as seller business and contact details, approval status, registration info, and KYC documentation. Data access and filtering adhere strictly to security guidelines, and only users with roles such as admin can access detailed seller information.\n\nIn error or empty-result cases, the operation will return a paginated structure with zero results, and appropriate error codes are provided for unauthorized or invalid filter requests. Related endpoints include detailed seller lookups and updates for seller management.","summary":"Admin search and filter operation for registered sellers (shopping_mall_sellers table) with advanced pagination and security controls.","parameters":[],"requestBody":{"description":"Criteria for filtering, searching, and paginating the seller list. Supports fields such as business name, approval status, registration date, and sort options.","typeName":"IShoppingMallSeller.IRequest"},"responseBody":{"description":"Paginated response containing summary details of sellers matching criteria, including business information, status, and compliance fields.","typeName":"IPageIShoppingMallSeller.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/sellers","method":"patch","prerequisites":[]},{"specification":"This operation retrieves the full seller account details for a specific seller identified by their unique UUID. It is directly associated with the shopping_mall_sellers table in the Prisma schema, which stores all core seller account data including contact info, KYC documents, approval status, business registration number, and audit fields for account verification, activation, and status control. The operation is designed for both authenticated users who may need to view public seller details (for display on product pages, order tracking, reviews, etc.) and system administrators for full detail queries.\n\nThe operation ensures that only permitted fields are returned to the requester based on their authentication status and role. Sensitive information such as KYC documents or internal audit status is only shown to privileged roles (e.g., admin, or seller viewing their own data). Business rules enforce that the sellerId provided is a valid UUID and corresponds to an active or approved seller; otherwise, appropriate error messages are returned.\n\nSecurity is critical—each request is authenticated, and authorization checks ensure private fields are not exposed to unauthorized users. If the requesting user is an admin or the seller themselves, full details are presented, including all audit and compliance attributes. Otherwise, only public information is included. The operation's response conforms to the IShoppingMallSeller type, matching the Prisma schema for shopping_mall_sellers.","description":"Retrieve comprehensive seller account details by seller ID from the shopping_mall_sellers table. This operation supports both authenticated user and admin use-cases, providing business-critical data such as contact information, business entity, KYC status, and account history.\n\nPath parameter validation ensures that sellerId is a well-formed UUID and corresponds to an existing, active, or approved seller. Full details including KYC information, audit fields, and business registration numbers are returned only to admin users or the account owner; all other users see only public, non-sensitive fields for seller display purposes.\n\nThis endpoint supports audit compliance by including all relevant fields for administrative review. Role-based access control ensures marketplace transparency while protecting sensitive or private data. Error handling includes not-found responses for invalid IDs or disabled/suspended sellers, and 403 errors if a user attempts to access another seller's confidential information without proper permissions.\n\nFor related operations, see seller account update (PUT /sellers/{sellerId}) for account changes, and authenticated order/product queries for cross-entity validation and seller-product relationships.","summary":"Get complete seller account details by sellerId from shopping_mall_sellers table","parameters":[{"name":"sellerId","description":"Unique identifier of the target seller (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full seller account details conforming to Prisma shopping_mall_sellers","typeName":"IShoppingMallSeller"},"authorizationRoles":["admin","seller"],"name":"at","path":"/shoppingMall/admin/sellers/{sellerId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Seller must be created before their details can be retrieved by sellerId."}]},{"specification":"This operation retrieves the full seller account details for a specific seller identified by their unique UUID. It is directly associated with the shopping_mall_sellers table in the Prisma schema, which stores all core seller account data including contact info, KYC documents, approval status, business registration number, and audit fields for account verification, activation, and status control. The operation is designed for both authenticated users who may need to view public seller details (for display on product pages, order tracking, reviews, etc.) and system administrators for full detail queries.\n\nThe operation ensures that only permitted fields are returned to the requester based on their authentication status and role. Sensitive information such as KYC documents or internal audit status is only shown to privileged roles (e.g., admin, or seller viewing their own data). Business rules enforce that the sellerId provided is a valid UUID and corresponds to an active or approved seller; otherwise, appropriate error messages are returned.\n\nSecurity is critical—each request is authenticated, and authorization checks ensure private fields are not exposed to unauthorized users. If the requesting user is an admin or the seller themselves, full details are presented, including all audit and compliance attributes. Otherwise, only public information is included. The operation's response conforms to the IShoppingMallSeller type, matching the Prisma schema for shopping_mall_sellers.","description":"Retrieve comprehensive seller account details by seller ID from the shopping_mall_sellers table. This operation supports both authenticated user and admin use-cases, providing business-critical data such as contact information, business entity, KYC status, and account history.\n\nPath parameter validation ensures that sellerId is a well-formed UUID and corresponds to an existing, active, or approved seller. Full details including KYC information, audit fields, and business registration numbers are returned only to admin users or the account owner; all other users see only public, non-sensitive fields for seller display purposes.\n\nThis endpoint supports audit compliance by including all relevant fields for administrative review. Role-based access control ensures marketplace transparency while protecting sensitive or private data. Error handling includes not-found responses for invalid IDs or disabled/suspended sellers, and 403 errors if a user attempts to access another seller's confidential information without proper permissions.\n\nFor related operations, see seller account update (PUT /sellers/{sellerId}) for account changes, and authenticated order/product queries for cross-entity validation and seller-product relationships.","summary":"Get complete seller account details by sellerId from shopping_mall_sellers table","parameters":[{"name":"sellerId","description":"Unique identifier of the target seller (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full seller account details conforming to Prisma shopping_mall_sellers","typeName":"IShoppingMallSeller"},"authorizationRoles":["admin","seller"],"name":"at","path":"/shoppingMall/seller/sellers/{sellerId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Seller must be created before their details can be retrieved by sellerId."}]},{"specification":"This operation updates all editable fields of a seller account, given the seller's unique identifier (UUID). It is associated with the shopping_mall_sellers table in the Prisma schema, covering account details such as email, business name, contact details, KYC documents, operational approval status, and audit fields. The operation is available to either the owner seller (self-update) or an admin (account correction, approval, or sanctions).\n\nThe endpoint strictly validates the presence and permissions for the sellerId parameter, ensuring only authorized users can update the record. The request body must match the IShoppingMallSeller.IUpdate DTO, containing all updatable properties for the seller profile, per business validation constraints (e.g., valid email, unique business registration, valid KYC URI, correct approval status role transitions).\n\nAll changes are audited with timestamped update fields for accountability. Fields not permitted for regular sellers (such as approval_status) require admin-level access—role-based validation is enforced before any such updates. The operation returns the updated seller object without sensitive or internal audit information unless the caller is an admin.","description":"Update a seller account record in the shopping_mall_sellers table, identified by sellerId. Supports both self-service seller profile maintenance and privileged admin updates for account management, KYC, or business registration corrections.\n\nThe request body schema IShoppingMallSeller.IUpdate requires all updatable seller fields as defined in the Prisma schema. Input validation enforces business logic such as unique email and registration number, correct phone and URI formats, and restricted updates for status fields depending on role. On successful validation and authorization, the record is updated and the updated seller profile is returned as response.\n\nAdmin actions are fully audited—updates to approval_status, KYC, or sensitive attributes generate audit logs with admin identity and reason for accountability. Sellers may update their own basic contact info and KYC submissions but cannot self-approve, suspend, or delete their own accounts. Role-based error handling is in place with descriptive error responses for unauthorized or invalid data changes. For related workflows, see seller registration and admin dashboard moderation tools.","summary":"Update seller account information for sellerId in shopping_mall_sellers table","parameters":[{"name":"sellerId","description":"Unique identifier of the seller to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All updatable seller account fields as per IShoppingMallSeller.IUpdate schema","typeName":"IShoppingMallSeller.IUpdate"},"responseBody":{"description":"Updated seller object reflecting new profile and status","typeName":"IShoppingMallSeller"},"authorizationRoles":["admin","seller"],"name":"update","path":"/shoppingMall/admin/sellers/{sellerId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates all editable fields of a seller account, given the seller's unique identifier (UUID). It is associated with the shopping_mall_sellers table in the Prisma schema, covering account details such as email, business name, contact details, KYC documents, operational approval status, and audit fields. The operation is available to either the owner seller (self-update) or an admin (account correction, approval, or sanctions).\n\nThe endpoint strictly validates the presence and permissions for the sellerId parameter, ensuring only authorized users can update the record. The request body must match the IShoppingMallSeller.IUpdate DTO, containing all updatable properties for the seller profile, per business validation constraints (e.g., valid email, unique business registration, valid KYC URI, correct approval status role transitions).\n\nAll changes are audited with timestamped update fields for accountability. Fields not permitted for regular sellers (such as approval_status) require admin-level access—role-based validation is enforced before any such updates. The operation returns the updated seller object without sensitive or internal audit information unless the caller is an admin.","description":"Update a seller account record in the shopping_mall_sellers table, identified by sellerId. Supports both self-service seller profile maintenance and privileged admin updates for account management, KYC, or business registration corrections.\n\nThe request body schema IShoppingMallSeller.IUpdate requires all updatable seller fields as defined in the Prisma schema. Input validation enforces business logic such as unique email and registration number, correct phone and URI formats, and restricted updates for status fields depending on role. On successful validation and authorization, the record is updated and the updated seller profile is returned as response.\n\nAdmin actions are fully audited—updates to approval_status, KYC, or sensitive attributes generate audit logs with admin identity and reason for accountability. Sellers may update their own basic contact info and KYC submissions but cannot self-approve, suspend, or delete their own accounts. Role-based error handling is in place with descriptive error responses for unauthorized or invalid data changes. For related workflows, see seller registration and admin dashboard moderation tools.","summary":"Update seller account information for sellerId in shopping_mall_sellers table","parameters":[{"name":"sellerId","description":"Unique identifier of the seller to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All updatable seller account fields as per IShoppingMallSeller.IUpdate schema","typeName":"IShoppingMallSeller.IUpdate"},"responseBody":{"description":"Updated seller object reflecting new profile and status","typeName":"IShoppingMallSeller"},"authorizationRoles":["admin","seller"],"name":"update","path":"/shoppingMall/seller/sellers/{sellerId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a seller account from the platform. It acts on the shopping_mall_sellers table and removes all associated seller records. The system will block deletion if the seller has active or pending orders requiring fulfillment, in compliance with core business requirements and data integrity policy. This operation will also cascade remove or disassociate related entities per foreign key constraints and may trigger deactivation or reassignment of the seller's products, inventory, and other dependencies as defined by the schema and platform logic. Security and audit logs are updated to record the deletion event, and only admins may perform this operation.","description":"This API endpoint irreversibly removes a seller account from the platform by deleting the associated row in the shopping_mall_sellers table. Only administrators are authorized to execute this action. If the seller is responsible for any active, pending, or historical orders that are not in a terminal state, the system will block the deletion and return an explanatory error to the admin user initiating the request.\n\nThe deletion is performed as a hard delete since the schema supports a soft delete timestamp (deleted_at), but a DELETE operation here is interpreted as an intent for permanent removal. Upon successful completion, the operation will invalidate the seller's authentication and access rights, deactivate their products (making them unavailable for purchase), and update all audit and action logs to ensure full traceability and compliance with platform audit policies. All child records such as products, inventory owned by the seller, and address information will be cascaded or re-associated as per foreign key rules.\n\nEvent logging will capture the admin identity, deletion rationale, and all affected entity IDs for compliance and investigation purposes. If attempted on a seller with open obligations (for example, unresolved orders or active SKUs with inventory), the system will refuse the operation with a clear, actionable error, consistent with the requirements specification referencing irreversible business actions and regulatory constraints.","summary":"Permanently delete a seller account from the shopping_mall_sellers table, along with all associated data, if eligible.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/sellers/{sellerId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/roles","method":"post"},"description":"A system role must exist so it can be assigned to the admin executing the seller deletion, ensuring that only properly authorized admin users perform irreversible account removals."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Admin must create a product to ensure the platform setup before manipulating sellers on the system, in line with general business workflow initialization."}]},{"specification":"This operation retrieves the complete list of addresses registered by a specific seller. It is based on the shopping_mall_seller_addresses table, supporting advanced filtering, sorting, and pagination of address records associated with the specified sellerId. The endpoint is accessible by the authenticated seller or platform admins and includes all address fields defined in the schema: type, recipient_name, phone, region, postal_code, address lines, type, is_primary, and timestamps. Used for displaying business, shipping, or return address information to the seller dashboard or admin tools.","description":"This API endpoint returns a paginated list of all addresses registered by the seller specified by sellerId. The result includes all fields defined in the shopping_mall_seller_addresses table, such as recipient_name, phone, region, postal_code, address lines, type (business/shipping/return), and is_primary flag. Filtering, sorting, search, and pagination parameters may be accepted via request body for large address books, though typical usage would return a manageable number of address entries per seller.\n\nThis operation can be accessed by the seller themselves, for use in the seller dashboard, or by admins managing seller information for compliance or operational support. The endpoint validates that the caller has the necessary permissions—seller (must be their own addresses) or admin (platform-wide view). Address details may be masked or redacted for other roles as per platform privacy rules. The business logic supports real-time reflection of updates, and changes to these addresses are propagated across the shipping and order fulfillment modules as referenced in the shopping_mall_orders entity.\n\nSecurity considerations include strict authorization matching sellerId to authenticated identity (unless admin), granular control of address updates, and audit logging for all accesses to ensure GDPR and business policy compliance.","summary":"Retrieve all addresses for a specific seller from shopping_mall_seller_addresses, supporting filtering and pagination.","parameters":[{"name":"sellerId","description":"Unique identifier of the target seller whose addresses are retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for seller address search. May be omitted to fetch all addresses without filters.","typeName":"IShoppingMallSellerAddress.IRequest"},"responseBody":{"description":"Paginated list of all seller addresses matching filter criteria or all for the seller if no filters are applied. Each entry contains detailed address information for use in the seller dashboard or admin tools.","typeName":"IPageIShoppingMallSellerAddress"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/seller/sellers/{sellerId}/addresses","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product creation is a fundamental administrative action. Ensuring a product exists for business context before address list operations aligns with e-commerce lifecycle and system prerequisites."}]},{"specification":"This operation retrieves the complete list of addresses registered by a specific seller. It is based on the shopping_mall_seller_addresses table, supporting advanced filtering, sorting, and pagination of address records associated with the specified sellerId. The endpoint is accessible by the authenticated seller or platform admins and includes all address fields defined in the schema: type, recipient_name, phone, region, postal_code, address lines, type, is_primary, and timestamps. Used for displaying business, shipping, or return address information to the seller dashboard or admin tools.","description":"This API endpoint returns a paginated list of all addresses registered by the seller specified by sellerId. The result includes all fields defined in the shopping_mall_seller_addresses table, such as recipient_name, phone, region, postal_code, address lines, type (business/shipping/return), and is_primary flag. Filtering, sorting, search, and pagination parameters may be accepted via request body for large address books, though typical usage would return a manageable number of address entries per seller.\n\nThis operation can be accessed by the seller themselves, for use in the seller dashboard, or by admins managing seller information for compliance or operational support. The endpoint validates that the caller has the necessary permissions—seller (must be their own addresses) or admin (platform-wide view). Address details may be masked or redacted for other roles as per platform privacy rules. The business logic supports real-time reflection of updates, and changes to these addresses are propagated across the shipping and order fulfillment modules as referenced in the shopping_mall_orders entity.\n\nSecurity considerations include strict authorization matching sellerId to authenticated identity (unless admin), granular control of address updates, and audit logging for all accesses to ensure GDPR and business policy compliance.","summary":"Retrieve all addresses for a specific seller from shopping_mall_seller_addresses, supporting filtering and pagination.","parameters":[{"name":"sellerId","description":"Unique identifier of the target seller whose addresses are retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for seller address search. May be omitted to fetch all addresses without filters.","typeName":"IShoppingMallSellerAddress.IRequest"},"responseBody":{"description":"Paginated list of all seller addresses matching filter criteria or all for the seller if no filters are applied. Each entry contains detailed address information for use in the seller dashboard or admin tools.","typeName":"IPageIShoppingMallSellerAddress"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/admin/sellers/{sellerId}/addresses","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific address associated with a seller account. It is associated with the shopping_mall_seller_addresses table in the Prisma schema, which manages multiple addresses per seller (such as business, shipping, and return addresses). The address is uniquely identified by its addressId within the context of a particular seller (sellerId). The endpoint is used to allow sellers or admins (with permission) to view detailed address information necessary for logistics, support, and business functions. All returned data fields are aligned with the shopping_mall_seller_addresses schema and may be used for display in seller dashboards or administrative tools.","description":"Fetch detailed information for a seller's address, identified by sellerId and addressId, from the shopping_mall_seller_addresses table. This address may represent the seller's business, shipping, or return address, as specified in the 'type' field of the schema.\n\nThis operation enforces strict access control, so only the owner seller, authorized admins, or system processes with elevated privileges may access the address details. The endpoint supports retrieval for real-time management of seller profiles or for use during order and logistics workflows. Returned details include all address fields such as recipient_name, phone, region, postal_code, address_line1 and 2, is_primary, and timestamps for creation and update.\n\nIf the seller or address does not exist, or if access is denied, the operation responds with appropriate error statuses such as 404 (Not Found) or 403 (Forbidden). This operation is commonly followed by address update, delete, or assignment functionalities to maintain consistent seller data integrity.","summary":"Retrieve a seller's address detail by addressId from shopping_mall_seller_addresses.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller who owns the address","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"Unique identifier of the seller's address to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed address record for a seller as defined in shopping_mall_seller_addresses.","typeName":"IShoppingMallSellerAddress"},"authorizationRoles":["seller","admin"],"name":"at","path":"/shoppingMall/seller/sellers/{sellerId}/addresses/{addressId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific address associated with a seller account. It is associated with the shopping_mall_seller_addresses table in the Prisma schema, which manages multiple addresses per seller (such as business, shipping, and return addresses). The address is uniquely identified by its addressId within the context of a particular seller (sellerId). The endpoint is used to allow sellers or admins (with permission) to view detailed address information necessary for logistics, support, and business functions. All returned data fields are aligned with the shopping_mall_seller_addresses schema and may be used for display in seller dashboards or administrative tools.","description":"Fetch detailed information for a seller's address, identified by sellerId and addressId, from the shopping_mall_seller_addresses table. This address may represent the seller's business, shipping, or return address, as specified in the 'type' field of the schema.\n\nThis operation enforces strict access control, so only the owner seller, authorized admins, or system processes with elevated privileges may access the address details. The endpoint supports retrieval for real-time management of seller profiles or for use during order and logistics workflows. Returned details include all address fields such as recipient_name, phone, region, postal_code, address_line1 and 2, is_primary, and timestamps for creation and update.\n\nIf the seller or address does not exist, or if access is denied, the operation responds with appropriate error statuses such as 404 (Not Found) or 403 (Forbidden). This operation is commonly followed by address update, delete, or assignment functionalities to maintain consistent seller data integrity.","summary":"Retrieve a seller's address detail by addressId from shopping_mall_seller_addresses.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller who owns the address","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"Unique identifier of the seller's address to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed address record for a seller as defined in shopping_mall_seller_addresses.","typeName":"IShoppingMallSellerAddress"},"authorizationRoles":["seller","admin"],"name":"at","path":"/shoppingMall/admin/sellers/{sellerId}/addresses/{addressId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing seller address in the shopping_mall_seller_addresses table. It allows the seller (or an admin) to modify the details of a specific address, including recipient name, phone, region, postal code, address lines, type, and primary status. Each address is uniquely identified by the combination of sellerId and addressId parameters. Only authorized sellers and administrators are permitted to update address information; strict business rules ensure that data integrity and security are maintained.","description":"Update an existing seller's address, identified by sellerId and addressId. Updates are only allowed to fields as per the shopping_mall_seller_addresses Prisma model, which supports recipient_name, phone, region, postal_code, address_line1, address_line2, type, and primary status. Input validation enforces required fields and proper formatting of addresses (including region and postal_code).\n\nSecurity is enforced such that updates are restricted to the seller who owns the address or an admin with elevated privileges. Setting an address to primary must not violate the unique constraint of only one primary address per seller/type, and business logic must handle this atomically. Attempts to update a non-existent address or without proper authorization result in appropriate errors (e.g., 404 or 403).\n\nThis operation is typically used in seller profile management or during admin-corrective actions for compliance and logistics updates. It is recommended to retrieve the latest address state before attempting an update to prevent lost updates due to concurrent changes or outdated client data.","summary":"Update a seller's address data for a given addressId in shopping_mall_seller_addresses.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller who owns the address","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"Unique identifier of the seller's address to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating a seller's address. Must follow IShoppingMallSellerAddress.IUpdate DTO schema.","typeName":"IShoppingMallSellerAddress.IUpdate"},"responseBody":{"description":"The updated seller address record after applying changes.","typeName":"IShoppingMallSellerAddress"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/seller/sellers/{sellerId}/addresses/{addressId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing seller address in the shopping_mall_seller_addresses table. It allows the seller (or an admin) to modify the details of a specific address, including recipient name, phone, region, postal code, address lines, type, and primary status. Each address is uniquely identified by the combination of sellerId and addressId parameters. Only authorized sellers and administrators are permitted to update address information; strict business rules ensure that data integrity and security are maintained.","description":"Update an existing seller's address, identified by sellerId and addressId. Updates are only allowed to fields as per the shopping_mall_seller_addresses Prisma model, which supports recipient_name, phone, region, postal_code, address_line1, address_line2, type, and primary status. Input validation enforces required fields and proper formatting of addresses (including region and postal_code).\n\nSecurity is enforced such that updates are restricted to the seller who owns the address or an admin with elevated privileges. Setting an address to primary must not violate the unique constraint of only one primary address per seller/type, and business logic must handle this atomically. Attempts to update a non-existent address or without proper authorization result in appropriate errors (e.g., 404 or 403).\n\nThis operation is typically used in seller profile management or during admin-corrective actions for compliance and logistics updates. It is recommended to retrieve the latest address state before attempting an update to prevent lost updates due to concurrent changes or outdated client data.","summary":"Update a seller's address data for a given addressId in shopping_mall_seller_addresses.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller who owns the address","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"Unique identifier of the seller's address to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating a seller's address. Must follow IShoppingMallSellerAddress.IUpdate DTO schema.","typeName":"IShoppingMallSellerAddress.IUpdate"},"responseBody":{"description":"The updated seller address record after applying changes.","typeName":"IShoppingMallSellerAddress"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/admin/sellers/{sellerId}/addresses/{addressId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a specific address belonging to a seller. It operates on the shopping_mall_seller_addresses table in the Prisma schema, ensuring that only addresses uniquely identified by the provided sellerId and addressId path parameters are affected. The deletion enforces address ownership, preventing unauthorized access or deletion of another seller's address. Upon successful deletion, all associated shipments, inventory origins, or product return relationships that reference this address should be validated or updated as per business logic. Audit logging and compliance checks should also be enforced in accordance with platform oversight policies. This is a hard delete per the schema, as the deleted_at field is nullable and used for logical deletion tracking.","description":"This API operation allows a seller to permanently delete a specific address linked to their account. The target is the shopping_mall_seller_addresses table, which stores all addresses that a seller may use for business, shipping, or returns. Only the seller associated with the addressId is authorized to delete it, and the implementation must enforce strict ownership validation to prevent cross-account deletions. \n\nThe deletion process updates the deleted_at timestamp, treating the address as logically removed from the system. Relationships with other entities referencing this address, such as product shipment origins or returns, should be validated to prevent orphan records, and the operation must handle related business logic accordingly. Audit logging is mandatory for compliance and incident tracing. \n\nBusiness rules require that the address must not be set as primary or in active use for ongoing orders or shipments at the time of deletion; if it is, the operation should return an actionable error. This endpoint is intended for authenticated sellers and is not accessible by customers or admins, reinforcing the strong separation of role privileges across the system.","summary":"Permanently delete a seller's address from the shopping_mall_seller_addresses table by sellerId and addressId.","parameters":[{"name":"sellerId","description":"Unique identifier of the seller who owns the address.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"Unique identifier of the seller's address to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller"],"name":"erase","path":"/shoppingMall/seller/sellers/{sellerId}/addresses/{addressId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of all admin accounts on the e-commerce platform, supporting advanced search criteria. It operates on the shopping_mall_admins table in the Prisma schema, allowing platform-level administrators to view, audit, and manage all admin users. Filtering and pagination options support key attributes such as admin status, name, and creation date. Data returned includes core admin profile details but omits sensitive authentication fields such as password hashes and two-factor secrets. Operations on this endpoint are for system compliance, monitoring, and access control only, with access strictly restricted to authorized platform administrators.","description":"This API operation allows platform-level administrators to retrieve a list of all admin user accounts, with advanced filtering and pagination support. Operating on the shopping_mall_admins entity, it is intended for administrative dashboard tooling and compliance reporting, not general user or seller access. The operation supports powerful search capabilities over fields such as account status, admin name, and account creation date, enabling the supervision of multiple admin accounts across the platform. \n\nReturned results exclude sensitive information such as password hashes, two-factor secrets, and other confidential fields to ensure compliance with security best practices. The implementation is required to audit all access to this endpoint for compliance purposes. Only users with the admin role are permitted to use this endpoint; all other users must receive a clear unauthorized error response. This endpoint is foundational for operational security and audit oversight in the shoppingMall system.","summary":"List and search shopping_mall_admins with filtering and pagination for dashboard monitoring.","parameters":[],"requestBody":{"description":"Filter criteria and pagination options for searching admin users.","typeName":"IShoppingMallAdmin.IRequest"},"responseBody":{"description":"Paginated result set with filtered list of admin user profiles (excluding sensitive authentication data).","typeName":"IPageIShoppingMallAdmin.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/admins","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves complete details for a single administrator (admin) account based on the specified adminId. It directly operates on the shopping_mall_admins table from the Prisma schema, which stores credentials, permissions, profile attributes, status, and 2FA configuration for all platform administrators. The operation allows viewing of one administrator's profile, status, and core metadata for audit or management purposes.","description":"This API operation returns detailed information about the administrator account identified by the adminId parameter. Its core function is to provide full visibility into the selected admin's core profile fields (such as email, full name, status, 2FA setup) and critical audit timestamps. It incorporates all security attributes, including account status (active, disabled, suspended), email address, last login timestamp, and optional two-factor authentication secret.\n\nSecurity considerations are critical. This endpoint should be restricted strictly to users with appropriate admin privileges, require authentication, and never expose the password hash to client-side consumers. Relationship to underlying database is one-to-one with the shopping_mall_admins schema table, guaranteeing synchronous reflection of all profile and audit changes.\n\nAny attempt to access a non-existent or logically deleted administrator should result in a clear not-found error. The operation supports integration with admin audit or action log views. Related endpoints include update, erase, or authentication operations for administrator accounts. Output never includes related logs or tokens—only core admin table columns. Error handling ensures proper messaging for authorization failures or invalid admin IDs.","summary":"Retrieve the full detail for a given administrator (shopping_mall_admins) by adminId.","parameters":[{"name":"adminId","description":"Unique identifier for the target administrator (shopping_mall_admins.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete administrator profile and audit fields as returned from the shopping_mall_admins schema entity, excluding the password_hash.","typeName":"IShoppingMallAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/admins/{adminId}","method":"get","prerequisites":[]},{"specification":"This operation updates profile details for a single system administrator (admin) account, addressing changes to name, status, email, 2FA configuration, or other updatable attributes. It operates on the shopping_mall_admins table in the database, and restricts access to users with admin privileges to ensure compliance, security, and operational integrity.","description":"This API operation allows authorized admin users to modify the attributes of an existing administrator account, identified by adminId. Updatable fields may include full name, account status (active, suspended, disabled), email address, and two-factor authentication settings, while the password is typically managed through a separate reset/change flow.\n\nSecurity is paramount: only users with verified admin role can update admin accounts, and audit trails must be written for every update for compliance with platform requirements. Validations are enforced to prevent duplicate emails, improper status transitions, or loss of audit data. The shopping_mall_admins model is updated atomically, with timestamp columns updated according to business logic.\n\nUpon successful update, the operation returns the newly updated administrator entity as a response. Errors are handled elegantly with messages for not found, duplicate, or invalid input. This operation is closely related to admin creation, deletion, and detail/retrieve operations, and strongly relies on the Prisma schema comments for administrative security logic.","summary":"Update administrator profile and security attributes by adminId (shopping_mall_admins).","parameters":[{"name":"adminId","description":"Unique identifier of the admin to be updated (shopping_mall_admins.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Administrator update fields for profile, status, email, or 2FA. See IShoppingMallAdmin.IUpdate for permitted properties.","typeName":"IShoppingMallAdmin.IUpdate"},"responseBody":{"description":"Updated administrator profile including all audit fields, after successful update.","typeName":"IShoppingMallAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/admins/{adminId}","method":"put","prerequisites":[]},{"specification":"This operation permanently deletes an admin account from the shopping mall platform, removing all credentials, profile data, and related admin entity associations from the database. It operates on the shopping_mall_admins table as defined in the Prisma schema, which contains columns including id (primary key), email, password_hash, full_name, status, two_factor_secret, and other attributes for audit and security compliance. All deletion actions are permanent and unrecoverable—there is no soft delete for this entity. The operation is restricted to authorized super-admin personnel and triggers a full audit log entry for compliance.","path":"/shoppingMall/admin/admins/{adminId}","method":"delete","summary":"Permanently remove a system admin account (shopping_mall_admins table) by ID","description":"This API operation is used to permanently remove an administrator account from the system. It references the shopping_mall_admins table in the Prisma schema, deleting the account and all associated authentication information, two-factor secrets, and audit references. \n\nThis action can only be performed by a user with sufficient privileges (e.g., super-admin or system operator) and is restricted to scenarios where account removal is necessary for compliance, offboarding, or platform security.\n\nUpon execution, the admin record is fully removed from the database rather than being soft-deleted, as the deleted_at column will be set if logical deletion is implemented, but if hard delete is specified, the record is physically removed and cannot be restored. Related logs or entities referencing the removed admin remain for audit trail integrity, but this user will lose all access rights immediately.\n\nAppropriate role checks and operation blocking are enforced at the business logic level to prevent accidental or unauthorized deletions. Any failed attempts (e.g., due to lack of permission or invalid adminId) return clear error messages for troubleshooting.\n\nOperation is expected to return no response body. Errors are handled per platform conventions for authorization/validation failures.","parameters":[{"name":"adminId","description":"Unique identifier of the administrator account to permanently delete (shopping_mall_admins.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated and filterable list of all system roles from the shopping_mall_roles table. Each role defines a type of user or permission grouping in the platform (e.g., CUSTOMER, SELLER, ADMIN) and is identified by a unique role_name. The endpoint supports advanced querying including keyword search, filtering by role, and customizable sort/pagination options. This is crucial for the admin dashboard to manage or review role assignments and permissions across the system.","path":"/shoppingMall/admin/roles","method":"patch","summary":"Search and retrieve paginated, filtered role definitions from shopping_mall_roles","description":"This API retrieves a joined, paginated list of roles configured in the system, referencing the shopping_mall_roles table from the Prisma schema. The roles table provides role_name (unique) and description fields, supporting search by name/description and filtering for permission management workflows.\n\nThe platform uses roles to assign user capabilities (e.g., CUSTOMER, ADMIN, SELLER), shaping access control and dashboard views. This endpoint allows privileged users (typically admins) to view and filter all current role definitions, with support for search keywords (with GIN/Trigram indexes), sort by creation/update date, and custom pagination (page size, offset).\n\nReturned results provide complete role metadata for client-side permission matrix rendering, internal audits, and user administration screens. Errors and edge cases (e.g., empty results, malformed queries) will trigger standard platform error responses.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for querying role definitions","typeName":"IShoppingMallRole.IRequest"},"responseBody":{"description":"Paginated list of roles matching search/filter with full metadata for each","typeName":"IPageIShoppingMallRole"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific system role based on its unique role identifier. It operates on the shopping_mall_roles table from the Actors namespace in the Prisma schema. Each role in the shoppingMall platform is centrally defined here for controlled user assignment, internationalization, and fine-grained permission explanation. The operation requires the unique roleId (a UUID) as a path parameter, enabling clients or admins to fetch the role metadata for account management, role auditing, or RBAC workflows.","description":"Fetch complete information about a platform role (e.g., CUSTOMER, SELLER, ADMIN) using the role's unique identifier from the shopping_mall_roles table. The operation is essential for admin dashboards, auditing, or any UI that enumerates or manages roles.\n\nThis API is intended for admin or system use to allow determination and explanation of user permissions, not for direct customer interaction. The detailed response includes roleName, description, and metadata fields for audit. Unauthorized or non-existent roleId queries will return an error according to business rules.\n\nOnly admin-level users should have direct access to this endpoint. All requests are audited. This operation has no requestBody since all parameters are in the path.","summary":"Retrieve details of a specific system role by roleId (shopping_mall_roles).","parameters":[{"name":"roleId","description":"Unique identifier for the target role (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete role object, containing roleName, description, and audit fields.","typeName":"IShoppingMallRole"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/roles/{roleId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/roles","method":"post"},"description":"Role must be created before its details can be retrieved using roleId"}]},{"specification":"This operation creates a new system role in the shopping_mall_roles table for controlled role management by platform administrators. Roles are used to assign access control, feature gating, and permissions across the shoppingMall e-commerce platform. Each role requires a globally unique roleName (uppercase, like 'CUSTOMER', 'SELLER', 'ADMIN') and a description that explains its permissions or intended use. Role creation is reserved for admin users via the admin dashboard or API clients.","description":"This API allows platform administrators to define and create new system roles for RBAC (role-based access control) scenarios. It inserts a role record with a unique name and descriptive documentation. The operation validates for uniqueness on roleName and requires both the roleName and description fields as input.\n\nRole creation affects user management, permission matrix, and must propagate to all RBAC subsystems. All create operations are audited for compliance and traceability. The endpoint is strictly limited to admins; unauthorized access is denied with auditing.\n\nNo soft-delete is performed on creation; the role is inserted and becomes available for assignment to new or existing users immediately after creation.","summary":"Create a new system role in shopping_mall_roles (admin only).","parameters":[],"requestBody":{"description":"Information required for creating a new role, including roleName and description.","typeName":"IShoppingMallRole.ICreate"},"responseBody":{"description":"The created role object with all fields, suitable for platform-wide use.","typeName":"IShoppingMallRole"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/roles","method":"post","prerequisites":[]},{"specification":"This operation allows an administrator to update the detailed information or permissions of a system-defined role in the shopping mall platform. The operation acts on the 'shopping_mall_roles' table in the Prisma schema, and supports updating a role's display name, description, or other metadata. Each role uniquely controls the set of permissions and platform access for customers, sellers, and admins. This endpoint is crucial for managing changes to role definitions as the business evolves, including the addition of new permissions, changing descriptions, or minor role name corrections.","description":"Update the information for a specific system role by its role ID. This operation is core to the administration of access control on the e-commerce platform. Only platform administrators are authorized to execute this operation, as improper role modifications could jeopardize platform security or user access.\n\nWhen called, it updates attributes on the 'shopping_mall_roles' table, such as 'role_name' (e.g., CUSTOMER, SELLER, ADMIN), and 'description' (permission explanation). It enforces uniqueness of the 'role_name' property, and validation ensures the updated role definition does not conflict with existing assignments or violate platform invariants. Changes are immediately reflected across all permission checks, and all updates are logged for audit purposes.\n\nThis API provides transactional guarantees for role editing: if the update would violate uniqueness or referential constraints, an error is returned. Role updates are critical for responding to evolving business requirements, regulatory needs, or new features that impact permission matrices.","summary":"Update an existing platform role (shopping_mall_roles table) by its ID.","parameters":[{"name":"roleId","description":"Unique identifier for the role to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to update the target role. Includes fields such as role_name and description.","typeName":"IShoppingMallRole.IUpdate"},"responseBody":{"description":"The updated system role with all its new attributes.","typeName":"IShoppingMallRole"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/roles/{roleId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/roles","method":"post"},"description":"Role must exist before it can be updated. Use the role creation endpoint to create a system role prior to updating its metadata or permissions."}]},{"specification":"This operation allows an administrator to permanently remove a role definition from the platform by specifying its unique role ID. The operation targets the 'shopping_mall_roles' table in the Prisma schema. This is an administrative action intended only for cases where a role is obsolete, duplicate, or otherwise no longer required for platform business logic. Removal of system roles requires careful validation to ensure no users are currently assigned the role to be deleted.","description":"Delete an existing system role from the platform's role registry by its unique ID. This action is restricted to platform administrators due to its impact on access control and permission matrices.\n\nOn invocation, this operation checks referential integrity: if any users or entities are still assigned the role, the operation is blocked and an error is returned. The delete is a hard removal based on the absence of a soft-delete field in the 'shopping_mall_roles' table. All deletions are logged for audit and compliance. Removing a role cannot be undone and could have system-wide effects if the role was used in access decisions.\n\nAppropriate error checks, validation of constraints, and confirmation of non-assignment of users are critical for successful execution of this operation. Documentation and approval flows should be in place before attempting to delete a role. Attempts to delete system-critical roles should be guarded by additional business policy checks.","summary":"Permanently remove a platform role (shopping_mall_roles table) by its ID.","parameters":[{"name":"roleId","description":"Unique identifier for the role to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/roles/{roleId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/roles","method":"post"},"description":"A role must be created before it can be deleted."}]},{"specification":"This operation retrieves a filtered and paginated list of products from the e-commerce catalog. It is based on the shopping_mall_products table in the Prisma schema and supports advanced filtering by category, search keyword, price range, seller, product status, and option values. The API enables complex product search and discovery workflows for customers, guests, and sellers, returning product summary information optimized for fast list display with optional advanced details per request. The operation also integrates sorting (e.g., best match, newest, price, rating) and pagination controls to provide responsive catalog browsing with support for very large inventories.","description":"Retrieve a filtered and paginated list of products from the shopping mall catalog. This operation enables users to discover products by applying advanced search criteria including free-text query, category, seller, price range, and variant options such as color or size. Filtering logic leverages the denormalized and indexed shopping_mall_products table, which is designed for rapid search and listing of active products and their associations. \n\nSecurity consideration: Listing/search APIs are public, but may include customer-specific pricing or personalization if the requester is authenticated. This API does not expose unpublished or disabled products—only items with is_active true and category in active state appear. Rate limiting and abuse protection are recommended to prevent scraping, and automatic cache invalidation is triggered on catalog changes.\n\nSupported business logic: The response contains only published and in-stock products, honoring inventory availability and business rules as outlined in the requirements. Pagination, sorting, and total count metadata allow efficient UI/UX implementation. Error handling includes validation for invalid filters, non-existent categories, and oversized result sets (top 1,000 cap enforced for queries with extreme volume).\n\nRelated operations: Use GET /products/{productId} for full product detail, PATCH /products for search/filter/pagination. The underlying Prisma shopping_mall_products model is joined internally to catalog category and SKU tables for advanced search. This API conforms to user-facing read-only catalog patterns, not used for product creation or inventory update.","summary":"Retrieve a filtered and paginated list of products for catalog search and browsing.","parameters":[],"requestBody":{"description":"Advanced product search/filter criteria and pagination options.","typeName":"IShoppingMallProduct.IRequest"},"responseBody":{"description":"Paginated list of product summaries matching search/filter parameters.","typeName":"IPageIShoppingMallProduct.ISummary"},"authorizationType":null,"authorizationRole":null,"path":"/shoppingMall/products","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"A category must be created before products can be associated to it and searched by category_id."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"A product must be created before it can be retrieved, searched, or filtered in the product list."}]},{"specification":"This operation retrieves the detailed information for a single product given its unique identifier (UUID). It operates on the shopping_mall_products table and provides all product details, including metadata, description, images, variants (SKUs), inventory status, seller reference, category, and aggregated ratings. Intended for product detail pages and link previews, the operation ensures only active and published products are returned, with access restrictions for unpublished or disabled items enforced.","description":"Fetch a single product and all associated details by productId. This read-only operation joins shopping_mall_products with SKUs, images, options, category, and seller information, returning a full product record suitable for detail view or deep linking from search, wishlist, or order history. ProductId is a required path parameter and must be a valid UUID referencing an existing, published product.\n\nThe response incorporates both denormalized product fields (name, description, images, prices, active state) and related entities (variant options, in-stock status, seller profile, category tree, and reviews aggregation if applicable). If the product does not exist or is inactive/soft-deleted, the API returns a not-found or forbidden error according to business rules. Only published, non-deleted products can be accessed using this operation.\n\nSecurity: Public access to this endpoint is allowed; however, unpublished/deleted or non-active products are not queryable by regular users. Business rules ensure catalog integrity and prevent exposure of restricted items. This relates directly to the shopping_mall_products entity and pulls all necessary associations for product presentation on detail screens.","summary":"Get full product detail by productId for catalog or detail view.","parameters":[{"name":"productId","description":"The unique identifier (UUID) of the product to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product entity with all metadata, variants, category, images, and ratings.","typeName":"IShoppingMallProduct"},"authorizationType":null,"authorizationRole":null,"path":"/shoppingMall/products/{productId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its details can be retrieved by productId."}]},{"specification":"This operation allows sellers to create a new product in the shopping mall platform. It is associated with the shopping_mall_products table, which stores core product data including the seller reference, product name, description, category, status, and primary display image. The operation enforces all required product attributes as defined in the schema and ensures that the product is associated with a valid (leaf) category and seller. Upon creation, the product will be available for further SKU, option, and image management. The operation performs all necessary validations for uniqueness of product name per seller and ensures activation/availability is correctly set by the seller or admin. Suitable for onboarding new items to the marketplace catalog.","description":"This API endpoint facilitates the onboarding of new sellable products by authorized sellers or platform admins. When invoked, it expects complete product details such as product name, description, primary image URL, seller ID (for attribution), and the category ID (which must correspond to a leaf node in the categories hierarchy). The API validates that all required fields are provided, the product's name is unique for the seller within their product catalog, and that the category exists and is active. Only sellers or admins can use this operation, with admins being able to attribute listings to any seller while sellers may only list on their own behalf.\n\nOnce validated, the operation creates a new record in shopping_mall_products and returns the resulting product entity, including all its schema-defined fields. No SKU, options, or images are created at this stage; these are handled in separate subsidiary operations. Security measures ensure only authenticated seller or admin roles may execute this action. The response includes the created product details and can be used as the parent for downstream SKU or option creation, and for product catalog listing displays. Error handling includes invalid or missing attributes, duplicate product name for seller, invalid/disabled category selection, and unauthorized access attempts.\n\nThis operation directly relates to the shopping_mall_products entity. Any subsequent product update, SKU setup, or category assignment relies on the product record created here. It upholds all validations and business logic encoded within the product creation business flow, integrates with catalog indexers for product search functionality, and triggers cache or index refresh on successful create. All access and creation events are logged for product auditing as described in the requirements analysis.","summary":"Create a new product for sale (shopping_mall_products table).","parameters":[],"requestBody":{"description":"New product creation details, including name, description, seller attribution, category, status, and main image URL. Must comply with schema and business rule validations.","typeName":"IShoppingMallProduct.ICreate"},"responseBody":{"description":"Detailed product entity information as stored in shopping_mall_products after creation, suitable for follow-on SKU, image, and option setup.","typeName":"IShoppingMallProduct"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/seller/products","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Product category must be created before it can be referenced as shopping_mall_category_id when creating a new product."},{"endpoint":{"path":"/shoppingMall/admin/roles","method":"post"},"description":"Seller role must be created before a user can be associated as a seller and referenced by shopping_mall_seller_id when creating a product."}]},{"specification":"This operation allows sellers to create a new product in the shopping mall platform. It is associated with the shopping_mall_products table, which stores core product data including the seller reference, product name, description, category, status, and primary display image. The operation enforces all required product attributes as defined in the schema and ensures that the product is associated with a valid (leaf) category and seller. Upon creation, the product will be available for further SKU, option, and image management. The operation performs all necessary validations for uniqueness of product name per seller and ensures activation/availability is correctly set by the seller or admin. Suitable for onboarding new items to the marketplace catalog.","description":"This API endpoint facilitates the onboarding of new sellable products by authorized sellers or platform admins. When invoked, it expects complete product details such as product name, description, primary image URL, seller ID (for attribution), and the category ID (which must correspond to a leaf node in the categories hierarchy). The API validates that all required fields are provided, the product's name is unique for the seller within their product catalog, and that the category exists and is active. Only sellers or admins can use this operation, with admins being able to attribute listings to any seller while sellers may only list on their own behalf.\n\nOnce validated, the operation creates a new record in shopping_mall_products and returns the resulting product entity, including all its schema-defined fields. No SKU, options, or images are created at this stage; these are handled in separate subsidiary operations. Security measures ensure only authenticated seller or admin roles may execute this action. The response includes the created product details and can be used as the parent for downstream SKU or option creation, and for product catalog listing displays. Error handling includes invalid or missing attributes, duplicate product name for seller, invalid/disabled category selection, and unauthorized access attempts.\n\nThis operation directly relates to the shopping_mall_products entity. Any subsequent product update, SKU setup, or category assignment relies on the product record created here. It upholds all validations and business logic encoded within the product creation business flow, integrates with catalog indexers for product search functionality, and triggers cache or index refresh on successful create. All access and creation events are logged for product auditing as described in the requirements analysis.","summary":"Create a new product for sale (shopping_mall_products table).","parameters":[],"requestBody":{"description":"New product creation details, including name, description, seller attribution, category, status, and main image URL. Must comply with schema and business rule validations.","typeName":"IShoppingMallProduct.ICreate"},"responseBody":{"description":"Detailed product entity information as stored in shopping_mall_products after creation, suitable for follow-on SKU, image, and option setup.","typeName":"IShoppingMallProduct"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/admin/products","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"A product category must exist before creating a new product because each product must be associated with a valid (leaf) category. This ensures proper catalog structure and product classification."}]},{"specification":"This operation enables editing of an existing product by authorized sellers or platform admins. It applies to the shopping_mall_products table, and permits updates to product attributes such as name, description, main image URL, activation status, and category association (must remain a leaf). Critical validation ensures the requesting actor is either the product's seller or has admin authorization. All updates are subject to uniqueness, integrity, and active category constraints as defined by the schema. Use this operation for correcting product details, moving between categories, updating photographs, or toggling availability of products listed on the marketplace. Soft deletion is handled elsewhere according to the schema's deleted_at field.","description":"This endpoint supports authorized sellers and platform administrators in updating details of an existing product. Invoking this action requires specifying the productId path parameter, which must correspond to a persisted shopping_mall_products record that is accessible to the requesting user (ownership or admin privileges enforced). The request body may specify any writable field for products: name, description, main image, activation status, or category association (category must exist and be active/leaf).\n\nBusiness logic validates uniqueness of the product name within the seller's assortment, prevents assignment to disabled or non-leaf categories, and requires all field format constraints in the schema to be satisfied. The operation does not affect SKUs, options, or inventory, which must be managed through separate endpoints. Admins may reassign products or forcibly update any product unless locked by compliance rules; sellers may only update their own items. All changes trigger audit logging and search index refresh if product name/category changes. Error handling includes permission violations, non-existent product, duplicate product name, invalid or inactive category, and field validation errors according to platform policy.\n\nThis update operation is an essential part of catalog maintenance, rebranding, or correcting listing mistakes. Downstream operations (SKU editing, inventory management) depend on the persistence and integrity of product attributes defined and updated through this endpoint.","summary":"Update details of an existing product (shopping_mall_products table).","parameters":[{"name":"productId","description":"Unique identifier of the target product to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated product attributes, such as name, description, active status, main image, or category re-association. Partial updates, but input must satisfy schema and business rules.","typeName":"IShoppingMallProduct.IUpdate"},"responseBody":{"description":"The product entity after updates are applied, with all schema-defined fields reflecting the new state.","typeName":"IShoppingMallProduct"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/seller/products/{productId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"A product category must exist before reassigning or editing a product's category, as updates may require associating an existing valid (leaf) category. This dependency guarantees the product remains in a valid classification."}]},{"specification":"This operation enables editing of an existing product by authorized sellers or platform admins. It applies to the shopping_mall_products table, and permits updates to product attributes such as name, description, main image URL, activation status, and category association (must remain a leaf). Critical validation ensures the requesting actor is either the product's seller or has admin authorization. All updates are subject to uniqueness, integrity, and active category constraints as defined by the schema. Use this operation for correcting product details, moving between categories, updating photographs, or toggling availability of products listed on the marketplace. Soft deletion is handled elsewhere according to the schema's deleted_at field.","description":"This endpoint supports authorized sellers and platform administrators in updating details of an existing product. Invoking this action requires specifying the productId path parameter, which must correspond to a persisted shopping_mall_products record that is accessible to the requesting user (ownership or admin privileges enforced). The request body may specify any writable field for products: name, description, main image, activation status, or category association (category must exist and be active/leaf).\n\nBusiness logic validates uniqueness of the product name within the seller's assortment, prevents assignment to disabled or non-leaf categories, and requires all field format constraints in the schema to be satisfied. The operation does not affect SKUs, options, or inventory, which must be managed through separate endpoints. Admins may reassign products or forcibly update any product unless locked by compliance rules; sellers may only update their own items. All changes trigger audit logging and search index refresh if product name/category changes. Error handling includes permission violations, non-existent product, duplicate product name, invalid or inactive category, and field validation errors according to platform policy.\n\nThis update operation is an essential part of catalog maintenance, rebranding, or correcting listing mistakes. Downstream operations (SKU editing, inventory management) depend on the persistence and integrity of product attributes defined and updated through this endpoint.","summary":"Update details of an existing product (shopping_mall_products table).","parameters":[{"name":"productId","description":"Unique identifier of the target product to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated product attributes, such as name, description, active status, main image, or category re-association. Partial updates, but input must satisfy schema and business rules.","typeName":"IShoppingMallProduct.IUpdate"},"responseBody":{"description":"The product entity after updates are applied, with all schema-defined fields reflecting the new state.","typeName":"IShoppingMallProduct"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/admin/products/{productId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before it can be updated through this endpoint."},{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"The target category must exist before the product can be associated with it during update."}]},{"specification":"This operation permanently deletes a product entity from the shopping mall catalog, as represented in the shopping_mall_products table of the Prisma schema. A hard delete is performed (not soft-delete) and the product is fully removed from the database. This ensures that the product is no longer discoverable in catalog queries, category listings, wishlists, shopping carts, or order placement. All child records relating to the deleted product (such as SKUs, options, option values, images) are automatically removed through cascading deletion. The operation checks for the absence of active or open orders linked to any of the product’s SKUs before proceeding, in compliance with core business rules that prohibit deletion of products associated with live order flows.","description":"This API operation enables an admin or authorized seller to permanently remove a specific product from the platform catalog based on its unique identifier (UUID). The request targets the product as defined in the shopping_mall_products schema table. \n\nThe permanent deletion process ensures that all direct and subsidiary relations—including product SKUs, options, option values, product images, and product-category links—are fully removed through cascade deletion policies set at the database level. This operation must validate that there are no active or open orders containing any SKU linked to this product. If such orders exist, the operation will fail with a clear error explaining that only products with no live order associations can be deleted, consistent with domain business rules.\n\nPermanent product deletion is only permitted for products not in use by ongoing order processing flows. Deleting an actively referenced product would violate fulfillment integrity, impact customer order history, and disrupt platform recordkeeping. This ensures compliance with catalog management requirements and cohesive catalog navigation for all users. Appropriate authorization (admin or the owning seller) is required to execute this action. \n\nResponse status confirms successful hard deletion. If a product is referenced by any open order, an error is returned explaining the violation of business logic. The operation’s implementation enforces database referential integrity and robust error handling for edge cases.","summary":"Permanently remove a product and all its associated data by ID from the platform catalog (shopping_mall_products table).","parameters":[{"name":"productId","description":"Unique identifier of the product to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","seller"],"name":"erase","path":"/shoppingMall/admin/products/{productId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be targeted for deletion."}]},{"specification":"This operation permanently deletes a product entity from the shopping mall catalog, as represented in the shopping_mall_products table of the Prisma schema. A hard delete is performed (not soft-delete) and the product is fully removed from the database. This ensures that the product is no longer discoverable in catalog queries, category listings, wishlists, shopping carts, or order placement. All child records relating to the deleted product (such as SKUs, options, option values, images) are automatically removed through cascading deletion. The operation checks for the absence of active or open orders linked to any of the product’s SKUs before proceeding, in compliance with core business rules that prohibit deletion of products associated with live order flows.","description":"This API operation enables an admin or authorized seller to permanently remove a specific product from the platform catalog based on its unique identifier (UUID). The request targets the product as defined in the shopping_mall_products schema table. \n\nThe permanent deletion process ensures that all direct and subsidiary relations—including product SKUs, options, option values, product images, and product-category links—are fully removed through cascade deletion policies set at the database level. This operation must validate that there are no active or open orders containing any SKU linked to this product. If such orders exist, the operation will fail with a clear error explaining that only products with no live order associations can be deleted, consistent with domain business rules.\n\nPermanent product deletion is only permitted for products not in use by ongoing order processing flows. Deleting an actively referenced product would violate fulfillment integrity, impact customer order history, and disrupt platform recordkeeping. This ensures compliance with catalog management requirements and cohesive catalog navigation for all users. Appropriate authorization (admin or the owning seller) is required to execute this action. \n\nResponse status confirms successful hard deletion. If a product is referenced by any open order, an error is returned explaining the violation of business logic. The operation’s implementation enforces database referential integrity and robust error handling for edge cases.","summary":"Permanently remove a product and all its associated data by ID from the platform catalog (shopping_mall_products table).","parameters":[{"name":"productId","description":"Unique identifier of the product to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","seller"],"name":"erase","path":"/shoppingMall/seller/products/{productId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before it can be deleted. The product creation operation is required to ensure the productId references a valid product in the catalog."}]},{"specification":"Retrieves a filtered and paginated list of variant SKUs for a specific product, supporting advanced search, sorting, and filtering functionality. This operation utilizes the shopping_mall_product_skus table and related option/value tables, returning detailed SKU data for catalog management and inventory tracking. Necessary for seller-side SKU management and admin oversight.","description":"This API operation provides a seller or admin with the ability to search, filter, and paginate over all SKUs (variants) associated with a given product, identified by its productId. It is linked to the shopping_mall_product_skus table, as well as related tables for product options and SKU option values.\n\nA PATCH request enables advanced request body filtering: search by SKU name, code, status (e.g., active/inactive/blocked), inventory status, price range, and other SKU-level attributes as defined in the Prisma schema. Results are paginated with full support for sorting by fields such as creation date, price, or name. Filtering can include inventory status, option selections (e.g., color/size), or activity ranges. This operation powers catalog management screens, enables sellers to review all variant SKUs efficiently, and supports administrative oversight for compliance, moderation, or inventory audits.\n\nThe response is a paginated list of detailed SKU entities, with optional summaries or custom projections if required. Associated option/option-value data is included for effective inventory and listing management. Only authorized sellers (owning the product) or admins may utilize this advanced search endpoint. Security controls ensure no leakage of SKU/catalog content across vendors or unauthorized system actors. The implementation includes robust input validation, error handling, and consistent pagination metadata.","summary":"Retrieve and paginate a filtered list of all SKUs/variants for a specific product (shopping_mall_product_skus table).","parameters":[{"name":"productId","description":"Unique identifier of the parent product for which SKUs are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search, filter, and sorting parameters for SKU variant listing.","typeName":"IShoppingMallProductSku.IRequest"},"responseBody":{"description":"Paginated list of SKU entities and associated option data for the given product.","typeName":"IPageIShoppingMallProductSku"},"authorizationRoles":["admin","seller"],"name":"index","path":"/shoppingMall/admin/products/{productId}/skus","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its SKUs can be listed or managed. The product creation operation is a prerequisite to ensure productId is valid and the SKUs search is meaningful."}]},{"specification":"Retrieves a filtered and paginated list of variant SKUs for a specific product, supporting advanced search, sorting, and filtering functionality. This operation utilizes the shopping_mall_product_skus table and related option/value tables, returning detailed SKU data for catalog management and inventory tracking. Necessary for seller-side SKU management and admin oversight.","description":"This API operation provides a seller or admin with the ability to search, filter, and paginate over all SKUs (variants) associated with a given product, identified by its productId. It is linked to the shopping_mall_product_skus table, as well as related tables for product options and SKU option values.\n\nA PATCH request enables advanced request body filtering: search by SKU name, code, status (e.g., active/inactive/blocked), inventory status, price range, and other SKU-level attributes as defined in the Prisma schema. Results are paginated with full support for sorting by fields such as creation date, price, or name. Filtering can include inventory status, option selections (e.g., color/size), or activity ranges. This operation powers catalog management screens, enables sellers to review all variant SKUs efficiently, and supports administrative oversight for compliance, moderation, or inventory audits.\n\nThe response is a paginated list of detailed SKU entities, with optional summaries or custom projections if required. Associated option/option-value data is included for effective inventory and listing management. Only authorized sellers (owning the product) or admins may utilize this advanced search endpoint. Security controls ensure no leakage of SKU/catalog content across vendors or unauthorized system actors. The implementation includes robust input validation, error handling, and consistent pagination metadata.","summary":"Retrieve and paginate a filtered list of all SKUs/variants for a specific product (shopping_mall_product_skus table).","parameters":[{"name":"productId","description":"Unique identifier of the parent product for which SKUs are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search, filter, and sorting parameters for SKU variant listing.","typeName":"IShoppingMallProductSku.IRequest"},"responseBody":{"description":"Paginated list of SKU entities and associated option data for the given product.","typeName":"IPageIShoppingMallProductSku"},"authorizationRoles":["admin","seller"],"name":"index","path":"/shoppingMall/seller/products/{productId}/skus","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its SKUs can be listed or filtered."}]},{"specification":"This operation retrieves detailed information about a specific SKU (Stock Keeping Unit) for a product. It queries the shopping_mall_product_skus table, joining the parent product, and provides all variant/option selections, pricing, and inventory context as required by the product catalog requirements. This operation is fundamental for customers, sellers, and admins to fetch all relevant attributes of a SKU by its unique ID and parent product context, including additional details such as status, price, option breakdown, and media. Use case scenarios include PDP (Product Detail Page) rendering, cart preview logic, and SKU-based business rule enforcement (e.g., adding to cart only if 'active' and in stock).\n\nAuthorization is public; this information is used for catalog discovery and checkout, and must not leak unpublished or disabled SKU details unless required by business logic. Data validation and business rules follow the Prisma schema, where each SKU is bound by its product,parent, and status. Error handling returns 404 for missing or inactive SKUs as per product listing rules.\n\nThis operation can be used with other catalog endpoints such as product summary fetch and complex variant tree queries.","description":"Retrieve the complete detail for a single SKU (Stock Keeping Unit) belonging to a specific product, as identified by productId and skuId. This query provides all metadata present in the shopping_mall_product_skus Prisma schema including SKU code, display name, sell price, status, low-stock threshold, direct option breakdown (across all variant axes), and inventory states where available.\n\nThe operation ensures that only SKUs belonging to the specified product (productId) are returned, supports validation of active status (or appropriate fallback by admin logic), and respects soft-delete status per schema. It returns null or 404 if the SKU is not found, not active, or does not belong to the given productId.\n\nSecurity-wise, only public/fully listed SKUs are shown to customers; sellers may see their own SKUs (including 'inactive'). Admins have full visibility. Parent product validation (category, is_active) is required for business compliance, and the returned structure supports all option and price fields for proper variant rendering and eligibility checks for cart/order flows.\n\nEdge cases such as SKU-option misalignment, soft-deleted or orphaned SKUs must be handled consistent with the schema and catalog enforcement. Related endpoints include search/index, variant enumeration, and parent product detail API.","summary":"Retrieve detailed info for a specific product SKU (shopping_mall_product_skus) by product and SKU ID.","parameters":[{"name":"productId","description":"Unique identifier for the parent product containing the SKU.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier for the SKU to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail on the product SKU as defined in the Prisma table (all option, status, price, and inventory attributes).","typeName":"IShoppingMallProductSku"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/shoppingMall/products/{productId}/skus/{skuId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its SKU can be accessed."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must be created for the product before it can be retrieved."}]},{"specification":"This operation creates a new SKU (Stock Keeping Unit) for an existing product. It works on the shopping_mall_product_skus table, and must ensure: (1) the parent productId exists and is under the current seller/admin context, (2) SKU option values map to the option schema, and (3) all inventory and business rules for SKU uniqueness, pricing, and variant combinations are enforced. This is critical for sellers to add new purchasable variants (e.g., color/size) to an existing product, and for admins to perform catalog management.\n\nBusiness validation includes uniqueness for SKU name/sku_code within the product, valid option/variant selection, and proper linkage to inventory. Success returns the newly created SKU in full detail (as per schema column definitions). This endpoint does not permit guest or customer-initiated creation; restricted to authorized sellers and admins as defined in the platform's permission model.","description":"Create a new product SKU for an existing product under the specific productId. This operation accepts a well-formed SKU creation structure (including sku_code, name, price, status, low_stock_threshold, and option value mapping) in the request body. The system checks that the productId exists and belongs to the current seller or is accessible to admin, and that the SKU meets all Prisma schema constraints (e.g., name, code uniqueness, valid price, option configuration, and link to inventory records).\n\nThe operation is authorized for roles seller and admin (as enforced by row-level and business validation). Attempts by unauthenticated or customer users are rejected. Required fields and relationships are validated strictly per the Prisma schema: SKU name and code must be unique within the product; price must be positive as enforced by business rules; option assignments must map to available option values; and an initial inventory state is established on creation as required by inventory logic.\n\nReturned data is the complete SKU entity, with inventory and option state, enabling follow-up actions on catalog management or integration into purchase flows. Failed creation returns detailed errors, such as duplication or invalid configuration, for correction by the caller.","summary":"Create a new SKU (shopping_mall_product_skus) under a product by productId.","parameters":[{"name":"productId","description":"Unique identifier for the product to which this SKU will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation payload for a new SKU under the given productId, following IShoppingMallProductSku.ICreate contract.","typeName":"IShoppingMallProductSku.ICreate"},"responseBody":{"description":"Returns full detail for the newly created SKU, matching Prisma schema output.","typeName":"IShoppingMallProductSku"},"authorizationType":null,"authorizationRole":"seller","name":"create","path":"/shoppingMall/seller/products/{productId}/skus","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before a new SKU can be added under its productId. The SKU cannot exist without a parent product entity."}]},{"specification":"This operation creates a new SKU (Stock Keeping Unit) for an existing product. It works on the shopping_mall_product_skus table, and must ensure: (1) the parent productId exists and is under the current seller/admin context, (2) SKU option values map to the option schema, and (3) all inventory and business rules for SKU uniqueness, pricing, and variant combinations are enforced. This is critical for sellers to add new purchasable variants (e.g., color/size) to an existing product, and for admins to perform catalog management.\n\nBusiness validation includes uniqueness for SKU name/sku_code within the product, valid option/variant selection, and proper linkage to inventory. Success returns the newly created SKU in full detail (as per schema column definitions). This endpoint does not permit guest or customer-initiated creation; restricted to authorized sellers and admins as defined in the platform's permission model.","description":"Create a new product SKU for an existing product under the specific productId. This operation accepts a well-formed SKU creation structure (including sku_code, name, price, status, low_stock_threshold, and option value mapping) in the request body. The system checks that the productId exists and belongs to the current seller or is accessible to admin, and that the SKU meets all Prisma schema constraints (e.g., name, code uniqueness, valid price, option configuration, and link to inventory records).\n\nThe operation is authorized for roles seller and admin (as enforced by row-level and business validation). Attempts by unauthenticated or customer users are rejected. Required fields and relationships are validated strictly per the Prisma schema: SKU name and code must be unique within the product; price must be positive as enforced by business rules; option assignments must map to available option values; and an initial inventory state is established on creation as required by inventory logic.\n\nReturned data is the complete SKU entity, with inventory and option state, enabling follow-up actions on catalog management or integration into purchase flows. Failed creation returns detailed errors, such as duplication or invalid configuration, for correction by the caller.","summary":"Create a new SKU (shopping_mall_product_skus) under a product by productId.","parameters":[{"name":"productId","description":"Unique identifier for the product to which this SKU will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation payload for a new SKU under the given productId, following IShoppingMallProductSku.ICreate contract.","typeName":"IShoppingMallProductSku.ICreate"},"responseBody":{"description":"Returns full detail for the newly created SKU, matching Prisma schema output.","typeName":"IShoppingMallProductSku"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/products/{productId}/skus","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before a new SKU can be added under its productId. The SKU cannot exist without a parent product entity."}]},{"specification":"This operation updates the details of a specific product SKU (Stock Keeping Unit) belonging to a given product. It operates on the shopping_mall_product_skus table in the Prisma schema. The function allows sellers or admins to modify a SKU's name, price, status, images, and option values, reflecting changes in pricing, availability, or attributes. This operation validates that the SKU exists, belongs to the specified product, and is owned by the requesting seller (unless invoked by admin). Updates can include activation status, price adjustments, display name, option references, or associated primary image. Business rules enforced include uniqueness of SKU name per product, prohibition of updates when there are active orders for the SKU that would result in business logic conflicts (e.g., deactivating an SKU currently in a pending order). The schema references all fields in shopping_mall_product_skus and maintains audit history.","description":"Update an existing SKU for a product by specifying the productId and skuId. This operation supports modifications to SKU fields such as name, price, status (active/inactive/blocked), low_stock_threshold, or main image URL. Modification requests are validated for correct SKU ownership, business rule compliance (SKU name uniqueness for the product, no updates that violate inventory integrity or affect pending orders), and role-based access (seller can only update their own SKUs; admin may update any). \n\nEach update is audited with a timestamp and user context recorded in associated platform activity logs. If invalid values are supplied, such as negative prices or duplicate SKU names, descriptive validation errors are returned. If SKU cannot be found or does not belong to the specified product, a not-found error is returned. Business logic ensures that SKU option values and price updates are atomic and consistent.\n\nThis endpoint is foundational for seller catalog maintenance and admin interventions to resolve catalog errors or compliance issues. Related endpoints include product listing retrieval, SKU creation, and product-level updates.","summary":"Update a product's SKU information in the shopping_mall_product_skus table, reflecting changes to SKU name, price, status, image, or options.","parameters":[{"name":"productId","description":"Unique identifier for the parent product to which this SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier for the SKU (Stock Keeping Unit) to be updated within the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the product SKU, such as name, price, status, image, and option values.","typeName":"IShoppingMallProductSku.IUpdate"},"responseBody":{"description":"The updated product SKU object with all current fields and post-update state.","typeName":"IShoppingMallProductSku"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must be created before it can be updated for a given product."}]},{"specification":"This operation updates the details of a specific product SKU (Stock Keeping Unit) belonging to a given product. It operates on the shopping_mall_product_skus table in the Prisma schema. The function allows sellers or admins to modify a SKU's name, price, status, images, and option values, reflecting changes in pricing, availability, or attributes. This operation validates that the SKU exists, belongs to the specified product, and is owned by the requesting seller (unless invoked by admin). Updates can include activation status, price adjustments, display name, option references, or associated primary image. Business rules enforced include uniqueness of SKU name per product, prohibition of updates when there are active orders for the SKU that would result in business logic conflicts (e.g., deactivating an SKU currently in a pending order). The schema references all fields in shopping_mall_product_skus and maintains audit history.","description":"Update an existing SKU for a product by specifying the productId and skuId. This operation supports modifications to SKU fields such as name, price, status (active/inactive/blocked), low_stock_threshold, or main image URL. Modification requests are validated for correct SKU ownership, business rule compliance (SKU name uniqueness for the product, no updates that violate inventory integrity or affect pending orders), and role-based access (seller can only update their own SKUs; admin may update any). \n\nEach update is audited with a timestamp and user context recorded in associated platform activity logs. If invalid values are supplied, such as negative prices or duplicate SKU names, descriptive validation errors are returned. If SKU cannot be found or does not belong to the specified product, a not-found error is returned. Business logic ensures that SKU option values and price updates are atomic and consistent.\n\nThis endpoint is foundational for seller catalog maintenance and admin interventions to resolve catalog errors or compliance issues. Related endpoints include product listing retrieval, SKU creation, and product-level updates.","summary":"Update a product's SKU information in the shopping_mall_product_skus table, reflecting changes to SKU name, price, status, image, or options.","parameters":[{"name":"productId","description":"Unique identifier for the parent product to which this SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier for the SKU (Stock Keeping Unit) to be updated within the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the product SKU, such as name, price, status, image, and option values.","typeName":"IShoppingMallProductSku.IUpdate"},"responseBody":{"description":"The updated product SKU object with all current fields and post-update state.","typeName":"IShoppingMallProductSku"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"SKU must be created before it can be updated for a given product by admin role."}]},{"specification":"This operation deletes (soft deletes by marking the deleted_at timestamp) a specific SKU (Stock Keeping Unit) under a product. It operates on the shopping_mall_product_skus table in the Prisma schema. Sellers can only delete SKUs that they own; admins can delete any SKU. The operation checks that the SKU belongs to the specified product and is not associated with active or pending orders, blocking deletion in such cases. The operation sets the deleted_at timestamp to the current time for soft deletion, ensuring SKU is not shown in catalog or available for purchase, and logs the event for future audit. This does not cascade delete related order data for compliance and history.","description":"Soft-delete an existing SKU belonging to a product by specifying the productId and skuId. The SKU must belong to the current seller or the requester must be an admin. This operation marks the SKU as deleted by setting its deleted_at timestamp, effectively removing it from catalog search and purchase flows while preserving historical data for compliance.\n\nBefore deletion, business logic checks ensure the SKU is not currently associated with any active or pending orders. If the SKU is referenced in pending transactions, the request is blocked and a clear, actionable error is returned explaining why deletion cannot proceed. The deletion action is audited for compliance. Related endpoints include listing SKUs for a product and restoring or permanently erasing deleted SKUs if the business supports such flows.\n\nNo product-level data or related historical order data is deleted—this endpoint only marks the specific SKU as deleted for the purposes of catalog management and inventory control.","summary":"Soft-delete a specific SKU in shopping_mall_product_skus by marking deleted_at, after verifying active order constraints and ownership.","parameters":[{"name":"productId","description":"Unique identifier for the parent product to which this SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier for the SKU (Stock Keeping Unit) to be deleted within the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must be created before it can be soft-deleted under a product."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Parent product must exist before its SKU can be created or deleted."}]},{"specification":"This operation deletes (soft deletes by marking the deleted_at timestamp) a specific SKU (Stock Keeping Unit) under a product. It operates on the shopping_mall_product_skus table in the Prisma schema. Sellers can only delete SKUs that they own; admins can delete any SKU. The operation checks that the SKU belongs to the specified product and is not associated with active or pending orders, blocking deletion in such cases. The operation sets the deleted_at timestamp to the current time for soft deletion, ensuring SKU is not shown in catalog or available for purchase, and logs the event for future audit. This does not cascade delete related order data for compliance and history.","description":"Soft-delete an existing SKU belonging to a product by specifying the productId and skuId. The SKU must belong to the current seller or the requester must be an admin. This operation marks the SKU as deleted by setting its deleted_at timestamp, effectively removing it from catalog search and purchase flows while preserving historical data for compliance.\n\nBefore deletion, business logic checks ensure the SKU is not currently associated with any active or pending orders. If the SKU is referenced in pending transactions, the request is blocked and a clear, actionable error is returned explaining why deletion cannot proceed. The deletion action is audited for compliance. Related endpoints include listing SKUs for a product and restoring or permanently erasing deleted SKUs if the business supports such flows.\n\nNo product-level data or related historical order data is deleted—this endpoint only marks the specific SKU as deleted for the purposes of catalog management and inventory control.","summary":"Soft-delete a specific SKU in shopping_mall_product_skus by marking deleted_at, after verifying active order constraints and ownership.","parameters":[{"name":"productId","description":"Unique identifier for the parent product to which this SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier for the SKU (Stock Keeping Unit) to be deleted within the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"SKU must be created before it can be soft-deleted under a product (admin permission context)."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Parent product must exist before its SKU can be created or deleted (admin permission context)."}]},{"specification":"This operation retrieves a paginated, filterable list of all option definitions (such as color, size, style, etc.) for a specific product, based on the product identified by {productId}. It references the shopping_mall_product_options table in the Catalog schema. The operation supports optional filtering, searching, and sorting by option name and display order, allowing sellers or admins to efficiently review and manage the set of selectable options associated with a product. Customers and other users may also retrieve this list for view or selection when building the SKU picker or product detail page.","path":"/shoppingMall/products/{productId}/options","method":"patch","summary":"List and filter all option definitions for a specific product (shopping_mall_product_options).","description":"Retrieve a filtered, paginated list of product option definitions for a target product. This is typically used to present all selectable attributes (such as color, size, etc.) associated with a product, both for public viewing (customer) and for management by sellers/admins.\n\nThis operation supports advanced filtering, sorting, and paging. Filters may include exact or fuzzy search on the option name, numerical sort by display_order, and status checks (e.g., active/inactive) if such columns exist. Security-wise, it is recommended that sellers can only query their own products, and typical customers only see published/active options.\n\nThis API references the shopping_mall_product_options table in the Prisma schema. All parameters are validated according to schema constraints, and results are paginated for scalability in catalogs with many options. Related endpoints may include product detail fetch, product variant(SKU) search, and option management.{If any business logic restricts visibility of options per role, this should be enforced in implementation.}","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the target product whose option list is being requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filtering and pagination parameters for the product's option listing.","typeName":"IShoppingMallProductOption.IRequest"},"responseBody":{"description":"Paginated list of product option definitions matching query criteria. Includes each option's id, name, display order, and related attributes.","typeName":"IPageIShoppingMallProductOption"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before any options can be listed, filtered, or managed. The product creation endpoint establishes the product context required for performing any product option operations."}]},{"specification":"This operation retrieves the detail of a single product option attribute (e.g., a specific color, size, or custom option) for a product, referenced by both {productId} and {optionId}. It reads from the shopping_mall_product_options table in the Catalog schema. The purpose is to provide sellers, admins, or customers with the complete metadata for a given attribute of a product, which may be necessary for SKU management, catalog presentation, or selection UI.","path":"/shoppingMall/products/{productId}/options/{optionId}","method":"get","summary":"Fetch detailed information for a single product option (shopping_mall_product_options).","description":"Retrieve the complete detail for a single product option using its unique id as well as the parent product id context. This is often needed when editing, inspecting, or displaying a specific option value such as a color, size, or style in a product detail/management context.\n\nSecurity logic must confirm that sellers or admins accessing the detail have authority on the product. For customers, public/active status may be enforced so that only visible options are accessible. The underlying component is shopping_mall_product_options in the Prisma Catalog schema, and all data is returned as per the type IShoppingMallProductOption.\n\nRelated operations may include option editing, product variant combination management, and variant/option searching within a product.","parameters":[{"name":"productId","description":"UUID of the product this option belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"UUID of the specific product option being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of a single product option, including id, name, display_order, and any other configurable attributes.","typeName":"IShoppingMallProductOption"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before any options can be created or accessed. Creating the product is required to contextually operate on product options."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"Product option must exist before you can retrieve its full detail. The option must be created for a specific product before it can be retrieved by its optionId."}]},{"specification":"This operation enables a seller or admin to create a new variant option for an existing product within the shopping mall system. It is associated with the shopping_mall_product_options Prisma DB table, which allows products to be defined with different option attributes, facilitating SKU generation and variant management. The operation takes the product's unique identifier as a path parameter and expects option name and display order data via the creation DTO schema. On successful creation, the new product option, including its reference to the parent product, is returned. This API ensures sellers can manage rich product variant structures, supporting flexible combinations of size, color, or other customizable attributes.","description":"Allows the authenticated seller of a product, or an admin, to define a new product option within an existing product for variant management. This operation is functionally tied to the shopping_mall_product_options table in the Prisma schema, which contains fields for the option's parent product, display name, display order, and timestamps for audit.\n\nThe operation imposes business validation such that only an authenticated seller who owns the product or an admin may create product options. Duplicate option names for the same product are not allowed, and all option names must comply with business naming conventions. The creation also timestamps audit information for later review.\n\nThis operation presumes that options are essential for generating all valid SKU combinations for a product. API consumers should be aware that creating an option does not automatically generate SKUs but allows subsequent composition of product variants. If the same option name exists for the targeted product, the server returns a conflict error. Related APIs include product option value management and SKU creation endpoints.","summary":"Create a product option for a given product in shopping_mall_product_options table.","parameters":[{"name":"productId","description":"Unique identifier of the parent product to which the option will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for creating a product option, such as name and display order.","typeName":"IShoppingMallProductOption.ICreate"},"responseBody":{"description":"Details of the newly created product option including its relation to the parent product.","typeName":"IShoppingMallProductOption"},"authorizationType":null,"authorizationRole":"seller","name":"create","path":"/shoppingMall/seller/products/{productId}/options","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before a product option can be created under it."}]},{"specification":"This operation enables a seller or admin to create a new variant option for an existing product within the shopping mall system. It is associated with the shopping_mall_product_options Prisma DB table, which allows products to be defined with different option attributes, facilitating SKU generation and variant management. The operation takes the product's unique identifier as a path parameter and expects option name and display order data via the creation DTO schema. On successful creation, the new product option, including its reference to the parent product, is returned. This API ensures sellers can manage rich product variant structures, supporting flexible combinations of size, color, or other customizable attributes.","description":"Allows the authenticated seller of a product, or an admin, to define a new product option within an existing product for variant management. This operation is functionally tied to the shopping_mall_product_options table in the Prisma schema, which contains fields for the option's parent product, display name, display order, and timestamps for audit.\n\nThe operation imposes business validation such that only an authenticated seller who owns the product or an admin may create product options. Duplicate option names for the same product are not allowed, and all option names must comply with business naming conventions. The creation also timestamps audit information for later review.\n\nThis operation presumes that options are essential for generating all valid SKU combinations for a product. API consumers should be aware that creating an option does not automatically generate SKUs but allows subsequent composition of product variants. If the same option name exists for the targeted product, the server returns a conflict error. Related APIs include product option value management and SKU creation endpoints.","summary":"Create a product option for a given product in shopping_mall_product_options table.","parameters":[{"name":"productId","description":"Unique identifier of the parent product to which the option will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for creating a product option, such as name and display order.","typeName":"IShoppingMallProductOption.ICreate"},"responseBody":{"description":"Details of the newly created product option including its relation to the parent product.","typeName":"IShoppingMallProductOption"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/products/{productId}/options","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before a product option can be created under it."}]},{"specification":"This operation allows updating the attributes of an existing product option for a product, such as the option name or display order. It is associated with the shopping_mall_product_options table in the Prisma schema, enabling sellers or administrators to edit variant configurations for existing products. The operation targets a product option by both its parent product and the option's unique identifier to ensure correct ownership and context. Only the seller who owns the product or an admin can perform this update. The response reflects the updated option record.","description":"Enables the seller of a product or an admin user to modify an existing product option. This is applied to records in the shopping_mall_product_options table which stores information on options like size, color, and other configurable fields relevant for SKU generation.\n\nThe operation strictly checks that only the product's owning seller or an admin can update the option, enforcing correct authorization and preventing cross-product editing. Business rules forbid duplicate option names for a given product and require the option name to conform to platform validation rules (length, prohibited characters, etc). Update timestamps are maintained for auditing purposes.\n\nIf the specified product or option ID does not exist, or if the user attempts to assign a duplicate name, the operation returns an error. This API is typically called as part of catalog management interfaces for sellers and admin dashboards. Related endpoints include option creation, deletion, and SKU management APIs.","summary":"Update a product option for a specific product in shopping_mall_product_options table.","parameters":[{"name":"productId","description":"Unique identifier of the parent product to which the option belongs.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier of the product option to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to update a product option, including updated name or display order.","typeName":"IShoppingMallProductOption.IUpdate"},"responseBody":{"description":"Resulting product option record reflecting applied updates.","typeName":"IShoppingMallProductOption"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/products/{productId}/options/{optionId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"Product option must exist before it can be updated. The POST operation creates a new product option for a product, supplying the required optionId."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before a product option can be created or updated."}]},{"specification":"This operation allows updating the attributes of an existing product option for a product, such as the option name or display order. It is associated with the shopping_mall_product_options table in the Prisma schema, enabling sellers or administrators to edit variant configurations for existing products. The operation targets a product option by both its parent product and the option's unique identifier to ensure correct ownership and context. Only the seller who owns the product or an admin can perform this update. The response reflects the updated option record.","description":"Enables the seller of a product or an admin user to modify an existing product option. This is applied to records in the shopping_mall_product_options table which stores information on options like size, color, and other configurable fields relevant for SKU generation.\n\nThe operation strictly checks that only the product's owning seller or an admin can update the option, enforcing correct authorization and preventing cross-product editing. Business rules forbid duplicate option names for a given product and require the option name to conform to platform validation rules (length, prohibited characters, etc). Update timestamps are maintained for auditing purposes.\n\nIf the specified product or option ID does not exist, or if the user attempts to assign a duplicate name, the operation returns an error. This API is typically called as part of catalog management interfaces for sellers and admin dashboards. Related endpoints include option creation, deletion, and SKU management APIs.","summary":"Update a product option for a specific product in shopping_mall_product_options table.","parameters":[{"name":"productId","description":"Unique identifier of the parent product to which the option belongs.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier of the product option to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to update a product option, including updated name or display order.","typeName":"IShoppingMallProductOption.IUpdate"},"responseBody":{"description":"Resulting product option record reflecting applied updates.","typeName":"IShoppingMallProductOption"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/products/{productId}/options/{optionId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"Product option must exist before it can be updated. The POST operation creates a new product option for a product, supplying the required optionId."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before a product option can be created or updated."}]},{"specification":"This operation allows a seller or an admin user to permanently remove a specific product option (e.g., color, size, material, etc.) from a product. It acts on the shopping_mall_product_options table, utilizing the specified productId and optionId as path parameters. The operation validates the option's existence, association with the given product, and enforces that only users with required permissions (the owning seller or an admin) can perform the deletion. If the option is currently used by any existing product SKUs, the API must provide a clear error, blocking deletion and advising that linked SKUs must be updated or removed first. This is a hard delete action as there is no soft-delete or archival field on this model. All option removals should be logged for auditing and system integrity.","description":"This API endpoint enables sellers or administrators to permanently delete a specific option (such as 'Color' or 'Size') from a given product in the catalog. Deletion is allowed only if the option belongs to the targeted product and the requesting user is authorized. The system enforces business rules such that if any SKU is currently configured to use this option, deletion is strictly blocked. The client receives an informative error if attempting to delete an option that is still referenced in product variants.\n\nSecurity is enforced such that only the product's owning seller or an admin can execute this operation. Audit logs are maintained for compliance and transparency. The product option removal updates all related database references and supports real-time cache or indexing triggers, if any, to ensure product listings remain accurate.\n\nThis operation is crucial for catalog maintenance, variant management, and keeping product metadata clean, as enforced by catalog management business logic.","summary":"Permanently delete a specific product option from a product (shopping_mall_product_options) if not used by SKUs.","parameters":[{"name":"productId","description":"The unique identifier of the product to which the option belongs.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"The unique identifier of the product option to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/seller/products/{productId}/options/{optionId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"The product must be created before a product option can be deleted from it."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"The specific product option must exist (be created) before it can be deleted from the product."}]},{"specification":"This operation allows a seller or an admin user to permanently remove a specific product option (e.g., color, size, material, etc.) from a product. It acts on the shopping_mall_product_options table, utilizing the specified productId and optionId as path parameters. The operation validates the option's existence, association with the given product, and enforces that only users with required permissions (the owning seller or an admin) can perform the deletion. If the option is currently used by any existing product SKUs, the API must provide a clear error, blocking deletion and advising that linked SKUs must be updated or removed first. This is a hard delete action as there is no soft-delete or archival field on this model. All option removals should be logged for auditing and system integrity.","description":"This API endpoint enables sellers or administrators to permanently delete a specific option (such as 'Color' or 'Size') from a given product in the catalog. Deletion is allowed only if the option belongs to the targeted product and the requesting user is authorized. The system enforces business rules such that if any SKU is currently configured to use this option, deletion is strictly blocked. The client receives an informative error if attempting to delete an option that is still referenced in product variants.\n\nSecurity is enforced such that only the product's owning seller or an admin can execute this operation. Audit logs are maintained for compliance and transparency. The product option removal updates all related database references and supports real-time cache or indexing triggers, if any, to ensure product listings remain accurate.\n\nThis operation is crucial for catalog maintenance, variant management, and keeping product metadata clean, as enforced by catalog management business logic.","summary":"Permanently delete a specific product option from a product (shopping_mall_product_options) if not used by SKUs.","parameters":[{"name":"productId","description":"The unique identifier of the product to which the option belongs.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"The unique identifier of the product option to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/admin/products/{productId}/options/{optionId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"The product must be created before a product option can be deleted from it."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"The specific product option must exist (be created) before it can be deleted from the product."}]},{"specification":"This operation enables retrieval of a filtered and paginated list of possible values for a specific product option (like Color, Size) associated with a particular product. It works on the shopping_mall_product_option_values table, scoped to the given product and option. The PATCH method supports advanced searching, filtering, and sorting on option values such as partial match of value names, order, and creation date. Only the owning seller or an admin can access this endpoint, which is useful for managing variant options on products. This endpoint is typically used in admin or seller dashboards to facilitate option value management, review, or bulk UI actions.","description":"This API lists all option values (such as 'Red', 'XL', etc.) for a specific option on a product, with support for searching, filtering, and pagination. The operation references the product and product option as path parameters, ensuring both resources exist and are associated. Requesters can filter option values by attributes such as display name or display order.\n\nSecurity is applied such that only authorized sellers (owners of the product) or admin users can access this feature. The endpoint is useful for managing the spectrum of choices offered for a product and bulk operations in the product editing UI. The response provides the data in a paginated structure with metadata about available total records, supporting efficient dashboards and lazy loading interfaces.\n\nThis operation connects directly to the underlying product option values in the shopping_mall_product_option_values schema table and is used for catalog maintenance purposes. Error handling will return clear validation messages if the option or product does not exist or if access is unauthorized.","summary":"Retrieve a filtered, paginated list of possible values for a specific product option (shopping_mall_product_option_values).","parameters":[{"name":"productId","description":"The unique identifier of the product to which the option and its values belong.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"The unique identifier of the product option whose values are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination parameters for searching option values within a product option (e.g., value name, order, created_at).","typeName":"IShoppingMallProductOptionValue.IRequest"},"responseBody":{"description":"Paginated results containing product option values for a given product option, including metadata for pagination and search.","typeName":"IPageIShoppingMallProductOptionValue"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/seller/products/{productId}/options/{optionId}/values","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"Product option must be created for the given product before listing its option values."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its options and option values can be managed."}]},{"specification":"This operation enables retrieval of a filtered and paginated list of possible values for a specific product option (like Color, Size) associated with a particular product. It works on the shopping_mall_product_option_values table, scoped to the given product and option. The PATCH method supports advanced searching, filtering, and sorting on option values such as partial match of value names, order, and creation date. Only the owning seller or an admin can access this endpoint, which is useful for managing variant options on products. This endpoint is typically used in admin or seller dashboards to facilitate option value management, review, or bulk UI actions.","description":"This API lists all option values (such as 'Red', 'XL', etc.) for a specific option on a product, with support for searching, filtering, and pagination. The operation references the product and product option as path parameters, ensuring both resources exist and are associated. Requesters can filter option values by attributes such as display name or display order.\n\nSecurity is applied such that only authorized sellers (owners of the product) or admin users can access this feature. The endpoint is useful for managing the spectrum of choices offered for a product and bulk operations in the product editing UI. The response provides the data in a paginated structure with metadata about available total records, supporting efficient dashboards and lazy loading interfaces.\n\nThis operation connects directly to the underlying product option values in the shopping_mall_product_option_values schema table and is used for catalog maintenance purposes. Error handling will return clear validation messages if the option or product does not exist or if access is unauthorized.","summary":"Retrieve a filtered, paginated list of possible values for a specific product option (shopping_mall_product_option_values).","parameters":[{"name":"productId","description":"The unique identifier of the product to which the option and its values belong.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"The unique identifier of the product option whose values are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination parameters for searching option values within a product option (e.g., value name, order, created_at).","typeName":"IShoppingMallProductOptionValue.IRequest"},"responseBody":{"description":"Paginated results containing product option values for a given product option, including metadata for pagination and search.","typeName":"IPageIShoppingMallProductOptionValue"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/admin/products/{productId}/options/{optionId}/values","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"Product option must be created for the given product before listing its option values."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its options and option values can be managed."}]},{"specification":"This operation retrieves the details of a specific product option value belonging to a product option of a given product. It operates on the shopping_mall_product_option_values table in the Prisma schema, returning the value data for a combination of productId, optionId, and valueId. The endpoint is designed for customers, sellers, and admins (product catalog consumers or managers) to view specific option values, supporting options such as color, size, or other variations tied to a product. The returned object contains value details such as its display name, sorting order, and relational identifiers, with read-only access enforced.","description":"Fetch a specific option value (e.g., 'Red', 'XL') for a given option (like color or size) of a product. This operation ensures that only valid option values linked to the assembled product and product option are available for retrieval. Typical use cases include rendering a product's available variant attributes on product detail pages or for admin/seller catalog editing UI.\n\nSecurity is enforced so that only those with permission to read the product or variant catalog (customers, sellers for their own products, and admins) can access the value details. The relational linkages to product, option, and value are resolved, but sensitive internal data outside option presentation attributes are excluded from the response.\n\nIf the value or its parent option/product is missing or inactive, an appropriate error is returned. The operation references the option value's fields as described in the Prisma model: id, shopping_mall_product_option_id, value, display_order, created_at, updated_at. This operation complements other product, option, and value lookups, but only performs read queries.","summary":"Retrieve a specific product option value by productId, optionId, and valueId (shopping_mall_product_option_values).","parameters":[{"name":"productId","description":"Unique identifier for the target product","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier for the product option (e.g., color, size)","schema":{"type":"string","format":"uuid"}},{"name":"valueId","description":"Unique identifier of the option value to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the product option value, including value and display order.","typeName":"IShoppingMallProductOptionValue"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/shoppingMall/products/{productId}/options/{optionId}/values/{valueId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options/{optionId}/values","method":"post"},"description":"Product option value must be created before it can be retrieved by its valueId. This ensures the requested option value exists for the specified product and option."}]},{"specification":"This operation creates a new product option value in the catalog for a specified product option of a given product. It uses the shopping_mall_product_option_values table in the Prisma schema, allowing authenticated sellers (and optionally admins managing the catalog) to add new option values, such as new colors or sizes, for customizable product variants. The POST endpoint receives creation details and ensures unique value names within the same product option, adhering to catalog integrity and presentation ordering.","description":"Add a new value (such as 'Blue', 'Large') to an existing product option (like color or size) for a specific product. This is essential for supporting new variants and expanding available SKUs for a product. The operation validates seller/admin permissions, enforces value uniqueness, and provides clear error feedback if a duplicate or invalid value is submitted.\n\nThe input must conform to IShoppingMallProductOptionValue.ICreate structure, which includes the desired display value and ordering. The system checks the parent product's ownership (only the seller of this product or admins may add option values), as well as option existence and activation.\n\nOn success, it returns the full details of the new option value, suitable for further SKU creation or UI refresh. Business rules embedded in the Prisma schema, such as unique value per option and index, are strictly enforced. This complements option and product management workflows for inventory and catalog updates.","summary":"Create a new product option value for a product option (shopping_mall_product_option_values).","parameters":[{"name":"productId","description":"Unique identifier for the product to augment option values.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier for the product option (e.g., color, size) to add the value to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation details for the new option value (e.g., value text and display order).","typeName":"IShoppingMallProductOptionValue.ICreate"},"responseBody":{"description":"Details of the newly created product option value, including its id and value.","typeName":"IShoppingMallProductOptionValue"},"authorizationType":null,"authorizationRole":"seller","name":"create","path":"/shoppingMall/seller/products/{productId}/options/{optionId}/values","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before product options or option values can be added."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"Product option must be created for the product before adding a value to it."}]},{"specification":"This operation creates a new product option value in the catalog for a specified product option of a given product. It uses the shopping_mall_product_option_values table in the Prisma schema, allowing authenticated sellers (and optionally admins managing the catalog) to add new option values, such as new colors or sizes, for customizable product variants. The POST endpoint receives creation details and ensures unique value names within the same product option, adhering to catalog integrity and presentation ordering.","description":"Add a new value (such as 'Blue', 'Large') to an existing product option (like color or size) for a specific product. This is essential for supporting new variants and expanding available SKUs for a product. The operation validates seller/admin permissions, enforces value uniqueness, and provides clear error feedback if a duplicate or invalid value is submitted.\n\nThe input must conform to IShoppingMallProductOptionValue.ICreate structure, which includes the desired display value and ordering. The system checks the parent product's ownership (only the seller of this product or admins may add option values), as well as option existence and activation.\n\nOn success, it returns the full details of the new option value, suitable for further SKU creation or UI refresh. Business rules embedded in the Prisma schema, such as unique value per option and index, are strictly enforced. This complements option and product management workflows for inventory and catalog updates.","summary":"Create a new product option value for a product option (shopping_mall_product_option_values).","parameters":[{"name":"productId","description":"Unique identifier for the product to augment option values.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier for the product option (e.g., color, size) to add the value to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation details for the new option value (e.g., value text and display order).","typeName":"IShoppingMallProductOptionValue.ICreate"},"responseBody":{"description":"Details of the newly created product option value, including its id and value.","typeName":"IShoppingMallProductOptionValue"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/products/{productId}/options/{optionId}/values","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"The product must exist before you can add an option value because each option value is linked to a specific product."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"The product option must exist before you can add a value to it, as the value is assigned to a specific option group (such as color or size) within a product."}]},{"specification":"This operation updates a specific value for a product option associated with a given product within the shopping mall platform. It operates on the shopping_mall_product_option_values table, which represents individual option values (such as a color or size) tied to a product's option group (e.g., the 'Red' value for the 'Color' option of a T-shirt product). The function allows sellers or admins to modify properties like the display value or display order for an existing option value belonging to a given product's option group, enforcing required validations for value uniqueness and product/option association. Business logic ensures only authorized sellers (who own the product) or admins can update option values. The operation supports updating display ordering and correcting typographical mistakes. Changing an option value triggers updates in the mapping of SKUs using this value.","description":"This API operation allows sellers or admins to modify the value associated with a specific product option for a designated product within the e-commerce platform. The option value is a component of the variant system, enabling product listings to support multiple selectable attributes such as color, size, or material. Each option value must remain unique within its option group and product, and changes must not violate variant combination integrity.\n\nSecurity checks ensure that only the seller owning the product or platform admins can update an option value. Attempting to update an option value not associated with the specified product or option group returns a not-found or unauthorized error. All modifications update the updated_at timestamp for audit purposes, and relevant product SKUs using this value may require downstream updates or cache invalidation.\n\nThe structure strictly requires the three-level identifier path (productId, optionId, valueId) to target the exact value record. Business logic prohibits updating a value to one that would duplicate an existing value within the same option. If the value is currently referenced by active orders or SKUs, business validation ensures updates are consistent and legal. Errors are returned for not found, forbidden, or validation violations. This operation relates to the shopping_mall_product_option_values and their links to shopping_mall_product_options and shopping_mall_products tables.","summary":"Update a specific option value (e.g., color or size) for a product option, by product ID, option ID, and value ID, in the shopping_mall_product_option_values table.","parameters":[{"name":"productId","description":"Unique identifier of the product the option belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier of the option group within the product (e.g., color, size).","schema":{"type":"string","format":"uuid"}},{"name":"valueId","description":"Unique identifier of the option value to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the product option value (e.g., value name, display order, etc.).","typeName":"IShoppingMallProductOptionValue.IUpdate"},"responseBody":{"description":"The updated product option value detail for the given product, option, and value ID.","typeName":"IShoppingMallProductOptionValue"},"authorizationType":null,"authorizationRole":"seller","method":"put","path":"/shoppingMall/seller/products/{productId}/options/{optionId}/values/{valueId}","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"The product must exist before you can update an option value, as the option value is always associated with a specific product."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"The product option must exist before an option value can be updated, since every value is associated with an option group within a product."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options/{optionId}/values","method":"post"},"description":"The option value to update must already exist for the operation to make sense—this updates an existing value for a given product and option."}]},{"specification":"This operation updates a specific value for a product option associated with a given product within the shopping mall platform. It operates on the shopping_mall_product_option_values table, which represents individual option values (such as a color or size) tied to a product's option group (e.g., the 'Red' value for the 'Color' option of a T-shirt product). The function allows sellers or admins to modify properties like the display value or display order for an existing option value belonging to a given product's option group, enforcing required validations for value uniqueness and product/option association. Business logic ensures only authorized sellers (who own the product) or admins can update option values. The operation supports updating display ordering and correcting typographical mistakes. Changing an option value triggers updates in the mapping of SKUs using this value.","description":"This API operation allows sellers or admins to modify the value associated with a specific product option for a designated product within the e-commerce platform. The option value is a component of the variant system, enabling product listings to support multiple selectable attributes such as color, size, or material. Each option value must remain unique within its option group and product, and changes must not violate variant combination integrity.\n\nSecurity checks ensure that only the seller owning the product or platform admins can update an option value. Attempting to update an option value not associated with the specified product or option group returns a not-found or unauthorized error. All modifications update the updated_at timestamp for audit purposes, and relevant product SKUs using this value may require downstream updates or cache invalidation.\n\nThe structure strictly requires the three-level identifier path (productId, optionId, valueId) to target the exact value record. Business logic prohibits updating a value to one that would duplicate an existing value within the same option. If the value is currently referenced by active orders or SKUs, business validation ensures updates are consistent and legal. Errors are returned for not found, forbidden, or validation violations. This operation relates to the shopping_mall_product_option_values and their links to shopping_mall_product_options and shopping_mall_products tables.","summary":"Update a specific option value (e.g., color or size) for a product option, by product ID, option ID, and value ID, in the shopping_mall_product_option_values table.","parameters":[{"name":"productId","description":"Unique identifier of the product the option belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier of the option group within the product (e.g., color, size).","schema":{"type":"string","format":"uuid"}},{"name":"valueId","description":"Unique identifier of the option value to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the product option value (e.g., value name, display order, etc.).","typeName":"IShoppingMallProductOptionValue.IUpdate"},"responseBody":{"description":"The updated product option value detail for the given product, option, and value ID.","typeName":"IShoppingMallProductOptionValue"},"authorizationType":null,"authorizationRole":"admin","name":"update","method":"put","path":"/shoppingMall/admin/products/{productId}/options/{optionId}/values/{valueId}","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its option values can be updated or managed."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"Product option must exist before an option value for that option can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options/{optionId}/values","method":"post"},"description":"Product option value must exist before it can be updated."}]},{"specification":"This operation permanently removes a specific product option value from the platform's variant system, by product ID, option ID, and value ID. It operates on the shopping_mall_product_option_values table, ensuring that the requested value exists and is not currently in use by any SKUs or active orders. Only the owning seller or platform administrators can perform this action. The operation enforces referential integrity and business rules prohibiting deletion if the value is referenced by product SKUs tied to open orders or if deletion would orphan required product combinations.","description":"This API operation enables a seller or administrator to delete a single option value from an option group of a product, such as removing 'Blue' from a product's available color options. The operation targets the shopping_mall_product_option_values entity, requiring unique path identification for the product, option, and value.\n\nSecurity rules require that the user is either the seller who owns the product or an administrator. Deletion is only permitted if the value is not in active use by any product SKU or pending orders; attempts to delete in-use values result in validation errors. If successfully removed, the value is deleted from its option group, and all dependent SKU mappings are updated accordingly. The deleted value is permanently removed (hard delete) from the database, as there is no soft deletion mechanism for this field in the schema.\n\nThe operation supports comprehensive error handling for not found, unauthorized, or business logic violations. The request requires all identifier path parameters to target the specific value. Attempting to remove a value currently in use or required for a product's option matrix returns a relevant error message. Audit logging registers all deletes for compliance.","summary":"Permanently delete a specific product option value for a product option, by product ID, option ID, and value ID, in the shopping_mall_product_option_values table.","parameters":[{"name":"productId","description":"Unique identifier of the product the option belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier of the option group within the product (e.g., color, size).","schema":{"type":"string","format":"uuid"}},{"name":"valueId","description":"Unique identifier of the option value to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","method":"delete","path":"/shoppingMall/seller/products/{productId}/options/{optionId}/values/{valueId}","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its option values can be deleted."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"Product option must exist before one of its option values can be deleted."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options/{optionId}/values","method":"post"},"description":"Product option value must exist before it can be deleted."}]},{"specification":"This operation permanently removes a specific product option value from the platform's variant system, by product ID, option ID, and value ID. It operates on the shopping_mall_product_option_values table, ensuring that the requested value exists and is not currently in use by any SKUs or active orders. Only the owning seller or platform administrators can perform this action. The operation enforces referential integrity and business rules prohibiting deletion if the value is referenced by product SKUs tied to open orders or if deletion would orphan required product combinations.","description":"This API operation enables a seller or administrator to delete a single option value from an option group of a product, such as removing 'Blue' from a product's available color options. The operation targets the shopping_mall_product_option_values entity, requiring unique path identification for the product, option, and value.\n\nSecurity rules require that the user is either the seller who owns the product or an administrator. Deletion is only permitted if the value is not in active use by any product SKU or pending orders; attempts to delete in-use values result in validation errors. If successfully removed, the value is deleted from its option group, and all dependent SKU mappings are updated accordingly. The deleted value is permanently removed (hard delete) from the database, as there is no soft deletion mechanism for this field in the schema.\n\nThe operation supports comprehensive error handling for not found, unauthorized, or business logic violations. The request requires all identifier path parameters to target the specific value. Attempting to remove a value currently in use or required for a product's option matrix returns a relevant error message. Audit logging registers all deletes for compliance.","summary":"Permanently delete a specific product option value for a product option, by product ID, option ID, and value ID, in the shopping_mall_product_option_values table.","parameters":[{"name":"productId","description":"Unique identifier of the product the option belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier of the option group within the product (e.g., color, size).","schema":{"type":"string","format":"uuid"}},{"name":"valueId","description":"Unique identifier of the option value to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","method":"delete","path":"/shoppingMall/admin/products/{productId}/options/{optionId}/values/{valueId}","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its option value can be deleted."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"Product option must exist before one of its option values can be deleted."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options/{optionId}/values","method":"post"},"description":"Product option value must exist before it can be deleted."}]},{"specification":"This operation allows retrieval of all images attached to a specific product. It targets the shopping_mall_products table and is based on the relationship with shopping_mall_catalog_images, which stores all product and SKU images. This endpoint supports advanced filtering, pagination, and sorting of product images. It enables users to view the image gallery of a product, including alternate shots, additional views, and main photo, based on their association with the specified productId. Shopping_mall_catalog_images includes important fields such as image URL, alternative text, display order, and timestamp. The business logic ensures that only images tied to the given productId are fetched and users without proper permissions cannot see images of unpublished or private products.","description":"Retrieve a filtered and paginated list of images associated with a given product. This allows clients to display product galleries or additional product photos, as managed by sellers and admins. Image metadata includes URLs, alt text, and display order, which are critical for both end-user viewing and accessibility.\n\nSecurity and permission logic restrict access to images of unpublished or deactivated products as necessary. Only public or buyer-accessible products will have their images visible to customers, while sellers and admins may access full image sets for their own products or for administrative purposes.\n\nThis operation is closely tied with the shopping_mall_products and shopping_mall_catalog_images Prisma schema tables, where each image maintains a reference to either a product or SKU. All business logic for product visibility, data filtering, and image ordering is enforced at the application layer, and errors related to access or invalid productId are handled with clear user feedback.","summary":"Retrieve a paginated list of images for a specific product from shopping_mall_catalog_images by productId.","path":"/shoppingMall/products/{productId}/images","method":"patch","parameters":[{"name":"productId","description":"Unique identifier of the product whose images will be queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for image list filtering, pagination, and sorting for the specified product.","typeName":"IShoppingMallCatalogImage.IRequest"},"responseBody":{"description":"Paginated list of catalog images associated with the specified product, including their URLs, alt text, and order.","typeName":"IPageIShoppingMallCatalogImage"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its images can be retrieved."}]},{"specification":"This operation retrieves the details of a specific image associated with a given product. It leverages the shopping_mall_products and shopping_mall_catalog_images tables, enforcing that the returned image both exists and is linked to the provided productId and imageId. This is critical for presenting image details, such as the CDN URL, accessibility metadata, and display order, in product detail pages or product management dashboards. The operation ensures access controls so only images tied to public, active products or images accessible by authorized sellers/admins are exposed. Any attempt to access images not linked to the product, or belonging to unpublished/deactivated products, results in a business-level error.","description":"Fetches a single image's details (such as URL, alt text for accessibility, display order, and creation timestamp) for a target product by referencing both the product ID and the image ID. Validates that the image exists and belongs to the specified product to prevent leaks or misattribution across products.\n\nAccess permissions are enforced based on the published status of the product and the requester's entitlement—customers can only view images for public/active products, while admins/sellers may access full sets of product images for their own items. This operation references the shopping_mall_catalog_images table directly through the relationship to shopping_mall_products as defined in the Prisma schema, providing all available metadata for the queried image.\n\nError handling captures scenarios such as non-existent imageId, mismatched productId-image association, or insufficient permissions, returning clear, actionable messages for each case.","summary":"Get details for a specific image of a product from shopping_mall_catalog_images by productId and imageId.","path":"/shoppingMall/products/{productId}/images/{imageId}","method":"get","parameters":[{"name":"productId","description":"Unique identifier of the product whose image you want to retrieve.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image to be retrieved (must belong to the specified product).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the catalog image associated with the specified product, including image URI, alt text, and display order.","typeName":"IShoppingMallCatalogImage"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its images can be retrieved from the catalog."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/images","method":"post"},"description":"Image must be uploaded and associated with the specified product before it can be fetched by its id."}]},{"specification":"This operation allows a seller or admin to upload and associate a new image with an existing product. The product must already exist in the system, and the user must have appropriate permissions for the product. The operation accepts image metadata and the image file URI (pointing to CDN or storage location). Supports product gallery expansion, variant image insertion, and centralized moderation. All image uploads are subject to file size, type, and quantity constraints (as defined in business policies and enforced at business logic layer). Upon successful creation, the new image resource is returned with its assigned identifier and metadata.","description":"This API endpoint receives a request to upload a new image for an existing product. The target product is identified by the 'productId' path parameter and must already exist in the product catalog. Sellers can use this to expand the product gallery, or admins can use it for moderation or compliance requirements.\n\nRequest validation includes the following: the image file must be properly uploaded and accessible via a URI; metadata such as optional alt text and display order may be supplied; and the user must have the necessary authorization to modify this product's catalog content. The system will enforce maximum image count per product, allowable image file formats, and size limits as per current platform configuration. If the image violates policy, an error code and descriptive message will be provided.\n\nSecurity considerations: Only sellers assigned to the product and admins can add images to products. Attempts by unauthorized users will be denied. Image uploads may be subject to further background moderation (automated or manual) before being publicly displayed.\n\nRelated APIs: GET /products/{productId}/images (for viewing all images), PUT /products/{productId}/images/{imageId} (for modifying an existing image), DELETE /products/{productId}/images/{imageId} (for removing an image). Each modification triggers update to product cache and business audit logs. Failure cases (invalid productId, unauthorized action, invalid image, or storage errors) result in appropriate error responses and do not affect existing images.","summary":"Add a new image to a specific product (shopping_mall_products table).","parameters":[{"name":"productId","description":"Unique identifier of the product to which the new image will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the image to be uploaded, including the storage URI, optional alt text, and display order within the product gallery.","typeName":"IShoppingMallCatalogImage.ICreate"},"responseBody":{"description":"The newly created product image resource, including ID, URLs, and metadata.","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":"seller","name":"create","path":"/shoppingMall/seller/products/{productId}/images","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before an image can be added to it."}]},{"specification":"This operation allows a seller or admin to upload and associate a new image with an existing product. The product must already exist in the system, and the user must have appropriate permissions for the product. The operation accepts image metadata and the image file URI (pointing to CDN or storage location). Supports product gallery expansion, variant image insertion, and centralized moderation. All image uploads are subject to file size, type, and quantity constraints (as defined in business policies and enforced at business logic layer). Upon successful creation, the new image resource is returned with its assigned identifier and metadata.","description":"This API endpoint receives a request to upload a new image for an existing product. The target product is identified by the 'productId' path parameter and must already exist in the product catalog. Sellers can use this to expand the product gallery, or admins can use it for moderation or compliance requirements.\n\nRequest validation includes the following: the image file must be properly uploaded and accessible via a URI; metadata such as optional alt text and display order may be supplied; and the user must have the necessary authorization to modify this product's catalog content. The system will enforce maximum image count per product, allowable image file formats, and size limits as per current platform configuration. If the image violates policy, an error code and descriptive message will be provided.\n\nSecurity considerations: Only sellers assigned to the product and admins can add images to products. Attempts by unauthorized users will be denied. Image uploads may be subject to further background moderation (automated or manual) before being publicly displayed.\n\nRelated APIs: GET /products/{productId}/images (for viewing all images), PUT /products/{productId}/images/{imageId} (for modifying an existing image), DELETE /products/{productId}/images/{imageId} (for removing an image). Each modification triggers update to product cache and business audit logs. Failure cases (invalid productId, unauthorized action, invalid image, or storage errors) result in appropriate error responses and do not affect existing images.","summary":"Add a new image to a specific product (shopping_mall_products table).","parameters":[{"name":"productId","description":"Unique identifier of the product to which the new image will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the image to be uploaded, including the storage URI, optional alt text, and display order within the product gallery.","typeName":"IShoppingMallCatalogImage.ICreate"},"responseBody":{"description":"The newly created product image resource, including ID, URLs, and metadata.","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/products/{productId}/images","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before an image can be added to it."}]},{"specification":"This operation allows a seller or admin to update metadata for an existing image associated with a product. Typical updates include changing the alt text, display order, or replacing the image reference with a new URI. The operation references both the product (via 'productId' path parameter) and the specific image (via 'imageId'). Validation ensures the image exists, belongs to the indicated product, and is modifiable by the acting user. The updated image object is returned upon success, reflecting all new metadata.","description":"This API endpoint receives a request to update image metadata for a specific image belonging to a product. It supports changing properties such as alt text (for accessibility), display order (for gallery sorting), or image URI (for replacing the visual asset).\n\nOnly authorized users, specifically the seller assigned to the product or designated admins, may perform this operation. The endpoint validates both the existence of the referenced image and the user's permission to modify it. The business logic layer ensures that updates are consistent with product limits (e.g., ordering within the current product image set) and enforces audit logging for accountability.\n\nIf the operation is successful, the response includes the newly updated image object with all applied changes. Failure modes include invalid product or image IDs, permission denials, invalid input data, or attempts to update images not belonging to the specified product. Related endpoints are POST /products/{productId}/images for creation and DELETE /products/{productId}/images/{imageId} for removal. All modifications affect product cache and may trigger UI gallery reorder.","summary":"Update an image's metadata for a specific product (shopping_mall_products, shopping_mall_catalog_images).","parameters":[{"name":"productId","description":"Unique identifier of the product whose image is to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image to update within the product's gallery.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New image metadata or reference to apply to this product image record.","typeName":"IShoppingMallCatalogImage.IUpdate"},"responseBody":{"description":"The updated product image resource, including all changes and identifiers.","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/products/{productId}/images/{imageId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its associated image can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/images","method":"post"},"description":"Product image must exist before its metadata can be updated."}]},{"specification":"This operation allows a seller or admin to update metadata for an existing image associated with a product. Typical updates include changing the alt text, display order, or replacing the image reference with a new URI. The operation references both the product (via 'productId' path parameter) and the specific image (via 'imageId'). Validation ensures the image exists, belongs to the indicated product, and is modifiable by the acting user. The updated image object is returned upon success, reflecting all new metadata.","description":"This API endpoint receives a request to update image metadata for a specific image belonging to a product. It supports changing properties such as alt text (for accessibility), display order (for gallery sorting), or image URI (for replacing the visual asset).\n\nOnly authorized users, specifically the seller assigned to the product or designated admins, may perform this operation. The endpoint validates both the existence of the referenced image and the user's permission to modify it. The business logic layer ensures that updates are consistent with product limits (e.g., ordering within the current product image set) and enforces audit logging for accountability.\n\nIf the operation is successful, the response includes the newly updated image object with all applied changes. Failure modes include invalid product or image IDs, permission denials, invalid input data, or attempts to update images not belonging to the specified product. Related endpoints are POST /products/{productId}/images for creation and DELETE /products/{productId}/images/{imageId} for removal. All modifications affect product cache and may trigger UI gallery reorder.","summary":"Update an image's metadata for a specific product (shopping_mall_products, shopping_mall_catalog_images).","parameters":[{"name":"productId","description":"Unique identifier of the product whose image is to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image to update within the product's gallery.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New image metadata or reference to apply to this product image record.","typeName":"IShoppingMallCatalogImage.IUpdate"},"responseBody":{"description":"The updated product image resource, including all changes and identifiers.","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/products/{productId}/images/{imageId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its image metadata can be updated. The image record references a valid product, so the product must be created first."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/images","method":"post"},"description":"Image must exist for this product before the image metadata can be updated. The image record must be created first and belong to the specified product."}]},{"specification":"This operation permanently removes an image from a specified product by its unique image ID. It operates on the shopping_mall_catalog_images table, which is tightly integrated with the shopping_mall_products entity. Deleting a product image affects how the product is displayed in both the catalog and detail pages for customers, sellers, and admins. This endpoint ensures only authorized users (seller or admin) can remove images from their own products, with major implications for product presentation and compliance with platform policies.","description":"The main purpose of this API operation is to enable sellers or administrators to remove an individual image associated with a given product. The deletion process ensures that the specified image record is permanently deleted from the shopping_mall_catalog_images table: the system removes the image by its unique imageId and verifies that the requesting user is the seller of the product or an authorized admin.\n\nSecurity rules require strict authorization so that only the product's owner (seller) or platform admins are permitted to perform this operation. The relationship to the shopping_mall_products and shopping_mall_catalog_images tables is crucial since images are referenced by productId and are displayed in product galleries throughout the marketplace. Additionally, the operation respects any logical or business constraints, such as ensuring at least one product image remains if a business rule requires it, and denies deletion otherwise.\n\nBusiness logic for validation includes checking that the product and image exist and that the image is indeed associated with the given productId. If the image being deleted is the product's primary image, the system may trigger fallback behavior to another available image or flag the product as lacking a main image; error handling must inform the caller of such states and enforce consistent catalog appearance. This operation is related to the PATCH /products/{productId}/images endpoint for retrieving or updating product images and should be documented together for product management workflows.","summary":"Delete an image from a product in shopping_mall_catalog_images by imageId.","parameters":[{"name":"productId","description":"Unique identifier of the product whose image will be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image to be deleted from the specified product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","seller"],"name":"erase","path":"/shoppingMall/admin/products/{productId}/images/{imageId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before an image can be deleted from it. The image to be deleted must belong to a valid product, so the product's creation is required."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/images","method":"post"},"description":"Image must exist for this product before it can be deleted. The image record must be created for the specified product first."}]},{"specification":"This operation permanently removes an image from a specified product by its unique image ID. It operates on the shopping_mall_catalog_images table, which is tightly integrated with the shopping_mall_products entity. Deleting a product image affects how the product is displayed in both the catalog and detail pages for customers, sellers, and admins. This endpoint ensures only authorized users (seller or admin) can remove images from their own products, with major implications for product presentation and compliance with platform policies.","description":"The main purpose of this API operation is to enable sellers or administrators to remove an individual image associated with a given product. The deletion process ensures that the specified image record is permanently deleted from the shopping_mall_catalog_images table: the system removes the image by its unique imageId and verifies that the requesting user is the seller of the product or an authorized admin.\n\nSecurity rules require strict authorization so that only the product's owner (seller) or platform admins are permitted to perform this operation. The relationship to the shopping_mall_products and shopping_mall_catalog_images tables is crucial since images are referenced by productId and are displayed in product galleries throughout the marketplace. Additionally, the operation respects any logical or business constraints, such as ensuring at least one product image remains if a business rule requires it, and denies deletion otherwise.\n\nBusiness logic for validation includes checking that the product and image exist and that the image is indeed associated with the given productId. If the image being deleted is the product's primary image, the system may trigger fallback behavior to another available image or flag the product as lacking a main image; error handling must inform the caller of such states and enforce consistent catalog appearance. This operation is related to the PATCH /products/{productId}/images endpoint for retrieving or updating product images and should be documented together for product management workflows.","summary":"Delete an image from a product in shopping_mall_catalog_images by imageId.","parameters":[{"name":"productId","description":"Unique identifier of the product whose image will be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image to be deleted from the specified product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","seller"],"name":"erase","path":"/shoppingMall/seller/products/{productId}/images/{imageId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before an image can be deleted from it."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/images","method":"post"},"description":"Product image must be created before it can be deleted from the product."}]},{"specification":"This operation retrieves a paginated, filterable list of images associated with a specific product SKU (Stock Keeping Unit). It operates on the shopping_mall_catalog_images table, relating each image to an individual SKU in the shopping_mall_product_skus table. The endpoint supports advanced filtering, searching, and sorting for image metadata, enabling sellers and admins to efficiently view and manage images attached to SKUs. Pagination parameters allow for scalable responses when SKUs have multiple images (e.g., multiple angles/colors per variant).","description":"This operation enables the retrieval and management of images associated with a single product SKU for catalog, display, or moderation purposes. Primary use cases include sellers needing to review all images attached to a variant before updating, admins conducting review/moderation of SKU images, and marketplace applications displaying images per SKU on variant selection changes. The core business logic performs search with optional filters and paginates results for efficient loading.\n\nAuthorization ensures that only the SKU's owner (seller) or an administrator may perform this operation, preventing unauthorized access to catalog assets. The relationships to shopping_mall_product_skus and shopping_mall_catalog_images are validated to ensure only images belonging to the specified SKU are included in the response.\n\nValidation checks confirm that the SKU exists and belongs to the authenticated seller (if a seller is accessing), and that images are actually associated as children of the specified SKU. Users may request pagination or use sorting/filtering parameters (e.g., by upload date, display order) for more complex use cases. Expected responses include the image metadata and URIs for client rendering or further product management. Related API operations include POST for image upload and DELETE for image removal; these should be documented together to provide a complete management lifecycle for SKU images.","summary":"List images for a specific product SKU from shopping_mall_catalog_images, supporting advanced filtering/sorting.","parameters":[{"name":"productId","description":"Unique identifier of the product whose SKU's images will be retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the SKU whose images will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for image list retrieval, including search and pagination options specific to the SKU context.","typeName":"IShoppingMallCatalogImage.IRequest"},"responseBody":{"description":"Paginated list of images for the specified SKU, including image metadata, URIs, and associated details from shopping_mall_catalog_images.","typeName":"IPageIShoppingMallCatalogImage"},"authorizationRoles":["admin","seller"],"name":"index","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/images","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before SKU images can be queried."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"SKU must be created before listing or managing its images with filters."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/images","method":"post"},"description":"At least one SKU image must be created before a paginated list or advanced search/filter can yield meaningful results."}]},{"specification":"This operation retrieves a paginated, filterable list of images associated with a specific product SKU (Stock Keeping Unit). It operates on the shopping_mall_catalog_images table, relating each image to an individual SKU in the shopping_mall_product_skus table. The endpoint supports advanced filtering, searching, and sorting for image metadata, enabling sellers and admins to efficiently view and manage images attached to SKUs. Pagination parameters allow for scalable responses when SKUs have multiple images (e.g., multiple angles/colors per variant).","description":"This operation enables the retrieval and management of images associated with a single product SKU for catalog, display, or moderation purposes. Primary use cases include sellers needing to review all images attached to a variant before updating, admins conducting review/moderation of SKU images, and marketplace applications displaying images per SKU on variant selection changes. The core business logic performs search with optional filters and paginates results for efficient loading.\n\nAuthorization ensures that only the SKU's owner (seller) or an administrator may perform this operation, preventing unauthorized access to catalog assets. The relationships to shopping_mall_product_skus and shopping_mall_catalog_images are validated to ensure only images belonging to the specified SKU are included in the response.\n\nValidation checks confirm that the SKU exists and belongs to the authenticated seller (if a seller is accessing), and that images are actually associated as children of the specified SKU. Users may request pagination or use sorting/filtering parameters (e.g., by upload date, display order) for more complex use cases. Expected responses include the image metadata and URIs for client rendering or further product management. Related API operations include POST for image upload and DELETE for image removal; these should be documented together to provide a complete management lifecycle for SKU images.","summary":"List images for a specific product SKU from shopping_mall_catalog_images, supporting advanced filtering/sorting.","parameters":[{"name":"productId","description":"Unique identifier of the product whose SKU's images will be retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the SKU whose images will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for image list retrieval, including search and pagination options specific to the SKU context.","typeName":"IShoppingMallCatalogImage.IRequest"},"responseBody":{"description":"Paginated list of images for the specified SKU, including image metadata, URIs, and associated details from shopping_mall_catalog_images.","typeName":"IPageIShoppingMallCatalogImage"},"authorizationRoles":["admin","seller"],"name":"index","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/images","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"A product must be created before SKUs and their images can be managed. The productId refers to a product entity created by this operation."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"A SKU must exist for the specified product before images can be listed or managed for that SKU. The skuId refers to a SKU entity created by this operation."}]},{"specification":"This operation retrieves a specific image associated with a SKU of a product. It is designed to allow users (customers, sellers, and admins) to view high-resolution product or variant images, which are important for purchasing decisions and catalog display. The operation ensures users can only access images that are not soft-deleted and belong to the designated product and SKU. Images are referenced from the shopping_mall_catalog_images table, which provides details such as the URI, alt text for accessibility, display order, and the timestamp of creation. Only images actually linked to the correct product SKU are returned, with validation against path parameters. This endpoint supports customer-facing product page rendering as well as seller catalog management flows.","description":"This API endpoint retrieves an individual image for a specific SKU of a product. It references the shopping_mall_catalog_images table, which manages all image files associated with products and SKUs in the shopping mall.\n\nThe operation requires three path parameters: productId, skuId, and imageId to guarantee the correct association and enforce permissions. It returns the full metadata for the image, including the image URI, display order, and alternate text when defined. The endpoint supports business logic to filter out images that have been deleted (soft-delete pattern using deleted_at in the schema), and to ensure users cannot access images unrelated to the specified product or SKU.\n\nThis operation supports both customer- and seller-facing use cases, enabling users to view variant-specific images on product detail pages or within seller dashboards. For admin users, the operation may also integrate with catalog moderation flows. Error handling includes 404 for invalid or unauthorized access, and the response is limited to non-deleted entries.\n\nThis endpoint is related to broader catalog browsing and merchant content management functions, and aligns with the platform's multilingual, variant-rich product model as defined in the Prisma schema.","summary":"Retrieve a specific SKU image for a product (shopping_mall_catalog_images)","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the target SKU (variant)","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image file","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Image metadata and URI for a specific SKU of a product.","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"A product must be created before its SKUs and images can exist. The productId references a product created by this operation."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"A SKU must exist under the product before an image can be associated with it. The skuId refers to a SKU created by this operation."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/images","method":"post"},"description":"An image must be created and assigned to the SKU before it can be retrieved by imageId. The imageId refers to an image added via this operation."}],"path":"/shoppingMall/products/{productId}/skus/{skuId}/images/{imageId}","method":"get"},{"specification":"This operation allows a seller or admin to upload (attach) one or more images to a specific SKU (variant) of a product for detailed catalog management. It operates on the shopping_mall_catalog_images table and supports associating newly uploaded images (via URL or pre-uploaded assets) with a given product and SKU. The request body must supply image metadata (including URI, alt text, and display order), and the operation will create a record linked to the appropriate product and SKU. Only authorized sellers for the SKU's product (or admins) may perform this action. The integrity and association of product, SKU, and image are strictly validated. This supports business requirements for rich catalog content and seller-driven variant presentation.","description":"This API endpoint enables an authorized seller (owner of the product/SKU) or an admin to create and attach a new image to a specific SKU variant of a product. It references the shopping_mall_catalog_images table for image metadata and assignment.\n\nThe operation validates all input: the SKU and product must exist and be associated, and the caller must have permission to manage catalog content for the SKU. The request body follows the IShoppingMallCatalogImage.ICreate schema, which specifies required fields such as the image URI (must be a valid, previously uploaded asset), alt text (optional for accessibility), and display order (for gallery sorting).\n\nProper business logic checks must confirm seller authorization and enforce catalog policies (e.g., maximum images per SKU, file-size/type restrictions if applicable). The operation creates the new image record, linking it to the SKU and, optionally, the product. Secure audit logging is recommended for admin actions. Upon success, the full image record is returned, including assigned imageId for future reference.\n\nError handling covers permission validation (for sellers/admins), validation of SKU/Product existence, image limit enforcement, and product-SKU relationship checks.","summary":"Upload and attach a new image to a product SKU (shopping_mall_catalog_images)","parameters":[{"name":"productId","description":"Unique identifier of the parent product","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the target SKU (variant)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Image information and association data for uploading a new SKU image","typeName":"IShoppingMallCatalogImage.ICreate"},"responseBody":{"description":"Metadata and URI for the newly attached SKU image.","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before a SKU image can be associated with it."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must be created for the product before an image can be attached to the SKU."}],"path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/images","method":"post"},{"specification":"This operation allows a seller or admin to upload (attach) one or more images to a specific SKU (variant) of a product for detailed catalog management. It operates on the shopping_mall_catalog_images table and supports associating newly uploaded images (via URL or pre-uploaded assets) with a given product and SKU. The request body must supply image metadata (including URI, alt text, and display order), and the operation will create a record linked to the appropriate product and SKU. Only authorized sellers for the SKU's product (or admins) may perform this action. The integrity and association of product, SKU, and image are strictly validated. This supports business requirements for rich catalog content and seller-driven variant presentation.","description":"This API endpoint enables an authorized seller (owner of the product/SKU) or an admin to create and attach a new image to a specific SKU variant of a product. It references the shopping_mall_catalog_images table for image metadata and assignment.\n\nThe operation validates all input: the SKU and product must exist and be associated, and the caller must have permission to manage catalog content for the SKU. The request body follows the IShoppingMallCatalogImage.ICreate schema, which specifies required fields such as the image URI (must be a valid, previously uploaded asset), alt text (optional for accessibility), and display order (for gallery sorting).\n\nProper business logic checks must confirm seller authorization and enforce catalog policies (e.g., maximum images per SKU, file-size/type restrictions if applicable). The operation creates the new image record, linking it to the SKU and, optionally, the product. Secure audit logging is recommended for admin actions. Upon success, the full image record is returned, including assigned imageId for future reference.\n\nError handling covers permission validation (for sellers/admins), validation of SKU/Product existence, image limit enforcement, and product-SKU relationship checks.","summary":"Upload and attach a new image to a product SKU (shopping_mall_catalog_images)","parameters":[{"name":"productId","description":"Unique identifier of the parent product","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the target SKU (variant)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Image information and association data for uploading a new SKU image","typeName":"IShoppingMallCatalogImage.ICreate"},"responseBody":{"description":"Metadata and URI for the newly attached SKU image.","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before a SKU image can be associated with it."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"SKU must be created for the product before an image can be attached to the SKU."}],"path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/images","method":"post"},{"specification":"This operation updates the image associated with a specific SKU of a product. It is tied to the shopping_mall_catalog_images table, which manages images for both products and their variant SKUs. The operation allows sellers (and admins) to modify properties such as the URL, alt text, or display order of a SKU-level image. Only the seller of the product or an admin can perform this operation; customers cannot. Validation ensures the image exists and is linked to the correct SKU and product. Related business rules include restricting changes for images not owned by the seller and properly updating timestamps and cache for catalog consistency. Audit records should be maintained for change history.","description":"This API enables sellers to update a specific image record associated with one of their product SKUs by imageId. Users must provide the IDs for the product, SKU, and image to ensure proper ownership and scoping. The update can modify details such as the display order for galleries, alt text for accessibility, or the CDN URL for the image itself.\n\nAuthorization is strictly limited to the seller who owns the product/SKU or administrative accounts. Attempts to update an image for SKUs/products the user doesn't own will be denied with a clear error. Admins may use this operation for moderation or compliance. All input data is checked to guarantee type, length, and referential integrity. Upon successful update, the updated image record is returned.\n\nThis operation is necessary for catalog management, supporting seller workflows for product presentation, and is designed to enforce platform catalog standards. Related operations include image upload (creation), deletion, and image reordering within a SKU's image list. Errors may occur if imageId is not valid for the SKU/product or the user lacks sufficient permissions.","summary":"Update an existing SKU image for a product. (shopping_mall_catalog_images)","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the target SKU for the product","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image associated with the SKU","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields of the SKU image to update (e.g., url, alt text, display order)","typeName":"IShoppingMallCatalogImage.IUpdate"},"responseBody":{"description":"The updated SKU image record after applying changes","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/images/{imageId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before associating or updating SKU images for its variants."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must be created for the product before any SKU-level images can be managed."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/images","method":"post"},"description":"A SKU image must be created before it can be updated."}]},{"specification":"This operation updates the image associated with a specific SKU of a product. It is tied to the shopping_mall_catalog_images table, which manages images for both products and their variant SKUs. The operation allows sellers (and admins) to modify properties such as the URL, alt text, or display order of a SKU-level image. Only the seller of the product or an admin can perform this operation; customers cannot. Validation ensures the image exists and is linked to the correct SKU and product. Related business rules include restricting changes for images not owned by the seller and properly updating timestamps and cache for catalog consistency. Audit records should be maintained for change history.","description":"This API enables sellers to update a specific image record associated with one of their product SKUs by imageId. Users must provide the IDs for the product, SKU, and image to ensure proper ownership and scoping. The update can modify details such as the display order for galleries, alt text for accessibility, or the CDN URL for the image itself.\n\nAuthorization is strictly limited to the seller who owns the product/SKU or administrative accounts. Attempts to update an image for SKUs/products the user doesn't own will be denied with a clear error. Admins may use this operation for moderation or compliance. All input data is checked to guarantee type, length, and referential integrity. Upon successful update, the updated image record is returned.\n\nThis operation is necessary for catalog management, supporting seller workflows for product presentation, and is designed to enforce platform catalog standards. Related operations include image upload (creation), deletion, and image reordering within a SKU's image list. Errors may occur if imageId is not valid for the SKU/product or the user lacks sufficient permissions.","summary":"Update an existing SKU image for a product. (shopping_mall_catalog_images)","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the target SKU for the product","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image associated with the SKU","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields of the SKU image to update (e.g., url, alt text, display order)","typeName":"IShoppingMallCatalogImage.IUpdate"},"responseBody":{"description":"The updated SKU image record after applying changes","typeName":"IShoppingMallCatalogImage"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/images/{imageId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before associating or updating SKU images for its variants."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"SKU must be created for the product before any SKU-level images can be managed."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/images","method":"post"},"description":"A SKU image must be created before it can be updated."}]},{"specification":"This operation permanently removes an image associated with a given product SKU. It operates on the shopping_mall_catalog_images table, which stores all product and SKU image references. The operation is available only to the seller who owns the product/SKU or an admin. When invoked, the catalog image record identified by imageId is deleted, and the relational link to the SKU is broken. This change triggers downstream updates such as gallery refreshes and cache invalidation, ensuring the deleted image no longer appears in customer-facing views or administrative listings.","description":"This API allows authorized sellers to delete an existing image from a SKU they own, identified by the unique productId, skuId, and imageId path parameters. Deletion is enforced as a hard delete per the schema: the record is removed from the shopping_mall_catalog_images table (soft delete applies only if defined in schema; otherwise, actual deletion occurs), and any links to the SKU/product are immediately severed.\n\nAccess is strictly limited to the seller for the given product/SKU or admins. Unauthorized delete attempts (wrong seller, non-existent image, or mismatched SKU/product) yield clear error responses. All required IDs are validated to ensure context and avoid orphan deletions. Audit logging is mandatory to track which actor deleted the image.\n\nThis operation should be used in seller catalog management and admin moderation workflows, particularly when images become outdated, prohibited, or in violation of platform guidelines. It is related to gallery/image creation and update endpoints. Upon completion, the record will not be recoverable unless soft delete is later implemented by schema design.","summary":"Delete a SKU image for a specific product (shopping_mall_catalog_images)","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the target SKU for the product","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image associated with the SKU","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/images/{imageId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/images","method":"post"},"description":"A SKU image must exist before it can be deleted. The image record should be created and associated with the given product and SKU first."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"The SKU must exist before an image can be associated with and deleted from it."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"The product must exist before a SKU can be created under it, and before images associated to its SKUs can be deleted."}]},{"specification":"This operation permanently removes an image associated with a given product SKU. It operates on the shopping_mall_catalog_images table, which stores all product and SKU image references. The operation is available only to the seller who owns the product/SKU or an admin. When invoked, the catalog image record identified by imageId is deleted, and the relational link to the SKU is broken. This change triggers downstream updates such as gallery refreshes and cache invalidation, ensuring the deleted image no longer appears in customer-facing views or administrative listings.","description":"This API allows authorized sellers to delete an existing image from a SKU they own, identified by the unique productId, skuId, and imageId path parameters. Deletion is enforced as a hard delete per the schema: the record is removed from the shopping_mall_catalog_images table (soft delete applies only if defined in schema; otherwise, actual deletion occurs), and any links to the SKU/product are immediately severed.\n\nAccess is strictly limited to the seller for the given product/SKU or admins. Unauthorized delete attempts (wrong seller, non-existent image, or mismatched SKU/product) yield clear error responses. All required IDs are validated to ensure context and avoid orphan deletions. Audit logging is mandatory to track which actor deleted the image.\n\nThis operation should be used in seller catalog management and admin moderation workflows, particularly when images become outdated, prohibited, or in violation of platform guidelines. It is related to gallery/image creation and update endpoints. Upon completion, the record will not be recoverable unless soft delete is later implemented by schema design.","summary":"Delete a SKU image for a specific product (shopping_mall_catalog_images)","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier of the target SKU for the product","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image associated with the SKU","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/images/{imageId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/images","method":"post"},"description":"A SKU image must exist before it can be deleted. The image record should be created as related to the given product and SKU."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"The SKU must exist before a SKU image can be associated with and deleted."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"The product must exist before a SKU can be created under it, as well as before images can be managed for its SKUs."}]},{"specification":"This operation allows a seller or admin to update the inventory details of a specific SKU (Stock Keeping Unit) for a given product. It is associated with the shopping_mall_inventory_records table in the Prisma schema, which tracks per-SKU inventory status, available/reserved/sold counts, low stock thresholds, and current state. The PATCH method enables partial updates, allowing selective adjustment of inventory fields such as the available quantity, reserved quantity, sold quantity, low stock warning, or inventory status without needing to provide all data.\n\nFor business roles, only the owner seller of the SKU and platform admins are authorized to perform this update. The operation accepts a partial update request body which describes the inventory fields to change; for example, adjusting only the quantity_available to reflect new arrivals, lowering quantity_reserved after order cancellations, or updating status to 'blocked' during problem investigations.\n\nPermission checks are done on the SKU's association with the acting seller or via admin rights. Fields are validated: quantities must be integers (non-negative), status values must be valid for the inventory state machine ('in_stock', 'reserved', 'blocked', etc). The API returns the updated inventory record after the changes are applied. This PATCH API is related to the PUT inventory update, which performs a full replacement of the record.\n\nIf an invalid SKU or productId is provided, or the inventory record does not exist, a 404 error is issued. If the inventory update violates business logic (e.g., negative available quantity), a 422 error is returned. System-generated fields (created_at/updated_at) are updated automatically on modification.","description":"Update selective fields of a product SKU's inventory record in the e-commerce platform. This operation is used primarily by sellers to increase available stock after restock, decrease stock due to losses, or mark an SKU as blocked for sales. Sellers can also adjust low stock thresholds. Admins may perform the same operation for all SKUs as part of compliance or correction workflows.\n\nSecurity enforcement disallows customers or unrelated sellers from accessing this endpoint. The API ensures the SKU belongs to the given productId and that the caller has sufficient rights. Validation is performed on all mutable fields to guarantee no negative quantities and status transitions must follow the business state machine. On success, the new inventory values are shown. If unauthorized or SKU does not exist, an error with actionable information is returned.\n\nPATCH is preferable when only some fields of the inventory should be changed, as compared to the full-replacement PUT operation. This operation is linked to inventory change audit logs, which record all manual/admin inventory adjustments for compliance and rollback capabilities.","summary":"Partially update inventory values for a specific product SKU's inventory record","parameters":[{"name":"productId","description":"The unique identifier of the product to which the SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"The unique identifier of the SKU whose inventory is being modified.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Partial inventory update fields for the product SKU, such as available quantity or status.","typeName":"IShoppingMallInventoryRecord.IPartialUpdate"},"responseBody":{"description":"The updated inventory record reflecting the new state for the specified SKU.","typeName":"IShoppingMallInventoryRecord"},"authorizationType":null,"authorizationRole":"seller","name":"updatePartial","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/inventory","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its SKU's inventory can be updated."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist for the specified product before its inventory can be updated."}]},{"specification":"This operation allows a seller or admin to update the inventory details of a specific SKU (Stock Keeping Unit) for a given product. It is associated with the shopping_mall_inventory_records table in the Prisma schema, which tracks per-SKU inventory status, available/reserved/sold counts, low stock thresholds, and current state. The PATCH method enables partial updates, allowing selective adjustment of inventory fields such as the available quantity, reserved quantity, sold quantity, low stock warning, or inventory status without needing to provide all data.\n\nFor business roles, only the owner seller of the SKU and platform admins are authorized to perform this update. The operation accepts a partial update request body which describes the inventory fields to change; for example, adjusting only the quantity_available to reflect new arrivals, lowering quantity_reserved after order cancellations, or updating status to 'blocked' during problem investigations.\n\nPermission checks are done on the SKU's association with the acting seller or via admin rights. Fields are validated: quantities must be integers (non-negative), status values must be valid for the inventory state machine ('in_stock', 'reserved', 'blocked', etc). The API returns the updated inventory record after the changes are applied. This PATCH API is related to the PUT inventory update, which performs a full replacement of the record.\n\nIf an invalid SKU or productId is provided, or the inventory record does not exist, a 404 error is issued. If the inventory update violates business logic (e.g., negative available quantity), a 422 error is returned. System-generated fields (created_at/updated_at) are updated automatically on modification.","description":"Update selective fields of a product SKU's inventory record in the e-commerce platform. This operation is used primarily by sellers to increase available stock after restock, decrease stock due to losses, or mark an SKU as blocked for sales. Sellers can also adjust low stock thresholds. Admins may perform the same operation for all SKUs as part of compliance or correction workflows.\n\nSecurity enforcement disallows customers or unrelated sellers from accessing this endpoint. The API ensures the SKU belongs to the given productId and that the caller has sufficient rights. Validation is performed on all mutable fields to guarantee no negative quantities and status transitions must follow the business state machine. On success, the new inventory values are shown. If unauthorized or SKU does not exist, an error with actionable information is returned.\n\nPATCH is preferable when only some fields of the inventory should be changed, as compared to the full-replacement PUT operation. This operation is linked to inventory change audit logs, which record all manual/admin inventory adjustments for compliance and rollback capabilities.","summary":"Partially update inventory values for a specific product SKU's inventory record","parameters":[{"name":"productId","description":"The unique identifier of the product to which the SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"The unique identifier of the SKU whose inventory is being modified.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Partial inventory update fields for the product SKU, such as available quantity or status.","typeName":"IShoppingMallInventoryRecord.IPartialUpdate"},"responseBody":{"description":"The updated inventory record reflecting the new state for the specified SKU.","typeName":"IShoppingMallInventoryRecord"},"authorizationType":null,"authorizationRole":"admin","name":"updatePartial","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/inventory","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its SKU's inventory can be updated (admin action)."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"SKU must exist for the specified product before its inventory can be updated (admin action)."}]},{"specification":"This operation replaces the entire inventory record of a given SKU for a product with new data. It directly maps to the shopping_mall_inventory_records table in the Prisma schema, representing authoritative setting of all relevant SKU inventory fields (quantity_available, quantity_reserved, quantity_sold, low_stock_threshold, status, etc). The request body must provide all fields (non-partial update).\n\nThe operation is intended for cases such as a significant miscount correction, audit-driven reset, or administrative override, where all inventory properties need to be updated to a correct, consistent value. Only the SKU's owning seller or an admin may execute this operation, and strict validation applies: all quantities must be integers and not negative, inventory status must match allowable state values, and business relationships between SKU and product are enforced.\n\nAll changes are logged as inventory adjustments for compliance, and the full new record is returned after update. Invalid product/SKU IDs, unauthorized attempts, or rule violations result in error responses, with guidance on remediation. This replaces the partial update PATCH API when a total overwrite is needed.","description":"Replace the full set of inventory fields for a product SKU. All data in the inventory record (quantity_available, reserved, sold, low_stock_threshold, status) must be given, as no previous data is preserved. This operation ensures inventory and status values are set in a single atomic update, ideal for admin-initiated inventory resets or bulk reconciliation following audits or data imports.\n\nAuthorization is checked so only the owning seller or an admin can perform this. Any missing fields, invalid values, or business logic violations (such as negative stock) are rejected, and error messages are provided with remediation steps. On success, the entire, newly written inventory record is returned with updated timestamps.\n\nPut is not recommended for frequent operations, and should be reserved for full resets or major corrections. To change only a selection of fields, use the PATCH endpoint instead. This endpoint is also tightly coupled with business logic to write adjustment audit logs and trigger low-stock/business status signals if relevant.","summary":"Replace all inventory values for a specific SKU with a full update","parameters":[{"name":"productId","description":"The unique identifier of the product to which the SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"The unique identifier of the SKU whose full inventory record is being replaced.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complete inventory record fields for the SKU, replacing all previous data.","typeName":"IShoppingMallInventoryRecord.IUpdate"},"responseBody":{"description":"The fully updated inventory record for the SKU after replacement.","typeName":"IShoppingMallInventoryRecord"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/inventory","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist in the system before an inventory record can be replaced or updated for any of its SKUs."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must exist for the product before its associated inventory record can be replaced with new data."}]},{"specification":"This operation replaces the entire inventory record of a given SKU for a product with new data. It directly maps to the shopping_mall_inventory_records table in the Prisma schema, representing authoritative setting of all relevant SKU inventory fields (quantity_available, quantity_reserved, quantity_sold, low_stock_threshold, status, etc). The request body must provide all fields (non-partial update).\n\nThe operation is intended for cases such as a significant miscount correction, audit-driven reset, or administrative override, where all inventory properties need to be updated to a correct, consistent value. Only the SKU's owning seller or an admin may execute this operation, and strict validation applies: all quantities must be integers and not negative, inventory status must match allowable state values, and business relationships between SKU and product are enforced.\n\nAll changes are logged as inventory adjustments for compliance, and the full new record is returned after update. Invalid product/SKU IDs, unauthorized attempts, or rule violations result in error responses, with guidance on remediation. This replaces the partial update PATCH API when a total overwrite is needed.","description":"Replace the full set of inventory fields for a product SKU. All data in the inventory record (quantity_available, reserved, sold, low_stock_threshold, status) must be given, as no previous data is preserved. This operation ensures inventory and status values are set in a single atomic update, ideal for admin-initiated inventory resets or bulk reconciliation following audits or data imports.\n\nAuthorization is checked so only the owning seller or an admin can perform this. Any missing fields, invalid values, or business logic violations (such as negative stock) are rejected, and error messages are provided with remediation steps. On success, the entire, newly written inventory record is returned with updated timestamps.\n\nPut is not recommended for frequent operations, and should be reserved for full resets or major corrections. To change only a selection of fields, use the PATCH endpoint instead. This endpoint is also tightly coupled with business logic to write adjustment audit logs and trigger low-stock/business status signals if relevant.","summary":"Replace all inventory values for a specific SKU with a full update","parameters":[{"name":"productId","description":"The unique identifier of the product to which the SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"The unique identifier of the SKU whose full inventory record is being replaced.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complete inventory record fields for the SKU, replacing all previous data.","typeName":"IShoppingMallInventoryRecord.IUpdate"},"responseBody":{"description":"The fully updated inventory record for the SKU after replacement.","typeName":"IShoppingMallInventoryRecord"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/inventory","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist in the system before an admin can replace or update inventory for any SKU belonging to that product."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"SKU must exist for the product before the admin can fully replace its inventory record."}]},{"specification":"This operation retrieves a paginated, filterable list of inventory adjustment logs (such as increases, decreases, blocks, unblocks, corrections) for a specific product SKU. The operation is tied to the shopping_mall_inventory_logs table, enabling sellers and admins to audit and investigate changes to inventory state (quantity, adjustment type, actor) for a particular SKU under a given product. Used for operational transparency and error prevention in inventory management workflows.","path":"/shoppingMall/admin/products/{productId}/skus/{skuId}/inventory/logs","method":"patch","summary":"Search and paginate inventory adjustment logs for a product SKU (shopping_mall_inventory_logs)","description":"Fetch a paginated, filterable, and sortable list of inventory adjustment logs associated with a specific product SKU. This operation is essential for sellers and admins to monitor, review, and audit inventory changes such as manual increases, sales, cancellations, returns, system corrections, blocking/unblocking, and other inventory state transitions.\n\nThe API supports advanced filtering by date range, adjustment type (e.g., increase, decrease, block), actor (seller or admin), and related order reference for comprehensive forensic and business reporting. Sellers can access adjustment logs only for their own products/SKUs, while admins have access to all logs platform-wide.\n\nSecurity enforcement ensures that sellers cannot access logs not associated with their products. Pagination parameters enable scalable access to large adjustment histories. All responses are derived directly from the shopping_mall_inventory_logs table, which includes change metadata, actor information, quantities changed, and business context. Errors include unauthorized access, invalid SKU IDs, or malformed pagination/filter requests.","parameters":[{"name":"productId","description":"Unique identifier for the target product (UUID format) as referenced by shopping_mall_products.id.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier for the target product SKU (UUID format) as referenced by shopping_mall_product_skus.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, search, and pagination parameters to retrieve relevant inventory adjustment logs for a SKU.","typeName":"IShoppingMallInventoryLog.IRequest"},"responseBody":{"description":"A paginated collection of inventory adjustment log details for the specified SKU, including actor, quantity changed, type, and timestamps.","typeName":"IPageIShoppingMallInventoryLog"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before inventory logs can be audited for its SKUs."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/skus","method":"post"},"description":"SKU must be created for the product before inventory logs can be retrieved for it."}]},{"specification":"This operation retrieves a paginated, filterable list of inventory adjustment logs (such as increases, decreases, blocks, unblocks, corrections) for a specific product SKU. The operation is tied to the shopping_mall_inventory_logs table, enabling sellers and admins to audit and investigate changes to inventory state (quantity, adjustment type, actor) for a particular SKU under a given product. Used for operational transparency and error prevention in inventory management workflows.","path":"/shoppingMall/seller/products/{productId}/skus/{skuId}/inventory/logs","method":"patch","summary":"Search and paginate inventory adjustment logs for a product SKU (shopping_mall_inventory_logs)","description":"Fetch a paginated, filterable, and sortable list of inventory adjustment logs associated with a specific product SKU. This operation is essential for sellers and admins to monitor, review, and audit inventory changes such as manual increases, sales, cancellations, returns, system corrections, blocking/unblocking, and other inventory state transitions.\n\nThe API supports advanced filtering by date range, adjustment type (e.g., increase, decrease, block), actor (seller or admin), and related order reference for comprehensive forensic and business reporting. Sellers can access adjustment logs only for their own products/SKUs, while admins have access to all logs platform-wide.\n\nSecurity enforcement ensures that sellers cannot access logs not associated with their products. Pagination parameters enable scalable access to large adjustment histories. All responses are derived directly from the shopping_mall_inventory_logs table, which includes change metadata, actor information, quantities changed, and business context. Errors include unauthorized access, invalid SKU IDs, or malformed pagination/filter requests.","parameters":[{"name":"productId","description":"Unique identifier for the target product (UUID format) as referenced by shopping_mall_products.id.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"Unique identifier for the target product SKU (UUID format) as referenced by shopping_mall_product_skus.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, search, and pagination parameters to retrieve relevant inventory adjustment logs for a SKU.","typeName":"IShoppingMallInventoryLog.IRequest"},"responseBody":{"description":"A paginated collection of inventory adjustment log details for the specified SKU, including actor, quantity changed, type, and timestamps.","typeName":"IPageIShoppingMallInventoryLog"},"authorizationType":null,"authorizationRole":"seller","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before inventory logs can be audited for its SKUs."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/skus","method":"post"},"description":"SKU must be created for the product before inventory logs can be retrieved for it."}]},{"specification":"This operation enables authenticated customers to search, filter, and paginate the contents of their active shopping cart, specifically the items (SKUs) currently held in the cart prior to order placement. This is associated with the shopping_mall_carts and shopping_mall_cart_items tables and is essential for surfacing cart item lists, their states, and potential purchase eligibility.","path":"/shoppingMall/customer/carts","method":"patch","summary":"Paginated search and retrieval of items in a customer's shopping cart (shopping_mall_carts, shopping_mall_cart_items)","description":"Retrieve a filtered and paginated list of shopping cart items for the authenticated customer. This operation returns all SKUs held in the cart, supporting search criteria such as product/SKU name, summary view, and advanced sorting.\n\nThis API integrates data from both the shopping_mall_carts and shopping_mall_cart_items entities, returning each item's SKU, product detail snapshot, unit price, added quantity, and last update time. The operation supports pagination and sorting, allowing customers to efficiently manage large or long-standing shopping carts.\n\nAuthorization is strictly enforced: customers may only access their own carts and cannot view or modify cart data of others. If no active cart is found, the operation returns an empty result set. All returned data accurately reflects the current state of the cart and its items in the shopping_mall_carts and shopping_mall_cart_items tables.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination parameters for cart item retrieval.","typeName":"IShoppingMallCartItem.IRequest"},"responseBody":{"description":"Paginated list of current shopping cart items for the authenticated customer, with SKU, product, price, and quantity details.","typeName":"IPageIShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created for the authenticated customer before paginating or retrieving items from the cart."}]},{"specification":"This operation retrieves the current state of a customer's shopping cart by its unique identifier. It accesses the shopping_mall_carts table and returns all relevant cart details, along with its line items and their quantities, prices, and associated SKUs. This read operation is essential for allowing customers to view and manage their cart before checkout, synchronize cart contents across devices/sessions, and validate correct items are present. The operation also supports system logic for showing discounts or price updates at the time of viewing. Security checks enforce that only the cart owner (customer) or relevant admin may access this data, based on business rules. This API is directly tied to the shopping_mall_carts and shopping_mall_cart_items tables and follows the required path parameter structure for resource retrieval.","description":"Retrieve the details of a specific shopping cart, allowing a customer to view the products, SKUs, and current quantities in their cart. This operation references the shopping_mall_carts and shopping_mall_cart_items tables, incorporating all cart structure, creation and update timestamps, and links to associated user and SKUs according to the schema.\n\nSecurity enforces that only the owner of the cart (authenticated customer) can access the cart, preventing unauthorized viewing by others. Admin users may also have access to view any cart for customer service or troubleshooting purposes. Attempts to access a non-existent or unauthorized cart will result in clear error responses.\n\nRelated business logic for price and inventory validation may be triggered here to ensure displayed information is up-to-date. This operation is frequently paired with cart modification and checkout processes in the customer journey.","summary":"Retrieve detailed information of a shopping cart by cartId, including all line items.","parameters":[{"name":"cartId","description":"Unique identifier (UUID) of the shopping cart to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete shopping cart details including cart meta information and its line items (SKUs, quantities, price per item), as defined by the ShoppingMallCart entity.","typeName":"IShoppingMallCart"},"authorizationRoles":["customer"],"name":"at","path":"/shoppingMall/customer/carts/{cartId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created for the customer before its details can be retrieved by cartId."}]},{"specification":"This operation creates a new shopping cart for an authenticated customer in the system. It adds a record to the shopping_mall_carts table and initializes the cart state as empty, associating it uniquely with the customer. The operation may also support restoring an existing cart if the customer already has one abandoned from a previous session, in compliance with business rules. The endpoint is critical for onboarding new customers, supporting first-time buyers, guest transitions to registered users, and for merging guest carts upon login. Security ensures that only authenticated customers can create carts, and each customer can have at most one active cart at any given time. The new cart's identifier is returned to the client for subsequent operations, per the data model.","description":"Create a new shopping cart for the currently authenticated customer. This writes a new entry into the shopping_mall_carts table, setting the owner and default creation state. If the customer already has a cart, system logic may choose to restore or merge with an abandoned/previous cart rather than create a second one; business logic will enforce this uniqueness.\n\nOnly an authenticated customer may use this endpoint. The system enforces that no more than one cart exists per customer, returning the current cart state if a cart already exists. Cart creation is typically handled automatically upon user registration or login if no active cart exists, but this API enables explicit cart creation when needed in the front-end flow.\n\nRelated operations include cart retrieval, adding items, and cart modification. Error handling addresses the case of duplicate cart creation attempts or violation of unique-per-customer constraints.","summary":"Create a new shopping cart for an authenticated customer and return the cart information.","parameters":[],"requestBody":{"description":"Parameters for creating a new shopping cart for the customer. Typically empty, but can be extended (e.g., for paying guest migration or cart merge instructions).","typeName":"IShoppingMallCart.ICreate"},"responseBody":{"description":"Details of the newly created or restored existing shopping cart for the customer, including cart ID and owner.","typeName":"IShoppingMallCart"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/carts","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the details of an existing shopping cart for a specific customer in the e-commerce platform. It allows customers to modify the contents of their shopping cart, such as changing the quantity of items or updating associated properties. The operation is based on the shopping_mall_carts table in the Prisma schema, which uniquely associates each customer with a single active cart. This endpoint requires authentication and is accessible to users with the 'customer' role. The request body should conform to the IShoppingMallCart.IUpdate type, which includes all fields that can be modified in the cart entity.","description":"This API endpoint enables a customer to update the contents or attributes of their shopping cart. The cart is uniquely identified by the cartId path parameter, which corresponds to the primary key in the shopping_mall_carts table.\n\nCustomers can use this operation to update their cart's items, such as changing quantities or removing entire items. The update logic ensures that changes are only applied to the authorized user's own cart, verifying cart ownership and data integrity. The request body must include the updated data as specified by the IShoppingMallCart.IUpdate schema, which reflects all allowable modifications defined in the shopping_mall_carts schema, including updated_at timestamp. Validation checks are performed to enforce business rules such as maximum allowed cart items, quantity per SKU, and stock availability.\n\nIf the cart does not exist, or if the user attempts to update a cart not owned by them, the operation returns an appropriate error message. Business logic handles scenarios such as updating to a quantity greater than available stock or attempting modifications when the cart has already been converted to an order. Related operations include retrieving cart details or adding/removing items individually. All updates are time-stamped for audit and customer experience tracking.","summary":"Update the existing shopping cart for the authenticated customer","parameters":[{"name":"cartId","description":"Unique identifier of the shopping cart to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the customer's shopping cart","typeName":"IShoppingMallCart.IUpdate"},"responseBody":{"description":"Detailed information of the updated shopping cart","typeName":"IShoppingMallCart"},"authorizationRoles":["customer"],"name":"update","path":"/shoppingMall/customer/carts/{cartId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created before it can be updated."}]},{"specification":"This operation permanently deletes a shopping cart associated with a customer in the e-commerce platform. It operates on the shopping_mall_carts table in the Prisma schema, which ensures each customer has only one active cart at a time. The operation requires the customer to be authenticated and to own the cart being deleted, enforcing strict ownership validation. Deleting a cart is an irreversible action that removes the cart and all its associated items from the database. This operation is restricted to users with the 'customer' role.","description":"This API endpoint allows an authenticated customer to permanently delete their shopping cart. The cart is specified by the cartId path parameter, which directly maps to the primary key in the shopping_mall_carts table.\n\nUpon receiving the delete request, the system validates that the cart exists and belongs to the authenticated user. Successful deletion results in the removal of the cart record and all related cart items; the operation performs a hard delete as there is no soft delete column in shopping_mall_carts. This ensures that abandoned or unwanted carts are purged, supporting clean state management for customers.\n\nIf a customer attempts to delete a cart not owned by them, the system returns an authorization error. Attempts to delete non-existent or already checked-out carts also trigger appropriate error messages, ensuring consistent business logic. Deleting a cart cannot be undone and requires the customer to recreate a cart for further shopping activities. Related operations include updating or retrieving cart details. All deletes are audited for compliance and troubleshooting.","summary":"Permanently delete a shopping cart owned by the authenticated customer","parameters":[{"name":"cartId","description":"Unique identifier of the shopping cart to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","path":"/shoppingMall/customer/carts/{cartId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must exist before it can be deleted. This operation creates the cart that will be targeted for deletion."}]},{"specification":"This operation retrieves the list of items in a specific customer's shopping cart, supporting filtering, sorting, and pagination. It is associated with the shopping_mall_cart_items table, allowing customers to view detailed information about each SKU (product variant), quantity, and unit price as they prepare for checkout. This operation ensures items shown are up-to-date, reflecting stock availability and current catalog status. The endpoint is critical for customer cart management, price updates before payment, and enables seamless cart review as part of the shopping flow.","path":"/shoppingMall/customer/carts/{cartId}/cartItems","method":"patch","summary":"Retrieve a paginated, filterable list of shopping cart items for a customer's cart (shopping_mall_cart_items).","description":"This operation is used to retrieve a paginated list of items currently contained in a specific customer's shopping cart. It references the shopping_mall_cart_items table, enabling customers to see which product SKUs, quantities, and pricing apply to their cart prior to checkout.\n\nSecurity considerations are addressed by verifying that the requesting user owns the cart in question. Only customers may access their own cart, and sensitive item details are never exposed to unauthorized users. Filtering and sorting options are provided so customers can see the latest changes (e.g., price, availability) before finalizing their purchase.\n\nAs part of the shopping experience, the response integrates product and SKU-level details such as name, image, price at addition, and item quantity, mapped against current inventory status. The operation returns paginated results and supports business rules for enforcing cart size, per-SKU limits, and warnings for out-of-stock items.\n\nRelated operations include modifying cart contents, adding new items, and proceeding to order placement. If the cart contains SKUs that have become unavailable or prices that have changed, this will be reflected in the results to prompt the customer to review accordingly. Error handling covers permissions, non-existent cart IDs, and attempts to access others' carts.","parameters":[{"name":"cartId","description":"Unique identifier of the customer's cart to retrieve items for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for searching cart items.","typeName":"IShoppingMallCartItem.IRequest"},"responseBody":{"description":"Paginated list of cart item summary details for the target cart.","typeName":"IPageIShoppingMallCartItem.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must exist before its cart items can be listed. This operation creates the cart referenced in the cartId path parameter."},{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/cartItems","method":"post"},"description":"At least one cart item (SKU) must exist to be listed in a shopping cart. This operation adds a cart item to the existing cart so item listing is possible."}]},{"specification":"This operation retrieves detailed information for a specific cart item within a customer's cart. It is based on the shopping_mall_cart_items table and enables customers to view SKU details, pricing at the time of addition, and quantity for precise cart review and management. The operation is essential during order preparation and cart modification workflows.","path":"/shoppingMall/customer/carts/{cartId}/cartItems/{cartItemId}","method":"get","summary":"Retrieve a single cart item with details for a specific customer's cart (shopping_mall_cart_items).","description":"This operation allows the customer to retrieve complete details for an individual cart item within their shopping cart. It is based on the shopping_mall_cart_items table and provides full context about the product SKU, name, corresponding unit price snapshot, and the selected quantity.\n\nOnly the customer who owns the cart has authorization to view this information. This ensures privacy and proper enforcement of data access rules. The data returned can be used for displaying detailed cart lines prior to checkout, reviewing price changes, or before taking actions such as updating or removing the item from the cart.\n\nThe path parameters strictly correspond to the specific cart and item combination, which is matched for both existence and ownership before any data is returned. Any attempt to access non-existent or unauthorized items results in clear errors. Relevant business rules, such as enforcing the maximum allowable quantity or showing up-to-date availability, are considered. The operation is used in conjunction with cart item update and removal APIs for complete cart management.","parameters":[{"name":"cartId","description":"Identifier of the customer's cart containing the item.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Identifier of the specific cart item to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for a single cart item in the specified cart.","typeName":"IShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"The shopping cart must be created before it can contain any cart items or be accessed by cartId."},{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/cartItems","method":"post"},"description":"The cart item must be created in the specified cart before it can be retrieved by its cartItemId."}]},{"specification":"This operation allows a customer to add a new product SKU as a line item to an existing active shopping cart. It operates on the shopping_mall_cart_items table, which links a cart to a SKU and stores quantity and the price snapshot at the time of addition. The operation supports validation to ensure SKU exists, is active, is in stock, and requested quantity does not exceed inventory limits. It enforces cart constraints like maximum unique items and quantity per SKU. When successful, the operation returns the updated cart item as confirmation. Only customers (authenticated users) can perform this action on their own cart.","description":"This endpoint enables a customer to add a product SKU as a new item in their shopping cart. When invoked, the system verifies the specified cart exists, belongs to the authenticated customer, and is in an active state. It checks that the SKU is valid, the requested quantity is at least one, does not exceed system-configured per-SKU limits, and that available inventory is sufficient at time of insertion.\n\nUpon successful validation, the item is added to the cart with the price captured as a snapshot for historical pricing integrity. If the item already exists, a validation error will be returned: use the update endpoint instead to change quantity. The operation enforces platform-level rules (maximum 50 unique items in cart, max 20 per SKU by default) and returns a detailed error object if limits are violated.\n\nOnly authenticated customers can add items to their own cart. This API corresponds to a transactional addition in shopping_mall_cart_items and is used in conjunction with cart management endpoints. Upon addition, the latest cart item details, including SKU info, quantity, and unit price, are returned.","summary":"Add a product SKU as a new item to an active customer's shopping cart (shopping_mall_cart_items).","parameters":[{"name":"cartId","description":"Unique identifier of the active shopping cart owned by the customer","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details of the SKU and quantity to add to the cart.","typeName":"IShoppingMallCartItem.ICreate"},"responseBody":{"description":"The newly added cart item including all resolved SKU/product details.","typeName":"IShoppingMallCartItem"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/carts/{cartId}/cartItems","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"The shopping cart must be created before a customer can add a new cart item to it."}]},{"specification":"This operation updates an existing item in a customer's active shopping cart. Operates on the shopping_mall_cart_items table by locating the cart item using cartId and cartItemId and modifying the quantity, or updating price snapshot if system rules apply. The system validates existence, cart ownership, SKU status, and inventory sufficiency, and enforces per-SKU and per-cart constraints. Returns the updated cart item on success. Only the owning customer can perform this operation.","description":"This endpoint allows a customer to update the quantity of a specific SKU item already present in their active shopping cart. The system verifies that the referenced cart exists, belongs to the authenticated requester, and the item is active/valid. Any update checks the inventory to ensure the new quantity does not exceed available stock or global per-SKU/cart maximums defined by platform business logic.\n\nIf the quantity is set to zero, the system will remove the item from the cart entirely. Price snapshot may be updated if required by policy (e.g., price change notification). This operation corresponds to in-place modification of a row in shopping_mall_cart_items. Validation errors are returned for attempts to update another user's cart, use an invalid or non-active SKU, or attempt to reserve more than allowed amount.\n\nOnly the owning customer may perform updates to their cart. This operation is used in concert with other cart management APIs to maintain cart integrity throughout the user journey. On success, the full updated cart item is provided as the response body.","summary":"Update the quantity or details of a specific cart item in an active customer's shopping cart (shopping_mall_cart_items).","parameters":[{"name":"cartId","description":"Unique identifier for the customer's active shopping cart","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Unique identifier for the cart item (SKU line item) being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update details for the cart item, typically only the quantity field.","typeName":"IShoppingMallCartItem.IUpdate"},"responseBody":{"description":"The updated cart item including current resolved SKU/product details.","typeName":"IShoppingMallCartItem"},"authorizationRoles":["customer"],"name":"update","path":"/shoppingMall/customer/carts/{cartId}/cartItems/{cartItemId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"This operation deletes a specific item from the customer's shopping cart, effectively removing the referenced SKU from the cart instance before order placement. It operates on the shopping_mall_cart_items table, which is a child table referenced by shopping_mall_carts. The operation ensures that the specified cart and item belong together, and that the cart is not committed to an order (i.e., has not yet been checked out). Removal is only possible for active carts belonging to the authenticated customer. Associated quantity and price snapshot data are removed. If this was the last item in the cart, the cart will remain but be empty.","description":"This API endpoint enables authenticated customers to remove a specific cart item, referenced by its unique cartItemId, from their current shopping cart (referenced as cartId). The endpoint ensures that only the cart owner can remove items from their own cart. Deleting an item updates the parent cart's modification timestamp and may impact the total number of unique items or the overall price summary presented to the customer during checkout.\n\nThe API enforces business rules by verifying that the target cart and item exist and that the cart belongs to the current customer. Attempting to remove a cart item from another customer's cart will result in an authorization error. If the item specified does not exist, the system will return a clear, actionable error message and leave the cart unchanged.\n\nThis operation reflects user-initiated updates and has no side effects on inventory reservation or order history. Once removed, the product SKU is no longer referenced for this cart in subsequent order placements. No soft delete is used for cart items—removal is a permanent operation, and the underlying row is erased from the shopping_mall_cart_items table.","summary":"Remove a specific cart item from a shopping cart (shopping_mall_cart_items).","parameters":[{"name":"cartId","description":"Unique identifier (UUID) of the customer's shopping cart.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Unique identifier (UUID) of the cart item to be removed from the cart.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","path":"/shoppingMall/customer/carts/{cartId}/cartItems/{cartItemId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a customer's wishlist information with advanced filtering, search, and pagination capabilities. It operates on the shopping_mall_wishlists and shopping_mall_wishlist_items tables to provide detailed or summary listings of a user's saved products. This is a read operation supporting complex queries for scenarios where customers wish to view, filter, or sort products in their wishlist. It supports retrieving wishlist items by product, category, date added, or status, with sorting and limits for effective frontend rendering.","description":"This API endpoint allows an authenticated customer to retrieve their entire wishlist, including all currently saved products. The wishlist is specific to the logged-in customer (referenced by the session token) and includes only products that have not been removed or deleted from the platform.\n\nThe API provides advanced capabilities for searching, filtering, and paginating the wishlist. Customers can apply filters such as product category, date range, or product name. Sorting options may include date added, product name, or recently updated. If wishlist items reference products that no longer exist or have been removed from sale, those entries are excluded from the result, ensuring only active products appear.\n\nThe wishlist data is paginated for easier client-side rendering, with support for specifying page size and number. Ownership of the wishlist is strictly enforced, and unauthorized attempts to access other customers' wishlists will result in an error. This endpoint does not support creating or updating wishlist content—only retrieval with query enhancements.","summary":"Search and retrieve a paginated, filtered list of wishlist products for a customer (shopping_mall_wishlists).","parameters":[],"requestBody":{"description":"Request parameters for filtering, sorting, and paginating the customer's wishlist retrieval operation.","typeName":"IShoppingMallWishlist.IRequest"},"responseBody":{"description":"Paginated list of wishlist products (summary) matching specified search criteria for the customer.","typeName":"IPageIShoppingMallWishlist.ISummary"},"authorizationRoles":["customer"],"name":"index","path":"/shoppingMall/customer/wishlists","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/categories","method":"post"},"description":"Category must exist in the system before it can be used to filter wishlist items by categoryId."}]},{"specification":"This operation retrieves detailed information about a specific wishlist by its unique identifier. It is associated with the shopping_mall_wishlists table, which stores customer-created wishlists containing product references. Each wishlist is uniquely linked to a customer and contains multiple wishlist items, allowing users to bookmark products for later viewing or purchase. The wishlist is not SKU-specific, but product-level only, and persists independently of cart or checkout flows. Only the owner of the wishlist, or appropriately privileged accounts (e.g., admin), may access the full wishlist details.","description":"Retrieve the full details of a specific wishlist, including associated product references and timestamps for creation and last modification.\n\nThis operation references the shopping_mall_wishlists table and returns all properties as defined in the Prisma schema, such as id, shopping_mall_customer_id, created_at, and updated_at. The response includes a list of wishlist items, each linking to a product via shopping_mall_product_id.\n\nAccess control must ensure that only the wishlist owner or authorized admin roles can view this data. Business rules dictate that wishlists are customer-specific and not visible to sellers or other regular users. Error cases include requests for nonexistent, deleted, or unauthorized wishlists, which should return appropriate errors.\n\nThis operation supports user flows for retrieving their saved products for browsing, future purchase, or management. It may be used by front-end applications to display the user's saved/wishlist products. If additional details of wishlist items are required (e.g., product info, images), they should be retrieved in a joined or nested response according to the DTO definition.","summary":"Get detailed information about a specific wishlist by ID from shopping_mall_wishlists.","parameters":[{"name":"wishlistId","description":"Unique identifier for the wishlist to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed wishlist information, including product references and timestamps.","typeName":"IShoppingMallWishlist"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created for the customer before its details can be retrieved by wishlistId."}]},{"specification":"This operation retrieves detailed information about a specific wishlist by its unique identifier. It is associated with the shopping_mall_wishlists table, which stores customer-created wishlists containing product references. Each wishlist is uniquely linked to a customer and contains multiple wishlist items, allowing users to bookmark products for later viewing or purchase. The wishlist is not SKU-specific, but product-level only, and persists independently of cart or checkout flows. Only the owner of the wishlist, or appropriately privileged accounts (e.g., admin), may access the full wishlist details.","description":"Retrieve the full details of a specific wishlist, including associated product references and timestamps for creation and last modification.\n\nThis operation references the shopping_mall_wishlists table and returns all properties as defined in the Prisma schema, such as id, shopping_mall_customer_id, created_at, and updated_at. The response includes a list of wishlist items, each linking to a product via shopping_mall_product_id.\n\nAccess control must ensure that only the wishlist owner or authorized admin roles can view this data. Business rules dictate that wishlists are customer-specific and not visible to sellers or other regular users. Error cases include requests for nonexistent, deleted, or unauthorized wishlists, which should return appropriate errors.\n\nThis operation supports user flows for retrieving their saved products for browsing, future purchase, or management. It may be used by front-end applications to display the user's saved/wishlist products. If additional details of wishlist items are required (e.g., product info, images), they should be retrieved in a joined or nested response according to the DTO definition.","summary":"Get detailed information about a specific wishlist by ID from shopping_mall_wishlists.","parameters":[{"name":"wishlistId","description":"Unique identifier for the wishlist to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed wishlist information, including product references and timestamps.","typeName":"IShoppingMallWishlist"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/wishlists/{wishlistId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"A wishlist must be created before it can be retrieved by ID. The creation operation ensures there is an existing wishlist resource associated with a customer in the shopping_mall_wishlists table."}]},{"specification":"This operation creates a new wishlist for a customer, allowing them to save products for future viewing or purchase. It is linked to the shopping_mall_wishlists table in the Prisma schema, which enforces a one-to-one relationship between customers and wishlists. Creating a wishlist initializes an empty list of wishlist items, and the operation requires valid customer identification and authentication. The wishlist may be populated with items in subsequent operations.","description":"Create a new wishlist for the authenticated customer. Each customer may have a maximum of one wishlist, managed independently of shopping carts.\n\nThe operation inserts a new record in shopping_mall_wishlists and associates it with the customer's unique ID. Required properties include shopping_mall_customer_id (owner), timestamps, and any initial configuration (all per the Prisma schema). Business rules ensure that only customers may create wishlists for themselves; attempts to create multiple wishlists or unauthorized creation should return an error.\n\nThis operation integrates with the user onboarding and product-browsing flows and is the entry point for customers to start saving products. Error handling must include validation for already-existing wishlists (per-customer), missing authentication, or invalid user role. The response returns the newly created wishlist with its properties.","summary":"Create a new wishlist for the authenticated customer in shopping_mall_wishlists.","parameters":[],"requestBody":{"description":"Required properties for creating a new wishlist. Generally, only customer association is required; wishlist items can be managed separately after creation.","typeName":"IShoppingMallWishlist.ICreate"},"responseBody":{"description":"The newly created wishlist record with its properties.","typeName":"IShoppingMallWishlist"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/wishlists","method":"post","prerequisites":[]},{"specification":"Updates a specific wishlist identified by wishlistId. This operation allows a customer to modify the properties or contents of their wishlist, such as changing its name, adjusting list settings (e.g., privacy/public), or updating associated products. The operation references the shopping_mall_wishlists table, which stores wishlists per customer, and supports business use cases such as renaming, reconfiguring, or reorganizing the user's saved products. All authorization, ownership, and data constraints are enforced according to the wishlist's association with the authenticated customer. Only the owner of the wishlist or an admin may update a wishlist. Validation ensures that the wishlist exists, is not deleted, and all update data conforms to required formats.","description":"This API allows the owner (customer) of a wishlist to update its settings or details. The operation is performed upon the shopping_mall_wishlists table, whose schema supports fields such as updated_at, customer association, and relational links to wishlist items. The update is only permitted for the customer who owns the wishlist, or for a platform admin through an elevated controller.\n\nBusiness logic for this operation includes verifying the authenticated user's ownership, validating that the wishlist is not soft-deleted (deleted_at is null), and that any modifications match value and integrity constraints (e.g., length limits for names, or uniqueness for certain list properties). The updated_at timestamp is refreshed upon successful operation.\n\nThe operation is expected to fail if the wishlist does not exist, is soft deleted, or is not owned by the authenticated user. All update actions are logged for audit if the action is performed by an admin. Related APIs typically include wishlist item CRUD operations and creation API for wishlists.","summary":"Update the details or settings of a customer's wishlist in the shopping_mall_wishlists table.","parameters":[{"name":"wishlistId","description":"Unique identifier (UUID) of the wishlist to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the wishlist, such as name, settings, or properties. May include updates to related metadata, not to the items themselves.","typeName":"IShoppingMallWishlist.IUpdate"},"responseBody":{"description":"The updated wishlist entity with all fields reflecting latest state after modification.","typeName":"IShoppingMallWishlist"},"authorizationRoles":["customer","admin"],"name":"update","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before it can be updated. Creating the wishlist is necessary to have a valid wishlistId for the update operation."}]},{"specification":"Updates a specific wishlist identified by wishlistId. This operation allows a customer to modify the properties or contents of their wishlist, such as changing its name, adjusting list settings (e.g., privacy/public), or updating associated products. The operation references the shopping_mall_wishlists table, which stores wishlists per customer, and supports business use cases such as renaming, reconfiguring, or reorganizing the user's saved products. All authorization, ownership, and data constraints are enforced according to the wishlist's association with the authenticated customer. Only the owner of the wishlist or an admin may update a wishlist. Validation ensures that the wishlist exists, is not deleted, and all update data conforms to required formats.","description":"This API allows the owner (customer) of a wishlist to update its settings or details. The operation is performed upon the shopping_mall_wishlists table, whose schema supports fields such as updated_at, customer association, and relational links to wishlist items. The update is only permitted for the customer who owns the wishlist, or for a platform admin through an elevated controller.\n\nBusiness logic for this operation includes verifying the authenticated user's ownership, validating that the wishlist is not soft-deleted (deleted_at is null), and that any modifications match value and integrity constraints (e.g., length limits for names, or uniqueness for certain list properties). The updated_at timestamp is refreshed upon successful operation.\n\nThe operation is expected to fail if the wishlist does not exist, is soft deleted, or is not owned by the authenticated user. All update actions are logged for audit if the action is performed by an admin. Related APIs typically include wishlist item CRUD operations and creation API for wishlists.","summary":"Update the details or settings of a customer's wishlist in the shopping_mall_wishlists table.","parameters":[{"name":"wishlistId","description":"Unique identifier (UUID) of the wishlist to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the wishlist, such as name, settings, or properties. May include updates to related metadata, not to the items themselves.","typeName":"IShoppingMallWishlist.IUpdate"},"responseBody":{"description":"The updated wishlist entity with all fields reflecting latest state after modification.","typeName":"IShoppingMallWishlist"},"authorizationRoles":["customer","admin"],"name":"update","path":"/shoppingMall/admin/wishlists/{wishlistId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before it can be updated. Creating the wishlist is necessary to have a valid wishlistId for the update operation."}]},{"specification":"Deletes (logically via soft delete) a wishlist identified by wishlistId. This operation allows a customer to remove a wishlist from their account. The operation references the shopping_mall_wishlists table, which stores wishlists per customer and supports a soft-delete mechanism via the deleted_at timestamp. Only the owner of the wishlist or an admin can perform the deletion. This does not destroy wishlist items but marks the wishlist as deleted and prevents further access.","description":"This endpoint marks a customer’s wishlist as deleted by updating the deleted_at field with the current timestamp (soft delete). It operates on the shopping_mall_wishlists table, which maintains wishlists for each customer and supports soft deletion for audit, recovery, and compliance reasons.\n\nSecurity-wise, only the owner (authenticated customer) or an admin can perform this operation, ensuring that unauthorized users cannot remove wishlists belonging to others. Once soft deleted, the wishlist is flagged as such and becomes inaccessible to user APIs.\n\nThe business logic ensures that all references to the wishlist are maintained for audit, but the resource is removed from user-facing displays and future CRUD access. Attempting to delete a wishlist that does not exist, is already deleted, or is not owned by the requester produces a relevant error.\n\nThis operation is typically used in account cleanup, privacy flows, or administrative maintenance. All actions are audited when performed by an admin.","summary":"Soft delete a customer's wishlist in the shopping_mall_wishlists table by marking it as deleted.","parameters":[{"name":"wishlistId","description":"Unique identifier (UUID) of the wishlist to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","path":"/shoppingMall/customer/wishlists/{wishlistId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before it can be deleted. The delete operation references an existing wishlist, so a POST operation to create the wishlist is required as a prerequisite."}]},{"specification":"Deletes (logically via soft delete) a wishlist identified by wishlistId. This operation allows a customer to remove a wishlist from their account. The operation references the shopping_mall_wishlists table, which stores wishlists per customer and supports a soft-delete mechanism via the deleted_at timestamp. Only the owner of the wishlist or an admin can perform the deletion. This does not destroy wishlist items but marks the wishlist as deleted and prevents further access.","description":"This endpoint marks a customer’s wishlist as deleted by updating the deleted_at field with the current timestamp (soft delete). It operates on the shopping_mall_wishlists table, which maintains wishlists for each customer and supports soft deletion for audit, recovery, and compliance reasons.\n\nSecurity-wise, only the owner (authenticated customer) or an admin can perform this operation, ensuring that unauthorized users cannot remove wishlists belonging to others. Once soft deleted, the wishlist is flagged as such and becomes inaccessible to user APIs.\n\nThe business logic ensures that all references to the wishlist are maintained for audit, but the resource is removed from user-facing displays and future CRUD access. Attempting to delete a wishlist that does not exist, is already deleted, or is not owned by the requester produces a relevant error.\n\nThis operation is typically used in account cleanup, privacy flows, or administrative maintenance. All actions are audited when performed by an admin.","summary":"Soft delete a customer's wishlist in the shopping_mall_wishlists table by marking it as deleted.","parameters":[{"name":"wishlistId","description":"Unique identifier (UUID) of the wishlist to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","path":"/shoppingMall/admin/wishlists/{wishlistId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created by the customer before it can be deleted by an admin. The delete operation targets an existing wishlist, thus creation is required as a prerequisite."}]},{"specification":"This operation retrieves the list of items in a specific customer's wishlist. It allows the authenticated customer to view all products they have added to their wishlist, supporting advanced filtering and pagination for large wishlists. The underlying operation is performed on the shopping_mall_wishlist_items table, which stores each wishlist item entry including product references and timestamps. The API enables features such as showing newest wishlist items first, filtering by product name, and managing response pagination for efficient UI display.","description":"Retrieve all wishlist items belonging to a particular customer's wishlist by specifying the wishlist ID. This operation enables customers to see all products they have saved for later consideration or purchase. The returned information includes references to the associated products, timestamps for when items were added or updated, and can be configured to provide paginated results.\n\nCustomers may apply search or filtering parameters (for instance, to display only products matching certain criteria or to sort by the date added). The response will include all relevant details for wishlist display but will hide internal system fields not intended for customers.\n\nSecurity is enforced so only the wishlist owner (authenticated customer) can access their wishlist items. Requests by unauthorized users to access or enumerate another customer's wishlist will be blocked. The operation is tightly coupled to the shopping_mall_wishlist_items and shopping_mall_products entities as defined in the Prisma schema.","summary":"Retrieve all wishlist items for a given customer's wishlist from the shopping_mall_wishlist_items table.","parameters":[{"name":"wishlistId","description":"Unique identifier of the wishlist to retrieve items from.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search, filtering, and pagination criteria for wishlist item retrieval.","typeName":"IShoppingMallWishlistItem.IRequest"},"responseBody":{"description":"A paginated list of wishlist items for the specified wishlist, including basic product references and added/updated timestamps.","typeName":"IPageIShoppingMallWishlistItem"},"authorizationType":null,"authorizationRole":"customer","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before its items can be retrieved. POST /shoppingMall/customer/wishlists creates a wishlist and provides the wishlistId required for listing its items."}]},{"specification":"This operation retrieves detailed information about a single wishlist item belonging to a specific wishlist, identified by the wishlist item ID and parent wishlist ID. It is used to obtain granular information on a particular wishlist entry for a customer. The operation interfaces directly with the shopping_mall_wishlist_items table, providing access to core data for individual wishlist entries such as associated product, timestamps, and linkage to the parent wishlist.","description":"Retrieve a specific wishlist item by its unique identifier, within the context of a parent wishlist. Only the wishlist owner (authenticated customer) is permitted to access this data. The response includes all details allowed for customer viewing, such as the referenced product information, the time the item was added or updated, and the relationship to the associated wishlist.\n\nAttempting to access a wishlist item not belonging to the authenticated customer will result in access denial. This operation is crucial for supporting UI features that display detailed information about a product in the customer's wishlist or facilitate actions like switching an item to the cart.\n\nThe operation relies on accurate mapping between the path parameter IDs and the shopping_mall_wishlist_items entity structure as defined in the Prisma schema. Security best practices are enforced such that only the relevant customer can retrieve this data by verifying both the wishlist and item ownership.","summary":"Retrieve detailed information for a specific wishlist item identified by wishlistId and wishlistItemId.","parameters":[{"name":"wishlistId","description":"Unique identifier of the wishlist containing the item.","schema":{"type":"string","format":"uuid"}},{"name":"wishlistItemId","description":"Unique identifier of the wishlist item to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified wishlist item, including referenced product and timestamps.","typeName":"IShoppingMallWishlistItem"},"authorizationType":null,"authorizationRole":"customer","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems/{wishlistItemId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before a specific wishlist item can be retrieved. POST /shoppingMall/customer/wishlists creates a wishlist and provides the wishlistId required for listing or accessing its items."},{"endpoint":{"path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems","method":"post"},"description":"Specific wishlist item must be created first to retrieve its details. POST /shoppingMall/customer/wishlists/{wishlistId}/wishlistItems creates a new item in the wishlist, providing the wishlistItemId needed for this GET operation."}]},{"specification":"This operation allows an authenticated customer to add a new product to their saved wishlist. It is based on the shopping_mall_wishlists and shopping_mall_wishlist_items tables from the Prisma schema. The user supplies the wishlistId of their target wishlist and specifies the product to add in the request body. Upon success, a new wishlist item referencing the target product is created and associated with the wishlist.","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems","method":"post","summary":"Add a product to a customer's wishlist (shopping_mall_wishlist_items table)","description":"This operation enables a customer to add a product to an existing wishlist. The endpoint requires the wishlistId path parameter, referencing the target wishlist belonging to the authenticated customer. The request body must include the product to add, and the underlying logic will create a row in shopping_mall_wishlist_items if not present for this (wishlistId, productId) pair.\n\nAuthorization is enforced so only the owner of the wishlist can add products, and a business rule restricts duplicate product entries per wishlist.\n\nIf the product is already present, the API may respond with a suitable message or a conflict error. Error handling also covers cases where the referenced wishlist does not exist or does not belong to the caller.\n\nThe wishlist item entity links the wishlist to a product (not a SKU), and persists the relationship for quick wishlist retrieval and display.","parameters":[{"name":"wishlistId","description":"Unique identifier of the wishlist to modify (must be owned by the authenticated customer)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New wishlist item data specifying the product to add.","typeName":"IShoppingMallWishlistItem.ICreate"},"responseBody":{"description":"The created wishlist item, including its id, product reference and timestamps.","typeName":"IShoppingMallWishlistItem"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before a product can be added to it."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before it can be added to a wishlist."}]},{"specification":"This operation allows an authenticated customer to update an existing product entry in one of their wishlists—for example, to change its associated metadata (such as a note, if supported). It is based on modifying a record in the shopping_mall_wishlist_items table, by wishlistItemId within the context of the given wishlistId. The operation is designed to ensure wishlist ownership and record integrity.","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems/{wishlistItemId}","method":"put","summary":"Update a wishlist item in a customer's wishlist (shopping_mall_wishlist_items table)","description":"This operation lets a customer update an existing wishlist item. Only the owner of the wishlist may perform this operation, and only wishlist items belonging to that wishlist can be updated.\n\nBusiness logic ensures the specified wishlist and wishlist item exist and are associated, and that only supported fields may be updated (such as notes or tags, if present in the entity). Error scenarios include attempts to update non-existent or unauthorized items.\n\nThe API will check that the combination of wishlistId and wishlistItemId is valid and refers to a record owned by the authenticated customer.","parameters":[{"name":"wishlistId","description":"Unique identifier of the wishlist that contains the wishlist item.","schema":{"type":"string","format":"uuid"}},{"name":"wishlistItemId","description":"Unique identifier of the wishlist item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update for the wishlist item, such as notes or display fields (fields subject to schema support).","typeName":"IShoppingMallWishlistItem.IUpdate"},"responseBody":{"description":"The updated wishlist item, reflecting the new values requested.","typeName":"IShoppingMallWishlistItem"},"authorizationRoles":["customer"],"name":"update","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must be created before a wishlist item can be updated."},{"endpoint":{"path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems","method":"post"},"description":"Wishlist item must exist before it can be updated."}]},{"specification":"This operation deletes a specific wishlist item from a customer's wishlist in the shopping mall system. It operates on the shopping_mall_wishlist_items table, which is used to represent the relationship between a wishlist and the products added to it by a customer. The endpoint accepts the unique identifiers for the wishlist and the wishlist item, allowing the user to remove a specific product from their wishlist. Deletion is performed as a hard delete, permanently removing the item from the wishlist; the record corresponding to the wishlist item will be deleted from the shopping_mall_wishlist_items table. Wishlist items are not recoverable after deletion. This operation enforces customer ownership, ensuring only the wishlist's owner can delete items from it. Business logic must check for appropriate user role and ownership before allowing deletion. Related endpoints include adding wishlist items, listing all items in a wishlist, and deleting an entire wishlist. If a product is removed from the platform, related wishlist items should be cascaded as per the business logic.","description":"This endpoint deletes a specific product from a customer's wishlist. The operation targets the shopping_mall_wishlist_items entity, which is a join table linking a customer's wishlist to the products they are interested in.\n\nDeleting a wishlist item is a permanent action; the wishlist item record is removed from the database, and the product will no longer appear in the customer's wishlist. Customers can only delete items from their own wishlists. The system must confirm that the authenticated user owns the wishlist before permitting the deletion. Attempts to delete wishlist items from another user's wishlist shall be rejected with an appropriate error message.\n\nWishlist management forms part of the customer personalization suite. Associated APIs include adding products to the wishlist, viewing all wishlist items, and removing the entire wishlist, if supported. This hard delete operation is irreversible. If the referenced wishlist or wishlist item does not exist, the system returns a not-found error. No response body is returned for successful completion.","summary":"Delete a specific product from a customer's wishlist (shopping_mall_wishlist_items)","parameters":[{"name":"wishlistId","description":"Unique identifier of the wishlist owning the wishlist item.","schema":{"type":"string","format":"uuid"}},{"name":"wishlistItemId","description":"Unique identifier of the wishlist item to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems/{wishlistItemId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/wishlists","method":"post"},"description":"Wishlist must exist before a wishlist item can be deleted from it."},{"endpoint":{"path":"/shoppingMall/customer/wishlists/{wishlistId}/wishlistItems","method":"post"},"description":"Wishlist item must be created before it can be deleted from the wishlist."}]},{"specification":"This operation retrieves a paginated list of orders placed in the shopping mall system, supporting advanced filtering, searching, and sorting. It operates on the shopping_mall_orders table, which records purchase transactions made by customers, with detailed links to customers, sellers, order items, payments, and shipping information. The endpoint allows searching by order status, placed dates, customer or seller references, and other relevant criteria defined by business logic. It is largely used by admin users and, in a limited scope, by sellers to list the orders they are responsible for. Response is a paginated data structure containing order summaries, each including order number, status, order total, dates, and core references. Sensitive information is filtered based on requesting user's role. Related APIs include order detail retrieval, customer order history, and order mutation endpoints.","description":"This endpoint provides a filtered, paginated list of orders in the shopping mall platform. The operation queries the shopping_mall_orders entity, which is the core table for storing order information including links to the customer, optional seller reference (for split-orders), payment and shipping addresses, and order items.\n\nThe search supports advanced filtering (by order status, placed date, customer or seller, order number, payment state), multi-field sorting, and pagination for efficient access to potentially large datasets. Admin users can access all orders; sellers may only access orders relevant to their products. The structure of each result includes summary-level information: order number, current status, order total, timestamp fields, main customer reference, and, optionally, payment status/fulfillment data. This endpoint also supports searching by keyword and filter combinations as defined in the business requirement.\n\nSecurity is enforced by role constraints: admins have platform-wide access, while sellers are strictly limited to their own orders. Customer-facing order history may use a different, customer-restricted endpoint. Error handling includes filters for non-existing search combinations and validation of pagination parameters. This operation does not return full order details; for that, the order detail endpoint should be used.","summary":"Search and list paginated orders with advanced filters (shopping_mall_orders)","parameters":[],"requestBody":{"description":"Search and pagination criteria for retrieving filtered orders.","typeName":"IShoppingMallOrder.IRequest"},"responseBody":{"description":"Paginated list of order summaries matching search criteria.","typeName":"IPageIShoppingMallOrder.ISummary"},"authorizationRoles":["admin","seller"],"name":"index","path":"/shoppingMall/admin/orders","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order(s) must exist before they can be listed or searched in the order listing endpoint."}]},{"specification":"This operation retrieves a paginated list of orders placed in the shopping mall system, supporting advanced filtering, searching, and sorting. It operates on the shopping_mall_orders table, which records purchase transactions made by customers, with detailed links to customers, sellers, order items, payments, and shipping information. The endpoint allows searching by order status, placed dates, customer or seller references, and other relevant criteria defined by business logic. It is largely used by admin users and, in a limited scope, by sellers to list the orders they are responsible for. Response is a paginated data structure containing order summaries, each including order number, status, order total, dates, and core references. Sensitive information is filtered based on requesting user's role. Related APIs include order detail retrieval, customer order history, and order mutation endpoints.","description":"This endpoint provides a filtered, paginated list of orders in the shopping mall platform. The operation queries the shopping_mall_orders entity, which is the core table for storing order information including links to the customer, optional seller reference (for split-orders), payment and shipping addresses, and order items.\n\nThe search supports advanced filtering (by order status, placed date, customer or seller, order number, payment state), multi-field sorting, and pagination for efficient access to potentially large datasets. Admin users can access all orders; sellers may only access orders relevant to their products. The structure of each result includes summary-level information: order number, current status, order total, timestamp fields, main customer reference, and, optionally, payment status/fulfillment data. This endpoint also supports searching by keyword and filter combinations as defined in the business requirement.\n\nSecurity is enforced by role constraints: admins have platform-wide access, while sellers are strictly limited to their own orders. Customer-facing order history may use a different, customer-restricted endpoint. Error handling includes filters for non-existing search combinations and validation of pagination parameters. This operation does not return full order details; for that, the order detail endpoint should be used.","summary":"Search and list paginated orders with advanced filters (shopping_mall_orders)","parameters":[],"requestBody":{"description":"Search and pagination criteria for retrieving filtered orders.","typeName":"IShoppingMallOrder.IRequest"},"responseBody":{"description":"Paginated list of order summaries matching search criteria.","typeName":"IPageIShoppingMallOrder.ISummary"},"authorizationRoles":["admin","seller"],"name":"index","path":"/shoppingMall/seller/orders","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"An order must exist before it can be searched, filtered, or listed. Creating an order ensures there is data available for paginated, filtered search operations."}]},{"specification":"This operation retrieves detailed information about a specific order by its unique order ID. It operates on the shopping_mall_orders table from the Prisma schema, providing all order-level details, including order items, status timeline, related shipments, payment snapshots, customer and (optionally) seller associations. This endpoint is fundamental for customers tracking their orders, sellers fulfilling orders, and admins auditing or reviewing the state/history of orders. The operation requires the orderId path parameter as a unique order identifier (UUID) and supports permissioned access for owners or authorized platform roles. All returned fields strictly reflect the Prisma schema, including audit history, status, pricing, fulfillment, and cancellation/refund links. Sensitive fields may be filtered based on requesting user's role.","description":"Retrieve the complete detail view of a single order as referenced by the provided orderId. The operation fully exposes all attributes defined in shopping_mall_orders, including customer and (where applicable) seller association, shipping address snapshot, payment method snapshot, order line items, shipment data, and full audit fields (created_at, updated_at, deleted_at).\n\nFrom a security and access control perspective, only the owning customer, the fulfilling seller (if present), and platform admins are allowed to view order details. The endpoint must enforce this in implementation, ensuring customers cannot access orders that do not belong to them, and sellers can only view orders related to their products.\n\nAll relationships (order items, status history, shipments, cancellations, refunds) are framed as per the database design. Order data is provided according to the schema structure and reflects the point-in-time state at query, with full timeline context (placed_at, paid_at, fulfilled_at) and business state if present. Expected errors include 404 for not found or 403 for unauthorized access.\n\nRelated APIs include order search by customer, order listing for seller/admin, and historic/timeline views for auditing. This endpoint is a read-only accessor and does not modify data.","summary":"Retrieve full detail of a single order from shopping_mall_orders by orderId.","parameters":[{"name":"orderId","description":"Unique identifier of the order to retrieve (UUID from shopping_mall_orders.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the target order including all order attributes and related references (items, addresses, payments, etc.) as per IShoppingMallOrder.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/orders/{orderId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"The order must be created and exist (with a valid orderId) before its full details can be retrieved by ID."}]},{"specification":"This operation retrieves detailed information about a specific order by its unique order ID. It operates on the shopping_mall_orders table from the Prisma schema, providing all order-level details, including order items, status timeline, related shipments, payment snapshots, customer and (optionally) seller associations. This endpoint is fundamental for customers tracking their orders, sellers fulfilling orders, and admins auditing or reviewing the state/history of orders. The operation requires the orderId path parameter as a unique order identifier (UUID) and supports permissioned access for owners or authorized platform roles. All returned fields strictly reflect the Prisma schema, including audit history, status, pricing, fulfillment, and cancellation/refund links. Sensitive fields may be filtered based on requesting user's role.","description":"Retrieve the complete detail view of a single order as referenced by the provided orderId. The operation fully exposes all attributes defined in shopping_mall_orders, including customer and (where applicable) seller association, shipping address snapshot, payment method snapshot, order line items, shipment data, and full audit fields (created_at, updated_at, deleted_at).\n\nFrom a security and access control perspective, only the owning customer, the fulfilling seller (if present), and platform admins are allowed to view order details. The endpoint must enforce this in implementation, ensuring customers cannot access orders that do not belong to them, and sellers can only view orders related to their products.\n\nAll relationships (order items, status history, shipments, cancellations, refunds) are framed as per the database design. Order data is provided according to the schema structure and reflects the point-in-time state at query, with full timeline context (placed_at, paid_at, fulfilled_at) and business state if present. Expected errors include 404 for not found or 403 for unauthorized access.\n\nRelated APIs include order search by customer, order listing for seller/admin, and historic/timeline views for auditing. This endpoint is a read-only accessor and does not modify data.","summary":"Retrieve full detail of a single order from shopping_mall_orders by orderId.","parameters":[{"name":"orderId","description":"Unique identifier of the order to retrieve (UUID from shopping_mall_orders.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the target order including all order attributes and related references (items, addresses, payments, etc.) as per IShoppingMallOrder.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/orders/{orderId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be retrieved by its unique orderId."}]},{"specification":"This operation retrieves detailed information about a specific order by its unique order ID. It operates on the shopping_mall_orders table from the Prisma schema, providing all order-level details, including order items, status timeline, related shipments, payment snapshots, customer and (optionally) seller associations. This endpoint is fundamental for customers tracking their orders, sellers fulfilling orders, and admins auditing or reviewing the state/history of orders. The operation requires the orderId path parameter as a unique order identifier (UUID) and supports permissioned access for owners or authorized platform roles. All returned fields strictly reflect the Prisma schema, including audit history, status, pricing, fulfillment, and cancellation/refund links. Sensitive fields may be filtered based on requesting user's role.","description":"Retrieve the complete detail view of a single order as referenced by the provided orderId. The operation fully exposes all attributes defined in shopping_mall_orders, including customer and (where applicable) seller association, shipping address snapshot, payment method snapshot, order line items, shipment data, and full audit fields (created_at, updated_at, deleted_at).\n\nFrom a security and access control perspective, only the owning customer, the fulfilling seller (if present), and platform admins are allowed to view order details. The endpoint must enforce this in implementation, ensuring customers cannot access orders that do not belong to them, and sellers can only view orders related to their products.\n\nAll relationships (order items, status history, shipments, cancellations, refunds) are framed as per the database design. Order data is provided according to the schema structure and reflects the point-in-time state at query, with full timeline context (placed_at, paid_at, fulfilled_at) and business state if present. Expected errors include 404 for not found or 403 for unauthorized access.\n\nRelated APIs include order search by customer, order listing for seller/admin, and historic/timeline views for auditing. This endpoint is a read-only accessor and does not modify data.","summary":"Retrieve full detail of a single order from shopping_mall_orders by orderId.","parameters":[{"name":"orderId","description":"Unique identifier of the order to retrieve (UUID from shopping_mall_orders.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the target order including all order attributes and related references (items, addresses, payments, etc.) as per IShoppingMallOrder.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/orders/{orderId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be retrieved by its unique orderId."}]},{"specification":"This operation creates a new customer order in the platform. It operates on the shopping_mall_orders table and related child tables (order items, addresses, payments), enabling a customer to finalize purchase of their shopping cart contents. The operation requires structured order data—including customer, shipping address snapshot, payment method snapshot, intended items (SKUs/quantity), and will validate availability, pricing, and all business constraints. Upon successful creation, this endpoint generates a new order number, assigns it to the specified customer, and records full history for traceability/audit. Only authenticated customers may create orders through this endpoint.","description":"Create and commit a new order from a validated customer's cart. This endpoint is designed for customer checkout, handling order creation only after thorough cart validation steps have been performed in prior flows. The submitted payload must conform to the IShoppingMallOrder.ICreate schema: containing the customer's UUID, the approved list of SKUs and quantities, selected shipping address details, payment method selection (with method data), and any required business logic data.\n\nAll order creation logic strictly validates requested items for availability, quantity, and price against the live product/SKU/inventory tables as of the transaction time; order creation is atomic to prevent double-purchase and over-selling. On success, a complete order entry is written including all audit and timeline fields. The newly created order object is returned in the response, matching the structure of a full order read.\n\nSecurity: Only authenticated customers can create orders. Sellers and admins cannot use this general order creation endpoint. Implementation must block attempts by unauthorized actors. Typical business errors returned include insufficient stock, price mismatch, invalid shipping/payment information, and authorization failures.\n\nRelated endpoints include cart validation, payment gateways, and order history lookups. This endpoint does not handle payment capture itself but records the intent and metadata for payment initiation.","summary":"Create a new order entry from customer cart, writing shopping_mall_orders and child records.","parameters":[],"requestBody":{"description":"Order creation information including cart items, shipping address snapshot, payment method choice, as per IShoppingMallOrder.ICreate specification.","typeName":"IShoppingMallOrder.ICreate"},"responseBody":{"description":"Newly created order record including all order header fields and key references, as per IShoppingMallOrder.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/orders","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orderAddresses","method":"post"},"description":"Shipping address snapshot must be created before it can be used in order creation."},{"endpoint":{"path":"/shoppingMall/admin/orderPaymentMethods","method":"post"},"description":"Payment method snapshot must be created before it can be referenced in order creation."}]},{"specification":"This operation updates the details of an existing order in the shoppingMall_orders table. The endpoint allows authorized users, such as the customer (for address or cancellation requests before fulfillment), the seller (for shipment status or administrative notes), or the admin (for global override), to update an order’s state, shipping or payment snapshot, or related status fields according to business rules. All updates are tracked with audit logs and must respect business rules regarding when an order is eligible for modification—for example, orders may not be updated after shipment except by admin.","description":"This API operation permits the modification of a placed order's details within the shoppingMall_orders entity. The purpose is to enable key actors (customer, seller, admin) to update an order based on workflow stage and permissions.\n\nCustomers may request updates to shipping address, contact details, or cancel orders that are still pending or processing. Sellers may update shipping status, input shipment tracking numbers, or add operational comments if the order is in the fulfillment stage. Admins retain global rights to override any field in exceptional scenarios (e.g., fraud, user disputes, compliance).\n\nSecurity is strictly enforced via role-based authentication and order ownership checks. Path parameter validation is required to ensure only the intended order is modified. Attempting to update a finalized, cancelled, or delivered order as a non-admin returns a validation error. All updates trigger entry in the shopping_mall_admin_action_logs table for traceability.\n\nBusiness logic includes validation of eligibility for each update request type: shipping address modification is only permitted before shipment, status transitions follow defined state machines, and pricing/payment changes are only processed by admin.\n\nThis operation integrates with related schemas, including shopping_mall_order_addresses (address snapshot), shopping_mall_order_status_history (order audit), and shopping_mall_admin_action_logs (event tracking). Error handling covers invalid state transitions, unauthorized access, and data integrity issues. Commonly related operations include placing new orders, viewing order status/history, and handling order cancellation/refunds.","summary":"Update an existing order’s details in the shoppingMall_orders table.","parameters":[{"name":"orderId","description":"Unique identifier for the order to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order update payload with only the fields eligible for modification based on business rules, such as status, shipping address, or remarks.","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"The updated order record reflecting all modifications and audit tracking.","typeName":"IShoppingMallOrder"},"authorizationRole":"customer","authorizationType":null,"path":"/shoppingMall/customer/orders/{orderId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orderAddresses","method":"post"},"description":"A shipping address snapshot must exist to update the order's shipping address."},{"endpoint":{"path":"/shoppingMall/admin/orderPaymentMethods","method":"post"},"description":"A payment method snapshot must exist before updating the order's payment method reference."}]},{"specification":"This operation updates the details of an existing order in the shoppingMall_orders table. The endpoint allows authorized users, such as the customer (for address or cancellation requests before fulfillment), the seller (for shipment status or administrative notes), or the admin (for global override), to update an order’s state, shipping or payment snapshot, or related status fields according to business rules. All updates are tracked with audit logs and must respect business rules regarding when an order is eligible for modification—for example, orders may not be updated after shipment except by admin.","description":"This API operation permits the modification of a placed order's details within the shoppingMall_orders entity. The purpose is to enable key actors (customer, seller, admin) to update an order based on workflow stage and permissions.\n\nCustomers may request updates to shipping address, contact details, or cancel orders that are still pending or processing. Sellers may update shipping status, input shipment tracking numbers, or add operational comments if the order is in the fulfillment stage. Admins retain global rights to override any field in exceptional scenarios (e.g., fraud, user disputes, compliance).\n\nSecurity is strictly enforced via role-based authentication and order ownership checks. Path parameter validation is required to ensure only the intended order is modified. Attempting to update a finalized, cancelled, or delivered order as a non-admin returns a validation error. All updates trigger entry in the shopping_mall_admin_action_logs table for traceability.\n\nBusiness logic includes validation of eligibility for each update request type: shipping address modification is only permitted before shipment, status transitions follow defined state machines, and pricing/payment changes are only processed by admin.\n\nThis operation integrates with related schemas, including shopping_mall_order_addresses (address snapshot), shopping_mall_order_status_history (order audit), and shopping_mall_admin_action_logs (event tracking). Error handling covers invalid state transitions, unauthorized access, and data integrity issues. Commonly related operations include placing new orders, viewing order status/history, and handling order cancellation/refunds.","summary":"Update an existing order’s details in the shoppingMall_orders table.","parameters":[{"name":"orderId","description":"Unique identifier for the order to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order update payload with only the fields eligible for modification based on business rules, such as status, shipping address, or remarks.","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"The updated order record reflecting all modifications and audit tracking.","typeName":"IShoppingMallOrder"},"authorizationRole":"seller","authorizationType":null,"path":"/shoppingMall/seller/orders/{orderId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be updated"},{"endpoint":{"path":"/shoppingMall/customer/orderAddresses","method":"post"},"description":"Order address snapshot must exist before it can be referenced in an order update"},{"endpoint":{"path":"/shoppingMall/admin/orderPaymentMethods","method":"post"},"description":"Order payment method snapshot must exist before referencing it in an order update"}]},{"specification":"This operation updates the details of an existing order in the shoppingMall_orders table. The endpoint allows authorized users, such as the customer (for address or cancellation requests before fulfillment), the seller (for shipment status or administrative notes), or the admin (for global override), to update an order’s state, shipping or payment snapshot, or related status fields according to business rules. All updates are tracked with audit logs and must respect business rules regarding when an order is eligible for modification—for example, orders may not be updated after shipment except by admin.","description":"This API operation permits the modification of a placed order's details within the shoppingMall_orders entity. The purpose is to enable key actors (customer, seller, admin) to update an order based on workflow stage and permissions.\n\nCustomers may request updates to shipping address, contact details, or cancel orders that are still pending or processing. Sellers may update shipping status, input shipment tracking numbers, or add operational comments if the order is in the fulfillment stage. Admins retain global rights to override any field in exceptional scenarios (e.g., fraud, user disputes, compliance).\n\nSecurity is strictly enforced via role-based authentication and order ownership checks. Path parameter validation is required to ensure only the intended order is modified. Attempting to update a finalized, cancelled, or delivered order as a non-admin returns a validation error. All updates trigger entry in the shopping_mall_admin_action_logs table for traceability.\n\nBusiness logic includes validation of eligibility for each update request type: shipping address modification is only permitted before shipment, status transitions follow defined state machines, and pricing/payment changes are only processed by admin.\n\nThis operation integrates with related schemas, including shopping_mall_order_addresses (address snapshot), shopping_mall_order_status_history (order audit), and shopping_mall_admin_action_logs (event tracking). Error handling covers invalid state transitions, unauthorized access, and data integrity issues. Commonly related operations include placing new orders, viewing order status/history, and handling order cancellation/refunds.","summary":"Update an existing order’s details in the shoppingMall_orders table.","parameters":[{"name":"orderId","description":"Unique identifier for the order to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order update payload with only the fields eligible for modification based on business rules, such as status, shipping address, or remarks.","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"The updated order record reflecting all modifications and audit tracking.","typeName":"IShoppingMallOrder"},"authorizationRole":"admin","authorizationType":null,"path":"/shoppingMall/admin/orders/{orderId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be updated"},{"endpoint":{"path":"/shoppingMall/customer/orderAddresses","method":"post"},"description":"Order address snapshot must exist before it can be referenced in an order update"},{"endpoint":{"path":"/shoppingMall/admin/orderPaymentMethods","method":"post"},"description":"Order payment method snapshot must exist before referencing it in an order update"}]},{"specification":"This operation permanently deletes an order record from the shoppingMall_orders table based on the provided orderId path parameter. Due to the presence of a 'deleted_at' soft delete field in the schema, this will perform a soft delete by setting the deleted_at timestamp rather than removing the row. Only admins may perform this action, reflecting regulatory/data retention and audit policies for e-commerce order management. All soft deletes are tracked in admin_action_logs for compliance.","description":"This API operation enables the logical deletion (soft delete) of an order record. When invoked, it sets the 'deleted_at' timestamp of a specific order in the shoppingMall_orders entity, thus preventing permanent data removal but ensuring the order does not appear in standard query results or user order histories.\n\nOnly administrative users are authorized to perform this action, allowing them to enforce business policies around order voiding, regulatory compliance, or cleanup of test/sandbox orders. This process supports platform requirements to retain full order and audit data for legal minimum retention periods.\n\nSecurity is enforced strictly via admin-only access. The operation checks the order's current status to ensure deletion is allowed (e.g., completed, refunded, or cancelled states depending on policy). All soft deletes generate an event in shopping_mall_admin_action_logs for traceability and audit.\n\nError handling covers attempts to delete non-existent, non-eligible, or already deleted orders, returning clear status and reason. Related operations include viewing order details, updating order state, and restoring/deleted order records via admin tools if needed.","summary":"Soft delete an order record in shoppingMall_orders via admin, marking it as deleted for regulatory retention.","parameters":[{"name":"orderId","description":"Unique identifier for the order to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"path":"/shoppingMall/admin/orders/{orderId}","method":"delete","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before it can be soft deleted by an admin."}]},{"specification":"This operation retrieves a list of items associated with a specific order in the shoppingMall_orders table. It allows the querying of SKU-level items (order line items), supporting complex filtering, sorting, and pagination for detailed order review. It is intended for customers, sellers (for their own orders), and admin to view and audit items for a particular order, including details like SKU, quantity, pricing, and refund/cancellation status.","description":"Retrieve a detailed list of all itemized SKUs included in a specific order. This includes information such as item name, SKU code, quantity, unit price, total price, currency, and item-specific refund or cancellation statuses.\n\nThe endpoint supports filtering and pagination to efficiently review orders with many line items. Sensitive fields and access are scoped according to user roles: customers can view their own orders, sellers can view items from orders they are responsible for, and admins can view all items. Security checks enforce access control to ensure only authorized users access the order's item details.\n\nBuilt upon the shopping_mall_order_items table, joined to shopping_mall_orders for permission enforcement, this operation enables robust audit and accountability for inventory, fulfillment, returns, and analytics across roles. Validation ensures the order exists and the user role is permitted to view items for this order, and errors are returned if the order is invalid or access is denied.\n\nThis operation is commonly paired with order detail retrieval, item-level refund initiation endpoints, and shipment tracking features for high-fidelity order monitoring by both buyers and sellers.","summary":"Retrieve and filter the list of items for a specific order from shoppingMall_orders.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose items will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for filtering and paginating the list of items within the specified order.","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated list of itemized SKUs for the order, with summary information for each line item.","typeName":"IPageIShoppingMallOrderItem.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/orders/{orderId}/items","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its items can be retrieved or filtered at the admin level."}]},{"specification":"This operation retrieves a list of items associated with a specific order in the shoppingMall_orders table. It allows the querying of SKU-level items (order line items), supporting complex filtering, sorting, and pagination for detailed order review. It is intended for customers, sellers (for their own orders), and admin to view and audit items for a particular order, including details like SKU, quantity, pricing, and refund/cancellation status.","description":"Retrieve a detailed list of all itemized SKUs included in a specific order. This includes information such as item name, SKU code, quantity, unit price, total price, currency, and item-specific refund or cancellation statuses.\n\nThe endpoint supports filtering and pagination to efficiently review orders with many line items. Sensitive fields and access are scoped according to user roles: customers can view their own orders, sellers can view items from orders they are responsible for, and admins can view all items. Security checks enforce access control to ensure only authorized users access the order's item details.\n\nBuilt upon the shopping_mall_order_items table, joined to shopping_mall_orders for permission enforcement, this operation enables robust audit and accountability for inventory, fulfillment, returns, and analytics across roles. Validation ensures the order exists and the user role is permitted to view items for this order, and errors are returned if the order is invalid or access is denied.\n\nThis operation is commonly paired with order detail retrieval, item-level refund initiation endpoints, and shipment tracking features for high-fidelity order monitoring by both buyers and sellers.","summary":"Retrieve and filter the list of items for a specific order from shoppingMall_orders.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose items will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for filtering and paginating the list of items within the specified order.","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated list of itemized SKUs for the order, with summary information for each line item.","typeName":"IPageIShoppingMallOrderItem.ISummary"},"authorizationType":null,"authorizationRole":"seller","name":"index","path":"/shoppingMall/seller/orders/{orderId}/items","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before retrieving its items. The orderId referenced in this endpoint must exist first."}]},{"specification":"This operation retrieves a list of items associated with a specific order in the shoppingMall_orders table. It allows the querying of SKU-level items (order line items), supporting complex filtering, sorting, and pagination for detailed order review. It is intended for customers, sellers (for their own orders), and admin to view and audit items for a particular order, including details like SKU, quantity, pricing, and refund/cancellation status.","description":"Retrieve a detailed list of all itemized SKUs included in a specific order. This includes information such as item name, SKU code, quantity, unit price, total price, currency, and item-specific refund or cancellation statuses.\n\nThe endpoint supports filtering and pagination to efficiently review orders with many line items. Sensitive fields and access are scoped according to user roles: customers can view their own orders, sellers can view items from orders they are responsible for, and admins can view all items. Security checks enforce access control to ensure only authorized users access the order's item details.\n\nBuilt upon the shopping_mall_order_items table, joined to shopping_mall_orders for permission enforcement, this operation enables robust audit and accountability for inventory, fulfillment, returns, and analytics across roles. Validation ensures the order exists and the user role is permitted to view items for this order, and errors are returned if the order is invalid or access is denied.\n\nThis operation is commonly paired with order detail retrieval, item-level refund initiation endpoints, and shipment tracking features for high-fidelity order monitoring by both buyers and sellers.","summary":"Retrieve and filter the list of items for a specific order from shoppingMall_orders.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose items will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for filtering and paginating the list of items within the specified order.","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated list of itemized SKUs for the order, with summary information for each line item.","typeName":"IPageIShoppingMallOrderItem.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","path":"/shoppingMall/customer/orders/{orderId}/items","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its items can be retrieved. The orderId in this endpoint must refer to an existing order."}]},{"specification":"This operation retrieves the details of a single item (order line) from an order in the shoppingMall_order_items table. It provides SKU-level breakdowns, including the product and variant purchased, quantity, unit price, currency, and status (including refund/cancellation state). Used for order auditing, dispute resolution, and customer service interactions.","description":"Fetch the full detail of a single order item (SKU line) belonging to the specified order. The operation returns key attributes: item display name, SKU code, purchased quantity, unit price, total price, currency, and current refund or cancellation state for the line item.\n\nAccess to this endpoint is controlled so only the customer who placed the order, the seller responsible for the SKU, or an admin can view the item details. Security validation ensures neither sensitive nor unrelated line items are exposed to unauthorized actors.\n\nThe implementation relies on the shopping_mall_order_items table and validates the provided identifiers (orderId, itemId) exist and match permission scopes. If the item or order is not found, or access is denied, standard error responses are triggered.\n\nThis endpoint is useful for item-level customer service (refunds, cancellations), warehouse or shipping review, and detailed analytical/reporting use cases.","summary":"Retrieve full details of a single order item (line SKU) by itemId and orderId.","parameters":[{"name":"orderId","description":"Unique order identifier containing the item.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the specific order item (SKU line) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full itemized detail about an individual SKU line in the order, including quantity, price, status, and related metadata.","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/orders/{orderId}/items/{itemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before retrieving its items."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must be created before its details can be retrieved."}]},{"specification":"This operation retrieves the details of a single item (order line) from an order in the shoppingMall_order_items table. It provides SKU-level breakdowns, including the product and variant purchased, quantity, unit price, currency, and status (including refund/cancellation state). Used for order auditing, dispute resolution, and customer service interactions.","description":"Fetch the full detail of a single order item (SKU line) belonging to the specified order. The operation returns key attributes: item display name, SKU code, purchased quantity, unit price, total price, currency, and current refund or cancellation state for the line item.\n\nAccess to this endpoint is controlled so only the customer who placed the order, the seller responsible for the SKU, or an admin can view the item details. Security validation ensures neither sensitive nor unrelated line items are exposed to unauthorized actors.\n\nThe implementation relies on the shopping_mall_order_items table and validates the provided identifiers (orderId, itemId) exist and match permission scopes. If the item or order is not found, or access is denied, standard error responses are triggered.\n\nThis endpoint is useful for item-level customer service (refunds, cancellations), warehouse or shipping review, and detailed analytical/reporting use cases.","summary":"Retrieve full details of a single order item (line SKU) by itemId and orderId.","parameters":[{"name":"orderId","description":"Unique order identifier containing the item.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the specific order item (SKU line) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full itemized detail about an individual SKU line in the order, including quantity, price, status, and related metadata.","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/orders/{orderId}/items/{itemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before retrieving its items."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must be created before its details can be retrieved."}]},{"specification":"This operation retrieves the details of a single item (order line) from an order in the shoppingMall_order_items table. It provides SKU-level breakdowns, including the product and variant purchased, quantity, unit price, currency, and status (including refund/cancellation state). Used for order auditing, dispute resolution, and customer service interactions.","description":"Fetch the full detail of a single order item (SKU line) belonging to the specified order. The operation returns key attributes: item display name, SKU code, purchased quantity, unit price, total price, currency, and current refund or cancellation state for the line item.\n\nAccess to this endpoint is controlled so only the customer who placed the order, the seller responsible for the SKU, or an admin can view the item details. Security validation ensures neither sensitive nor unrelated line items are exposed to unauthorized actors.\n\nThe implementation relies on the shopping_mall_order_items table and validates the provided identifiers (orderId, itemId) exist and match permission scopes. If the item or order is not found, or access is denied, standard error responses are triggered.\n\nThis endpoint is useful for item-level customer service (refunds, cancellations), warehouse or shipping review, and detailed analytical/reporting use cases.","summary":"Retrieve full details of a single order item (line SKU) by itemId and orderId.","parameters":[{"name":"orderId","description":"Unique order identifier containing the item.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the specific order item (SKU line) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full itemized detail about an individual SKU line in the order, including quantity, price, status, and related metadata.","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/orders/{orderId}/items/{itemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its items can be retrieved"},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be retrieved"}]},{"specification":"This operation allows the addition of a new line item to an existing order in the shopping mall e-commerce platform. It operates on the shopping_mall_order_items table, creating a record that links a specific SKU (variant) from the product catalog to an order. This endpoint is intended for administrative or internal correction scenarios—manual item addition is not a normal customer-flow and should only be permitted with strict business rules, such as order modifications during support workflows or pre-shipment adjustments. Care must be taken to ensure only open/unfulfilled orders can be edited, SKUs exist and have sufficient stock, and such changes are auditable and visible in order history. The request must specify the SKU, quantity, unit price, and all other fields as defined in the request body type. All business rules regarding maximum items, duplicate SKUs, and inventory must be enforced. This action triggers updates to the related order's totals and audit logs in accordance with the schema. Each addition is logged for traceability and customer communications.","description":"Adds a new item (SKU) to an existing order by creating an order item record and associating it with the parent order. This is not a standard customer-facing API, but is used in exceptional business situations, such as admin intervention or pre-shipment order modifications, where an additional item must be included before fulfillment. \n\nSecurity is paramount—only admins should be authorized to perform this action, and changes must be tracked in audit trails. This endpoint should only permit adding items to orders in 'pending' or 'processing' status; fulfilled or cancelled orders are locked against modifications. Before adding, SKU existence and inventory sufficiency are validated, and duplicate SKUs in the same order are rejected. Business rules in the schema—such as ensuring one line item per unique SKU per order—are strictly enforced.\n\nIf the specified SKU does not exist, is not available, or insufficient inventory remains, the operation returns a business error and no item is added. Successful additions automatically update the order's financial totals and shipment plans, and a corresponding audit log entry is created for compliance. The operation's request and response strictly mirror the schema fields, and any related updates to parent records (order summary, audit logs) are handled atomically. Related endpoints may include order modification, cancellation, and status history APIs.","summary":"Add a new item (SKU) to an existing e-commerce order (shopping_mall_order_items table).","parameters":[{"name":"orderId","description":"Unique identifier of the order to which a new item is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the new order item to be added, including SKU, qty, price, and related fields.","typeName":"IShoppingMallOrderItem.ICreate"},"responseBody":{"description":"The created order item, fully detailed after addition to the order.","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/orders/{orderId}/items","method":"post","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before an item can be added to the order"}]},{"specification":"This operation updates an existing order item—such as by modifying quantity or unit price—within an order. The operation acts on the shopping_mall_order_items table, allowing administrators to adjust a specific item's details prior to final fulfillment. This is only valid if the parent order is not yet fulfilled or cancelled, and the request must indicate the precise item to update via itemId and orderId parameters. Business rules enforced by the schema—such as non-negative qty, no updates to items already refunded or delivered, and correct price snapshotting—are strictly followed. Audit logs of all changes are mandatory, and parent order totals and shipment plans must be updated appropriately. Use with caution: not a customer API, but an administrative/intervention tool for pre-shipment change requests or error correction.","description":"Modifies the details (e.g., quantity, price) of a specific order item within an order prior to fulfillment. This is used in support situations or admin workflows, not for regular customer modification. \n\nSecurity enforcement restricts access to authorized administrators. The operation first checks that both order and order item exist and are not locked by fulfillment, refund, or cancellation status. If the order item has already been shipped, refunded, or cancelled, no updates are permitted. Quantity must be positive and not exceed available SKU stock; price changes must comply with business rules and pricing constraints for the order. Any update recalculates order summaries and triggers audit trail records.\n\nError scenarios include requests for non-existent order/items, attempts to change items in locked orders, or violations of business validation rules. Success returns the updated, fully detailed item record after changes. Related operations include adding/removing order items, order cancellation, and status history tracking APIs.","summary":"Update an existing order item (line) for a given order (shopping_mall_order_items table).","parameters":[{"name":"orderId","description":"Unique identifier of the parent order for the order item.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the order item being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated values for the order item, such as quantity or price, as defined by the order item's updatable schema fields.","typeName":"IShoppingMallOrderItem.IUpdate"},"responseBody":{"description":"The updated order item, with all changes applied and recalculated fields populated.","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/orders/{orderId}/items/{itemId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must exist before it can be updated. The POST operation creates the order item with a unique itemId required by the update operation."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before an order item can exist or be updated."}]},{"specification":"This operation allows a user with appropriate permissions to delete a specific item from a particular order in the shopping mall system. It interfaces directly with the order items entity found in the shopping_mall_order_items table, ensuring that only items belonging to the designated order can be manipulated. Deleting an order item may have downstream effects, such as recalculating order totals, undoing reserved inventory for that SKU, and possibly initiating a refund or catalog update. This operation must validate that business rules permit item removal (e.g., item is not already shipped or refunded), enforce proper user authorization (typically restricted to the customer for their own order, the seller of the item, or platform admin), and properly reflect changes in all related order documents. Error handling must provide clear feedback if item removal is blocked by fulfillment state, item ownership, or order status. Associated inventory and settlement records are synchronously or asynchronously updated as part of the transaction.","description":"Delete an item from a specific order using its unique order ID and item ID. This operation targets the shopping_mall_order_items table and ensures that only items actually included in the given order may be removed, complying with all referential and business integrity rules. The main use cases include customer-requested cancellations prior to shipment, administrative corrections, or seller-directed modifications before fulfillment.\n\nAuthorization is strictly enforced: customers can only modify their own orders and only under certain states (e.g., pending, processing). Sellers can act on their own products before shipment, and admins have full override capability in accordance with business policies. Each attempted deletion checks item/order status for eligibility, blocks removal if the item is already shipped, delivered, refunded, or under dispute, and provides a suitable error if the operation cannot proceed.\n\nRelated updates such as refund of reserved funds, adjustment of inventory, and timeline notifications are triggered as per business rules. This operation links to core flows documented in order management, cancellation, refund, and customer service requirements, and should be coordinated with those API calls where intricate business processes are involved.\n\nError cases are handled with explicit status returns, such as 'not found', 'unauthorized', 'item not removable', or 'order ineligible for modification'.","summary":"Delete a specific item from an order (shopping_mall_order_items table).","parameters":[{"name":"orderId","description":"ID of the target order containing the item to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"ID of the order item (order item record) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","admin"],"name":"erase","path":"/shoppingMall/customer/orders/{orderId}/items/{itemId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be deleted from the specific order."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its items can be deleted."}]},{"specification":"This operation allows a user with appropriate permissions to delete a specific item from a particular order in the shopping mall system. It interfaces directly with the order items entity found in the shopping_mall_order_items table, ensuring that only items belonging to the designated order can be manipulated. Deleting an order item may have downstream effects, such as recalculating order totals, undoing reserved inventory for that SKU, and possibly initiating a refund or catalog update. This operation must validate that business rules permit item removal (e.g., item is not already shipped or refunded), enforce proper user authorization (typically restricted to the customer for their own order, the seller of the item, or platform admin), and properly reflect changes in all related order documents. Error handling must provide clear feedback if item removal is blocked by fulfillment state, item ownership, or order status. Associated inventory and settlement records are synchronously or asynchronously updated as part of the transaction.","description":"Delete an item from a specific order using its unique order ID and item ID. This operation targets the shopping_mall_order_items table and ensures that only items actually included in the given order may be removed, complying with all referential and business integrity rules. The main use cases include customer-requested cancellations prior to shipment, administrative corrections, or seller-directed modifications before fulfillment.\n\nAuthorization is strictly enforced: customers can only modify their own orders and only under certain states (e.g., pending, processing). Sellers can act on their own products before shipment, and admins have full override capability in accordance with business policies. Each attempted deletion checks item/order status for eligibility, blocks removal if the item is already shipped, delivered, refunded, or under dispute, and provides a suitable error if the operation cannot proceed.\n\nRelated updates such as refund of reserved funds, adjustment of inventory, and timeline notifications are triggered as per business rules. This operation links to core flows documented in order management, cancellation, refund, and customer service requirements, and should be coordinated with those API calls where intricate business processes are involved.\n\nError cases are handled with explicit status returns, such as 'not found', 'unauthorized', 'item not removable', or 'order ineligible for modification'.","summary":"Delete a specific item from an order (shopping_mall_order_items table).","parameters":[{"name":"orderId","description":"ID of the target order containing the item to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"ID of the order item (order item record) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","admin"],"name":"erase","path":"/shoppingMall/seller/orders/{orderId}/items/{itemId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before any items within it can be removed or manipulated"}]},{"specification":"This operation allows a user with appropriate permissions to delete a specific item from a particular order in the shopping mall system. It interfaces directly with the order items entity found in the shopping_mall_order_items table, ensuring that only items belonging to the designated order can be manipulated. Deleting an order item may have downstream effects, such as recalculating order totals, undoing reserved inventory for that SKU, and possibly initiating a refund or catalog update. This operation must validate that business rules permit item removal (e.g., item is not already shipped or refunded), enforce proper user authorization (typically restricted to the customer for their own order, the seller of the item, or platform admin), and properly reflect changes in all related order documents. Error handling must provide clear feedback if item removal is blocked by fulfillment state, item ownership, or order status. Associated inventory and settlement records are synchronously or asynchronously updated as part of the transaction.","description":"Delete an item from a specific order using its unique order ID and item ID. This operation targets the shopping_mall_order_items table and ensures that only items actually included in the given order may be removed, complying with all referential and business integrity rules. The main use cases include customer-requested cancellations prior to shipment, administrative corrections, or seller-directed modifications before fulfillment.\n\nAuthorization is strictly enforced: customers can only modify their own orders and only under certain states (e.g., pending, processing). Sellers can act on their own products before shipment, and admins have full override capability in accordance with business policies. Each attempted deletion checks item/order status for eligibility, blocks removal if the item is already shipped, delivered, refunded, or under dispute, and provides a suitable error if the operation cannot proceed.\n\nRelated updates such as refund of reserved funds, adjustment of inventory, and timeline notifications are triggered as per business rules. This operation links to core flows documented in order management, cancellation, refund, and customer service requirements, and should be coordinated with those API calls where intricate business processes are involved.\n\nError cases are handled with explicit status returns, such as 'not found', 'unauthorized', 'item not removable', or 'order ineligible for modification'.","summary":"Delete a specific item from an order (shopping_mall_order_items table).","parameters":[{"name":"orderId","description":"ID of the target order containing the item to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"ID of the order item (order item record) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","admin"],"name":"erase","path":"/shoppingMall/admin/orders/{orderId}/items/{itemId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before any items within it can be removed or manipulated"}]},{"specification":"This operation retrieves current shipping and tracking status updates for all shipments belonging to a specified order. It interacts with the shopping_mall_order_shipments table and related order status/shipment tracking entities. The endpoint is designed for customers, sellers, and admins to list all shipment records for a given order, each including carrier, tracking number, status, timestamps, and other related metadata. Supports complex shipping scenarios, such as multi-seller/multi-package orders, and handles aggregation of child shipment statuses. This operation must honor role-based data visibility permissions: customers only access their own orders, sellers see shipments for their fulfilled products, and admins have universal access. Error handling covers cases like order not found, unauthorized access, or orders without shipments.","description":"Retrieve a paginated, filterable list of all shipment records for a specified order. Each record includes carrier, tracking number, shipping status, shipment number, timestamps (dispatched, delivered, etc.), and remarks. This operation is mapped to the shopping_mall_order_shipments table and supports both simple and split-shipment order models (including multiple sellers). The API allows users to check real-time shipment status updates and may integrate with third-party carrier APIs for latest tracking data.\n\nAuthorization and data visibility rules are strictly enforced: customers may query only their own orders, sellers get access to shipments involving their products, and admins access all shipments. The request may include advanced filtering (e.g., by shipment status), pagination, and sorting (default: by creation date descending).\n\nError cases (such as unauthorized, not found, or order without shipments) are surfaced with clear, actionable messages. This endpoint should be used in concert with order listing, fulfillment, and order detail APIs for a complete fulfillment tracking workflow.","summary":"Retrieve all shipment status records for a specific order (shopping_mall_order_shipments table).","parameters":[{"name":"orderId","description":"Order ID for which all shipment records should be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination options for shipment status retrieval (optional).","typeName":"IShoppingMallOrderShipment.IRequest"},"responseBody":{"description":"Paginated list of shipment status records with tracking and logistics details for the given order.","typeName":"IPageIShoppingMallOrderShipment"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/customer/orders/{orderId}/shipments","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its shipment records can be retrieved. Shipments are always associated with an existing order, so the order resource must exist for shipment tracking to be possible."}]},{"specification":"This operation retrieves current shipping and tracking status updates for all shipments belonging to a specified order. It interacts with the shopping_mall_order_shipments table and related order status/shipment tracking entities. The endpoint is designed for customers, sellers, and admins to list all shipment records for a given order, each including carrier, tracking number, status, timestamps, and other related metadata. Supports complex shipping scenarios, such as multi-seller/multi-package orders, and handles aggregation of child shipment statuses. This operation must honor role-based data visibility permissions: customers only access their own orders, sellers see shipments for their fulfilled products, and admins have universal access. Error handling covers cases like order not found, unauthorized access, or orders without shipments.","description":"Retrieve a paginated, filterable list of all shipment records for a specified order. Each record includes carrier, tracking number, shipping status, shipment number, timestamps (dispatched, delivered, etc.), and remarks. This operation is mapped to the shopping_mall_order_shipments table and supports both simple and split-shipment order models (including multiple sellers). The API allows users to check real-time shipment status updates and may integrate with third-party carrier APIs for latest tracking data.\n\nAuthorization and data visibility rules are strictly enforced: customers may query only their own orders, sellers get access to shipments involving their products, and admins access all shipments. The request may include advanced filtering (e.g., by shipment status), pagination, and sorting (default: by creation date descending).\n\nError cases (such as unauthorized, not found, or order without shipments) are surfaced with clear, actionable messages. This endpoint should be used in concert with order listing, fulfillment, and order detail APIs for a complete fulfillment tracking workflow.","summary":"Retrieve all shipment status records for a specific order (shopping_mall_order_shipments table).","parameters":[{"name":"orderId","description":"Order ID for which all shipment records should be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination options for shipment status retrieval (optional).","typeName":"IShoppingMallOrderShipment.IRequest"},"responseBody":{"description":"Paginated list of shipment status records with tracking and logistics details for the given order.","typeName":"IPageIShoppingMallOrderShipment"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/seller/orders/{orderId}/shipments","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its shipment records can be retrieved. Shipments are always associated with an existing order, so the order resource must exist for shipment tracking to be possible."}]},{"specification":"This operation retrieves current shipping and tracking status updates for all shipments belonging to a specified order. It interacts with the shopping_mall_order_shipments table and related order status/shipment tracking entities. The endpoint is designed for customers, sellers, and admins to list all shipment records for a given order, each including carrier, tracking number, status, timestamps, and other related metadata. Supports complex shipping scenarios, such as multi-seller/multi-package orders, and handles aggregation of child shipment statuses. This operation must honor role-based data visibility permissions: customers only access their own orders, sellers see shipments for their fulfilled products, and admins have universal access. Error handling covers cases like order not found, unauthorized access, or orders without shipments.","description":"Retrieve a paginated, filterable list of all shipment records for a specified order. Each record includes carrier, tracking number, shipping status, shipment number, timestamps (dispatched, delivered, etc.), and remarks. This operation is mapped to the shopping_mall_order_shipments table and supports both simple and split-shipment order models (including multiple sellers). The API allows users to check real-time shipment status updates and may integrate with third-party carrier APIs for latest tracking data.\n\nAuthorization and data visibility rules are strictly enforced: customers may query only their own orders, sellers get access to shipments involving their products, and admins access all shipments. The request may include advanced filtering (e.g., by shipment status), pagination, and sorting (default: by creation date descending).\n\nError cases (such as unauthorized, not found, or order without shipments) are surfaced with clear, actionable messages. This endpoint should be used in concert with order listing, fulfillment, and order detail APIs for a complete fulfillment tracking workflow.","summary":"Retrieve all shipment status records for a specific order (shopping_mall_order_shipments table).","parameters":[{"name":"orderId","description":"Order ID for which all shipment records should be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination options for shipment status retrieval (optional).","typeName":"IShoppingMallOrderShipment.IRequest"},"responseBody":{"description":"Paginated list of shipment status records with tracking and logistics details for the given order.","typeName":"IPageIShoppingMallOrderShipment"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its shipment records can be listed or queried. Without an order, there are no associated shipments to retrieve."}]},{"specification":"This operation retrieves detailed tracking and shipment information for a specific shipment within an order. It is associated with the shopping_mall_order_shipments table in the Prisma schema, which records per-shipment logistics for orders, including carrier, tracking number, shipment status, dispatch and delivery timestamps, and remarks. This endpoint is used by customers to monitor delivery, by sellers to confirm shipping actions, and by admins for audit or exception resolution. It supports visibility into all shipment fields relevant to the order's fulfillment progress.","description":"Retrieve a specific shipment's tracking and delivery status within an order. This operation allows customers to view the carrier, tracking number, and current status (pending, shipped, in transit, out for delivery, delivered, returned, cancelled, etc.) for any shipment that is part of their placed order.\n\nSellers use this endpoint to verify which shipments have been dispatched, in progress, or completed. For multi-seller or split-shipment orders, this enables visibility into each parcel's progress and any relevant remarks or failures.\n\nAdmins may use this operation for support, troubleshooting, and compliance checking—especially when reviewing issues such as failed delivery, returns, or customer escalations. Access to shipment detail is role-restricted: customers may view only their own orders, sellers only shipments of their products, and admins have visibility over all records. Security checks based on order and user relationships are implemented in business logic.\n\nAll returned data is aligned with the shopping_mall_order_shipments schema, including carrier, tracking_number, status, timestamps, and remarks.","summary":"Retrieve detailed information for a specific order shipment (shopping_mall_order_shipments)","parameters":[{"name":"orderId","description":"Unique identifier of the target order containing the shipment","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment within the specified order","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete shipment information for the specified shipment within an order, including current status, tracking, carrier, and timestamps","typeName":"IShoppingMallOrderShipment"},"authorizationType":null,"authorizationRole":"customer","path":"/shoppingMall/customer/orders/{orderId}/shipments/{shipmentId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a specific shipment within the order can be retrieved. Shipment records cannot exist without a corresponding order."}]},{"specification":"This operation retrieves detailed tracking and shipment information for a specific shipment within an order. It is associated with the shopping_mall_order_shipments table in the Prisma schema, which records per-shipment logistics for orders, including carrier, tracking number, shipment status, dispatch and delivery timestamps, and remarks. This endpoint is used by customers to monitor delivery, by sellers to confirm shipping actions, and by admins for audit or exception resolution. It supports visibility into all shipment fields relevant to the order's fulfillment progress.","description":"Retrieve a specific shipment's tracking and delivery status within an order. This operation allows customers to view the carrier, tracking number, and current status (pending, shipped, in transit, out for delivery, delivered, returned, cancelled, etc.) for any shipment that is part of their placed order.\n\nSellers use this endpoint to verify which shipments have been dispatched, in progress, or completed. For multi-seller or split-shipment orders, this enables visibility into each parcel's progress and any relevant remarks or failures.\n\nAdmins may use this operation for support, troubleshooting, and compliance checking—especially when reviewing issues such as failed delivery, returns, or customer escalations. Access to shipment detail is role-restricted: customers may view only their own orders, sellers only shipments of their products, and admins have visibility over all records. Security checks based on order and user relationships are implemented in business logic.\n\nAll returned data is aligned with the shopping_mall_order_shipments schema, including carrier, tracking_number, status, timestamps, and remarks.","summary":"Retrieve detailed information for a specific order shipment (shopping_mall_order_shipments)","parameters":[{"name":"orderId","description":"Unique identifier of the target order containing the shipment","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment within the specified order","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete shipment information for the specified shipment within an order, including current status, tracking, carrier, and timestamps","typeName":"IShoppingMallOrderShipment"},"authorizationType":null,"authorizationRole":"seller","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before shipment detail can be retrieved. Creating an order ensures that an orderId exists for shipment lookup."}]},{"specification":"This operation retrieves detailed tracking and shipment information for a specific shipment within an order. It is associated with the shopping_mall_order_shipments table in the Prisma schema, which records per-shipment logistics for orders, including carrier, tracking number, shipment status, dispatch and delivery timestamps, and remarks. This endpoint is used by customers to monitor delivery, by sellers to confirm shipping actions, and by admins for audit or exception resolution. It supports visibility into all shipment fields relevant to the order's fulfillment progress.","description":"Retrieve a specific shipment's tracking and delivery status within an order. This operation allows customers to view the carrier, tracking number, and current status (pending, shipped, in transit, out for delivery, delivered, returned, cancelled, etc.) for any shipment that is part of their placed order.\n\nSellers use this endpoint to verify which shipments have been dispatched, in progress, or completed. For multi-seller or split-shipment orders, this enables visibility into each parcel's progress and any relevant remarks or failures.\n\nAdmins may use this operation for support, troubleshooting, and compliance checking—especially when reviewing issues such as failed delivery, returns, or customer escalations. Access to shipment detail is role-restricted: customers may view only their own orders, sellers only shipments of their products, and admins have visibility over all records. Security checks based on order and user relationships are implemented in business logic.\n\nAll returned data is aligned with the shopping_mall_order_shipments schema, including carrier, tracking_number, status, timestamps, and remarks.","summary":"Retrieve detailed information for a specific order shipment (shopping_mall_order_shipments)","parameters":[{"name":"orderId","description":"Unique identifier of the target order containing the shipment","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment within the specified order","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete shipment information for the specified shipment within an order, including current status, tracking, carrier, and timestamps","typeName":"IShoppingMallOrderShipment"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before shipment detail can be retrieved. Creating an order ensures that an orderId exists for shipment lookup."}]},{"specification":"This operation updates the shipment information for a specific order shipment within the shopping mall e-commerce platform. It allows a seller or admin to change shipment details such as carrier, tracking number, status, or remarks for an existing shipment associated with an order. The operation is performed on the 'shopping_mall_order_shipments' Prisma table. Permission to update is restricted to the seller who owns the order or to platform administrators. Upon a successful update, the modified shipment record is returned.","description":"Update the details of a specific order shipment by shipment identifier, as stored in the shopping_mall_order_shipments table. Users may edit fields such as carrier, tracking number, status, dispatched or delivered timestamps, and any remarks for the given shipment.\n\nThe operation is restricted to sellers who are responsible for the given order, or admin accounts. Security is enforced by verifying ownership or elevated permissions before changes are committed. The function cross-validates that the referenced shipment is actually associated with the given orderId, preventing orphan or cross-order editing.\n\nBusiness logic ensures that status transitions are valid (e.g., you cannot set to 'delivered' before 'shipped' or 'dispatched'), and that shipment details such as tracking number are present when required by carrier or status. Any invalid updates will result in a descriptive error explaining validation failure. All updates are logged for audit, and changes may trigger notifications to customer and seller.\n\nRelated endpoints include retrieving shipment details (GET), listing all shipments for an order (GET), and deleting or cancelling a shipment (DELETE operation).","summary":"Update a specific order shipment's details for a given order (shopping_mall_order_shipments).","parameters":[{"name":"orderId","description":"Unique identifier for the order containing the shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated shipment data for the order shipment (carrier, tracking info, status, dispatched/delivered date, remarks, etc).","typeName":"IShoppingMallOrderShipment.IUpdate"},"responseBody":{"description":"Updated shipment entity after applying changes.","typeName":"IShoppingMallOrderShipment"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a shipment can be updated for it."}]},{"specification":"This operation updates the shipment information for a specific order shipment within the shopping mall e-commerce platform. It allows a seller or admin to change shipment details such as carrier, tracking number, status, or remarks for an existing shipment associated with an order. The operation is performed on the 'shopping_mall_order_shipments' Prisma table. Permission to update is restricted to the seller who owns the order or to platform administrators. Upon a successful update, the modified shipment record is returned.","description":"Update the details of a specific order shipment by shipment identifier, as stored in the shopping_mall_order_shipments table. Users may edit fields such as carrier, tracking number, status, dispatched or delivered timestamps, and any remarks for the given shipment.\n\nThe operation is restricted to sellers who are responsible for the given order, or admin accounts. Security is enforced by verifying ownership or elevated permissions before changes are committed. The function cross-validates that the referenced shipment is actually associated with the given orderId, preventing orphan or cross-order editing.\n\nBusiness logic ensures that status transitions are valid (e.g., you cannot set to 'delivered' before 'shipped' or 'dispatched'), and that shipment details such as tracking number are present when required by carrier or status. Any invalid updates will result in a descriptive error explaining validation failure. All updates are logged for audit, and changes may trigger notifications to customer and seller.\n\nRelated endpoints include retrieving shipment details (GET), listing all shipments for an order (GET), and deleting or cancelling a shipment (DELETE operation).","summary":"Update a specific order shipment's details for a given order (shopping_mall_order_shipments).","parameters":[{"name":"orderId","description":"Unique identifier for the order containing the shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated shipment data for the order shipment (carrier, tracking info, status, dispatched/delivered date, remarks, etc).","typeName":"IShoppingMallOrderShipment.IUpdate"},"responseBody":{"description":"Updated shipment entity after applying changes.","typeName":"IShoppingMallOrderShipment"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a shipment can be updated for it."}]},{"specification":"This operation permanently deletes (hard-deletes) a shipment record associated with a specific order in the shopping mall platform's backend. It acts on the 'shopping_mall_order_shipments' table. Only order-owning sellers or admins can perform this operation. The shipment is removed from the database, and cannot be recovered. Deletion is prevented if the shipment is already delivered, refunded, or otherwise needs to be retained for compliance, as enforced by business rules.","description":"Permanently remove a shipment from a specific order by shipmentId and orderId, as tracked in the shopping_mall_order_shipments schema table. This is a hard-delete, not a soft delete, and will erase all shipment-related information, including carrier/tracking references and status history, for the given order.\n\nThis operation is only allowed for sellers who own the given order or admins with appropriate platform authority. Before deletion, the system validates that the shipment belongs to the order, and checks that removal is legal (for example, the shipment is not in delivered or refunded state). Attempts to erase non-removable shipments result in a detailed business exception.\n\nThe deletion action is logged for full audit, and may trigger notification to the customer if the shipment was visible in order tracking. Related APIs include updating or fetching shipment details, or listing all shipments for an order.","summary":"Permanently delete an individual shipment from an order (shopping_mall_order_shipments) by shipmentId.","parameters":[{"name":"orderId","description":"Unique identifier for the order containing the shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a shipment associated with it can be deleted."}]},{"specification":"This operation permanently deletes (hard-deletes) a shipment record associated with a specific order in the shopping mall platform's backend. It acts on the 'shopping_mall_order_shipments' table. Only order-owning sellers or admins can perform this operation. The shipment is removed from the database, and cannot be recovered. Deletion is prevented if the shipment is already delivered, refunded, or otherwise needs to be retained for compliance, as enforced by business rules.","description":"Permanently remove a shipment from a specific order by shipmentId and orderId, as tracked in the shopping_mall_order_shipments schema table. This is a hard-delete, not a soft delete, and will erase all shipment-related information, including carrier/tracking references and status history, for the given order.\n\nThis operation is only allowed for sellers who own the given order or admins with appropriate platform authority. Before deletion, the system validates that the shipment belongs to the order, and checks that removal is legal (for example, the shipment is not in delivered or refunded state). Attempts to erase non-removable shipments result in a detailed business exception.\n\nThe deletion action is logged for full audit, and may trigger notification to the customer if the shipment was visible in order tracking. Related APIs include updating or fetching shipment details, or listing all shipments for an order.","summary":"Permanently delete an individual shipment from an order (shopping_mall_order_shipments) by shipmentId.","parameters":[{"name":"orderId","description":"Unique identifier for the order containing the shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a shipment associated with it can be deleted."}]},{"specification":"This operation retrieves the full timeline and detailed status change history for a specific order from the shopping mall Orders table, using the order's unique identifier. It supports deep inspection of all state transitions such as placed, paid, shipped, delivered, cancelled, refunded, and more. Pagination, time range, and status-type filtering are supported through the request body. This is essential for customer order history, seller audit, and admin review scenarios.","path":"/shoppingMall/customer/orders/{orderId}/statusHistory","method":"patch","summary":"Get status and transition history for an order from the Orders table.","description":"Retrieve the complete list and timeline of status/history entries for a specific order. This operation supports filtering by event type or date range and provides detailed event metadata for each transition, including the actor (customer, seller, admin), event type, previous and new status, explanation, and timestamps.\n\nAccess control ensures customers only view status history for their own orders, sellers can audit their fulfilled orders, and admins access any order for compliance. The response returns a paginated time-ordered list of history entries associated with the referenced order ID from the Orders schema. Event data is linked directly to order and optionally to actor rows in related tables.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the order for which the status history is being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Status history search criteria: filters, pagination, event type, or date range for retrieval of order status history.","typeName":"IShoppingMallOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated, time-sorted list of detailed order status history entries for the specified order.","typeName":"IPageIShoppingMallOrderStatusHistory"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its status and transition history can be retrieved"}]},{"specification":"This operation retrieves the full timeline and detailed status change history for a specific order from the shopping mall Orders table, using the order's unique identifier. It supports deep inspection of all state transitions such as placed, paid, shipped, delivered, cancelled, refunded, and more. Pagination, time range, and status-type filtering are supported through the request body. This is essential for customer order history, seller audit, and admin review scenarios.","path":"/shoppingMall/seller/orders/{orderId}/statusHistory","method":"patch","summary":"Get status and transition history for an order from the Orders table.","description":"Retrieve the complete list and timeline of status/history entries for a specific order. This operation supports filtering by event type or date range and provides detailed event metadata for each transition, including the actor (customer, seller, admin), event type, previous and new status, explanation, and timestamps.\n\nAccess control ensures customers only view status history for their own orders, sellers can audit their fulfilled orders, and admins access any order for compliance. The response returns a paginated time-ordered list of history entries associated with the referenced order ID from the Orders schema. Event data is linked directly to order and optionally to actor rows in related tables.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the order for which the status history is being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Status history search criteria: filters, pagination, event type, or date range for retrieval of order status history.","typeName":"IShoppingMallOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated, time-sorted list of detailed order status history entries for the specified order.","typeName":"IPageIShoppingMallOrderStatusHistory"},"authorizationType":null,"authorizationRole":"seller","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its status and transition history can be retrieved"}]},{"specification":"This operation retrieves the full timeline and detailed status change history for a specific order from the shopping mall Orders table, using the order's unique identifier. It supports deep inspection of all state transitions such as placed, paid, shipped, delivered, cancelled, refunded, and more. Pagination, time range, and status-type filtering are supported through the request body. This is essential for customer order history, seller audit, and admin review scenarios.","path":"/shoppingMall/admin/orders/{orderId}/statusHistory","method":"patch","summary":"Get status and transition history for an order from the Orders table.","description":"Retrieve the complete list and timeline of status/history entries for a specific order. This operation supports filtering by event type or date range and provides detailed event metadata for each transition, including the actor (customer, seller, admin), event type, previous and new status, explanation, and timestamps.\n\nAccess control ensures customers only view status history for their own orders, sellers can audit their fulfilled orders, and admins access any order for compliance. The response returns a paginated time-ordered list of history entries associated with the referenced order ID from the Orders schema. Event data is linked directly to order and optionally to actor rows in related tables.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the order for which the status history is being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Status history search criteria: filters, pagination, event type, or date range for retrieval of order status history.","typeName":"IShoppingMallOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated, time-sorted list of detailed order status history entries for the specified order.","typeName":"IPageIShoppingMallOrderStatusHistory"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its status history can be retrieved. Creating an order ensures the referenced orderId is valid for retrieving status transitions."}]},{"specification":"This operation retrieves the details of a single status history entry for a given order, using both the parent order's ID and the specific status history's unique identifier. It operates on the OrderStatusHistory table in the Orders schema. The result provides all relevant fields, including event type, actor, transition states, messages, and timestamps. It is intended for case review, audit, customer inquiry, or compliance investigation contexts.","path":"/shoppingMall/customer/orders/{orderId}/statusHistory/{statusHistoryId}","method":"get","summary":"Get a specific order status history event from the OrderStatusHistory table.","description":"Retrieve the full information and audit details for a single order status history event. The response includes which actor triggered the event, before and after states, the type of status change, event messages, and the exact timestamp. This information is crucial for customer service, seller support, and administrative audit needs.\n\nAccess is secured so that customers can view history events for their own orders, sellers for their fulfilled orders, and admins for any order in the system. Error handling covers cases where the specified order ID or statusHistoryId does not exist, or the requesting actor lacks permission to view the data.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the parent order for which the status history event is being requested.","schema":{"type":"string","format":"uuid"}},{"name":"statusHistoryId","description":"Unique identifier (UUID) of the status history record being retrieved for the specified order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the order status history event record with all metadata and audit fields.","typeName":"IShoppingMallOrderStatusHistory"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a specific order status history record can be referenced or queried. The existence of the order is a prerequisite for any associated status history entry."}]},{"specification":"This operation retrieves the details of a single status history entry for a given order, using both the parent order's ID and the specific status history's unique identifier. It operates on the OrderStatusHistory table in the Orders schema. The result provides all relevant fields, including event type, actor, transition states, messages, and timestamps. It is intended for case review, audit, customer inquiry, or compliance investigation contexts.","path":"/shoppingMall/seller/orders/{orderId}/statusHistory/{statusHistoryId}","method":"get","summary":"Get a specific order status history event from the OrderStatusHistory table.","description":"Retrieve the full information and audit details for a single order status history event. The response includes which actor triggered the event, before and after states, the type of status change, event messages, and the exact timestamp. This information is crucial for customer service, seller support, and administrative audit needs.\n\nAccess is secured so that customers can view history events for their own orders, sellers for their fulfilled orders, and admins for any order in the system. Error handling covers cases where the specified order ID or statusHistoryId does not exist, or the requesting actor lacks permission to view the data.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the parent order for which the status history event is being requested.","schema":{"type":"string","format":"uuid"}},{"name":"statusHistoryId","description":"Unique identifier (UUID) of the status history record being retrieved for the specified order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the order status history event record with all metadata and audit fields.","typeName":"IShoppingMallOrderStatusHistory"},"authorizationType":null,"authorizationRole":"seller","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its status history event can be retrieved"}]},{"specification":"This operation retrieves the details of a single status history entry for a given order, using both the parent order's ID and the specific status history's unique identifier. It operates on the OrderStatusHistory table in the Orders schema. The result provides all relevant fields, including event type, actor, transition states, messages, and timestamps. It is intended for case review, audit, customer inquiry, or compliance investigation contexts.","path":"/shoppingMall/admin/orders/{orderId}/statusHistory/{statusHistoryId}","method":"get","summary":"Get a specific order status history event from the OrderStatusHistory table.","description":"Retrieve the full information and audit details for a single order status history event. The response includes which actor triggered the event, before and after states, the type of status change, event messages, and the exact timestamp. This information is crucial for customer service, seller support, and administrative audit needs.\n\nAccess is secured so that customers can view history events for their own orders, sellers for their fulfilled orders, and admins for any order in the system. Error handling covers cases where the specified order ID or statusHistoryId does not exist, or the requesting actor lacks permission to view the data.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the parent order for which the status history event is being requested.","schema":{"type":"string","format":"uuid"}},{"name":"statusHistoryId","description":"Unique identifier (UUID) of the status history record being retrieved for the specified order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the order status history event record with all metadata and audit fields.","typeName":"IShoppingMallOrderStatusHistory"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its status history event can be retrieved"}]},{"specification":"This operation allows retrieval of payment records for a specified order, supporting complex queries such as pagination, filtering by payment status, and date ranges. It operates on the shopping_mall_order_payments table in the Prisma schema and is used by customers, sellers, and admins to review payment attempts, status, and payment provider responses associated with a single order. The structure supports role-based access and the possibility to filter for failed, pending, or successful payments.","description":"Retrieve a filtered, paginated list of payment records associated with a given order, using advanced query parameters such as payment status, type, or date range to support customer, seller, and admin review of order payment events.\n\nThis operation integrates with the shopping_mall_order_payments table and supports use cases including payment troubleshooting, history review, and audit requirements for both customers and platform staff. It incorporates security checks, ensuring only permitted users may view payment data for a given order.\n\nPagination and search parameters are defined in the request body to allow flexible front-end filtering. The operation is tightly coupled with the Orders, Payments, and User authentication flows, and any errors (such as order not found, unauthorized, or malformed query) provide actionable responses.","summary":"Retrieve a paginated, filtered list of payments for a specific order from shopping_mall_order_payments.","parameters":[{"name":"orderId","description":"Unique identifier for the target order whose payment records are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination criteria for retrieving payment records of a specific order.","typeName":"IShoppingMallOrderPayment.IRequest"},"responseBody":{"description":"Paginated list of payment event records matching the query for the specified order.","typeName":"IPageIShoppingMallOrderPayment"},"authorizationType":null,"authorizationRole":"customer","name":"index","path":"/shoppingMall/customer/orders/{orderId}/payments","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its payment records can be queried. The payment record retrieval requires the orderId, which is only available after order creation."}]},{"specification":"This operation allows retrieval of payment records for a specified order, supporting complex queries such as pagination, filtering by payment status, and date ranges. It operates on the shopping_mall_order_payments table in the Prisma schema and is used by customers, sellers, and admins to review payment attempts, status, and payment provider responses associated with a single order. The structure supports role-based access and the possibility to filter for failed, pending, or successful payments.","description":"Retrieve a filtered, paginated list of payment records associated with a given order, using advanced query parameters such as payment status, type, or date range to support customer, seller, and admin review of order payment events.\n\nThis operation integrates with the shopping_mall_order_payments table and supports use cases including payment troubleshooting, history review, and audit requirements for both customers and platform staff. It incorporates security checks, ensuring only permitted users may view payment data for a given order.\n\nPagination and search parameters are defined in the request body to allow flexible front-end filtering. The operation is tightly coupled with the Orders, Payments, and User authentication flows, and any errors (such as order not found, unauthorized, or malformed query) provide actionable responses.","summary":"Retrieve a paginated, filtered list of payments for a specific order from shopping_mall_order_payments.","parameters":[{"name":"orderId","description":"Unique identifier for the target order whose payment records are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination criteria for retrieving payment records of a specific order.","typeName":"IShoppingMallOrderPayment.IRequest"},"responseBody":{"description":"Paginated list of payment event records matching the query for the specified order.","typeName":"IPageIShoppingMallOrderPayment"},"authorizationType":null,"authorizationRole":"seller","name":"index","path":"/shoppingMall/seller/orders/{orderId}/payments","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before its payment records can be queried. The payment record retrieval requires the orderId, which is only available after order creation."}]},{"specification":"This operation allows retrieval of payment records for a specified order, supporting complex queries such as pagination, filtering by payment status, and date ranges. It operates on the shopping_mall_order_payments table in the Prisma schema and is used by customers, sellers, and admins to review payment attempts, status, and payment provider responses associated with a single order. The structure supports role-based access and the possibility to filter for failed, pending, or successful payments.","description":"Retrieve a filtered, paginated list of payment records associated with a given order, using advanced query parameters such as payment status, type, or date range to support customer, seller, and admin review of order payment events.\n\nThis operation integrates with the shopping_mall_order_payments table and supports use cases including payment troubleshooting, history review, and audit requirements for both customers and platform staff. It incorporates security checks, ensuring only permitted users may view payment data for a given order.\n\nPagination and search parameters are defined in the request body to allow flexible front-end filtering. The operation is tightly coupled with the Orders, Payments, and User authentication flows, and any errors (such as order not found, unauthorized, or malformed query) provide actionable responses.","summary":"Retrieve a paginated, filtered list of payments for a specific order from shopping_mall_order_payments.","parameters":[{"name":"orderId","description":"Unique identifier for the target order whose payment records are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination criteria for retrieving payment records of a specific order.","typeName":"IShoppingMallOrderPayment.IRequest"},"responseBody":{"description":"Paginated list of payment event records matching the query for the specified order.","typeName":"IPageIShoppingMallOrderPayment"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/orders/{orderId}/payments","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before payment records for the order can be retrieved."}]},{"specification":"This operation retrieves the full details of a specific payment record for a given order, identified by both orderId and paymentId, from the shopping_mall_order_payments table in the Prisma schema. It provides comprehensive payment information, including payment method snapshot, amount, status, gateway reference, and all audit-relevant attributes needed for customer, seller, or admin review. Security is enforced through role-based access, ensuring only authorized actors can access detailed payment data for the given context.","description":"Retrieve the details of a single payment associated with a specific order. This endpoint returns information such as the payment provider reference, transaction status, amount, timestamps, payment type, and any available status details for compliance or issue resolution.\n\nSecurity considerations ensure the authenticated customer, seller, or admin may only access payment information related to orders they are authorized to view. Errors such as payment not found, order mismatch, or lack of permission are gracefully handled with actionable error responses.\n\nThis endpoint is critical for user-facing payment status pages, order administration, and support flows, and it interacts closely with payment gateway reconciliation, order management, and audit logging subsystems.","summary":"Get detail for a specific order payment from shopping_mall_order_payments.","parameters":[{"name":"orderId","description":"Unique identifier for the target order.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier for the payment record within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the selected payment record.","typeName":"IShoppingMallOrderPayment"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/orders/{orderId}/payments/{paymentId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before retrieving payment details for a payment within the order."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Payment must be created for the order before its detailed information can be retrieved."}]},{"specification":"This operation retrieves the full details of a specific payment record for a given order, identified by both orderId and paymentId, from the shopping_mall_order_payments table in the Prisma schema. It provides comprehensive payment information, including payment method snapshot, amount, status, gateway reference, and all audit-relevant attributes needed for customer, seller, or admin review. Security is enforced through role-based access, ensuring only authorized actors can access detailed payment data for the given context.","description":"Retrieve the details of a single payment associated with a specific order. This endpoint returns information such as the payment provider reference, transaction status, amount, timestamps, payment type, and any available status details for compliance or issue resolution.\n\nSecurity considerations ensure the authenticated customer, seller, or admin may only access payment information related to orders they are authorized to view. Errors such as payment not found, order mismatch, or lack of permission are gracefully handled with actionable error responses.\n\nThis endpoint is critical for user-facing payment status pages, order administration, and support flows, and it interacts closely with payment gateway reconciliation, order management, and audit logging subsystems.","summary":"Get detail for a specific order payment from shopping_mall_order_payments.","parameters":[{"name":"orderId","description":"Unique identifier for the target order.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier for the payment record within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the selected payment record.","typeName":"IShoppingMallOrderPayment"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/orders/{orderId}/payments/{paymentId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its payment can be retrieved."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Order payment must be created before its details can be retrieved."}]},{"specification":"This operation retrieves the full details of a specific payment record for a given order, identified by both orderId and paymentId, from the shopping_mall_order_payments table in the Prisma schema. It provides comprehensive payment information, including payment method snapshot, amount, status, gateway reference, and all audit-relevant attributes needed for customer, seller, or admin review. Security is enforced through role-based access, ensuring only authorized actors can access detailed payment data for the given context.","description":"Retrieve the details of a single payment associated with a specific order. This endpoint returns information such as the payment provider reference, transaction status, amount, timestamps, payment type, and any available status details for compliance or issue resolution.\n\nSecurity considerations ensure the authenticated customer, seller, or admin may only access payment information related to orders they are authorized to view. Errors such as payment not found, order mismatch, or lack of permission are gracefully handled with actionable error responses.\n\nThis endpoint is critical for user-facing payment status pages, order administration, and support flows, and it interacts closely with payment gateway reconciliation, order management, and audit logging subsystems.","summary":"Get detail for a specific order payment from shopping_mall_order_payments.","parameters":[{"name":"orderId","description":"Unique identifier for the target order.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier for the payment record within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the selected payment record.","typeName":"IShoppingMallOrderPayment"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/orders/{orderId}/payments/{paymentId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its payment can be retrieved."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Order payment must be created before its details can be retrieved."}]},{"specification":"This operation allows a customer to initiate a payment for a specific order. The operation targets the shopping_mall_orders table and is essential for completing the purchase after the order has been created but before fulfillment. The request body captures the necessary payment method details and the response confirms the initiation result and payment status. Payments can cover multiple methods per marketplace requirements and business validation rules must ensure payment amount matches order total, method is enabled, and order is eligible for payment.","description":"Initiates a payment process for an existing order by its unique identifier. This operation is restricted to authenticated customers who own the order, ensuring secure business logic enforcement as described in the requirements and supported by the Prisma schema's shopping_mall_orders and shopping_mall_order_payments tables.\n\nUpon a valid request, the system will validate the order status (e.g., should be pending or awaiting payment), confirm that the selected payment method is currently enabled, and that the payment amount matches the order's total. If any validation or business logic fails (e.g., order not found, already paid, insufficient permissions), a clear error is returned and the payment is not processed.\n\nThe request body must include payment method details and payment-type-specific information (e.g., card, bank transfer, third-party provider). The response provides confirmation of the payment's initiation, the resulting payment status, any pending clarifications, and all audit-relevant details for downstream order processing and user notification flows.","summary":"Initiate payment for an order based on its unique ID (shopping_mall_orders).","parameters":[{"name":"orderId","description":"Unique identifier for the target order.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment method details and required payment information for initiating the payment on the specific order.","typeName":"IShoppingMallOrderPayment.ICreate"},"responseBody":{"description":"Confirmation of payment initiation with resulting status and audit details.","typeName":"IShoppingMallOrderPayment"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a payment can be initiated for that order."},{"endpoint":{"path":"/shoppingMall/admin/orderPaymentMethods","method":"post"},"description":"Order payment method snapshot must exist before it can be referenced for payment initiation."}]},{"specification":"This operation updates an existing payment record for a given order and payment instance. It is used for retrying a failed payment, updating payment method information (such as switching payment method or providing missing authorization), or updating payment status after asynchronous gateway callback. This operation acts on shopping_mall_order_payments and enforces business/workflow rules regarding what can be modified.","description":"Updates a specific payment attempt for an order, identified by both orderId and paymentId. Customers can use this endpoint to retry a payment that failed previously or to switch to a different payment method if permitted by business rules. Admins may also use this for manual reconciliation in special cases as part of platform management.\n\nThe operation validates that the payment record belongs to the requesting user and is in a modifiable state (e.g., pending, failed). Any changes to payment method must conform to allowed payment types and cannot result in fractional or overpaid totals. Successful update will advance payment toward completion or retry as needed. Response includes full details of the updated payment and status, and any associated audit trail required for compliance and customer support.","summary":"Update an existing payment record for a specific order (shopping_mall_order_payments).","parameters":[{"name":"orderId","description":"Unique identifier for the target order.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier for the payment record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated payment details or retry/authorization information for the payment entry.","typeName":"IShoppingMallOrderPayment.IUpdate"},"responseBody":{"description":"Full updated payment record reflecting the latest details and status.","typeName":"IShoppingMallOrderPayment"},"authorizationRoles":["customer"],"name":"update","path":"/shoppingMall/customer/orders/{orderId}/payments/{paymentId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its payment record can be updated."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/payments","method":"post"},"description":"Order payment record must be created before it can be updated."}]},{"specification":"This operation retrieves a paginated list of order cancellation requests for a specified order from the shopping mall. It operates primarily on the shopping_mall_order_cancellations table in the Prisma schema, providing filtered, paginated access to all cancellation events related to a specific order, including status, reason, and timestamps. This endpoint is essential for customers, sellers, and admins to review, search, and manage the order cancellation history, supporting customer service, order review, and business process tracking.","description":"This API operation allows users to view a complete, filtered, and paginated timeline of all cancellation requests associated with a single order. Detailed information is provided for each cancellation, including status (pending, approved, denied, etc.), reason code, requesting actor (customer, seller, admin), timestamps, and any supporting explanations or audit logs.\n\nSecurity is enforced so that customers can only view cancellations for their own orders, sellers for their order fulfillments, and admins have global access. This endpoint is useful for customers to track the status of their cancellation or refund requests, for sellers to process pending actions or provide responses, and for admins as part of audit and oversight tasks.\n\nInput validation supports complex querying, such as filtering by status, date range, initiator, or resolution outcome, with appropriate error handling for unauthorized access or missing order records. Pagination ensures efficient handling even for orders with extensive cancellation histories. Use this endpoint in combination with detailed cancellation/approval endpoints for full customer service workflows.","summary":"Retrieve a paginated list of cancellations related to a specific shopping mall order from shopping_mall_order_cancellations.","parameters":[{"name":"orderId","description":"Unique identifier of the target order whose cancellations will be queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for filtering, searching, and paginating cancellations for the target order.","typeName":"IShoppingMallOrderCancellation.IRequest"},"responseBody":{"description":"Paginated list of order cancellation records for the specified order, supporting order-service UI and audit.","typeName":"IPageIShoppingMallOrderCancellation"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/customer/orders/{orderId}/cancellations","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its cancellation history can be queried"}]},{"specification":"This operation retrieves a paginated list of order cancellation requests for a specified order from the shopping mall. It operates primarily on the shopping_mall_order_cancellations table in the Prisma schema, providing filtered, paginated access to all cancellation events related to a specific order, including status, reason, and timestamps. This endpoint is essential for customers, sellers, and admins to review, search, and manage the order cancellation history, supporting customer service, order review, and business process tracking.","description":"This API operation allows users to view a complete, filtered, and paginated timeline of all cancellation requests associated with a single order. Detailed information is provided for each cancellation, including status (pending, approved, denied, etc.), reason code, requesting actor (customer, seller, admin), timestamps, and any supporting explanations or audit logs.\n\nSecurity is enforced so that customers can only view cancellations for their own orders, sellers for their order fulfillments, and admins have global access. This endpoint is useful for customers to track the status of their cancellation or refund requests, for sellers to process pending actions or provide responses, and for admins as part of audit and oversight tasks.\n\nInput validation supports complex querying, such as filtering by status, date range, initiator, or resolution outcome, with appropriate error handling for unauthorized access or missing order records. Pagination ensures efficient handling even for orders with extensive cancellation histories. Use this endpoint in combination with detailed cancellation/approval endpoints for full customer service workflows.","summary":"Retrieve a paginated list of cancellations related to a specific shopping mall order from shopping_mall_order_cancellations.","parameters":[{"name":"orderId","description":"Unique identifier of the target order whose cancellations will be queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for filtering, searching, and paginating cancellations for the target order.","typeName":"IShoppingMallOrderCancellation.IRequest"},"responseBody":{"description":"Paginated list of order cancellation records for the specified order, supporting order-service UI and audit.","typeName":"IPageIShoppingMallOrderCancellation"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/seller/orders/{orderId}/cancellations","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its cancellation history can be queried"}]},{"specification":"This operation retrieves a paginated list of order cancellation requests for a specified order from the shopping mall. It operates primarily on the shopping_mall_order_cancellations table in the Prisma schema, providing filtered, paginated access to all cancellation events related to a specific order, including status, reason, and timestamps. This endpoint is essential for customers, sellers, and admins to review, search, and manage the order cancellation history, supporting customer service, order review, and business process tracking.","description":"This API operation allows users to view a complete, filtered, and paginated timeline of all cancellation requests associated with a single order. Detailed information is provided for each cancellation, including status (pending, approved, denied, etc.), reason code, requesting actor (customer, seller, admin), timestamps, and any supporting explanations or audit logs.\n\nSecurity is enforced so that customers can only view cancellations for their own orders, sellers for their order fulfillments, and admins have global access. This endpoint is useful for customers to track the status of their cancellation or refund requests, for sellers to process pending actions or provide responses, and for admins as part of audit and oversight tasks.\n\nInput validation supports complex querying, such as filtering by status, date range, initiator, or resolution outcome, with appropriate error handling for unauthorized access or missing order records. Pagination ensures efficient handling even for orders with extensive cancellation histories. Use this endpoint in combination with detailed cancellation/approval endpoints for full customer service workflows.","summary":"Retrieve a paginated list of cancellations related to a specific shopping mall order from shopping_mall_order_cancellations.","parameters":[{"name":"orderId","description":"Unique identifier of the target order whose cancellations will be queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for filtering, searching, and paginating cancellations for the target order.","typeName":"IShoppingMallOrderCancellation.IRequest"},"responseBody":{"description":"Paginated list of order cancellation records for the specified order, supporting order-service UI and audit.","typeName":"IPageIShoppingMallOrderCancellation"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/admin/orders/{orderId}/cancellations","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before order cancellation records can be queried."}]},{"specification":"This operation retrieves the detailed information of a specific order cancellation event identified by 'cancellationId' for the order specified by 'orderId'. It operates on the 'shopping_mall_order_cancellations' table, which stores all cancellation requests and events for orders in the system. The operation returns the complete record of the cancellation, including its reason, status, initiators, explanation, timestamps, and related audit information, supporting both customer, seller, and admin review of the cancellation event and its lifecycle.","description":"Retrieve detailed information about a specific order cancellation by its unique identifier. This endpoint can be used by customers to review their own cancellation requests, by sellers to monitor and handle cancellations related to their products, and by administrators to audit and troubleshoot cancellation cases system-wide.\n\nSecurity and permissions are enforced according to user role and cancellation ownership: customers can only access their own order cancellations, sellers can access cancellations for their own orders, and admins have unrestricted access. Data is returned from the 'shopping_mall_order_cancellations' table, and includes cancellation reason codes, status (pending, approved, denied, completed, etc.), explanation text, involved actors (customer/seller/admin), and all related timestamps.\n\nAny business logic or validation issues (such as accessing a cancellation not owned by the requesting user or non-existent order/cancellation IDs) are handled with appropriate error responses referencing platform-wide error handling conventions. Related APIs for listing, creating, or modifying cancellations are available for workflow integration.","summary":"Get a specific order cancellation record by ID from shopping_mall_order_cancellations table.","authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/customer/orders/{orderId}/cancellations/{cancellationId}","method":"get","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the order whose cancellation event is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique identifier (UUID) of the specific cancellation event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified order cancellation event.","typeName":"IShoppingMallOrderCancellation"},"authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a specific cancellation record for the order can be retrieved."}]},{"specification":"This operation retrieves the detailed information of a specific order cancellation event identified by 'cancellationId' for the order specified by 'orderId'. It operates on the 'shopping_mall_order_cancellations' table, which stores all cancellation requests and events for orders in the system. The operation returns the complete record of the cancellation, including its reason, status, initiators, explanation, timestamps, and related audit information, supporting both customer, seller, and admin review of the cancellation event and its lifecycle.","description":"Retrieve detailed information about a specific order cancellation by its unique identifier. This endpoint can be used by customers to review their own cancellation requests, by sellers to monitor and handle cancellations related to their products, and by administrators to audit and troubleshoot cancellation cases system-wide.\n\nSecurity and permissions are enforced according to user role and cancellation ownership: customers can only access their own order cancellations, sellers can access cancellations for their own orders, and admins have unrestricted access. Data is returned from the 'shopping_mall_order_cancellations' table, and includes cancellation reason codes, status (pending, approved, denied, completed, etc.), explanation text, involved actors (customer/seller/admin), and all related timestamps.\n\nAny business logic or validation issues (such as accessing a cancellation not owned by the requesting user or non-existent order/cancellation IDs) are handled with appropriate error responses referencing platform-wide error handling conventions. Related APIs for listing, creating, or modifying cancellations are available for workflow integration.","summary":"Get a specific order cancellation record by ID from shopping_mall_order_cancellations table.","authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/seller/orders/{orderId}/cancellations/{cancellationId}","method":"get","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the order whose cancellation event is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique identifier (UUID) of the specific cancellation event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified order cancellation event.","typeName":"IShoppingMallOrderCancellation"},"authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before any cancellation record can exist or be retrieved."}]},{"specification":"This operation retrieves the detailed information of a specific order cancellation event identified by 'cancellationId' for the order specified by 'orderId'. It operates on the 'shopping_mall_order_cancellations' table, which stores all cancellation requests and events for orders in the system. The operation returns the complete record of the cancellation, including its reason, status, initiators, explanation, timestamps, and related audit information, supporting both customer, seller, and admin review of the cancellation event and its lifecycle.","description":"Retrieve detailed information about a specific order cancellation by its unique identifier. This endpoint can be used by customers to review their own cancellation requests, by sellers to monitor and handle cancellations related to their products, and by administrators to audit and troubleshoot cancellation cases system-wide.\n\nSecurity and permissions are enforced according to user role and cancellation ownership: customers can only access their own order cancellations, sellers can access cancellations for their own orders, and admins have unrestricted access. Data is returned from the 'shopping_mall_order_cancellations' table, and includes cancellation reason codes, status (pending, approved, denied, completed, etc.), explanation text, involved actors (customer/seller/admin), and all related timestamps.\n\nAny business logic or validation issues (such as accessing a cancellation not owned by the requesting user or non-existent order/cancellation IDs) are handled with appropriate error responses referencing platform-wide error handling conventions. Related APIs for listing, creating, or modifying cancellations are available for workflow integration.","summary":"Get a specific order cancellation record by ID from shopping_mall_order_cancellations table.","authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/admin/orders/{orderId}/cancellations/{cancellationId}","method":"get","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the order whose cancellation event is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique identifier (UUID) of the specific cancellation event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified order cancellation event.","typeName":"IShoppingMallOrderCancellation"},"authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before any associated cancellation record can exist or be retrieved."}]},{"specification":"This operation updates the details of a specific cancellation request for a customer order. The endpoint operates on the shopping_mall_order_cancellations table, enabling an authorized actor (customer, seller, or admin) to change the status, explanation, or reason code for a cancellation previously requested. This supports business logic for approval, denial, or supplementary remarks on a cancellation instance.","description":"This operation permits the modification of an existing order cancellation request. Typical use cases include updating the status (such as moving from pending to approved or denied), editing the reason code, or providing/altering the explanation text for audit and workflow clarity.\n\nSecurity is enforced to ensure only authorized actors (such as the original requester, responsible seller, or platform admin) can modify the cancellation, following business permission rules as defined in the requirements analysis. This edit operation references the shopping_mall_order_cancellations table, ensuring the integrity of the cancellation history and supporting audit trails for regulatory compliance.\n\nThe request body must follow IShoppingMallOrderCancellation.IUpdate. Validation checks confirm that status transitions are logically valid (e.g., can't move from completed to pending), and unauthorized changes are blocked according to user role. If a referenced order or cancellation does not exist, or the action is not permitted by the actor, the API responds with appropriate error messages and context.\n\nRelated endpoints include GET/PATCH operations for retrieving order cancellation status and POST requests for creating a new cancellation.","path":"/shoppingMall/customer/orders/{orderId}/cancellations/{cancellationId}","method":"put","summary":"Update an existing order cancellation request for a specific order (shopping_mall_order_cancellations).","parameters":[{"name":"orderId","description":"Target order's unique ID whose cancellation request should be modified.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique cancellation request ID within the specified order to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated cancellation request details, including status, reason code, or explanation text.","typeName":"IShoppingMallOrderCancellation.IUpdate"},"responseBody":{"description":"The updated state of the order cancellation as saved in the system.","typeName":"IShoppingMallOrderCancellation"},"authorizationType":null,"authorizationRole":"customer","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before an order cancellation can be created or updated"}]},{"specification":"This operation updates the details of a specific cancellation request for a customer order. The endpoint operates on the shopping_mall_order_cancellations table, enabling an authorized actor (customer, seller, or admin) to change the status, explanation, or reason code for a cancellation previously requested. This supports business logic for approval, denial, or supplementary remarks on a cancellation instance.","description":"This operation permits the modification of an existing order cancellation request. Typical use cases include updating the status (such as moving from pending to approved or denied), editing the reason code, or providing/altering the explanation text for audit and workflow clarity.\n\nSecurity is enforced to ensure only authorized actors (such as the original requester, responsible seller, or platform admin) can modify the cancellation, following business permission rules as defined in the requirements analysis. This edit operation references the shopping_mall_order_cancellations table, ensuring the integrity of the cancellation history and supporting audit trails for regulatory compliance.\n\nThe request body must follow IShoppingMallOrderCancellation.IUpdate. Validation checks confirm that status transitions are logically valid (e.g., can't move from completed to pending), and unauthorized changes are blocked according to user role. If a referenced order or cancellation does not exist, or the action is not permitted by the actor, the API responds with appropriate error messages and context.\n\nRelated endpoints include GET/PATCH operations for retrieving order cancellation status and POST requests for creating a new cancellation.","path":"/shoppingMall/seller/orders/{orderId}/cancellations/{cancellationId}","method":"put","summary":"Update an existing order cancellation request for a specific order (shopping_mall_order_cancellations).","parameters":[{"name":"orderId","description":"Target order's unique ID whose cancellation request should be modified.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique cancellation request ID within the specified order to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated cancellation request details, including status, reason code, or explanation text.","typeName":"IShoppingMallOrderCancellation.IUpdate"},"responseBody":{"description":"The updated state of the order cancellation as saved in the system.","typeName":"IShoppingMallOrderCancellation"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before an order cancellation can be created or updated"}]},{"specification":"This operation updates the details of a specific cancellation request for a customer order. The endpoint operates on the shopping_mall_order_cancellations table, enabling an authorized actor (customer, seller, or admin) to change the status, explanation, or reason code for a cancellation previously requested. This supports business logic for approval, denial, or supplementary remarks on a cancellation instance.","description":"This operation permits the modification of an existing order cancellation request. Typical use cases include updating the status (such as moving from pending to approved or denied), editing the reason code, or providing/altering the explanation text for audit and workflow clarity.\n\nSecurity is enforced to ensure only authorized actors (such as the original requester, responsible seller, or platform admin) can modify the cancellation, following business permission rules as defined in the requirements analysis. This edit operation references the shopping_mall_order_cancellations table, ensuring the integrity of the cancellation history and supporting audit trails for regulatory compliance.\n\nThe request body must follow IShoppingMallOrderCancellation.IUpdate. Validation checks confirm that status transitions are logically valid (e.g., can't move from completed to pending), and unauthorized changes are blocked according to user role. If a referenced order or cancellation does not exist, or the action is not permitted by the actor, the API responds with appropriate error messages and context.\n\nRelated endpoints include GET/PATCH operations for retrieving order cancellation status and POST requests for creating a new cancellation.","path":"/shoppingMall/admin/orders/{orderId}/cancellations/{cancellationId}","method":"put","summary":"Update an existing order cancellation request for a specific order (shopping_mall_order_cancellations).","parameters":[{"name":"orderId","description":"Target order's unique ID whose cancellation request should be modified.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique cancellation request ID within the specified order to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated cancellation request details, including status, reason code, or explanation text.","typeName":"IShoppingMallOrderCancellation.IUpdate"},"responseBody":{"description":"The updated state of the order cancellation as saved in the system.","typeName":"IShoppingMallOrderCancellation"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[]},{"specification":"This operation deletes (logically/soft delete) a specific cancellation request for a customer order in the shopping mall platform, reflecting a retraction or removal request. It operates on the shopping_mall_order_cancellations table and is intended for use by the original requester or authorized moderator/admin. This action preserves the audit history by recording the deletion timestamp rather than erasing the record.","description":"The API enables logical (soft) deletion of an order cancellation request, marking the record with a deleted_at timestamp while retaining its existence for compliance and audit. This operation ensures that cancellations can be retracted or administratively removed when justified, in line with permission constraints defined by role and business process.\n\nOnly the actor who created the cancellation, a seller involved in the order, or an admin can delete the cancellation, and only if business rules (such as not already approved/denied/finalized) allow it. The operation references the shopping_mall_order_cancellations table and enforces status checks to avoid removing completed or irreversibly processed records. Unauthorized or invalid deletions result in error responses detailing the cause, ensuring traceability for all actions.\n\nThis endpoint is related to POST and PUT operations on cancellations, as well as GET endpoints for retrieving cancellation data. The logical delete aligns with the underlying schema's use of deleted_at.","path":"/shoppingMall/customer/orders/{orderId}/cancellations/{cancellationId}","method":"delete","summary":"Soft-delete (logically remove) a cancellation request related to a specific order (shopping_mall_order_cancellations).","parameters":[{"name":"orderId","description":"ID of the order whose cancellation request should be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique cancellation ID to logically remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","prerequisites":[]},{"specification":"This operation deletes (logically/soft delete) a specific cancellation request for a customer order in the shopping mall platform, reflecting a retraction or removal request. It operates on the shopping_mall_order_cancellations table and is intended for use by the original requester or authorized moderator/admin. This action preserves the audit history by recording the deletion timestamp rather than erasing the record.","description":"The API enables logical (soft) deletion of an order cancellation request, marking the record with a deleted_at timestamp while retaining its existence for compliance and audit. This operation ensures that cancellations can be retracted or administratively removed when justified, in line with permission constraints defined by role and business process.\n\nOnly the actor who created the cancellation, a seller involved in the order, or an admin can delete the cancellation, and only if business rules (such as not already approved/denied/finalized) allow it. The operation references the shopping_mall_order_cancellations table and enforces status checks to avoid removing completed or irreversibly processed records. Unauthorized or invalid deletions result in error responses detailing the cause, ensuring traceability for all actions.\n\nThis endpoint is related to POST and PUT operations on cancellations, as well as GET endpoints for retrieving cancellation data. The logical delete aligns with the underlying schema's use of deleted_at.","path":"/shoppingMall/seller/orders/{orderId}/cancellations/{cancellationId}","method":"delete","summary":"Soft-delete (logically remove) a cancellation request related to a specific order (shopping_mall_order_cancellations).","parameters":[{"name":"orderId","description":"ID of the order whose cancellation request should be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique cancellation ID to logically remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a cancellation request can exist or be deleted"}]},{"specification":"This operation deletes (logically/soft delete) a specific cancellation request for a customer order in the shopping mall platform, reflecting a retraction or removal request. It operates on the shopping_mall_order_cancellations table and is intended for use by the original requester or authorized moderator/admin. This action preserves the audit history by recording the deletion timestamp rather than erasing the record.","description":"The API enables logical (soft) deletion of an order cancellation request, marking the record with a deleted_at timestamp while retaining its existence for compliance and audit. This operation ensures that cancellations can be retracted or administratively removed when justified, in line with permission constraints defined by role and business process.\n\nOnly the actor who created the cancellation, a seller involved in the order, or an admin can delete the cancellation, and only if business rules (such as not already approved/denied/finalized) allow it. The operation references the shopping_mall_order_cancellations table and enforces status checks to avoid removing completed or irreversibly processed records. Unauthorized or invalid deletions result in error responses detailing the cause, ensuring traceability for all actions.\n\nThis endpoint is related to POST and PUT operations on cancellations, as well as GET endpoints for retrieving cancellation data. The logical delete aligns with the underlying schema's use of deleted_at.","path":"/shoppingMall/admin/orders/{orderId}/cancellations/{cancellationId}","method":"delete","summary":"Soft-delete (logically remove) a cancellation request related to a specific order (shopping_mall_order_cancellations).","parameters":[{"name":"orderId","description":"ID of the order whose cancellation request should be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"cancellationId","description":"Unique cancellation ID to logically remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a cancellation request can exist or be deleted"}]},{"specification":"This operation retrieves the details of a specific refund event for a particular order, linked to the shopping_mall_order_refunds table. It returns information such as the refund status, reason code, amount refunded, associated payment and actors, timestamps, and explanation for audit or customer support. The operation is essential for customers or administrators (roles present in the schema) to view the full details and timeline of a refund request or transaction tied to a specific order and refund ID. All returned data is as of the current state and includes any updates or resolution notes if present.","description":"Retrieve complete details for a specific refund event associated with a particular order. This API operates directly on the shopping_mall_order_refunds table, ensuring traceability of refund requests, status changes, refunds resolved, initiator identity, payment linkage, and timeline data.\n\nThis operation enforces access control such that only the refund owner (customer) or administrators may view sensitive refund and payment data. Unauthorized attempts are denied and logged. The response includes refund status (pending, approved, denied, completed), date/time fields, refund amounts, business reason code, actors, attached explanation, and any settlement or failure timestamps. Data is immutable for audit compliance and used for customer service reviews or appeals workflows.\n\nThe customer may use this operation through their order history or customer service portal to review the refund progress, resolution, or denial explanation. Admins use it to audit refund handling and improve platform transparency and trust. The refundId parameter must correspond to an existing refund event for the specified orderId; otherwise, enforced error handling returns a 404 or role-based error response.","summary":"Retrieve the details for a specific refund event related to an order (shopping_mall_order_refunds table).","parameters":[{"name":"orderId","description":"Unique identifier of the target order for which the refund event belongs (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"refundId","description":"Unique identifier of the refund event to be retrieved (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed refund event information tied to the specified order and refund ID, including status, reason, amounts, resolution timestamps, and actors.","typeName":"IShoppingMallOrderRefund"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/orders/{orderId}/refunds/{refundId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refunds","method":"post"},"description":"A refund event must be created for the specified order before retrieving its details; this ensures the refundId exists under the order."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"The order (orderId) must be created before any refund can exist for that order."}]},{"specification":"This operation retrieves the details of a specific refund event for a particular order, linked to the shopping_mall_order_refunds table. It returns information such as the refund status, reason code, amount refunded, associated payment and actors, timestamps, and explanation for audit or customer support. The operation is essential for customers or administrators (roles present in the schema) to view the full details and timeline of a refund request or transaction tied to a specific order and refund ID. All returned data is as of the current state and includes any updates or resolution notes if present.","description":"Retrieve complete details for a specific refund event associated with a particular order. This API operates directly on the shopping_mall_order_refunds table, ensuring traceability of refund requests, status changes, refunds resolved, initiator identity, payment linkage, and timeline data.\n\nThis operation enforces access control such that only the refund owner (customer) or administrators may view sensitive refund and payment data. Unauthorized attempts are denied and logged. The response includes refund status (pending, approved, denied, completed), date/time fields, refund amounts, business reason code, actors, attached explanation, and any settlement or failure timestamps. Data is immutable for audit compliance and used for customer service reviews or appeals workflows.\n\nThe customer may use this operation through their order history or customer service portal to review the refund progress, resolution, or denial explanation. Admins use it to audit refund handling and improve platform transparency and trust. The refundId parameter must correspond to an existing refund event for the specified orderId; otherwise, enforced error handling returns a 404 or role-based error response.","summary":"Retrieve the details for a specific refund event related to an order (shopping_mall_order_refunds table).","parameters":[{"name":"orderId","description":"Unique identifier of the target order for which the refund event belongs (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"refundId","description":"Unique identifier of the refund event to be retrieved (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed refund event information tied to the specified order and refund ID, including status, reason, amounts, resolution timestamps, and actors.","typeName":"IShoppingMallOrderRefund"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/orders/{orderId}/refunds/{refundId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refunds","method":"post"},"description":"A refund event must be created for the specified order before retrieving admin-level details; this ensures the refundId exists under the order."},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"The order (orderId) must be created before any refund event can exist (and thus before an admin can retrieve details)."}]},{"specification":"This operation allows a customer to request a refund for an existing order. It operates on the shopping_mall_order_refunds table in the Prisma schema, which is used to keep a full record of refund events associated with orders. The API enforces that a refund can only be requested if the order meets eligibility criteria, such as payment status and delivery confirmation, and will collect a reason as part of the business process. The refund amount, status, justification, and related payment references are tracked for compliance and audit. If the order or payment is not eligible, appropriate errors and guidance are provided.","description":"Initiates a refund request for a specific order by the customer. This operation uses the shopping_mall_order_refunds table to log the requested refund, including a reason code, status (such as pending, approved, denied, etc.), and refund amount. The system validates the order and payment state before permitting the refund to be processed. Customers must provide a valid explanation for the refund as well as any required documentation. Upon submission, the request status is set to pending and notifications are sent to sellers and relevant admins for further review and action.\n\nSecurity is enforced by confirming that the requester is the actual order owner, and that refund eligibility matches both platform and seller policy. Sensitive data is restricted and only exposed to authorized parties during refund processing.\n\nAll business logic, including audit logging, partial versus full refunds, and special handling for failed payment provider scenarios, is implemented by the provider layer. If the refund is denied, the customer will be notified with a clear error message and recovery path. This operation supports compliance requirements for traceability and data retention for at least 5 years.\n\nSee also: Approving or denying pending refunds via PUT on /orders/{orderId}/refunds/{refundId}.","summary":"Request a refund for a customer order (shopping_mall_order_refunds)","parameters":[{"name":"orderId","description":"Unique identifier of the target order for which the refund is being requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Refund request details, including reason code, refund amount, and supporting documentation (if applicable).","typeName":"IShoppingMallOrderRefund.ICreate"},"responseBody":{"description":"Details of the newly created refund request, including status, amount, and audit trail.","typeName":"IShoppingMallOrderRefund"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/orders/{orderId}/refunds","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must be created before a refund request can be made for it."}]},{"specification":"This operation allows an authorized party (admin or seller) to update the status or details of a specific refund request for an order. It operates on the shopping_mall_order_refunds table in the Prisma schema. Typical use cases include approving, denying, marking as completed, or modifying the explanation or resolution type for a requested refund. Business logic ensures only authorized users (admins or responsible sellers) can update refund requests. All updates are auditable and changes to the refund record are retained for compliance and tracking purposes. Invalid transitions, such as re-approving a rejected refund or unauthorized access, will be rejected and properly logged.","description":"Updates a specific refund request associated with an order. This operation supports status transitions (pending, approved, denied, completed, failed), allows updating the resolution reason, and may permit modification of the explanation or payout details depending on the business policy. The request and refundId must reference an existing refund request for the specified order. Only users with seller or admin rights over the order may execute updates.\n\nThe operation cross-checks refund eligibility and current status to prevent invalid transitions, such as approving a refund that has already been denied or completed. Security protocols verify that the updater has proper role authorization, and business logic handles all state transition rules. Changes are logged in the refund record for audit traces and customer visibility. If a non-authorized user calls this API or sends an invalid update, the system will reject the operation with an error message and preserve the previous refund status. Data is retained to meet regulatory trace and business audit requirements for financial events such as refunds.\n\nSee also: Initiating a refund via POST on /orders/{orderId}/refunds.","summary":"Update (admin/seller) a refund request for an order (shopping_mall_order_refunds)","parameters":[{"name":"orderId","description":"Unique identifier of the order associated with this refund request","schema":{"type":"string","format":"uuid"}},{"name":"refundId","description":"Unique identifier of the refund request to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the refund update, such as new status (approved, denied, completed), explanation for the action, and payout information if applicable.","typeName":"IShoppingMallOrderRefund.IUpdate"},"responseBody":{"description":"Updated refund request details reflecting the new status, explanation, and audit trail.","typeName":"IShoppingMallOrderRefund"},"authorizationRoles":["admin","seller"],"name":"update","path":"/shoppingMall/admin/orders/{orderId}/refunds/{refundId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refunds","method":"post"},"description":"The refund request must be created before it can be updated. This ensures that the specified refundId refers to an existing refund record associated with the order."}]},{"specification":"This operation allows an authorized party (admin or seller) to update the status or details of a specific refund request for an order. It operates on the shopping_mall_order_refunds table in the Prisma schema. Typical use cases include approving, denying, marking as completed, or modifying the explanation or resolution type for a requested refund. Business logic ensures only authorized users (admins or responsible sellers) can update refund requests. All updates are auditable and changes to the refund record are retained for compliance and tracking purposes. Invalid transitions, such as re-approving a rejected refund or unauthorized access, will be rejected and properly logged.","description":"Updates a specific refund request associated with an order. This operation supports status transitions (pending, approved, denied, completed, failed), allows updating the resolution reason, and may permit modification of the explanation or payout details depending on the business policy. The request and refundId must reference an existing refund request for the specified order. Only users with seller or admin rights over the order may execute updates.\n\nThe operation cross-checks refund eligibility and current status to prevent invalid transitions, such as approving a refund that has already been denied or completed. Security protocols verify that the updater has proper role authorization, and business logic handles all state transition rules. Changes are logged in the refund record for audit traces and customer visibility. If a non-authorized user calls this API or sends an invalid update, the system will reject the operation with an error message and preserve the previous refund status. Data is retained to meet regulatory trace and business audit requirements for financial events such as refunds.\n\nSee also: Initiating a refund via POST on /orders/{orderId}/refunds.","summary":"Update (admin/seller) a refund request for an order (shopping_mall_order_refunds)","parameters":[{"name":"orderId","description":"Unique identifier of the order associated with this refund request","schema":{"type":"string","format":"uuid"}},{"name":"refundId","description":"Unique identifier of the refund request to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the refund update, such as new status (approved, denied, completed), explanation for the action, and payout information if applicable.","typeName":"IShoppingMallOrderRefund.IUpdate"},"responseBody":{"description":"Updated refund request details reflecting the new status, explanation, and audit trail.","typeName":"IShoppingMallOrderRefund"},"authorizationRoles":["admin","seller"],"name":"update","path":"/shoppingMall/seller/orders/{orderId}/refunds/{refundId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refunds","method":"post"},"description":"A refund request must be created for the order before it can be updated by a seller or admin. This ensures that the refund event exists in the shopping_mall_order_refunds table and is eligible for modification."}]},{"specification":"This operation permanently erases a specific refund request associated with an order, as represented in the shopping_mall_order_refunds table. It is intended for use by authorized administrators (admin role) under exceptional circumstances — for example, in accordance with regulatory requirements, data correction needs, or explicit business logic that allows removal of refund events from the order's lifecycle record. The operation should be used sparingly, ensuring compliance with audit and traceability requirements. Upon successful execution, the targeted refund record for the specified order will be removed from the database and will no longer appear in user, seller, or admin interfaces. All deletions performed through this operation must be logged and audit-trailed according to platform compliance rules, and associated financial data must be reconciled according to business policy.","description":"The erase operation for an order refund enables a platform administrator to remove a specific refund event entry from the shopping_mall_order_refunds table, linked to its parent order. This may be justified in rare scenarios such as accidental duplicate entry, legal data erasure request, or to correct compliance discrepancies identified in the audit process.\n\nRole-based access control is strictly enforced — only users with the 'admin' role may use this endpoint, as refund records are transactional and financial, and their removal impacts both audit trails and downstream reporting. The operation first verifies the existence of both the order and refund IDs, ensures no settlement or irrevocable financial transaction is at risk, and confirms business logic (such as the refund's non-finalized state or within permissible removal period) before deleting the record.\n\nOn successful deletion, the record is purged (hard delete) and a confirmation is propagated to the invoking admin. If the refund is already finalized, linked to downstream payments, or otherwise protected by compliance, the request is rejected with an error. All erase actions are logged in the admin action logs (shopping_mall_admin_action_logs) for long-term oversight. Other related APIs for order or refund history retrieval are not impacted except that the deleted refund will no longer appear in any results. Error handling ensures transactional integrity and provides clear, actionable feedback for edge cases such as invalid IDs, permission violations, or state conflicts.","summary":"Permanently erase a specific refund event for an order (shopping_mall_order_refunds table) by admin action.","parameters":[{"name":"orderId","description":"Unique identifier of the parent order to which the refund event belongs (UUID format).","schema":{"type":"string","format":"uuid"}},{"name":"refundId","description":"Unique identifier of the refund event record to be erased (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/orders/{orderId}/refunds/{refundId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/refunds","method":"post"},"description":"A refund request must be created for the order before an admin can erase it. This guarantees that the refund record targeted for deletion exists in the shopping_mall_order_refunds table."}]},{"specification":"This operation retrieves a paginated and filtered list of all order shipping addresses stored in the shopping_mall_order_addresses table. Addresses are immutable, point-in-time order address snapshots used for audit and history purposes across customer, seller, and admin interfaces. The operation supports advanced search by address recipient name, postal/zip code, region, country code, address type (shipping, billing), and custom time range. The response includes summary details needed for displaying historical shipping/billing information, role-based field access, and integrated UI navigation. Intended for platform-wide reporting, admin review, and exceptional customer service workflows.","description":"This endpoint provides advanced search and retrieval of order-associated shipping/billing addresses from the shopping_mall_order_addresses table, supporting audit, reporting, and customer service requirements. Order addresses are recorded at the time of order placement and are immutable, reflecting the exact snapshot the order used regardless of subsequent address book edits by the customer.\n\nPermissions are enforced by role: customers may only retrieve order addresses linked to their own orders; sellers see those for their fulfilled orders; admins have full access for auditing and monitoring. The request allows filtering by recipient_name, region, zip/postal code, country code, address_type, and date range, and supports search for multilingual addresses. Responses provide paginated results containing all address fields except potentially sensitive fields where role restricts. The endpoint is crucial for traceability in regulatory or customer service cases, for UI features like order history detail, and for managing order delivery discrepancies. The request structure follows the IShoppingMallOrderAddress.IRequest pattern for consistency with complex search and pagination across the API suite.\n\nError handling includes clear feedback on permission violations, invalid search criteria, and unexpected service issues. The response encapsulates a role-appropriate list of address summaries optimized for audit trails and operational review. Linked APIs for order and shipment details reference these addresses in their respective resource models.","summary":"Search and retrieve a list of immutable order addresses (shopping_mall_order_addresses) with advanced filters and pagination.","parameters":[],"requestBody":{"description":"Search/filter parameters and pagination controls for querying historical order addresses.","typeName":"IShoppingMallOrderAddress.IRequest"},"responseBody":{"description":"Paginated search result containing order address summaries matching filter criteria.","typeName":"IPageIShoppingMallOrderAddress.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/orderAddresses","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Retrieve a detailed snapshot of a specific order address, given its unique identifier. This operation operates on the shopping_mall_order_addresses table, which stores immutable, historical snapshots of shipping and billing addresses as of the time each order was placed. It returns complete address details for audit, reporting, or user-facing order detail displays. Typical consumers of this endpoint are customers (to view their past orders), sellers (to verify shipping information for order fulfillment), and admins (for compliance, investigation, or platform support purposes).","description":"This API operation provides a detailed, read-only view of a single order address snapshot by its ID. The order address table is not user-editable and only contains historical information captured at the time of an order's creation, ensuring audit integrity and accurate fulfillment tracking. \n\nAddress data includes all fields required for postal, shipping, and compliance workflows—recipient, phone, postal code, address fields (split main/detail), region, country code, and the creation timestamp. Users cannot modify or delete these records for data consistency and legal compliance; only admins may access them depending on platform policy.\n\nThe operation enforces access such that customers may only view their own orders’ addresses, while admins have platform-wide access. If the specified ID is not found or the user is unauthorized to view it, an appropriate error is returned. This API does not expose linked order or customer identifiers in the response for privacy reasons.\n\nThis endpoint is most frequently used for user-facing order details screens, audit logs, refunds, cancellations, and admin investigations.","summary":"Retrieve detailed information for a specific historical order address (shopping_mall_order_addresses).","authorizationType":null,"authorizationRole":"customer","method":"get","path":"/shoppingMall/customer/orderAddresses/{orderAddressId}","parameters":[{"name":"orderAddressId","description":"Unique identifier (UUID) for the order address snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot of a historical order address as of order placement, suitable for display in order details or audit trace.","typeName":"IShoppingMallOrderAddress"},"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orderAddresses","method":"post"},"description":"Order address snapshot must be created during order placement before it can be retrieved as a historical record."}]},{"specification":"Retrieve a detailed snapshot of a specific order address, given its unique identifier. This operation operates on the shopping_mall_order_addresses table, which stores immutable, historical snapshots of shipping and billing addresses as of the time each order was placed. It returns complete address details for audit, reporting, or user-facing order detail displays. Typical consumers of this endpoint are customers (to view their past orders), sellers (to verify shipping information for order fulfillment), and admins (for compliance, investigation, or platform support purposes).","description":"This API operation provides a detailed, read-only view of a single order address snapshot by its ID. The order address table is not user-editable and only contains historical information captured at the time of an order's creation, ensuring audit integrity and accurate fulfillment tracking. \n\nAddress data includes all fields required for postal, shipping, and compliance workflows—recipient, phone, postal code, address fields (split main/detail), region, country code, and the creation timestamp. Users cannot modify or delete these records for data consistency and legal compliance; only admins may access them depending on platform policy.\n\nThe operation enforces access such that customers may only view their own orders’ addresses, while admins have platform-wide access. If the specified ID is not found or the user is unauthorized to view it, an appropriate error is returned. This API does not expose linked order or customer identifiers in the response for privacy reasons.\n\nThis endpoint is most frequently used for user-facing order details screens, audit logs, refunds, cancellations, and admin investigations.","summary":"Retrieve detailed information for a specific historical order address (shopping_mall_order_addresses).","authorizationType":null,"authorizationRole":"admin","method":"get","path":"/shoppingMall/admin/orderAddresses/{orderAddressId}","parameters":[{"name":"orderAddressId","description":"Unique identifier (UUID) for the order address snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot of a historical order address as of order placement, suitable for display in order details or audit trace.","typeName":"IShoppingMallOrderAddress"},"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orderAddresses","method":"post"},"description":"Order address snapshot must exist before it can be retrieved by ID; use this operation to create a historical order address for testing or order flows."}]},{"specification":"Create a new order address snapshot in the shopping_mall_order_addresses table. This operation is used internally during the order placement process to persist the exact shipping and billing address details at the time of order confirmation. Once created, these snapshots provide immutable records of the address as used for that order and cannot be edited or removed later for compliance and customer-protection reasons.","description":"This operation records a new immutable order address snapshot as part of the order placement or checkout workflow. It accepts all required address fields—recipient name, phone, postal code, address lines, detail, country code, and address type—and saves them as a point-in-time record tied to the specific order being placed. \n\nOrder address snapshots guarantee that fulfillment, support, and audit processes operate on the address as it was given at purchase, regardless of subsequent customer changes to their stored addresses. This separation from the customer address book is critical for compliance, legal records, and reliability in shipping, returns, or dispute resolution.\n\nThe API is intended for internal service use rather than direct end-user submission; typically, platform systems or order placement flows will invoke this endpoint. Requests are validated for completeness, with missing or malformed fields producing clear errors. Once created, the order address record is immutable and linked to the relevant order record. Only authenticated customers placing an order may call this API.","summary":"Record a new immutable order address snapshot during order placement (shopping_mall_order_addresses).","authorizationType":null,"authorizationRole":"customer","method":"post","path":"/shoppingMall/customer/orderAddresses","parameters":[],"requestBody":{"description":"Complete set of address attributes, as of order placement, to record as a historical snapshot for the order.","typeName":"IShoppingMallOrderAddress.ICreate"},"responseBody":{"description":"Immutable historical order address record as saved for the order; suitable for linking to order and shipment entities.","typeName":"IShoppingMallOrderAddress"},"name":"create","prerequisites":[]},{"specification":"This operation updates the snapshot of an order address associated with an order in the shoppingMall_orders schema. The order address contains point-in-time shipping or billing address details used for audit, legal, and accurate historical recordkeeping at the time of the order, ensuring record immutability even if the customer's address data changes later. The API allows platform administrators to correct or update information in case of erroneous address capture, compliance corrections, or customer-initiated change requests before fulfillment/shipment. Only mutable fields as defined in the shoppingMall_order_addresses Prisma schema may be changed; audit and authorization policies govern who can perform updates and what fields are editable after order placement or fulfillment. All changes trigger event logging, and edits after shipment may be system-restricted or require additional admin action. No changes may be made if the deletion flag is set; deleted addresses are considered immutable for audit integrity.","description":"This API allows updating an existing order address snapshot record in the shopping_mall_order_addresses table. The purpose is to support the correction or completion of shipping (or billing) information after the original order has been recorded, particularly in cases of initial user entry errors, compliance requirements, or rare valid customer requests under administrative review.\n\nThe endpoint supports updating fields including recipient name, contact information, region, zip/postal code, main address, detailed address, and country code. The platform's role-based permissions model restricts update actions strictly to authorized administrators; regular users and sellers cannot use this endpoint directly. Updates may be limited after order progresses to shipment or fulfillment, with stricter policies enforced when the address is attached to orders in advanced states.\n\nInternally, this operation validates existence of the target address, verifies it is not soft-deleted, and logs all changes for legal/audit purposes. Changes may affect only address fields; no direct modification of order or fulfillment status is permitted here. Errors are returned if the order address does not exist, is already deleted, or the update violates business constraints (e.g., trying to change address for already shipped order).\n\nThe operation must be used in accordance with privacy, legal, and compliance policies, and all changes are auditable. Related endpoints include order retrieval and address list endpoints; changes made via this operation are visible on subsequent order detail queries.","summary":"Update an existing order address snapshot record in the shopping_mall_order_addresses table by its unique identifier.","parameters":[{"name":"orderAddressId","description":"Unique identifier of the order address record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data fields to update for the specified order address snapshot.","typeName":"IShoppingMallOrderAddress.IUpdate"},"responseBody":{"description":"The updated order address snapshot record after successful modification.","typeName":"IShoppingMallOrderAddress"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/orderAddresses/{orderAddressId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orderAddresses","method":"post"},"description":"Order address snapshot must exist before it can be updated. This ensures that the update operation references a valid historical address record created at order time."}]},{"specification":"This operation permanently deletes an order address snapshot from the shopping_mall_order_addresses table, identified by its unique ID. The address table stores point-in-time address records associated with orders; removals are only performed in cases of error, correction, or strict compliance/policy use cases. The address is not directly user-editable; platform administrators may invoke this operation with the appropriate permissions. Deletion is implemented as a hard (permanent) removal from the database, as there is no soft-delete or deleted_at field present in the schema. All deletions are logged for audit or investigation. If the address is used by an active order, the system may block deletion and return a business constraint error. The operation does not affect actual order records, only the address snapshot. Attempts to delete an already deleted, or non-existent record, will result in an error response. The action aligns with retention policy, legal, and business rule requirements.","description":"This API endpoint allows an administrator to permanently delete an order address snapshot from the shopping_mall_order_addresses table by its unique identifier. Addresses in this table represent immutable historical data for orders, but deletion may be permitted for obvious system errors, compliance correction, or exceptional legal requests. Deletions performed through this operation are hard deletes (permanently removed), as the model does not support soft deletion.\n\nBusiness logic strictly restricts who may use this endpoint; only users with admin roles are permitted. Attempting deletion of an address linked to an active, non-cancelled order may be prevented by business policy for trace integrity, returning an actionable, specific error. Audit trails are automatically generated for all deletions, including actor, reason, and affected record id.\n\nIf the target address does not exist, is already deleted, or is not eligible for deletion under the order's current state, an error is returned. Deleting an order address does not affect or remove the actual order—the order remains in place, but address references will show as deleted/removed in history timelines, per compliance and platform requirements. Changes are reflected on subsequent order or address queries as appropriate.","summary":"Permanently delete an order address snapshot record from shopping_mall_order_addresses by its unique identifier.","parameters":[{"name":"orderAddressId","description":"Unique identifier of the order address snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/orderAddresses/{orderAddressId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orderAddresses","method":"post"},"description":"Order address snapshot must be created before it can be deleted. This guarantees the delete operation targets an existing record."}]},{"specification":"This operation retrieves a paginated, filterable list of order payment methods stored in the system. It is based on the shopping_mall_order_payment_methods Prisma model, which captures point-in-time payment method snapshots for orders (including type, masked details, and display name) for auditability, UI rendering, and compliance. Clients may use this operation to search payment methods by type, display name, or time period. Pagination and advanced filtering capabilities support efficient access for admin dashboards and reconciliation views. Response includes payment method metadata but does not expose sensitive details beyond those stored in the database record.","description":"This operation allows administrators or platform operators to retrieve a filtered and paginated list of all order payment methods stored in the e-commerce system. It operates on the shopping_mall_order_payment_methods table, supporting queries by payment method type, masked card/bank name, and creation date.\n\nThis endpoint can be used for administrative, auditing, or customer service use cases where reference to historical payment methods is necessary, such as payment reconciliations or issue resolution. Sensitive payment information is never exposed; rather, a safe display name and method metadata is provided.\n\nAuthorization checks should ensure only admin users (or authorized support staff) have access.\n\nPagination, sorting, and advanced filtering are available. Typical search fields include payment_method_type (e.g., card, bank_transfer), display_name, and timeframe. This operation does not allow exposure or enumeration of credentials and is strictly for metadata review or troubleshooting.\n\nRelated endpoints include single payment method retrieval for detailed inspection. Error conditions include invalid filter criteria, requesting a page beyond result set, or insufficient permissions.","summary":"Paginated and filterable index/search of order payment methods (audit records) in the system, reflecting shopping_mall_order_payment_methods table.","parameters":[],"requestBody":{"description":"Query parameters for filtering, sorting, and paginating the search of order payment methods.","typeName":"IShoppingMallOrderPaymentMethod.IRequest"},"responseBody":{"description":"Paginated list of order payment method summary records matching search criteria.","typeName":"IPageIShoppingMallOrderPaymentMethod.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/orderPaymentMethods","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Retrieve the detailed point-in-time snapshot of a specific order payment method by its identifier. This operation is based on the shopping_mall_order_payment_methods Prisma model, allowing inspection of all non-sensitive attributes (method type, masked display data, creation timestamp, etc.) for a given payment method associated with an order. This is critical for audit, support, and compliance operations that may require investigating which payment method was used for an order at checkout. Identification via unique orderPaymentMethodId (UUID) path parameter is enforced, and strict admin-level authorization is applied. Response structure returns only what is stored in the database record—never raw credentials or sensitive external processor data. Related to parent IShoppingMallOrderPaymentMethod entity.","description":"This operation returns comprehensive details for a single order payment method record, uniquely identified by orderPaymentMethodId. It draws from the shopping_mall_order_payment_methods Prisma model, which stores a snapshot of the payment method (including payment_method_type, display_name, method_data, and timestamps) for every created order.\n\nThe endpoint is intended for admin or support staff, supporting granular investigations for order issues, payment disputes, or customer service needs where reference to historical method information is required. This data is immutable post-order and represents the state at time of purchase, ensuring audit and trace compliance.\n\nOnly admin-level users are authorized to access this information as it could be linked to sensitive business or user audit trails (though display data is masked for privacy). Related endpoints include listing all payment methods, and order-level payment investigation or dispute workflow APIs.\n\nValidation checks include confirming the orderPaymentMethodId exists and belongs to a valid database record. Missing or unauthorized requests return a 404 or 403 as appropriate.","summary":"Retrieve details for a specific order payment method snapshot by ID (shopping_mall_order_payment_methods table).","parameters":[{"name":"orderPaymentMethodId","description":"Unique identifier (UUID) of the target order payment method record to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot of an order payment method for audit or support investigation.","typeName":"IShoppingMallOrderPaymentMethod"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/orderPaymentMethods/{orderPaymentMethodId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orderPaymentMethods","method":"post"},"description":"Order payment method must be created before it can be retrieved by its ID."}]},{"specification":"This operation allows the creation of a new payment method snapshot for an order within the e-commerce platform. It operates on the shopping_mall_order_payment_methods table in the Prisma schema. Payment method snapshots are used to capture the details of a specific payment method (such as card, bank transfer, or PayPal) at the moment an order is placed. This ensures accurate auditing and traceability, even if payment method details change later. The operation expects a payload containing the payment method type, method data (such as masked card details or account info), and a display name for UI purposes. Only administrative users or internal system processes should create payment method snapshots directly, as normal customers/sellers interact with payment via checkout flows.","description":"This API operation creates a new snapshot of an order payment method for recording and auditing transactional payments. Payment method snapshots are required to be created for each order at checkout to store relevant data as it was at the time of purchase.\n\nThe snapshot includes the type of payment method (e.g., card, bank_transfer, PayPal), method data required for reconciliation, and a display name suitable for UI display or customer receipt. This operation does not create or update actual third-party payment tokens; it simply records a static snapshot in the database for compliance, auditing, and for use in later order and payment history queries.\n\nThis operation references the shopping_mall_order_payment_methods table, ensuring all required fields (payment_method_type, method_data, display_name) are provided and validated. Only administrators and internal platform components are allowed to call this endpoint directly, as customers and sellers typically interact with payment methods through guided UI flows during checkout. Error handling includes validation of required fields and compliance with method-specific data formats. This operation may be paired with order/payment creation APIs for a complete order processing flow.","summary":"Create a new payment method snapshot for an order (shopping_mall_order_payment_methods).","parameters":[],"requestBody":{"description":"Information to capture a payment method snapshot for an order, including type, method data, and display name.","typeName":"IShoppingMallOrderPaymentMethod.ICreate"},"responseBody":{"description":"Details of the payment method snapshot created for the order.","typeName":"IShoppingMallOrderPaymentMethod"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/orderPaymentMethods","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing order payment method snapshot in the shopping_mall_order_payment_methods table, enabling corrections to the stored payment method information associated with a specific order. The operation targets a payment method record by its unique identifier (orderPaymentMethodId). Update operations may be needed to correct display information, update masked account data, or reflect changes in the UI/receipt post-order placement. Only administrators or privileged platform services are allowed to update payment method snapshots directly. The operation fully validates the presence and correctness of the payment method type, method data, and display name during update. It does not modify any actual external payment tokens or credentials, only the historic snapshot stored for audit on the platform.","description":"This API operation allows updating of a previously captured payment method snapshot for a specific order. The update is referenced by the unique orderPaymentMethodId path parameter, which corresponds to a record in shopping_mall_order_payment_methods.\n\nThe operation replaces (or amends) the type, data, or display-friendly label for the payment method, which may be required if administrative corrections are needed after order placement, or if UI reconciliation data needs to be adjusted for audit or compliance.\n\nSecurity considerations ensure that only admin users or privileged internal systems have access to this endpoint. The update strictly affects only the snapshot record—no changes are made to actual payment tokens or live third-party details. The response returns the complete, updated payment method snapshot record for further use. Input errors (such as an invalid ID, missing fields, or schema violations) are handled with clear, actionable error messages. Related APIs include the creation and retrieval of order payment method snapshots for audit and reconciliation flows.","summary":"Update an existing order payment method snapshot (shopping_mall_order_payment_methods).","parameters":[{"name":"orderPaymentMethodId","description":"Unique identifier of the payment method snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the order payment method snapshot, including method type, method data, and display name.","typeName":"IShoppingMallOrderPaymentMethod.IUpdate"},"responseBody":{"description":"Updated details of the order payment method snapshot.","typeName":"IShoppingMallOrderPaymentMethod"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/orderPaymentMethods/{orderPaymentMethodId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orderPaymentMethods","method":"post"},"description":"Order payment method snapshot must be created before it can be updated using its unique identifier."}]},{"specification":"This operation allows administrators to permanently remove a specific order payment method record from the system's database by specifying the unique identifier of the order payment method. It operates on the shopping_mall_order_payment_methods table, which stores a point-in-time snapshot of the payment method used for an order for audit and compliance purposes. Permanent deletion should only be performed by authorized administrators with sufficient privileges, as this data is critical for legal and financial auditing. The operation requires the orderPaymentMethodId as a path parameter. Deletion is performed as a hard delete — removing the record entirely from the database, as no 'deleted_at' soft delete field is applicable. If the payment method is referenced by existing orders or payment events, deletion may be blocked to ensure referential integrity.","path":"/shoppingMall/admin/orderPaymentMethods/{orderPaymentMethodId}","method":"delete","summary":"Permanently delete a specific order payment method snapshot by its ID (shopping_mall_order_payment_methods table)","description":"Permanently remove a single order payment method snapshot record by specifying its unique identifier. This table stores the historical payment method data associated with an order at the time of order placement, so erasing a record should only be done in exceptional circumstances—such as regulatory compliance, error correction, or full order removal by platform administration.\n\nOnly system administrators with the highest privileges are permitted to execute this operation. Before executing, the system must validate that the order payment method is not referenced by any active orders or payment records, as required by foreign key constraints to maintain referential integrity.\n\nThis is a hard delete operation: the target payment method record will be entirely deleted from the shopping_mall_order_payment_methods table and cannot be recovered. Careful event logging and audit trails must be maintained to ensure compliance and transparency in all administrative data deletion.\n\nRelated APIs include order payment method retrieval, order viewing, and any administrative audit logging endpoints. Any deletion errors, such as constraint violations, should be reported with actionable error messages and administrative notifications.\n","parameters":[{"name":"orderPaymentMethodId","description":"Unique identifier of the order payment method record to be permanently deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orderPaymentMethods","method":"post"},"description":"Order payment method snapshot must exist before it can be deleted."}]},{"specification":"This operation enables advanced, paginated search and filtering of product reviews for a specific product, operating on the shopping_mall_reviews table. Clients specify the productId in the path, supporting complex querying by review status, rating, creation date, and sort order. This API aggregates reviews for listing and moderation workflows, providing summary data for product detail pages and admin/seller dashboards.","path":"/shoppingMall/products/{productId}/reviews","method":"patch","summary":"Search and paginate product reviews for a given product (shopping_mall_reviews table)","description":"Retrieve a filtered and paginated list of customer product reviews for a given product by specifying the productId path parameter. This highly flexible endpoint supports searching reviews by status (e.g., approved, pending, rejected), star rating (1–5), creation and update timestamps, and provides rich pagination and sorting options to support large review volumes.\n\nThe operation is available to all roles: customers (for public/approved reviews), sellers (for their own product reviews with moderation data), and admins (for moderation, audit, and platform management). The response provides summaries with review rating, text snippet, author, creation date, moderation status, and attached media previews. Complex filtering supports large catalogs, abusive content moderation, and user-experience workflows such as filtering by rating, recency, or status.\n\nBusiness logic enforces review status visibility based on role and product ownership—sellers are restricted to their own products' reviews, while admins can search and filter across all statuses. Customers can only access public/approved reviews for products. Edge cases include empty result sets, out-of-bounds pages, or inappropriate filter criteria, which should be gracefully handled with clear error messages.\n","parameters":[{"name":"productId","description":"Unique identifier of the product whose reviews are being searched and retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search and filter criteria for locating product reviews, including status, star rating, creation range, sorting, and pagination parameters","typeName":"IShoppingMallReview.IRequest"},"responseBody":{"description":"Paginated list of product review summary objects matching the search criteria","typeName":"IPageIShoppingMallReview.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before searching for its reviews."}]},{"specification":"This operation retrieves the detailed information of a specific review for a given product. It operates on the shopping_mall_reviews table from the Prisma schema, which contains customer-authored product reviews including star rating, review content, moderation status, and timestamps. The request requires both the target product's ID and the specific review's ID, allowing clients to fetch verified or moderated reviews for display, audit, or customer interaction purposes. Related entities such as shopping_mall_products and shopping_mall_customers provide context about the product and the author.","description":"Retrieve the detailed information of a specific product review. This API endpoint serves to fetch all core fields of a review, such as the review text, star rating, status (pending, approved, rejected, or hidden), author, and audit timestamps. Product reviews in the shopping_mall_reviews table are uniquely identified by composite (product_id, review_id) and are always linked to a product and a customer for validation.\n\nThe operation requires both product and review identifiers as path parameters to ensure strict scoping—this prevents leaking reviews across unrelated products and supports auditability. Only reviews which exist and are related to the specified product are retrievable. Appropriate error handling is enforced for not found, mismatches, or unauthorized access cases.\n\nSecurity is generally public for product review retrieval, but if reviews are pending moderation or marked hidden, additional permission checks may be imposed by the provider logic. The underlying Prisma schema ensures one review per (customer, product, order). Responses are aligned with the IShoppingMallReview DTO, which includes all essential review and relationship fields for application consumption.","summary":"Retrieve a specific product review by product and review ID from shopping_mall_reviews.","parameters":[{"name":"productId","description":"The unique identifier of the product whose review is being requested.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"The unique identifier of the review to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information on the target product review, including rating, review body, status, author, and timestamps.","typeName":"IShoppingMallReview"},"authorizationRoles":[],"name":"at","path":"/shoppingMall/products/{productId}/reviews/{reviewId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its reviews can be retrieved"}]},{"specification":"This operation allows an authenticated customer who has completed a purchase to submit a new review for a specific product. It operates on the shopping_mall_reviews table in the Prisma schema, which enforces one review per (customer, product, order) and includes logic for verification, moderation, and audit. The review submission can include rating, body text, and optional fields such as attached images. The operation ensures business rules: only verified buyers can post; star rating must be 1-5; content guidelines are enforced at both application and moderation layers. Related entries in shopping_mall_products and shopping_mall_orders may be required for verification of purchase eligibility.","description":"Allows a customer to submit a product review and rating after a completed purchase. This endpoint validates that the customer has purchased the product and has not already reviewed this item for this order, enforcing the business rule of one review per (customer, product, order) triplet. The review includes a mandatory rating (integer 1-5), body text, and can optionally include attached image URIs.\n\nUpon submission, the review is stored in the shopping_mall_reviews table with status defaulting to pending or auto-approved per policy. Automated content moderation is applied before publication; reviews flagged for issues or policy violation are routed for admin review before appearing in the product's aggregate rating.\n\nProper authentication is required (customer role). Error handling covers duplicate reviews, policy violations, and purchase verification failures. The IShoppingMallReview.ICreate DTO describes the expected payload; the response includes the created review in normalized form for immediate display or further moderation.","summary":"Create a new review for a product in shopping_mall_reviews (customer-authored).","parameters":[{"name":"productId","description":"The unique identifier of the product being reviewed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New review submission, including rating, review body, optional images, and order reference.","typeName":"IShoppingMallReview.ICreate"},"responseBody":{"description":"The newly created product review, including all review fields and moderation status.","typeName":"IShoppingMallReview"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/products/{productId}/reviews","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before a review can be submitted"},{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist and be completed for the customer before they can submit a product review"}]},{"specification":"This operation allows a customer user to update (edit) an existing review for a particular product. It operates on the shopping_mall_reviews table in the Prisma schema. To update the review, the client must specify both the parent product's id and the target review's id in the path parameters. The request body consists of the new review data, typically including the updated rating (integer 1-5), the review body text, and any changes to review images if applicable. The system enforces business rules to ensure only the original author can edit their review and that the provided rating/body conform to platform policies (1-5 stars, body 10-2000 characters). This update is only permitted before any admin moderation lock or after the review is published (subject to business moderation rules). All updates re-set the review's status to \"pending\" if auto-moderation applies. Update events are logged for audit.\n\nSecurity is enforced: only the original customer who wrote the review may update it, and cross-account edits are denied. The request is validated that the review belongs to both the specified product and user. If a review is under moderation or has been deleted, updates are rejected.\n\nRelated API operations include POST /products/{productId}/reviews for creation and DELETE /products/{productId}/reviews/{reviewId} for removal. This update operation is a direct child of product context and is suitable for customer account user interfaces.","description":"Edit a previously posted product review. The operation is designed for customers who wish to update their feedback on products they have purchased. Each review is uniquely identified by its productId and reviewId, ensuring only the original author (reviewing customer) can edit their review.\n\nThe API operation first verifies the customer's authorship to enforce that only the initial submitter can edit their own review. If the review is not found, deleted, or does not belong to the authenticated user, an error is thrown with explanation. Review update input includes rating (1-5, integer), review body (10-2000 characters, string), and optional adjustment of review images (up to system limit, typically 5 images per review, each ≤4MB).\n\nAny modification to the rating or body resets moderation status to \"pending\" if an auto-moderation workflow applies; an email or in-app notification may inform the reviewer of status changing. Changes are logged for admin review. If a review is under forced moderation lock or was previously permanently rejected/hidden by admin, this operation is blocked with a suitable client-facing error code. The response includes the full updated review object including status, moderation state, and timestamps. Success or validation errors are returned with clear messaging.","summary":"Update a customer's review for a specific product (shopping_mall_reviews table)","parameters":[{"name":"productId","description":"Unique identifier of the product being reviewed","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New review data: updated rating, body text, and optional image URIs. Only body/rating/images may be changed; authorship and order are immutable.","typeName":"IShoppingMallReview.IUpdate"},"responseBody":{"description":"Full updated review entry with all fields, moderation status, and timestamps.","typeName":"IShoppingMallReview"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"Review must be created by the customer before it can be updated or edited. This ensures that only an existing review can be modified."}]},{"specification":"This operation allows a customer user to delete (erase) a previously submitted review associated with a product. The operation targets the shopping_mall_reviews table in the Prisma schema. The endpoint requires both the product id and review id, provided as path parameters, to identify the target review. If the review is found and belongs to the authenticated user, the operation sets the review's deleted_at field to the current timestamp (soft delete). Reviews can only be erased by their author (customer role); attempts by other roles or different customers are blocked. Reviews under moderation lock or already removed cannot be deleted again. All delete actions are logged for admin/audit tracking.\n\nThis soft delete ensures the review remains archived for audit/compliance but is hidden from general product display and excluded from aggregation. Attempts to delete a non-existent, already deleted, or unauthorized review result in error responses. The erase action triggers cache invalidation for product rating aggregates and may prompt admin notifications if required by moderation workflows.\n\nRelated operations include create (POST /products/{productId}/reviews), update (PUT /products/{productId}/reviews/{reviewId}) for editing. This erase endpoint aligns to e-commerce business requirements for customer feedback management and complies with audit data retention rules.","description":"Completely remove (soft delete) a product review previously authored by the authenticated customer. This API operation deactivates the review by setting the deleted_at flag, making it invisible on the storefront and excluded from all rating calculations and product detail listings, but retaining a record for compliance audit and potential admin moderation review.\n\nAuthorization is tightly enforced: only the original review author (customer) can perform this erase action. The endpoint checks the review's existence, ownership, and current moderation status. If the review was already deleted, an error is returned with an informative message. Attempts to delete reviews under admin moderation lock, or belonging to another customer, are denied with a clear error response. All erase operations are audit-logged for future reference.\n\nNo response body is returned on success; an HTTP 204 (No Content) is expected. This operation is critical for customer self-service controls over their feedback and aligns with best practice data retention policies for online marketplaces.","summary":"Erase (soft-delete) a customer's product review for compliance and storefront removal (shopping_mall_reviews table)","parameters":[{"name":"productId","description":"Unique identifier of the product whose review is being deleted","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the review to erase (soft delete)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"Review must be created by the customer before it can be deleted. This ensures that only an existing review can be removed."}]},{"specification":"This operation retrieves the list of images attached to a specific product review. It is associated with the shopping_mall_review_images table, providing a way for users to view all images that were uploaded as part of a particular product review. Useful for enabling detailed product impressions and transparency in customer feedback. The operation expects the identifiers for the product and the review, and returns a paginated or full list of review images referenced by the reviewId. Only publicly visible (non-soft-deleted) review images are returned. This endpoint is intended for use by any authenticated or guest user accessing reviews on the product detail page for visual context.","description":"This endpoint allows any user (including guests) to retrieve the complete set of images linked to a specific review on a product. The images serve as supplementary content to review text, enhancing authenticity and transparency for other customers considering a purchase. Each image is stored as a URI reference and includes metadata such as display order and alt text for accessibility.\n\nImages are filtered to exclude any that are soft-deleted (indicated by a non-null deleted_at in the shopping_mall_review_images schema) and are sorted by display order. The operation pulls all image records matching the given reviewId, ensuring only images visible to the public are returned. This incorporates detailed comments from the shopping_mall_review_images Prisma model, emphasizing its role as a subsidiary entity and part of broader review content management.\n\nNo authentication or authorization is required, as review images are public. However, implementation should consider safe handling of image URIs, prevention of information leakage through deleted/hidden content, and consistency with platform-wide content moderation rules.","summary":"Retrieve all images for a given product review (shopping_mall_review_images)","parameters":[{"name":"productId","description":"Target product's unique identifier (UUID) for which the review belongs","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier (UUID) of the target review whose images are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of image objects attached to the review, each containing the image URI, display order, and optional alt text","typeName":"IPageIShoppingMallReviewImage"},"authorizationRoles":[],"name":"index","path":"/shoppingMall/products/{productId}/reviews/{reviewId}/images","method":"patch","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"Review must be created before images can be attached or retrieved. This ensures reviewId exists and is valid for image association."}]},{"specification":"This operation retrieves a specific image attached to a product review, identified by the combination of productId, reviewId, and imageId. It is based on the shopping_mall_review_images table and is used to fetch detailed metadata and URI of a single review image. This supports use-cases where a client needs to preview or directly display an image in full, possibly with accessibility or attribution info. Products, reviews, and images must all exist and be linked via their respective foreign keys according to the schema.","description":"This endpoint fetches the details for a single image associated with a particular review of a product. The imageId parameter uniquely identifies the image entry within the context of the referenced review and product. Returned payload includes the URI (URL) to the uploaded image, optional alt text for accessibility, display ordering, and any other non-deleted metadata from the shopping_mall_review_images Prisma model.\n\nThe system validates that the imageId is attached to the specified reviewId and productId, ensuring no data leak or mismatched context. If the image is soft-deleted (deleted_at not null), it will not be returned and appropriate not-found or access-denied behavior is expected. The operation is public; access control is generally not required unless hosting sensitive review images (in which case additional filtering/sanitization logic may be added).\n\nThis endpoint is closely related to the list/retrieve operation for review images and is expected to be used in scenarios such as gallery lightbox previews or programmatic access for generating product pages.","summary":"Get a single review image by its ID (shopping_mall_review_images)","parameters":[{"name":"productId","description":"UUID of the product to which the review and image belong","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"UUID of the parent review record that owns the image","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"UUID for the review image to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single review image object containing the image URI, alt text, displayOrder and other metadata as defined in the model","typeName":"IShoppingMallReviewImage"},"authorizationRoles":[],"name":"at","path":"/shoppingMall/products/{productId}/reviews/{reviewId}/images/{imageId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"Review must exist before its images can be referenced. This ensures that reviewId is valid and the parent entity for imageId is present."},{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}/images","method":"post"},"description":"Review image must be created before it can be retrieved by imageId. This ensures that imageId is valid and attached to the given review."}]},{"specification":"This operation allows a customer who authored a product review to upload new images to the review. It is associated with the shopping_mall_review_images table, which stores images linked to product reviews for both content enrichment and moderation processes. Each image is associated with a specific review via productId and reviewId path parameters, ensuring that the uploaded image is correctly linked to its parent review.\n\nSecurity and authorization are strictly enforced: only the original author of the review is allowed to add images to their own review, and only for reviews that are not deleted or locked for moderation. The image may be subject to platform-specific validation rules (type, file size, content guidelines) and platform-wide moderation upon upload. Image metadata, such as alt text or display order, may be required for accessibility and presentation purposes.\n\nThis operation references the shopping_mall_products and shopping_mall_reviews tables for context and access control, enforcing one-to-many relationships between a review and its attached images. Validation rules are applied to prevent exceeding the maximum allowed number of images per review (system limit, e.g., 5 images). Any business rule violation or unauthorized attempt will result in an access denied or business validation error response. Related API operations for review image removal and full review retrieval may be used in conjunction.","description":"Allows a customer to attach new image(s) to an existing product review for visual enhancement. The operation ensures that only the review's original author can upload images, with access restricted by the review's status (e.g., active, not deleted, not rejected by moderation).\n\nIt references the shopping_mall_review_images entity in the Prisma schema, supporting up to 5 images per review by system policy. Uploaded images are validated for file type, size, and content guidelines before association. Business logic prevents uploading more images than permitted, and all new images are subject to automatic and/or manual content moderation as per platform rules.\n\nSecurity controls ensure that the image is attached only to a review authored by the requesting customer. Any attempt by a non-author or for a non-existent review triggers an error. The operation also ensures that moderation or locked reviews cannot receive new images.\n\nError scenarios include exceeding the maximum allowed images, uploading disallowed content types, or failing moderation checks. Related operations include image deletion and complete review retrieval for management of attached images.","summary":"Attach new image(s) to an existing product review as review author (shopping_mall_review_images table).","parameters":[{"name":"productId","description":"The unique identifier of the product being reviewed.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"The unique identifier of the product review to which images will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Image upload and metadata for a new review image attachment.","typeName":"IShoppingMallReviewImage.ICreate"},"responseBody":{"description":"Details of the newly uploaded review image, including URL and associated metadata.","typeName":"IShoppingMallReviewImage"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}/images","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"A product review must exist before an image can be attached to it. This ensures there is a valid review (reviewId) for associating new images."}]},{"specification":"This operation allows the review's original author to permanently delete an image previously attached to their product review. It is associated with the shopping_mall_review_images table, which maintains all images referencing product reviews. The operation ensures that only the author of the review, or an authorized admin in special circumstances, can remove the image, and only if the review and image are not locked by moderation or in a non-removable state.\n\nThe operation uses three path parameters: productId (the product being reviewed), reviewId (the review containing the image), and imageId (the specific image to be deleted). Referential integrity and permissions are checked against shopping_mall_reviews and shopping_mall_products for access control. A hard delete removes the image row from the shopping_mall_review_images table and detaches the image from any storage/CDN based on the URL.\n\nBusiness logic enforces limits; for example, images associated with reviews under moderation or with unresolved abuse reports may not be deleted without admin intervention. Attempts to delete an image not belonging to the user's review or already deleted result in access denied or not found errors. Deletion is audit-logged for moderation and compliance. Related operations include image upload and review retrieval for image management.","description":"Enables the review author to permanently remove a previously attached image from a product review. This action deletes the image reference from the shopping_mall_review_images table and, if applicable, removes the image asset from storage/CDN.\n\nAccess control restricts this operation to the review's author; admins may override only in moderation or policy violation cases as per business rules. The operation verifies the existence of the image and its linkage to the review and user before deletion. It disallows deletion for locked/restricted reviews or images already subject to moderation procedure.\n\nThe operation accepts productId, reviewId, and imageId as path parameters to specifically identify the target image. Business logic and schema constraints ensure that deletion does not violate any retention or moderation policies. Error conditions include unauthorized attempts, not found images, or trying to remove images from non-editable reviews. Deletion actions are audit-logged for platform compliance.\n\nThis endpoint complements review image upload and detail retrieval APIs to provide full review image lifecycle management for users.","summary":"Delete a specific image uploaded to a product review by the review's author (shopping_mall_review_images table).","parameters":[{"name":"productId","description":"The unique identifier of the product being reviewed.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"The unique identifier of the product review associated with the image.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"The unique identifier of the image to be deleted from the review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}/images/{imageId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}/images","method":"post"},"description":"The image must exist before it can be deleted from the review. This ensures there is a valid review image (imageId) for removal operations."}]},{"specification":"This operation retrieves a paginated list of all flags reported on a specific review for a product. Flags represent user, seller, or admin reports regarding abuse, policy violations, or other moderation triggers for a review. The underlying Prisma model is shopping_mall_review_flags, which is used as an audit trail and moderation queue for flagged reviews. This endpoint supports search, filtering (e.g., by status or reason), advanced pagination, and sorting, enabling admins and moderators to efficiently process moderation workflows across many reviews. It references relations to the parent review, the reporting actor (customer, seller, admin), and is structured to facilitate rapid lookup and workload management for moderation staff.","description":"This operation is designed to allow a platform administrator or moderator to query all flags that have been attached to a specific review on a given product. Each flag is a report of abuse, policy violation, or content moderation concern, referencing the review by reviewId and allowing moderators to view all reports in a single view.\n\nSecurity-wise, only admin or moderator users should have direct access to all flag information, as these can contain sensitive context and audit information. Customer or seller actors never have access to all flags via this endpoint; instead, they can flag reviews but cannot view the report queue.\n\nThe endpoint is closely tied to the shopping_mall_review_flags table, which maintains information such as who flagged the review, their role, the moderation status, reason code, note, and audit timestamps. Pagination, advanced query filtering by status, and ordering by creation/update time are mandatory to support operational needs. The request supports filtering for flags by status (open/resolved/rejected), submitted reason, or flagged actor type. Error handling includes validation of productId and reviewId for existence, permission checks for admin-only access, and graceful fallback for reviews without any associated flags. This endpoint is used in tandem with the single flag query API for detailed inspection of individual flag records.","summary":"Retrieve a paginated list and moderation queue of all flags for a specific product review (shopping_mall_review_flags).","parameters":[{"name":"productId","description":"Unique identifier of the target product for which the review was written, as a UUID string.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the specific product review whose flags are being queried, as a UUID string.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Flag search/filter criteria, pagination, and sorting options for review moderation workflows.","typeName":"IShoppingMallReviewFlag.IRequest"},"responseBody":{"description":"Paginated list of review flag summary objects matching criteria for the specified review, including moderation status, type, and flagger details.","typeName":"IPageIShoppingMallReviewFlag.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags","method":"post"},"description":"A review flag must exist in order to retrieve a list of flags for a specific product review. The POST operation creates a new flag, establishing the prerequisite entity needed for moderation workflows."}]},{"specification":"This operation retrieves the full detail for a single flag object as submitted against a specific review of a product. Flags in the shopping_mall_review_flags table record abuse, spam, or policy violations reported by any actor and are used by admins and moderators to perform policy review and moderation. This endpoint provides all available context for the flag, including the actor (customer/seller/admin), reason, status, notes, and audit trail fields. A unique flag is queried by its flagId under the given product and review context to ensure proper multi-key referencing and auditability.","description":"This operation fetches the complete details for a single flag that has been filed against a specific product review. A flag is a moderation or abuse report, and each is uniquely identified by flagId and associated reviewId, scoped by the parent product (productId).\n\nThe response contains all relevant information contained in the shopping_mall_review_flags record, including reporting user/seller/admin identity (by reference), status (open, resolved, rejected), submitted reason, note, timestamps, and moderation actions if any. Associated audit context is provided for investigation purposes.\n\nThis operation is strictly admin or moderator-only, given the sensitivity of flagging information and potential for containing PII or moderation annotations. Customer- and seller-facing flows never use this endpoint directly. The endpoint requires that the referenced product, review, and flag are all valid and relationally consistent; otherwise, clear 404 or permission-denied errors are provided. This endpoint is typically used from the moderation dashboard for deep-dive investigation after the paginated flag list is consulted.","summary":"Fetch all details for a specific flag record on a product review (shopping_mall_review_flags).","parameters":[{"name":"productId","description":"Unique identifier of the target product as a UUID string.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the target review as a UUID string.","schema":{"type":"string","format":"uuid"}},{"name":"flagId","description":"Unique identifier of the target flag record under the given review, as a UUID string.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All data comprising the review flag: actor, type, status, reason, note, audit trail, and timestamps for moderation.","typeName":"IShoppingMallReviewFlag"},"authorizationRole":"admin","authorizationType":null,"name":"at","path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags/{flagId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags","method":"post"},"description":"A review flag must be created before it can be retrieved by flagId. The POST operation ensures the flag entity exists for the detailed query."}]},{"specification":"This operation allows a user (customer, seller, or admin) to flag a specific product review for moderation or abuse concerns, such as suspected policy violation, spam, or offensive content. Flags are associated with the shopping_mall_review_flags table and require both the parent productId and reviewId to identify the context. The requestor provides a reason code/description to justify the flag, and optionally an internal note. Only authenticated users (customers, sellers, admins) may flag reviews, and one user can flag the same review only once (enforced by unique constraints). The system records actor details, status (open/resolved), and timestamps for full auditability. Review flags support platform moderation and help maintain quality standards by surfacing problematic reviews for admin action.","description":"Use this endpoint when a platform participant (customer, seller, or admin) wishes to report a product review for suspected abuse, spam, or policy violation. The flag is recorded in the shopping_mall_review_flags table, referencing the specific review and actor (derived from authentication context). Multiple actors may flag the same review, but a single actor can only have one open flag per review.\n\nUpon submission, the system validates the review exists and is active, and checks for any existing unresolved flags by the same user. The API enforces role-based authentication, ensures flags have a clear reason, and logs every event for audit and moderation workflows. The review owner is not notified directly, but admins and moderation tools receive notice of submitted flags for processing. Related operations include update (modifying note/status), and resolution (via admin action).\n\nSecurity considerations: Only authenticated users may flag reviews. Attempts to flag non-existent or deleted reviews return clear error messages. All flag actions are logged for moderation transparency.\n\nThe specification references the shopping_mall_review_flags table in the Prisma schema. Each flag record contains the review association, actor details (customer, seller, or admin), the reason for flagging, a note field, status (open/closed), and audit timestamps.","summary":"Flag a product review for moderation or abuse, associated with the review_flags table.","parameters":[{"name":"productId","description":"ID of the product that the review belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"ID of the review being flagged.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Flag creation details including reason for reporting and optional note.","typeName":"IShoppingMallReviewFlag.ICreate"},"responseBody":{"description":"The created review flag object, including moderation state.","typeName":"IShoppingMallReviewFlag"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}/flags","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"The review must exist before it can be flagged for moderation or abuse. This ensures the referenced reviewId is valid and associated with the specified product."}]},{"specification":"This operation allows a user (customer, seller, or admin) to flag a specific product review for moderation or abuse concerns, such as suspected policy violation, spam, or offensive content. Flags are associated with the shopping_mall_review_flags table and require both the parent productId and reviewId to identify the context. The requestor provides a reason code/description to justify the flag, and optionally an internal note. Only authenticated users (customers, sellers, admins) may flag reviews, and one user can flag the same review only once (enforced by unique constraints). The system records actor details, status (open/resolved), and timestamps for full auditability. Review flags support platform moderation and help maintain quality standards by surfacing problematic reviews for admin action.","description":"Use this endpoint when a platform participant (customer, seller, or admin) wishes to report a product review for suspected abuse, spam, or policy violation. The flag is recorded in the shopping_mall_review_flags table, referencing the specific review and actor (derived from authentication context). Multiple actors may flag the same review, but a single actor can only have one open flag per review.\n\nUpon submission, the system validates the review exists and is active, and checks for any existing unresolved flags by the same user. The API enforces role-based authentication, ensures flags have a clear reason, and logs every event for audit and moderation workflows. The review owner is not notified directly, but admins and moderation tools receive notice of submitted flags for processing. Related operations include update (modifying note/status), and resolution (via admin action).\n\nSecurity considerations: Only authenticated users may flag reviews. Attempts to flag non-existent or deleted reviews return clear error messages. All flag actions are logged for moderation transparency.\n\nThe specification references the shopping_mall_review_flags table in the Prisma schema. Each flag record contains the review association, actor details (customer, seller, or admin), the reason for flagging, a note field, status (open/closed), and audit timestamps.","summary":"Flag a product review for moderation or abuse, associated with the review_flags table.","parameters":[{"name":"productId","description":"ID of the product that the review belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"ID of the review being flagged.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Flag creation details including reason for reporting and optional note.","typeName":"IShoppingMallReviewFlag.ICreate"},"responseBody":{"description":"The created review flag object, including moderation state.","typeName":"IShoppingMallReviewFlag"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/seller/products/{productId}/reviews/{reviewId}/flags","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"Review must exist before it can be flagged for moderation. The review referenced by reviewId must be created prior to flagging it."}]},{"specification":"This operation allows a user (customer, seller, or admin) to flag a specific product review for moderation or abuse concerns, such as suspected policy violation, spam, or offensive content. Flags are associated with the shopping_mall_review_flags table and require both the parent productId and reviewId to identify the context. The requestor provides a reason code/description to justify the flag, and optionally an internal note. Only authenticated users (customers, sellers, admins) may flag reviews, and one user can flag the same review only once (enforced by unique constraints). The system records actor details, status (open/resolved), and timestamps for full auditability. Review flags support platform moderation and help maintain quality standards by surfacing problematic reviews for admin action.","description":"Use this endpoint when a platform participant (customer, seller, or admin) wishes to report a product review for suspected abuse, spam, or policy violation. The flag is recorded in the shopping_mall_review_flags table, referencing the specific review and actor (derived from authentication context). Multiple actors may flag the same review, but a single actor can only have one open flag per review.\n\nUpon submission, the system validates the review exists and is active, and checks for any existing unresolved flags by the same user. The API enforces role-based authentication, ensures flags have a clear reason, and logs every event for audit and moderation workflows. The review owner is not notified directly, but admins and moderation tools receive notice of submitted flags for processing. Related operations include update (modifying note/status), and resolution (via admin action).\n\nSecurity considerations: Only authenticated users may flag reviews. Attempts to flag non-existent or deleted reviews return clear error messages. All flag actions are logged for moderation transparency.\n\nThe specification references the shopping_mall_review_flags table in the Prisma schema. Each flag record contains the review association, actor details (customer, seller, or admin), the reason for flagging, a note field, status (open/closed), and audit timestamps.","summary":"Flag a product review for moderation or abuse, associated with the review_flags table.","parameters":[{"name":"productId","description":"ID of the product that the review belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"ID of the review being flagged.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Flag creation details including reason for reporting and optional note.","typeName":"IShoppingMallReviewFlag.ICreate"},"responseBody":{"description":"The created review flag object, including moderation state.","typeName":"IShoppingMallReviewFlag"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"A product review must exist before it can be flagged for moderation or abuse. The /reviews POST operation creates the review entity referred to by reviewId."}]},{"specification":"Update an existing product review flag to change note or status. This operation is for moderation workflows and allows an admin or the original actor to add internal notes, update the moderation status (open, resolved, rejected), or provide audit explanations. The operation targets a specific flag by its parent productId, reviewId, and the flag's own flagId. It strictly references the shopping_mall_review_flags table from the Prisma schema.","description":"This operation lets an authorized user (primarily admin, but also original flagger) modify details of a product review flag, such as changing the note or updating the workflow status (for example, to 'resolved' or 'rejected' after moderation review). Each flag is uniquely identified by productId, reviewId, and flagId.\n\nSecurity: Only the flag creator or platform moderators/admins can update a flag's note or status. Attempts to update a non-existent or closed flag are rejected with an appropriate error. Changes are always fully audited and tracked for compliance.\n\nOn successful update, the system logs the event, re-validates business rules (e.g., status transition logic), and notifies relevant actors if escalation is required. This endpoint references the shopping_mall_review_flags table in the Prisma schema, where each flag includes actor, note, current status, and audit fields.","summary":"Update a review flag's note or moderation status by flagId, for compliance and moderation workflows.","parameters":[{"name":"productId","description":"ID of the product associated with the review and flag.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"ID of the review being flagged.","schema":{"type":"string","format":"uuid"}},{"name":"flagId","description":"ID of the specific review flag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: note text or status value.","typeName":"IShoppingMallReviewFlag.IUpdate"},"responseBody":{"description":"The updated review flag with latest note and status.","typeName":"IShoppingMallReviewFlag"},"authorizationRoles":["admin","customer","seller"],"name":"update","path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags/{flagId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags","method":"post"},"description":"A review flag must exist before it can be updated. The /flags POST operation creates the flag entity identified by flagId."}]},{"specification":"Update an existing product review flag to change note or status. This operation is for moderation workflows and allows an admin or the original actor to add internal notes, update the moderation status (open, resolved, rejected), or provide audit explanations. The operation targets a specific flag by its parent productId, reviewId, and the flag's own flagId. It strictly references the shopping_mall_review_flags table from the Prisma schema.","description":"This operation lets an authorized user (primarily admin, but also original flagger) modify details of a product review flag, such as changing the note or updating the workflow status (for example, to 'resolved' or 'rejected' after moderation review). Each flag is uniquely identified by productId, reviewId, and flagId.\n\nSecurity: Only the flag creator or platform moderators/admins can update a flag's note or status. Attempts to update a non-existent or closed flag are rejected with an appropriate error. Changes are always fully audited and tracked for compliance.\n\nOn successful update, the system logs the event, re-validates business rules (e.g., status transition logic), and notifies relevant actors if escalation is required. This endpoint references the shopping_mall_review_flags table in the Prisma schema, where each flag includes actor, note, current status, and audit fields.","summary":"Update a review flag's note or moderation status by flagId, for compliance and moderation workflows.","parameters":[{"name":"productId","description":"ID of the product associated with the review and flag.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"ID of the review being flagged.","schema":{"type":"string","format":"uuid"}},{"name":"flagId","description":"ID of the specific review flag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: note text or status value.","typeName":"IShoppingMallReviewFlag.IUpdate"},"responseBody":{"description":"The updated review flag with latest note and status.","typeName":"IShoppingMallReviewFlag"},"authorizationRoles":["admin","customer","seller"],"name":"update","path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}/flags/{flagId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews/{reviewId}/flags","method":"post"},"description":"The review flag must exist before it can be updated. Creation of a review flag is required to have a valid flagId to update its note or status."}]},{"specification":"Update an existing product review flag to change note or status. This operation is for moderation workflows and allows an admin or the original actor to add internal notes, update the moderation status (open, resolved, rejected), or provide audit explanations. The operation targets a specific flag by its parent productId, reviewId, and the flag's own flagId. It strictly references the shopping_mall_review_flags table from the Prisma schema.","description":"This operation lets an authorized user (primarily admin, but also original flagger) modify details of a product review flag, such as changing the note or updating the workflow status (for example, to 'resolved' or 'rejected' after moderation review). Each flag is uniquely identified by productId, reviewId, and flagId.\n\nSecurity: Only the flag creator or platform moderators/admins can update a flag's note or status. Attempts to update a non-existent or closed flag are rejected with an appropriate error. Changes are always fully audited and tracked for compliance.\n\nOn successful update, the system logs the event, re-validates business rules (e.g., status transition logic), and notifies relevant actors if escalation is required. This endpoint references the shopping_mall_review_flags table in the Prisma schema, where each flag includes actor, note, current status, and audit fields.","summary":"Update a review flag's note or moderation status by flagId, for compliance and moderation workflows.","parameters":[{"name":"productId","description":"ID of the product associated with the review and flag.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"ID of the review being flagged.","schema":{"type":"string","format":"uuid"}},{"name":"flagId","description":"ID of the specific review flag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: note text or status value.","typeName":"IShoppingMallReviewFlag.IUpdate"},"responseBody":{"description":"The updated review flag with latest note and status.","typeName":"IShoppingMallReviewFlag"},"authorizationRoles":["admin","customer","seller"],"name":"update","path":"/shoppingMall/seller/products/{productId}/reviews/{reviewId}/flags/{flagId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/reviews/{reviewId}/flags","method":"post"},"description":"The review flag must exist before it can be updated. Creation of a review flag is required to have a valid flagId to update its note or status."}]},{"specification":"This operation permanently removes a review flag from a specific product review. It operates on the shopping_mall_review_flags table in the Prisma schema. The flag represents a user, seller, or admin-initiated report for abuse, spam, or policy violation on a product review. Deleting a flag is typically performed as part of moderation workflows, allowing administrative users to clear resolved or incorrect reports. The flag is identified by its unique flagId, corresponding to the reviewId for a specific productId.\n\nOnly authorized moderators or administrators should be permitted to delete review flags. Deletion here completely removes the flag record from the database (hard delete), as indicated by the absence of a soft-delete column on this table. Business rules should ensure that deleting a flag does not impact ongoing moderation processes or audit trails elsewhere in the system.\n\nThis operation is most often used in conjunction with review moderation endpoints, such as listing review flags for moderation action or updating review status. Proper error handling must ensure that attempts to delete non-existent flags, or flags not associated with the indicated product or review, result in meaningful error responses.","description":"This API allows an administrator to permanently delete a single review flag on a specified product review. The review flag (from shopping_mall_review_flags) is a record that indicates a report of abuse, spam, or other violations for a given review, and is uniquely identified by a flagId within the context of a particular productId and reviewId.\n\nIn practical scenarios, administrators utilize this endpoint after resolving the flag or determining that the report was in error. Only users with admin or moderation privileges should be able to invoke this operation, as deleting review flags may impact future audit and reporting capability.\n\nThe operation completely removes the review flag record from the database. There is no soft deletion for this table. This ensures that resolved or incorrect flags do not clutter moderation dashboards or analytics. When performing this action, the system should confirm the flag exists for the specified productId and reviewId combination before deletion.\n\nRelated endpoints include listing review flags for moderation, updating review statuses, and other administrative moderation tools. Appropriate access control and logging should be implemented to capture deletions for platform compliance.","summary":"Permanently delete (hard delete) a review flag for a product review (shopping_mall_review_flags)","parameters":[{"name":"productId","description":"Unique identifier for the target product containing the review.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier for the review to which the flag is attached.","schema":{"type":"string","format":"uuid"}},{"name":"flagId","description":"Unique identifier for the review flag to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags/{flagId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/flags","method":"post"},"description":"Review flag must exist before it can be deleted. Creating the flag ensures the flagId is valid and present for removal."}]},{"specification":"Retrieves a paginated list of seller or admin replies to a specific product review. This operation works on the shopping_mall_review_replies table in the Prisma schema. Each review can have one reply from a seller and/or one from an admin, but replies can be filtered, sorted, and paginated for moderation, audit, or display purposes. This endpoint supports advanced filtering by reply author (seller/admin), reply status (public/hidden), creation time, and more as required by moderation or display business logic.\n\nThe main use case is for admin users managing moderation workflow for replies—viewing all replies, reviewing their current status, or preparing for bulk updates. Security considerations ensure that only authorized admin or moderation roles can access all replies, while sellers may be limited to their own reply (or none at all) unless further filtered. The response returns a paginated result including all fields required for moderation and UI presentation.\n\nThis operation may be combined with endpoints to create, update, or delete replies on reviews. It enables comprehensive auditing and management of review replies. Proper error handling is required for invalid review or product references, lack of permissions, or filtering criteria that result in empty results.","description":"This endpoint returns a paginated, filterable list of all replies (seller or admin) attached to a specific review for a product. Each reply is stored in the shopping_mall_review_replies table, linking to the parent review by reviewId and productId. Replies can be authored by either a seller or an admin, and the list can be filtered by author type, reply status, or date range for moderation and audit scenarios.\n\nThis operation is most frequently utilized by administrators to audit seller/admin replies, handle moderation queues for flagged or hidden replies, or prepare reply data for presentation in administrative UI dashboards. Typical filters include reply status (public vs. hidden), author (seller vs. admin), and time frame. Pagination ensures performance and scalability.\n\nAccess should be restricted to administrators or moderators with permission to manage review replies. Business logic should enforce that only replies for the specific reviewId of the product are returned, and error handling addresses both missing and invalid references. This operation is often combined with endpoints to create, update, or erase replies, forming a comprehensive suite for review moderation.","summary":"List and filter seller/admin replies for a given product review (shopping_mall_review_replies)","parameters":[{"name":"productId","description":"Unique identifier for the product containing the review.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier for the target review.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Optional filter, search, and pagination criteria for review replies attached to the specified review. Filters may include author type, reply status, date range, search text, and paging parameters as required by business rules and moderation needs.","typeName":"IShoppingMallReviewReply.IRequest"},"responseBody":{"description":"Paginated list of all replies (seller or admin) to the specified product review, including metadata for moderation, sorting, and UI presentation.","typeName":"IPageIShoppingMallReviewReply"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/replies","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/replies","method":"post"},"description":"At least one reply must be created for the review before replies can be listed or filtered. Creating a reply guarantees that the specified reviewId for the productId has associated replies in the system."}]},{"specification":"This operation retrieves a specific reply to a product review in the shopping mall e-commerce platform. It uses the review and reply IDs to find the exact reply, which is linked to the associated product and review. The operation draws on the shopping_mall_review_replies table in the Prisma schema, which represents public replies made by sellers or admins to customer product reviews, each with details like body, status, and author information.\n\nThe API is designed for all authenticated users to view seller or admin replies to any given product review. Permissions ensure the reply is visible according to its status (public or hidden) and as appropriate for the requesting user. This endpoint supports transparency and trust for reviews on product detail pages.\n\nThe relationship to other entities includes the product and review being replied to, as enforced by foreign keys in shopping_mall_review_replies (linking to shopping_mall_reviews, which further links to shopping_mall_products). The operation is a simple read and never exposes hidden or deleted replies to unauthorized users. Error handling returns 404 if the resource is not found or unauthorized if the reply is not visible due to status or permissions. This operation is commonly used in conjunction with listing product reviews and retrieving product details.","description":"This endpoint allows users to read a specific reply posted by a seller or administrator to a particular product review. Reply lookups are strictly keyed by productId, reviewId, and replyId. The operation validates all three IDs and ensures referential integrity among product, review, and reply, returning 404 if any link in the chain is missing. Replies that are not public may only be visible to the original author, associated admin, or seller.\n\nSecurity checks consider the status field on review replies to enforce access control, only allowing 'public' replies for general viewing. If a reply has been hidden or deleted (indicated by the deleted_at column in the Prisma schema), the endpoint will also return 404, enforcing non-disclosure of hidden moderation artifacts.\n\nBusiness logic ensures that this endpoint supports transparency in review moderation, providing immediate availability of seller/admin replies inline on product pages or review timelines. Error handling ensures clients are informed of both invalid references and permission-based constraints with specific error messages and codes. This endpoint supports regulatory and trust needs for e-commerce platforms by making moderation and seller feedback transparent to customers.","summary":"Retrieve details of a single review reply under a specific product review from shopping_mall_review_replies table.","parameters":[{"name":"productId","description":"Unique identifier of the product associated with the review and reply.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the target review being replied to.","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to the review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the seller/admin reply to a product review, including author, body, status, timestamps, and link to the underlying review and product.","typeName":"IShoppingMallReviewReply"},"authorizationRole":null,"authorizationType":null,"path":"/shoppingMall/products/{productId}/reviews/{reviewId}/replies/{replyId}","method":"get","name":"at","prerequisites":[]},{"specification":"This operation allows a seller or admin to create a new public or private reply to a specific customer review on a given product. The reply is recorded in the shopping_mall_review_replies table as defined in the Prisma schema, which requires association to a product review, reply body, status (public/hidden), and the author (seller/admin).\n\nAccount permission is checked to ensure only authenticated sellers of the product or admins can create replies. Each review can have one reply per responder (enforced by a unique constraint on reviewId and author in the schema). This operation enforces appropriate moderation and transparency, supporting customer communication policies for e-commerce platforms. Validation also ensures the review being replied to exists and is linked to the specified product. On success, the full details of the reply are returned.","description":"This endpoint permits authorized sellers or admins to post a reply to a customer review on their product. On submission, the reply is validated for maximum body length, normative status values (public/hidden), and ownership by the acting seller or admin. Only one reply per review per responder is permitted, preventing duplicate entries as enforced by schema constraints.\n\nThe operation requires the review being replied to exist for the specified product, enforcing referential integrity and protecting against orphaned reply records. If the acting user does not have permission to reply (e.g., not the seller/admin of the product), access is denied. The reply status determines its initial visibility to users—'public' for customer-visible replies, 'hidden' for internal/admin-only replies.\n\nBusiness logic includes notification triggers for the original review author upon reply, and audit logging for moderation. Error handling provides actionable error codes/messages for permission, validation, or referential integrity failures.","summary":"Create a new reply to a product review (by seller or admin) in shopping_mall_review_replies table.","parameters":[{"name":"productId","description":"Unique identifier of the product associated with the review.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the review being replied to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reply content and status for the new reply to a review. Body must satisfy length and content requirements. Status field controls reply visibility (public or hidden).","typeName":"IShoppingMallReviewReply.ICreate"},"responseBody":{"description":"Details of the newly created review reply, including ID, timestamps, author, and associations to the product and review.","typeName":"IShoppingMallReviewReply"},"authorizationRole":"seller","authorizationType":null,"path":"/shoppingMall/seller/products/{productId}/reviews/{reviewId}/replies","method":"post","name":"create","prerequisites":[]},{"specification":"This operation allows a seller or admin to create a new public or private reply to a specific customer review on a given product. The reply is recorded in the shopping_mall_review_replies table as defined in the Prisma schema, which requires association to a product review, reply body, status (public/hidden), and the author (seller/admin).\n\nAccount permission is checked to ensure only authenticated sellers of the product or admins can create replies. Each review can have one reply per responder (enforced by a unique constraint on reviewId and author in the schema). This operation enforces appropriate moderation and transparency, supporting customer communication policies for e-commerce platforms. Validation also ensures the review being replied to exists and is linked to the specified product. On success, the full details of the reply are returned.","description":"This endpoint permits authorized sellers or admins to post a reply to a customer review on their product. On submission, the reply is validated for maximum body length, normative status values (public/hidden), and ownership by the acting seller or admin. Only one reply per review per responder is permitted, preventing duplicate entries as enforced by schema constraints.\n\nThe operation requires the review being replied to exist for the specified product, enforcing referential integrity and protecting against orphaned reply records. If the acting user does not have permission to reply (e.g., not the seller/admin of the product), access is denied. The reply status determines its initial visibility to users—'public' for customer-visible replies, 'hidden' for internal/admin-only replies.\n\nBusiness logic includes notification triggers for the original review author upon reply, and audit logging for moderation. Error handling provides actionable error codes/messages for permission, validation, or referential integrity failures.","summary":"Create a new reply to a product review (by seller or admin) in shopping_mall_review_replies table.","parameters":[{"name":"productId","description":"Unique identifier of the product associated with the review.","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the review being replied to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reply content and status for the new reply to a review. Body must satisfy length and content requirements. Status field controls reply visibility (public or hidden).","typeName":"IShoppingMallReviewReply.ICreate"},"responseBody":{"description":"Details of the newly created review reply, including ID, timestamps, author, and associations to the product and review.","typeName":"IShoppingMallReviewReply"},"authorizationRole":"admin","authorizationType":null,"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/replies","method":"post","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/reviews","method":"post"},"description":"The review must exist before a reply can be created for it. A customer review for the given product and reviewId must already be created before a seller/admin can reply to it."}]},{"specification":"This operation updates an existing seller or admin reply to a product review. It works on the shopping_mall_review_replies table, which supports one reply per review per responder and tracks visibility, body, and audit data. The update can only be performed by the author of the reply (seller or admin) and must pass validation for reply content standards. Modifying the reply updates the updated_at timestamp and may trigger moderation or notification logic per business rules. Hard or soft deletion is not involved here, only in-place update to the reply body or status. This operation does not allow modifications by customers or to replies not owned by the acting actor.","description":"This operation allows an authorized seller or admin to update their reply to a specific product review. The reply is uniquely identified by the replyId within the context of the given productId and reviewId path parameters, as enforced by the Prisma schema shopping_mall_review_replies. The reply content (body) and reply visibility status (public/hidden) must be validated: the body cannot be empty or exceed business-configured maximum length. Status transitions are subject to moderation logic per business rules in the reviews and ratings module. \n\nOnly the authoring seller or admin can update their own replies, and attempts to edit others' replies will result in permission denial. The operation also updates the updated_at timestamp and may trigger associated audit or moderation events. Related audit logs or events are updated in subsystems as described in the schema. \n\nCommon errors include attempting to update a deleted reply, editing if not the original author (based on authenticated identity), or submitting invalid reply content. The typical workflow is for a seller or admin to use their dashboard to locate a reply and update its content or status as required, with transactional guarantees enforced by the reviews subsystem.","summary":"Update a seller or admin's reply to a specific product review reply (shopping_mall_review_replies table).","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the target product review","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the review reply to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated reply information including body text and (optionally) new status; must meet reply content validation rules","typeName":"IShoppingMallReviewReply.IUpdate"},"responseBody":{"description":"The full details of the updated review reply, including new body content, timestamps, and status","typeName":"IShoppingMallReviewReply"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/products/{productId}/reviews/{reviewId}/replies/{replyId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/replies","method":"post"},"description":"The review reply must exist before it can be updated. A reply to the review (by seller or admin) for this product and review must be created prior to its update."}]},{"specification":"This operation updates an existing seller or admin reply to a product review. It works on the shopping_mall_review_replies table, which supports one reply per review per responder and tracks visibility, body, and audit data. The update can only be performed by the author of the reply (seller or admin) and must pass validation for reply content standards. Modifying the reply updates the updated_at timestamp and may trigger moderation or notification logic per business rules. Hard or soft deletion is not involved here, only in-place update to the reply body or status. This operation does not allow modifications by customers or to replies not owned by the acting actor.","description":"This operation allows an authorized seller or admin to update their reply to a specific product review. The reply is uniquely identified by the replyId within the context of the given productId and reviewId path parameters, as enforced by the Prisma schema shopping_mall_review_replies. The reply content (body) and reply visibility status (public/hidden) must be validated: the body cannot be empty or exceed business-configured maximum length. Status transitions are subject to moderation logic per business rules in the reviews and ratings module. \n\nOnly the authoring seller or admin can update their own replies, and attempts to edit others' replies will result in permission denial. The operation also updates the updated_at timestamp and may trigger associated audit or moderation events. Related audit logs or events are updated in subsystems as described in the schema. \n\nCommon errors include attempting to update a deleted reply, editing if not the original author (based on authenticated identity), or submitting invalid reply content. The typical workflow is for a seller or admin to use their dashboard to locate a reply and update its content or status as required, with transactional guarantees enforced by the reviews subsystem.","summary":"Update a seller or admin's reply to a specific product review reply (shopping_mall_review_replies table).","parameters":[{"name":"productId","description":"Unique identifier of the target product","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the target product review","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the review reply to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated reply information including body text and (optionally) new status; must meet reply content validation rules","typeName":"IShoppingMallReviewReply.IUpdate"},"responseBody":{"description":"The full details of the updated review reply, including new body content, timestamps, and status","typeName":"IShoppingMallReviewReply"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/replies/{replyId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/replies","method":"post"},"description":"A review reply must exist before it can be updated. This ensures the reply identified by replyId is present for modification."}]},{"specification":"This operation permanently deletes a seller or admin reply to a product review. It acts on the shopping_mall_review_replies table, where each reply is uniquely tied to a review and an actor (seller or admin). Deletion is a hard delete: the reply record is removed from the database, making it irrecoverable. Only the reply's creator (seller or admin) or a platform admin may perform this operation. Deleting a reply logs an event for moderation/audit and may affect visibility of associated customer reviews in the product review module.","description":"This operation allows an authorized seller or admin to permanently delete their reply to a product review. The reply is identified by the replyId in the context of the given productId and reviewId as enforced by the Prisma schema shopping_mall_review_replies. Deletion is a hard removal of the reply record from the database. Only the reply author (seller or admin) or a platform admin may perform deletion; attempts by other users will result in permission errors. \n\nOn successful deletion, the reply is no longer retrievable, and business logic may update moderation or audit logs for transparency, as described in the reviews and ratings and admin requirements. Deleting a non-existent or already-deleted reply results in an error. \n\nThis operation does not accept a request body and does not return a response body beyond standard deletion status.","summary":"Permanently delete a seller or admin's reply to a product review (hard delete in shopping_mall_review_replies).","parameters":[{"name":"productId","description":"Unique identifier of the product containing the review","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the product review","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the review reply to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/products/{productId}/reviews/{reviewId}/replies/{replyId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/reviews/{reviewId}/replies","method":"post"},"description":"A review reply must be created before it can be deleted. This guarantees that the replyId references an existing reply record eligible for removal."}]},{"specification":"This operation permanently deletes a seller or admin reply to a product review. It acts on the shopping_mall_review_replies table, where each reply is uniquely tied to a review and an actor (seller or admin). Deletion is a hard delete: the reply record is removed from the database, making it irrecoverable. Only the reply's creator (seller or admin) or a platform admin may perform this operation. Deleting a reply logs an event for moderation/audit and may affect visibility of associated customer reviews in the product review module.","description":"This operation allows an authorized seller or admin to permanently delete their reply to a product review. The reply is identified by the replyId in the context of the given productId and reviewId as enforced by the Prisma schema shopping_mall_review_replies. Deletion is a hard removal of the reply record from the database. Only the reply author (seller or admin) or a platform admin may perform deletion; attempts by other users will result in permission errors. \n\nOn successful deletion, the reply is no longer retrievable, and business logic may update moderation or audit logs for transparency, as described in the reviews and ratings and admin requirements. Deleting a non-existent or already-deleted reply results in an error. \n\nThis operation does not accept a request body and does not return a response body beyond standard deletion status.","summary":"Permanently delete a seller or admin's reply to a product review (hard delete in shopping_mall_review_replies).","parameters":[{"name":"productId","description":"Unique identifier of the product containing the review","schema":{"type":"string","format":"uuid"}},{"name":"reviewId","description":"Unique identifier of the product review","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the review reply to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/replies/{replyId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/reviews/{reviewId}/replies","method":"post"},"description":"The review reply must exist before it can be deleted; creation of the reply is necessary for the delete operation to succeed."}]},{"specification":"Retrieve a paginated, filterable list of order history snapshots for customers, sellers, or admins. Operates on the shopping_mall_order_histories table, supporting advanced search for customer service audits, self-service order tracking, refund/cancellation reviews, and legal compliance. Query parameters support filtering by snapshot type (e.g., cancellation, refund, escalation), order status at time of event, creation date, actor role, and reason codes. Results are sorted by most recent history by default, and can be filtered by order ID or actor context. Integrates with user-facing order journey and admin audit flows. Returns paginated records each containing the full audit snapshot.","path":"/shoppingMall/admin/orderHistories","method":"patch","summary":"Search, filter, and paginate order history snapshots for customer service and auditing.","description":"Retrieve a paginated list of historical snapshots for orders across the shopping mall platform, utilizing the shopping_mall_order_histories table. This operation exposes advanced search and filtering capabilities for order cancellation, refund, escalation, or compliance snapshot records, which enable users and administrators to trace actions and reconstruct an order's timeline.\n\nThe endpoint supports query parameters to filter by snapshot type (such as 'cancellation', 'refund', 'escalation', or 'appeal'), current or historical order status, date range, and initiator. Customers will only be able to access their own order histories, while sellers may view histories related to their fulfillments, and admins may audit all records regardless of ownership. Search results are presented in descending date order for transparency.\n\nAccess is governed by role-based permissions, with customers restricted to self-service, sellers to the orders they are responsible for, and admins having full search/audit coverage. Results reflect the complete audit/timepoint context for each service milestone as defined by the schema.","parameters":[],"requestBody":{"description":"Search/filtering criteria for retrieving order history snapshots, including snapshot type, order status, actor info, and pagination controls.","typeName":"IShoppingMallOrderHistory.IRequest"},"responseBody":{"description":"Paginated list of order history snapshot summary records meeting the search and filter criteria.","typeName":"IPageIShoppingMallOrderHistory.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"There must be an order record created before any order history snapshots can exist or be queried."}]},{"specification":"Retrieve a paginated, filterable list of order history snapshots for customers, sellers, or admins. Operates on the shopping_mall_order_histories table, supporting advanced search for customer service audits, self-service order tracking, refund/cancellation reviews, and legal compliance. Query parameters support filtering by snapshot type (e.g., cancellation, refund, escalation), order status at time of event, creation date, actor role, and reason codes. Results are sorted by most recent history by default, and can be filtered by order ID or actor context. Integrates with user-facing order journey and admin audit flows. Returns paginated records each containing the full audit snapshot.","path":"/shoppingMall/seller/orderHistories","method":"patch","summary":"Search, filter, and paginate order history snapshots for customer service and auditing.","description":"Retrieve a paginated list of historical snapshots for orders across the shopping mall platform, utilizing the shopping_mall_order_histories table. This operation exposes advanced search and filtering capabilities for order cancellation, refund, escalation, or compliance snapshot records, which enable users and administrators to trace actions and reconstruct an order's timeline.\n\nThe endpoint supports query parameters to filter by snapshot type (such as 'cancellation', 'refund', 'escalation', or 'appeal'), current or historical order status, date range, and initiator. Customers will only be able to access their own order histories, while sellers may view histories related to their fulfillments, and admins may audit all records regardless of ownership. Search results are presented in descending date order for transparency.\n\nAccess is governed by role-based permissions, with customers restricted to self-service, sellers to the orders they are responsible for, and admins having full search/audit coverage. Results reflect the complete audit/timepoint context for each service milestone as defined by the schema.","parameters":[],"requestBody":{"description":"Search/filtering criteria for retrieving order history snapshots, including snapshot type, order status, actor info, and pagination controls.","typeName":"IShoppingMallOrderHistory.IRequest"},"responseBody":{"description":"Paginated list of order history snapshot summary records meeting the search and filter criteria.","typeName":"IPageIShoppingMallOrderHistory.ISummary"},"authorizationType":null,"authorizationRole":"seller","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its historical snapshots can be indexed or filtered by sellers. Orders are required as the source entities from which order histories are generated in the audit trail."}]},{"specification":"Retrieve a paginated, filterable list of order history snapshots for customers, sellers, or admins. Operates on the shopping_mall_order_histories table, supporting advanced search for customer service audits, self-service order tracking, refund/cancellation reviews, and legal compliance. Query parameters support filtering by snapshot type (e.g., cancellation, refund, escalation), order status at time of event, creation date, actor role, and reason codes. Results are sorted by most recent history by default, and can be filtered by order ID or actor context. Integrates with user-facing order journey and admin audit flows. Returns paginated records each containing the full audit snapshot.","path":"/shoppingMall/customer/orderHistories","method":"patch","summary":"Search, filter, and paginate order history snapshots for customer service and auditing.","description":"Retrieve a paginated list of historical snapshots for orders across the shopping mall platform, utilizing the shopping_mall_order_histories table. This operation exposes advanced search and filtering capabilities for order cancellation, refund, escalation, or compliance snapshot records, which enable users and administrators to trace actions and reconstruct an order's timeline.\n\nThe endpoint supports query parameters to filter by snapshot type (such as 'cancellation', 'refund', 'escalation', or 'appeal'), current or historical order status, date range, and initiator. Customers will only be able to access their own order histories, while sellers may view histories related to their fulfillments, and admins may audit all records regardless of ownership. Search results are presented in descending date order for transparency.\n\nAccess is governed by role-based permissions, with customers restricted to self-service, sellers to the orders they are responsible for, and admins having full search/audit coverage. Results reflect the complete audit/timepoint context for each service milestone as defined by the schema.","parameters":[],"requestBody":{"description":"Search/filtering criteria for retrieving order history snapshots, including snapshot type, order status, actor info, and pagination controls.","typeName":"IShoppingMallOrderHistory.IRequest"},"responseBody":{"description":"Paginated list of order history snapshot summary records meeting the search and filter criteria.","typeName":"IPageIShoppingMallOrderHistory.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before its historical snapshots can be indexed or filtered by customers. Orders serve as the parent resource providing context for retrieving associated audit history records."}]},{"specification":"Retrieve a detailed order history snapshot for a given unique order history ID. Operates on the shopping_mall_order_histories table and exposes all audit, snapshot, and reason fields for that event. Used for audit/audit trail, customer order timeline view, and escalation resolution. Returns the immutable state of an order as it was at the customer service event (e.g., cancellation, refund, escalation) for full transparency and traceability.","path":"/shoppingMall/admin/orderHistories/{orderHistoryId}","method":"get","summary":"Retrieve a specific order history snapshot by its unique ID.","description":"Fetch the full detail for a single order history snapshot from the shopping_mall_order_histories table, referenced by its unique orderHistoryId. This endpoint is designed for scenarios where users, sellers, or administrators need to review the exact state of an order at a service milestone—such as a cancellation, refund, or appeal event.\n\nUpon providing the orderHistoryId, the operation returns all stored audit, reason, and context information for that milestone, including total order amount, status, and any business or compliance comments. This detail can support customer self-service, seller dispute workflows, or admin legal review. Access is strictly enforced based on role and ownership: customers may retrieve only their own order events, sellers only for their fulfillments, admins for any history entry. Error responses are provided if the ID does not exist or access is denied.","parameters":[{"name":"orderHistoryId","description":"Unique identifier for the target order history snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot of the order at the specified audit milestone, including status, total, and comment.","typeName":"IShoppingMallOrderHistory"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"An order must be created by a customer before an order history snapshot for that order can exist (required for retrieving any orderHistoryId)."}]},{"specification":"Retrieve a detailed order history snapshot for a given unique order history ID. Operates on the shopping_mall_order_histories table and exposes all audit, snapshot, and reason fields for that event. Used for audit/audit trail, customer order timeline view, and escalation resolution. Returns the immutable state of an order as it was at the customer service event (e.g., cancellation, refund, escalation) for full transparency and traceability.","path":"/shoppingMall/seller/orderHistories/{orderHistoryId}","method":"get","summary":"Retrieve a specific order history snapshot by its unique ID.","description":"Fetch the full detail for a single order history snapshot from the shopping_mall_order_histories table, referenced by its unique orderHistoryId. This endpoint is designed for scenarios where users, sellers, or administrators need to review the exact state of an order at a service milestone—such as a cancellation, refund, or appeal event.\n\nUpon providing the orderHistoryId, the operation returns all stored audit, reason, and context information for that milestone, including total order amount, status, and any business or compliance comments. This detail can support customer self-service, seller dispute workflows, or admin legal review. Access is strictly enforced based on role and ownership: customers may retrieve only their own order events, sellers only for their fulfillments, admins for any history entry. Error responses are provided if the ID does not exist or access is denied.","parameters":[{"name":"orderHistoryId","description":"Unique identifier for the target order history snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot of the order at the specified audit milestone, including status, total, and comment.","typeName":"IShoppingMallOrderHistory"},"authorizationType":null,"authorizationRole":"seller","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"An order must be created by a customer before an order history snapshot for that order can exist (required for retrieving any orderHistoryId)."}]},{"specification":"Retrieve a detailed order history snapshot for a given unique order history ID. Operates on the shopping_mall_order_histories table and exposes all audit, snapshot, and reason fields for that event. Used for audit/audit trail, customer order timeline view, and escalation resolution. Returns the immutable state of an order as it was at the customer service event (e.g., cancellation, refund, escalation) for full transparency and traceability.","path":"/shoppingMall/customer/orderHistories/{orderHistoryId}","method":"get","summary":"Retrieve a specific order history snapshot by its unique ID.","description":"Fetch the full detail for a single order history snapshot from the shopping_mall_order_histories table, referenced by its unique orderHistoryId. This endpoint is designed for scenarios where users, sellers, or administrators need to review the exact state of an order at a service milestone—such as a cancellation, refund, or appeal event.\n\nUpon providing the orderHistoryId, the operation returns all stored audit, reason, and context information for that milestone, including total order amount, status, and any business or compliance comments. This detail can support customer self-service, seller dispute workflows, or admin legal review. Access is strictly enforced based on role and ownership: customers may retrieve only their own order events, sellers only for their fulfillments, admins for any history entry. Error responses are provided if the ID does not exist or access is denied.","parameters":[{"name":"orderHistoryId","description":"Unique identifier for the target order history snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot of the order at the specified audit milestone, including status, total, and comment.","typeName":"IShoppingMallOrderHistory"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[]},{"specification":"This operation allows an authorized user to update an order history record in the shopping mall platform. The underlying table is shopping_mall_order_histories. It is used for modifying immutable snapshots of order data at key customer service milestones for audit, compliance, and reporting. The update operation may only be performed by an admin user, and all changes are audited. This update is essential if an error or information correction is needed in the snapshot (such as snapshot_reason, or correcting order_total), or for administrative amendments following customer service resolution.","description":"Update a specific order history record identified by orderHistoryId. The operation enables admin users to correct or add additional information to previously captured historical order snapshots. This API updates the shopping_mall_order_histories table, which stores immutable snapshots of order data. The update may include fields like snapshot_reason, order_total adjustment, or corrections for compliance/audit purposes.\n\nSecurity considerations require exclusive admin access to this operation, as these records are used for regulatory and audit reporting. An audit trail is kept for every update, including the acting admin, changed fields, and timestamp. Only fields that do not compromise the integrity of immutable historical data may be updated. Attempts to update non-editable fields or without sufficient permissions will result in an error response.\n\nRelated APIs include endpoints for retrieving order histories, customer service event logs, and escalations associated with orders. Error handling includes conflict errors if another update has already occurred on the snapshot, or if requested changes fail audit validation.","summary":"Update an order history record in shopping_mall_order_histories by orderHistoryId (admin only).","parameters":[{"name":"orderHistoryId","description":"The unique identifier of the order history record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update for the specific order history record, using IShoppingMallOrderHistory.IUpdate structure.","typeName":"IShoppingMallOrderHistory.IUpdate"},"responseBody":{"description":"The updated order history record after modification.","typeName":"IShoppingMallOrderHistory"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/orderHistories/{orderHistoryId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of customer service events in the shopping mall platform. It operates on the shopping_mall_customer_service_events table. The endpoint is used by admins to search or audit service activities (e.g., case opened, resolved, message exchange, admin decision) related to orders, escalations, and appeals. It supports filtering by event type, status, date range, actor, and related order or escalation, with full paginated results.","description":"Search and filter customer service events across all orders and escalations. This API performs advanced queries on the shopping_mall_customer_service_events table, enabling admins to audit, review, and respond to customer service case progression. Supported filters include event_type, event_status, order_history_id, actor information (customer/seller/admin), escalation_id, appeal_id, and date ranges. The result is a paginated view of events.\n\nOnly admin users can access this operation, ensuring that sensitive customer service interactions are secured. Security and audit requirements dictate strict logging of access to these logs.\n\nBusiness logic may enforce maximum page sizes for performance reasons. The operation is typically used alongside APIs for order histories, escalations, and appeals to present a complete investigative timeline for cases involving orders, complaints, refunds, or appeals.\n\nError handling covers invalid filters or unauthorized access attempts, which result in access denied or validation error responses.","summary":"Admin-only, paginated search for customer service events in shopping_mall_customer_service_events.","parameters":[],"requestBody":{"description":"Search/request parameters for filtering and sorting customer service events. Accepts IShoppingMallCustomerServiceEvent.IRequest body.","typeName":"IShoppingMallCustomerServiceEvent.IRequest"},"responseBody":{"description":"Paginated result set of customer service events matching filters. Each entry is a summary or full customer service event.","typeName":"IPageIShoppingMallCustomerServiceEvent"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/customerServiceEvents","method":"patch","prerequisites":[]},{"specification":"This operation retrieves a specific customer service event's details by its unique eventId. It is based on the shopping_mall_customer_service_events table, which stores timeline log entries for customer service activities at key points such as order cancellation, refund, escalation, or appeal. Each event contains actor reference, type, status, comments, and timestamps. The operation provides in-depth information for support histories, audit, and the customer/seller/admin case journey. Only the event object is returned, and no write or side-effect occurs.","description":"This API retrieves a customer service event identified by its unique eventId from the shopping_mall_customer_service_events table. The customer service event logs actions performed by customers, sellers, admins, or the system for order service cases, escalations, or appeals. The log captures the associated order history, escalation, or appeal context, as well as all relevant actor information (customer, seller, admin).\n\nAccess control is vital: customers may only retrieve events they are directly involved in, sellers may only see events tied to orders/products they are responsible for, and admins can view all cases for oversight or investigation purposes. Sensitive/comment fields require masking or omission for users lacking appropriate permissions.\n\nThis retrieval operation is critical for customer support timelines, audit trails, and case histories. Error handling includes returning not found for nonexistent IDs, or forbidden for unauthorized access. Related endpoints include searching service events by order or filtering logs by context.\n","summary":"Retrieve a customer service event's details by eventId (shopping_mall_customer_service_events table).","parameters":[{"name":"eventId","description":"Unique identifier of the target customer service event record (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed record of the customer service event, including all actor references, type, status, comment, and timestamps.","typeName":"IShoppingMallCustomerServiceEvent"},"authorizationRoles":["admin","seller","customer"],"name":"at","path":"/shoppingMall/admin/customerServiceEvents/{eventId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific customer service event's details by its unique eventId. It is based on the shopping_mall_customer_service_events table, which stores timeline log entries for customer service activities at key points such as order cancellation, refund, escalation, or appeal. Each event contains actor reference, type, status, comments, and timestamps. The operation provides in-depth information for support histories, audit, and the customer/seller/admin case journey. Only the event object is returned, and no write or side-effect occurs.","description":"This API retrieves a customer service event identified by its unique eventId from the shopping_mall_customer_service_events table. The customer service event logs actions performed by customers, sellers, admins, or the system for order service cases, escalations, or appeals. The log captures the associated order history, escalation, or appeal context, as well as all relevant actor information (customer, seller, admin).\n\nAccess control is vital: customers may only retrieve events they are directly involved in, sellers may only see events tied to orders/products they are responsible for, and admins can view all cases for oversight or investigation purposes. Sensitive/comment fields require masking or omission for users lacking appropriate permissions.\n\nThis retrieval operation is critical for customer support timelines, audit trails, and case histories. Error handling includes returning not found for nonexistent IDs, or forbidden for unauthorized access. Related endpoints include searching service events by order or filtering logs by context.\n","summary":"Retrieve a customer service event's details by eventId (shopping_mall_customer_service_events table).","parameters":[{"name":"eventId","description":"Unique identifier of the target customer service event record (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed record of the customer service event, including all actor references, type, status, comment, and timestamps.","typeName":"IShoppingMallCustomerServiceEvent"},"authorizationRoles":["admin","seller","customer"],"name":"at","path":"/shoppingMall/seller/customerServiceEvents/{eventId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"An escalation case must exist before a customer service event referencing the escalation can be retrieved. Customer service events may log escalation-related actions, and the escalation provides necessary context for such events."},{"endpoint":{"path":"/shoppingMall/customer/appeals","method":"post"},"description":"An appeal record must exist before a customer service event tied to an appeal can be retrieved. Customer service events may log appeal resolutions or filings, and require the appeal's presence for context and linkage."}]},{"specification":"This operation retrieves a specific customer service event's details by its unique eventId. It is based on the shopping_mall_customer_service_events table, which stores timeline log entries for customer service activities at key points such as order cancellation, refund, escalation, or appeal. Each event contains actor reference, type, status, comments, and timestamps. The operation provides in-depth information for support histories, audit, and the customer/seller/admin case journey. Only the event object is returned, and no write or side-effect occurs.","description":"This API retrieves a customer service event identified by its unique eventId from the shopping_mall_customer_service_events table. The customer service event logs actions performed by customers, sellers, admins, or the system for order service cases, escalations, or appeals. The log captures the associated order history, escalation, or appeal context, as well as all relevant actor information (customer, seller, admin).\n\nAccess control is vital: customers may only retrieve events they are directly involved in, sellers may only see events tied to orders/products they are responsible for, and admins can view all cases for oversight or investigation purposes. Sensitive/comment fields require masking or omission for users lacking appropriate permissions.\n\nThis retrieval operation is critical for customer support timelines, audit trails, and case histories. Error handling includes returning not found for nonexistent IDs, or forbidden for unauthorized access. Related endpoints include searching service events by order or filtering logs by context.\n","summary":"Retrieve a customer service event's details by eventId (shopping_mall_customer_service_events table).","parameters":[{"name":"eventId","description":"Unique identifier of the target customer service event record (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed record of the customer service event, including all actor references, type, status, comment, and timestamps.","typeName":"IShoppingMallCustomerServiceEvent"},"authorizationRoles":["admin","seller","customer"],"name":"at","path":"/shoppingMall/customer/customerServiceEvents/{eventId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"An escalation case must exist before a customer service event referencing the escalation can be retrieved. Customer service events may log escalation-related actions, and the escalation provides necessary context for such events."},{"endpoint":{"path":"/shoppingMall/customer/appeals","method":"post"},"description":"An appeal record must exist before a customer service event tied to an appeal can be retrieved. Customer service events may log appeal resolutions or filings, and require the appeal's presence for context and linkage."}]},{"specification":"This operation updates an existing customer service event record in the shopping_mall_customer_service_events table identified by eventId. The operation is primarily for modifying workflow status, adding resolution comments, or updating actor-reviewed attributes during a service escalation, order complaint, or appeal process. Only admins or authorized sellers/customers (if business rules permit) may update event status or commentary. The payload must strictly match fields allowed per update scenario and role.","description":"This API allows updating certain allowed fields of an existing customer service event record identified by eventId. The shopping_mall_customer_service_events table provides an audit trail of customer service actions spanning case escalation, investigation, messaging, admin resolution, or appeal. Permitted fields to update may include event_status, event_comment, or actor assignment but never audit or created_at details.\n\nAuthorization is strictly enforced: typically only admins or specifically assigned actors to the event (e.g., as part of an escalation case) can change status, annotate, or append a comment. Attempts to update fields outside of permission scope or immutable fields (created_at, actor references, order linkage) will be rejected with validation or forbidden errors.\n\nThe operation incorporates business logic to ensure customer service process integrity, supporting only those field changes reflecting real workflow steps (e.g., review, resolution, annotation), and rigorously logs each update for audit compliance. Related APIs include retrieving event details, listing all events per escalation/appeal, or escalating to admin for further review.\n","summary":"Update details of a customer service event record by eventId (shopping_mall_customer_service_events table).","parameters":[{"name":"eventId","description":"Unique identifier of the customer service event to update (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Modifiable fields for updating customer service event (event_status, event_comment, etc.) in accordance with assigned roles and business workflow.","typeName":"IShoppingMallCustomerServiceEvent.IUpdate"},"responseBody":{"description":"The updated customer service event record, reflecting all permitted modifiable fields.","typeName":"IShoppingMallCustomerServiceEvent"},"authorizationRoles":["admin","seller","customer"],"name":"update","path":"/shoppingMall/admin/customerServiceEvents/{eventId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing customer service event record in the shopping_mall_customer_service_events table identified by eventId. The operation is primarily for modifying workflow status, adding resolution comments, or updating actor-reviewed attributes during a service escalation, order complaint, or appeal process. Only admins or authorized sellers/customers (if business rules permit) may update event status or commentary. The payload must strictly match fields allowed per update scenario and role.","description":"This API allows updating certain allowed fields of an existing customer service event record identified by eventId. The shopping_mall_customer_service_events table provides an audit trail of customer service actions spanning case escalation, investigation, messaging, admin resolution, or appeal. Permitted fields to update may include event_status, event_comment, or actor assignment but never audit or created_at details.\n\nAuthorization is strictly enforced: typically only admins or specifically assigned actors to the event (e.g., as part of an escalation case) can change status, annotate, or append a comment. Attempts to update fields outside of permission scope or immutable fields (created_at, actor references, order linkage) will be rejected with validation or forbidden errors.\n\nThe operation incorporates business logic to ensure customer service process integrity, supporting only those field changes reflecting real workflow steps (e.g., review, resolution, annotation), and rigorously logs each update for audit compliance. Related APIs include retrieving event details, listing all events per escalation/appeal, or escalating to admin for further review.\n","summary":"Update details of a customer service event record by eventId (shopping_mall_customer_service_events table).","parameters":[{"name":"eventId","description":"Unique identifier of the customer service event to update (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Modifiable fields for updating customer service event (event_status, event_comment, etc.) in accordance with assigned roles and business workflow.","typeName":"IShoppingMallCustomerServiceEvent.IUpdate"},"responseBody":{"description":"The updated customer service event record, reflecting all permitted modifiable fields.","typeName":"IShoppingMallCustomerServiceEvent"},"authorizationRoles":["admin","seller","customer"],"name":"update","path":"/shoppingMall/seller/customerServiceEvents/{eventId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing customer service event record in the shopping_mall_customer_service_events table identified by eventId. The operation is primarily for modifying workflow status, adding resolution comments, or updating actor-reviewed attributes during a service escalation, order complaint, or appeal process. Only admins or authorized sellers/customers (if business rules permit) may update event status or commentary. The payload must strictly match fields allowed per update scenario and role.","description":"This API allows updating certain allowed fields of an existing customer service event record identified by eventId. The shopping_mall_customer_service_events table provides an audit trail of customer service actions spanning case escalation, investigation, messaging, admin resolution, or appeal. Permitted fields to update may include event_status, event_comment, or actor assignment but never audit or created_at details.\n\nAuthorization is strictly enforced: typically only admins or specifically assigned actors to the event (e.g., as part of an escalation case) can change status, annotate, or append a comment. Attempts to update fields outside of permission scope or immutable fields (created_at, actor references, order linkage) will be rejected with validation or forbidden errors.\n\nThe operation incorporates business logic to ensure customer service process integrity, supporting only those field changes reflecting real workflow steps (e.g., review, resolution, annotation), and rigorously logs each update for audit compliance. Related APIs include retrieving event details, listing all events per escalation/appeal, or escalating to admin for further review.\n","summary":"Update details of a customer service event record by eventId (shopping_mall_customer_service_events table).","parameters":[{"name":"eventId","description":"Unique identifier of the customer service event to update (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Modifiable fields for updating customer service event (event_status, event_comment, etc.) in accordance with assigned roles and business workflow.","typeName":"IShoppingMallCustomerServiceEvent.IUpdate"},"responseBody":{"description":"The updated customer service event record, reflecting all permitted modifiable fields.","typeName":"IShoppingMallCustomerServiceEvent"},"authorizationRoles":["admin","seller","customer"],"name":"update","path":"/shoppingMall/customer/customerServiceEvents/{eventId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"An escalation must exist because customer service events are commonly linked to escalations. Creating an escalation ensures an event can be tied to a valid dispute or service case before updating its details."}]},{"specification":"This operation retrieves a paginated, filterable, and searchable list of escalations (customer service cases or disputes) from the shopping mall platform. It operates on the 'shopping_mall_escalations' table, allowing admins and authorized users to find, filter, and paginate escalations based on criteria such as status, type, initiator, assigned admin, and creation/update timestamps. Aggregated escalation case lists are crucial for customer service quality management, compliance auditing, and efficient assignment to support/admin staff.","description":"This endpoint provides a comprehensive, filtered, and paginated list of escalation cases present in the shopping mall system. Escalations represent customer, seller, or admin-raised service requests that could not be resolved through regular workflows (e.g., disputes, complaints, major refunds, investigation cases). Escalations may include information on the order, actors involved, escalation type and status, and assigned admin.\n\nAccess to this endpoint is typically restricted to admin users and authorized customer service agents as it may contain sensitive case and account information. Permissions must be enforced in business logic to restrict access to escalation cases relevant to the requesting user's role or scope.\n\nEach escalation in the result includes meta-information like creation timestamp, status, type, current handler, and optionally linked events. The query supports filters on type, status, assigned admin, date range, and keyword search. The paginated response ensures scalable handling even as the number of open/closed cases grows.\n\nRelated endpoints include single escalation detail loading (GET /escalations/{escalationId}), status/action change APIs, and escalation creation through customer/seller dispute flows. Error cases handled include excessive page size, invalid search terms, or unauthorized access.","summary":"Retrieve a paginated and filterable list of escalation cases (disputes, escalated customer service) from the shopping mall platform.","parameters":[],"requestBody":{"description":"Request body for filtering, searching, and paginating escalation cases. Supports filters on type, status, assigned admin, initiator, date range, and keyword search.","typeName":"IShoppingMallEscalation.IRequest"},"responseBody":{"description":"Paginated list of escalation cases matching the provided criteria, including meta-information for each escalation.","typeName":"IPageIShoppingMallEscalation.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/escalations","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"An order must exist to serve as the subject of an escalation, since escalations reference an order by orderId. Creating an order ensures valid context for escalations to be retrieved."},{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"An escalation must exist to be retrieved in the list. Creating one ensures the list will include a result matching the search/filter parameters."}]},{"specification":"This operation retrieves the full detail of a single escalation (customer service case or dispute) from the 'shopping_mall_escalations' table, identified by the unique escalationId. It provides comprehensive information about the escalation, including order reference, initiator, assigned admin, case type and status, resolution info, history, and related service events, enabling deep investigation and handling by the admin customer service team.","description":"This endpoint loads the detailed information for a specific escalation/dispute case given its unique escalationId. Escalations represent complex customer service or complaint situations (such as refunds, disputes, or major delivery issues) that require manual handling by admin or customer service staff. The response includes case state, type, related order and actors, audit trail fields, status, escalation reason/type, resolution status, and assignment details.\n\nAuthorization is required and typically limited to admin users or designated customer service staff, as escalation cases may contain sensitive or private information regarding users, orders, and disputes. The endpoint will validate that the requesting user is authorized to view escalation details, returning a not-found or unauthorized error otherwise.\n\nThis operation references the 'shopping_mall_escalations' table and draws from its relationships with orders, customers, sellers, and admins to present a complete view of the given escalation. Use cases include escalation handling, resolution processes, audit, and customer history investigation. Error scenarios include non-existent, deleted, or unauthorized escalationId references.","summary":"Retrieve detailed information about a single escalation (dispute, customer service case) by escalationId from the shopping mall platform.","parameters":[{"name":"escalationId","description":"Unique identifier of the escalation case to fetch details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed escalation case information, including full context and metadata as stored in the database.","typeName":"IShoppingMallEscalation"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/escalations/{escalationId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"Escalation must be created before it can be retrieved by escalationId"}]},{"specification":"This operation creates a new customer service escalation case, allowing customers or sellers to formally request platform intervention on an order-related dispute or complex support issue. It operates on the shopping_mall_escalations table, capturing the associated order, optional initiator, escalation type, and initial status, as required by the business logic for customer service flows.","description":"Create a new escalation record in the system when a customer or seller cannot resolve an order issue through normal self-service mechanisms. Escalations are generally opened in cases of disputes, unusual refunds, shipping failures, miscommunication, or system errors that need admin involvement.\n\nSecurity and permissions ensure only customers (for their own orders) and sellers (for their own sales) may use this endpoint. All required information—including the order reference, initiator, escalation type, and description—must be included in the request. Upon submission, the escalation is set to a default status, typically 'pending', and assigned for further admin review.\n\nThis operation interacts with the shopping_mall_escalations entity in the DB, referencing the related order and the respective initiator, with status and timestamps managed as per audit/compliance requirements. Validation includes confirming order ownership and ensuring no duplicate unresolved escalation for the same order and type. Errors may be returned if business rules are violated (such as attempts to escalate ineligible orders, or missing required justification).\n\nRelated endpoints include those for updating the escalation status, querying escalations for customer/admin dashboards, and linking escalations to customer service events or appeals.","summary":"Create a new escalation case for an order issue (shopping_mall_escalations)","parameters":[],"requestBody":{"description":"Escalation creation details, including the related order, initiator information, escalation type, and optional descriptive context.","typeName":"IShoppingMallEscalation.ICreate"},"responseBody":{"description":"Detailed escalation record including ID, order association, type, status, and assigned actors for further processing.","typeName":"IShoppingMallEscalation"},"authorizationRoles":["customer","seller"],"name":"create","path":"/shoppingMall/customer/escalations","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before an escalation can be created for that order"}]},{"specification":"This operation creates a new customer service escalation case, allowing customers or sellers to formally request platform intervention on an order-related dispute or complex support issue. It operates on the shopping_mall_escalations table, capturing the associated order, optional initiator, escalation type, and initial status, as required by the business logic for customer service flows.","description":"Create a new escalation record in the system when a customer or seller cannot resolve an order issue through normal self-service mechanisms. Escalations are generally opened in cases of disputes, unusual refunds, shipping failures, miscommunication, or system errors that need admin involvement.\n\nSecurity and permissions ensure only customers (for their own orders) and sellers (for their own sales) may use this endpoint. All required information—including the order reference, initiator, escalation type, and description—must be included in the request. Upon submission, the escalation is set to a default status, typically 'pending', and assigned for further admin review.\n\nThis operation interacts with the shopping_mall_escalations entity in the DB, referencing the related order and the respective initiator, with status and timestamps managed as per audit/compliance requirements. Validation includes confirming order ownership and ensuring no duplicate unresolved escalation for the same order and type. Errors may be returned if business rules are violated (such as attempts to escalate ineligible orders, or missing required justification).\n\nRelated endpoints include those for updating the escalation status, querying escalations for customer/admin dashboards, and linking escalations to customer service events or appeals.","summary":"Create a new escalation case for an order issue (shopping_mall_escalations)","parameters":[],"requestBody":{"description":"Escalation creation details, including the related order, initiator information, escalation type, and optional descriptive context.","typeName":"IShoppingMallEscalation.ICreate"},"responseBody":{"description":"Detailed escalation record including ID, order association, type, status, and assigned actors for further processing.","typeName":"IShoppingMallEscalation"},"authorizationRoles":["customer","seller"],"name":"create","path":"/shoppingMall/seller/escalations","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders","method":"post"},"description":"Order must exist before an escalation case can be created for it."}]},{"specification":"This operation allows an authorized actor to update an existing escalation case, changing its status, resolution details, or assignment as the escalation progresses. It directly references the shopping_mall_escalations table, supporting escalation management throughout its lifecycle (pending, in-review, resolved, closed, etc.).","description":"Update the properties of an existing escalation record, such as its status, escalation type, or resolution outcomes. Only authorized users—such as the initiator (customer or seller) or an assigned admin—may perform updates to an escalation. Typical updates include status transitions (e.g., 'in-review', 'resolved', 'closed'), adding or updating comments, or assigning the case to a specific admin.\n\nThe endpoint strictly checks access permissions: customers can only update their own escalations, sellers for their orders, and admins for any case. Updates are tracked with audit logs, including who made the change, the prior and new status, and timestamps for compliance and traceability. Validation ensures status transitions are legal (e.g., cannot resolve a closed case, must provide a resolution reason when closing, etc.) and that escalation content remains consistent with business rules.\n\nThis operation interacts with the shopping_mall_escalations record identified by escalationId. Potential errors are returned on unauthorized updates, invalid status transitions, or missing required fields in the update request. Related flows include dashboard visibility of escalation status for customers, sellers, and admins; customer service event tracking; and downstream effects such as notifications or associated appeals.","summary":"Update an existing escalation case (shopping_mall_escalations) by ID","parameters":[{"name":"escalationId","description":"Unique identifier for the escalation to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated escalation fields, such as status change, assignment, resolution, or commentary.","typeName":"IShoppingMallEscalation.IUpdate"},"responseBody":{"description":"The updated detailed escalation record, including its current status, assigned actors, and resolution details.","typeName":"IShoppingMallEscalation"},"authorizationRoles":["customer","seller","admin"],"name":"update","path":"/shoppingMall/customer/escalations/{escalationId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/escalations","method":"post"},"description":"The escalation case must be created before it can be updated."}]},{"specification":"This operation allows an authorized actor to update an existing escalation case, changing its status, resolution details, or assignment as the escalation progresses. It directly references the shopping_mall_escalations table, supporting escalation management throughout its lifecycle (pending, in-review, resolved, closed, etc.).","description":"Update the properties of an existing escalation record, such as its status, escalation type, or resolution outcomes. Only authorized users—such as the initiator (customer or seller) or an assigned admin—may perform updates to an escalation. Typical updates include status transitions (e.g., 'in-review', 'resolved', 'closed'), adding or updating comments, or assigning the case to a specific admin.\n\nThe endpoint strictly checks access permissions: customers can only update their own escalations, sellers for their orders, and admins for any case. Updates are tracked with audit logs, including who made the change, the prior and new status, and timestamps for compliance and traceability. Validation ensures status transitions are legal (e.g., cannot resolve a closed case, must provide a resolution reason when closing, etc.) and that escalation content remains consistent with business rules.\n\nThis operation interacts with the shopping_mall_escalations record identified by escalationId. Potential errors are returned on unauthorized updates, invalid status transitions, or missing required fields in the update request. Related flows include dashboard visibility of escalation status for customers, sellers, and admins; customer service event tracking; and downstream effects such as notifications or associated appeals.","summary":"Update an existing escalation case (shopping_mall_escalations) by ID","parameters":[{"name":"escalationId","description":"Unique identifier for the escalation to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated escalation fields, such as status change, assignment, resolution, or commentary.","typeName":"IShoppingMallEscalation.IUpdate"},"responseBody":{"description":"The updated detailed escalation record, including its current status, assigned actors, and resolution details.","typeName":"IShoppingMallEscalation"},"authorizationRoles":["customer","seller","admin"],"name":"update","path":"/shoppingMall/seller/escalations/{escalationId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/escalations","method":"post"},"description":"The POST /shoppingMall/seller/escalations operation must be called to create an escalation before it can be updated. This ensures the escalationId exists and update actions are meaningful."}]},{"specification":"This operation allows an authorized actor to update an existing escalation case, changing its status, resolution details, or assignment as the escalation progresses. It directly references the shopping_mall_escalations table, supporting escalation management throughout its lifecycle (pending, in-review, resolved, closed, etc.).","description":"Update the properties of an existing escalation record, such as its status, escalation type, or resolution outcomes. Only authorized users—such as the initiator (customer or seller) or an assigned admin—may perform updates to an escalation. Typical updates include status transitions (e.g., 'in-review', 'resolved', 'closed'), adding or updating comments, or assigning the case to a specific admin.\n\nThe endpoint strictly checks access permissions: customers can only update their own escalations, sellers for their orders, and admins for any case. Updates are tracked with audit logs, including who made the change, the prior and new status, and timestamps for compliance and traceability. Validation ensures status transitions are legal (e.g., cannot resolve a closed case, must provide a resolution reason when closing, etc.) and that escalation content remains consistent with business rules.\n\nThis operation interacts with the shopping_mall_escalations record identified by escalationId. Potential errors are returned on unauthorized updates, invalid status transitions, or missing required fields in the update request. Related flows include dashboard visibility of escalation status for customers, sellers, and admins; customer service event tracking; and downstream effects such as notifications or associated appeals.","summary":"Update an existing escalation case (shopping_mall_escalations) by ID","parameters":[{"name":"escalationId","description":"Unique identifier for the escalation to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated escalation fields, such as status change, assignment, resolution, or commentary.","typeName":"IShoppingMallEscalation.IUpdate"},"responseBody":{"description":"The updated detailed escalation record, including its current status, assigned actors, and resolution details.","typeName":"IShoppingMallEscalation"},"authorizationRoles":["customer","seller","admin"],"name":"update","path":"/shoppingMall/admin/escalations/{escalationId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/escalations","method":"post"},"description":"The POST /shoppingMall/seller/escalations operation is required to create an escalation before any admin update may be performed on the escalation case. This ensures that the escalationId referenced in the update exists."}]},{"specification":"This operation permanently deletes an escalation case from the system. It operates on the shopping_mall_escalations table in the Prisma schema, which contains escalation cases linked to customer service, dispute resolution, or complex issues that required admin or specialized intervention. Escalations may involve customers, sellers, admins, and critical order references. A valid escalationId must be provided. Deleting an escalation removes all traces of the specific escalation case and is only permitted for platform admins for compliance and data integrity. All child relations, such as customer service events and appeals, are also deleted as per cascading logic in the schema.","description":"Permanently remove an escalation case and all its associated records from the shoppingMall platform. This operation should only be performed by an admin with full permissions, as escalation records may relate to disputes, order-related complaints, or serious customer/vendor issues. The operation relies on the Prisma model shopping_mall_escalations, which contains complete details about the escalation type, status, actors (customer, seller, and assigned admin), and timestamps. \n\nTo maintain audit integrity, all deletions trigger cascaded removal of subsidiary customer service events, related appeals, and any associated comments. Regulatory and business policy may require reason tracking and audit of such deletions, which should be implemented in the system's backend logic. Attempting to delete a non-existent escalation should yield a clear business error response. This operation should NOT be exposed to non-admin actors, and misuse could impact compliance or incident audit trails.","summary":"Permanently delete an escalation (shopping_mall_escalations table) and all related records by escalationId.","parameters":[{"name":"escalationId","description":"Unique identifier of the escalation to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/escalations/{escalationId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"Escalation record must be created before it can be permanently deleted. The operation requires a valid escalationId, which is generated on escalation creation."}]},{"specification":"This operation retrieves a paginated and filtered list of all appeal records in the system. It is based on the shopping_mall_appeals table from the Prisma schema, which contains detailed information about customer or seller appeals of escalated customer service cases. The operation provides advanced filtering and search based on attributes like appeal type, status, time range, actor (customer/seller), and reviewing admin. Response includes full appeal metadata and supports pagination, sorting, and optional status filtering, enabling admins and platform managers to monitor, review, and manage appeals efficiently.","description":"Fetch a filtered, paginated list of appeal records from the shoppingMall platform. Appeals represent formal challenges to prior escalation case decisions and are critical to transparent customer and seller service workflows. This operation provides system admins with advanced search capabilities over the shopping_mall_appeals schema, supporting filtering by status (pending, under review, resolved, dismissed, etc.), appeal_type (refund denied, policy review request, etc.), time windows, actor identity, and outcome type. \n\nResults are returned in a paginated format for dashboard consumption and can be sorted by creation/update time, status, or actor. The response encapsulates complete metadata for each appeal, including escalation linkage, actors, appeal/request type, status, outcome, resolution remarks, and creation/update timestamps. Appropriate business logic must validate admin authorization and prevent access leaks to non-admin users. Errors or unsupported filter parameters are handled with clear error messages. This API is intended for administrative dashboard use.\n","summary":"Retrieve a paginated, filtered list of appeals (shopping_mall_appeals table) for admin dashboard review.","parameters":[],"requestBody":{"description":"Search and pagination criteria to filter appeals results","typeName":"IShoppingMallAppeal.IRequest"},"responseBody":{"description":"Paginated list of appeals with complete metadata and filtering support","typeName":"IPageIShoppingMallAppeal"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/appeals","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"An escalation case must be created before an appeal can exist, as appeals are always associated with an escalation via escalation_id."},{"endpoint":{"path":"/shoppingMall/customer/appeals","method":"post"},"description":"An appeal must be created via this operation before it can appear in the list returned by the admin appeal index operation."}]},{"specification":"This operation retrieves the detailed information of a specific appeal by its ID. It operates on the 'shopping_mall_appeals' table in the Prisma schema, which records customer or seller appeals on escalated customer service cases. The operation allows customers, sellers, and admins—according to their permissions—to view the full status, outcome, and timeline of a particular appeal. The API enforces strict access: customers and sellers can only access their own appeals, while admins can access all appeals across the platform.","description":"Retrieve detailed information about a specific customer or seller appeal based on the provided appeal ID. This operation returns all relevant fields of the appeal record as defined in the 'shopping_mall_appeals' schema, including appellant identity, escalation reference, appeal type, status, assigned reviewers, and resolution details.\n\nSecurity: The endpoint enforces role-based access—customers and sellers see only their own appeals and admins have full platform-wide access. Sensitive data is filtered out for roles without scope. Logging is performed for all read access for audit purposes.\n\nBusiness logic ensures only appeals that have not been soft deleted (deleted_at is null) are returned. Attempts to access non-existent or unauthorized appeal IDs return a 404 or 403 error as appropriate.","summary":"Retrieve detailed information of a specific appeal by ID from shopping_mall_appeals table.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal to retrieve information for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the appeal identified by appealId, including status, actors, escalation relation, and resolution.","typeName":"IShoppingMallAppeal"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/appeals/{appealId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/appeals","method":"post"},"description":"The appeal must be created before it can be retrieved by its unique identifier."}]},{"specification":"This operation retrieves the detailed information of a specific appeal by its ID. It operates on the 'shopping_mall_appeals' table in the Prisma schema, which records customer or seller appeals on escalated customer service cases. The operation allows customers, sellers, and admins—according to their permissions—to view the full status, outcome, and timeline of a particular appeal. The API enforces strict access: customers and sellers can only access their own appeals, while admins can access all appeals across the platform.","description":"Retrieve detailed information about a specific customer or seller appeal based on the provided appeal ID. This operation returns all relevant fields of the appeal record as defined in the 'shopping_mall_appeals' schema, including appellant identity, escalation reference, appeal type, status, assigned reviewers, and resolution details.\n\nSecurity: The endpoint enforces role-based access—customers and sellers see only their own appeals and admins have full platform-wide access. Sensitive data is filtered out for roles without scope. Logging is performed for all read access for audit purposes.\n\nBusiness logic ensures only appeals that have not been soft deleted (deleted_at is null) are returned. Attempts to access non-existent or unauthorized appeal IDs return a 404 or 403 error as appropriate.","summary":"Retrieve detailed information of a specific appeal by ID from shopping_mall_appeals table.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal to retrieve information for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the appeal identified by appealId, including status, actors, escalation relation, and resolution.","typeName":"IShoppingMallAppeal"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/appeals/{appealId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/appeals","method":"post"},"description":"The appeal must be created before it can be retrieved by its unique identifier."}]},{"specification":"This operation retrieves the detailed information of a specific appeal by its ID. It operates on the 'shopping_mall_appeals' table in the Prisma schema, which records customer or seller appeals on escalated customer service cases. The operation allows customers, sellers, and admins—according to their permissions—to view the full status, outcome, and timeline of a particular appeal. The API enforces strict access: customers and sellers can only access their own appeals, while admins can access all appeals across the platform.","description":"Retrieve detailed information about a specific customer or seller appeal based on the provided appeal ID. This operation returns all relevant fields of the appeal record as defined in the 'shopping_mall_appeals' schema, including appellant identity, escalation reference, appeal type, status, assigned reviewers, and resolution details.\n\nSecurity: The endpoint enforces role-based access—customers and sellers see only their own appeals and admins have full platform-wide access. Sensitive data is filtered out for roles without scope. Logging is performed for all read access for audit purposes.\n\nBusiness logic ensures only appeals that have not been soft deleted (deleted_at is null) are returned. Attempts to access non-existent or unauthorized appeal IDs return a 404 or 403 error as appropriate.","summary":"Retrieve detailed information of a specific appeal by ID from shopping_mall_appeals table.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal to retrieve information for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the appeal identified by appealId, including status, actors, escalation relation, and resolution.","typeName":"IShoppingMallAppeal"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/appeals/{appealId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/appeals","method":"post"},"description":"An appeal must first be created before its detailed information can be retrieved by ID."}]},{"specification":"This operation allows a customer or seller to create a new appeal record on an existing escalation. It writes to the 'shopping_mall_appeals' table in the Prisma schema, associating the appeal with the relevant escalation, appellant actor, and appeal details. The endpoint enforces that only valid actors with a legitimate prior escalation can file an appeal. The API captures timestamp, status, and reason for audit and compliance.","description":"Create a new appeal entry in the system for an escalation that has occurred, such as disagreement with an order cancellation or refund outcome. The request must include all mandatory fields from the appeal creation DTO, which maps to the 'shopping_mall_appeals' schema definition—referencing the escalation, the appellant (customer or seller), appeal type and initial status, and optionally admin reviewer if assigned.\n\nValidation ensures the referenced escalation exists and that the client initiating the appeal is authorized to do so (i.e., tied to the escalation as a customer or seller). Soft-deleted appeals or escalations cannot be used. On successful creation, the API returns the full appeal record as confirmation. Audit trails are updated to ensure actions are logged for compliance and follow-up.","summary":"Create a new appeal record for customer service on the shopping_mall_appeals table.","parameters":[],"requestBody":{"description":"Information required to file a new appeal, referencing escalation, actor, and reason.","typeName":"IShoppingMallAppeal.ICreate"},"responseBody":{"description":"Created appeal record with full detail, including assigned status, reviewer, and resolution structure.","typeName":"IShoppingMallAppeal"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/appeals","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"An escalation must exist before an appeal can be created for that escalation."}]},{"specification":"This operation allows a customer or seller to create a new appeal record on an existing escalation. It writes to the 'shopping_mall_appeals' table in the Prisma schema, associating the appeal with the relevant escalation, appellant actor, and appeal details. The endpoint enforces that only valid actors with a legitimate prior escalation can file an appeal. The API captures timestamp, status, and reason for audit and compliance.","description":"Create a new appeal entry in the system for an escalation that has occurred, such as disagreement with an order cancellation or refund outcome. The request must include all mandatory fields from the appeal creation DTO, which maps to the 'shopping_mall_appeals' schema definition—referencing the escalation, the appellant (customer or seller), appeal type and initial status, and optionally admin reviewer if assigned.\n\nValidation ensures the referenced escalation exists and that the client initiating the appeal is authorized to do so (i.e., tied to the escalation as a customer or seller). Soft-deleted appeals or escalations cannot be used. On successful creation, the API returns the full appeal record as confirmation. Audit trails are updated to ensure actions are logged for compliance and follow-up.","summary":"Create a new appeal record for customer service on the shopping_mall_appeals table.","parameters":[],"requestBody":{"description":"Information required to file a new appeal, referencing escalation, actor, and reason.","typeName":"IShoppingMallAppeal.ICreate"},"responseBody":{"description":"Created appeal record with full detail, including assigned status, reviewer, and resolution structure.","typeName":"IShoppingMallAppeal"},"authorizationType":null,"authorizationRole":"seller","name":"create","path":"/shoppingMall/seller/appeals","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/escalations","method":"post"},"description":"An escalation case must exist before a new appeal can be filed, since every appeal record must reference an existing escalation via escalation_id and only valid actors with a legitimate prior escalation can file an appeal."}]},{"specification":"This operation updates an existing appeal record in the ShoppingMallAppeal table. It allows an authorized admin to process the appeal by updating its status, resolution type, and associated comments. Appeals are part of the customer service escalation and dispute flow, allowing users (customers or sellers) to challenge prior decisions and request further review by admins. The operation ensures only authorized admins can update appeal records, enforcing proper audit trail and business rules around appeal processing. Status transitions and resolution comments are validated as per business requirements.","description":"Update an appeal entry to reflect admin decision or ongoing review status in the context of customer service escalation. Appeals are created when a customer or seller contests the outcome of a previous escalation, seeking additional review or policy override. Admins reviewing an appeal must document the outcome, status, and method of resolution, along with a comment clarifying the decision and any remediation steps taken.\n\nThis operation enforces platform business logic, including eligibility checks (only open/in-review appeals can be updated), workflow controls (status changes such as resolved, dismissed, or accepted), and record-keeping for audit and compliance. Admins must ensure accurate information is provided as changes here affect customer entitlements and regulatory retention. All actions are time-stamped, actor logged, and retrievable for later dispute or compliance analysis.","summary":"Update a specific appeal record's status, resolution, or comment in the ShoppingMallAppeal table.","parameters":[{"name":"appealId","description":"Unique identifier of the target appeal to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Object containing properties to update in the appeal, such as new status, resolution type, and admin comment explaining the outcome.","typeName":"IShoppingMallAppeal.IUpdate"},"responseBody":{"description":"The updated detailed appeal record reflecting all changes, including admin decision and comments.","typeName":"IShoppingMallAppeal"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/appeals/{appealId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/appeals","method":"post"},"description":"Appeal record must exist before it can be updated. The appeal referenced by appealId must be created first."}]},{"specification":"This operation permanently deletes (hard delete) an appeal record from the ShoppingMallAppeal table. Admins may remove appeals that have been resolved, are invalid, or require data correction, with all actions subjected to audit and retention policies. Deletion of appeals is strictly limited to administrative roles for compliance and data integrity; only appeals that are not under active review and are no longer part of an open escalation may be removed. Appeals tied to ongoing disputes must remain accessible in line with regulatory guidelines and business workflow requirements.","description":"Permanently delete a specific appeal entry from the system, removing it from the appeals queue and all customer/admin access. This action can only be performed by authorized administrators and is intended for appeals records that have fully completed their lifecycle or must be purged due to data error or policy violation.\n\nThe operation is subject to audit trail requirements: all deletion actions are logged with timestamps and acting admin id for later compliance checks. Attempts to delete appeals in active status (e.g., under review or unresolved) must be rejected by business logic, returning an appropriate error. Where regulatory or platform retention rules mandate, deleted appeals are tracked in administrative action logs for historical reference and reporting.","summary":"Permanently delete a specific appeal record from the ShoppingMallAppeal table by its identifier.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/appeals/{appealId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/appeals","method":"post"},"description":"An appeal must be created before it can be deleted by its identifier. The existence of an appeal record is mandatory to perform the permanent deletion operation."}]},{"specification":"This operation retrieves a paginated and filterable list of admin action logs operating on the shopping_mall_admin_action_logs table. It enables administrators to search, filter, and review past administrative actions including approvals, bans, suspensions, overrides, and edits. Essential for compliance, transparency, and auditing, it supports filtering by action type, affected domain, affected entity, acting admin, and timestamp range, with support for large datasets via pagination and advanced query capabilities. Sensitive for tracking platform changes, all access is logged for audit.","description":"This endpoint allows an administrator to search through the history of administrative actions recorded in the shopping_mall_admin_action_logs schema. Each log entry documents an action taken by a platform admin (approval, ban, update, deletion, override, etc.) and contains references to affected users, products, orders, or reviews, the domain context, the reason for the action, a timestamp, and detailed structured context as JSON if available.\n\nSecurity is paramount: only admin users should be granted access, as these logs may contain sensitive operational or user data, including reasons for disciplinary actions or platform changes. All access to this endpoint itself should be recorded for compliance and monitoring purposes. Data returned should mask or filter PII if the requesting admin does not have full privileges.\n\nThe operation supports sophisticated filtering queries, such as actions by a particular admin, within a date/time range, or on a given domain type (product, user, order, etc.). Pagination parameters help navigate large log datasets, and results are sorted by creation timestamp descending by default. Failures should return clear, actionable messages, and backend errors must not leak sensitive information.","summary":"Retrieve and search the list of administrative action logs from shopping_mall_admin_action_logs table.","parameters":[],"requestBody":{"description":"Query parameters for filtering, searching, and paginating admin action logs. Filters may include admin ID, action type, affected entity/domain, and timestamp range.","typeName":"IShoppingMallAdminActionLog.IRequest"},"responseBody":{"description":"Paginated list of summarized admin action log entries matching filter criteria.","typeName":"IPageIShoppingMallAdminActionLog.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/adminActionLogs","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/adminActionLogs","method":"post"},"description":"An admin action log entry must exist before it can be queried or filtered in the admin action logs index operation."}]},{"specification":"This operation retrieves detailed information for a single admin action log entry identified by its unique log ID in the shopping_mall_admin_action_logs table. It allows admin users to audit specific administrative actions performed on users, products, orders, or reviews, inspecting all associated metadata, reason, affected entity, domain, and structured context for the action.","description":"This endpoint enables the retrieval of fully detailed information about a specific administrative action log, identified by the adminActionLogId path parameter and referencing the shopping_mall_admin_action_logs schema entity. The log entry contains structured information about which admin performed the action, the type and domain of the action (e.g., approval, ban, edit), which entity was affected, the reason for the action, a JSON context dump, and an audit-compliant timestamp.\n\nSecurity is strict: Only authenticated admin users may access this endpoint, and all access must be recorded. The returned record provides all relevant metadata including acting admin information, linked customer/seller/product/order/review (if any), the rationale for the action, and full structured context for root cause analysis or compliance investigation. If the log entry does not exist or the admin lacks sufficient privileges, the API returns a clear, appropriate error.\n\nThis operation is a critical building block for platform accountability, incident post-mortems, and regulatory reviews. It should be integrated with role-based visibility controls and full access audit trails.","summary":"Retrieve detailed information for a specific administrative action log entry from shopping_mall_admin_action_logs.","parameters":[{"name":"adminActionLogId","description":"Unique identifier of the admin action log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the requested admin action log entry, including all structured fields and references.","typeName":"IShoppingMallAdminActionLog"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/adminActionLogs/{adminActionLogId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new administrative action log record in the shoppingMall platform. It is designed to allow system administrators to persistently log all administrative actions performed on customers, sellers, products, orders, or reviews for compliance, audit, and transparency purposes. The log entry captures the acting admin, the affected entity (customer, seller, product, order, or review), a description of the action, the reason, and an optional JSON context for full traceability. This operation is only accessible to users with the 'admin' role.","description":"This API endpoint allows an authenticated admin to create a new action log describing a significant administrative event, such as approvals, bans, suspensions, overrides, or edits, which impact platform data or user states. Upon submission, essential details such as the acting admin, affected entities (using corresponding IDs), the type and reason for the action, as well as the affected domain, are recorded. Optionally, structured details can be attached in JSON format for trace analysis. \n\nThe operation ensures that all actions are auditable for future investigations or compliance reviews required by regulatory policies. Only users with the 'admin' role can invoke this endpoint. It directly references the shopping_mall_admin_action_logs table, contributing to the system's immutable administrative action trail.\n\nIf required fields are missing or IDs do not correspond to existing entities, the endpoint returns a validation error. All successful logs are timestamped at creation.","summary":"Create a new administrative action log entry (shopping_mall_admin_action_logs table)","parameters":[],"requestBody":{"description":"Information about the admin action to log, including acting admin, affected entity, action type/reason, and any context details.","typeName":"IShoppingMallAdminActionLog.ICreate"},"responseBody":{"description":"The created admin action log entry as recorded in the system.","typeName":"IShoppingMallAdminActionLog"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/adminActionLogs","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing administrative action log entry identified by its unique adminActionLogId in the shoppingMall platform. It allows only admins to make corrections or add explanatory details to previously logged admin actions, while maintaining a full audit trail of updates. This endpoint is intended for correcting errors or appending context to a log entry and may only permit certain fields to be updated (such as action_reason, details_json, etc.). Underlying record must exist and must not have been deleted.","description":"This API allows an authenticated admin to update fields of an existing admin action log, typically to correct previous input, append clarifications, or supply additional audit context. The key fields that may be modified include the action reason and the details_json property, enabling admins to document post-event information relevant for future traceability or compliance checks. \n\nThis operation cross-verifies that the log entry with the given identifier exists and has not been soft-deleted before making any modification. Only users with the 'admin' role can perform updates, and any changes are timestamped and reflected in the audit system. Attempts to modify a non-existent or deleted log record will result in an appropriate error response.\n\nPartial updates are allowed; unchanged fields may be omitted from the payload. Administration of immutable fields (such as acting_admin or affected_entity identifiers) is generally NOT permitted via this endpoint to preserve historical accuracy.","summary":"Update an existing admin action log entry by ID (shopping_mall_admin_action_logs table)","parameters":[{"name":"adminActionLogId","description":"Unique identifier of the admin action log to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the admin action log record (typically action_reason or details_json); other fields may not be updatable.","typeName":"IShoppingMallAdminActionLog.IUpdate"},"responseBody":{"description":"The updated admin action log entry retrieved after update.","typeName":"IShoppingMallAdminActionLog"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/adminActionLogs/{adminActionLogId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently removes a specific administrative action log entry from the system, targeting the shopping_mall_admin_action_logs table in the database. It allows platform administrators to erase log entries related to admin actions, such as platform changes, bans, or overrides, when required by compliance or data retention policies. The operation enforces strict targeting through a path parameter representing the unique identifier of the admin action log to be erased and ensures that only authorized admin users can perform the deletion. This operation only performs a hard delete if the 'deleted_at' field is absent or not utilized for soft deletion within the schema.","description":"This DELETE operation is focused on the admin action log management for the shopping mall platform. Each record in shopping_mall_admin_action_logs tracks actions performed by platform admins, including the acting admin, affected entity, action type, reason, and timestamp. \n\nThe operation is restricted to administrators to support compliance with data privacy, legal retention, and operational policies. When an administrator issues this deletion, the system will remove the admin action log record identified by 'adminActionLogId' from the database entirely. Given that the model includes a nullable 'deleted_at' field, this operation should perform a soft deletion by updating the 'deleted_at' timestamp unless permanent deletion is explicitly mandated by business rules or configuration.\n\nSpecial care must be taken to ensure that accidental or unauthorized deletions do not occur, and a full audit trail should be maintained for deletion activities. Related references in audit, investigation, or reporting flows should be updated or handled as per platform policy. Error handling should clearly report if the ID does not exist or if deletion is restricted by compliance holds.","summary":"Delete a specific admin action log entry (soft delete if supported) from shopping_mall_admin_action_logs table.","parameters":[{"name":"adminActionLogId","description":"The unique identifier of the admin action log entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/adminActionLogs/{adminActionLogId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of administrative audit log records from the shopping_mall_admin_audit_logs table. The endpoint is designed for administrators to conduct audits, monitor platform changes, and review compliance-related actions by querying logs based on multiple criteria including event type, domain, log level, time frame, and associated admin. Supports advanced search, filtering, and sorting for high-volume environments.","description":"This PATCH operation enables authorized platform administrators to search, filter, and retrieve historical audit log entries related to all critical administrative actions, including logins, permission changes, settings modifications, and system activities. Each log in shopping_mall_admin_audit_logs contains the acting admin ID, audit event type, domain, serialised event context, log level, and timestamp.\n\nThe request body uses a standardized search DTO for flexible filtering, supporting criteria such as admin identifier, event type, domain, log level, time range, and keyword full text queries. Pagination controls (page, pageSize) are also provided in the request body to support efficient navigation through high-volume data. Sorting options should be accepted (e.g., by created_at descending for most recent activity first).\n\nImportant security controls are in place to ensure only authorized admins can access this audit history. The operation may exclude sensitive event context fields based on the requesting admin’s permissions. Error cases such as invalid search criteria, lack of results, or permission denials should be clearly reported.\n\nThe response returns a paginated list of matching audit log summary records, with metadata about pagination, total results, and applied filters for UI display and export.","summary":"Search and retrieve a filtered, paginated list of admin audit logs from shopping_mall_admin_audit_logs table.","parameters":[],"requestBody":{"description":"Criteria, filters, and pagination parameters for searching admin audit logs.","typeName":"IShoppingMallAdminAuditLog.IRequest"},"responseBody":{"description":"Paginated list of admin audit log summaries matching search criteria.","typeName":"IPageIShoppingMallAdminAuditLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/shoppingMall/admin/adminAuditLogs","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves a specific admin audit log entry based on its unique identifier, operating on the shopping_mall_admin_audit_logs table. The endpoint is intended for use in the context of platform governance, compliance, and incident review, where examination of individual admin audit log records is necessary. Returns full details of the audit record, including event type, acting admin, domain, event context, log level, and timestamp.","path":"/shoppingMall/admin/adminAuditLogs/{adminAuditLogId}","method":"get","summary":"Retrieve a single admin audit log by unique identifier (shopping_mall_admin_audit_logs table)","description":"This endpoint retrieves the full set of data for a single admin audit log entry from the shopping_mall_admin_audit_logs table in the e-commerce platform's database. The admin audit log table tracks all critical platform-wide administrative actions and events, including logins, permission changes, system settings modifications, and explicit admin actions that are relevant for compliance and legal review.\n\nAuthorization is typically restricted to high-privilege admin users, as audit logs may contain sensitive platform or user information. Requesters must have system-level admin privileges or equivalent secure credentials. The endpoint expects the adminAuditLogId, which should be a valid UUID, as a path parameter. On success, the system returns all log details including acting admin identity, event type, event context, associated domain, log level, and timestamp data.\n\nThis API is closely related to general auditing, admin action log review, and security incident response workflows. Error scenarios include invalid/missing UUID or unauthorized access attempts, for which suitable error messages should be returned. No Personally Identifiable Information (PII) is exposed except as required in the audit context, and only to properly authorized requesters.","parameters":[{"name":"adminAuditLogId","description":"Unique identifier of the targeted admin audit log entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the requested admin audit log entry from the audit logs table.","typeName":"IShoppingMallAdminAuditLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[]},{"specification":"This operation creates a new admin audit log entry in the shopping_mall_admin_audit_logs table. It is utilized internally by platform systems to record actions or events that must be tracked for compliance, governance, or audits. Typically, audit log creation is handled by backend middleware following sensitive admin operations, but this operation exposes the creation endpoint for use by administrative subsystems or for required integrations. It supports setting all mandatory audit log fields including acting admin, action type, affected entity, domain, reason, and timestamp.","path":"/shoppingMall/admin/adminAuditLogs","method":"post","summary":"Create a new admin audit log entry (shopping_mall_admin_audit_logs table)","description":"This endpoint allows the explicit insertion of a new admin audit log record into the shopping_mall_admin_audit_logs table. The primary use case is for platform internal systems, background jobs, or integrations that must create their own audit records as part of business-critical or compliance workflows. While admin audit logs are usually produced automatically by sensitive operations (such as changing user permissions, deleting products, or modifying configuration), the API permits direct creation when needed.\n\nAll required fields, such as the acting admin's ID, action type, action reason, affected entity IDs (customer, seller, product, order, or review as applicable), domain, and timestamp, must be provided. Default values are not assumed for critical fields. Only system-level admin or internal service accounts should have access to this endpoint. Audit log creation should be validated for completeness and correctness, ensuring referential integrity to affected entities where relevant.\n\nRelated API operations include retrieval of admin audit logs for governance or review, and listing/filtering across audit log records for incident response. If required fields are missing, malformed, or referential integrity cannot be verified, the system returns appropriate validation errors. Logical deletion is not supported for these records, per audit trail governance rules.","parameters":[],"requestBody":{"description":"Information for creating a new admin audit log entry, including all mandatory attributes as specified by the shopping_mall_admin_audit_logs schema.","typeName":"IShoppingMallAdminAuditLog.ICreate"},"responseBody":{"description":"The created admin audit log entry as persisted in the admin audit logs table.","typeName":"IShoppingMallAdminAuditLog"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing admin audit log entry identified by adminAuditLogId. It allows an administrator to correct or annotate platform-wide administrative actions for compliance, transparency, or audit purposes. Administrators can update the action type, reason, domain, and context details. All updates must be logged for traceability, and audit trails are maintained in accordance with compliance requirements. The target for update is the shopping_mall_admin_action_logs table, directly tied to admin-initiated actions across users, sellers, products, orders, or reviews.","path":"/shoppingMall/admin/adminAuditLogs/{adminAuditLogId}","method":"put","summary":"Update a specific admin audit log entry in the admin action log table.","description":"This API endpoint enables updating of a specific admin audit log entry in shopping mall admin log records. Administrators may modify the action type, action reason, domain, or JSON context for the log. The operation is restricted to administrators; all changes are tracked with timestamps for history and compliance review.\n\nThe admin audit log is used for platform-wide administrative action recording such as approvals, rejections, bans, restoration actions, and compliance logs. Updates to log entries are permitted to correct or annotate previous actions, but all original data is maintained for audit trail purposes.\n\nError cases include missing log entry for the specified adminAuditLogId or attempts to update with invalid data (such as violating unique constraints or schema validations). Appropriate error messages are returned on validation failure or unauthorized access attempts.","parameters":[{"name":"adminAuditLogId","description":"The unique identifier of the admin audit log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The information to update on the admin audit log entry.","typeName":"IShoppingMallAdminActionLog.IUpdate"},"responseBody":{"description":"The updated admin audit log entry including new metadata and changes.","typeName":"IShoppingMallAdminActionLog"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently deletes a specific admin audit log entry from the admin action logs, identified by adminAuditLogId. Only platform administrators are permitted to execute this operation. It is intended for explicit erasure from the audit log table and may be performed as part of compliance with data retention policies or regulatory requirements. The operation is mapped to the shopping_mall_admin_action_logs table, with hard deletion semantics (as there is no retained soft delete marker in the schema for erased entries).","path":"/shoppingMall/admin/adminAuditLogs/{adminAuditLogId}","method":"delete","summary":"Permanently remove a specific admin audit log entry from the system.","description":"This API endpoint irreversibly deletes an admin audit log entry as identified by its adminAuditLogId field. Only administrators with adequate permissions can access this operation; the action removes the record directly from the shopping_mall_admin_action_logs table.\n\nOnce executed, this operation permanently erases the log entry and all associated data. The deletion is immediate and cannot be undone; as the admin audit log table does not retain a soft deletion marker for erased entries, the record will no longer appear in audit trails or compliance reports.\n\nPermission to perform deletion is limited to platform administrators to ensure both operational security and data retention compliance. Normal error handling applies for attempts to remove entries that do not exist or when the user lacks required authorization.","parameters":[{"name":"adminAuditLogId","description":"The unique identifier of the admin audit log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation searches and retrieves a filtered, paginated list of moderation event logs from the shopping mall platform. It targets the moderation event logs table, which tracks all moderation and exception events on products, reviews, sellers, and orders. The endpoint supports advanced search and filtering based on event type, status, affected entity, admin, creation time, and other queryable fields as described in the Prisma schema. Results include paginated moderation event logs, each detailing the moderator, affected record, event type, message, and creation time. The operation is intended for authenticated admin users who require visibility into the moderation history and to support compliance, transparency, and internal investigations across the platform.","description":"Retrieve a filtered and paginated list of moderation event logs. This API is primarily used by platform administrators to monitor, audit, and review all moderation or exception actions recorded on products, reviews, sellers, and orders. Each log references the acting admin, the affected entity (by foreign key), the event type, moderation message, and timestamp.\n\nThe endpoint enables advanced filtering including by admin, entity type, event type (flag, removal, approval, escalation, warning), and date range. It offers pagination support to facilitate navigation through extensive moderation history. All queries operate on the moderation event log entity as per the Prisma schema, which contains complete action contexts for compliance.\n\nService security is critical: only authenticated admins can access this endpoint. Unauthorized access must return an appropriate error. Implementation should enforce comprehensive logging and query performance optimizations for large search spaces. Related APIs may include detailed moderation event retrieval and admin audit log endpoints.\n\nAny business critical operation (deletion, banning, flagging, escalation, unblocking, etc.) with moderation impact should be discoverable via this listing for complete administrative oversight. In case of query or data issues, return a meaningful error response including information for debugging and request traceability.","summary":"Search and retrieve a filtered, paginated list of moderation event logs (shopping_mall_moderation_event_logs table).","parameters":[],"requestBody":{"description":"Search and filter parameters for pagination, including event type, status, acting admin, affected entity reference, and optional date ranges.","typeName":"IShoppingMallModerationEventLog.IRequest"},"responseBody":{"description":"Paginated result set of moderation event log summaries matching the query, including total count and data array.","typeName":"IPageIShoppingMallModerationEventLog.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","path":"/shoppingMall/admin/moderationEventLogs","method":"patch","prerequisites":[]},{"specification":"This operation retrieves detailed information for a specific moderation event log entry identified by its unique moderationEventLogId. It targets the shopping_mall_moderation_event_logs table, which records all admin moderation actions, with links to the acting admin and affected records (seller, product, review, order). The operation returns all fields for the log entry, including references to the admin, entity, event type, moderation message, creation timestamp, and any foreign keys for audit and compliance. It is designed for admin users to access the complete context and audit trail for individual moderation events.","description":"Retrieve detailed information about a single moderation event log by its unique ID. This API is used by platform administrators to access the complete audit trail and context of specific moderation or exception events. The moderation_event_log_id path parameter must be a valid UUID referencing an existing moderation event log entry.\n\nThe returned resource includes the acting admin's identifier, affected entity foreign keys (seller, product, review, order), event type (such as flag, removal, approval, escalation, warning), moderation message, and creation timestamp. It operates strictly on the moderation event logs table as described in the Prisma schema, providing all available details for compliance and investigatory needs.\n\nPermissions: Only authenticated admins can access this endpoint. Any unauthorized request must return an error. Invalid or unfound IDs should also return proper error messages. This operation is complementary to search/list endpoints for moderation logs and may be used together for deeper investigations or operational auditing. Error handling includes validation on UUID format and resource existence.","summary":"Retrieve complete detail for a single moderation event log entry by its ID (shopping_mall_moderation_event_logs table).","parameters":[{"name":"moderationEventLogId","description":"Unique identifier of the moderation event log entry to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed moderation event log object with all available fields and context.","typeName":"IShoppingMallModerationEventLog"},"authorizationRole":"admin","authorizationType":null,"name":"at","path":"/shoppingMall/admin/moderationEventLogs/{moderationEventLogId}","method":"get","prerequisites":[]},{"specification":"This operation creates a new moderation event log entry within the system, allowing platform administrators to record actions such as policy enforcement, moderation interventions, or exception events against marketplace entities, including products, reviews, sellers, and orders. This API is associated with the shopping_mall_moderation_event_logs table. It requires all necessary moderation attributes to be provided in the request, such as event type, moderator ID, entity references, and explanatory message. The operation enforces business rules regarding which admin actions, domains, and reasons are valid, and supports full audit trail compliance. Only admin users may create a moderation event log. The entity may include context such as affected entity IDs for precise linking.","description":"Create a moderation event log entry for tracking actions performed by platform administrators on marketplace entities. The moderation event log captures detailed information about moderation interventions such as policy enforcement, abuse takedown, exception handling, and other events that require transparent logging. Each log entry contains the acting admin ID, optional references to affected sellers, products, reviews, or orders, the event type (such as flag, removal, approval, annotation, warning, escalation, etc.), a moderation message that explains the action, and a timestamp.\n\nSecurity is paramount for this operation; only platform administrators who are properly authenticated and authorized may invoke this endpoint. The action will be fully auditable for regulatory and business review. Changes made through this operation are used to maintain accountability and support post-incident investigation flows. Details provided within the log entry must comply with business requirements for classification and completeness. The moderation event log is tightly integrated with the shopping_mall_moderation_event_logs table as described in the database schema, and additional custom business logic applies for linking moderation events to relevant domain entities.\n\nThe operation requires all mandatory fields including acting admin, event type, and moderation message, and will return the created log entry on success. Error responses detail validation issues if required properties are missing or permissions are insufficient. Related operations include updating existing moderation event logs and retrieving moderation event history for audit review.","summary":"Create a new moderation event log entry (shopping_mall_moderation_event_logs table).","parameters":[],"requestBody":{"description":"New moderation event log including admin, event type, moderation message, and affected entity references.","typeName":"IShoppingMallModerationEventLog.ICreate"},"responseBody":{"description":"The newly created moderation event log entry, reflecting all input data and generated IDs/timestamps.","typeName":"IShoppingMallModerationEventLog"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/moderationEventLogs","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing moderation event log entry within the system, allowing platform administrators to correct, supplement, or further annotate previous moderation activities or audit trail records. It is linked to the shopping_mall_moderation_event_logs table and is restricted to users with administrative privileges. The operation uses a path parameter for moderationEventLogId to specify the exact log record to update. Input data may include updated moderation messages, event types, or affected entity references, in compliance with regulatory and business requirements for traceability, accuracy, and completeness. The endpoint ensures audit trail integrity by updating only permissible fields and logging the change with full detail.","description":"Update an existing moderation event log entry to correct errors, supplement details, or provide additional annotation on moderation actions performed by platform administrators. This operation targets the shopping_mall_moderation_event_logs table, and is invoked via the moderationEventLogId path parameter, identifying the record to mutate. Typical use cases include updating the event type after further review, clarifying the moderation message, or adding further references to affected marketplace entities (such as products, reviews, sellers, or orders) to provide improved traceability for regulatory or investigative purposes.\n\nOnly authenticated admin users can perform this update. Security considerations ensure that only users with proper administrative role and access rights may change audit log data, preventing tampering or unauthorized modification. The business logic ensures only permissible fields are updated (change type, moderation message, affected entity references), records the updater’s identity, and logs the timestamp of the change for full audit transparency.\n\nThe response returns the updated log entry, and errors are raised if the provided moderationEventLogId does not exist, if the admin lacks permission, or if required update fields are missing. Related operations include creation of new moderation event logs and listing of all moderation actions for audit history.","summary":"Update a moderation event log entry by log ID (shopping_mall_moderation_event_logs table).","parameters":[{"name":"moderationEventLogId","description":"The unique identifier of the moderation event log entry to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated moderation event log parameters. May include new moderation message, event type, and affected entity references.","typeName":"IShoppingMallModerationEventLog.IUpdate"},"responseBody":{"description":"The updated moderation event log entry, reflecting all changes and latest state.","typeName":"IShoppingMallModerationEventLog"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/moderationEventLogs/{moderationEventLogId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/moderationEventLogs","method":"post"},"description":"A moderation event log must be created before it can be updated. This ensures that the log entry identified by moderationEventLogId exists to apply updates or corrections."}]},{"specification":"This operation permanently deletes a moderation event log entry from the system. It is directly associated with the shopping_mall_moderation_event_logs table, enabling admin users to remove moderation or exception events such as flag actions, removals, approvals, warnings, or escalations that are no longer needed for operational review or have surpassed the audit retention policy.\n\nModeration event logs are used for operational review, platform transparency, moderation queue tracking, and maintaining disciplinary records. Deleting an entry is a sensitive operation that is strictly restricted to platform administrators.\n\nSecurity is paramount for this operation; only users with administrative privileges can execute it. The operation will require the unique identifier of the target moderation event log as a path parameter. When called, the operation performs a hard delete, completely removing the log entry from the database (unless soft delete is required by business policy, which is not indicated in this schema). No response body is returned upon success, consistent with REST conventions for hard delete actions.\n\nThis operation can be used by admins to enforce data retention policies or to remove event logs that are no longer relevant for compliance, after sufficient review. Related API operations include listing moderation event logs (for review before deletion), and creating new logs for moderation actions. Errors are returned if the specified event log does not exist or the user lacks sufficient privileges.","description":"This endpoint handles the permanent deletion of a specific moderation event log. It is directly tied to the shopping_mall_moderation_event_logs table which maintains records of all moderation and exception actions (e.g., product flagging, review removal, seller warnings) performed by administrative users on platform entities.\n\nDeleting a moderation event log removes evidence of moderation actions and should only take place for events that are no longer required for compliance, investigation, or audit. This operation is available exclusively to administrators to ensure security and proper oversight; attempts by unauthorized users are logged and rejected.\n\nThe deletion action is irreversible—once a moderation event log is deleted, it cannot be recovered. The API expects the unique moderationEventLogId as a path parameter, referencing the primary key in the schema. Hard delete behavior is enforced, and the operation does not return any content on successful execution. Failure is signaled if the event does not exist or if the caller lacks admin privileges. Related endpoints allow for moderation event log review and search prior to deletion for risk mitigation.\n\n\n","summary":"Permanently delete a moderation event log (shopping_mall_moderation_event_logs table) by ID.","parameters":[{"name":"moderationEventLogId","description":"Unique identifier of the moderation event log to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/moderationEventLogs/{moderationEventLogId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/moderationEventLogs","method":"post"},"description":"A moderation event log must be created before it can be deleted. This ensures the log entry identified by moderationEventLogId exists and can be targeted for permanent removal."}]},{"specification":"This operation retrieves the detailed information of a specific notification job created by admins for scheduled or executed platform communication, such as email, SMS, push, or in-app notifications. The operation operates on the shopping_mall_notification_jobs table. It enables admins to track delivery status, targeting, configuration, actual result/outcome (including error details or recipient records), and audit history for notification campaigns. This is necessary for admins to diagnose notification delivery issues, monitor communication jobs, or verify successful user communication as required for platform compliance and user support.","description":"Retrieve and display full details of a single notification job by its unique identifier. The response includes all configuration parameters, notification type (email, push, etc.), job status, all targeting information, configured templates, result status for each recipient or group, error logs, and related audit data relevant to platform administrators. This enables the admin to audit notification effectiveness, trace communication deliveries, and review any failures or partial successes.\n\nSecurity: Only users with the 'admin' role are permitted to access this endpoint. Access is strictly logged and sensitive details such as recipient lists are provided only to authenticated admins.\n\nThe operation integrates directly with the shopping_mall_notification_jobs table, referencing fields such as job_type, job_status, target_json, config_json, and result_json. The endpoint must enforce strict access controls to prevent unauthorized data leaks. If the specified notification job does not exist or has been deleted, an appropriate error and record of access attempt must be logged in admin action log.\n\nRelated operations include listing/searching past notification jobs and creating new jobs, which admins can use to analyze past campaigns or to rerun failed communication tasks.","summary":"Get detailed information for a scheduled or executed notification job by job ID (shopping_mall_notification_jobs).","parameters":[{"name":"notificationJobId","description":"Unique identifier (UUID) of the notification job to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification job detail, including job configuration, status, targeting, communication results, and audit fields.","typeName":"IShoppingMallNotificationJob"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/notificationJobs/{notificationJobId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/notificationJobs","method":"post"},"description":"Notification job must be created before its details can be retrieved by ID."}]},{"specification":"This operation creates a new notification job for scheduled or immediate platform-wide communications initiated by admins. It operates on the shopping_mall_notification_jobs table and enables system administrators to configure, schedule, and trigger batch messaging to target users, segments, or system entities. The job configuration includes notification type (email, SMS, push, in-app), target audience definition (segments, user IDs, groups), content template selection, scheduling parameters, and retry logic if delivery fails. When created, the job is queued or executed according to the provisioning, and audit information is recorded for compliance.","description":"Create and schedule a new notification job for bulk or targeted communication from admins to platform users or groups. The API accepts a payload including all job details: type (email, push, SMS, in-app), recipient targeting options (user lists, groups, or segments encoded in JSON), configuration for content templates, scheduling or immediate execution, and optional re-delivery/retry instructions. Upon creation, the job status is set to pending or running depending on execution time, and the job is visible in the admin dashboard for status, progress, and delivery outcome monitoring.\n\nSecurity: Only authenticated admins are permitted to create notification jobs, and the requested operation is logged for auditing. The system validates all inputs including recipient targeting, template references, and job type. Attempts to schedule duplicate or unsupported jobs are rejected with clear errors.\n\nThis endpoint directly corresponds to the shopping_mall_notification_jobs entity; on job creation, all fields such as job_type, job_status, target_json, config_json, and result_json are created or initialized. Admins can inspect outcomes by using the single-job query or job list endpoints.\n\nIf scheduling options are invalid (e.g., in the past, malformed JSON), appropriate validation errors are returned and creation is aborted. Job creation also adds to the admin action log for traceability.","summary":"Create and schedule a new notification job for admin-initiated user, group, or segment communication (shopping_mall_notification_jobs).","parameters":[],"requestBody":{"description":"Data required to create a new notification job including job type, recipient targeting, config options, template, schedule, and execution parameters.","typeName":"IShoppingMallNotificationJob.ICreate"},"responseBody":{"description":"Resulting notification job object after creation, including all configuration, IDs, and status fields.","typeName":"IShoppingMallNotificationJob"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/notificationJobs","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Update a scheduled or executed notification job in the platform. This operation applies to the shopping_mall_notification_jobs table and is strictly managed by platform admins. It supports updating job status, configuration, targeting, or results for email, SMS, push, or in-app notification campaigns. Every change is audited, and only notification jobs that are not already finalized (completed or deleted) may be edited. All updates trigger audit logging and may cause retry/resend logic to be executed by notification services. This operation requires a valid notification job ID and is restricted to administrative users. Soft delete is supported with the deleted_at field.","description":"Update a platform notification job's configuration, targeting, status, or results within the shopping_mall_notification_jobs table. Typical usages include adjusting targeting for scheduled platforms notifications, modifying delivery configuration, or updating status (e.g., retry, cancel, mark as failed/success). Admin control is required—only platform administrators can perform updates.\n\nAudit logging is enforced for all edits, supporting compliance and investigations. Edits should only occur when job status allows (not already deleted or in a terminal state like 'success' or 'failed'), and downstream notification systems must be updated accordingly. Errors such as attempting to update a finalized or deleted job return clear error statuses and reasons. This corresponds to business requirements for platform-wide notification management, status tracking, and reliability/recovery. Soft delete is available (deleted_at).","summary":"Update a scheduled notification job (shopping_mall_notification_jobs table) by ID as admin.","parameters":[{"name":"notificationJobId","description":"Unique identifier of the notification job to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update object for notification job (configuration, status, targeting, or results).","typeName":"IShoppingMallNotificationJob.IUpdate"},"responseBody":{"description":"Notification job after update, reflecting all current fields from shopping_mall_notification_jobs.","typeName":"IShoppingMallNotificationJob"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/notificationJobs/{notificationJobId}","method":"put","prerequisites":[]},{"specification":"Delete (soft-delete) a scheduled or executed notification job from the platform. This operation corresponds to the shopping_mall_notification_jobs table and is restricted to platform administrators. It marks the job as deleted by setting the deleted_at timestamp, enabling compliance log retention and regulatory data removal workflows. Hard deletion is not performed; deleted jobs remain in the database for audit and potential recovery. Attempting to delete a non-existent or already deleted notification job results in a clear error. This API is secured for admin use only.","description":"Soft-delete a notification job by ID, marking the deleted_at field on the shopping_mall_notification_jobs row rather than removing the record. This aligns with audit, compliance, and operational retention requirements—deleted jobs are retained for investigation and reporting, but are excluded from operational display and cannot be executed or updated further.\n\nThe operation is only available to platform administrators, and all actions are logged as admin events for future auditability. If the target notification job does not exist or is already deleted, the operation returns a clear error message. This matches regulatory and business requirements for notification/event/job management across the admin dashboard and reporting tools.","summary":"Soft-delete a notification job by ID (shopping_mall_notification_jobs table, admin only).","parameters":[{"name":"notificationJobId","description":"Unique identifier of the notification job to delete (soft-delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/notificationJobs/{notificationJobId}","method":"delete","prerequisites":[]},{"specification":"This operation searches and retrieves a paginated list of analytics trigger records for the shoppingMall platform. The endpoint provides advanced querying, filtering, and sorting options to locate scheduled analytics/reporting jobs managed by platform admins. The underlying Prisma table is shopping_mall_analytics_triggers, which stores metadata about scheduled analytics runs, exports, and periodic aggregation jobs. The operation enables platform administrators to monitor analytics trigger status, type, schedule, outcome logs, and additional details, supporting advanced platform analytics management and reporting diagnostics.","path":"/shoppingMall/admin/analyticsTriggers","method":"patch","summary":"Search and retrieve a paginated/filterable list of analytics triggers for the shopping mall platform (shopping_mall_analytics_triggers table).","description":"Retrieve a filtered and paginated list of analytics triggers and scheduled reporting jobs configured for the shoppingMall platform. The operation enables authorized admins to explore all analytics triggers, including their type (dashboard update, report export, data rebuild), status (pending, running, success, failed, cancelled), scheduling configuration, admin ownership, and outcome logs.\n\nThis operation supports advanced searching via request body, including filtering by status, trigger type, admin ID, date ranges, and additional config properties. It is primarily intended for use in the admin dashboard as part of analytics and platform diagnostics.\n\nThe Prisma model shopping_mall_analytics_triggers includes all scheduled and executed analytics trigger jobs, with references to scheduling admin, schedule configuration, job status, outcome logs, timestamps, and deletion status. Pagination, sorting, and filter validation are enforced at the API and database level for security and performance.\n\nOnly platform admins authorized for platform diagnostics and analytics management may access this API. Role-based access control and search rate limiting apply.\n\nTypical errors include invalid query parameters, insufficient permissions, or database connectivity problems. The API returns paginated trigger summaries along with total counts for result set navigation. This operation does NOT manipulate or create analytics triggers, and only provides a read/search interface.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination criteria for analytics trigger retrieval.","typeName":"IShoppingMallAnalyticsTrigger.IRequest"},"responseBody":{"description":"Paginated list of analytics trigger summary objects and search metadata.","typeName":"IPageIShoppingMallAnalyticsTrigger.ISummary"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information for a specific analytics trigger record, identified by analyticsTriggerId, from the shopping_mall_analytics_triggers table in the shoppingMall platform. The endpoint provides admin users with all relevant metadata about the scheduled reporting/analytics job, including type, schedule config, status, outcome log, owning admin, and job timestamps. It supports admin oversight, diagnostics, and analytics management within the admin dashboard.","path":"/shoppingMall/admin/analyticsTriggers/{analyticsTriggerId}","method":"get","summary":"Retrieve detail for a specific shopping mall analytics trigger job by ID (shopping_mall_analytics_triggers table).","description":"Fetch a detailed record for a single analytics trigger (scheduled reporting, analytics, or dashboard update task) using its unique analyticsTriggerId. The operation enables authorized platform admins to view full trigger details, including trigger type, scheduling configuration, job status, run logs, admin assignment, and timestamps.\n\nThis operation corresponds to the shopping_mall_analytics_triggers table within the Prisma schema and is essential for admin review, job diagnostics, and platform monitoring in the admin dashboard.\n\nPermissions: Only authenticated platform admins with analytics management rights may call this API. Ownership and platform security are strictly enforced via role-based access control.\n\nValidation is performed on the provided analyticsTriggerId to ensure it is a valid UUID and refers to an existing analytics trigger record. Typical error cases include invalid analyticsTriggerId, insufficient privileges, or if the record was soft deleted or purged from the database.","parameters":[{"name":"analyticsTriggerId","description":"Unique identifier (UUID) of the analytics trigger record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed analytics trigger object, including configuration, status, schedule, outcome logs, and timestamps.","typeName":"IShoppingMallAnalyticsTrigger"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Creates a new analytics trigger for the Shopping Mall platform. This operation is based on the shopping_mall_analytics_triggers table in the Prisma schema. It allows platform admins to configure scheduled analytics or reporting jobs, such as exporting reports or updating dashboards. Each trigger includes type, schedule, targeting, and job configuration settings. Only platform admins are authorized to perform this operation. Upon success, the new analytics trigger configuration will be persisted and can be referenced by its unique ID.","description":"This API endpoint allows platform administrators to establish new analytics triggers for the scheduled execution of platform analytics jobs, dashboard report generation, or export jobs. According to the Prisma schema, each trigger is stored in the shopping_mall_analytics_triggers table with fields including trigger_type, schedule_config_json, status, and admin linkage.\n\nThe operation requires all business and schedule parameters to be specified in the request body. The trigger_type controls what type of analytics or data export the job is. The schedule_config_json defines recurring schedule or one-time execution, and status field sets the job as pending for future execution by the analytics engine. Only administrative users (admins) have authorization to create or manage platform triggers as defined by system policy.\n\nAll created analytics triggers can subsequently be managed or updated using the corresponding update endpoints, and the platform will maintain a full audit trail of all such jobs for compliance and diagnostic review. Proper error responses are returned for invalid or incomplete configurations and for any authorization failure.","summary":"Create a new analytics trigger configuration (shopping_mall_analytics_triggers table)","parameters":[],"requestBody":{"description":"Properties and configuration data for creating a new analytics trigger.","typeName":"IShoppingMallAnalyticsTrigger.ICreate"},"responseBody":{"description":"The complete analytics trigger configuration and job details.","typeName":"IShoppingMallAnalyticsTrigger"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/analyticsTriggers","method":"post","name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Updates an existing analytics trigger configuration for the Shopping Mall platform, using the analytics trigger's unique identifier. This operation is linked to the shopping_mall_analytics_triggers table in the Prisma schema. It permits platform admins to modify scheduled analytics/report jobs, adjusting properties such as trigger type, schedule, status, or configuration details. Only platform admins may use this endpoint. The record will be updated and the changes reflected in future platform analytics executions.","description":"This API endpoint allows platform administrators to update or modify an existing analytics trigger definition, which schedules analytics reporting or dashboard jobs for the shopping mall platform. The analytics triggers table (shopping_mall_analytics_triggers) includes all configuration for recurring or one-off jobs, including the trigger type (dashboard_update, report_export, etc), schedule configuration, run status, and additional job metadata.\n\nThe operation requires the unique analyticsTriggerId as a path parameter for targeting the existing record, and a valid update configuration in the request body. Only admins have permission to perform this operation, as it affects platform-level analytics and reporting. All updates are recorded for compliance and operational debugging, with the updated trigger configuration being returned on success.\n\nCommon use cases include changing the schedule of a dashboard refresh, disabling/enabling analytics exports, or correcting configuration errors before a job is due to run. Error responses cover invalid triggers, authorization failures, and invalid data in payloads.","summary":"Update an existing analytics trigger configuration (shopping_mall_analytics_triggers table)","parameters":[{"name":"analyticsTriggerId","description":"Unique identifier (UUID) of the analytics trigger to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties and configuration data for updating an analytics trigger.","typeName":"IShoppingMallAnalyticsTrigger.IUpdate"},"responseBody":{"description":"The updated analytics trigger configuration and job details.","typeName":"IShoppingMallAnalyticsTrigger"},"authorizationRoles":["admin"],"path":"/shoppingMall/admin/analyticsTriggers/{analyticsTriggerId}","method":"put","name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation allows an administrator to permanently remove an analytics trigger from the system by its unique identifier. This operation is associated with the shopping_mall_analytics_triggers table in the Prisma schema, which stores scheduled or executed platform analytics and reporting jobs. When an analytics trigger is erased, its scheduling information, associated results, and configuration details are deleted and it will no longer run or be available for audit or monitoring. All deletions are logged for compliance.","description":"This operation permanently deletes an analytics trigger identified by analyticsTriggerId from the shopping_mall_analytics_triggers table. The analytics triggers table stores details about scheduled or executed platform analytics/report jobs, including scheduling configuration, status, and outcome logs. \n\nThis API is designed for administrative use and access is restricted to users with the 'admin' role. Erased analytics triggers are removed from the system and cannot be recovered. The deletion is logged in the shopping_mall_admin_action_logs table for audit trail and compliance. Triggers that are pending, running, or failed will also be removed and will not run in the future. After deletion, any references to the erased trigger should be cleaned from dependent systems or UIs.\n\nStatus and error handling follow standard platform patterns: if the specified analyticsTriggerId does not exist, a clear error is returned. The operation performs a hard delete because there is a deleted_at field for soft deletion, but erase is designed for permanent removal only available to admins, and deleted triggers will not appear in future queries.","summary":"Permanently erase an analytics trigger from the shopping_mall_analytics_triggers table by ID.","parameters":[{"name":"analyticsTriggerId","description":"Unique identifier for the analytics trigger to permanently erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/analyticsTriggers/{analyticsTriggerId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/analyticsTriggers","method":"post"},"description":"An analytics trigger must exist before it can be erased. The creation operation ensures there is a valid analytics trigger to be permanently deleted."}]}],"components":{"authorization":[{"name":"customer","description":"A regular buyer who can register, log in, browse products, add items to cart and wishlist, place orders, manage orders (track, cancel, request refund), write product reviews, and manage their own addresses.","kind":"member"},{"name":"seller","description":"A vendor who can register for a seller account, list and manage products (including variants and inventory), process orders, update shipping/tracking status, and respond to customer reviews or questions about their own products.","kind":"member"},{"name":"admin","description":"A system administrator with full access to manage all users, products, orders, categories, and oversee platform operations (including resolving disputes, handling refunds, and managing seller status).","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIShoppingMallCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSystemConfig":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSystemConfig"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallPlatformSetting.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallPlatformSetting.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCustomer.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCustomer.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCustomerAddress":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCustomerAddress"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSeller.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSeller.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSellerAddress":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSellerAddress"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallRole":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallRole"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProduct.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProduct.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductSku":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductSku"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductOption":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductOption"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductOptionValue":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductOptionValue"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCatalogImage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCatalogImage"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallInventoryLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallInventoryLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCartItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCartItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCartItem.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCartItem.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallWishlist.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallWishlist.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallWishlistItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallWishlistItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrder.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrder.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderItem.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderItem.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderShipment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderShipment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderStatusHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderStatusHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderPayment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderPayment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderCancellation":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderCancellation"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderAddress.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderAddress.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderPaymentMethod.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderPaymentMethod.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReview.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReview.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReviewImage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReviewImage"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReviewFlag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReviewFlag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReviewReply":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReviewReply"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderHistory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderHistory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCustomerServiceEvent":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCustomerServiceEvent"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallEscalation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallEscalation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAppeal":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAppeal"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdminActionLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdminActionLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdminAuditLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdminAuditLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallModerationEventLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallModerationEventLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAnalyticsTrigger.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAnalyticsTrigger.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IShoppingMallCustomer.IJoin":{"type":"object","description":"Schema for creating a new customer account (registration) in the shoppingMall platform. This schema is for the join (registration) endpoint request body for shopping_mall_customers.\n\nThe payload contains the mandatory information required to onboard a new regular customer and aligns directly with the Prisma table shopping_mall_customers. The API enforces unique constraint on email, hashes plain password client-side (never stores plaintext), captures displayable full name, and main phone. Additional internal attributes, such as status, email verification state, and timestamps, are determined upon creation, not in this DTO.\n\nDo not include system-managed or sensitive fields in this schema. Password is submitted as plain text and hashing is performed server-side. The account is not verified until email verification is completed in a separate workflow.\n\nSecurity: password field is never returned in response DTOs and must be filtered at controller level for logging/tracing. The registration schema is public, but validation is strictly enforced at API layer.\n\nCorresponds to registration/join ops for shopping_mall_customers.\n","x-autobe-prisma-schema":"shopping_mall_customers","properties":{"email":{"type":"string","format":"email","description":"Customer's unique login email address. Used for login and notifications. Must be unique across all customer accounts as enforced by Prisma schema and business logic. Standard email format is required. Email is case insensitive and compared for uniqueness. Example: user@domain.com"},"password":{"type":"string","minLength":8,"maxLength":100,"description":"Plain text password chosen by the customer. Minimum of 8 characters, maximum 100. Only accepted at registration and password reset endpoints. Must be strong according to platform validation policies (letters, digits, special characters recommended). This value will be hashed (bcrypt) at the server; hashed password is never accepted or stored via API. Password policy is enforced in handler."},"full_name":{"type":"string","minLength":2,"maxLength":100,"description":"Customer’s displayable full name for use in orders, shipping, and account management. Required string. Must not contain symbols or control characters. Example: \"Jane Kim\""},"phone":{"type":"string","minLength":8,"maxLength":20,"description":"Customer's main contact phone number. Must be a valid phone number with country code if required, only digits, plus or dash allowed. Used for account verification and notifications. Example: '+82-10-1234-5678' or '010-1234-5678'"},"address":{"$ref":"#/components/schemas/IShoppingMallCustomerAddress.ICreate","description":"Initial address to assign to the customer upon registration. Address is required on join for onboarding. The joined object must follow the IShoppingMallCustomerAddress.ICreate schema. Attach to the customer as default address."}},"required":["email","password","full_name","phone","address"]},"IShoppingMallCustomer.IAuthorized":{"type":"object","description":"This schema represents the response format after successful customer registration or authentication (join/login/refresh) API call for the shoppingMall platform. It returns a secure envelope containing essential customer profile metadata and the issued JWT tokens for API authentication. There are security considerations: this DTO never exposes sensitive credentials such as password_hash, nor audit details like IP, and is filtered to only user-facing attributes as defined in the spec.\n\nThe token payload follows standard JWT/authorization token design and always references IAuthorizationToken. The id is the customer's unique UUID as stored in shopping_mall_customers. Use this type for all authentication success responses for customer role in platform. Always pair with IAuthorizationToken schema for token property.\n\nExtra fields (profile, email, name, phone) may be included as platform evolves. Description in English as per guidelines. Never use for seller or admin role (use their own .IAuthorized types).\n","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the customer account as stored in shopping_mall_customers.id. This value is used throughout the API to reference the authenticated customer."},"email":{"type":"string","format":"email","description":"Customer's unique login email address, used for authentication and communications. This field is enforced as unique, and all registration or authentication activities reference this value. Defined in shopping_mall_customers.email."},"full_name":{"type":"string","description":"Customer's displayable full name, used for orders, account management, and profile display. Typically between 2 and 80 characters. Defined as full_name in shopping_mall_customers."},"phone":{"type":"string","description":"Main phone number for the customer, used for notifications and secondary verification. Format is E.164/+country code, but free-form entry is supported subject to validation. Referenced in shopping_mall_customers.phone."},"status":{"type":"string","description":"Current account status string value. Values typically represent states such as 'active', 'suspended', 'pending_verification', etc. Set during registration, modified by admin actions and automated flows. Defined in shopping_mall_customers.status."},"email_verified":{"type":"boolean","description":"Boolean flag indicating whether the customer has completed email verification. Only accounts with email_verified=true may access all platform features. Defined in shopping_mall_customers.email_verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 (RFC3339) format representing when the customer account was created in the system. Set once at insert. Defined as created_at in shopping_mall_customers."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format indicating when the customer account was most recently modified. Updated on every profile or status change. Referenced as updated_at in shopping_mall_customers."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional nullable timestamp indicating when the account was (soft) deleted or withdrawn, if applicable. When not deleted, this value is null. Provided for audit and compliance workflows. Sourced from shopping_mall_customers.deleted_at."},{"type":"null"}],"description":"Optional nullable timestamp indicating when the account was (soft) deleted or withdrawn, if applicable. When not deleted, this value is null. Provided for audit and compliance workflows. Sourced from shopping_mall_customers.deleted_at."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","full_name","phone","status","email_verified","created_at","updated_at","token"]},"IShoppingMallCustomer.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Customer's registered email address for authentication purposes. Must match a unique entry in shopping_mall_customers.email. Used for login and notification communications. Email format enforced as per RFC 5322."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Plaintext password provided by the customer during login. Must be at least 8 characters. Only accepted here for credential verification—never persisted in this form. Password will be securely compared (via bcrypt hash) against the stored value in shopping_mall_customers.password_hash."}},"required":["email","password"],"description":"Request payload for authenticating a shopping mall customer user. This schema is used for login APIs and must include both the unique customer email and their plaintext password. All fields are required and validated according to business and security policy. Credentials are verified against the shopping_mall_customers table."},"IShoppingMallCustomer.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string issued at prior authentication event. Must be a valid, non-expired, unrevoked refresh_token as found in shopping_mall_user_sessions. Required for obtaining new JWT access/refresh tokens in the session lifecycle. Typically an opaque string with sufficient entropy for brute-force resistance."}},"required":["refresh_token"],"description":"Request DTO for refreshing the customer JWT session. Contains only the refresh_token, which must be verified against shopping_mall_user_sessions for validity and expiration. Used to acquire new access/refresh tokens without re-entering credentials."},"IShoppingMallCustomer.IRequestPasswordReset":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the customer requesting a password reset. Must match the unique email in shopping_mall_customers. For customer-facing flows, user privacy is protected: the API must not reveal whether an email is registered. Field should be strictly validated for correct email format before passing to backend logic."}},"required":["email"],"description":"Payload for initiating a customer password reset process. This payload provides only the customer's email address, as used for account recovery workflows. The API uses this structure to record password reset requests for legitimate customers who have lost or forgotten their credentials. The email must be in valid email format. This operation is mapped directly to shopping_mall_customers (for account lookup) and shopping_mall_password_resets (for reset token issuance/workflow)."},"IShoppingMallCustomer.IPasswordResetRequestResult":{"type":"object","properties":{"result":{"const":"accepted","description":"Result indicator of the password reset request. If the request is accepted for further processing (whether or not a user exists for the email), this will be 'accepted'. Business rule: no user data or existence information should ever be revealed. The only valid response value is 'accepted'."}},"required":["result"],"description":"Response structure returned by the API after handling a password reset request from a customer. For privacy and security, regardless of whether the email is registered or not, the only allowed result is { result: 'accepted' }, complying with anti-account-enumeration requirements. This DTO is used in the password reset flow for shopping_mall_customers."},"IShoppingMallCustomer.IResetPassword":{"type":"object","x-autobe-prisma-schema":"shopping_mall_password_resets","properties":{"token":{"type":"string","description":"Reset token for password reset flow. Must match a valid, non-expired record in the shopping_mall_password_resets table.\n\nThe token should be a cryptographically generated secure string, typically sent to the customer's email when requesting a password reset. Used to identify, validate, and authorize the password reset operation."},"newPassword":{"type":"string","description":"The new plain text password to set for the customer's account.\n\nMust meet platform password policy (minimum length, complexity, etc.), but will always be hashed (using bcrypt or similar) before being stored. Should not be returned in responses or logs. Reset operations use this value to update the password_hash column in shopping_mall_customers."}},"required":["token","newPassword"],"description":"Request body for resetting a customer password.\n\nThis is used in the password reset process when a customer submits a valid reset token (previously delivered via email) and specifies their desired new password. The operation first validates the token, then updates the shopping_mall_customers.password_hash. Never returns or transmits the plain password."},"IShoppingMallCustomer.IPasswordResetResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password reset operation was successful.\n\nTrue if the token was valid, not expired or used, and the password was successfully updated in the database. False if the token was invalid, already used/expired, or the reset request failed for any reason."},"errorCode":{"oneOf":[{"type":"string","description":"Error code describing the failure reason, if any. Empty or null when success=true.\n\nProvides error context such as 'invalid_token', 'expired_token', 'token_already_used', 'weak_password', or 'internal_error', used for error messaging and UI handling."},{"type":"null"}],"description":"Error code describing the failure reason, if any. Empty or null when success=true.\n\nProvides error context such as 'invalid_token', 'expired_token', 'token_already_used', 'weak_password', or 'internal_error', used for error messaging and UI handling."}},"required":["success"],"description":"Response body indicating the outcome of the password reset operation.\n\nOn success, only 'success: true' is returned. On failure, 'success: false' is given, with optionally an errorCode describing the reason (e.g., 'invalid_token', 'expired_token', 'weak_password'). Never includes credential or account data."},"IShoppingMallCustomer.IRequestEmailVerification":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address to be verified via code or verification link for customer onboarding. Must match an existing registration attempt or pending customer account, and conform to standard email format. Typically case-insensitive and unique per customer. No action or error is exposed if the email is not found for privacy/security. Example: \"user@example.com\""}},"required":["email"],"description":"Request structure for initiating a customer email verification process in the e-commerce platform. Contains the target email address for which the verification code or link will be sent. No other input is required or used."},"IShoppingMallCustomer.IEmailVerificationRequestResult":{"type":"object","properties":{},"required":[],"description":"Result object for customer email verification initiation request. Always an empty object for privacy—never reveals existence, verification state, or sensitive info about the target email address. Success/failure handled out-of-band (e.g., email sent/logged)."},"IShoppingMallCustomer.IVerifyEmail":{"type":"object","properties":{"token":{"type":"string","description":"The one-time email verification token issued to the customer for activating their account email address. Must be provided exactly as delivered via email. This token is unique, time-limited, and case-sensitive. It is stored and validated against the shopping_mall_email_verifications table."}},"required":["token"],"description":"Payload for verifying a customer's email address with a one-time verification token. Used in the email verification step for customer onboarding and authentication workflows. Token must match an existing, unexpired record in the system to successfully complete verification and activate the customer's account."},"IShoppingMallCustomer.IEmailVerificationResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the email verification was successful (true) or failed (false)."},"message":{"type":"string","description":"A user-facing message describing the result of the email verification attempt, e.g., 'Email verified successfully', 'Token expired or invalid', or further next steps. Messages are localized and should be appropriate for both success and failure scenarios."}},"required":["success","message"],"description":"Result object for a customer's email verification attempt. Used as the response body for email verification endpoints to indicate overall success or failure and provide an actionable message for frontend display. No sensitive data is returned."},"IShoppingMallSeller.IJoin":{"type":"object","x-autobe-prisma-schema":"shopping_mall_sellers","properties":{"email":{"type":"string","format":"email","description":"Unique email address for the seller login/authentication. This must be a valid email and is used for contacting the seller and for sign-in. Defined as unique in the underlying Prisma schema."},"password":{"type":"string","description":"Plain text password chosen by the seller user at registration time. Only the plain password is accepted here and will be hashed by the backend. Never send password_hash from the client."},"business_name":{"type":"string","description":"Formal business entity name of the seller, required for legal identification and invoice generation. This is displayed on product listings, invoices, and admin dashboards."},"contact_name":{"type":"string","description":"The personal name (not business name) of the primary contact for the seller account, used for support and communications."},"phone":{"type":"string","description":"Primary phone number for the seller, used for notifications, verification, and support contact."},"kyc_document_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI to the uploaded KYC document (such as business registration or ID) if provided at join time. This is optional at registration, but required before full approval. May be left null at creation."},"business_registration_number":{"type":"string","description":"Mandatory legal registration number for the seller's business entity. Must be unique and is used for compliance, approval, and payment operations."}},"required":["email","password","business_name","contact_name","phone","business_registration_number"],"description":"Request body for registering a new seller account on the platform. Accepts only the plain password (never password_hash). All business validation and uniqueness constraints follow the underlying schema. Password is hashed on the server side as per security policy."},"IShoppingMallSeller.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID, string) of the seller account that has just been authenticated/registered. Direct match to shopping_mall_sellers.id."},"email":{"type":"string","description":"The seller's login email address. Uniquely identifies the seller account. Used for authentication and platform communications.\n\nInput is required to be unique platform-wide. Must be a valid formatted email address."},"business_name":{"type":"string","description":"Legal or formal name of the seller's business, as registered on the platform and used for KYC/business verification, catalog display, and compliance. Must be unique per-seller and visible on seller-facing areas such as order invoices or product detail pages."},"contact_name":{"type":"string","description":"Name of the primary account holder, for use in support, KYC, and business contact workflows. Can be a person or division name."},"phone":{"type":"string","description":"Main telephone or mobile number for KYC verification, support, and notifications related to business account events. Must be provided and verified according to admin workflow."},"kyc_document_uri":{"oneOf":[{"type":"string","description":"URI of the uploaded business registration document or personal KYC file. Used for seller registration and compliance checks as per business workflow. Optional at registration, but required for approval."},{"type":"null"}],"description":"This field is optional. If present, it should reference a public file uploaded for KYC."},"approval_status":{"type":"string","description":"Current approval status for the business entity and seller account. Determines onboarding transition: expected states are 'pending', 'approved', 'suspended', 'rejected'. Used to gate access to seller features and catalog listing."},"business_registration_number":{"type":"string","description":"Business registration number as required by law for sellers on the platform. Uniquely identifies the legal business entity. Used for compliance and platform tax/legal reporting."},"email_verified":{"type":"boolean","description":"Indicates whether email verification flow has been completed for platform authentication. False at initial registration; true after email confirmation."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp, stored in UTC as ISO-8601. Set by the database on insert and never modified."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this seller record. Used for audit trails and change detection."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the seller account was soft-deleted (withdrawn) by user or admin; if null, account is active. Non-null indicates account is not available for login or management."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","business_name","contact_name","phone","approval_status","business_registration_number","email_verified","created_at","updated_at","token"],"description":"Seller JWT/token authorization response. Returned upon registration (join) or login. Contains only non-sensitive seller identification and the JWT token information, following standard IAuthorized response structure. Never includes password, password_hash, or secrets. The token contains all necessary payload for session management."},"IShoppingMallSeller.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Seller's unique login email address. Used for authentication and communications. Must match the email used during seller registration. Example: 'sellername@businessdomain.com'."},"password":{"type":"string","minLength":8,"maxLength":255,"description":"Seller's plaintext password for authentication during login. Minimum 8 characters, must satisfy password policy as enforced during registration. Never returned in responses. Example: 'S3curePassw0rd!'."}},"required":["email","password"],"description":"Login request payload for authenticating a seller in the shopping mall platform.\n\nThis object includes the seller's account email (registered at sign-up) and plaintext password (for verification against the stored password hash in the backend). Password must not be hashed here—the server will perform hashing and comparison. Fields must comply with business login policies and validation constraints as described in the requirements analysis and Prisma schema. Used for /auth/seller/login endpoint."},"IShoppingMallSeller.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","minLength":32,"maxLength":1024,"description":"The refresh token previously issued to the seller after login or token refresh. Used to request new JWT tokens for prolonged sessions. Must match a valid, non-revoked token associated with a session in the system.\nExample: 'eyJhbGciOi...abcdef...etc'."}},"required":["refresh_token"],"description":"Request body for refreshing seller authentication tokens in session management.\n\nThis DTO contains a single required property 'refresh_token', which is the long-lived session token associated with the authenticated seller's account. The value must match the corresponding active session maintained in shopping_mall_user_sessions. Used for /auth/seller/refresh endpoint. No additional actor or credential fields required or accepted."},"IShoppingMallAdmin.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_admins","properties":{"email":{"type":"string","format":"email","description":"Admin's unique email address for login and communications, as required by the shopping_mall_admins Prisma schema. Must be globally unique and properly formatted per RFC 5322. Acts as the primary contact and identifier for administrator authentication and audit purposes."},"password":{"type":"string","description":"The admin's raw password, accepted securely over HTTPS during registration. Plain text password that will be hashed and stored as 'password_hash' server-side; never store or transmit hashes from the client. Must meet platform password complexity requirements."},"full_name":{"type":"string","description":"Admin's full name for audit and dashboard tracking. Used for identification purposes in administrative logs, audit actions, dashboard displays, and all areas where administrative actions are attributed. Must comply with internal naming conventions."},"status":{"type":"string","description":"Admin account status (e.g., 'active', 'disabled', 'suspended'). Determines if the admin can log in and perform actions. Typically set to 'pending' on creation until verified or manually approved by platform super admin. Corresponds to the 'status' field in shopping_mall_admins."}},"required":["email","password","full_name"],"description":"DTO for registering a new admin account in the shopping_mall_admins table. Used during administrator onboarding. All required fields correspond directly to Prisma columns. Security best practices mandate backend hashing of the plaintext password field on registration; password_hash is never accepted or stored from the client. Status defaults to 'pending' if not specified. Only has the properties present in the underlying schema; no extraneous properties allowed. Two-factor authentication (if required) is handled in a separate flow after initial registration. All values are validated for format and uniqueness at the business and schema layers."},"IShoppingMallAdmin.IAuthorized":{"type":"object","x-autobe-prisma-schema":"shopping_mall_admins","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the admin account, as stored in the shopping_mall_admins table. Used as the principal key for identifying administrator role and for JWT claim principal."},"email":{"type":"string","format":"email","description":"Admin's email address used for login and contact. Returned for information and display purposes in admin dashboards. Fetched directly from shopping_mall_admins."},"full_name":{"type":"string","description":"Full name of the admin for identification in audits and management dashboards. Directly corresponds to the shopping_mall_admins.full_name Prisma column."},"status":{"type":"string","description":"Current admin account status such as 'active', 'pending', 'suspended', or 'disabled'. Controls platform access. Value must match the status in shopping_mall_admins and may inform frontend UI/UX or platform feature gating for admin role."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of last successful login to the administrator panel, for audit/compliance and security monitoring. Null if never logged in."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created, as assigned by the system on registration. Used for audit and timeline review."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when any attribute of the admin account was last updated. Tracks last modification of name, status, 2FA, etc., for auditing and risk analysis."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for logical admin removal. Null unless the account has been deleted. Used for compliance and possible data retention rules."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","full_name","status","created_at","updated_at","token"],"description":"Authorization envelope response for admins issued after successful join or login. Conforms to IAuthorized pattern, with standard JWT 'token' property referencing IAuthorizationToken type. No secret 2FA credentials, hashes, or sensitive information is ever included in this DTO. Used for downstream API authentication and dashboard display. Must be the system-of-record for the authenticated admin session and user claims."},"IShoppingMallAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator's email used for login/authentication. Must match the stored record in shopping_mall_admins table."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Plaintext password provided at login. Backend compares this using a secure hash (BCrypt) against password_hash in shopping_mall_admins. Never stored directly."}},"required":["email","password"],"description":"DTO for admin login credentials. Used as request body for authentication API integrating with shopping_mall_admins table. Enforces required fields and password policy. DO NOT submit hashed password in this object—only plaintext for credential validation. Descriptions reference Prisma schema and compliance constraints."},"IShoppingMallAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token issued during initial admin login. Must exactly match a non-revoked, non-expired record in shopping_mall_user_sessions for this admin."}},"required":["refresh_token"],"description":"DTO for admin session/token refresh operation. Used as request body for obtaining new access/refresh tokens. Ensures token matches admin session and complies with expiration/revocation business logic. Descriptions reference corresponding Prisma schema fields."},"IShoppingMallCategory.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Used to retrieve a specific subset of category records from the full result set. 1-based, and must be a positive integer."},"limit":{"type":"integer","description":"Number of category records to return per page. Used to control batch size for pagination, with platform configuration typically limiting upper bounds to avoid excess memory use or result set size. Defaults vary by API, but typically 20. Must be a positive integer."},"parent_id":{"type":"string","format":"uuid","description":"Optional filter to return only categories that are immediate children of the specified parent category. Must be a valid UUID, or left null/undefined for top-level/root search."},"name_ko":{"type":"string","description":"Filter for category name in Korean. Supports substring/partial match for search. Used for multilingual user interface and administrative searches."},"name_en":{"type":"string","description":"Filter for category name in English. Supports partial or substring search for finding categories in English-localized displays."},"is_active":{"type":"boolean","description":"Boolean flag to filter only active (enabled) or inactive (disabled) categories. Used by admin tools for category lifecycle management."},"display_order":{"type":"integer","description":"Optional filter/sort parameter to order or filter categories by display order index. 0-based, integer. Used for admin sorting and to control displayed navigation order."},"sort":{"oneOf":[{"const":"display_order","description":"Field to sort category results by, such as 'display_order', 'created_at', 'name_ko', or 'name_en'. Used with 'order' to define query result ordering."},{"const":"created_at","description":"Field to sort category results by, such as 'display_order', 'created_at', 'name_ko', or 'name_en'. Used with 'order' to define query result ordering."},{"const":"name_ko","description":"Field to sort category results by, such as 'display_order', 'created_at', 'name_ko', or 'name_en'. Used with 'order' to define query result ordering."},{"const":"name_en","description":"Field to sort category results by, such as 'display_order', 'created_at', 'name_ko', or 'name_en'. Used with 'order' to define query result ordering."}],"description":"Field to sort category results by, such as 'display_order', 'created_at', 'name_ko', or 'name_en'. Used with 'order' to define query result ordering."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction for categories. Typically 'asc' for ascending or 'desc' for descending. Used in conjunction with 'sort' to specify ordering."},{"const":"desc","description":"Sort order direction for categories. Typically 'asc' for ascending or 'desc' for descending. Used in conjunction with 'sort' to specify ordering."}],"description":"Sort order direction for categories. Typically 'asc' for ascending or 'desc' for descending. Used in conjunction with 'sort' to specify ordering."},"search":{"type":"string","description":"General search keyword, used to find categories by partial matches in name or description fields across localizations."}},"required":[],"description":"Request parameters for searching, filtering, sorting, and paginating category lists in the shopping mall platform. This DTO is referenced by endpoints that return lists of shopping mall categories. All fields are optionals and provide flexible search capabilities for both customer-facing and admin dashboards.\n\nFields include pagination controls (page, limit), parent_id for hierarchical filtering, localized name filters, is_active for status, display_order for navigation, and full-text search. Enum fields sort and order control sort target and direction. All property types, constraints, and default values are derived from the business requirements and Prisma schema for shopping_mall_categories. Security and validation are handled by the application layer."},"IShoppingMallCategory":{"type":"object","x-autobe-prisma-schema":"shopping_mall_categories","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Globally unique UUID identifier for the category record as defined in shopping_mall_categories. Used as a reference in products, catalogs, navigation, and ERD relationships."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent category's ID (UUID). Null for root categories. Implements a recursive self-referencing relationship for category hierarchies. Used to build full navigation and category trees from the root to leaves."},"name_ko":{"type":"string","description":"Category name in Korean. Required for full localization support. Must be unique within the parent category in Korean. Used as the primary display name for Korean interfaces and search."},"name_en":{"type":"string","description":"Category name in English. Required for internationalization and multilingual admin dashboards. Must be unique within the parent category in English. Used for English-language display and search."},"description_ko":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional descriptive text for the category in Korean. Provides richer classification and catalog context for Korean users. Used in admin dashboard, navigation, or for SEO. Can be null or empty."},"description_en":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional descriptive text for the category in English. Used for internationalization, catalog navigation, or SEO for English-language users. May be null or empty if not set."},"display_order":{"type":"integer","description":"Ordering index (0-based integer) for display in navigation hierarchies. Categories are typically sorted by this value within their parent. Used by admin tools for fine-grained navigation and catalog structure."},"is_active":{"type":"boolean","description":"Indicates whether the category and its children are active/enabled across the platform. If false, this category and all subcategories are excluded from public search and navigation. Used in admin tools for category lifecycle and moderation workflows."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the category. Automatically set at insert time. Used for audit, sorting, and business reporting. (ISO 8601, Prisma DateTime)"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this category record. Used to invalidate caches and trigger re-index events. Updated by admin category edits. (ISO 8601, Prisma DateTime)"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of soft deletion for this category. Null if not deleted; otherwise, marks the logical deletion for audit/logging. (ISO 8601, Prisma DateTime or null). When set, category is hidden from public navigation and search."}},"required":["id","name_ko","name_en","display_order","is_active","created_at","updated_at"],"description":"Hierarchical category tree node in the shopping mall e-commerce platform. Maps to the 'shopping_mall_categories' table in the Prisma database schema. Used for product categorization, search, catalog structure, and admin navigation management. Supports full multi-language naming and tree navigation. Contains parent/child structure, display order, is_active state for platform-wide control, and audit fields for compliance and reporting. This schema definition directly aligns with the entity-level documentation in the provided ERD and Prisma schema. All business rules, constraints, and field purposes are documented in field descriptions."},"IShoppingMallCategory.ICreate":{"type":"object","properties":{"parent_id":{"type":"string","format":"uuid","description":"Optional parent category's ID. Root categories have null parent_id. This field establishes category hierarchy. Must reference an existing category UUID or null for root."},"name_ko":{"type":"string","description":"Category name in Korean. Required for localization support. Unique within the parent category."},"name_en":{"type":"string","description":"Category name in English. Required for localization support. Unique within the parent category."},"description_ko":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category description in Korean. Used for longer text or category explanation."},"description_en":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category description in English. Used for longer text or category explanation."},"display_order":{"type":"integer","description":"Ordering index for display in navigation, 0-based. Allows admin sorting of sibling categories."},"is_active":{"type":"boolean","description":"Whether the category is active/enabled across the platform. Inactive disables all subcategories and associated products."}},"required":["name_ko","name_en","display_order","is_active"],"description":"Schema for creating a new product category in the shopping_mall_categories table. Supports hierarchical category tree, localization, display ordering, and enable/disable toggling.\n\n- parent_id: Optional parent category UUID for hierarchy (null for root)\n- name_ko: Required Korean category name (unique within parent)\n- name_en: Required English category name (unique within parent)\n- description_ko: Optional long description in Korean\n- description_en: Optional long description in English\n- display_order: Required integer for navigation sort order (0-based)\n- is_active: Required boolean for enabling/disabling category\n\nReferences shopping_mall_categories model comment and business rules for navigation and admin display."},"IShoppingMallCategory.IUpdate":{"type":"object","properties":{"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"New parent category's ID. Set to null for root. Must reference an existing category UUID or null."},"name_ko":{"type":"string","description":"Updated category name in Korean. Must be unique within the parent category if changed."},"name_en":{"type":"string","description":"Updated category name in English. Must be unique within the parent category if changed."},"description_ko":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated or cleared description in Korean. Pass null to remove existing description."},"description_en":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated or cleared description in English. Pass null to remove existing description."},"display_order":{"type":"integer","description":"Updated ordering index for navigation (0-based). Determines sibling sort order."},"is_active":{"type":"boolean","description":"Set active/enabled status. Inactive disables subcategories/products recursively."}},"required":[],"description":"Schema for updating an existing product category in the shopping_mall_categories table. Allows partial or full update of any category property. All properties are optional for flexible PATCH/PUT semantics.\n\n- parent_id: Update hierarchy/parent (null for root)\n- name_ko: Update Korean name (unique within parent)\n- name_en: Update English name (unique within parent)\n- description_ko: Update or clear Korean description\n- description_en: Update or clear English description\n- display_order: Update sort index\n- is_active: Enable/disable category (recursively disables children/products if set false)\n\nReferences full update rules and unique constraint enforcement from the Prisma schema."},"IShoppingMallSystemConfig.IRequest":{"type":"object","properties":{"config_key":{"type":"string","description":"System-wide unique config key (case-insensitive, e.g. 'enable_payments', 'max_cart_size').\nUsed for filtering configurations by key in admin UI or settings queries."},"config_scope":{"type":"string","description":"Config scope (e.g., 'global', 'payment', 'product', 'review').\nDefines the grouping of configuration entries for querying or administration."},"value_type":{"type":"string","description":"Stored value type for this config (e.g., 'string', 'int', 'boolean', 'json').\nUsed for typed queries and type-based filtering in tools."},"status":{"type":"string","description":"Active or inactive configuration entry, for admin visibility. Not directly in schema but may exist in admin request model filtering."},"page":{"type":"integer","description":"Page number for pagination. Minimum: 1. Defaults to 1."},"limit":{"type":"integer","description":"Maximum number of entries in a page. Defaults to 20. Maximum typically 100."}},"required":[],"description":"Admin search/filter/pagination criteria for system configuration records. Used to search, filter, and paginate the shopping_mall_system_configs records in the admin panel. All properties are optional filters for querying by config key, scope, type, status, with optional pagination. Based on Prisma model column documentation."},"IShoppingMallSystemConfig":{"type":"object","x-autobe-prisma-schema":"shopping_mall_system_configs","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the system configuration record. Must be a UUID according to schema."},"config_key":{"type":"string","description":"System-wide unique config key (case-insensitive, e.g. 'enable_payments', 'max_cart_size').\nRequired to uniquely identify the configuration within a given scope."},"config_scope":{"type":"string","description":"Namespace or logical scope for configuration. Examples: 'global', 'payment', 'product'. Required for grouping settings and namespacing keys."},"value_type":{"type":"string","description":"Describes what type the value is: 'string', 'int', 'boolean', 'double', or 'json'. Only one value type is valid per record. Used for dynamic config retrieval, admin validation, and safe data typing."},"string_value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"String value for configs stored as string (nullable for non-string configs). Used for configs with value_type = 'string'."},"int_value":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Integer value for configs of int type. Nullable for non-int-value configs. Used for value_type = 'int'."},"double_value":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Double (floating-point) value for configs with value_type = 'double'. Nullable for others."},"boolean_value":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Boolean value for configs with value_type = 'boolean'. Null for other types."},"json_value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"JSON-encoded string for complex configs. Used for value_type = 'json' only. Nullable for other types."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when config record was created. ISO 8601 format, required for audit and ordering."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update for this config record, used for cache invalidation and audit."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. If present, config is logically deleted and unavailable to normal queries."}},"required":["id","config_key","config_scope","value_type","created_at","updated_at"],"description":"Single system configuration record. Maps directly to the shopping_mall_system_configs Prisma table. Describes a feature flag, platform setting, or toggle for runtime behavior. Supports string, int, double, boolean, or JSON-typed values, only one value property populated for each record. Includes audit and soft-delete fields, with detailed documentation from schema comments."},"IShoppingMallSystemConfig.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_system_configs","properties":{"config_key":{"type":"string","description":"System-wide unique config key (case-insensitive, e.g. 'enable_payments', 'max_cart_size'). Used as the business identifier for this runtime setting in all system and API references. Keys are unique per config_scope and must not duplicate within the same scope."},"config_scope":{"type":"string","description":"Config scope (e.g., 'global', 'payment', 'product', 'review'). Used for logical grouping and namespacing of config keys. Required and must correspond to the correct system domain for downstream filtering and admin UI grouping."},"value_type":{"type":"string","description":"Indicates the type of configuration value for safe retrieval and display. Allowed types are: 'string', 'int', 'boolean', 'double', 'json'. This controls which value field is populated and should be referenced. Only one value field must be populated according to this indicated type."},"string_value":{"type":"string","description":"(Nullable) Value field for configurations of value_type 'string'. Must only be set when value_type is 'string'."},"int_value":{"type":"integer","description":"(Nullable) Value field for configurations of value_type 'int'. Must only be set when value_type is 'int'."},"double_value":{"type":"number","description":"(Nullable) Value field for configurations of value_type 'double'. Must only be set when value_type is 'double'."},"boolean_value":{"type":"boolean","description":"(Nullable) Value field for configurations of value_type 'boolean'. Must only be set when value_type is 'boolean'."},"json_value":{"type":"string","description":"(Nullable) Value field for configurations of value_type 'json'. Must only be set when value_type is 'json'. The JSON structure should be provided as stringified JSON (to fit DB schema)."}},"required":["config_key","config_scope","value_type"],"description":"DTO schema for creating a system configuration entry. References the shopping_mall_system_configs Prisma model. Required fields include config_key, config_scope, and value_type. Exactly one of the value fields (string_value, int_value, double_value, boolean_value, json_value) should be non-null according to value_type. The other fields must be omitted or set to null as appropriate. Used by platform admins to define or update dynamic runtime settings such as feature flags or operational limits. All properties must conform to business requirements for uniqueness, typing, and auditability."},"IShoppingMallSystemConfig.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_system_configs","properties":{"config_key":{"type":"string","description":"(Optional) System-wide config key to update. Only update when changing the business identifier for this config. Follows same requirements as on creation for uniqueness within config_scope."},"config_scope":{"type":"string","description":"(Optional) Config scope for the config key to update. Enables migration or regrouping of config within domain. If specified, must remain unique with config_key."},"value_type":{"type":"string","description":"(Optional) New type for configuration value. Allowed types are: 'string', 'int', 'boolean', 'double', 'json'. Use when changing the data structure or intended business use of this setting. Only one value field must match the selected type."},"string_value":{"type":"string","description":"(Nullable) Updated string value for configs where value_type is 'string'. Must remain consistent with type."},"int_value":{"type":"integer","description":"(Nullable) Updated int value for configs where value_type is 'int'. Must remain consistent with type."},"double_value":{"type":"number","description":"(Nullable) Updated double value for configs where value_type is 'double'. Must remain consistent with type."},"boolean_value":{"type":"boolean","description":"(Nullable) Updated boolean value for configs where value_type is 'boolean'. Must remain consistent with type."},"json_value":{"type":"string","description":"(Nullable) Updated JSON value for configs where value_type is 'json'. Stringified JSON object structure only. Must remain consistent with type."}},"required":[],"description":"DTO for updating one or more fields of a system configuration entry. References the shopping_mall_system_configs Prisma model. All fields are optional; provide only those being updated. Exactly one of the value fields should be non-null and the others null/omitted according to the (possibly new) value_type. Uniqueness and typing validation rules apply as in creation. Used in admin setting workflow to change runtime config values, types, or scope assignment for feature flags, rate limits, credentials, etc."},"IShoppingMallPlatformSetting.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number to retrieve in paginated responses. Defaults to 1 if unspecified, must be >= 1."},"limit":{"type":"integer","description":"Maximum number of settings to return per page (pagination size). Defaults to 20. Platform settings rarely exceed a small number, so smaller limits are typical."},"site_title":{"type":"string","description":"Optional filter: Match either the Korean or English site title for partial or full text search. Supports case-insensitive containment queries for admin dashboard filtering."},"created_from":{"type":"string","format":"date-time","description":"Optional filter: ISO8601 timestamp. Return only platform settings created after this date (inclusive). Useful for audit/reporting or filtering by newest settings."},"created_to":{"type":"string","format":"date-time","description":"Optional filter: ISO8601 timestamp. Return only settings created before this date (inclusive). Useful for audit or compliance exports."},"order_by":{"oneOf":[{"const":"created_at","description":"Sorting field for results. Allowable values are 'created_at', 'updated_at', 'site_title_ko', 'site_title_en'. Defaults to 'created_at'. Enforced as const/enum per admin UI requirements."},{"const":"updated_at","description":"Sorting field for results. Allowable values are 'created_at', 'updated_at', 'site_title_ko', 'site_title_en'. Defaults to 'created_at'. Enforced as const/enum per admin UI requirements."},{"const":"site_title_ko","description":"Sorting field for results. Allowable values are 'created_at', 'updated_at', 'site_title_ko', 'site_title_en'. Defaults to 'created_at'. Enforced as const/enum per admin UI requirements."},{"const":"site_title_en","description":"Sorting field for results. Allowable values are 'created_at', 'updated_at', 'site_title_ko', 'site_title_en'. Defaults to 'created_at'. Enforced as const/enum per admin UI requirements."}],"description":"Sorting field for results. Allowable values are 'created_at', 'updated_at', 'site_title_ko', 'site_title_en'. Defaults to 'created_at'. Enforced as const/enum per admin UI requirements."},"order_dir":{"oneOf":[{"const":"asc","description":"Sort direction for order_by. Must be one of 'asc' or 'desc'. Defaults to 'desc' (most recent first)."},{"const":"desc","description":"Sort direction for order_by. Must be one of 'asc' or 'desc'. Defaults to 'desc' (most recent first)."}],"description":"Sort direction for order_by. Must be one of 'asc' or 'desc'. Defaults to 'desc' (most recent first)."},"search":{"type":"string","description":"Optional free-text search across site_title_ko, site_title_en, site_description_ko, site_description_en fields for keyword matching. Common for admin dashboard filter bars."}},"required":[],"description":"Advanced filter, search, and pagination structure for retrieving shopping mall platform settings. Enables searching by site title, description, creation dates, and supports pagination/sorting for robust admin dashboard queries. Used on PATCH /shoppingMall/admin/platformSettings."},"IShoppingMallPlatformSetting":{"type":"object","x-autobe-prisma-schema":"shopping_mall_platform_settings","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the platform settings row. Universally unique identifier assigned by the database. Maps directly to shopping_mall_platform_settings.id."},"site_title_ko":{"type":"string","description":"Platform/site title for Korean version. Used as primary heading for storefront, admin, and all system UI in ko-KR. Follows schema shopping_mall_platform_settings.site_title_ko. This is a required, non-null, non-empty field. Example: \"쇼핑몰플랫폼\""},"site_title_en":{"type":"string","description":"Platform/site title for English version. Used as primary heading in en-US/International storefront, admin, and all preview links. Follows schema shopping_mall_platform_settings.site_title_en. This is a required, non-null, non-empty field. Example: \"Shopping Mall Platform\""},"site_description_ko":{"oneOf":[{"type":"string","description":"Platform/site description for Korean version (for SEO, legal, public disclosure, or platform info popups in Korean market). Nullable, but if present should not be longer than 2000 characters."},{"type":"null"}],"description":"Platform/site description for Korean version (for SEO, legal, public disclosure, or platform info popups in Korean market). Nullable, but if present should not be longer than 2000 characters."},"site_description_en":{"oneOf":[{"type":"string","description":"Platform/site description for English version (for SEO, international storefront metadata, About page, etc). Nullable, not required for non-en-US shops. Should not exceed 2000 chars."},{"type":"null"}],"description":"Platform/site description for English version (for SEO, international storefront metadata, About page, etc). Nullable, not required for non-en-US shops. Should not exceed 2000 chars."},"support_email":{"oneOf":[{"type":"string","description":"Customer support email address. Optional, but recommended. Used for platform-wide contact info, order-related disputes, customer service, and privacy contact. If present, must be a valid email format (no personal emails - e.g., only business/organization emails allowed)."},{"type":"null"}],"description":"Customer support email address. Optional, but recommended. Used for platform-wide contact info, order-related disputes, customer service, and privacy contact. If present, must be a valid email format (no personal emails - e.g., only business/organization emails allowed)."},"support_phone":{"oneOf":[{"type":"string","description":"Customer support phone number for platform-level contact. Optional. When provided, must be formatted according to E.164 or local conventions (string, no strict pattern in DB)."},{"type":"null"}],"description":"Customer support phone number for platform-level contact. Optional. When provided, must be formatted according to E.164 or local conventions (string, no strict pattern in DB)."},"branding_logo_uri":{"oneOf":[{"type":"string","description":"Public URI (URL) of the main branding/logo image for the platform. Typically used in header, SEO metadata, and order communications. Must be a valid URI, typically points to an uploaded CDN asset. Max 80000 characters (enforced by Prisma schema)."},{"type":"null"}],"description":"Public URI (URL) of the main branding/logo image for the platform. Typically used in header, SEO metadata, and order communications. Must be a valid URI, typically points to an uploaded CDN asset. Max 80000 characters (enforced by Prisma schema)."},"privacy_policy_uri":{"oneOf":[{"type":"string","description":"Optional URI (URL) to the privacy policy legal document for the platform. When present, must be a valid HTTPS web resource with accessibility expected. Nullable, not required if provided in another section or offline. Max 80000 characters."},{"type":"null"}],"description":"Optional URI (URL) to the privacy policy legal document for the platform. When present, must be a valid HTTPS web resource with accessibility expected. Nullable, not required if provided in another section or offline. Max 80000 characters."},"terms_of_service_uri":{"oneOf":[{"type":"string","description":"Optional URI (URL) to the terms of service document. Used in registration, signup, or legal compliance pages. If present, must be a valid web URI, preferably HTTPS and public. Nullable, up to 80000 characters."},{"type":"null"}],"description":"Optional URI (URL) to the terms of service document. Used in registration, signup, or legal compliance pages. If present, must be a valid web URI, preferably HTTPS and public. Nullable, up to 80000 characters."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) of creation for this settings record (for audit, history, rollback). Direct mapping to shopping_mall_platform_settings.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) of last update to the settings."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete flag. If present, the record is considered deleted and should not be used for active configuration/UI. Corresponds to shopping_mall_platform_settings.deleted_at; null means active row."},{"type":"null"}],"description":"Soft delete flag. If present, the record is considered deleted and should not be used for active configuration/UI. Corresponds to shopping_mall_platform_settings.deleted_at; null means active row."}},"required":["id","site_title_ko","site_title_en","created_at","updated_at"],"description":"Represents a single row of the platform-wide configuration for mall site, as stored in shopping_mall_platform_settings. Each field maps to strong-typed columns, with multilingual support for both titles and descriptions, embedded legal/branding URLs, and audit timestamps. Used for global site branding and admin preview."},"IShoppingMallPlatformSettings.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_platform_settings","properties":{"site_title_ko":{"type":"string","description":"Platform/site title for Korean version.\n\nThis field provides the main site title as seen by users in Korea. It is required for localization and SEO. Must be a non-empty string. Used for branding and navigation headers. Change with caution for established platforms."},"site_title_en":{"type":"string","description":"Platform/site title for English version.\n\nThis field sets the English language title for the site, critical for internationalization and SEO outside Korea. Must be a non-empty string. Required for all platforms supporting English locale users."},"site_description_ko":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional platform/site description for Korean locale, used for SEO and UI presentation. This field may be omitted or set to null if not required."},"site_description_en":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional platform/site description for English locale, used for SEO and UI/metadata display. May be omitted or null if not available."},"support_email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer support email address for public display and user help contact. Use a valid email string (e.g., 'support@domain.com') or set to null if no email contact is available. Optional in creation."},"support_phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer support phone number for public display. Useful for legal and user support. Optional during creation; set to null if not available."},"branding_logo_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Public URI to the branding logo image file. This string is a URI (URL) pointing to a CDN or file server (max length: 80000). Appears in navigation, emails, and promotional assets. Optional; leave null if not uploading during creation."},"privacy_policy_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI to the privacy policy legal document, provided for compliance and public user reference. Must be a string (URL) or null if not applicable at creation time."},"terms_of_service_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI to the terms of service legal document, to inform users of rights and responsibilities. Value should be an accessible URL; null if not yet defined. Optional during creation."}},"required":["site_title_ko","site_title_en"],"description":"Schema for creating new platform-wide settings in the shopping_mall_platform_settings table. Used by admins to define branding, localization, support contact, and legal document URIs at initial setup or after major platform changes. All required fields must be completed; optional fields may be omitted or set to null. Based on the Prisma schema definition for shopping_mall_platform_settings.\n\nThis type covers both mandatory and optional business fields for platform settings creation. Timestamps (created_at, updated_at, deleted_at) are handled by the system and not client-supplied."},"IShoppingMallPlatformSettings":{"type":"object","x-autobe-prisma-schema":"shopping_mall_platform_settings","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this platform setting record."},"site_title_ko":{"type":"string","description":"Platform/site title for Korean version. Must be non-empty for localization and SEO. Used in branding and navigation UI."},"site_title_en":{"type":"string","description":"Platform/site title for English version. Required for global/international users. Determines brand display in English language locale."},"site_description_ko":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional platform/site description for Korean viewers, supporting SEO and UI/metadata needs. May be null."},"site_description_en":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional English site description, for SEO and UI display to English locale users. May be null."},"support_email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer support email address for public contact. May be null if not set. Required for regulatory and user help contact."},"support_phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Support phone number for user assistance and regulatory compliance. Null if not available."},"branding_logo_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Public logo image URI (URL), typically for main navigation bar and branding. Max length: 80000. Null if not set."},"privacy_policy_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI (URL) for privacy policy legal document, for compliance and user reference. Null if not provided."},"terms_of_service_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URI (URL) for terms of service, as provided to users at signup and in platform footer. Null if not declared."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601). Set automatically by the system; reflects when the settings record was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (ISO 8601). Signals when any property of the settings record was last changed. Set by system update hooks."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp (ISO 8601 or null). Null if this settings record is currently active; otherwise marks removal time."}},"required":["id","site_title_ko","site_title_en","created_at","updated_at"],"description":"Complete schema for an existing platform-wide settings record (shopping_mall_platform_settings). Represents all details persisted in the database and returned by settings read APIs. Aligns with the platform's branding, customer-facing support contacts, and links to legal policies. Contains audit fields for creation, update, and soft-delete (if any). All fields correspond directly to columns in the Prisma schema."},"IShoppingMallPlatformSettings.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_platform_settings","properties":{"site_title_ko":{"type":"string","description":"Korean site title. Required for Korean locale branding and SEO in the shopping mall platform. Must be a non-empty string representing the public-facing name of the e-commerce site."},"site_title_en":{"type":"string","description":"English site title. Required for global or English branding and SEO in the shopping mall platform. Must be a non-empty string suitable for use as the e-commerce site name and branding."},"site_description_ko":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Korean language description for the site. Used for page meta, SEO, and for search engines and users seeking more detailed info about the platform. May be null if not localized or described."},"site_description_en":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"English language description for the site. Editable for SEO (meta) and display in English locale UIs. Can be null if the description is not set."},"support_email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer support email address for public display. Must be a valid email or null if not set. Used for order issues, general support, and contact points in footers and legal notices."},"support_phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer support phone number for the shopping mall. Can be omitted or null if phone support is not provided. Used for account/service/support contact UI."},"branding_logo_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Public URI to the platform's logo image. Used for branding in UI layouts, headers, or mobile splash. Optional and null if not set."},"privacy_policy_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Web URI for the privacy policy document. Should be a public link to the platform's privacy policy in compliance with applicable law. Can be null if not set."},"terms_of_service_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Web URI for the terms of service legal document. Published per compliance/contract requirements. May be null if not available yet or not required."}},"required":[],"description":"Update structure for the shopping mall platform's global settings. All fields are editable per platform administrator and written to the shopping_mall_platform_settings Prisma model. Each field manages central branding/SEO/legal contact info for the platform. Optional fields may be omitted or set to null to clear values."},"IShoppingMallCustomer.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text search filter for customer accounts. Supports searching by email, name, or phone as specified in business logic. Null disables text filter."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status filter to only include customers with specified status. Valid values are those present in the Prisma model (e.g., 'active', 'suspended', 'pending_verification'). Null disables status filter."},"email_verified":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"If true, only customers who have completed email verification will be included. If false, only unverified customers included. Null disables email_verified filter."},"created_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Search for customers created after this ISO 8601 timestamp. Null disables lower timestamp filter."},"created_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Search for customers created before this ISO 8601 timestamp. Null disables upper timestamp filter."},"updated_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter to customer accounts last updated after this ISO 8601 timestamp."},"updated_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter to customer accounts last updated before this ISO 8601 timestamp."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page index (1-based) for paginated results. Must be >=1. Null for default (first page)."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of records per page. Recommended default = 20, max = 100. Null for platform default."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field on which to sort returned items. Examples: 'created_at', 'updated_at', 'email'. If null or omitted, results follow default sorting logic (e.g. by created_at DESC)."},"order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Order direction for sorting. 'asc' or 'desc'. Null for default (usually 'desc')."}},"required":[],"description":"Search/filtering/pagination request DTO for indexing or searching shopping mall customer accounts. This structure is used for POST/PATCH list/search admins, customer, and other management endpoints. Property names and filter logic align to attributes in shopping_mall_customers as defined in the Prisma schema. Optional fields may be set to null or omitted for broader result sets, and required fields are handled as normal filter/pagination controls."},"IShoppingMallCustomer":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the customer account, as defined by the shopping_mall_customers.id field in the Prisma schema. Universally unique identifier used for direct reference throughout the platform."},"email":{"type":"string","format":"email","description":"Customer's unique login email address, used for authentication and communications. This field is enforced as unique, and all registration or authentication activities reference this value. Defined in shopping_mall_customers.email."},"full_name":{"type":"string","description":"Customer's displayable full name, used for orders, account management, and profile display. Typically between 2 and 80 characters. Defined as full_name in shopping_mall_customers."},"phone":{"type":"string","description":"Main phone number for the customer, used for notifications and secondary verification. Format is E.164/+country code, but free-form entry is supported subject to validation. Referenced in shopping_mall_customers.phone."},"status":{"type":"string","description":"Current account status string value. Values typically represent states such as 'active', 'suspended', 'pending_verification', etc. Set during registration, modified by admin actions and automated flows. Defined in shopping_mall_customers.status."},"email_verified":{"type":"boolean","description":"Boolean flag indicating whether the customer has completed email verification. Only accounts with email_verified=true may access all platform features. Defined in shopping_mall_customers.email_verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 (RFC3339) format representing when the customer account was created in the system. Set once at insert. Defined as created_at in shopping_mall_customers."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format indicating when the customer account was most recently modified. Updated on every profile or status change. Referenced as updated_at in shopping_mall_customers."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional nullable timestamp indicating when the account was (soft) deleted or withdrawn, if applicable. When not deleted, this value is null. Provided for audit and compliance workflows. Sourced from shopping_mall_customers.deleted_at."},{"type":"null"}],"description":"Optional nullable timestamp indicating when the account was (soft) deleted or withdrawn, if applicable. When not deleted, this value is null. Provided for audit and compliance workflows. Sourced from shopping_mall_customers.deleted_at."}},"required":["id","email","full_name","phone","status","email_verified","created_at","updated_at"],"description":"Comprehensive DTO representing a customer account profile in the shopping mall platform. This schema strictly reflects the Prisma model shopping_mall_customers, covering all key profile, registration, verification, and status fields. All sensitive authentication credentials (e.g., password_hash) are excluded for security. Descriptions reference original column comments and intended business context from the schema."},"IShoppingMallCustomer.IUpdate":{"type":"object","properties":{"full_name":{"type":"string","description":"Customer's full name to be updated. Must conform to business naming conventions and length constraints. Referenced by shopping_mall_customers.full_name. Optional for partial updates."},"phone":{"type":"string","description":"Customer's phone number to update. Must pass validation checks but format is unconstrained. Referenced by shopping_mall_customers.phone. Optional for partial updates."},"status":{"type":"string","description":"Status string value to set for this customer account. Only allowed fields as per business/admin policy (e.g., 'active', 'suspended'). Optional; admin-only update for maintenance or disciplinary actions. See shopping_mall_customers.status."},"email_verified":{"type":"boolean","description":"Boolean flag to mark email as verified/unverified. Generally only changed by admin or automated account flows. Optional. Sourced from shopping_mall_customers.email_verified."}},"required":[],"description":"Request DTO for updating a customer account profile in the shopping mall platform. All fields are optional and may be updated independently. Properties correspond to updatable fields in the Prisma shopping_mall_customers model, with proper business rule enforcement. This DTO does not permit direct password/hash modification, nor modification of account id or created_at fields. Input must pass all backend validation as governed by the platform's customer profile logic."},"IShoppingMallCustomerAddress.IRequest":{"type":"object","properties":{"customerId":{"type":"string","format":"uuid","description":"Unique identifier of the customer whose addresses are being queried. This is a foreign key to shopping_mall_customers.id."},"search":{"type":"string","description":"Keyword search for filtering addresses by recipient_name, phone, region, or address lines. Partial match supported. Optional."},"region":{"type":"string","description":"Search filter for administrative region. Optional."},"postal_code":{"type":"string","description":"Search filter for postal code or ZIP code. Optional."},"is_default":{"type":"boolean","description":"Search filter for default address flag."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number to fetch. Starts at 1. Optional."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Pagination: number of address records per page. Optional, defaults to 20."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sorting field for address records, values are 'created_at' or 'updated_at'."},{"const":"updated_at","description":"Sorting field for address records, values are 'created_at' or 'updated_at'."}],"description":"Sorting field for address records, values are 'created_at' or 'updated_at'."},"order":{"oneOf":[{"const":"asc","description":"Sorting order, 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sorting order, 'asc' for ascending, 'desc' for descending."}],"description":"Sorting order, 'asc' for ascending, 'desc' for descending."}},"required":["customerId"],"description":"Parameters for searching, filtering, sorting, and pagination of customer address records. Used for retrieving a customer's address book, with optional keyword searching, filtering by administrative region or postal code, filtering by default flag, and pagination controls. Sorting can be applied by creation or update time. All fields reflect the business context of a user's address management and order fulfillment scenarios."},"IShoppingMallCustomerAddress":{"type":"object","x-autobe-prisma-schema":"shopping_mall_customer_addresses","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this customer address. References shopping_mall_customer_addresses.id in the database."},"customer_id":{"type":"string","format":"uuid","description":"Owner customer of this address, references shopping_mall_customers.id. Used to enforce address ownership and privacy."},"recipient_name":{"type":"string","description":"Name of the individual receiving the shipment at this address. Typically used for shipping labels and delivery."},"phone":{"type":"string","description":"Contact number for the delivery recipient at the address. Used for shipping and delivery notifications."},"region":{"type":"string","description":"Administrative geographic region associated with the address (city/province/district). Used for delivery routing and postal validation."},"postal_code":{"type":"string","description":"Postal or ZIP code for the address. Used for carrier delivery zone and validation."},"address_line1":{"type":"string","description":"First line of the address (primary street, number, etc). Mandatory for accurate location."},"address_line2":{"oneOf":[{"type":"string","description":"Optional second line of address (apartment, unit, etc). May be null if not provided."},{"type":"null"}],"description":"Optional second line of address (apartment, unit, etc). May be null if not provided."},"is_default":{"type":"boolean","description":"Whether this is the customer's default address. Only one per customer can be set as default."},"created_at":{"type":"string","format":"date-time","description":"Date/time address entry was originally created. Used for sorting, audit, and recency logic."},"updated_at":{"type":"string","format":"date-time","description":"Date/time of last change to this address record. Used for sorting and audit."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for logical soft-deletion of the address. If present, this address is considered deleted and should not be shown in most user-facing lists."},{"type":"null"}],"description":"Timestamp for logical soft-deletion of the address. If present, this address is considered deleted and should not be shown in most user-facing lists."}},"required":["id","customer_id","recipient_name","phone","region","postal_code","address_line1","is_default","created_at","updated_at"],"description":"Represents an address managed by a customer for shipping, billing, or delivery purposes. Linked to a single customer. Contains recipient name, phone, region, postal code, two address lines, default flag, and timestamp fields for creation, updates, and deletion (soft delete). This schema is directly mapped from the shopping_mall_customer_addresses table and serves as the core type for address management, order shipping address selection, and delivery workflows."},"IShoppingMallCustomerAddress.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_customer_addresses","properties":{"recipient_name":{"type":"string","description":"The name of the individual who will receive the shipment at this address. This corresponds to shopping_mall_customer_addresses.recipient_name in the Prisma schema.\n\nShould be a full, clear name for delivery personnel. Required by business rules, length limits may apply."},"phone":{"type":"string","description":"Contact number associated with the address, for delivery issues or confirmations. Must be a valid phone number format, referencing shopping_mall_customer_addresses.phone. Required by delivery partners."},"region":{"type":"string","description":"Administrative region, typically city/province/district, as stored in shopping_mall_customer_addresses.region in Prisma schema. Used for routing and regulatory compliance, and for display in address lists."},"postal_code":{"type":"string","description":"Postal or ZIP code of the address. This is stored as shopping_mall_customer_addresses.postal_code in the schema. Required for accurate geolocation and carrier assignment."},"address_line1":{"type":"string","description":"First address line, usually street address and number. shopping_mall_customer_addresses.address_line1 in schema. Required field; must be enough for delivery to precisely reach the building/unit/house."},"address_line2":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Second line of address, often apartment, unit, building name, etc. This is shopping_mall_customer_addresses.address_line2, which is optional in the schema. Business rule: when present, helps carriers properly find entrance/delivery location. Nullable."},"is_default":{"type":"boolean","description":"Indicates that this address is the default address for this customer. shopping_mall_customer_addresses.is_default in schema. At most one address can be default per customer; updating to default may switch default status from another address to this one per business logic."}},"required":["recipient_name","phone","region","postal_code","address_line1"],"description":"Update information for a customer's address entry. This modifies recipient name, contact, region, postal code, main/secondary address lines, and \"is_default\" default selection, as defined in shopping_mall_customer_addresses.\n\nAll fields must comply with length, formatting, and validation constraints documented in the schema/ERD. Only the owner may update own address. If an address is being made default, it will unset previous default addresses for that customer. Changes to primary contact or location may cascade to in-progress orders if applicable."},"IShoppingMallSeller.IRequest":{"type":"object","properties":{"business_name":{"type":"string","description":"The legal or business entity name of the seller. Supports fuzzy/partial search. References shopping_mall_sellers.business_name in the schema. Admins and platform search may use this for onboarding analytics, KYC review, or search list filtering."},"email":{"type":"string","description":"Email address of the seller. Matches shopping_mall_sellers.email, unique per seller. Used for search, authentication support, and compliance checks."},"approval_status":{"type":"string","description":"Onboarding/operational approval status. e.g., 'pending', 'approved', 'rejected', or 'suspended'. This is shopping_mall_sellers.approval_status in the Prisma schema and an indexed column. Used for filtering lists, workflow dashboards, and batch moderation."},"created_from":{"type":"string","format":"date-time","description":"Lower bound for seller account creation timestamp. Used for searching sellers registered after this ISO 8601 date-time value. Tied to shopping_mall_sellers.created_at."},"created_to":{"type":"string","format":"date-time","description":"Upper bound for seller account creation timestamp, for filtering sellers created before this ISO 8601 date-time. References shopping_mall_sellers.created_at."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results. Defaults to 1 if omitted. Used in conjunction with limit. 1-based index."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results per page. Defaults to system configuration (typically 20). Maximum is 100 per admin policy."},"sort_by":{"oneOf":[{"const":"created_at","description":"Specifies which column to sort results by. Must be one of allowed fields: created_at, business_name, approval_status."},{"const":"business_name","description":"Specifies which column to sort results by. Must be one of allowed fields: created_at, business_name, approval_status."},{"const":"approval_status","description":"Specifies which column to sort results by. Must be one of allowed fields: created_at, business_name, approval_status."}],"description":"Specifies which column to sort results by. Must be one of allowed fields: created_at, business_name, approval_status."},"order":{"oneOf":[{"const":"asc","description":"Specifies ascending or descending sort order. Enum: asc (default), desc."},{"const":"desc","description":"Specifies ascending or descending sort order. Enum: asc (default), desc."}],"description":"Specifies ascending or descending sort order. Enum: asc (default), desc."}},"description":"Request and filter/query parameters for paginated, searchable seller listing endpoints. Each property matches a field in the shopping_mall_sellers schema and supports typical search or sorting use-cases for the seller admin dashboard or moderation flows.","required":[]},"IShoppingMallSeller":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the seller. This is the primary key from the Prisma shopping_mall_sellers table. Generated upon insertion and never changes.\n\nUsed for all relationships and references on the platform."},"email":{"type":"string","description":"The seller's login email address. Uniquely identifies the seller account. Used for authentication and platform communications.\n\nInput is required to be unique platform-wide. Must be a valid formatted email address."},"business_name":{"type":"string","description":"Legal or formal name of the seller's business, as registered on the platform and used for KYC/business verification, catalog display, and compliance. Must be unique per-seller and visible on seller-facing areas such as order invoices or product detail pages."},"contact_name":{"type":"string","description":"Name of the primary account holder, for use in support, KYC, and business contact workflows. Can be a person or division name."},"phone":{"type":"string","description":"Main telephone or mobile number for KYC verification, support, and notifications related to business account events. Must be provided and verified according to admin workflow."},"kyc_document_uri":{"oneOf":[{"type":"string","description":"URI of the uploaded business registration document or personal KYC file. Used for seller registration and compliance checks as per business workflow. Optional at registration, but required for approval."},{"type":"null"}],"description":"This is an optional field. If present, it should reference a public file uploaded for KYC."},"approval_status":{"type":"string","description":"Current approval status for the business entity and seller account. Determines onboarding transition: expected states are 'pending', 'approved', 'suspended', 'rejected'. Used to gate access to seller features and catalog listing."},"business_registration_number":{"type":"string","description":"Business registration number as required by law for sellers on the platform. Uniquely identifies the legal business entity. Used for compliance and platform tax/legal reporting."},"email_verified":{"type":"boolean","description":"Indicates whether email verification flow has been completed for platform authentication. False at initial registration; true after email confirmation."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp, stored in UTC as ISO-8601. Set by the database on insert and never modified."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this seller record. Used for audit trails and change detection."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the seller account was soft-deleted (withdrawn) by user or admin; if null, account is active. Non-null indicates account is not available for login or management."}},"required":["id","email","business_name","contact_name","phone","approval_status","business_registration_number","email_verified","created_at","updated_at"],"description":"Represents a seller entity on the shoppingMall e-commerce platform. Each seller corresponds to a record in shopping_mall_sellers. This includes contact and compliance attributes for onboarding, catalog management, order fulfillment, and regulatory requirements.\n\nAll fields align with the shopping_mall_sellers table in the provided Prisma schema and enforce strict business logic according to detailed schema and requirements analysis. Fields such as \"password_hash\" are excluded for security; only business/public/admin-appropriate fields are returned.","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallSeller.IUpdate":{"type":"object","properties":{"business_name":{"type":"string","description":"Updated legal or business name to be displayed on the platform and for compliance reporting. Must remain unique per seller; platform validation checks uniqueness and business certification on change."},"contact_name":{"type":"string","description":"Updated contact name (person or division) for business/SLA communication and audit. Changes may trigger update to KYC status by compliance backend."},"phone":{"type":"string","description":"New main business phone number for support, notification, and admin verification. Must pass platform-level phone validation logic."},"kyc_document_uri":{"oneOf":[{"type":"string","description":"New URI for KYC/business/legal document upload. Must pass platform file type and security screening."},{"type":"null"}],"description":"Update seller's compliance/KYC document file URI. If reset to null, compliance status must revert to pending/required by admin workflow."},"approval_status":{"type":"string","description":"Admin-level status override: expected values are 'pending', 'approved', 'rejected', or 'suspended'. A seller can never self-update to 'approved' or 'suspended'; only admins may do so via management flows. Regular sellers may only view this as read-only; admin update action is gated by role."},"email_verified":{"type":"boolean","description":"Indicates whether the email_verification process is completed (true) or pending (false). Typically only changed as a result of successful verification or explicit admin override."},"business_registration_number":{"type":"string","description":"Update to the registered business/company number. Must remain unique system-wide. Change will trigger compliance/KYC revalidation."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Admin-only) Logical removal of the seller account; sets timestamp to indicate withdrawal. If null, no deletion has occurred. Only admins should set this as non-null (at account closure or withdrawal—the value is system-set so updates from the API are rarely permitted in usual flows)."}},"required":[],"description":"Update payload for modifying seller account properties. All fields are optional and changes are validated for permission according to role workflows (seller vs admin). Only admin can update approval_status, deleted_at, or force reverify email. Seller may update profile details and re-supply KYC documentation. Each property is verified for type/constraints before the update is applied.\n\nField uniqueness and business logic constraints enforced per detailed platform rules and extended schema comments. If a property is omitted, original database value is retained.","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallSellerAddress.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Current page number for pagination. Must be a positive integer, typically starting from 1.","minimum":1},"limit":{"type":"integer","description":"Maximum number of address records to return per page. Typically between 1 and 100, default is 20 if not specified.","minimum":1,"maximum":100},"sort_by":{"oneOf":[{"const":"created_at","description":"Field name to sort by. Accepts fields present in the seller address schema, e.g., 'created_at', 'updated_at', 'is_primary'."},{"const":"updated_at","description":"Field name to sort by. Accepts fields present in the seller address schema, e.g., 'created_at', 'updated_at', 'is_primary'."},{"const":"is_primary","description":"Field name to sort by. Accepts fields present in the seller address schema, e.g., 'created_at', 'updated_at', 'is_primary'."},{"const":"region","description":"Field name to sort by. Accepts fields present in the seller address schema, e.g., 'created_at', 'updated_at', 'is_primary'."},{"const":"type","description":"Field name to sort by. Accepts fields present in the seller address schema, e.g., 'created_at', 'updated_at', 'is_primary'."}],"description":"Field name to sort by. Accepts fields present in the seller address schema, e.g., 'created_at', 'updated_at', 'is_primary'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order direction for the sort_by field."},{"const":"desc","description":"Sort order direction for the sort_by field."}],"description":"Sort order direction for the sort_by field."},"type":{"oneOf":[{"const":"business","description":"Filter addresses by type. Common values: 'business', 'shipping', 'return'."},{"const":"shipping","description":"Filter addresses by type. Common values: 'business', 'shipping', 'return'."},{"const":"return","description":"Filter addresses by type. Common values: 'business', 'shipping', 'return'."}],"description":"Filter addresses by type. Common values: 'business', 'shipping', 'return'."},"region":{"type":"string","description":"Filter addresses by region/city/province substring match. Case-insensitive partial search allowed."},"postal_code":{"type":"string","description":"Filter addresses by postal/zip code. Supports substring or exact search."},"recipient_name":{"type":"string","description":"Filter addresses by recipient/company name. Case-insensitive partial search."},"is_primary":{"type":"boolean","description":"Filter by whether address is marked as primary (true/false)."}},"required":[],"description":"Request parameters for searching/filtering/paginating the list of seller addresses. Allows specifying sorting, field filters, and pagination for advanced address management. Used in both seller dashboard and admin panel scenarios."},"IShoppingMallSellerAddress":{"type":"object","x-autobe-prisma-schema":"shopping_mall_seller_addresses","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the seller address record. References the primary key in shopping_mall_seller_addresses."},"seller_id":{"type":"string","format":"uuid","description":"Reference to the owning seller, corresponding to shopping_mall_sellers.id. Used for join relationships and access control."},"type":{"oneOf":[{"const":"business","description":"Address type on the seller profile. Valid values: 'business', 'shipping', or 'return' as specified in requirements."},{"const":"shipping","description":"Address type on the seller profile. Valid values: 'business', 'shipping', or 'return' as specified in requirements."},{"const":"return","description":"Address type on the seller profile. Valid values: 'business', 'shipping', or 'return' as specified in requirements."}],"description":"Address type on the seller profile. Valid values: 'business', 'shipping', or 'return' as specified in requirements."},"recipient_name":{"type":"string","description":"Name of the recipient or company for the address. Used for shipping/billing communication and logistics."},"phone":{"type":"string","description":"Contact phone number for the address location. Used for verification and delivery coordination."},"region":{"type":"string","description":"Geographical or administrative region for the address. Typically denotes city, province, or district."},"postal_code":{"type":"string","description":"Postal or ZIP code associated with the seller address. Required for shipping/return label generation."},"address_line1":{"type":"string","description":"First line of the address, usually street address and number."},"address_line2":{"type":"string","description":"Second line of address. Optional, for unit, suite, or additional location info."},"is_primary":{"type":"boolean","description":"Indicates whether this is the primary business address for the seller account."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the seller address was created in the system (ISO 8601; UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to this seller address record (ISO 8601; UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of soft deletion if address is removed. Null if not deleted. Used for audit, recovery, and compliance."}},"required":["id","seller_id","type","recipient_name","phone","region","postal_code","address_line1","is_primary","created_at","updated_at"],"description":"Full representation of a seller's address on the platform. References business, shipping, or return address with audit and relationship fields included. Follows shopping_mall_seller_addresses schema. Used in both seller self-management and admin systems for compliance, returns, and legal purposes."},"IShoppingMallSellerAddress.IUpdate":{"type":"object","description":"Object schema for updating a seller's address record in the shopping_mall_seller_addresses table for the e-commerce platform. This DTO is used when a seller or an admin wishes to update one or more modifiable address properties for a given seller address, as referenced in API endpoints for address management. Only existing schema properties are allowed. Passwords, tokens, and admin-only attributes must not be included.\n\nThis update object is PROHIBITED from containing any authentication fields, credentials, or ownership identifiers. Address management for sellers is strictly bound by business logic to enforce that only modifiable properties are included and auditing requirements are met.","x-autobe-prisma-schema":"shopping_mall_seller_addresses","properties":{"recipient_name":{"type":"string","description":"Name of the person or entity receiving shipment at this address. Used for shipping and returns. Updated per seller request or regulatory requirement."},"phone":{"type":"string","description":"Full phone number at the address location. Must be valid for local delivery/courier contact. Typically in international, but flexible, format."},"region":{"type":"string","description":"Administrative region of the address (e.g., city, district, province). Supports filtering, analytics, and delivery zoning."},"postal_code":{"type":"string","description":"Postal or ZIP code for the address, supporting delivery lookup and fraud detection. Required for most shipping carriers."},"address_line1":{"type":"string","description":"Primary street, road, or address, including number. The most important component for delivery."},"address_line2":{"type":"string","description":"Secondary address detail (apartment, suite, building, unit, floor, etc). Optional but recommended for accurate delivery."},"type":{"type":"string","description":"Nature of the address: must match business rules such as 'business','shipping','return'. Controlled by admin or seller, but NOT updatable to a non-unique for the seller."},"is_primary":{"type":"boolean","description":"Flag indicating if this address is the seller's main business address. On update, if set to true, must enforce only one address per type per seller is marked primary."}},"required":[]},"IShoppingMallAdmin.IRequest":{"type":"object","description":"Search and filtering schema for paginated retrieval of admin user profiles (shopping_mall_admins table). Used by admin dashboards for finding, filtering, and listing platform administrators for managerial, compliance, or analytics purposes. No authentication credentials or security tokens are ever permitted.\n\nTypical filters include admin status, full name, email, and registration/last login dates. Results are returned as paginated summaries for efficiency in browsing large admin user datasets.","properties":{"status":{"type":"string","description":"(Optional) Filter results by admin user status (e.g., 'active', 'disabled', or 'suspended'). This controls which admins are surfaced."},"email":{"type":"string","description":"(Optional) Filter by admin user email address. May be partial match for search or exact email for direct lookup."},"full_name":{"type":"string","description":"(Optional) Filter results by admin full name, supporting partial or normalized match. Useful for searching by name when exact email is not known."},"created_from":{"type":"string","format":"date-time","description":"(Optional) Return only admins whose account creation timestamp is after or at this ISO8601 date/time."},"created_to":{"type":"string","format":"date-time","description":"(Optional) Return only admins whose account creation timestamp is before or at this ISO8601 date/time."},"last_login_from":{"type":"string","format":"date-time","description":"(Optional) Filter for admins whose last successful login was after this ISO8601 date/time. Used for identifying recently active admins."},"last_login_to":{"type":"string","format":"date-time","description":"(Optional) Filter for admins whose last successful login was before this ISO8601 date/time."},"sort_by":{"type":"string","description":"(Optional) Name of the property to sort results by. Common fields: 'created_at', 'status', 'full_name', 'email'."},"sort_order":{"oneOf":[{"const":"asc","description":"(Optional) Controls sorting direction for search results. Must be 'asc' for ascending or 'desc' for descending."},{"const":"desc","description":"(Optional) Controls sorting direction for search results. Must be 'asc' for ascending or 'desc' for descending."}],"description":"(Optional) Controls sorting direction for search results. Must be 'asc' for ascending or 'desc' for descending."},"page":{"type":"integer","description":"(Optional) Page number for pagination, starting from 1. Used in all pageable endpoints.","minimum":1},"limit":{"type":"integer","description":"(Optional) Maximum admin records per page. Enforced by server limits; typical default 20, maximum 100.","minimum":1}},"required":[]},"IShoppingMallAdmin":{"type":"object","x-autobe-prisma-schema":"shopping_mall_admins","description":"Represents an administrator account entity within the shopping mall e-commerce platform.\n\nThis schema maps directly to the 'shopping_mall_admins' table in the Actors namespace of the Prisma database schema. It contains all core profile and authentication fields for platform administrators, as well as audit and security-related properties. The schema supports account management, including creation, detail fetch, and update operations, but does not expose sensitive password_hash values in responses. It is foundational for administrative workflows and dashboard operations, as described in the requirements analysis documentation. All fields and security rules must strictly follow the underlying database model and business logic, especially regarding audit, compliance, and access control.","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier (primary key) for the admin account, as stored in the shopping_mall_admins table."},"email":{"type":"string","format":"email","description":"The administrator's unique login email address. This must be globally unique and is used for authentication and system communications according to the platform requirements."},"full_name":{"type":"string","description":"The full name of the administrator as displayed in admin dashboards, audit logs, and platform user interfaces. Used for audit, reporting, and accountability."},"status":{"type":"string","description":"Admin account status. Typical values: 'active', 'disabled', 'suspended', etc. Reflects operational and access state, and is critical for compliance and platform security checks."},"two_factor_secret":{"oneOf":[{"type":"string","description":"The shared secret for TOTP/2FA login flows for the admin account, if configured."},{"type":"null"}],"description":"Secret key for two-factor authentication. If present, admin is required to complete 2FA during login. May be null if not yet configured. Used for enhanced platform security."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of last successful login to the administrator panel, for audit/compliance and security monitoring. Null if never logged in."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created, as assigned by the system on registration. Used for audit and timeline review."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when any attribute of the admin account was last updated. Tracks last modification of name, status, 2FA, etc., for auditing and risk analysis."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for logical admin removal. Null unless the account has been deleted. Used for compliance and possible data retention rules."}},"required":["id","email","full_name","status","created_at","updated_at"]},"IShoppingMallAdmin.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_admins","description":"Request DTO for updating an administrator account profile in the shopping mall system. This type references directly the shopping_mall_admins entity in the Prisma model.\n\nAllows allowed fields to be modified by admins or system processes, including name, status, email, and 2FA settings. Password_hash must NOT be included or exposed here—use dedicated password reset/change APIs. Required for admin management tools, profile update screens, and audit-driven adjustments. All changes are recorded via updated_at field, and modifications are tracked in audit logs for compliance.\n\nBusiness rules:\n- Only mutable fields are allowed.\n- Account status change may have side-effects (access revocation/audit).\n- Email changes must enforce uniqueness.\n- 2FA can only be set/cleared via verified admin process.\n- Non-editable fields (id, created_at, last_login_at, deleted_at) are omitted in the update DTO.\n- Fields not included in the update payload are left unchanged.","properties":{"email":{"type":"string","format":"email","description":"(Optional) New email address for the admin account. Must be unique. If not updating, omit this field."},"full_name":{"type":"string","description":"(Optional) Updated full name for the administrator. Used for dashboard and audit presentation."},"status":{"type":"string","description":"(Optional) Account status after update. Supported values: 'active', 'disabled', 'suspended', etc. Use with care, as status transitions affect access and may be audited."},"two_factor_secret":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Set or clear the TOTP (two-factor authentication) secret for the admin account. If set, admin must complete 2FA for login. Use null to clear/remove 2FA."}},"required":[]},"IShoppingMallRole.IRequest":{"type":"object","properties":{"role_name":{"type":"string","description":"Search term for the role name to match (case-insensitive, supports full or partial text matches). Used for filtering roles such as CUSTOMER, SELLER, ADMIN, etc."},"description":{"type":"string","description":"Partial or full text search criterion for role description (case-insensitive, supports trigram/partial matching for admin UI)."},"created_after":{"type":"string","format":"date-time","description":"Filter to include only roles created after the specified ISO 8601 timestamp. Useful for audit or change monitoring flows."},"created_before":{"type":"string","format":"date-time","description":"Filter to include only roles created before the specified ISO 8601 timestamp. Used for audit window or operational reporting."},"order_by":{"oneOf":[{"const":"created_at","description":"Sort field for roles. Must be one of 'created_at', 'updated_at', 'role_name', or 'description' (see admin schema)."},{"const":"updated_at","description":"Sort field for roles. Must be one of 'created_at', 'updated_at', 'role_name', or 'description' (see admin schema)."},{"const":"role_name","description":"Sort field for roles. Must be one of 'created_at', 'updated_at', 'role_name', or 'description' (see admin schema)."},{"const":"description","description":"Sort field for roles. Must be one of 'created_at', 'updated_at', 'role_name', or 'description' (see admin schema)."}],"description":"Sort field for roles. Must be one of 'created_at', 'updated_at', 'role_name', or 'description' (see admin schema)."},"order_direction":{"oneOf":[{"const":"asc","description":"Sort direction for the results set ('asc' for ascending, 'desc' for descending). Defaults to 'asc' if omitted."},{"const":"desc","description":"Sort direction for the results set ('asc' for ascending, 'desc' for descending). Defaults to 'asc' if omitted."}],"description":"Sort direction for the results set ('asc' for ascending, 'desc' for descending). Defaults to 'asc' if omitted."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (starts at 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results per page (default: 20, max: 100)."}},"required":[],"description":"Request body for searching, filtering, or paginating the list of system roles (shopping_mall_roles table). Includes fields for text search, date range filtering, sorting, and page controls. All fields are optional, but at least one should be provided for efficiency."},"IShoppingMallRole":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the role record."},"role_name":{"type":"string","description":"Role key. Uppercase, unique system role code (e.g., 'CUSTOMER', 'SELLER', 'ADMIN'). Assigned for permission checks via RBAC."},"description":{"type":"string","description":"Textual description of this role—summarizes business permissions, use cases, and assignment context (used for admin UI and compliance reporting)."},"created_at":{"type":"string","format":"date-time","description":"ISO-8601 timestamp for role creation. Used for sorting, audit, and reporting."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp, ISO-8601 encoded. Used for admin dashboards and audit timelines."}},"required":["id","role_name","description","created_at","updated_at"],"x-autobe-prisma-schema":"shopping_mall_roles","description":"Detailed schema for a single system role as stored in the shopping_mall_roles table. Each role controls user/group RBAC, with unique role_name and business-oriented description. Includes audit timestamps for full lifecycle tracking. All fields are required; this schema should not be extended with properties absent from the prisma model."},"IShoppingMallRole.ICreate":{"type":"object","properties":{"role_name":{"type":"string","description":"Role key in uppercase (e.g. CUSTOMER, SELLER, ADMIN, ...).\n\nThis property is used to uniquely identify a specific role within the e-commerce platform. The value must be unique across all roles, and it is used wherever user or system role assignments take place. Examples include: 'CUSTOMER', 'SELLER', 'ADMIN'.\n\nPlatform access and permissions are controlled through this key."},"description":{"type":"string","description":"Explanation of platform permissions for the role.\n\nProvides detailed information about what actions or access this role grants to users within the system. This is displayed in admin dashboards, platform documentation, and user profile UIs. Examples include: 'Full access for all administrative functions', 'Can manage own product listings', 'Can purchase products and manage orders'."}},"required":["role_name","description"],"description":"DTO for creating a new role in the shopping_mall_roles table.\n\nIncludes the mandatory role_name (unique, uppercase string key) and a description field explaining intended platform permissions. Creation is restricted to admin-level users. Must match business rules and audit requirements by capturing full context for new role creation.\n\nAll created roles are referenced by user assignments and permission matrices throughout the e-commerce platform.","x-autobe-prisma-schema":"shopping_mall_roles"},"IShoppingMallRole.IUpdate":{"type":"object","properties":{"role_name":{"type":"string","description":"Role key in uppercase (e.g. CUSTOMER, SELLER, ADMIN).\n\nMust be a valid unique name as used in role creation. Can be updated to correct or rebrand a role, but must not duplicate existing role keys. Used for permission/rbac matrix updates."},"description":{"type":"string","description":"Explanation of platform permissions for the role.\n\nUsed to update or revise the role's business description, shown in admin dashboards, documentation, and system prompts. Should always clearly indicate the intended access for this role (e.g., 'Read-only access to reporting module', 'Grants privilege for seller onboarding workflow')."}},"required":[],"description":"DTO for updating an existing role in the shopping_mall_roles table.\n\nAt least one field (role_name or description) must be provided for a valid update request. This is used for platform role management—allowing admin users to revise the key or explanatory text of a role for clarity, compliance, or system evolution.\n\nAny changes to role_name must observe uniqueness at the database and system level to preserve integrity of access control and audit references.","x-autobe-prisma-schema":"shopping_mall_roles"},"IShoppingMallProduct.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Text query for product name or keyword. Supports partial/fuzzy search using trigram index on name and description fields."},"category_id":{"type":"string","format":"uuid","description":"Filter products by leaf category. Only products assigned to the given category_id or its descendants are included."},"seller_id":{"type":"string","format":"uuid","description":"Filter by seller (only products listed by this seller). Useful for admin or seller dashboard product management."},"is_active":{"type":"boolean","description":"If true, show only active/published products. Default varies: true for customer views, both for admin."},"min_price":{"type":"number","description":"Lower bound on price filter (inclusive). Filters products with price >= min_price. Units are business-currency (e.g., USD, KRW)."},"max_price":{"type":"number","description":"Upper bound on price filter (inclusive). Filters products with price <= max_price. Units are business-currency (e.g., USD, KRW)."},"option_values":{"type":"array","items":{"type":"string","description":"UUID of an option value (e.g., 'Red', 'XL'). Filter products that have SKUs with all listed option values."},"description":"Array of option value IDs (UUID) to filter products supporting one or more specific values, e.g., [\"redUUID\",\"xlUUID\"]. Returns products or skus with these options."},"in_stock_only":{"type":"boolean","description":"If true, only include products with at least one SKU in stock (inventory > 0). Default: false."},"sort":{"oneOf":[{"const":"best","description":"Sort order for results. Allowed values: best, price_asc, price_desc, newest, rating, popularity. Default: best."},{"const":"price_asc","description":"Sort order for results. Allowed values: best, price_asc, price_desc, newest, rating, popularity. Default: best."},{"const":"price_desc","description":"Sort order for results. Allowed values: best, price_asc, price_desc, newest, rating, popularity. Default: best."},{"const":"newest","description":"Sort order for results. Allowed values: best, price_asc, price_desc, newest, rating, popularity. Default: best."},{"const":"rating","description":"Sort order for results. Allowed values: best, price_asc, price_desc, newest, rating, popularity. Default: best."},{"const":"popularity","description":"Sort order for results. Allowed values: best, price_asc, price_desc, newest, rating, popularity. Default: best."}],"description":"Sort order for results. Allowed values: best, price_asc, price_desc, newest, rating, popularity. Default: best."},"page":{"type":"integer","description":"Page number for paginated results, 1-based. Default: 1. Used with limit."},"limit":{"type":"integer","description":"Maximum number of products to return per page. Default: 20, max: 100. Used with page."}},"required":[],"description":"Advanced search, filtering, and pagination parameters for product catalog search and list operations. Allows fulltext, facets, category, seller, price range, availability, option filtering, and pagination. All fields optional, empty object yields default unfiltered search."},"IShoppingMallProduct":{"type":"object","x-autobe-prisma-schema":"shopping_mall_products","properties":{"id":{"type":"string","format":"uuid","description":"Product unique identifier. Primary key from shopping_mall_products.id."},"name":{"type":"string","description":"Product display name. Used in catalog search, must be unique per seller."},"description":{"type":"string","description":"Longer text description of the product, supporting rich content and SEO. May include HTML or markdown per business policy."},"is_active":{"type":"boolean","description":"Whether the product is active and currently listed for sale. Products with is_active=false are hidden from catalog/discovery and cannot be ordered."},"main_image_url":{"type":"string","description":"Primary image URL for the product, used in list/card views. May be null if not set yet."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the product record was created (ISO 8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Last modified timestamp for the product. Used for cache invalidation, search index updates."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp (null if not deleted). Non-null means logically deleted and hidden from queries."}},"required":["id","name","description","is_active","created_at","updated_at"],"description":"A product entity as represented for external response, excluding internal actor/indexing identifiers. Based on shopping_mall_products. All public, business-facing fields with proper format and security compliance. Intended for detailed or summary product responses."},"IShoppingMallProduct.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_products","properties":{"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Reference to product's seller. Corresponds with shopping_mall_sellers.id. This field is required when creating a new product. The seller must exist and must have permission to list products. UUID format."},"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Reference to the category this product is assigned to (must be a leaf). Refers to shopping_mall_categories.id. Category must exist and must be enabled/active. UUID format."},"name":{"type":"string","description":"Product display name. Must be unique for the seller. Between 2 and 100 characters, case-insensitive uniqueness required per seller. Business validation required."},"description":{"type":"string","description":"Long description of the product. Maximum 2000 characters. Must accurately describe the product for display and search purposes."},"is_active":{"type":"boolean","description":"Whether the product is currently active and listed (true = publicly displayed, false = hidden/disabled). Must be set explicitly at creation."},"main_image_url":{"oneOf":[{"type":"string","description":"Primary display image for this product. CDN/URL path. This field is optional."},{"type":"null"}],"description":"Primary display image for this product. Optionally supplied at creation. Must be a valid, accessible URL. Nullable."}},"required":["shopping_mall_seller_id","shopping_mall_category_id","name","description","is_active"],"description":"Data Transfer Object (DTO) for creating a new product in the shopping mall platform. This schema enforces all business requirements for initial product registration, referencing the shopping_mall_products Prisma model. Each property is strictly documented based on the original Prisma column comments and business domain rules. Sensitive/system fields (id, timestamps, deleted_at) are NOT settable by clients. Uniqueness, existence, and integrity constraints must be checked at the business logic and persistence layer. All field values must be validated for real-world e-commerce scenarios."},"IShoppingMallProduct.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_products","properties":{"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Optional update for the reference to the category this product is assigned to (must be a leaf). Refers to shopping_mall_categories.id. Nullable for no update. Must check permission and active status of category if changed."},"name":{"type":"string","description":"Product display name. Must remain unique within the seller's catalog (case-insensitive). Modification must maintain uniqueness per seller. 2-100 character range."},"description":{"type":"string","description":"Long description of the product. Can be updated up to 2000 characters."},"is_active":{"type":"boolean","description":"Active/listed status (true for publicly available, false for disabled). Setting to false unpublishes the product from catalog. Optional on update; omitting retains current state."},"main_image_url":{"oneOf":[{"type":"string","description":"Primary display image for this product. CDN/URL path. Optional on update."},{"type":"null"}],"description":"Primary image URL for this product. Nullable if removing image during update. String value must be a valid URL."}},"required":[],"description":"DTO for updating an existing product in the shopping mall platform, corresponding to the shopping_mall_products Prisma schema. Permits modification only of mutable fields: name, description, is_active, main_image_url, and (if permitted) category association. All fields are optional; use partial updates as per PATCH/PUT semantics. Ownership and business validation must be performed by business logic (seller or admin permission required). System fields such as id, created_at, updated_at, deleted_at are not settable by clients. Category and name uniqueness must be maintained in persistence logic. Schema precisely documents every property consistent with the underlying Prisma datamodel."},"IShoppingMallProductSku.IRequest":{"type":"object","description":"DTO for searching, filtering, and paginating the list of product SKUs (variants) for a given product as defined in the shopping_mall_product_skus table. This DTO supports advanced search scenarios for catalog and inventory management—filtering by SKU name, status, price range, inventory status, and sort/pagination options.\n\nAll properties strictly match fields in the shopping_mall_product_skus model and related filter/search conventions for paged API requests. Only properties that exist in the schema may appear here, and business logic constraints from requirements are enforced at the DTO boundary. This schema should never include properties not present in the DB models. All documentation is written in English, referencing the original Prisma model fields.","properties":{"name":{"type":"string","description":"Filter by partial or exact match of SKU display name. Referenced in the Prisma schema as 'name'. Uses GIN/Trigram index for efficient search."},"sku_code":{"type":"string","description":"Filter by SKU business code/unique identifier. Corresponds to 'sku_code' in shopping_mall_product_skus."},"status":{"type":"string","description":"Filter by enumerated SKU status, as defined in the status column (e.g. 'active', 'inactive', 'blocked')."},"price_min":{"type":"number","format":"double","description":"Minimum price (inclusive) to filter SKUs in the search result. Mapped to the 'price' field (DoublePrecision) in the Prisma model."},"price_max":{"type":"number","format":"double","description":"Maximum price (inclusive) to filter SKUs in the search result. Mapped to the 'price' field (DoublePrecision) in the Prisma model."},"created_at_from":{"type":"string","format":"date-time","description":"Filter for SKUs created at or after this timestamp (ISO 8601). Uses 'created_at' column in shopping_mall_product_skus."},"created_at_to":{"type":"string","format":"date-time","description":"Filter for SKUs created at or before this timestamp (ISO 8601)."},"updated_at_from":{"type":"string","format":"date-time","description":"Filter for SKUs updated at or after this timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Filter for SKUs updated at or before this timestamp."},"sort_by":{"oneOf":[{"const":"name","description":"Sort field for the SKU list. Allowed values: 'name', 'price', 'status', 'created_at', 'updated_at'."},{"const":"price","description":"Sort field for the SKU list. Allowed values: 'name', 'price', 'status', 'created_at', 'updated_at'."},{"const":"status","description":"Sort field for the SKU list. Allowed values: 'name', 'price', 'status', 'created_at', 'updated_at'."},{"const":"created_at","description":"Sort field for the SKU list. Allowed values: 'name', 'price', 'status', 'created_at', 'updated_at'."},{"const":"updated_at","description":"Sort field for the SKU list. Allowed values: 'name', 'price', 'status', 'created_at', 'updated_at'."}],"description":"Sort field for the SKU list. Allowed values: 'name', 'price', 'status', 'created_at', 'updated_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for the query. Allowed values: 'asc' or 'desc'."},{"const":"desc","description":"Sort order for the query. Allowed values: 'asc' or 'desc'."}],"description":"Sort order for the query. Allowed values: 'asc' or 'desc'."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results. Must be >= 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of SKUs to return per page. Maximum 100 per system limits."}},"required":[]},"IShoppingMallProductSku":{"type":"object","description":"Full representation of a product SKU (Stock Keeping Unit) from the shopping_mall_product_skus table (Catalog namespace). This DTO is used as both the main response schema and internal type for SKU fetching and mutations. Every property in this type directly maps to a single column in the Prisma model. All attributes and descriptions reference the Prisma schema comments.\n\nSensitive or non-public properties are never included per DTO requirements—only columns that exist in the schema and are needed for external DTO usage should appear. All date/time fields are in ISO 8601 format. Documentation is in English only for every property and the schema itself.","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the SKU record. Directly maps to 'id' in shopping_mall_product_skus."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Foreign key reference to the parent product's ID ('shopping_mall_product_id')."},"sku_code":{"type":"string","description":"Business-unique identifier for this SKU (column: 'sku_code')."},"name":{"type":"string","description":"Display name for the SKU (column: 'name')."},"price":{"type":"number","format":"double","description":"Sell price for this SKU as stored in the 'price' field (DoublePrecision)."},"status":{"type":"string","description":"SKU status (e.g., 'active', 'inactive', 'blocked'); field: 'status'."},"low_stock_threshold":{"oneOf":[{"type":"integer","description":"Custom low-stock notification threshold. Maps to 'low_stock_threshold', nullable."},{"type":"null"}],"description":"Custom low-stock notification threshold. Maps to 'low_stock_threshold', nullable."},"main_image_url":{"oneOf":[{"type":"string","description":"URL for the primary image of the SKU. Corresponds to 'main_image_url', nullable, VarChar(80000)."},{"type":"null"}],"description":"URL for the primary image of the SKU. Corresponds to 'main_image_url', nullable, VarChar(80000)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the SKU record (ISO 8601 format). 'created_at' field."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (ISO 8601). Maps to 'updated_at' in Prisma schema."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. Null if not deleted. Field: 'deleted_at'."}},"required":["id","shopping_mall_product_id","sku_code","name","price","status","created_at","updated_at"]},"IShoppingMallProductSku.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_product_skus","properties":{"sku_code":{"type":"string","description":"Business-unique identifier for this SKU (e.g. GTIN, or logical code).\n\nThis field must be unique among all SKUs and should conform to the seller or business's SKU code policies for inventory and reporting integrity."},"name":{"type":"string","description":"Display name for this SKU (e.g., 'Red L').\n\nUsed for identifying the variant in management interfaces and buyer selection flows. Must be unique per product for meaningful option selection."},"price":{"type":"number","format":"double","description":"Sell price for this SKU.\n\nSpecifies the retail price for this variant, in the platform's standard currency. Must be a positive value and match business/pricing rules."},"status":{"type":"string","description":"SKU status such as 'active', 'inactive', 'blocked', etc.\n\nStatus controls order eligibility and visibility in the sales UI. Typical values: 'active' (available for purchase), 'inactive', or 'blocked'.\n\nRefer to catalog status workflow for valid states."},"low_stock_threshold":{"oneOf":[{"type":"integer","description":"Custom low-stock warning threshold for this SKU (optional).\n\nWhen present, signals a stock warning at or below this level; platform default may be used if unset."},{"type":"null"}],"description":"Custom low-stock warning threshold for this SKU (optional).\n\nWhen present, signals a stock warning at or below this level; platform default may be used if unset."},"main_image_url":{"oneOf":[{"type":"string","description":"Primary SKU image URL, used in option selection. Optional: If not set, product main image is used."},{"type":"null"}],"description":"Primary SKU image URL, used in option selection. Optional: If not set, product main image is used."}},"required":["sku_code","name","price","status"],"description":"Payload for creating a new SKU (Stock Keeping Unit) associated with a specific product in the shopping mall catalog.\n\nEach SKU represents a sellable variant, uniquely identified by sku_code and a specific combination of option values (e.g., color, size). The input must specify all required attributes for the SKU, including price, status, and the set of option value IDs that define the variant identity.\n\nRefer to the shopping_mall_product_skus table for all field validations and business rules. All required fields must correspond to existing values in the catalog's option and option value definitions. Ownership and authorization are enforced by the provider logic, not here.\n\nAll fields are strictly validated based on schema constraints."},"IShoppingMallProductSku.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_product_skus","properties":{"sku_code":{"type":"string","description":"Business-unique identifier for this SKU (e.g. GTIN, or logical code).\n\nUpdates the SKU code if needed, must remain unique among all SKUs. Optional in the update schema: if not supplied, sku_code is unchanged."},"name":{"type":"string","description":"Display name for this SKU (e.g., 'Red L').\n\nUsed for identifying the variant and must be unique per product. Can be updated if required for product management."},"price":{"type":"number","format":"double","description":"Sell price for this SKU. Optional: Only update if the price changes. Value must remain positive."},"status":{"type":"string","description":"SKU status such as 'active', 'inactive', 'blocked', etc.\n\nUpdate SKU's sale state: reference catalog workflow for allowed transitions."},"low_stock_threshold":{"oneOf":[{"type":"integer","description":"Custom low-stock warning threshold for this SKU (optional).\n\nMay be set or updated by seller/admin to refine inventory warnings. Use null to clear."},{"type":"null"}],"description":"Custom low-stock warning threshold for this SKU (optional).\n\nMay be set or updated by seller/admin to refine inventory warnings. Use null to clear."},"main_image_url":{"oneOf":[{"type":"string","description":"Primary SKU image URL (optional). If not set, product main image is used."},{"type":"null"}],"description":"Primary SKU image URL (optional). If not set, product main image is used."}},"required":[],"description":"DTO for updating properties of a product SKU (Stock Keeping Unit) in the shopping mall catalog.\n\nAll fields are optional; supply only those to be updated for the SKU. Each property corresponds to a column in the shopping_mall_product_skus table. Must comply with the business rules: e.g., updates to sku_code or option values maintain uniqueness, price changes are validated, and status transitions observed."},"IShoppingMallProductOption.IRequest":{"type":"object","properties":{"productId":{"type":"string","format":"uuid","description":"(Optional, if not present, context path param is used)\n\nUnique identifier of the parent product to filter product options under. Matches shopping_mall_product_options.shopping_mall_product_id.\n\nWhen omitted, assumes product context from API path parameter."},"search":{"type":"string","description":"Search query to filter product options by name. Partial/fuzzy matches; leverages GIN/trigram indexes on product option name."},"display_order_from":{"type":"integer","description":"Lower bound for filtering product options by display order (inclusive)."},"display_order_to":{"type":"integer","description":"Upper bound for filtering product options by display order (inclusive)."},"sort":{"oneOf":[{"const":"name","description":"Sorting field for listing. One of ['name','display_order','created_at','updated_at']."},{"const":"display_order","description":"Sorting field for listing. One of ['name','display_order','created_at','updated_at']."},{"const":"created_at","description":"Sorting field for listing. One of ['name','display_order','created_at','updated_at']."},{"const":"updated_at","description":"Sorting field for listing. One of ['name','display_order','created_at','updated_at']."}],"description":"Sorting field for listing. One of ['name','display_order','created_at','updated_at']."},"order":{"oneOf":[{"const":"asc","description":"Sort direction. 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort direction. 'asc' for ascending, 'desc' for descending."}],"description":"Sort direction. 'asc' for ascending, 'desc' for descending."},"page":{"type":"integer","description":"Page number for pagination. 1-based; default 1."},"limit":{"type":"integer","description":"Records per page for pagination. Default is 20. Max is 100."}},"description":"Request parameters for advanced search/filtering/pagination of product option definitions for a product (shopping_mall_product_options).\n\nThis DTO is used by the PATCH /shoppingMall/products/{productId}/options endpoint for filtering by name/ordering/pagination.","required":[]},"IShoppingMallProductOption":{"type":"object","x-autobe-prisma-schema":"shopping_mall_product_options","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/UUID for this product option. References shopping_mall_product_options.id."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Parent product ID this option is a part of. FK to shopping_mall_products.id."},"name":{"type":"string","description":"Option display name (e.g., 'Color', 'Size'). Must be unique for this product. Indexed for fuzzy search."},"display_order":{"type":"integer","description":"Display ordering for product options (integer, 0-based, among all options of this product). Suggests UI order."},"created_at":{"type":"string","format":"date-time","description":"Date/time when this product option was created (ISO 8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Date/time when this product option was last updated (ISO 8601, UTC)."}},"required":["id","shopping_mall_product_id","name","display_order","created_at","updated_at"],"description":"Detailed DTO type representing a single product option (attribute) for a product (shopping_mall_product_options), including name, order, and audit timestamps.\n\nStrictly follows the Prisma schema for shopping_mall_product_options and omits properties not in the schema. Maps to a 'product option' like Color, Size, etc.\n"},"IShoppingMallProductOption.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Option display name (e.g. 'Color'). Required. Unique within the same product."},"display_order":{"type":"integer","description":"Ordering of options for presentation within the product. Required. Zero-based order for UI."}},"required":["name","display_order"],"x-autobe-prisma-schema":"shopping_mall_product_options","description":"Payload for creating a product option as a variant axis (e.g. color, size) for a product. This structure maps to shopping_mall_product_options in the Prisma schema. You must provide the option name (such as 'Color') and the presentation order (zero-based). The operation ensures that the name is unique within the parent product and the display order is used for arranging options on the product page. Only fields present in the Prisma schema can be included. This type is required for endpoints that create new product options for variant management."},"IShoppingMallProductOption.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Option display name (e.g. 'Color'). Must be unique within the same product. If omitted, the existing name is preserved."},"display_order":{"type":"integer","description":"Ordering of options for presentation within the product. If omitted, ordering is unchanged."}},"required":[],"x-autobe-prisma-schema":"shopping_mall_product_options","description":"Payload for updating an existing product option (such as modifying the display name or presentation order) for a product. Fields are optional. Use this when moving an option to a new order within the set or correcting naming. Mapped to shopping_mall_product_options in the Prisma schema. All updates are subject to uniqueness constraints within the parent product. This DTO is used for admin/seller endpoints that manage option editing for catalog maintenance. Only fields that exist on the option table may be updated."},"IShoppingMallProductOptionValue.IRequest":{"type":"object","properties":{"productId":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the product this option value belongs to. This allows scoping filtering or searching to a single product."},"optionId":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the product option (e.g., color, size) whose values are being listed or filtered. Ties this search to a particular attribute of a product."},"value":{"type":"string","description":"Text value of the option (e.g., 'Red', 'Large'). Searching or filtering by exact or partial match is supported in this field."},"display_order":{"type":"integer","description":"Ordering of this value among sibling values for the product option. Enables sorting by display sequence in listings or UIs. Used as a search or sorting criterion."},"created_from":{"type":"string","format":"date-time","description":"Optional filter: Only return option values created on or after this UTC datetime (ISO 8601). Used for time-based paging/queries."},"created_to":{"type":"string","format":"date-time","description":"Optional filter: Only return option values created on or before this UTC datetime (ISO 8601)."},"page":{"type":"integer","minimum":1,"description":"Page number of results to return, for paginated search/filtering. Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results per page, for paginated results. Default and max controlled by platform settings."},"sort_by":{"type":"string","description":"Field to sort results by (e.g., 'value', 'created_at', 'display_order'). Defaults to display_order if not provided."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction: 'asc' or 'desc'. Default is ascending."},{"const":"desc","description":"Sort order direction: 'asc' or 'desc'. Default is ascending."}],"description":"Sort order direction: 'asc' or 'desc'. Default is ascending."}},"required":[],"description":"Request body for searching/filtering option values (e.g., for Color, Size) belonging to a specific product option. The schema fields allow: 1) searching by value name, 2) filtering on product and option, 3) filtering by creation date, 4) paginating large lists, and 5) sorting by value or order. All fields are optional—used for advanced search, admin filtering, and UI list rendering. Matches the search/index operation for option values. This DTO is associated with GET/PATCH endpoints for option value lists. Used in both seller/admin and (read-only) customer UI contexts."},"IShoppingMallProductOptionValue":{"type":"object","x-autobe-prisma-schema":"shopping_mall_product_option_values","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Uniquely identifies this product option value in the system."},"shopping_mall_product_option_id":{"type":"string","format":"uuid","description":"The parent option for this value (foreign key). References shopping_mall_product_options.id. E.g., links 'Large' to the 'Size' option of a product."},"value":{"type":"string","description":"The display value for this product option value. E.g., for Size: 'L'; for Color: 'Blue'. Should be unique per product option. Used in SKU configuration and customer choice. Required, usually 1–32 chars."},"display_order":{"type":"integer","description":"Ordering among sibling values for UI display. Determines the order in which this value appears in the product variant picker or detail page. Typically 0-based, contiguous, and useful for UX sorting by seller/admin."},"created_at":{"type":"string","format":"date-time","description":"Created time for value (ISO 8601; UTC). Set automatically when the value is created. Used for audit trails, ordering, and advanced search."},"updated_at":{"type":"string","format":"date-time","description":"Date/time this value was last modified. Auto-managed. Important for cache invalidation, UI refresh, and synchronization with external systems."}},"required":["id","shopping_mall_product_option_id","value","display_order","created_at","updated_at"],"description":"Represents a selectable value for a specific product option (e.g., a possible color or size). This object maps to a row in the shopping_mall_product_option_values table. Key properties: id (UUID PK), shopping_mall_product_option_id (link to the owning option), value (the selection text), display_order (order for UI), and audit timestamps."},"IShoppingMallProductOptionValue.ICreate":{"type":"object","properties":{"value":{"type":"string","description":"Display value for this option (e.g., 'Red'). Reference for product variants such as color/size/material that are selectable by users. Must be unique for this product option. Usually presented as a label in the UI. Required. (Prisma: value column in shopping_mall_product_option_values table)"},"display_order":{"type":"integer","description":"Ordering among sibling option values for UX display. 0-based integer index, with lower values appearing first in UI. Required for consistent option picker experiences. (Prisma: display_order in shopping_mall_product_option_values table)"}},"required":["value","display_order"],"description":"DTO for creating a new product option value (e.g., 'Red', 'Large') on a product option (such as color, size). This is submitted by sellers or admins when defining available choices for variant SKUs for a product. All fields are required and based on the shopping_mall_product_option_values Prisma model."},"IShoppingMallProductOptionValue.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"Updated display value for this option (e.g., 'Blue'). Must remain unique among all option values for the parent product option. Changes trigger display/variant updates for existing SKUs. Optional; omit or use null to leave unchanged."},"display_order":{"type":"integer","description":"Updated sort/order index for this option value. Determines ordering in pickers/forms. Optional; omit or use null to leave unchanged."}},"required":[],"description":"DTO for updating a product option value (such as changing display text or reorder). All fields are optional; only supplied fields will be updated. All updates must comply with uniqueness and format restrictions as per the Prisma schema for shopping_mall_product_option_values."},"IShoppingMallCatalogImage.IRequest":{"type":"object","properties":{"productId":{"type":"string","format":"uuid","description":"The unique identifier (UUID) for the product to which catalog images belong. This property enables filtering image queries by product context and validates the existence of a related product record in the shopping mall catalog. Reference integrity is enforced per business logic. Required in most admin/seller use cases for catalog image management or gallery retrieval."},"skuId":{"type":"string","format":"uuid","description":"The unique identifier (UUID) for a product SKU (variant) used for filtering catalog images at the SKU-variant level. Enables targeted queries such as retrieving only images attached to a specific color/size variant. Optional depending on whether filtering is at the SKU or product level. String, must match an existing shopping_mall_product_skus.id if supplied."},"search":{"type":"string","description":"Full-text search keyword(s) to match against catalog image metadata such as alt_text, image_url, or related product/SKU codes. Used for advanced search in admin UIs or image management workflows. Typically uses case-insensitive trigram or fulltext indexes for efficient discovery."},"sortBy":{"oneOf":[{"const":"created_at","description":"The field by which to sort the image results. Accepts only whitelisted fields according to catalog business logic: 'created_at' (sort by upload time, default descending) or 'display_order' (custom gallery order)."},{"const":"display_order","description":"The field by which to sort the image results. Accepts only whitelisted fields according to catalog business logic: 'created_at' (sort by upload time, default descending) or 'display_order' (custom gallery order)."}],"description":"The field by which to sort the image results. Accepts only whitelisted fields according to catalog business logic: 'created_at' (sort by upload time, default descending) or 'display_order' (custom gallery order)."},"sortDir":{"oneOf":[{"const":"asc","description":"Sorting direction: 'asc' for ascending or 'desc' for descending. Must be used in conjunction with sortBy. If not provided, defaults to descending for created_at order (newest first) or ascending for display_order."},{"const":"desc","description":"Sorting direction: 'asc' for ascending or 'desc' for descending. Must be used in conjunction with sortBy. If not provided, defaults to descending for created_at order (newest first) or ascending for display_order."}],"description":"Sorting direction: 'asc' for ascending or 'desc' for descending. Must be used in conjunction with sortBy. If not provided, defaults to descending for created_at order (newest first) or ascending for display_order."},"page":{"type":"integer","description":"The 1-based page number for paginated image retrieval. Defaults to 1 if not specified. Used for frontend UI or API pagination."},"limit":{"type":"integer","description":"Maximum number of catalog image records to return per page. Default and maximum platform limits may apply, e.g. 20-100 images per page. Used in combination with 'page' for pagination control."}},"required":[],"description":"Request body schema for catalog image search, filtering, and pagination in the shopping mall platform. Enables product/gallery image discovery based on product/SKU, keyword query, and sorted paging. All properties are optional, with schema logic enforcing UUID format and allowable sort options. Returns paginated lists of images by IPageIShoppingMallCatalogImage."},"IShoppingMallCatalogImage":{"type":"object","x-autobe-prisma-schema":"shopping_mall_catalog_images","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier (UUID) of the catalog image record in the shopping_mall_catalog_images table. Used for CRUD operations and foreign key reference in the system."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Optional foreign key reference to the owning product's id (shopping_mall_products.id). Defines the product to which this catalog image is attached. May be null for SKU-only images."},"shopping_mall_product_sku_id":{"type":"string","format":"uuid","description":"Optional foreign key reference to the owning product SKU's id (shopping_mall_product_skus.id). Identifies the variant (color, size, option) this image represents. May be null if the image is product-level only."},"url":{"type":"string","maxLength":80000,"description":"Image CDN URL. Absolute path to the hosted image file. String, max length 80000 for platform compatibility. Must be a valid URL and support direct linking for customer-facing catalog/gallery display. Field is unique and indexed for quick lookups."},"alt_text":{"type":"string","description":"Alternative text (alt attribute) for the image, supporting accessibility and SEO best practices. Optional, but strongly encouraged for product images. Indexed for full-text search as needed."},"display_order":{"type":"integer","description":"Ordering integer for presenting images in a catalog/gallery UI. 0-based index for primary/secondary/etc. images within a product or SKU. Used to define main image or user-custom gallery order."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the catalog image record was created/uploaded. Follows ISO 8601 format and platform conventions for audit/history."}},"required":["id","url","display_order","created_at"],"description":"Represents a single catalog image record attached to a product or SKU in the shopping mall system. Maps directly to the shopping_mall_catalog_images Prisma model, which contains product-level and variant-specific (SKU) images for catalog/gallery display and management. Each catalog image holds a unique URL, display order, optional alt text, and foreign keys for parent product and SKU association. Used in image upload, search, paging/listing, and product detail UIs. Description and field definitions reference full Prisma schema comments for compliance and documentation."},"IShoppingMallCatalogImage.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_catalog_images","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product this image belongs to. References the shopping_mall_products.id column. Required for associating images at the product level. Must be a valid UUID referring to an existing product entity."},"shopping_mall_product_sku_id":{"oneOf":[{"type":"string","format":"uuid","description":"SKU this image belongs to, if applicable. References shopping_mall_product_skus.id. Optional for product-level images, required for SKU-level images. Must be a valid UUID or omitted/null for product gallery images with no specific variant context."},{"type":"null"}],"description":"SKU this image belongs to, if applicable. Use null or omit for product-level images not tied to a SKU."},"url":{"type":"string","description":"CDN or storage URL for the uploaded image asset. Must be a persistent URI as referenced by the frontend. Maximum size restrictions and allowed image types are enforced by business logic and upload pipeline. Must be unique across all catalog images."},"alt_text":{"oneOf":[{"type":"string","description":"Alternative text for accessibility. Recommended for front-end and SEO, but optional in upload. If provided, should describe the key contents of the image for screen readers. String, may be omitted or null if not supplied."},{"type":"null"}],"description":"Alternative text for accessibility, optional."},"display_order":{"type":"integer","description":"Ordering index for defining the image's position in the product or SKU gallery, 0-based. Determines the sort sequence for image display. Required and must be a non-negative integer."}},"required":["shopping_mall_product_id","url","display_order"],"description":"Creation contract for a product or SKU image within the e-commerce catalog. Maps directly to shopping_mall_catalog_images in the Prisma schema."},"IShoppingMallCatalogImage.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_catalog_images","properties":{"url":{"type":"string","description":"CDN or storage URL for the image file. If replaced, must meet business rules for allowed file types/sizes."},"alt_text":{"oneOf":[{"type":"string","description":"Alternative text for accessibility. If omitted or set to null, no alt text is stored for this image."},{"type":"null"}],"description":"Optional alternative text for screen readers and SEO; omit or null for no alt."},"display_order":{"type":"integer","description":"The 0-based order for gallery positioning of this image relative to all other images for the same product or SKU. Required for sort updates or gallery drag-and-drop. Must be a non-negative integer."}},"required":[],"description":"Update action schema for product/SKU image metadata as defined for shopping_mall_catalog_images. Only fields eligible to change after upload are exposed."},"IShoppingMallInventoryRecord.IPartialUpdate":{"type":"object","description":"Partial update schema for modifying selected fields of a product SKU's inventory record in the e-commerce platform. This type is used for PATCH operations and allows sellers or admins to update only intended fields: quantity_available, quantity_reserved, quantity_sold, low_stock_threshold, and status. At least one property must be present. Follows the business rules and validation logic outlined in the Prisma schema for shopping_mall_inventory_records. Only mutable fields are included. System-managed fields (created_at, updated_at) are not part of the input payload and are ignored if provided. Refer to business logic for field constraints: non-negative integers for quantities, allowed status values, etc. Properties are optional and may be submitted in any combination, but at least one must be present. Business rules require strict validation of permissible values and state transitions. This DTO is intended for partial inventory adjustment by authorized roles and supports compliance, audit, and rollback business flows.\n\nProperties:\n- quantity_available: Integer >= 0. The available sellable stock for the SKU.\n- quantity_reserved: Integer >= 0. Quantity held for pending orders.\n- quantity_sold: Integer >= 0. Cumulative sales count for reporting.\n- low_stock_threshold: Optional integer >= 0. Triggers low-stock warnings; null disables warning.\n- status: String. Must be a valid inventory status, e.g., 'in_stock', 'reserved', 'blocked', 'out_of_stock'. Must follow allowed transitions/business logic.\n\nUse-cases: Seller manual stock increases or decreases, admin manual corrections, system synchronizations with third party logistics, and operational controls related to order placement or cancellation.","x-autobe-prisma-schema":"shopping_mall_inventory_records","properties":{"quantity_available":{"type":"integer","description":"Available quantity for the SKU (i.e., not reserved or sold). Must be a non-negative integer. Partial update: optionally supplied for restock/decrement actions. Zero means out of stock. Minimum: 0.","minimum":0},"quantity_reserved":{"type":"integer","description":"Quantity of stock reserved for pending orders or checkout flows. Must be a non-negative integer. Optional in partial update. Used to temporarily hold stock before payment confirmation. Minimum: 0.","minimum":0},"quantity_sold":{"type":"integer","description":"Cumulative total of items sold for this SKU. Non-negative integer. Typically updated by the system on completed fulfillment; rarely modified in partial update except for admin correction. Minimum: 0.","minimum":0},"low_stock_threshold":{"oneOf":[{"type":"integer","minimum":0,"description":"Custom threshold at which low stock warning is triggered. Null disables warning for this SKU. Optional in update."},{"type":"null"}],"description":"Custom threshold for triggering a low stock warning. Null disables the warning. Integer >= 0. Optional in partial update."},"status":{"type":"string","description":"Current inventory status for the SKU (e.g., 'in_stock', 'reserved', 'blocked', 'out_of_stock'). Must follow allowed transitions and status set by business logic. Optional in partial update. Required for certain transitions (e.g., block/unblock)."}},"required":[]},"IShoppingMallInventoryRecord":{"type":"object","description":"Full schema for shopping mall inventory record that tracks inventory quantities for a product SKU. Each record holds a specific SKU's available stock, reserved (pending) quantity, cumulative sales, custom low-stock warning threshold, and current status. This type is returned by inventory queries and is the authoritative API representation for inventory state in the platform. All fields map directly to columns in the Prisma model shopping_mall_inventory_records. Field mapping for audit and business logic is strictly enforced. Used for both data retrieval (inventory status dashboards, product availability lookup, admin queries) and for full PUT replacement updates (in management/admin tool scenarios).\n\nProperties:\n- id: Unique identifier (UUID) for the inventory record.\n- shopping_mall_product_sku_id: FK to SKU for this inventory record. Each SKU has a one-to-one inventory record.\n- quantity_available: Integer >= 0. Current in-stock, sellable units.\n- quantity_reserved: Integer >= 0. Units committed to pending orders (not yet sold).\n- quantity_sold: Integer >= 0. Cumulative total of sold units. Informational/audit only; reflects business reporting not real-time stock.\n- low_stock_threshold: Optional integer >= 0. Custom threshold for low-stock warning. If null, system/global default applies or warning disabled.\n- status: String. Inventory status (e.g., 'in_stock', 'reserved', 'blocked', 'out_of_stock') reflecting business state transitions and sales eligibility.\n- created_at: Timestamp when inventory record was created (ISO 8601 date-time, UTC).\n- updated_at: Timestamp of last update.\n\nThis DTO is the canonical shape for reading/writing inventory records. Used for admin dashboards, seller tools, system integrations, and inventory audits. For business uses: never add fields outside the schema; do not invent extra relations or ignore audit timestamps.\n\nFor inventories associated with ongoing orders, status, or system audit triggers, changes to this DTO must be reflected throughout operational state and compliance logs.","x-autobe-prisma-schema":"shopping_mall_inventory_records","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the inventory record. PK in Prisma schema. Autogenerated by system."},"shopping_mall_product_sku_id":{"type":"string","format":"uuid","description":"FK to associated product SKU. This inventory record applies to the specific SKU indicated by this property. Business-internal references; required for mapping inventory back to catalog hierarchy."},"quantity_available":{"type":"integer","description":"Sellable units in stock that are not reserved or sold. Must be a non-negative integer. This represents real-time stock available for immediate purchase on the platform. Minimum: 0.","minimum":0},"quantity_reserved":{"type":"integer","description":"Units currently reserved for pending orders or ongoing checkout. Non-negative integer. Temporarily unavailable for purchase but not yet sold (payment not completed, checkout grace, etc). Minimum: 0.","minimum":0},"quantity_sold":{"type":"integer","description":"Cumulative count of sold units for this SKU. Informational field used for reporting/business audit. Not deducted from available stock. Non-negative integer. May only be updated by system triggers on order completion. Minimum: 0.","minimum":0},"low_stock_threshold":{"oneOf":[{"type":"integer","minimum":0,"description":"Threshold for triggering low stock warning banner/banner in admin or seller UI. If null, global default or system config applies."},{"type":"null"}],"description":"Custom threshold for signaling low stock to seller, admin, or front end UI. Null disables custom warning. Integer >= 0 (optional; business logic may enforce minimum values, or allow null for defaults)."},"status":{"type":"string","description":"String value indicating current inventory status: one of 'in_stock', 'reserved', 'blocked', 'out_of_stock', etc. Status codes must align with platform inventory state machine and enforced by business logic. Used for operational decisioning. REQUIRED in the full DTO."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 UTC format. Immutable, set when inventory record is first written by system. Used for lifecycle audit and compliance."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last inventory record update, in ISO 8601 UTC format. System-managed. Used for concurrency and audit."}},"required":["id","shopping_mall_product_sku_id","quantity_available","quantity_reserved","quantity_sold","status","created_at","updated_at"]},"IShoppingMallInventoryRecord.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_inventory_records","properties":{"quantity_available":{"type":"integer","description":"The new available stock for SKU for this update. Must be zero or positive integer per business requirement. Setting to zero makes SKU out-of-stock. Updated for audit and stock management.\n\nCorresponds to Prisma field: shopping_mall_inventory_records.quantity_available (Int)."},"quantity_reserved":{"type":"integer","description":"Quantity of SKU stock currently reserved (awaiting order placement/payment). Set by order processing logic or admin/seller intervention. Must be zero or positive. Audited for race-condition prevention.\n\nCorresponds to Prisma field: shopping_mall_inventory_records.quantity_reserved (Int)."},"quantity_sold":{"type":"integer","description":"Cumulative units of this SKU sold historically. Admin/seller may adjust for corrections; normally incremented automatically by order flow. Zero or positive integer. Used for reporting, but may also drive inventory business logic.\n\nCorresponds to Prisma field: shopping_mall_inventory_records.quantity_sold (Int)."},"low_stock_threshold":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional low stock warning trigger level for sellers/admin. If not set, system default applies. Used for notification and admin UX. Must be null or non-negative integer.\n\nCorresponds to Prisma field: shopping_mall_inventory_records.low_stock_threshold (Int, nullable)."},"status":{"type":"string","description":"Current inventory status for this SKU. Admissible values include:\n- 'in_stock'\n- 'reserved'\n- 'blocked'\n- 'out_of_stock'\n\nBusiness logic and enum values enforced in the application layer.\n\nCorresponds to Prisma field: shopping_mall_inventory_records.status (String)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format for this record's update. Managed automatically by business logic. Not required in request; included for reference.\n\nCorresponds to Prisma field: shopping_mall_inventory_records.updated_at (DateTime)."}},"required":["quantity_available","quantity_reserved","quantity_sold","status"],"description":"Inventory update object for a product SKU. Used for full field replacement via PUT, allowing admin/seller to set all required fields of SKU-level inventory, including available, reserved, and sold quantities, status, and low-stock audit fields. All fields must correspond to existing columns in shopping_mall_inventory_records table according to Prisma schema. Security checked against ownership. See inventory management business requirements for update logic.\n\nCorresponds to shopping_mall_inventory_records Prisma model and supports inventory correction, restocking, and administrative override flows. Do not include non-existent fields or phantom attributes."},"IShoppingMallInventoryLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination (starts at 1). Optional; system default used if not specified."},"limit":{"type":"integer","description":"Maximum number of records per page (default: 100; business maximum enforced in backend). Optional."},"sort":{"type":"string","description":"Sorting descriptor, such as '-created_at' (descending by created_at), 'quantity_changed', etc. Optional; default: '-created_at'."},"change_type":{"type":"string","description":"Filter for adjustment type. Possible values include: 'increase', 'decrease', 'block', 'unblock', 'correction', 'purchase', 'refund', 'system correction'. Optional."},"actor_type":{"type":"string","description":"Optional filter limiting results to a specific actor type (e.g., 'seller', 'admin'). Maps to the log's linked seller/admin foreign key. Optional."},"created_from":{"type":"string","format":"date-time","description":"Lower bound for filtering by log creation timestamp. ISO 8601 string. Optional."},"created_to":{"type":"string","format":"date-time","description":"Upper bound for filtering by log creation timestamp. ISO 8601 string. Optional."},"reference_id":{"type":"string","format":"uuid","description":"Optional filter by the reference order/event id (UUID); allows searching for inventory changes related to a single order."},"reason":{"type":"string","description":"Optional substring search within the reason property. Uses partial match/trigram index for efficient filtering."}},"required":[],"description":"Request body schema for searching, filtering, and paginating inventory adjustment logs for a specific product SKU. Supports business auditing, time range filtering, and actor-based queries as per business/operational requirements. All fields directly reference their Prisma schema column or mapped search logic in shopping_mall_inventory_logs."},"IShoppingMallCartItem.IRequest":{"type":"object","properties":{"cartId":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the customer's shopping cart to which cart items are being queried, filtered, or retrieved."},"productId":{"type":"string","format":"uuid","description":"Optional filter for ProductId: Only retrieve items for this product in the customer's cart."},"skuId":{"type":"string","format":"uuid","description":"Optional filter for SKUId: Only retrieve cart item referencing this particular SKU."},"search":{"type":"string","description":"Optional keyword search: queries the cart items for product or SKU names matching this value."},"sort":{"oneOf":[{"const":"added_desc","description":"Sorting configuration for cart item listing. Allowed values include 'added_desc', 'added_asc', 'name_asc', 'name_desc', 'price_asc', 'price_desc'."},{"const":"added_asc","description":"Sorting configuration for cart item listing. Allowed values include 'added_desc', 'added_asc', 'name_asc', 'name_desc', 'price_asc', 'price_desc'."},{"const":"name_asc","description":"Sorting configuration for cart item listing. Allowed values include 'added_desc', 'added_asc', 'name_asc', 'name_desc', 'price_asc', 'price_desc'."},{"const":"name_desc","description":"Sorting configuration for cart item listing. Allowed values include 'added_desc', 'added_asc', 'name_asc', 'name_desc', 'price_asc', 'price_desc'."},{"const":"price_asc","description":"Sorting configuration for cart item listing. Allowed values include 'added_desc', 'added_asc', 'name_asc', 'name_desc', 'price_asc', 'price_desc'."},{"const":"price_desc","description":"Sorting configuration for cart item listing. Allowed values include 'added_desc', 'added_asc', 'name_asc', 'name_desc', 'price_asc', 'price_desc'."}],"description":"Sorting configuration for cart item listing. Allowed values include 'added_desc', 'added_asc', 'name_asc', 'name_desc', 'price_asc', 'price_desc'."},"page":{"type":"integer","minimum":1,"description":"Which page of paginated results to retrieve. Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"The maximum number of cart items per page (default: 20, max: 100)."}},"required":[],"description":"Search/filter/sort/pagination parameters for listing or querying items in a customer's shopping cart. Used in PATCH or GET operations on cart items."},"IShoppingMallCart":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of this shopping cart. Primary key of shopping_mall_carts."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"UUID of the customer who owns this cart. References shopping_mall_customers.id."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of cart creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of last modification of this cart or one of its items."},"cart_items":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCartItem"},"description":"Array of shopping cart items currently in this cart. Each entry contains SKU, quantity, price, and timestamp fields for each item in the cart."}},"required":["id","shopping_mall_customer_id","created_at","updated_at"],"description":"Top-level entity for a shopping cart in the e-commerce platform. Represents a customer's active cart, including all metadata and current items. Core relations: customer (ownership), cart_items (contents)."},"IShoppingMallCartItem":{"type":"object","x-autobe-prisma-schema":"shopping_mall_cart_items","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. The unique identifier for the cart item record, as stored in the shopping_mall_cart_items table. This is a system-generated UUID used to distinguish each cart item."},"shopping_mall_cart_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the cart to which this item belongs. References the parent shopping_mall_carts.id record, forming the foreign key for cart line item association."},"shopping_mall_product_sku_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) for the product SKU (Stock Keeping Unit) this cart item references. Only one SKU can be selected per cart item. References shopping_mall_product_skus.id in the catalog."},"quantity":{"type":"integer","description":"Number of units of this SKU the customer intends to purchase. Must be at least 1 (enforced by business logic) and not exceed cart/SKU maximum configured by admin. Always integer precision."},"unit_price_snapshot":{"type":"number","format":"double","description":"The unit price of the SKU at the time the item was added to the cart. This value is stored as a 'snapshot' for historical price audit and consistency across checkout, even if product price fluctuates between add-to-cart time and purchase."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this cart item was first created. This follows ISO 8601 UTC datetime format with timezone."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent modification to this cart item, e.g. when quantity was changed. ISO 8601 UTC datetime format."}},"required":["id","shopping_mall_cart_id","shopping_mall_product_sku_id","quantity","unit_price_snapshot","created_at","updated_at"],"description":"Represents an individual line item within a customer's shopping cart. Each cart item links a single SKU (product variant) to a cart, stores the quantity to purchase, and persists the SKU price at time of addition for transactional integrity. Audit timestamps for creation and modification are present for cart management and checkout logic. This entity is defined by the shopping_mall_cart_items table within the e-commerce shoppingMall schema."},"IShoppingMallCart.ICreate":{"type":"object","properties":{},"required":[],"description":"Request payload for creating a new shopping cart for a customer in the shopping mall platform. Client must NOT supply any customer_id—the cart is automatically and securely assigned to the authenticated user based on session/context. No properties are accepted from client input at creation time; ownership is determined securely server-side. See shopping_mall_carts model in Prisma schema for implementation details."},"IShoppingMallCart.IUpdate":{"type":"object","properties":{"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the latest update to this cart or its items. The backend typically sets this automatically to now; clients may send null, but explicit date-time format is permitted for idempotent/sync operations."}},"required":["updated_at"],"description":"Request payload for updating details of an existing shopping cart. Used to update last-modified time (updated_at) for the cart entity, typically as part of cart modification or synchronization events. Items, ownership, and created_at are not updatable here; updating should only change the updated_at field. See shopping_mall_carts model in Prisma schema for technical mapping."},"IShoppingMallCartItem.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_cart_items","properties":{"shopping_mall_product_sku_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) for the product SKU to be added to the cart. Must reference an active SKU in shopping_mall_product_skus and belong to an in-stock product. Required for cart insert."},"quantity":{"type":"integer","description":"The quantity of the selected SKU to add to the cart. Must be at least 1 and not exceed the per-SKU or per-cart system limits, enforced by admin settings and business validation."}},"required":["shopping_mall_product_sku_id","quantity"],"description":"Payload structure for adding a new item to a shopping cart. Used as a request body when creating a cart line (cart item). Requires valid SKU reference and intended purchase quantity. Price and other values are resolved on server side at time of addition. Mapped to the shopping_mall_cart_items table in Prisma schema for shoppingMall e-commerce platform."},"IShoppingMallCartItem.IUpdate":{"type":"object","description":"DTO for updating an item in a customer's shopping cart (shopping_mall_cart_items) in an e-commerce platform. This interface is used in cart modification operations, specifically to update the quantity of an existing cart item, as well as any updatable properties defined by the cart_items schema. The DTO reflects only updatable fields and enforces constraints such as positive integers for quantity, and business-specific cart modification rules. CartId and cartItemId are passed as path parameters and are not present here. Only defined properties in the Prisma schema are permitted; this DTO is used by the customer role for cart management flows.","x-autobe-prisma-schema":"shopping_mall_cart_items","properties":{"quantity":{"type":"integer","description":"New quantity for this item in the cart. Must be at least 1 and not exceed configured per-SKU or per-cart business limits. Setting this value to 0 will typically result in cart item removal (handled at API logic layer).","minimum":0},"unit_price_snapshot":{"type":"number","format":"double","description":"Read-only: price of the SKU at the time it was added to cart. Provided for audit and validation; should not normally be updated but may be provided for internal correction flows. In typical update operations, this is omitted or does not need to be modified."}},"required":["quantity"]},"IShoppingMallWishlist.IRequest":{"type":"object","description":"Structured filtering, search, and pagination parameters for retrieving a customer's wishlist or for aggregating wishlist products. This DTO is used in shoppingMall wishlist index/search APIs and supports use cases such as product filtering, sorting, pagination, and applying category or name-based filters. All properties are optional to support partial and flexible query logic. Pagination fields conform to standard page/limit patterns with default/maximums enforced by business logic. Only properties defined here may be submitted by API clients.","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based index). Optional; defaults to 1 if omitted."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results to return per page. Optional; platform may apply limits or defaults if omitted."},"search":{"type":"string","description":"Free-text search filter for product names, description, or keywords in wishlist. Optional."},"categoryId":{"type":"string","format":"uuid","description":"Filter to only include wishlist items that belong to a specific product category, referenced by category UUID. Optional."},"orderBy":{"oneOf":[{"const":"created_at","description":"Sort order field for wishlist items; supports 'created_at' and 'updated_at'. Optional."},{"const":"updated_at","description":"Sort order field for wishlist items; supports 'created_at' and 'updated_at'. Optional."}],"description":"Sort order field for wishlist items; supports 'created_at' and 'updated_at'. Optional."},"orderDirection":{"oneOf":[{"const":"asc","description":"Direction for sorting (ascending/descending). Optional; default is 'desc' if unspecified."},{"const":"desc","description":"Direction for sorting (ascending/descending). Optional; default is 'desc' if unspecified."}],"description":"Direction for sorting (ascending/descending). Optional; default is 'desc' if unspecified."}},"required":[]},"IShoppingMallWishlist":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlists","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the wishlist. A globally unique identifier assigned to each wishlist instance. Used for lookups, linking, and API referencing."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"The UUID of the customer who owns this wishlist, referring to the corresponding row in shopping_mall_customers. Enforces one-to-one ownership—each customer has at most one wishlist. Used to secure ownership, enforce privacy, and enable CRUD operations linked to session context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the wishlist was created. Used for ordering, retention policy, and business logic on historical list entries. Immutable once set."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update or modification to this wishlist or its items. Changes every time the wishlist is altered. Used for order-by, UI updates, and business rules for 'most recent change.'"}},"required":["id","shopping_mall_customer_id","created_at","updated_at"],"description":"Represents a customer's wishlist for saving favorite products for later viewing or purchase. This model enforces one wishlist per customer, with ownership enforced by the shopping_mall_customer_id. Includes audit fields for creation and update, with soft-delete support (deleted_at). Used throughout the shopping mall for personalizing UX, product promotion, and conversion analysis. References the shopping_mall_wishlists Prisma schema, see schema and ERD for relationship details."},"IShoppingMallWishlist.ICreate":{"type":"object","properties":{},"required":[],"description":"DTO for creating a new wishlist entity. No fields are required because wishlists are always created in the context of the authenticated customer (ownership is inferred from session/token). Schema guarantees one wishlist per customer. No request properties are needed—creation is triggered contextually. See shopping_mall_wishlists Prisma schema."},"IShoppingMallWishlist.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlists","properties":{"updated_at":{"type":"string","format":"date-time","description":"Last modification time for this wishlist. Timestamp is updated every time wishlist attributes are changed.\n\nFormat: ISO 8601. This is for UI sync and audit history. For example: '2024-06-28T10:15:30Z'.\n\nRead-only and set automatically by the system upon successful modification."}},"required":[],"description":"DTO for updating wishlist properties. This structure is used by authenticated customers (and optionally admins with permission) to modify wishlist-level settings or properties in the shopping_mall_wishlists table. Typical updatable fields in the schema are limited; for most business flows, only updated_at may be set programmatically, though business fields like name, visibility, or configuration settings may exist in other schemas. Never include product or item references here; those are managed via wishlist item operations.\n\nSchema strictly matches shopping_mall_wishlists; only defined updatable fields are included. Audit and compliance tracking are always based on updated_at.\n\nPartial/patch updates are permitted, and fields not present in this DTO remain unchanged."},"IShoppingMallWishlistItem.IRequest":{"type":"object","properties":{"product_name":{"type":"string","description":"Optional product name filter. If set, only wishlist items referencing products whose name contains this substring (case-insensitive, language-agnostic where possible) will be included in the results.\n\nUseful for searching wishlists with many items by product keyword."},"category_id":{"type":"string","format":"uuid","description":"Optional product category filter. If specified, returns only wishlist items referencing products within this category. Must be a valid UUID referencing shopping_mall_categories.id."},"added_after":{"type":"string","format":"date-time","description":"Optional filter for wishlist items added after this timestamp (ISO 8601).\n\nUseful for incremental sync or audit. For example: '2025-06-01T00:00:00Z'."},"added_before":{"type":"string","format":"date-time","description":"Optional filter for wishlist items added before this timestamp (ISO 8601).\n\nUseful for retrospective data review.\n\nExample: '2025-06-28T00:00:00Z'."},"sort":{"oneOf":[{"const":"created_at-desc","description":"Sort order for wishlist items:\n- created_at-desc: Newest added first (default)\n- created_at-asc: Oldest added first\n- updated_at-desc: Most recently updated first\n- updated_at-asc: Least recently updated first"},{"const":"created_at-asc","description":"Sort order for wishlist items:\n- created_at-desc: Newest added first (default)\n- created_at-asc: Oldest added first\n- updated_at-desc: Most recently updated first\n- updated_at-asc: Least recently updated first"},{"const":"updated_at-desc","description":"Sort order for wishlist items:\n- created_at-desc: Newest added first (default)\n- created_at-asc: Oldest added first\n- updated_at-desc: Most recently updated first\n- updated_at-asc: Least recently updated first"},{"const":"updated_at-asc","description":"Sort order for wishlist items:\n- created_at-desc: Newest added first (default)\n- created_at-asc: Oldest added first\n- updated_at-desc: Most recently updated first\n- updated_at-asc: Least recently updated first"}],"description":"Sort order for wishlist items:\n- created_at-desc: Newest added first (default)\n- created_at-asc: Oldest added first\n- updated_at-desc: Most recently updated first\n- updated_at-asc: Least recently updated first"},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based). If omitted, defaults to 1. Used in conjunction with limit."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results per page (for pagination). Default is 20. Cannot exceed 100."}},"required":[],"description":"DTO for searching, filtering, and paginating wishlist items for a specific wishlist. This type is used in API operations for advanced retrieval of products added to a customer's wishlist, and accepts options for filtering by product name, product category, item addition timestamps, and sorting. Pagination controls are standard."},"IShoppingMallWishlistItem":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlist_items","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the wishlist item.\n\nThis property corresponds to the 'id' field in the shopping_mall_wishlist_items table. It is a UUID (Universally Unique Identifier) which uniquely distinguishes each wishlist item record in the database.\n\nThis ID can be used for retrieving or manipulating the wishlist item in subsequent API operations."},"shopping_mall_wishlist_id":{"type":"string","format":"uuid","description":"Identifier of the wishlist this item belongs to.\n\nReferences the 'shopping_mall_wishlist_id' column in shopping_mall_wishlist_items and is a foreign key to the parent wishlist. Ensures that this item is associated with the correct user's wishlist and enables efficient querying by wishlist membership."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Identifier of the product referenced by this wishlist item.\n\nReferences the 'shopping_mall_product_id' column in shopping_mall_wishlist_items and is a foreign key into shopping_mall_products, linking the wishlist item to a specific product that has been favorited by the user.\n\nThis linkage supports product detail lookups and business logic for removing products from all wishlists in case of product deletion."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this wishlist item was created.\n\nCorresponds to the 'created_at' field in shopping_mall_wishlist_items. This field records when the user added the product to their wishlist. It is used in sorting, analytics, and history display."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp indicating the last time the wishlist item was updated.\n\nThis property matches the 'updated_at' column in shopping_mall_wishlist_items, marking the most recent modification (such as product update, reorder, or re-addition)."}},"required":["id","shopping_mall_wishlist_id","shopping_mall_product_id","created_at","updated_at"],"description":"Represents a line item within a customer's wishlist, linking a specific product to their wishlist record. Each instance of this type corresponds to a row in the shopping_mall_wishlist_items table. The wishlist item forms a many-to-one relationship between the user's wishlist and multiple possible products, supporting advanced client-side product tracking, removal, and notification for stock changes or deletions.\n\nOwnership is strictly enforced so that only the owner of the wishlist can view or modify their associated wishlist items. Suitable for use in detailed retrieval and management APIs, customer dashboards, and user-facing wishlist management interfaces."},"IShoppingMallWishlistItem.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlist_items","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product identifier to be added to the wishlist.\n\nMaps to the 'shopping_mall_product_id' field in shopping_mall_wishlist_items. This is the only input required from the client to create a wishlist item, as the wishlist ID will be inferred server-side via authentication/session context (never posted by the client for security reasons).\n\nUUID format is required. Must correspond to an active product in the shopping_mall_products table. Attempting to add a non-existent or deleted product should result in business validation error."}},"required":["shopping_mall_product_id"],"description":"Payload schema for creating a new wishlist item in a user's wishlist. Only the wishlist's owner may use this operation. The client must only provide the product's UUID to be added to the wishlist. The system will internally resolve the wishlist association via session or access context; the wishlist ID is not accepted from client input to prevent security bypass.\n\nSecurity checks enforce user ownership and validate that the product being added exists and is available. Duplicate entries (same product in the same wishlist) are prevented by a unique constraint and will trigger a business rule error if violated. This structure forms the body of POST requests to add new wishlist items."},"IShoppingMallWishlistItem.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_wishlist_items","description":"Update information for a wishlist item associated with the shopping mall e-commerce platform. This DTO is used for PATCH/PUT operations against a specific wishlist item belonging to a customer's wishlist, as defined in the shopping_mall_wishlist_items table of the Prisma schema.\n\nThe schema allows updates only to modifiable properties of a wishlist item. It DOES NOT include foreign keys to the parent wishlist or product, which are immutable after creation for data integrity. Typical updatable fields may include auxiliary metadata (such as customer notes or custom tags), and timestamps like updated_at are handled by the system. No business logic supports changing the associated customer or product—updates are limited to non-relational, supplementary fields, if present in the schema.\n\nThe update operation enforces all business validation rules and audit requirements. If this model supports custom metadata fields on wishlist items (e.g., 'note', 'priority'), such fields should be represented here. Properties not present in the Prisma schema must not be included. Only explicit updatable fields for the wishlist item may appear, and all description and validation rules must match the shopping_mall_wishlist_items table definition.","properties":{},"required":[]},"IShoppingMallOrder.IRequest":{"type":"object","description":"Structured search/filter and pagination request for listing and searching orders (shopping_mall_orders) on the shoppingMall e-commerce platform. This DTO is used for advanced queries via PATCH endpoints where clients can specify filtering criteria, search logic, sort ordering, and pagination controls. All filters must precisely correspond to available fields in the shopping_mall_orders Prisma schema.\n\nThe structure allows for multi-property search including order_number, status, business_status, placed_at/paid_at/fulfilled_at dateranges, customer/seller references, and currency. Sort and pagination controls are required for efficient large dataset navigation. This DTO must never include attempt to filter by unused, non-schema, or virtual fields—accept only what is defined in the Prisma schema. String, date, and numeric criteria must follow both schema typings and in-database index optimization recommendations. Nullability for parameters should be respected as oneOf or explicit null. This object is never persisted and is for inflight query construction only, not direct database storage. Adhere strictly to naming, typing, and full Prisma schema reference for all supported properties.","properties":{"order_number":{"type":"string","description":"Order number for searching a specific business order record (globally unique as per Prisma). Partial string search is permitted if full-text index exists; otherwise, exact match only. Must reference order_number field from shopping_mall_orders."},"status":{"type":"string","description":"Current status filter for orders (e.g., pending, paid, processing, shipped, delivered, cancelled) as coded in shopping_mall_orders.status (string). Use exact match for status value; enum values are platform-defined."},"business_status":{"type":"string","description":"Business status/state filter for order workflow, e.g. 'hold', 'review', 'escalated'. Reflects business-specific process from shopping_mall_orders.business_status. Use appropriate exact match for status or oneOf if nullable."},"placed_at_from":{"type":"string","format":"date-time","description":"Begin datetime (ISO 8601) for placed_at filter on orders. Inclusive lower boundary, precision as supported in shopping_mall_orders. May be omitted to query from system minimum."},"placed_at_to":{"type":"string","format":"date-time","description":"End datetime (ISO 8601) for placed_at filter on orders. Inclusive upper boundary, precision as supported in shopping_mall_orders. Can be omitted if open-ended query intended."},"customer_id":{"type":"string","format":"uuid","description":"UUID of customer for filtering orders by owner (shopping_mall_orders.shopping_mall_customer_id). Must match id in shopping_mall_customers schema."},"seller_id":{"type":"string","format":"uuid","description":"UUID of seller for filtering single-seller orders (shopping_mall_orders.shopping_mall_seller_id). Set only if searching by seller role or admin."},"currency":{"type":"string","description":"Currency code filter for orders (shopping_mall_orders.currency); typically three-letter ISO code (e.g., USD, KRW). Allows matching to only orders in selected currency."},"min_total":{"type":"number","format":"double","description":"Minimum total amount boundary for order_total field (shopping_mall_orders.order_total). Numeric filter for price-based queries."},"max_total":{"type":"number","format":"double","description":"Maximum total amount boundary for order_total field (shopping_mall_orders.order_total). Numeric filter for price-based queries."},"sort_by":{"type":"string","description":"Sort column for order listing output. Acceptable values: 'placed_at', 'order_total', 'status', etc. Sorting must match schema-available indexed columns."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sorting direction: 'asc' (ascending) or 'desc' (descending) for the column selected by sort_by."},{"const":"desc","description":"Sorting direction: 'asc' (ascending) or 'desc' (descending) for the column selected by sort_by."}],"description":"Sorting direction: 'asc' (ascending) or 'desc' (descending) for the column selected by sort_by."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination (>= 1). Controls which page of results to return. Default: 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Maximum number of results per page for pagination. Enforced as per system or schema policy. Default: 20. Maximum: 100."}},"required":[]},"IShoppingMallOrder":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the order. Primary key for the shopping_mall_orders table.\n\nThis field is auto-generated and used as the main reference for order, fulfillment tracking, customer service events, and audit."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"The unique identifier of the customer who placed this order. Foreign key referencing the shopping_mall_customers table.\n\nValidates order-ownership and supports retrieval for order history, support, or auditing purposes."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid","description":"The unique identifier of the seller who is responsible for this order. Null when order is multi-seller split.\n\nThis is referenced when a single seller is associated with the order. Otherwise, in multi-seller scenarios, this is null."},{"type":"null"}],"description":"Optional seller's unique identifier, or null for split orders (multi-seller purchases)."},"shipping_address_id":{"type":"string","format":"uuid","description":"Point-in-time snapshot of the shipping address used at order placement.\n\nReferences shopping_mall_order_addresses.id and supports post-order audits/shipments regardless of changes to customer's profile."},"payment_method_id":{"type":"string","format":"uuid","description":"Snapshot of the payment method configuration as used for the order.\n\nReferences shopping_mall_order_payment_methods.id for accurate historic payment reference even if user profile changes later."},"order_number":{"type":"string","description":"Public-facing, business-unique order identifier (for customer communication, tracking, and CRM tools). Not the database id.\n\nUsed in email notifications, receipts, and 3rd party integrations."},"status":{"type":"string","description":"The current status of this order. Typical status strings include:\n- `pending`\n- `paid`\n- `processing`\n- `shipped`\n- `delivered`\n- `cancelled`\n\nThis field is managed by business processes and is referenced by status history and audit."},"business_status":{"oneOf":[{"type":"string","description":"Secondary business-context status (e.g., 'hold', 'review', 'escalated', etc).\n\nSupports additional business state management; not always used."},{"type":"null"}],"description":"Secondary status or workflow state. May be null."},"order_total":{"type":"number","format":"double","description":"Total price for this order, summed from order items including shipping fees and discounts (if any).\n\nUsed for payment integrity, financial reporting, and customer receipts."},"currency":{"type":"string","description":"ISO currency code (e.g., 'USD', 'KRW').\n\nRequired for precision in cross-border platform scenarios."},"placed_at":{"type":"string","format":"date-time","description":"Timestamp when the order was officially placed by the customer.\n\nISO 8601 format. Used for sorting/retrieval and time-based analytics."},"paid_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the payment was completed. Nullable. Only set for paid orders."},{"type":"null"}],"description":"Nullable. The datetime when the order was paid for, if completed."},"fulfilled_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the order was fully shipped or delivered. Nullable."},{"type":"null"}],"description":"Nullable. When the order was completely fulfilled for historic/audit purposes."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of order creation in the system for audit and debugging.\n\nPopulated automatically."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to this order (covers status change, admin actions, external syncs, etc).\n\nAuto-updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp, null if not deleted. Used for internal audit and legal retention policies."},{"type":"null"}],"description":"Nullable deletion time. Used for logical/audited deletion."}},"required":["id","shopping_mall_customer_id","shipping_address_id","payment_method_id","order_number","status","order_total","currency","placed_at","created_at","updated_at"],"description":"Represents an individual order record in the shopping mall e-commerce platform. This type encompasses all attributes essential to identify, manage, fulfill, and audit a customer order, including order number, user and seller associations, order status, order total and currency, snapshot references to shipping/payment, and time-based audit fields. The schema is directly mapped from the shopping_mall_orders Prisma table. All order management, status history, fulfillment (shipment), payment records, cancellations, and refunds relate to this type, and it provides full auditability through its timestamped and soft-deleted columns. Do not include fields that are not present in the schema table, and always validate against the requirements for secure and transactional order handling in business logic. This type is used for both read and mutation APIs referencing a complete order object."},"IShoppingMallOrder.ICreate":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"The UUID of the customer placing the order. Foreign key to shopping_mall_customers.\n\nThis is not submitted by the client in customer-facing APIs, but is provided internally through authentication context by the backend. For admin/internal use, the field may be required."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the seller for whom the order is being placed (nullable for multi-seller split orders).\n\nMust reference an active seller, otherwise null for split."},{"type":"null"}],"description":"Nullable for split orders covering multiple sellers. Provided for single-seller context."},"shipping_address_id":{"type":"string","format":"uuid","description":"Required. The UUID of the shipping address snapshot to use for this order. References shopping_mall_order_addresses.id.\n\nThis address must be pre-validated and belong to the placing customer, capturing the full address at the time of order for audit and delivery integrity."},"payment_method_id":{"type":"string","format":"uuid","description":"Required. The UUID of the payment method snapshot to be used for order payment, referencing shopping_mall_order_payment_methods.id.\n\nThis is a one-time, point-in-time record to guarantee that the payment method is audit-stable even if a user's method changes later."},"order_total":{"type":"number","format":"double","description":"Total calculated price for the order, including products/SKUs, shipping fees, and discounts.\n\nValidated by the backend before order placement; client provides the intended value but system checks all values server-side before persisting."},"currency":{"type":"string","description":"The ISO currency code for this order (e.g., 'USD', 'KRW').\n\nRequired for every financial order for accurate recordkeeping, reconciliation, and audit."}},"required":["shipping_address_id","payment_method_id","order_total","currency"],"description":"The payload required for placing a new order in the shopping mall platform.\n\nThis DTO type is used for order creation endpoints. It references all required data for creating a new order, including the snapshot ID of the shipping address to be used (snapshot, never a mutable address record), the unique payment method snapshot ID, pre-calculated order total, and currency code. The customer id and seller id are included for internal API use (such as admin-placed orders or in microservice contexts, but not for public-facing customer APIs, where these values are derived from authentication context). This schema directly mirrors columns in the shopping_mall_orders Prisma table, and is used for validating that all necessary attributes are provided upon order placement. Fields must strictly match existing columns; no extra or missing fields allowed. The IShoppingMallOrder.ICreate type is separate from the read type to enforce correct separation of input and output DTOs. Do not include fields that are only system-managed or not modifiable by the order placement process."},"IShoppingMallOrder.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"The new status of the order (e.g., pending, paid, processing, shipped, delivered, cancelled). This property is used to update the current status of the order. It must correspond to a valid status as defined in the business logic of the platform. Updating the status may trigger status-history events and fulfillment timelines."},"business_status":{"oneOf":[{"type":"string","description":"(Optional) Update the business workflow or custom business state of the order. For advanced use cases where additional business flows are implemented outside of the core status machine."},{"type":"null"}],"description":"(Optional) Update the business workflow or custom business state of the order. For advanced use cases where additional business flows are implemented outside of the core status machine."},"shipping_address_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) New shipping address snapshot reference for the order. Used only before fulfillment/shipment and only by authorized actors. Mutating this field should update the address reflected in the order and downstream delivery modules."},{"type":"null"}],"description":"(Optional) New shipping address snapshot reference for the order. Used only before fulfillment/shipment and only by authorized actors. Mutating this field should update the address reflected in the order and downstream delivery modules."},"payment_method_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) New payment method snapshot reference for the order. This enables modification of how the order is to be/will be paid if not yet settled."},{"type":"null"}],"description":"(Optional) New payment method snapshot reference for the order. This enables modification of how the order is to be/will be paid if not yet settled."},"remark":{"oneOf":[{"type":"string","description":"(Optional) Comment or internal note to attach to the order, commonly used by sellers/admins for fulfillment notes, exception records, or customer service purposes."},{"type":"null"}],"description":"(Optional) Comment or internal note to attach to the order, commonly used by sellers/admins for fulfillment notes, exception records, or customer service purposes."}},"required":[],"description":"Update payload for modifying details of a shopping mall order. This type is used in the order update API for authorized customers, sellers, or admins. Each field can be provided individually – only those fields present in the request are updated. Allowed fields and update logic may be restricted by workflow stage and permissions. All changes are audit-logged and may affect status history or downstream entities."},"IShoppingMallOrderItem.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination. If not set, defaults to the first page. Must be >= 1 for paginated results."},{"type":"null"}],"description":"Page number for pagination. If not set, defaults to the first page. Must be >= 1 for paginated results."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of items to return per page. Platform/business rules may set upper and lower bounds for this value. If not set, uses API or business default."},{"type":"null"}],"description":"Maximum number of items to return per page. Platform/business rules may set upper and lower bounds for this value. If not set, uses API or business default."},"sort":{"oneOf":[{"type":"string","description":"Sorting mode for order items. Acceptable values may depend on available business logic or UI verticals (e.g., created_at desc, name asc, etc.)."},{"type":"null"}],"description":"Sorting mode for order items. Acceptable values may depend on available business logic or UI verticals (e.g., created_at desc, name asc, etc.)."},"search":{"oneOf":[{"type":"string","description":"Full-text search string for filtering items by product/SKU name, code, or user-facing text fields."},{"type":"null"}],"description":"Full-text search string for filtering items by product/SKU name, code, or user-facing text fields."},"status":{"oneOf":[{"type":"string","description":"Filter by refund/cancellation status of order items (e.g., none, pending, refunded, cancelled). Value depends on the platform's allowable item-level status states."},{"type":"null"}],"description":"Filter by refund/cancellation status of order items (e.g., none, pending, refunded, cancelled). Value depends on the platform's allowable item-level status states."},"sku_code":{"oneOf":[{"type":"string","description":"Filter results by specific SKU code within the order (for detailed review or management of specific order line items)."},{"type":"null"}],"description":"Filter results by specific SKU code within the order (for detailed review or management of specific order line items)."},"product_name":{"oneOf":[{"type":"string","description":"Filter items by the name of the product/SKU at the time of purchase. Business logic may allow partial or full matches for enhanced search and reporting."},{"type":"null"}],"description":"Filter items by the name of the product/SKU at the time of purchase. Business logic may allow partial or full matches for enhanced search and reporting."}},"required":[],"description":"Request type to search/filter/paginate line items in a specific order. Contains standard pageable/filterable/searchable fields and custom logic for retrieving subsets of order items given an order context. Used in admin, seller, and customer interfaces for reviewing order breakdowns, status, or inventory audit. Business logic enforces filtering, sorting, and access controls on permissible fields."},"IShoppingMallOrderItem":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_items","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the order item, as defined in the shopping_mall_order_items table. Used to distinguish each SKU entry in an order, this field references the order_items entity for precise updates, deletes, and audit. Must always be a valid UUID generated by the system."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Parent order's {@link shopping_mall_orders.id}. This field links an order item directly to its owning order, and is strictly required to establish the item's context within a transactional order. Always a UUID referencing shopping_mall_orders. This property cannot be modified after creation, preserving full audit traceability."},"shopping_mall_product_sku_id":{"type":"string","format":"uuid","description":"Purchased SKU's {@link shopping_mall_product_skus.id}. Indicates the specific product variant being purchased. Required and immutable after creation; this field must match a SKU present in the shopping_mall_product_skus table and cannot be set to a deleted SKU."},"item_name":{"type":"string","description":"Display name of the product/SKU at time of purchase. Used for historical record/tracking, even if product/SKU names change later. Required for customer and admin order history review, and is always stored as the point-in-time name for accurate reporting."},"sku_code":{"type":"string","description":"Business code/string for the SKU, such as 'SKU-123-RED-M'. Copied exactly from the product SKU at purchase time for order detail precision. Required for all line item history and downstream fulfillment/logistics."},"quantity":{"type":"integer","description":"Units purchased for this SKU. Integer greater than zero; enforced by business logic and validated at creation. This value must always match inventory movement and is essential for refund/cancellation logic."},"unit_price":{"type":"number","format":"double","description":"Unit price at purchase time (may include discounts). Copied at order creation and never updated, ensuring point-in-time accuracy for receipts, audit, and reporting."},"currency":{"type":"string","description":"ISO 4217 currency code (e.g., 'KRW', 'USD'). Set at order item creation to support multi-currency accounting and reporting."},"item_total":{"type":"number","format":"double","description":"Line item total: quantity × unit_price less any per-item discounts. Used for order summary calculations and must always reflect the actual payment history at the time the order is placed."},"refund_status":{"type":"string","description":"Status of refund/cancellation for this item (e.g., 'none', 'pending', 'refunded', 'cancelled'). Set and managed via order flows and required for business & regulatory reporting."},"created_at":{"type":"string","format":"date-time","description":"Timestamp representing when this order item was created. Used for auditing, reporting, and sorting, it is set automatically by the database logic."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp representing when this order item was most recently updated. Used for concurrency control, audit trails, and timelines; managed automatically by backend."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp if this item is logically deleted. Null if still present/active in order; used for deletion audit, compliance, and regulatory/tax audits. Not visible in user order history after deletion, only in admin/audit views."}},"required":["id","shopping_mall_order_id","shopping_mall_product_sku_id","item_name","sku_code","quantity","unit_price","currency","item_total","refund_status","created_at","updated_at"],"description":"Details a single item (SKU line) in an order. This DTO includes all properties required to audit product purchase, inventory, pricing, refund state, and compliance with e-commerce platform regulations. Direct mapping to shopping_mall_order_items schema; ensures every order item is traceable, immutable where needed, and supports full order detail/reconciliation flows."},"IShoppingMallOrderItem.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_items","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Parent order's {@link shopping_mall_orders.id}. Must reference a valid order created in the order placement process. Required for mapping new order items to specific transactions."},"shopping_mall_product_sku_id":{"type":"string","format":"uuid","description":"SKU to be included in the order. Must reference a published and in-stock SKU from shopping_mall_product_skus. This is mandatory to ensure accurate inventory locking and order fulfillment tracking."},"item_name":{"type":"string","description":"Display name of the ordered SKU, captured at order creation time. Immutable after creation, used for order detail/audit history. Must match current product SKU name at the moment of order."},"sku_code":{"type":"string","description":"Business code for the SKU (e.g., 'T-SHIRT-L-BLACK'). Set for SKU tracking downstream. Copied from current SKU at purchase for immutable order history."},"quantity":{"type":"integer","minimum":1,"description":"Number of units for this SKU to be included in the order. Must be at least 1 and not exceeding current inventory or per-order maximum. Used for inventory locking and fulfillment calculations."},"unit_price":{"type":"number","format":"double","description":"Price per unit of the SKU at purchase time, copied from SKU at order creation. Used to ensure historic pricing and integrity of receipts/invoices. Cannot be changed after the item is added."},"currency":{"type":"string","description":"Currency code (ISO 4217; e.g., 'KRW'). Required to support multi-currency operation and correct billing/accounting. Set to match order's main currency."},"item_total":{"type":"number","format":"double","description":"Computed as quantity × unit_price, may be adjusted for discounts at creation if applicable. Used for order payment/reconciliation at audit. Must match intended line item charge."}},"required":["shopping_mall_order_id","shopping_mall_product_sku_id","item_name","sku_code","quantity","unit_price","currency","item_total"],"description":"Payload for creating a new order item (SKU line) in an existing order. Maps strictly to the shopping_mall_order_items schema for every required field, supporting e-commerce platform logic for order placement, inventory checks, payment, and detailed audit. Security: Use ONLY for authorized actors (admin, system, internal order processing logic) – not end-user/UI form. All fields are captured at order item creation and cannot be altered afterwards for compliance."},"IShoppingMallOrderItem.IUpdate":{"type":"object","description":"Update DTO for modifying a specific line item (SKU) in an order.\n\nThis schema is used for updating an existing order item in the shopping mall platform, as described in the Orders module of the Prisma schema. It allows admins to adjust fields such as quantity and unit price before fulfillment, but only for items in eligible states (e.g., before shipment or refund). All fields are validated for business rules, and audit logging is required for traceability. Required and optional fields are matched exactly to the shopping_mall_order_items columns per update policy.\n\nReference: shopping_mall_order_items (Prisma ERD).","x-autobe-prisma-schema":"shopping_mall_order_items","properties":{"quantity":{"type":"integer","description":"The new quantity for this order item.\n\nMust be >= 1. Reflects the updated quantity of SKUs requested for this item. Actual availability and over-sale logic are enforced by business rules before allowing downward adjustment. Automated validation ensures no negative or zero values can be set (validation error otherwise).\n\nReference: shopping_mall_order_items.quantity (Prisma)."},"unit_price":{"type":"number","format":"double","description":"The new unit price for the order item, if adjustment is allowed (float).\n\nOnly admins can update price. Must be >= 0. Used to correct pricing errors, apply planned adjustments, or in rare refund/admin workflows. Standard flows don't allow unit price changes after order placement unless explicitly permitted by compliance rules.\n\nReference: shopping_mall_order_items.unit_price (Prisma ERD)."},"item_name":{"type":"string","description":"Optional display name to update the product/SKU name on the order line. Typically only set by admin for correction purposes. If not specified, the name remains unchanged.\n\nReference: shopping_mall_order_items.item_name (Prisma ERD)."},"currency":{"type":"string","description":"Currency code for the item pricing. Must be a valid ISO-4217 currency code (e.g. 'KRW', 'USD'). Usually does not change after order creation except in rare admin override scenarios.\n\nReference: shopping_mall_order_items.currency (Prisma ERD)."},"refund_status":{"type":"string","description":"Optional change of the item-level refund/cancellation state. Controls item eligibility for refund/cancel, as permitted by business logic. Enum values as described in business rules (e.g., 'none', 'pending', 'refunded', 'cancelled'). Usually restricted to admin updates.\n\nReference: shopping_mall_order_items.refund_status (Prisma ERD)."}},"required":[]},"IShoppingMallOrderShipment.IRequest":{"type":"object","description":"Search and filtering criteria for retrieving shipment records associated with an order. Used in shopping mall platform order fulfillment and logistics tracking APIs.\n\nSupports advanced filters for admin, seller, or customer shipment queries:\n- status (e.g., pending, shipped, in_transit, delivered)\n- carrier (e.g., 'CJ', 'FedEx', 'UPS')\n- tracking_number\n- time window (created_at, dispatched_at, delivered_at)\n- sorting\n- pagination controls (page, limit)\n\nTypically used as the requestBody for PATCH/POST to shipment list endpoints.\n\nReference: shopping_mall_order_shipments (Prisma ERD).","properties":{"status":{"type":"string","description":"Shipment status to filter on. Enum according to allowed shipment transitions: 'pending', 'processing', 'shipped', 'in_transit', 'out_for_delivery', 'delivered', 'returned', 'refunded', 'cancelled', 'delivery_failed'. Optional field. Exact options are determined by the order tracking requirements in the shopping mall platform, with full validation at the provider layer.\n\nReference: shopping_mall_order_shipments.status (Prisma, ERD, requirements)."},"carrier":{"type":"string","description":"Carrier to filter shipments on (e.g., 'CJ', 'FedEx', 'UPS', etc.). If provided, only shipments for this carrier will be returned. Optional filter.\n\nReference: shopping_mall_order_shipments.carrier (Prisma/ERD)."},"tracking_number":{"type":"string","description":"Filter for a specific tracking number (partial or full match). Optional.\n\nReference: shopping_mall_order_shipments.tracking_number (Prisma/ERD)."},"created_from":{"type":"string","format":"date-time","description":"ISO-8601 timestamp to filter shipments created after this date/time. Optional. Can be used for date range filtering in search UI."},"created_to":{"type":"string","format":"date-time","description":"ISO-8601 timestamp to filter shipments created before this date/time. Optional."},"dispatched_from":{"type":"string","format":"date-time","description":"ISO-8601 timestamp to filter by shipments dispatched after this date/time. Optional. Used for operational visibility by seller/admin."},"dispatched_to":{"type":"string","format":"date-time","description":"ISO-8601 timestamp to filter by shipments dispatched before this date/time. Optional."},"delivered_from":{"type":"string","format":"date-time","description":"ISO-8601 timestamp to filter by shipments delivered after this date/time. Optional. Used mainly by customer for UI timeline filtering."},"delivered_to":{"type":"string","format":"date-time","description":"ISO-8601 timestamp to filter by shipments delivered before this date/time. Optional."},"sort_by":{"type":"string","description":"Sort order of the result (e.g., 'created_at', 'dispatched_at', 'delivered_at'). Optional; default is 'created_at' descending."},"sort_order":{"type":"string","description":"Direction for sorting. Accepts 'asc' or 'desc'. Optional, default is 'desc'."},"page":{"type":"integer","description":"Page number for pagination. Optional. Defaults to 1 if not provided."},"limit":{"type":"integer","description":"Maximum number of records per page. Optional. Defaults to 20; capped at 100."}},"required":[]},"IShoppingMallOrderShipment":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_shipments","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the shipment record."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Parent order's {@link shopping_mall_orders.id}. Reference to the associated order."},"shipment_number":{"type":"string","description":"Business code for shipment/sub-shipment. Uniquely identifies shipment within order."},"carrier":{"type":"string","description":"Carrier name (logistics partner, e.g., CJ, FedEx, Sagawa)."},"tracking_number":{"oneOf":[{"type":"string","description":"Carrier-provided tracking number."},{"type":"null"}],"description":"Carrier-provided tracking number."},"status":{"type":"string","description":"Current shipment status (e.g., pending, shipped, in_transit, out_for_delivery, delivered, returned, cancelled)."},"dispatched_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when shipment was dispatched/handed to carrier."},{"type":"null"}],"description":"Timestamp when shipment was dispatched/handed to carrier."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when shipment was delivered."},{"type":"null"}],"description":"Timestamp when shipment was delivered."},"remark":{"oneOf":[{"type":"string","description":"Seller/admin comments, special instructions or internal notes."},{"type":"null"}],"description":"Seller/admin comments, special instructions or internal notes."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last modification timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp if record is logically deleted."},{"type":"null"}],"description":"Soft-deletion timestamp if record is logically deleted."}},"required":["id","shopping_mall_order_id","shipment_number","carrier","status","created_at","updated_at"],"description":"Order shipment record.\n\nRepresents an individual shipment for an order (may be multiple if split fulfillment). Contains carrier, tracking, status, and shipment events. Referenced by the parent order and used for order fulfillment tracking, customer service audit, and analytics. All timestamps are ISO8601 strings. The status field follows platform-defined shipment status progression as explained in requirements and the ERD."},"IShoppingMallOrderShipment.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_shipments","properties":{"carrier":{"type":"string","description":"Carrier name (logistics partner, e.g., CJ, FedEx, Sagawa)."},"tracking_number":{"oneOf":[{"type":"string","description":"Carrier-provided tracking number. Set to null to remove."},{"type":"null"}],"description":"Carrier-provided tracking number. Set to null to remove."},"status":{"type":"string","description":"Current shipment status (e.g., pending, shipped, in_transit, out_for_delivery, delivered, returned, cancelled)."},"dispatched_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when shipment was dispatched/handed to carrier. Null to clear."},{"type":"null"}],"description":"Timestamp when shipment was dispatched/handed to carrier. Null to clear."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when shipment was delivered. Null to clear."},{"type":"null"}],"description":"Timestamp when shipment was delivered. Null to clear."},"remark":{"oneOf":[{"type":"string","description":"Seller/admin comments, special instructions, or internal notes. Null to clear."},{"type":"null"}],"description":"Seller/admin comments, special instructions, or internal notes. Null to clear."}},"required":["carrier","status"],"description":"DTO for updating shipment information associated with a specific order shipment. Only editable fields are present. Null values erase existing data for optional fields. Each update triggers audit logging and potential notification/fulfillment logic.\n\nFollows constraints set by business logic and underlying schema; see ERD for relationship."},"IShoppingMallOrderStatusHistory.IRequest":{"type":"object","properties":{"orderId":{"type":"string","format":"uuid","description":"The unique identifier of the order for which the status history is being queried. This field is required for API context but as a DTO, the orderId can be included for search logic or filtering."},"event_type":{"type":"string","description":"Optional filter for the specific type of order event (e.g., placed, status_change, cancel_requested, refund_requested, shipment_updated). This narrows the status/timeline entries to only those of a specific category."},"actor_role":{"type":"string","description":"Optional filter for the role of the actor who triggered the status history event. Allowed values: 'customer', 'seller', 'admin'. Used for audit or search-by-actor workflows."},"created_after":{"type":"string","format":"date-time","description":"Retrieve status history entries created after this timestamp (ISO 8601). Used for pagination or timeline constraint."},"created_before":{"type":"string","format":"date-time","description":"Retrieve status history entries created before this timestamp (ISO 8601). Used for pagination or timeline constraint."},"status_after":{"type":"string","description":"Optional filter to return status history events where the order transitioned to this status value (e.g., 'pending', 'paid', 'shipped', etc.)"},"status_before":{"type":"string","description":"Optional filter to return status history events where the order transitioned from this status value."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated queries. Defaults to 1 if not provided."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of records per page. Defaults to 20, maximum 100."},"sort":{"oneOf":[{"const":"created_at","description":"Sort field for timeline entries. Defaults to 'created_at' descending (most recent events first)."},{"const":"event_type","description":"Sort field for timeline entries. Defaults to 'created_at' descending (most recent events first)."},{"const":"actor_role","description":"Sort field for timeline entries. Defaults to 'created_at' descending (most recent events first)."},{"const":"status_before","description":"Sort field for timeline entries. Defaults to 'created_at' descending (most recent events first)."},{"const":"status_after","description":"Sort field for timeline entries. Defaults to 'created_at' descending (most recent events first)."}],"description":"Sort field for timeline entries. Defaults to 'created_at' descending (most recent events first)."},"order":{"oneOf":[{"const":"asc","description":"Order direction for sorting (ascending or descending). Default: 'desc'."},{"const":"desc","description":"Order direction for sorting (ascending or descending). Default: 'desc'."}],"description":"Order direction for sorting (ascending or descending). Default: 'desc'."}},"required":[],"description":"Request/search data for retrieving a paginated and filtered list of order status history/timeline records. Fields map directly to filtering, sorting, and pagination for timeline events of a specific order or general status audit. All properties are optional; if none provided, defaults are applied for full timeline retrieval."},"IShoppingMallOrderStatusHistory":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_status_history","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for this order status history event record. Referenced as order status timeline id."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Foreign key to order (shopping_mall_orders.id) to which this status event belongs."},"actor_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The actor's customer id triggering the event (if actioned by a customer), otherwise null."},"actor_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The actor's seller id triggering the event (if actioned by a seller), otherwise null."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The admin id triggering the event (if actioned/admin), otherwise null."},"event_type":{"type":"string","description":"Type of order status timeline event. Examples: 'placed', 'status_change', 'cancel_requested', 'refund_requested', 'shipment_updated', etc. Used for audit, business logic, and UI status timeline views."},"status_before":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Order status before this timeline event. Referenced for audit and timeline diff."},"status_after":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Order status after this event (resulting status). Important for display and state transition/recovery."},"message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Event message, comment, or explanation. Used for human-readable audit trail, internal notes, or customer communication about this timeline event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of this event creation. Represents when the status change or timeline event was recorded."}},"required":["id","shopping_mall_order_id","event_type","created_at"],"description":"Order status and event timeline record for shopping mall platform. This entity stores the full audit trail of all status transitions, customer/seller/admin actions, and business workflow events throughout an order's lifecycle. Linked to shopping_mall_orders; each entry reflects one business state change or timeline milestone in the order's journey. Used for audit, customer service, UI order history, and root cause analysis in escalations. Some fields are optional (actor_seller_id, actor_admin_id, message) and are populated depending on event context. For best practices, all transitions impacting customer/seller visibility are recorded here."},"IShoppingMallOrderPayment.IRequest":{"type":"object","properties":{"orderId":{"type":"string","format":"uuid","description":"Unique identifier of the order whose payment records are to be retrieved. This is a UUID referencing an order in shopping_mall_orders."},"status":{"type":"string","description":"Filter payments by status: authorized, captured, failed, refunded, pending, etc."},"payment_type":{"type":"string","description":"Filter payments by method type (e.g., card, bank_transfer, paypal, toss, etc.)."},"date_from":{"type":"string","format":"date-time","description":"Start date/time to filter payments (ISO 8601, UTC)."},"date_to":{"type":"string","format":"date-time","description":"End date/time to filter payments (ISO 8601, UTC)."},"page":{"type":"integer","description":"Page number for pagination (starts at 1).","minimum":1},"limit":{"type":"integer","description":"Number of items per page for pagination (max 100).","minimum":1,"maximum":100},"sortBy":{"type":"string","description":"Field to sort by, e.g., created_at, paid_at, status."},"sortDirection":{"oneOf":[{"const":"asc","description":"Sort order: asc (ascending) or desc (descending)."},{"const":"desc","description":"Sort order: asc (ascending) or desc (descending)."}],"description":"Sort order: asc (ascending) or desc (descending)."}},"required":["orderId"],"description":"Request body DTO for filtered, paginated search of order payments. Fields support filtering by status, payment method, date, and control pagination and sort."},"IShoppingMallOrderPayment":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_payments","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the payment record per shopping_mall_order_payments.id."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Parent order's ID. Corresponds to shopping_mall_orders.id."},"order_payment_method_id":{"type":"string","format":"uuid","description":"Payment method snapshot at the time of order. References shopping_mall_order_payment_methods.id."},"payment_ref":{"type":"string","description":"External payment processor/gateway reference/transaction id. Must be unique."},"payment_type":{"type":"string","description":"Payment method type (e.g., card, bank_transfer, paypal, toss, etc)."},"status":{"type":"string","description":"Payment status: authorized, captured, failed, refunded, pending, etc."},"paid_amount":{"type":"number","format":"double","description":"Amount paid for this payment (single event)."},"currency":{"type":"string","description":"ISO 4217 currency code. E.g., USD, KRW."},"paid_at":{"type":"string","format":"date-time","description":"Timestamp of payment success/settlement, if applicable."},"reconciliation_at":{"type":"string","format":"date-time","description":"When the payment was reconciled with external/bank/accounting records."},"fail_reason":{"type":"string","description":"Failure or decline message from payment gateway, or business reason for failure."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"type":"string","format":"date-time","description":"Soft delete timestamp for logical deletion [nullable]."}},"required":["id","shopping_mall_order_id","order_payment_method_id","payment_ref","payment_type","status","paid_amount","currency","created_at","updated_at"],"description":"Represents a payment event on an order, capturing details such as payment status, amount, gateway, and audit fields. Maps directly to shopping_mall_order_payments in the e-commerce schema. Sensitive to payment workflow, order association, audit, and compliance."},"IShoppingMallOrderPayment.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_payments","properties":{"order_payment_method_id":{"type":"string","format":"uuid","description":"Payment method snapshot ID (shopping_mall_order_payment_methods.id) associated with this payment attempt. This identifies the method used for the payment (e.g., card, bank_transfer, etc.). Required for creation."},"payment_ref":{"type":"string","description":"External payment processor reference/transaction id for this payment attempt. Used to map local payment record to gateway response. Must be unique if provided."},"payment_type":{"type":"string","description":"Type of payment method being processed (e.g., card, bank_transfer, paypal, toss, virtual_account). Must be a valid value mapped to allowed payment processors."},"status":{"type":"string","description":"Payment state for this event ('authorized', 'captured', 'failed', 'refunded', 'pending'). Must use valid platform payment status. Status must be set based on payment gateway/provider callback."},"paid_amount":{"type":"number","description":"Amount paid in this payment event. Must match the expected order total for final capture, or a partial in the case of multi-part payment. Positive float, currency as provided."},"currency":{"type":"string","description":"Currency code (e.g. USD, KRW) reflecting the denomination of the payment. Use uppercase ISO currency codes."},"fail_reason":{"type":"string","description":"Optional: Failure cause or additional detail from the payment provider, required only if the status is 'failed'. May be null or omitted for non-failed payments."}},"required":["order_payment_method_id","payment_type","status","paid_amount","currency"],"description":"Payload for creating a new payment record for a specific order. Based on shopping_mall_order_payments Prisma model. Must reference order_payment_method_id and specify payment_type, status, paid_amount, and currency. Uniqueness and validation are enforced for payment_ref. See business logic for payment status management."},"IShoppingMallOrderPayment.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_payments","properties":{"payment_ref":{"type":"string","description":"Optional: Updated gateway payment reference. Used only if payment is retried or external reference changes due to failure/retry triggers."},"payment_type":{"type":"string","description":"Type of payment method being updated (e.g., card, bank_transfer, paypal, toss, virtual_account), if payment method is being retried/changed on update events. Must match allowed payment types."},"status":{"type":"string","description":"Update payment state for the payment event. Must transition according to the allowed business process (e.g., failed → pending, pending → captured, captured → refunded). See platform workflow for valid transitions."},"paid_amount":{"type":"number","description":"Optional: Adjust the paid amount if required by business logic (partial payment, adjustment, error correction). Must be a valid, non-negative float if set."},"currency":{"type":"string","description":"Currency code (e.g. USD, KRW) if needed for reconciliation, or if payment method/currency changed on update. Uppercase ISO format."},"fail_reason":{"type":"string","description":"If updating payment due to gateway or business process failure, provide failure reason. This may be updated to better reflect final state after gateway callbacks."}},"required":[],"description":"Fields for updating a payment record for a specific order in shopping_mall_order_payments. Only provide fields that require update; partial resource updates allowed. All changes will be audit-logged and validated for consistency with order/payment status workflow. See business logic for allowed status and field transitions."},"IShoppingMallOrderCancellation.IRequest":{"type":"object","properties":{"orderId":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the order for which the cancellation is being requested.\n\nThis value must correspond to a valid, existing order belonging to the requester (customer or seller) and for which cancellation is allowed by platform and business policies. Used to link the cancellation request to its target order."},"reason_code":{"type":"string","description":"A short code indicating the reason for the cancellation (e.g., 'customer_request', 'fraud_suspected', 'oos', 'seller_failure', etc.).\n\nAllowed values are determined by business logic and may be presented as an enumerated list in the user interface for consistency. Must follow platform policies for structured cancellation reasons."},"explanation":{"type":"string","description":"Free-text explanation or additional context for the cancellation request.\n\nThis field allows the requesting actor to provide a detailed justification, supporting documentation, or other message that will be stored for audit, review, and possibly for use in customer service or dispute resolution workflows.\n\nThe field is optional but strongly recommended for cancellations that may be escalated or require admin approval."}},"required":["orderId","reason_code"],"description":"Request structure for initiating an order cancellation. Used by customers to request cancellation of an in-progress order, or by sellers/admin for platform-initiated cancellations.\n\nReferences business rules requiring validation of eligibility, reason codes, and the linkage to the owning order. This object is used in cancellation creation API operations and serves as the basis for audit and workflow routing."},"IShoppingMallOrderCancellation":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_cancellations","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for the cancellation record (UUID).\n\nAssigned automatically when the cancellation is created and used as the primary key for referencing and audit."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the order being cancelled.\n\nReferences the primary key in shopping_mall_orders. Ties this cancellation record to its related order, used in workflow, display, and reporting."},"initiator_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the customer who requested the cancellation, if applicable.\n\nNull if the cancellation was not requested by a customer (e.g., seller/admin-initiated or system action)."},"initiator_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the seller who initiated or handled the cancellation, if present.\n\nNull for customer-initiated or admin-only cancellations."},"initiator_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the admin who handled or initiated the cancellation.\n\nNull for customer/seller-initiated cancellations."},"reason_code":{"type":"string","description":"Business reason code for the cancellation (e.g., 'customer_request', 'fraud_suspected', 'oos', etc.).\n\nThis is a structured field to enable reporting and workflow routing. The value must match one of the allowed reasons defined by business policy and platform logic."},"status":{"type":"string","description":"Current status of the cancellation request (e.g., 'pending', 'approved', 'denied', 'completed', etc.).\n\nDetermines the workflow state. Business rules enforce allowed values and transitions."},"explanation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed textual explanation or justification for cancellation. Can be provided by the initiator or by an admin during the review/approval process.\n\nIntended for audit, dispute resolution, and compliance."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the cancellation was requested, in ISO 8601 format with timezone.\n\nUsed for SLA tracking, timeline display, and audit."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the cancellation was resolved or closed (approved/denied), or null if not yet resolved."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the cancellation record (ISO8601 with timezone)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the cancellation record (ISO8601 with timezone).\n\nUsed for concurrency control and workflow audit."}},"required":["id","shopping_mall_order_id","reason_code","status","requested_at","created_at","updated_at"],"description":"Cancellation record object as stored in shopping_mall_order_cancellations. This type includes all attributes associated with cancellation events—audit fields, initiator references, business reason, status transitions, and timepoints. Used for order management, customer service, compliance, and workflow state tracking.\n\nReferences shopping_mall_order_cancellations Prisma model, and all properties must strictly exist in this database schema/table. Descriptions here directly reflect database column documentation and domain-relevant field constraints. Sensitive admin/customer context (initiator_admin_id, initiator_customer_id) is included for full auditability, subject to role-based display filtering as per business logic."},"IShoppingMallOrderCancellation.IUpdate":{"type":"object","properties":{"reason_code":{"type":"string","description":"Business reason code for cancellation (customer_request, fraud_suspected, oos, seller_failure, etc.). Must reference a controlled vocabulary from business policy documentation."},"status":{"type":"string","description":"Updated cancellation status (pending, approved, denied, completed, etc.). Must reflect a valid transition as defined in platform business logic."},"explanation":{"type":"string","description":"Optional audit explanation for this update. Provides more human-readable context for audit logs or compliance review."}},"required":["reason_code","status"],"x-autobe-prisma-schema":"shopping_mall_order_cancellations","description":"Update DTO for order cancellation event.\n\nUsed to update cancellation records in shopping_mall_order_cancellations by customer, seller, or admin (depending on workflow). This interface enforces strict business logic for state transitions, allowing changes to the cancellation reason, status, and optional explanation. Updates are always audit-logged, and status changes must comply with the permissible transition matrix in e-commerce requirements analysis.\n\nReferences cancellation reason codes, state machine for status, and includes support for explanatory notes for compliance and dispute reviews."},"IShoppingMallOrderRefund":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the refund record. Uniquely identifies each refund event in shopping_mall_order_refunds."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Parent order's unique identifier, references shopping_mall_orders.id. Required for establishing refund-event linkage."},"refunded_payment_id":{"type":"string","format":"uuid","description":"FK to the order payment this refund applies to (nullable if not refunded directly against a payment)."},"initiator_customer_id":{"type":"string","format":"uuid","description":"Customer who requests the refund (nullable if admin-initiated)."},"initiator_admin_id":{"type":"string","format":"uuid","description":"Admin who handled or initiated the refund event (nullable)."},"reason_code":{"type":"string","description":"Refund business reason code (customer_cancel, failed_delivery, defective, overcharge, goodwill, etc)."},"status":{"type":"string","description":"Current refund event status (pending, approved, denied, completed, failed, etc)."},"refund_amount":{"type":"number","format":"double","description":"Amount refunded for this event (may be partial or full for the order)."},"currency":{"type":"string","description":"Currency code for refund amount."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when refund is requested."},"settled_at":{"type":"string","format":"date-time","description":"Timestamp when payout is completed (nullable if pending/denied)."},"explanation":{"type":"string","description":"Explanatory note/audit text for refund decisions (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update/modification for audit/compliance."}},"required":["id","shopping_mall_order_id","reason_code","status","refund_amount","currency","requested_at","created_at","updated_at"],"x-autobe-prisma-schema":"shopping_mall_order_refunds","description":"Order refund entity type.\n\nRepresents an audited record of all refund requests/events for an order. Each refund object maintains a reason code, initiator actor, amount, status, currency, and full audit trail. Some fields (e.g., refunded_payment_id, settled_at, admin initiator, explanation) are nullable as refunds can be created by either customer or admin, and not all refunds settle immediately. This component is used both for reading and updating refund state and is essential for order history, auditing, and business reporting.\n\nStatus field must align with valid business logic transitions, and all updates are subject to audit logging for compliance."},"IShoppingMallOrderRefund.ICreate":{"type":"object","properties":{"orderId":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the order for which the refund is being requested. Must reference an existing order in the system."},"refunded_payment_id":{"type":"string","format":"uuid","description":"If refunding a specific payment (e.g., for partial/multiple payments), provide the unique payment id. Nullable for full order refunds."},"reason_code":{"type":"string","description":"Business reason code for the refund (customer_cancel, failed_delivery, defective, overcharge, goodwill, etc.). Required for logging and compliance."},"refund_amount":{"type":"number","format":"double","description":"The amount to be refunded for this refund event. Must be a positive decimal (float), less than or equal to eligible paid amount. Partial refunds are supported, as are full refunds."},"currency":{"type":"string","description":"3-letter ISO currency code representing the refund currency (e.g., 'USD', 'KRW'). Match to order's currency. Required for accounting and multi-currency scenarios."},"explanation":{"type":"string","description":"Optional free-text explanation for the refund request, supporting audit trails, customer service notes, or user-provided detail."}},"required":["orderId","reason_code","refund_amount","currency"],"description":"Request payload for submitting a new order refund. Includes reference to the target order, optional payment record, required business reason for audit logging, refund amount (partial or full refund supported), the currency code matching the order, and an optional textual explanation. The schema ensures business, compliance, and customer service information is captured."},"IShoppingMallOrderRefund.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"New status for the refund event. Should be one of: 'pending', 'approved', 'denied', 'completed', 'failed', etc. Status machine explains lifecycle transitions. Only allowed to use exact business enum values validated at service."},"resolution_type":{"type":"string","description":"Set or update the method/outcome of appeal closure or review (e.g., 'refund-granted', 'upheld-denial', 'manual override'). Specifies how the refund event was finalized."},"explanation":{"type":"string","description":"Add or update a free-text administrative or system explanation for the refund event, such as reasoning for approval/denial."}},"description":"Update payload for an existing order refund event. Permits status transition (e.g., pending->approved, approved->completed), updating the business reason or explanation, and capturing final resolution method. Used by admin or seller roles for managing refund workflow and recording audit trail.","required":[]},"IShoppingMallOrderAddress.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination, 1-based. If omitted, defaults to 1. Must be a positive integer."},{"type":"null"}],"description":"Page number for pagination, 1-based. If omitted, defaults to 1. Must be a positive integer."},"limit":{"oneOf":[{"type":"integer","description":"Number of items per page for pagination. Defaults to 20. Should be a positive integer up to a system-configured max."},{"type":"null"}],"description":"Number of items per page for pagination. Defaults to 20. Should be a positive integer up to a system-configured max."},"sort_by":{"oneOf":[{"const":"created_at","description":"Column to sort the results. Supports 'created_at' or 'updated_at'. Optional, defaults to 'created_at'."},{"const":"updated_at","description":"Column to sort the results. Supports 'created_at' or 'updated_at'. Optional, defaults to 'created_at'."}],"description":"Column to sort the results. Supports 'created_at' or 'updated_at'. Optional, defaults to 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for the results. 'asc' for ascending, 'desc' for descending. Optional, defaults to 'desc'."},{"const":"desc","description":"Sort order for the results. 'asc' for ascending, 'desc' for descending. Optional, defaults to 'desc'."}],"description":"Sort order for the results. 'asc' for ascending, 'desc' for descending. Optional, defaults to 'desc'."},"region":{"type":"string","description":"Optional filter for address region. Performs case-insensitive partial match search if specified."},"postal_code":{"type":"string","description":"Optional filter for address postal code. Case-insensitive partial match."},"is_default":{"type":"boolean","description":"Optional filter to return only default addresses if true."},"search":{"type":"string","description":"Optional fuzzy search term to match against recipient_name or address_line fields."}},"required":[],"description":"Request DTO for searching, filtering, sorting, and paginating customer addresses. Used to retrieve a paginated, filtered list of all addresses belonging to a given customer, as stored in the shopping_mall_customer_addresses table. Contains filters for region, postal_code, is_default, and sort/pagination controls. All fields are optional and may be combined as needed.\n\nThis DTO enables advanced address book management for customers within the shopping mall platform.\n\nReference: Prisma schema shopping_mall_customer_addresses."},"IShoppingMallOrderAddress":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_addresses","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the address snapshot as used in an order. See shopping_mall_order_addresses.id in the Prisma schema."},"address_type":{"type":"string","description":"Type of address at the time of order. Typically 'shipping', 'billing', or 'both'. This is a snapshot value, not linked to current customer address data. See shopping_mall_order_addresses.address_type in the Prisma schema."},"recipient_name":{"type":"string","description":"Recipient's full name as saved at time of order. Used for fulfillment and legal audit, reflects point-in-time value, not customer profile. See shopping_mall_order_addresses.recipient_name in the Prisma schema."},"phone":{"type":"string","description":"Recipient's phone number/contact at order time. Used for delivery. Point-in-time snapshot, not updated with customer profile changes. See shopping_mall_order_addresses.phone in the Prisma schema."},"zip_code":{"type":"string","description":"Postal code as provided when the order was placed. Used for delivery/shipping accuracy. See shopping_mall_order_addresses.zip_code in the Prisma schema."},"address_main":{"type":"string","description":"Main address field for shipping/billing as captured at order time. Street address, city, etc. Point-in-time audit snapshot. See shopping_mall_order_addresses.address_main in the Prisma schema."},"address_detail":{"oneOf":[{"type":"string","description":"Detailed address (apt/suite/floor, etc.) as recorded at order time. Nullable. Point-in-time audit; not linked to customer profile edits."},{"type":"null"}],"description":"Detailed address (apt/suite/floor, etc.) as recorded at order time. Nullable. Point-in-time audit; not linked to customer profile edits."},"country_code":{"type":"string","description":"ISO country code for address at time of order. See shopping_mall_order_addresses.country_code in Prisma schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the order address record was created. Immutable, used for audit and order history tracing. See shopping_mall_order_addresses.created_at in the Prisma schema."}},"required":["id","address_type","recipient_name","phone","zip_code","address_main","country_code","created_at"],"description":"Immutable address entity as used for a specific order at time of purchase. Represents a point-in-time snapshot of the shipping/billing address associated with an order for audit, compliance, and accurate fulfillment reporting. Fields are not changed once written; they reflect order history and differ from current customer profile addresses.\n\nBased on Prisma schema shopping_mall_order_addresses. Do not use for editing customer profile; for order history detail and regulatory audit only.\n\nAll fields are derived from the state of the customer's address at the moment the order was created."},"IShoppingMallOrderAddress.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_addresses","properties":{"address_type":{"type":"string","description":"Type: shipping or billing or both (string code).\n\nIndicates whether this address is for shipping, billing, or both purposes in the context of the order. Must be a string according to business logic. Required at time of order address snapshot for audit, legal, and fulfillment purposes."},"recipient_name":{"type":"string","description":"Recipient's full name at time of order.\n\nThis is the name for deliveries or billing, as provided by the customer. Used for parcel labeling, carrier compliance, and billing statements. Required for all order address snapshots and must reflect the name at the time of order placement for audit and tracking integrity."},"phone":{"type":"string","description":"Recipient's phone number/contact at time of order.\n\nA required string field used by carriers for delivery coordination, address validity check, and legal audit. Typically validated by business or fulfillment workflow. Must be present for all order address records."},"zip_code":{"type":"string","description":"Postal code.\n\nRequired for delivery, regulatory, and geographic audit. Accepts strings for global postal codes, not restricted to digit-only patterns for cross-country compatibility. Must be present for all order address records."},"address_main":{"type":"string","description":"Main address (street, city, etc).\n\nThe principal address line including street, city, or region information. Required for carrier delivery, audit, and fraud prevention. Must reflect the actual value at the time of order placement."},"address_detail":{"oneOf":[{"type":"string","description":"Detailed address/apt/suite/floor, etc."},{"type":"null"}],"description":"Detailed address/apt/suite/floor, etc.\n\nCan be null or omitted if no extra details are present."},"country_code":{"type":"string","description":"ISO country code at time of order.\n\nThree-letter uppercase ISO 3166-1 alpha-3 code (e.g., KOR, USA, JPN). Required for customs, shipping, legal, and reporting purposes. Must match the delivery destination at the time of the order."}},"required":["address_type","recipient_name","phone","zip_code","address_main","country_code"],"description":"Order-level snapshot of address used for shipping and/or billing at order time. Ensures point-in-time accuracy regardless of later address edits or deletions by customer. Used for legal/audit/compliance and accurate historical recordkeeping. Subsidiary to order, referenced by order header and possibly by shipments. Related to shopping_mall_orders."},"IShoppingMallOrderAddress.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_addresses","properties":{"address_type":{"type":"string","description":"Type: shipping or billing or both (string code).\n\nEditable only prior to first shipment. Update requires admin privileges or order to be in a modifiable state."},"recipient_name":{"type":"string","description":"Recipient's full name at time of order.\n\nEditable for typos, correction, or legal clarity prior to shipping or fulfillment. Subject to audit and change logs."},"phone":{"type":"string","description":"Recipient's phone number/contact.\n\nEditable only in pre-shipment states for improved delivery or accuracy."},"zip_code":{"type":"string","description":"Postal code.\n\nCan be corrected by admin or before fulfillment for changes in carrier requirements or initial customer input error."},"address_main":{"type":"string","description":"Main address (street, city, etc).\n\nEditable for corrections prior to shipment. Audit trail enforced for history integrity."},"address_detail":{"oneOf":[{"type":"string","description":"Detailed address/apt/suite/floor, etc."},{"type":"null"}],"description":"Detailed address/apt/suite/floor, etc.\n\nOptional field. Can be updated or set to null as needed prior to order fulfillment."},"country_code":{"type":"string","description":"ISO country code at time of order.\n\nEditable only by admin; reflects the point-in-time legal record for the delivery country. Should be updated only for compliance or critical error correction."}},"required":[],"description":"Update fields for an order address snapshot record, for admin or pre-fulfillment correction. Only specified fields are updated—others remain unchanged. Subject to business validation based on fulfillment, audit, compliance, and order status. Related table: shopping_mall_order_addresses."},"IShoppingMallOrderPaymentMethod.IRequest":{"type":"object","properties":{"payment_method_type":{"type":"string","description":"Type of payment method for order payment snapshots (e.g., 'card', 'bank_transfer', 'paypal', etc.). Mandatory for defining method during creation or search. Maps directly to shopping_mall_order_payment_methods.payment_method_type in Prisma schema. Must match supported payment method types as configured for the platform."},"display_name":{"type":"string","description":"Display-friendly string for the payment method, such as 'Visa ****1234', 'Bank Transfer Nonghyup', 'PayPal Account', etc. Used for order confirmation, receipts, and UI purposes. Optional for requests but recommended for better search/index UX."},"created_at_from":{"type":"string","format":"date-time","description":"Lower bound filter for searching payment method snapshots by creation timestamp (ISO 8601 date-time format). Optional. Used in search APIs supporting complex queries for audits or reporting."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound filter for searching payment method snapshots by creation timestamp (ISO 8601 date-time format). Optional. Used in search APIs supporting complex queries for audits or reporting."},"page":{"type":"integer","minimum":1,"description":"Page number (1-based) for pagination, optional, default is 1. Used for paginated retrieval of payment method snapshots."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Record page size for pagination, optional, default is 20. Controls how many results per page, capped by API policy."},"sort_by":{"type":"string","description":"Sort criteria (field) for ordering results, such as 'created_at', 'payment_method_type', etc., as supported by the search API and schema. Optional."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for results ('asc' for ascending, 'desc' for descending) based on sort_by field. Optional; default is 'desc' for recent-first."},{"const":"desc","description":"Sort order for results ('asc' for ascending, 'desc' for descending) based on sort_by field. Optional; default is 'desc' for recent-first."}],"description":"Sort order for results ('asc' for ascending, 'desc' for descending) based on sort_by field. Optional; default is 'desc' for recent-first."}},"required":[],"description":"Request DTO for searching, filtering, and paginating order payment method snapshots in shopping_mall_order_payment_methods. Fields align with supported filters from the platform admin UI and Prisma schema. Optional fields enable advanced queries; all are consistent with audit/compliance/review needs."},"IShoppingMallOrderPaymentMethod":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the order payment method snapshot, as stored in shopping_mall_order_payment_methods.id."},"payment_method_type":{"type":"string","description":"Type of payment method used in the order, corresponding to shopping_mall_order_payment_methods.payment_method_type. Allowed values include 'card', 'bank_transfer', 'paypal', 'virtual_account', or others as per business configuration."},"method_data":{"type":"string","description":"Opaque JSON or encoded string containing method-specific metadata as of order creation. For cards this may be masked numbers, for banks this may be encoded account data. Immutable historic record reflecting payment gateway input at checkout. This is stored in shopping_mall_order_payment_methods.method_data."},"display_name":{"type":"string","description":"Display-friendly label shown to users and customer service for the payment method (e.g., 'Visa ****1234', 'Toss Pay', 'NongHyup Account', etc.), mapped from shopping_mall_order_payment_methods.display_name."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601, UTC) of the payment method snapshot, aligned with shopping_mall_order_payment_methods.created_at."}},"required":["id","payment_method_type","method_data","display_name","created_at"],"description":"Order payment method snapshot resource, representing the exact point-in-time payment method (type, value, display) referenced by an order or order_payment row. Immutable; aligns exactly with shopping_mall_order_payment_methods Prisma schema. Used for audit, dispute, financial reconciliation, UI display, and support workflows. Exposes only non-sensitive metadata – never allows raw credentials. For security, this is admin/user support-facing, not for credential generation."},"IShoppingMallOrderPaymentMethod.ICreate":{"type":"object","properties":{"payment_method_type":{"type":"string","description":"Type of method (e.g., card, bank_transfer, paypal, virtual_account). Must match one of the supported values for payment processing and audit."},"method_data":{"type":"string","description":"JSON or encoded data for this payment method at time of order (e.g., masked card, bank name, etc). Must be sufficiently detailed to verify or replay payment event."},"display_name":{"type":"string","description":"Masked or obfuscated display for UI (e.g., Visa ****1234). Used for customer-facing receipts and admin compliance screens."}},"required":["payment_method_type","method_data","display_name"],"description":"DTO for creating a payment method snapshot at the time of order placement. Maps fields to shopping_mall_order_payment_methods as recorded for audit and reconciliation. Includes all required attributes to reconstruct payment provider interactions and customer receipts. All fields are required. See related business rules on unique display per order, non-sensitive storage of method_data, and audit compliance.\n\nReferences Prisma: shopping_mall_order_payment_methods (payment_method_type, method_data, display_name, created_at)."},"IShoppingMallOrderPaymentMethod.IUpdate":{"type":"object","properties":{"payment_method_type":{"type":"string","description":"Updated type of the payment method (see Prisma table comment for supported values). Changing type may be necessary if initial entry was in error or business policy allows—for example, switching between bank_transfer and card."},"method_data":{"type":"string","description":"Updated JSON or encoded data for the payment method snapshot (e.g., corrected masking, updated provider strings). Must always remain non-sensitive and comply with PCI/PII business standards. Only update if a business/audit correction is needed."},"display_name":{"type":"string","description":"UI-friendly public display name; e.g., \"Visa ****1234\". Update to fix masking, clarify display, or improve user visibility after a reconciliation event."}},"required":["payment_method_type","method_data","display_name"],"description":"DTO for updating an existing payment method snapshot attached to an order. All modifiable fields must be provided, as partial updates are not permitted. Each property references a column in shopping_mall_order_payment_methods (see Prisma schema for details). Usage is typically by admins for audit correction, not regular customer updates.\n\nRequired due to audit and regulatory requirements for exact payment method provenance. All updates are fully compliant and audit-logged."},"IShoppingMallReview.IRequest":{"type":"object","properties":{"productId":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the product for which the reviews are being requested. Used to scope the review search request to a particular product."},"status":{"type":"string","description":"Optional filter by review moderation status (e.g., approved, pending, rejected, hidden)."},"rating":{"type":"integer","minimum":1,"maximum":5,"description":"Optional filter for star rating. If provided, only return reviews with this rating."},"created_from":{"type":"string","format":"date-time","description":"Optional filter for reviews created after or at this ISO 8601 timestamp."},"created_to":{"type":"string","format":"date-time","description":"Optional filter for reviews created before or at this ISO 8601 timestamp."},"sort_by":{"oneOf":[{"const":"created_at","description":"Optional sort field for the review listing. 'created_at' means sort by creation timestamp; 'rating' sorts by star rating."},{"const":"rating","description":"Optional sort field for the review listing. 'created_at' means sort by creation timestamp; 'rating' sorts by star rating."}],"description":"Optional sort field for the review listing. 'created_at' means sort by creation timestamp; 'rating' sorts by star rating."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for sorting (ascending or descending)."},{"const":"desc","description":"Sort order for sorting (ascending or descending)."}],"description":"Sort order for sorting (ascending or descending)."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (default 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of reviews per page (default 20, max 100)."}},"required":["productId"],"description":"Request body for searching or filtering product reviews. Allows for complex review queries by product, status, rating, date, and paginated results."},"IShoppingMallReview":{"type":"object","x-autobe-prisma-schema":"shopping_mall_reviews","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the review entry."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"The reviewed product's unique ID. Foreign key to product entity."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order verifying the purchase for the review (ensures verified buyer)."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Authoring customer's unique ID."},"rating":{"type":"integer","minimum":1,"maximum":5,"description":"Star rating for review (integer: 1-5). Required."},"body":{"type":"string","minLength":10,"maxLength":2000,"description":"Review body text (required, 10-2000 characters)."},"status":{"type":"string","description":"Moderation status for the review (e.g., 'pending', 'approved', 'rejected', or 'hidden')."},"comment":{"type":"string","description":"Optional comment or annotation (public moderation/admin/seller note on review)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete flag, timestamp (ISO8601) if review was deleted. Null if not deleted."}},"required":["id","shopping_mall_product_id","shopping_mall_order_id","shopping_mall_customer_id","rating","body","status","created_at","updated_at"],"description":"Main product review entity referencing shopping_mall_reviews. Contains author, product, order verification, moderation status, timestamps, and body. All fields are directly mapped from the review record, except derived or joined fields (not present here)."},"IShoppingMallReview.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_reviews","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order verifying purchase. This field links the review to the order as verified proof of purchase for the (customer, product, order) constraint. Must be a valid UUID referencing an order the customer has purchased. Required."},"rating":{"type":"integer","minimum":1,"maximum":5,"description":"Star rating for the product, integer from 1-5 specified by the customer. Must follow the discrete 1,2,3,4,5 range. Required."},"body":{"type":"string","minLength":10,"maxLength":2000,"description":"Main review text. Customer's written feedback for the product, from 10 to 2000 characters. Content is validated, subject to moderation, and stored as-is. Required."}},"required":["shopping_mall_order_id","rating","body"],"description":"Create DTO for a new product review. Used by a customer after completing a purchase to submit a review for a product, referencing their order for verification. All required fields are enforced by the review creation workflow."},"IShoppingMallReview.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_reviews","properties":{"rating":{"type":"integer","minimum":1,"maximum":5,"description":"Star rating for the product (integer 1-5), allowing update. Optional; must be provided if updating rating. If omitted, retains previous value."},"body":{"type":"string","minLength":10,"maxLength":2000,"description":"Main review text, allowing modification. If present, must be 10-2000 characters. Content change triggers moderation. Optional; if omitted, prior review body is retained."}},"required":[],"description":"Update DTO for an existing customer review. Permits updating rating or body. Each field is optional but must comply with the original validation constraints if supplied. Partial updates are allowed."},"IShoppingMallReviewImage":{"type":"object","x-autobe-prisma-schema":"shopping_mall_review_images","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the review image record in the database. This field is generated by the system and used to reference the specific image throughout the platform.\n\nReferenced in the shopping_mall_review_images table. Must be a valid UUID format as per the Prisma schema column definition."},"shopping_mall_review_id":{"type":"string","format":"uuid","description":"References the parent review's shopping_mall_reviews.id. Indicates to which specific review this image is attached. This field must be a valid UUID corresponding to an existing review record. Used for relationship mapping and permission enforcement.\n\nEnsures logical linkage for review content management and image retrieval flows."},"image_uri":{"type":"string","description":"URI for the attached image file. This is the CDN or storage reference for the image asset. Required for all review images.\n\nImage must comply with platform guidelines for file size, content moderation, and supported formats. (See platform requirements: up to 5 images per review, each ≤4MB). The value must be a valid URI and preferably HTTPS. Referenced as a 80000-character varchar in the schema."},"created_at":{"type":"string","format":"date-time","description":"Image attachment creation time for auditing and timeline presentation. This ISO 8601 'date-time' indicates when the image was associated with the review record, supporting chronology and regulatory compliance.\n\nSee shopping_mall_review_images.created_at. Always system-generated and immutable after creation."}},"required":["id","shopping_mall_review_id","image_uri","created_at"],"description":"Represents an image attached to a product review. Used for authenticating customer feedback and enriching the review content with visual evidence. Each image belongs to a single review and is referenced by its unique ID. All review images are authed against moderation policies, and the attached URI is used for customer-facing display. \n\nThis object is mapped directly to the shopping_mall_review_images Prisma schema, providing a persistent record of review images for moderation, compliance, and product trust building. Deleting an image requires updating parent review references and compliance with audit retention."},"IShoppingMallReviewImage.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_review_images","properties":{"image_uri":{"type":"string","description":"URI for the attached image file. This represents the CDN or cloud storage location for the uploaded asset and is required for all image attachment operations. Must be a valid, accessible URI. Images must comply with file size, format, and content policy (typically up to 4MB, max 5 per review)."}},"required":["image_uri"],"description":"Review image creation payload for attaching an image to a product review. This request object is sent by customers when uploading new images for their review in compliance with moderation, format, and business policy requirements. Only the image URI is accepted; all relational and audit fields are handled by the system based on user authentication and parent review context.\n\nMapped directly to the shopping_mall_review_images Prisma schema for record persistence and workflow orchestration."},"IShoppingMallReviewFlag.IRequest":{"type":"object","properties":{"reviewId":{"type":"string","format":"uuid","description":"Unique identifier of the product review being flagged for moderation or abuse concerns. Must refer to an existing review in the context of a product. This property ensures the flag is linked to a valid review and helps maintain moderation audit trails."},"reason":{"type":"string","description":"Short description or code indicating the reason why the review is being flagged (e.g., 'abuse', 'spam', 'inappropriate content', 'policy_violation'). Used to guide the moderation process for administrators reviewing flagged content. Required to support structured moderation queues and reporting."},"note":{"oneOf":[{"type":"string","description":"Optional internal note added by the actor creating the flag. Can include additional context or explanation for the flag (e.g., specifics of the violation not captured by the reason code). This narrative is not typically displayed to general users but is used for audit and moderation handling."},{"type":"null"}],"description":"Optional internal note added by the actor creating the flag. Can include additional context or explanation for the flag (e.g., specifics of the violation not captured by the reason code). This narrative is not typically displayed to general users but is used for audit and moderation handling."}},"required":["reviewId","reason"],"description":"Schema for creating a new flag on a product review, used when a user (customer, seller, or admin) reports a product review for abuse, spam, or policy violations. The schema ensures every flag includes a valid reference to the flagged review, a reason code or description, and optionally, a detailed note for moderation context. Flags are persisted in the shopping_mall_review_flags table and are designed to support structured moderation across the e-commerce platform. All properties reflect the business rules and requirements for review flagging and moderation."},"IShoppingMallReviewFlag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the review flag. Uniquely identifies this flag entry in the database (shopping_mall_review_flags table). Reference for audit, moderation queue, and administrative decision-making."},"shopping_mall_review_id":{"type":"string","format":"uuid","description":"Foreign key referencing the ID of the product review being flagged. Links this flag to a unique product review for which moderation or audit is required."},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional foreign key referencing the customer who submitted the flag (if actor is a customer). Indicates who reported the review for abuse, spam, or policy violation. Field is nullable if flag was created by a seller or admin."},{"type":"null"}],"description":"Optional foreign key referencing the customer who submitted the flag (if actor is a customer). Indicates who reported the review for abuse, spam, or policy violation. Field is nullable if flag was created by a seller or admin."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional foreign key referencing the seller who submitted the flag (if actor is a seller). Used for moderation workflows involving seller reports of problematic reviews on their products. Nullable if flag created by a customer or admin."},{"type":"null"}],"description":"Optional foreign key referencing the seller who submitted the flag (if actor is a seller). Used for moderation workflows involving seller reports of problematic reviews on their products. Nullable if flag created by a customer or admin."},"shopping_mall_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional foreign key referencing the admin who submitted or processed the flag (if actor is an admin). Present for admin-initiated moderation actions or escalations."},{"type":"null"}],"description":"Optional foreign key referencing the admin who submitted or processed the flag (if actor is an admin). Present for admin-initiated moderation actions or escalations."},"reason":{"type":"string","description":"Code or descriptive reason for the flag (e.g., 'abuse', 'spam', 'policy_violation'). Guides the moderation process and enables structured queues and analytics for review quality."},"note":{"oneOf":[{"type":"string","description":"Optional internal note for this flag, providing additional context or moderator comments. May contain arbitrary text, only visible to admin users handling moderation and audit."},{"type":"null"}],"description":"Optional internal note for this flag, providing additional context or moderator comments. May contain arbitrary text, only visible to admin users handling moderation and audit."},"status":{"type":"string","description":"Workflow status of the review flag. Possible values include 'open', 'resolved', 'rejected'. Determines if this flag still requires moderation action or has been closed. Used for filtering flags in moderation dashboards."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this flag was created. Used for audit, reporting, and moderation timeline tracking. ISO 8601 date-time format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this flag was last updated, for audit and moderation process tracking. ISO 8601 date-time format."}},"required":["id","shopping_mall_review_id","reason","status","created_at","updated_at"],"description":"Represents a record in the review flag (shopping_mall_review_flags) table. Flags are created by customers, sellers, or admins to indicate a product review that might violate platform rules (abuse, spam, policy violation). Stores detailed context for moderation, including who flagged the review, the reason, optional note, moderation status, and audit timestamps. Designed for use in both moderation queues and audit histories, matching business requirements for structured and traceable moderation across the platform."},"IShoppingMallReviewFlag.ICreate":{"type":"object","properties":{"reason":{"type":"string","description":"The reason for flagging the review, such as 'abuse', 'spam', 'policy_violation', or another clear summary of the moderation concern. Required for all flag submissions. Must match flag options supported by moderation business logic and may be displayed to moderators/admins for audit and triage. Example: 'abuse', 'profanity', 'scam', 'unhelpful', 'irrelevant', 'false_advertising'."},"note":{"oneOf":[{"type":"string","description":"Optional internal note or additional explanation justifying the flag, supporting audit and complex moderation. Used to provide context or elaboration for the flag. May be shown to admin or support staff during moderation workflow. Optional for most users but required for admin-triggered flags or bulk moderation use cases. Example: 'User exhibits repeated abusive behavior in other reviews.'"},{"type":"null"}],"description":"Optional internal note or additional explanation justifying the flag, supporting audit and complex moderation. Used to provide context or elaboration for the flag. May be shown to admin or support staff during moderation workflow. Optional for most users but required for admin-triggered flags or bulk moderation use cases. Example: 'User exhibits repeated abusive behavior in other reviews.'"}},"required":["reason"],"description":"Payload for creating a review flag in the e-commerce shopping mall review moderation system. Used by customers, sellers, or admins to report a review for moderation (spam, policy violation, abuse, etc.). The object is persisted to the shopping_mall_review_flags table with references to actor and review, status set to 'open', and timestamps as per moderation policy. Only properties defined here may be set."},"IShoppingMallReviewFlag.IUpdate":{"type":"object","properties":{"note":{"oneOf":[{"type":"string","description":"Update the note text for this flag. Typically used by moderator/admin to supplement the flag record with context or audit information. May also be used for the flagging user to further elaborate their report. Nullable if not updating or clearing the note."},{"type":"null"}],"description":"Update the note text for this flag. Typically used by moderator/admin to supplement the flag record with context or audit information. May also be used for the flagging user to further elaborate their report. Nullable if not updating or clearing the note."},"status":{"oneOf":[{"const":"open","description":"Update the moderation status of the flag. Must be one of the following values: 'open', 'resolved', 'rejected'. Used by admins or moderators to close, resolve, or reject a moderation workflow. Controls visibility of the flag in dashboards; changing status to 'resolved' or 'rejected' will archive the flag, while 'open' keeps it active in the moderation queue."},{"const":"resolved","description":"Update the moderation status of the flag. Must be one of the following values: 'open', 'resolved', 'rejected'. Used by admins or moderators to close, resolve, or reject a moderation workflow. Controls visibility of the flag in dashboards; changing status to 'resolved' or 'rejected' will archive the flag, while 'open' keeps it active in the moderation queue."},{"const":"rejected","description":"Update the moderation status of the flag. Must be one of the following values: 'open', 'resolved', 'rejected'. Used by admins or moderators to close, resolve, or reject a moderation workflow. Controls visibility of the flag in dashboards; changing status to 'resolved' or 'rejected' will archive the flag, while 'open' keeps it active in the moderation queue."}],"description":"Update the moderation status of the flag. Must be one of the following values: 'open', 'resolved', 'rejected'. Used by admins or moderators to close, resolve, or reject a moderation workflow. Controls visibility of the flag in dashboards; changing status to 'resolved' or 'rejected' will archive the flag, while 'open' keeps it active in the moderation queue."}},"required":["status"],"description":"Payload for updating a review flag record in the e-commerce platform review moderation table. Used by moderators, admins, or possibly the flagging user, to mark a flag as resolved, rejected, or to add internal notes. Status controlling moderation workflow, and notes for audit or clarification, are the main modifiable fields."},"IShoppingMallReviewReply.IRequest":{"type":"object","properties":{"reviewId":{"type":"string","format":"uuid","description":"The unique identifier of the review. Used to scope operations. Must be a valid UUID referencing a review in the database."},"productId":{"type":"string","format":"uuid","description":"The unique identifier of the product to which the review belongs. Must be a valid UUID referencing the product."},"status":{"oneOf":[{"const":"public","description":"Reply visibility status. Allowed values: 'public', 'hidden'. Used to control whether the reply is viewable or internal. Typically defaults to 'public'."},{"const":"hidden","description":"Reply visibility status. Allowed values: 'public', 'hidden'. Used to control whether the reply is viewable or internal. Typically defaults to 'public'."}],"description":"Reply visibility status. Allowed values: 'public', 'hidden'. Used to control whether the reply is viewable or internal. Typically defaults to 'public'."},"authorType":{"oneOf":[{"const":"seller","description":"The role of the reply author. Allowed values are 'seller' or 'admin', used for access control and UI display."},{"const":"admin","description":"The role of the reply author. Allowed values are 'seller' or 'admin', used for access control and UI display."}],"description":"The role of the reply author. Allowed values are 'seller' or 'admin', used for access control and UI display."},"body":{"type":"string","description":"The reply text. Required. Must satisfy business-configured length limits (should not exceed 2000 characters).","minLength":1,"maxLength":2000}},"required":["reviewId","productId","status","authorType","body"],"description":"Request schema for searching or filtering review replies (seller/admin) for a given review under a product. Includes the reply body, visibility status, and author type, as well as identifiers for product and review context. Used by admin tools for moderation or bulk operations. Values must match referenced entities and follow enum restrictions. Only schema properties may be used, and all required fields must be present."},"IShoppingMallReviewReply":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the review reply. Primary key in shopping_mall_review_replies."},"reviewId":{"type":"string","format":"uuid","description":"UUID of the associated review this reply belongs to. Used as a foreign key to relate reply to parent review."},"productId":{"type":"string","format":"uuid","description":"UUID of the product which the review and reply are tied to. Foreign key for cross-entity integrity."},"sellerId":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the replying seller (if the reply author is a seller); null if this is an admin reply."},{"type":"null"}],"description":"UUID of the replying seller (if the reply author is a seller); null if this is an admin reply."},"adminId":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the replying admin (if the reply author is an admin); null for seller replies."},{"type":"null"}],"description":"UUID of the replying admin (if the reply author is an admin); null for seller replies."},"body":{"type":"string","description":"Reply text content. Supports rich or plain text; must satisfy business-configured length requirements."},"status":{"oneOf":[{"const":"public","description":"Visibility status of the reply: 'public' if visible, 'hidden' if accessible only to admin or in moderation. Only 'public' or 'hidden' allowed."},{"const":"hidden","description":"Visibility status of the reply: 'public' if visible, 'hidden' if accessible only to admin or in moderation. Only 'public' or 'hidden' allowed."}],"description":"Visibility status of the reply: 'public' if visible, 'hidden' if accessible only to admin or in moderation. Only 'public' or 'hidden' allowed."},"createdAt":{"type":"string","format":"date-time","description":"The creation timestamp of the reply (ISO 8601)."},"updatedAt":{"type":"string","format":"date-time","description":"The last update timestamp of the reply (ISO 8601)."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; ISO 8601 string if reply is deleted, null if reply is active."}},"required":["id","reviewId","productId","body","status","createdAt","updatedAt"],"description":"Represents a seller or admin reply to a product review in the shopping_mall_review_replies table. Supports one reply per review per responder type. Fields include author type, association to review/product, reply body, visibility status, audit timestamps, and soft delete state. Follows strict enum and nullability constraints, aligns with database relations, and serves both UI display and moderation/audit workflows. Only schema properties are included; all required fields must be present."},"IShoppingMallReviewReply.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_review_replies","properties":{"body":{"type":"string","description":"Reply text. Displayed publicly with the review for transparency. Must follow the business rule for maximum length; supports multi-paragraph replies with clear business content and proper formatting for both end-user and admin displays."},"status":{"type":"string","description":"Reply visibility status: 'public' or 'hidden'. Determines whether reply is visible to customers/sellers or only in admin/moderation workflows. Must be set based on business rules enforcing moderation flows, transparency, or restriction."}},"required":["body","status"],"description":"Data Transfer Object for creating a new review reply associated with shopping_mall_review_replies. Used by the seller or admin to submit a response under a product review. Body is required, visibility status is set at creation. This schema is strictly mapped to the underlying Prisma model; all security context and permission checks must be handled at business logic/service layer, not via schema extension. All values must be validated for business rules, content compliance, and role-based constraints."},"IShoppingMallReviewReply.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_review_replies","properties":{"body":{"type":"string","description":"New or edited reply content. Required if body is being updated; must follow platform moderation/content rules. Multi-paragraph text with support for markdown or rich text is allowed if business logic permits, otherwise validated as plain string."},"status":{"type":"string","description":"Updated reply visibility status: 'public' or 'hidden'. May only be set by the reply author (seller or admin) or as part of a moderation process by admin users. The value must match one of the allowed status states. If status is omitted in the update, the current status is preserved unless amended by system flow."}},"description":"Partial update Data Transfer Object for an existing review reply (shopping_mall_review_replies). Allows seller/admin to replace reply content (body) or status (public/hidden). Every value must conform to the business logic and content standards for review replies, and constraints on update eligibility must be checked in logic layer. Partial updates apply (any or all updatable fields may be included).","required":[]},"IShoppingMallOrderHistory.IRequest":{"type":"object","properties":{"snapshot_type":{"type":"string","description":"Filter by the type of order snapshot (such as 'cancellation', 'refund', 'escalation', or 'appeal'). Must match snapshot_type values in the shopping_mall_order_histories table."},"order_status":{"type":"string","description":"Filter by order status at the time of the snapshot. Matches the order_status column. Example: 'cancelled', 'pending', 'completed'."},"created_from":{"type":"string","format":"date-time","description":"Filter for history snapshots created after this ISO 8601 datetime."},"created_to":{"type":"string","format":"date-time","description":"Filter for history snapshots created before this ISO 8601 datetime."},"order_id":{"type":"string","format":"uuid","description":"Filter by related order's unique ID. Matches shopping_mall_order_histories.shopping_mall_order_id."},"snapshot_reason":{"type":"string","description":"Optional search or partial string match for reason in the snapshot_reason column."},"page":{"type":"integer","minimum":1,"description":"Current page number for pagination. Starts from 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of items per page for pagination.","default":20},"sort_by":{"type":"string","description":"Sort by this field (e.g. created_at)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending or 'desc' for descending."},{"const":"desc","description":"Sort direction: 'asc' for ascending or 'desc' for descending."}],"description":"Sort direction: 'asc' for ascending or 'desc' for descending."}},"required":[],"description":"Request DTO for searching or paginating order history snapshot records (shopping_mall_order_histories). Includes filtering parameters such as snapshot type, order status, creation date range, associated order, and custom reason match. Also defines pagination and sorting fields."},"IShoppingMallOrderHistory":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_histories","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier of the order history snapshot record."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Belonged order's unique ID. References shopping_mall_orders.id."},"snapshot_type":{"type":"string","description":"Type of the customer service event prompting the snapshot (e.g., 'cancellation', 'refund', 'escalation', 'appeal')."},"order_status":{"type":"string","description":"Order status at the time of the snapshot. Value is copied for audit context from the related order."},"order_total":{"type":"number","description":"Order amount at the time of event (may include applied refunds/cancellation)."},"snapshot_reason":{"type":"string","description":"Business reason or comment associated with this history entry (e.g., system-generated, admin note, case user update)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of the snapshot creation for auditing. In ISO 8601 with time zone."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete. Indicates record logically removed for data retention, but not physically deleted."},{"type":"null"}],"description":"Soft delete. Indicates record logically removed for data retention, but not physically deleted."}},"required":["id","shopping_mall_order_id","snapshot_type","order_status","order_total","created_at"],"description":"Order history snapshot record taken at key customer service milestones for audit, compliance, and reporting. Stores a point-in-time record of the order status for reference during cancellation, refund, escalation, or appeal events. Includes business and audit metadata to comply with retention and compliance standards."},"IShoppingMallOrderHistory.IUpdate":{"type":"object","description":"Update request for a historical order snapshot event in customer service processes.\n\nThis type is used solely by the admin dashboard for correcting or appending additional context to immutable order history records in the shopping_mall_order_histories table. It only exposes fields permitted by business logic for update; fields such as created_at and deleted_at are immutable and cannot be edited. Intended for audit corrections, compliance notes, or after-action reviews. All modifications are recorded with administrator identity and timestamp in platform audit logs.","x-autobe-prisma-schema":"shopping_mall_order_histories","properties":{"snapshot_reason":{"type":"string","description":"Business reason or comment associated with this history entry (e.g., system-generated, admin note, case user update).\n\nThis field allows the system or admin to annotate a particular order history event, such as why a cancellation snapshot was taken, details about a refund, or explanations for escalation or appeal handling in customer service. Examples include 'System automatic snapshot due to cancellation workflow', 'Admin corrective audit', or 'Escalation snapshot - customer request'. It supports traceability and post-mortem analysis. Field is optional, but detailed explanations enhance auditability and compliance."}},"required":[]},"IShoppingMallCustomerServiceEvent.IRequest":{"type":"object","description":"Filter, search, and pagination options for retrieving customer service events.\n\nThis type matches the advanced filtering capabilities of admin dashboards and customer service audit tools for interrogating the shopping_mall_customer_service_events table. All fields are optional; query parameters are dynamically composed. Paging and sorting (if required) are typically handled by surrounding IPage/IRequest contract wrappers. Used to support reconstruction of customer support timelines, dispute case review, and regulatory compliance monitoring. No required fields: all filtering is opt-in based on auditor needs.","properties":{"order_history_id":{"type":"string","format":"uuid","description":"Reference to the related order history snapshot, if event is directly tied to order audit.\n\nLinks this customer service event to a specific milestone in order evolution (cancellation, refund, escalation), supporting full audit trace and post-mortem investigation. Must be a valid UUID referencing an existing record in shopping_mall_order_histories."},"shopping_mall_escalation_id":{"type":"string","format":"uuid","description":"Reference to the related escalation case, if event is part of a broader dispute.\n\nAllows filtering/searching all customer service events related to a specific escalation instance, and for reconstructing resolution timelines. Nullable and optional in schemas; only present when attached to an escalation case."},"shopping_mall_appeal_id":{"type":"string","format":"uuid","description":"Reference to the related appeal, if this event is part of an appeal process.\n\nSupports querying of appeal-related customer service events. Nullable and optional, present only when tied to appeals or repeated customer challenges over admin/seller decisions."},"actor_customer_id":{"type":"string","format":"uuid","description":"Customer ID if the event was performed by a customer.\n\nFilterable field for retrieving all events performed by a specific customer. Used in self-service case histories and customer-side audit views."},"actor_seller_id":{"type":"string","format":"uuid","description":"Seller ID if the event was performed by a seller actor.\n\nUsed to query and review all customer service actions performed by a given seller and to distinguish seller-vs-customer-initiated events during order support review."},"actor_admin_id":{"type":"string","format":"uuid","description":"Admin ID if event was performed by a platform admin.\n\nSearchable by platform auditors or for tracking intervention in critical service events. Provides traceability for administrative workflows."},"event_type":{"type":"string","description":"Type/category of the service event, such as 'case-open', 'message', 'investigation', 'resolution', 'appeal-filed', and more.\n\nAllows filtering events by business workflow or major timeline category as defined in customer service business logic. Supports both standard and custom event types for extensibility."},"event_status":{"type":"string","description":"Current status of this event, such as 'in-progress', 'resolved', 'pending', 'escalated'.\n\nUsed to filter pending or open service events, or to review resolution outcomes across the case lifecycle."},"created_at_from":{"type":"string","format":"date-time","description":"Filter for events created at or after this ISO 8601 timestamp.\n\nEnables time-windowed search for event histories in audit, admin review, or compliance scenarios. Should be formatted as UTC ISO 8601 string."},"created_at_to":{"type":"string","format":"date-time","description":"Filter for events created at or before this ISO 8601 timestamp.\n\nWorks in conjunction with 'created_at_from' to provide bounded time-range queries on event timelines. Formatted as UTC ISO 8601."},"event_comment":{"type":"string","description":"Free text comment or detail filter for searching event narrative content.\n\nFilter for events containing specific terms or explanations in their event_comment field (e.g., search for 'delayed shipment', 'system correction', or agent names)."}},"required":[]},"IShoppingMallCustomerServiceEvent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key uniquely identifying this customer service event record as stored in the database. Generated as a UUID v4 on creation. Immutable throughout its lifetime. Used for referencing, searching, and audit links."},"order_history_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to an order history snapshot associated with this event. If present, this links the event to a particular audit milestone or order state (cancellation, refund, escalation). The value is a UUID referencing shopping_mall_order_histories.id or null if the event is not tied to an order snapshot. Used to reconstruct complete order customer service timelines for audit and compliance."},"shopping_mall_escalation_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to an escalation (dispute case) event ID. Provides trace linkage to complex disputes or customer service cases requiring admin intervention. UUID referencing shopping_mall_escalations.id or null if not related to an escalation record."},"shopping_mall_appeal_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a related appeal case as part of the customer service escalation/appeal flow. UUID referencing shopping_mall_appeals.id or null if not associated with an appeal."},"actor_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the customer actor performing this customer service event as reported in the system. Null if not initiated by a customer. UUID reference to shopping_mall_customers.id if present."},"actor_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the seller actor performing or associated with this event. Null if not initiated by seller. UUID reference to shopping_mall_sellers.id if present."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the administrator triggering or handling this customer service event. Null if not an admin-initiated event. UUID reference to shopping_mall_admins.id if present."},"event_type":{"type":"string","description":"Type/category of the service event such as 'case-open', 'message', 'investigation', 'resolution', 'appeal-filed', etc., as documented by customer service requirements. Enum may be enforced in business logic but values may be arbitrary strings here."},"event_status":{"type":"string","description":"High-level status of this event according to workflow: typically 'in-progress', 'resolved', 'pending', 'escalated', etc. Used to track processing pipeline, queue, and analytics."},"event_comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business comment, detailed message, actor response, or audit trace for this service event. Intended as a free-text field providing full context for customer service audit and escalation case management."},"created_at":{"type":"string","format":"date-time","description":"Indicates the timestamp (ISO 8601) when this customer service event was registered in the database. Used for audit, ordering, and customer journey timelines. Immutable."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp to logically remove events from standard search/index without permanently erasing them. Null if the event is active; non-null ISO 8601 UTC timestamp if removed for data retention/audit. Used for compliance and not for physical deletion."}},"required":["id","event_type","event_status","created_at"],"x-autobe-prisma-schema":"shopping_mall_customer_service_events","description":"Customer Service Event entity. Represents a discrete event in the customer service, case escalation, or appeal workflow for a shopping mall order. Each event links to specific customer, seller, and/or admin actors, and optionally to an order history, escalation, or appeal context. This type is foundational for audits, customer journey timelines, and compliance tracking. All fields are mapped directly from the shopping_mall_customer_service_events Prisma model. See domain requirements for additional business context."},"IShoppingMallCustomerServiceEvent.IUpdate":{"type":"object","properties":{"event_status":{"type":"string","description":"New status value for this event, such as 'resolved', 'in-progress', 'pending', or business workflow status. Enum values may be validated in the provider."},"event_comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated business comment, note, or audit message to log context, communication, or status change for this event. Free-text field for both system and user-facing commentary. Null allowed to clear the comment."}},"required":["event_status"],"description":"Update DTO for a single customer service event. Used to modify permitted mutable fields—status and optionally the comment—of a customer service workflow event during escalation, investigation, or resolution. All changes are audit-logged and mapped to fields in the shopping_mall_customer_service_events table."},"IShoppingMallEscalation.IRequest":{"type":"object","properties":{"orderId":{"type":"string","format":"uuid","description":"The unique identifier of the related order for which escalation is raised."},"escalation_type":{"type":"string","description":"Type or reason for the escalation (e.g., 'payment dispute', 'order not received', 'refund delay')."},"description":{"type":"string","description":"Free-text justification, complaint, or scenario explaining the reason for escalation."},"initiator_role":{"type":"string","description":"Role initiating the escalation: 'customer' or 'seller'. Only valid for actors directly related to the order (as customer or seller)."},"initiator_id":{"type":"string","format":"uuid","description":"Unique identifier of the actor initiating the escalation (customer or seller) - required for audit and ownership checks."}},"required":["orderId","escalation_type","initiator_role","initiator_id"],"description":"Structured request payload for creating or searching escalations related to order disputes or complex customer service cases.\n\nIncludes all required fields for contextualizing and creating an escalation, such as the related order (orderId), type of escalation, descriptive context, initiator information, and precise actor identification. Descriptions clarify decision points for platform workflows, and all user-facing APIs utilizing escalations reference this base type."},"IShoppingMallEscalation":{"type":"object","x-autobe-prisma-schema":"shopping_mall_escalations","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this escalation record."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Referenced order's id for which escalation is tracked."},"initiator_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"FK to customer initiating the escalation, if customer."},"initiator_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"FK to seller initiating the escalation, if seller."},"assigned_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin user assigned to manage/resolve this escalation (optional until assignment)."},"escalation_type":{"type":"string","description":"Business/category type of the escalation (e.g., payment dispute, order not received)."},"escalation_status":{"type":"string","description":"Current status of this escalation record (e.g., pending, in-review, resolved, closed, escalated-to-admin)."},"resolution_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of case closure/resolution (e.g., refund-issued, denied, order-resent, goodwill-credit; optional, set at outcome)."},"resolution_comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional moderation/admin comment or customer/seller narrative for resolution."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp when the escalation case was created (UTC)."},"updated_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp of last update to this escalation case (UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete. Indicates case logically removed for data retention."}},"required":["id","shopping_mall_order_id","escalation_type","escalation_status","created_at","updated_at"],"description":"Represents an escalation case record for orders requiring advanced support, dispute resolution, or manual intervention as tracked in the platform's shopping_mall_escalations table.\n\nIncludes cross-order references, escalation metadata, initiator and owner info, audit history, and resolution tracking. Encapsulates all business context for audit, customer service, and compliance reporting."},"IShoppingMallEscalation.ICreate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"The unique identifier of the order this escalation case is associated with. This field is required to link the escalation with a specific order and will be validated to ensure customer or seller relationship to the order. Must be a valid UUID string referencing shopping_mall_orders.id."},"escalation_type":{"type":"string","description":"The type or reason for the escalation, describing the category of dispute such as 'payment dispute', 'order not received', 'refund delay', etc. Must be a descriptive business code/tag. Example: 'order_not_received', 'refund_denied', 'compliance_inquiry'."},"resolution_type":{"type":"string","description":"The intended or requested resolution type for the escalation (optional at creation). Used if known—from the set of platform support outcomes, such as 'refund-issued', 'order-resent', 'manual_review', 'goodwill-credit'. May be null or omitted during initial submission, but can be set for subsequent clarity."},"escalation_status":{"type":"string","description":"The escalation status for the lifecycle of the case (optional at creation).\nTypical statuses: 'pending', 'in-review', 'resolved', 'closed', 'escalated-to-admin'.\nDefaults to 'pending' on creation if omitted."},"resolution_comment":{"type":"string","description":"Optional initial explanation or resolution comment. Use for extra context or to describe circumstances of the dispute or expected administrative resolution."}},"required":["shopping_mall_order_id","escalation_type"],"description":"DTO for creating a new escalation case (shopping_mall_escalations). Represents user-initiated request to escalate an unresolved issue or platform-side escalation of a service case. Populates audit and linkage fields for compliance."},"IShoppingMallEscalation.IUpdate":{"type":"object","properties":{"escalation_type":{"type":"string","description":"(Optional) Update to the escalation type/category of the case. Should be used if the reason for escalation changes during workflow or requires reclassification. Must remain consistent with allowed platform escalation types."},"escalation_status":{"type":"string","description":"(Optional) Update to escalation status (e.g., move from 'pending' to 'in-review', 'resolved', 'closed', 'escalated-to-admin'). Valid transitions are defined by business process and should be enforced in workflow logic."},"resolution_type":{"type":"string","description":"(Optional) Business code indicating how the escalation was resolved: e.g., 'refund-issued', 'order-resent', 'manual_review', 'goodwill-credit', etc. Populated when the case is progressed or resolved."},"resolution_comment":{"type":"string","description":"(Optional) Administrative or user-facing comment or explanation about the resolution. Text body providing details of how/why the escalation was closed, further information, or rationale for resolution."},"assigned_admin_id":{"type":"string","format":"uuid","description":"(Optional, admin only) Assign or reassign the escalation to a specific admin by ID. Used for case routing among customer service/operational admin accounts. Must be a valid UUID referencing shopping_mall_admins.id."}},"required":[],"description":"DTO for updating an existing escalation (shopping_mall_escalations), including status/progress changes, resolution types, admin re-assignment, and resolution remarks. Only fields provided are updated. Assignment or status changes are typically limited to admin/staff handling the case."},"IShoppingMallAppeal.IRequest":{"type":"object","properties":{"escalation_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the related escalation case for this appeal. References the parent escalation to which this appeal is attached.\n\nRequired. Must match a valid escalation in the system."},"appeal_type":{"type":"string","description":"The type of appeal being filed. Indicates the nature of the request, such as 'refund denied', 'order closure challenge', 'policy review request', or similar reasons as defined by business rules. \n\nRequired. Business logic may reference allowed values or enums, but schema allows string."},"comment":{"type":"string","description":"A reason, message, or explanation for the appeal from the customer or seller submitting the appeal.\n\nRequired. Should clearly state the justification for the appeal. May be displayed to reviewers and admins."}},"required":["escalation_id","appeal_type","comment"],"description":"Request structure for creating a new appeal related to a customer service escalation. All fields must be provided by the client. This type is intended for use by customers or sellers submitting an appeal after a dispute, order closure denial, or other escalated case.\n\nReferences the shopping_mall_appeals table for field alignment. Provides all information necessary for the platform to record, route, and begin review of an appeal."},"IShoppingMallAppeal":{"type":"object","x-autobe-prisma-schema":"shopping_mall_appeals","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this appeal record as stored in the appeals table.\n\n@PrismaColumn: id"},"escalation_id":{"type":"string","format":"uuid","description":"Related escalation's shopping_mall_escalations.id. The escalation to which this appeal is attached. References customer service dispute or complaint workflow.\n\n@PrismaColumn: escalation_id"},"appellant_customer_id":{"oneOf":[{"type":"string","format":"uuid","description":"Customer's shopping_mall_customers.id if this appeal is submitted by a customer. Nullable if a seller is the appellant.\n\n@PrismaColumn: appellant_customer_id"},{"type":"null"}],"description":"Customer's shopping_mall_customers.id if this appeal is submitted by a customer. Nullable if a seller is the appellant.\n\n@PrismaColumn: appellant_customer_id"},"appellant_seller_id":{"oneOf":[{"type":"string","format":"uuid","description":"Seller's shopping_mall_sellers.id if this appeal is submitted by a seller. Nullable if customer is the appellant.\n\n@PrismaColumn: appellant_seller_id"},{"type":"null"}],"description":"Seller's shopping_mall_sellers.id if this appeal is submitted by a seller. Nullable if customer is the appellant.\n\n@PrismaColumn: appellant_seller_id"},"reviewing_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin's shopping_mall_admins.id responsible for reviewing/deciding this appeal. Nullable until assigned by platform.\n\n@PrismaColumn: reviewing_admin_id"},{"type":"null"}],"description":"Admin's shopping_mall_admins.id responsible for reviewing/deciding this appeal. Nullable until assigned by platform.\n\n@PrismaColumn: reviewing_admin_id"},"appeal_type":{"type":"string","description":"Type or nature of the appeal (e.g., 'refund denied', 'order closure challenge', 'policy review request'). Describes the reason for the appeal.\n\n@PrismaColumn: appeal_type"},"appeal_status":{"type":"string","description":"Current status of the appeal: pending, under review, resolved, dismissed, accepted, or rejected. Controls eligibility for admin/management action.\n\n@PrismaColumn: appeal_status"},"resolution_type":{"oneOf":[{"type":"string","description":"Outcome or closure reason for the appeal (e.g., 'refund-granted', 'upheld-denial', 'manual override'). May be null if not yet resolved.\n\n@PrismaColumn: resolution_type"},{"type":"null"}],"description":"Outcome or closure reason for the appeal (e.g., 'refund-granted', 'upheld-denial', 'manual override'). May be null if not yet resolved.\n\n@PrismaColumn: resolution_type"},"resolution_comment":{"oneOf":[{"type":"string","description":"Admin's commentary on the final result, reason for resolution, or details about the outcome. May be null if the appeal is open.\n\n@PrismaColumn: resolution_comment"},{"type":"null"}],"description":"Admin's commentary on the final result, reason for resolution, or details about the outcome. May be null if the appeal is open.\n\n@PrismaColumn: resolution_comment"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the appeal was filed by the customer or seller. ISO 8601 format.\n\n@PrismaColumn: created_at"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last status update or workflow transition in appeal. Auto-updated on modification.\n\n@PrismaColumn: updated_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp. If present, the appeal is logically removed from active use but retained for compliance. Null if active.\n\n@PrismaColumn: deleted_at"}},"required":["id","escalation_id","appeal_type","appeal_status","created_at","updated_at"],"description":"Full detail of an appeal record as represented in the shopping_mall_appeals table. Contains all audit, status, reason, and relational information for customer or seller appeals on escalated customer service cases. Admin, seller, and customer references are conditionally nullable depending on the type of appeal and its actors. Used throughout the customer service, auditing, and admin dashboard flows."},"IShoppingMallAppeal.ICreate":{"type":"object","properties":{"escalation_id":{"type":"string","format":"uuid","description":"Unique identifier of the escalation record this appeal is associated with.\n\nThis field references the shopping_mall_escalations table and is required for relating the appeal to the original escalation event that is being challenged or further reviewed.\n\nMust be a valid UUID corresponding to an existing escalation case."},"appeal_type":{"type":"string","description":"Type or nature of the appeal. Indicates the reason or trigger for the appeal (e.g. 'refund denied', 'order cancellation challenge', 'policy review request').\n\nThis value informs platform workflow, filtering, and reporting for different kinds of customer/seller appeals.\n\nShould comply with backend or business-defined enum for appeal types."},"explanation":{"type":"string","description":"Detailed explanation or justification text for this appeal. The applicant should clearly state the grounds for their appeal, context, new evidence, or reasons for requesting reconsideration.\n\nRequired field that is shown to admins/reviewers and is archived for audit trail. Multi-paragraph/structured text permitted for advanced scenarios."}},"required":["escalation_id","appeal_type","explanation"],"description":"Schema for creating a new appeal record related to an escalation case in the shoppingMall platform.\n\nThis is used by customers or sellers who wish to escalate a prior decision, triggering a new review by platform admin. All required fields are strictly validated. Each appeal must be linked to an existing escalation (via escalation_id)."},"IShoppingMallAppeal.IUpdate":{"type":"object","properties":{"appeal_status":{"type":"string","description":"New status for the appeal (e.g., 'pending', 'under review', 'resolved', 'dismissed', 'accepted', 'rejected').\n\nThis is a workflow-controlled field and must comply with allowed status transitions determined by platform business logic.\n\nRequired for updating the state of an appeal, as handled by the admin reviewer."},"resolution_type":{"type":"string","description":"Outcome or method of appeal closure or review (such as 'refund-granted', 'upheld-denial', 'manual-override').\n\nOptional string that documents how the appeal was resolved.\n\nThis field is important for analytics and compliance reporting."},"resolution_comment":{"type":"string","description":"Administrative commentary or reasoning explaining the final result of the appeal.\n\nMay include legal compliance notes, customer/seller context, or documentation for audit trail.\n\nShould be complete, detailed, and traceable for quality/appeal recordkeeping."}},"required":["appeal_status"],"description":"Schema for updating an appeal record tied to an escalation in the shoppingMall platform. Used for workflow management, appeal review, and resolution by admins.\n\nSupports updating core workflow state (appeal_status) and associated resolution info for compliance, audit, and platform reporting."},"IShoppingMallAdminActionLog.IRequest":{"type":"object","properties":{"action_type":{"type":"string","description":"Type of the admin action being searched for (e.g., approval, ban, override, suspend, restore, etc.). This value is typically used as a filter to narrow down the types of administrative actions included in the search results."},"affected_domain":{"type":"string","description":"Domain or entity type affected by the action, such as customer, seller, product, order, or review. Used for filtering which area of the platform was affected by the logged admin action."},"affected_entity_id":{"type":"string","format":"uuid","description":"UUID of the affected business entity (customer, seller, product, order, or review), if the search should be filtered for a specific entity record."},"acting_admin_id":{"type":"string","format":"uuid","description":"UUID of the admin for whom action logs are retrieved (used to filter by actions performed by a specific administrator)."},"created_at_from":{"type":"string","format":"date-time","description":"Filter for logs created on or after this ISO 8601 timestamp (inclusive)."},"created_at_to":{"type":"string","format":"date-time","description":"Filter for logs created on or before this ISO 8601 timestamp (inclusive)."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated queries (starting from 1)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of records to retrieve per page. Platform default and max limits may apply."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field by which to sort the results. Supported fields: 'created_at', 'action_type'."},{"const":"action_type","description":"Field by which to sort the results. Supported fields: 'created_at', 'action_type'."}],"description":"Field by which to sort the results. Supported fields: 'created_at', 'action_type'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for the sort_by field. Either 'asc' (ascending) or 'desc' (descending)."},{"const":"desc","description":"Sort order for the sort_by field. Either 'asc' (ascending) or 'desc' (descending)."}],"description":"Sort order for the sort_by field. Either 'asc' (ascending) or 'desc' (descending)."}},"required":[],"description":"Request filter and search criteria for querying admin action logs. This DTO enables advanced admin-side search, filtering, sorting, and pagination of systemwide admin activity for compliance and operational transparency.\n\nEntity fields such as action_type, affected_domain, and acting_admin_id allow for highly granular search of platform security and operational actions. Optional time range filters and pagination options scale for large result sets. Used exclusively on platform admin audit/search endpoints for privileged users.\n"},"IShoppingMallAdminActionLog":{"type":"object","x-autobe-prisma-schema":"shopping_mall_admin_action_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the admin action log entry in the system."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"UUID of the admin who performed the action. References shopping_mall_admins.id."},"affected_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the affected customer if the action was related to any customer entity. References shopping_mall_customers.id. May be null."},"affected_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the affected seller if the action was related to a seller entity. References shopping_mall_sellers.id. May be null."},"affected_product_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the affected product if the action was related to a product entity. References shopping_mall_products.id. May be null."},"affected_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the affected order if the action was related to an order entity. References shopping_mall_orders.id. May be null."},"affected_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the affected review if the action was related to a review entity. References shopping_mall_reviews.id. May be null."},"action_type":{"type":"string","description":"Type of admin action performed (e.g., approval, ban, suspend, override, edit, restore, delete, escalation, etc.) as recorded in the audit log. Used to classify the event for compliance and reporting."},"action_reason":{"type":"string","description":"Human-readable description of why the admin action was performed. Required for compliance and operational history. Explains the intent and context for the action."},"domain":{"type":"string","description":"Domain or entity type affected by the admin action (e.g., customer, seller, product, order, review, system, etc). Indicates which area of the platform was impacted and how the action should be classified in audit reports."},"details_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Serialized JSON string with structured pre/post values, audit context, or additional operational details for the action. Used for deep compliance audits and root cause analysis. May be null if no extended details provided."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of when the admin action occurred and was logged in the system."}},"required":["id","shopping_mall_admin_id","action_type","action_reason","domain","created_at"],"description":"Admin action log record, representing any significant audit, compliance, or platform management event performed by a system administrator. Each log entry captures the full context of the action, including the acting admin, affected domain/entities, intent, operational details, and audit timestamps.\n\nThis entity supports full transparency and traceability of key admin actions such as approvals, bans, edits, suspensions, overrides, or detailed interventions. Log entries are immutable after creation (except for rare corrections), and referenced in compliance dashboards, security investigations, and regulatory inquiries. Used only in privileged admin contexts for platform security, audit, and oversight.\n"},"IShoppingMallAdminActionLog.ICreate":{"type":"object","properties":{"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"The unique identifier of the admin performing the action. Refers to the admin's id in the shopping_mall_admins table."},"affected_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the action targets a customer, the customer's unique id. Nullable if the action does not concern a specific customer."},"affected_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the action targets a seller, the seller's unique id. Nullable if not applicable."},"affected_product_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the admin action involves a product, the product's unique id. Nullable if not applicable."},"affected_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the admin action involves an order, the order's unique id. Nullable if not applicable."},"affected_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the admin action involves a review, the review's unique id. Nullable if not applicable."},"action_type":{"type":"string","description":"The type of admin action. Example values: approval, ban, suspend, override, edit, restore, etc."},"action_reason":{"type":"string","description":"The business or compliance reason for the admin action; required for all log entries."},"domain":{"type":"string","description":"The domain/entity type affected by the action (customer, seller, product, order, review, system, etc)."},"details_json":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Structured JSON blob with action context, such as before/after values or detailed audit context. May be null if not used."}},"required":["shopping_mall_admin_id","action_type","action_reason","domain"],"description":"Schema for creating a new admin action log entry. Represents a single admin-side intervention on a core business entity, with full audit trail for compliance and transparency. Field mapping directly follows the shopping_mall_admin_action_logs Prisma schema; required properties reflect business process and legal requirements for audit and recovery. All identifiers refer to the respective entity tables."},"IShoppingMallAdminActionLog.IUpdate":{"type":"object","properties":{"action_type":{"type":"string","description":"Admin action type. May only be updated for correction; must match domain-specific taxonomy (e.g., approval, ban, suspend, override, edit, restore)."},"action_reason":{"type":"string","description":"Updated action rationale. Used if explanation for the admin action or compliance note changes after review or incident correction."},"details_json":{"type":"string","description":"New or additional structured audit details, such as full before/after context, attachments, or external references. Must be a stringified JSON content. Optional."}},"required":[],"description":"Schema for admin updates to an existing action log entry. Permits limited correction (action_type, action_reason, details_json). Edits are controlled for audit compliance: only non-identifier, mutable properties may be set. Mapped to the shopping_mall_admin_action_logs model. All update events are further audited."},"IShoppingMallAdminAuditLog.IRequest":{"type":"object","properties":{"admin_id":{"type":"string","format":"uuid","description":"Filter logs by specific administrator's unique ID (UUID).\n\nThe value must reference a valid admin record if present. Enables focused audit for a single acting admin or subset of actions. Optional; if omitted, all admins are included in the result."},"audit_event_type":{"type":"string","description":"Optional filter specifying the type of audit event (e.g., 'login', 'permission_grant', 'system_setting', etc.). Only logs matching this type will be returned if provided. Referenced from the enum of possible audit actions in the admin audit log schema."},"domain":{"type":"string","description":"Filter for administrative actions taken in a specific domain or operational context (e.g., 'orders', 'products', 'users', 'platform'). Optional; returns all domains if not specified."},"log_level":{"type":"string","description":"Filter for logs by severity or log level (e.g., 'info', 'warning', 'critical'). Applies if specific audit event priorities are tracked. Optional."},"created_at_min":{"type":"string","format":"date-time","description":"Lower-bound ISO 8601 timestamp to filter logs created at or after this time."},"created_at_max":{"type":"string","format":"date-time","description":"Upper-bound ISO 8601 timestamp. Only logs created before (or at) this time are included."},"q":{"type":"string","description":"Free-text or keyword search across event context, reason, affected entity, and relevant fields. Supports partial/fuzzy matching with trigram index if supported by database."},"page":{"type":"integer","format":"uint32","description":"Page number to retrieve for paginated queries. Defaults to 1. Must be greater than or equal to 1."},"limit":{"type":"integer","format":"uint32","description":"Number of results per page (page size). Defaults to a platform-configured value such as 100; max value enforced by API to prevent over-fetching."},"sort_by":{"type":"string","description":"Field to sort results by, e.g., 'created_at', 'log_level', 'admin_id'. Must be a valid field in the admin audit log table."},"desc":{"type":"boolean","description":"Whether to sort in descending order (true) or ascending order (false). Default is descending order by creation date for newest first."}},"required":[],"description":"Search and filtering parameters for retrieving a paginated list of administrative audit log records from shopping_mall_admin_audit_logs.\n\nThis type enables advanced search across event type, time range, domain, log level, admin, and keyword fields. Supports pagination, sorting, and all query-related controls required by the admin dashboard or compliance auditing tools."},"IShoppingMallAdminAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key, unique identifier for this audit log record."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"ID of the administrator who performed the action. Foreign key referencing the admin users table.\n\nUsed to link the log to the precise actor responsible for the event. Required for full audit compliance."},"audit_event_type":{"type":"string","description":"Type of audit event (e.g., 'login', 'permission_grant', 'system_setting', 'ban', 'account_unlock', 'delete_entity', etc.).\n\nServes as a classifier for log entries, supporting advanced search and reporting."},"domain":{"type":"string","description":"The operational area, module, or domain impacted by this admin action. Examples: 'platform', 'user_management', 'orders', 'catalog', 'reviews', etc.\n\nSupports domain-based audit filtering."},"event_context_json":{"type":"string","description":"Serialized JSON data containing context for this event. May include before/after snapshots for updated entities, or additional structured information for action traceability.\n\nNot meant for general user viewing; primarily for admin, audit, and incident review."},"log_level":{"type":"string","description":"Severity or importance of the event (e.g., 'info', 'warning', 'critical').\n\nUsed to prioritize log entries for review and regulation compliance. Values may be restricted by business policy (see platform documentation for enum or allowed values)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit log entry was recorded (ISO 8601 date-time). Used for sorting, reporting, and audit trace."}},"required":["id","shopping_mall_admin_id","audit_event_type","domain","log_level","created_at"],"description":"Represents a detailed log entry for a single administrative/audit event performed by a platform admin.\n\nCaptures event type, responsible admin, affected domain, structured event context, severity, and precise creation timestamp. Supports full compliance, traceability, and governance requirements for admin monitoring, incident response, and regulatory audit."},"IShoppingMallAdminAuditLog.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_admin_audit_logs","properties":{"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Acting admin's unique identifier from the shopping_mall_admins table. Required."},"audit_event_type":{"type":"string","description":"Type of audit event being logged, e.g., login, permission_grant, system_setting, etc. Must be a concise identifier."},"domain":{"type":"string","description":"Domain context for the admin action, e.g., platform, user_management, orders, products, etc."},"event_context_json":{"oneOf":[{"type":"string","description":"Optional serialized JSON context with before/after states, details, etc. Use for advanced audit scenarios."},{"type":"null"}],"description":"Optional serialized JSON context with before/after states, details, etc. Use for advanced audit scenarios."},"log_level":{"type":"string","description":"Audit log level, e.g., info, warning, critical, based on the nature of the event."}},"required":["shopping_mall_admin_id","audit_event_type","domain","log_level"],"description":"Schema for creating a new admin audit log entry, as per shopping_mall_admin_audit_logs Prisma table. Records all critical platform administrative events for compliance review. Mutually exclusive from admin action log, used for immutable admin activity reporting and regulatory review.\n\nProperties reference underlying columns: admin id, event type, domain context, detailed JSON state snapshot, and log level. Use this DTO when a new audit trail record is required. This type never records user/customer sensitive data directly—references only admin and abstracted structured context."},"IShoppingMallModerationEventLog.IRequest":{"type":"object","properties":{"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Filter for moderation events performed by this admin (optional)."},"event_type":{"type":"string","description":"Optional filter for type of moderation event, e.g., flag, removal, approval, annotation, warning, escalation, etc. Must match values as stored in event_type field."},"affected_seller_id":{"type":"string","format":"uuid","description":"Optional filter for moderation events affecting a specific seller (UUID)."},"affected_product_id":{"type":"string","format":"uuid","description":"Optional filter for moderation events affecting a specific product (UUID)."},"affected_review_id":{"type":"string","format":"uuid","description":"Optional filter for moderation events affecting a specific review (UUID)."},"affected_order_id":{"type":"string","format":"uuid","description":"Optional filter for moderation events affecting a specific order (UUID)."},"created_from":{"type":"string","format":"date-time","description":"Optional ISO 8601 lower bound for event creation time, for range queries."},"created_to":{"type":"string","format":"date-time","description":"Optional ISO 8601 upper bound for event creation time, for range queries."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number (1-based). Optional, defaults to 1 if omitted."},"limit":{"type":"integer","minimum":1,"maximum":250,"description":"Pagination: maximum records per page, defaults to 20."},"sort":{"type":"string","description":"Optional sorting field, accepts values like 'created_at:desc', 'event_type:asc', etc. May choose a default if omitted."}},"required":[],"description":"Request body schema for listing moderation event logs via advanced filtering. Used by admin dashboards to search/filter moderation logs (flag, approval, etc) across products, sellers, reviews, and orders. Provides pagination, time window filtering, and advanced query options for detailed audit and moderation operations.\n\nProperties reflect fields in shopping_mall_moderation_event_logs table and standard pagination/sorting for admin reporting UI. Use null or omit filters for catch-all retrieval. Enum values must match platform field population as per business rules."},"IShoppingMallModerationEventLog":{"type":"object","description":"Moderation event log entity for the shopping mall platform. Represents administrative or automated moderation events affecting sellers, products, reviews, or orders, including flagging, removals, approvals, warnings, or escalations. Supports full audit trail and compliance. Follows the Prisma schema for shopping_mall_moderation_event_logs. All properties are strictly as defined by the database model and business rule documentation.\n\nThis schema must be detailed, with each property referencing column-level documentation from Prisma for clarity and business context.\n\nThis type is used as the main DTO for representing moderation log detail in responses, admin dashboards, audits, or any system task requiring event-level inspection of moderation activity.","x-autobe-prisma-schema":"shopping_mall_moderation_event_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the moderation event log entry, as defined in the Prisma schema (`@id`)."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Admin who performed the moderation (foreign key reference to shopping_mall_admins.id). This identifies the moderator responsible for the action."},"affected_seller_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing the affected seller, if the moderation event involved a seller entity."},{"type":"null"}],"description":"Optional: The seller affected by this moderation log, if applicable (shopping_mall_sellers.id). Null if not related to a seller (e.g., product or order only)."},"affected_product_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional: The product affected by this moderation log, if applicable (shopping_mall_products.id). Null if not related to a product (e.g., seller-only or review-only)."},"affected_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional: The review affected by this moderation log (shopping_mall_reviews.id). Null if this is not a review-related event."},"affected_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional: The order affected by this moderation log, if referenced (shopping_mall_orders.id)."},"event_type":{"type":"string","description":"Type of moderation event (e.g., flag, removal, approval, annotation, warning, escalation). Enumerated business codes as strings. Must match the schema's event_type values and moderation policy documentation."},"moderation_message":{"type":"string","description":"Free-text explanation for the moderation or exception event. Provided by the acting admin for audit, moderation context, and future investigation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of moderation event creation, for audit and time ordering. Must be ISO 8601 format."}},"required":["id","shopping_mall_admin_id","event_type","moderation_message","created_at"]},"IShoppingMallModerationEventLog.ICreate":{"type":"object","description":"DTO for creating a new moderation event log entry in the shopping mall moderation system. Used when recording new administrative moderation actions, such as policy enforcement, moderation interventions, or exception events.\n\nStrictly limited to fields allowed during creation; does not include system-generated fields (id, created_at) which are generated by the backend. Each field matches the Prisma schema's column documentation and the business logic implied by moderation flow requirements.","properties":{"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"The admin user's (moderator's) identifier who is performing this moderation action."},"affected_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the moderation affects a seller, this is the UUID of the seller. Optional for moderation events not targeting sellers."},"affected_product_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the moderation affects a product, this UUID references the product. Otherwise null."},"affected_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the moderation event affects a review, this field holds the UUID of that review. Null if not applicable."},"affected_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the moderation event is related to a specific order (e.g., fraud, shipping issues), this field references the affected order. Null if not applicable."},"event_type":{"type":"string","description":"Type of moderation event being created. Examples: 'flag', 'removal', 'approval', 'annotation', 'warning', 'escalation'. Must comply with business enumeration for event_type."},"moderation_message":{"type":"string","description":"Required. Human-readable message or rationale for the moderation event, written by the acting admin. Explains the context of the moderation decision for audit and investigation."}},"required":["shopping_mall_admin_id","event_type","moderation_message"]},"IShoppingMallModerationEventLog.IUpdate":{"type":"object","description":"Schema for updating a moderation event log entry associated with the shopping_mall_moderation_event_logs table.\n\nEach moderation event log tracks actions performed by an admin on platform entities (e.g., product, review, seller, order) in the shopping mall system. This update type allows admins to change properties such as the event type, moderation message, or references to affected entities. Only strict subsets of the fields are updatable, always following traceability and compliance requirements. This DTO is used for PATCH actions by admin users to correct or supplement previous moderation event logs. Related business logic enforces permission and audit integrity.\n\nRefer to the original Prisma schema and business rules for updatable fields. Typically, the fields include:\n- event_type (e.g., flag, removal, approval, warning, escalation, etc.)\n- moderation_message (reason for action or correction)\n- affected_seller_id, affected_product_id, affected_review_id, affected_order_id (entity references, as needed)\n- No timestamp or acting admin fields are updatable via this DTO. All changes are audit-logged by the platform.","properties":{"event_type":{"type":"string","description":"Type of moderation event (e.g., flag, removal, approval, annotation, warning, escalation, etc.). Must match platform-defined values."},"moderation_message":{"type":"string","description":"Audit message or explanation for the moderation action. Used for compliance, event context, or error correction."},"affected_seller_id":{"type":"string","format":"uuid","description":"UUID reference to the affected seller, if this event relates to a seller entity. Nullable if not applicable."},"affected_product_id":{"type":"string","format":"uuid","description":"UUID reference to the affected product, if this event relates to a product entity. Nullable if not applicable."},"affected_review_id":{"type":"string","format":"uuid","description":"UUID reference to the affected review, if this event relates to a product review. Nullable if not applicable."},"affected_order_id":{"type":"string","format":"uuid","description":"UUID reference to the affected order, if this event relates to an order entity. Nullable if not applicable."}},"required":[]},"IShoppingMallNotificationJob":{"type":"object","description":"Platform notification job entity reflecting the shopping_mall_notification_jobs table for e-commerce platform admins to manage user, group, or segment notifications (email, SMS, push, in-app, etc).\n\nEach notification job is configured and managed by admins; it stores parameters for notification type, job status, recipients, content templates, scheduling, results, and audit fields. Creation, updating, deletion, and retrieval of jobs are all performed via corresponding DTOs. Jobs may be pending, running, completed, or failed, and contain full targeting and configuration for audit and diagnosis.\n\nSee Prisma schema for all fields:\n- id: Unique job identifier (UUID)\n- shopping_mall_admin_id: UUID reference to admin owner (nullable)\n- job_type: Notification type (email, sms, push, in_app, etc)\n- job_status: Job execution status (pending, running, success, failed, cancelled)\n- target_json: JSON-encoded target recipients\n- config_json: JSON configuration (optional)\n- result_json: JSON result details (optional)\n- created_at, updated_at, deleted_at: Timestamps for audit/logging\n\nRelated flows include notification monitoring, retry, diagnosis, and compliance. No sensitive recipient or config data is returned to unauthorized users.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification job."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"UUID of the admin who scheduled/triggered the notification job. Nullable if not explicitly assigned."},"job_type":{"type":"string","description":"Type of notification job (email, sms, push, in_app, etc). Must match the platform's supported notification channels."},"job_status":{"type":"string","description":"Execution status of the notification job (pending, running, success, failed, cancelled)."},"target_json":{"type":"string","description":"Serialized JSON array describing notification targets (user IDs, groups, segments, topical broadcasts, etc.)."},"config_json":{"type":"string","description":"Serialized JSON configuration for the notification job, such as template reference, schedule, retry policy, etc. Optional and nullable."},"result_json":{"type":"string","description":"Serialized JSON summary of outcomes, recipient statuses, delivery logs, or failure details. Optional and nullable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the notification job was created (ISO 8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for when the job was last updated (ISO 8601, UTC)."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp for logical deletion (soft delete); null if active."}},"required":["id","job_type","job_status","target_json","created_at","updated_at"]},"IShoppingMallNotificationJob.ICreate":{"type":"object","properties":{"job_type":{"type":"string","description":"Type of notification job (email, sms, push, in_app). Specifies the delivery channel for the notification job to be scheduled. Example: \"email\"."},"target_json":{"type":"string","description":"Serialized JSON array specifying target recipients or segments of the notification job. May include user IDs, groups, or segments. Used to route the notification to the intended users, and must be valid JSON."},"config_json":{"oneOf":[{"type":"string","description":"(Optional) Serialized JSON for job configuration/settings (e.g., template, scheduling, retry logic). Allows for extended job configuration. If not needed, may be set to null."},{"type":"null"}],"description":"(Optional) Serialized JSON for job configuration/settings (e.g., template, scheduling, retry logic). Allows for extended job configuration. If not needed, may be set to null."},"schedule_config_json":{"oneOf":[{"type":"string","description":"(Optional) JSON-encoded schedule data and configuration, such as cron or timing information. Used to specify exact delivery, delay, recurrence, and control timing for scheduled notification jobs. If not needed (immediate notification), may be set to null."},{"type":"null"}],"description":"(Optional) JSON-encoded schedule data and configuration, such as cron or timing information. Used to specify exact delivery, delay, recurrence, and control timing for scheduled notification jobs. If not needed (immediate notification), may be set to null."}},"required":["job_type","target_json"],"description":"Notification job creation schema for admin-initiated messaging to users, groups, or segments. Used as the request body when creating a new notification job in the shopping_mall_notification_jobs table. All required fields must be specified as per schema for new jobs. This type supports specification of job type (delivery channel), recipients, and optional configuration or schedule. Refer to business requirements for each notification channel, recipient targeting, and scheduling constraints."},"IShoppingMallNotificationJob.IUpdate":{"type":"object","properties":{"job_status":{"type":"string","description":"New job status (e.g., pending, running, success, failed, cancelled). Used to update the current status of the scheduled or executed notification job. Must match system-controlled job status enums."},"target_json":{"oneOf":[{"type":"string","description":"(Optional) Updated serialized JSON array of target recipients or segments for the notification job. Supports retargeting or reconfiguration for scheduled jobs. If no change, omit or set null."},{"type":"null"}],"description":"(Optional) Updated serialized JSON array of target recipients or segments for the notification job. Supports retargeting or reconfiguration for scheduled jobs. If no change, omit or set null."},"config_json":{"oneOf":[{"type":"string","description":"(Optional) Updated configuration JSON for job delivery, template, or retry parameters. If updating job delivery channel, template, or other business options, specify as valid JSON string. If no change, omit or set null."},{"type":"null"}],"description":"(Optional) Updated configuration JSON for job delivery, template, or retry parameters. If updating job delivery channel, template, or other business options, specify as valid JSON string. If no change, omit or set null."},"result_json":{"oneOf":[{"type":"string","description":"(Optional) Updated job result JSON, such as per-recipient delivery status, failure logs, or message receipts. Used to reflect status/result after execution. Only set for jobs with a completed or failed status. If not updating the result, omit or set null."},{"type":"null"}],"description":"(Optional) Updated job result JSON, such as per-recipient delivery status, failure logs, or message receipts. Used to reflect status/result after execution. Only set for jobs with a completed or failed status. If not updating the result, omit or set null."},"schedule_config_json":{"oneOf":[{"type":"string","description":"(Optional) Updated JSON-encoded schedule configuration for the job (cron/timing info). Used to change or correct job scheduling parameters. If no schedule update is needed, omit or set null."},{"type":"null"}],"description":"(Optional) Updated JSON-encoded schedule configuration for the job (cron/timing info). Used to change or correct job scheduling parameters. If no schedule update is needed, omit or set null."}},"required":["job_status"],"description":"Notification job update schema for modifying the status, recipients, configuration, results, or schedule of an existing notification job. Used as the request body in update notification job APIs. Enforces use of job_status and allows for changing targeting, schedule, or result fields as per platform requirements. For advanced workflow modifications, consider side effects on user communications or job executions when updating. See business rules for job status transitions and allowed schedule modifications."},"IShoppingMallAnalyticsTrigger.IRequest":{"type":"object","properties":{"trigger_type":{"type":"string","description":"The type of the analytics trigger (e.g., dashboard_update, report_export, data_rebuild). Used for filtering analytics jobs by business function or job type."},"status":{"type":"string","description":"Job execution status (e.g., pending, running, success, failed, cancelled). Used to filter analytics triggers by their current or past state. Strictly matches the domain values in the shopping_mall_analytics_triggers table."},"admin_id":{"type":"string","format":"uuid","description":"UUID of the admin who created/scheduled the analytics trigger. Used for admin-specific filtering or searching."},"created_from":{"type":"string","format":"date-time","description":"Start of the creation timestamp range for filtering analytics trigger jobs (inclusive, ISO 8601 format)."},"created_to":{"type":"string","format":"date-time","description":"End of the creation timestamp range for filtering analytics trigger jobs (inclusive, ISO 8601 format)."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Defaults to 1 if not specified."},"pageSize":{"type":"integer","minimum":1,"description":"How many records per page. Defaults to 20 or system default if not specified."},"sort":{"type":"string","description":"Sort order field (e.g., created_at, status, trigger_type). System may support field-specific sorters."},"sortDir":{"oneOf":[{"const":"asc","description":"Sort direction. Must be either 'asc' or 'desc'."},{"const":"desc","description":"Sort direction. Must be either 'asc' or 'desc'."}],"description":"Sort direction. Must be either 'asc' or 'desc'."},"query":{"type":"string","description":"Free-text search query on trigger_type, description, or admin name for fuzzy search."}},"description":"A filter/search request for listing analytics triggers. Defines query parameters for advanced search, filtering, and pagination of analytics trigger jobs by type, status, admin, or date range. Supports operational dashboards and audit search in the admin UI. All parameters are optional; at least one should be specified to trigger filtered search.","required":[]},"IShoppingMallAnalyticsTrigger":{"type":"object","x-autobe-prisma-schema":"shopping_mall_analytics_triggers","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. UUID of the analytics trigger job."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Admin who scheduled/created the analytics trigger. References shopping_mall_admins.id."},"trigger_type":{"type":"string","description":"Type of analytics/report job (dashboard_update, report_export, data_rebuild, etc.)."},"schedule_config_json":{"type":"string","description":"Serialized JSON for trigger schedule and config. Contains cron, timer, frequency, and custom parameters; format is application-defined."},"status":{"type":"string","description":"Job status (pending, running, success, failed, cancelled). Drives operational state and UI filtering for scheduled jobs."},"outcome_log_json":{"type":"string","description":"JSON log of analytics results, error messages, or success details. Present when job has run at least once; may contain raw/proprietary data."},"created_at":{"type":"string","format":"date-time","description":"Job creation timestamp in ISO 8601 UTC format."},"updated_at":{"type":"string","format":"date-time","description":"Job record's latest update or status transition timestamp in ISO 8601 UTC format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion time for archival/cleanup, or null if still active. ISO 8601 UTC format or null."}},"required":["id","trigger_type","status","created_at","updated_at"],"description":"A full analytics trigger configuration, as stored in the shopping_mall_analytics_triggers table. Used to schedule, manage, and route analytics or reporting jobs on the e-commerce platform. Contains auditing, job typing, status, scheduling, outcome log, and soft-delete timestamp. Admin-only access for configuration and control; record is referenced in analytics dashboard tools, reporting UIs, and admin audit logs."},"IShoppingMallAnalyticsTrigger.ICreate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_analytics_triggers","properties":{"trigger_type":{"type":"string","description":"Type of analytics or aggregation trigger (dashboard_update, report_export, data_rebuild, etc.). Required for determining what process or analytic is scheduled or executed. Supported values depend on platform's analytic jobs."},"schedule_config_json":{"type":"string","description":"Serialized JSON for trigger schedule and config. This field stores scheduling data (such as cron settings, repeat interval, activation window) or additional configuration. Must be valid JSON encoding representing all necessary scheduling details for the analytics engine to process."},"status":{"type":"string","description":"Trigger/job status (pending, running, success, failed, cancelled). Indicates the current lifecycle stage of the analytics job for admin dashboard and monitoring purposes. Must match allowed status values as per analytics engine implementation."},"outcome_log_json":{"type":"string","description":"JSON log of analytics results or errors. Optionally used to capture completion status, error stacks, export summaries, record counts processed, etc. Can be empty/null for jobs that have not completed or are scheduled."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Admin who configured/scheduled the analytics trigger (UUID of shopping_mall_admins.id). Must be a valid admin user and will be used for audit/attribution purposes. Required for compliance logging."}},"required":["trigger_type","schedule_config_json","status","shopping_mall_admin_id"],"description":"Schema for creating a new analytics/reporting trigger in the shopping_mall_analytics_triggers table. Used by admin dashboard to schedule advanced analytics or reporting jobs, including dashboard refresh, report export, customer activity aggregation, etc. All required fields ensure the engine can determine the job type, start time, status, admin responsibility, and have the correct scheduling configuration. See entity definition for business/compliance notes. Only available to admin-level users."},"IShoppingMallAnalyticsTrigger.IUpdate":{"type":"object","x-autobe-prisma-schema":"shopping_mall_analytics_triggers","properties":{"trigger_type":{"type":"string","description":"(Optional) Updated trigger/job type (dashboard_update, report_export, etc.). Changing this value reclassifies the analytics function of this trigger and may alter which engine or report-runner is invoked by the scheduler."},"schedule_config_json":{"type":"string","description":"(Optional) New serialized JSON schedule/config block. Used to amend recurring schedule, execution windows, or job configuration for the analytic/export job. Must be valid JSON and match expected analytics engine structure."},"status":{"type":"string","description":"(Optional) Update to trigger/job status (e.g., pending, running, success, failed, cancelled). Can be set by admin to enable/disable the trigger or mark for re-execution as needed by analytics workflow."},"outcome_log_json":{"type":"string","description":"(Optional) New analytics result/errors log. Update/replace the JSON context holding the output, result summary, stack trace, or error diagnostics as generated by the job executor."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"(Optional) Set new admin owner (UUID) for compliance or audit updates. Useful for reassignment on workflow changes or admin turnover."}},"required":[],"description":"Schema for updating an analytics/reporting trigger in the shopping_mall_analytics_triggers table. All fields are independently optional, allowing for patch-style updates of schedule, type, status, admin, or outcome logs. Useful for admin dashboard update forms, rescheduling jobs, correcting analytics definition errors, or updating result logs post-run. Fields must match trigger execution and platform business/compliance requirements."},"IShoppingMallCategory.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_categories","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this category. References the `id` column in `shopping_mall_categories`. Uniquely identifies this category throughout the platform. Always a valid UUID string."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Parent category ID if this is a subcategory; null for root categories. Mirrors the `parent_id` field in the schema."},{"type":"null","description":"Null indicates this is a root category (no parent)."}],"description":"ID of the parent category if this is a subcategory. For root categories, this should be null. Used to build hierarchical navigation."},"name_ko":{"type":"string","description":"Category name in Korean (for localization). Must be unique within its parent for the Korean name. Direct mapping to `name_ko` in the DB."},"name_en":{"type":"string","description":"Category name in English (for localization and global UI). Unique within its parent for the English name. Sourced from `name_en` in the schema."},"display_order":{"type":"integer","description":"Ordering index for sibling categories (0-based). Used for frontend category navigation display. Linked to `display_order` in table."},"is_active":{"type":"boolean","description":"Whether this category is enabled (active) across the system. Inactive disables all subcategories and products. Mirrors `is_active`."}},"required":["id","name_ko","name_en","display_order","is_active"],"description":"Summary DTO for product categories, for lightweight listings, dropdowns, or navigation. Contains only essential category info and hierarchy pointers. Based on `shopping_mall_categories` table. Does not include full audit meta or multilingual descriptions."},"IShoppingMallPlatformSetting.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_platform_settings","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this platform setting record. UUID string as in `shopping_mall_platform_settings`. Unique per settings entry."},"site_title_ko":{"type":"string","description":"Current platform/site title in Korean. Maps to `site_title_ko` for UI/SEO/meta."},"site_title_en":{"type":"string","description":"Current platform/site title in English. Maps to `site_title_en` for global UI/SEO/meta."},"support_email":{"oneOf":[{"type":"string","description":"Customer support contact email address, if configured."},{"type":"null","description":"Null if not defined in system."}],"description":"Public-facing customer support email. May be null if not set."},"branding_logo_uri":{"oneOf":[{"type":"string","description":"URI (normally public) for branding logo image file."},{"type":"null","description":"Null if no logo configured."}],"description":"URL for the primary branding/logo image file. Can be null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this settings record was created. Derived from `created_at` in table."}},"required":["id","site_title_ko","site_title_en","created_at"],"description":"Summary DTO for platform settings. Optimized for lightweight settings listings or admin dashboard overview cards. References essential metadata only. Does not contain all details or legal/policy URIs."},"IShoppingMallCustomer.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for the customer in the platform database. This property matches the 'id' field in the shopping_mall_customers Prisma model."},"email":{"type":"string","format":"email","description":"Customer's email address for authentication and communications. Must be unique. Sourced from the 'email' column in shopping_mall_customers."},"full_name":{"type":"string","description":"The customer's displayable full name, used for orders and account management. Sourced from 'full_name' in shopping_mall_customers."},"status":{"type":"string","description":"Current account status (e.g., active, suspended, pending_verification). Sourced from 'status' in shopping_mall_customers."},"email_verified":{"type":"boolean","description":"Indicates if the customer has completed email verification. Mirrors 'email_verified' field."},"created_at":{"type":"string","format":"date-time","description":"Customer registration timestamp. Sourced from 'created_at' in shopping_mall_customers."}},"required":["id","email","full_name","status","email_verified","created_at"],"description":"Summary information for a customer used in list views, search results, or admin dashboards. Contains a subset of profile fields to optimize performance and privacy in bulk queries. Based on the shopping_mall_customers Prisma entity, all properties are strictly present and mapped for quick reference without exposing sensitive authentication or full address/profile data. Does not include phone, password_hash, or deleted_at for security. Used in IPage results and other summary/lookup APIs. All fields are guaranteed to exist if the customer row has not been soft-deleted.","x-autobe-prisma-schema":"shopping_mall_customers"},"IShoppingMallSeller.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the seller, generated as a UUID. Mirrors the 'id' column in the shopping_mall_sellers Prisma model."},"email":{"type":"string","format":"email","description":"Seller's unique email address used for authentication and communications, aligned with the 'email' column."},"business_name":{"type":"string","description":"The official business entity name of the seller, from the 'business_name' column. Used for catalog, order, and compliance display."},"approval_status":{"type":"string","description":"Current approval state of the seller account (pending, approved, rejected, suspended, etc.), from the 'approval_status' column."},"contact_name":{"type":"string","description":"Name of the individual contact for the seller account, as per the 'contact_name' field in shopping_mall_sellers."},"created_at":{"type":"string","format":"date-time","description":"Date/time when the seller account was created, matching the 'created_at' timestamp in shopping_mall_sellers."}},"required":["id","email","business_name","approval_status","contact_name","created_at"],"description":"A summary representation of a seller account for use in admin dashboards, search results, or list/table views. Designed for quick reference to key compliance, status, and business information. Excludes sensitive authentication fields, full KYC details, or audit history. Strictly mapped to shopping_mall_sellers entity for speed and security. Does not expose password_hash, phone, email_verified, or deleted_at. Typically used in paginated responses for seller management or catalog attribution.","x-autobe-prisma-schema":"shopping_mall_sellers"},"IShoppingMallAdmin.ISummary":{"type":"object","description":"Summary representation of a platform administrator for admin listing/search results.\n\nThis schema gives a pagination-optimized view of admin account information for admin dashboards, search, and monitoring. It omits sensitive authentication fields and focuses on attributes useful for quick lookup, auditing, or admin assignment tasks.\n\nAll fields and descriptions map to the shopping_mall_admins Prisma schema and reflect only existing columns. The schema is intended to be used with paginated result sets for dashboard search APIs, never for full admin detail or authentication workflows.","x-autobe-prisma-schema":"shopping_mall_admins","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier of the admin account in the shopping mall platform. Always a UUID as defined in Prisma for shopping_mall_admins.id."},"email":{"type":"string","description":"Admin's unique email address for login and communications, as in shopping_mall_admins.email."},"full_name":{"type":"string","description":"Admin's personal name or identifier for UI display and audit logs."},"status":{"type":"string","description":"Admin account status: reflects if the admin is active, disabled, suspended, or otherwise. Sourced from shopping_mall_admins.status field."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of most recent successful login for the admin account. Null if never logged in. Sourced from shopping_mall_admins.last_login_at."},"created_at":{"type":"string","format":"date-time","description":"Admin account creation timestamp in ISO 8601 format, as in shopping_mall_admins.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp for the admin profile, as in shopping_mall_admins.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp. Populated if the admin is logically deleted, null otherwise. Aligns with shopping_mall_admins.deleted_at."}},"required":["id","email","full_name","status","created_at","updated_at"]},"IShoppingMallProduct.ISummary":{"type":"object","description":"Summary representation of an e-commerce product record for paginated catalog queries and search APIs. This optimized structure contains the essential attributes for list or grid display, quick filtering, and high-volume browsing without the full detail or deep relationships of the shopping_mall_products table.\n\nMaps directly to the shopping_mall_products Prisma schema, exposing only non-sensitive, public-facing product fields. It omits full description, images array, SKU breakdown, and audit logs, focusing instead on the core entity overview for fast UI rendering and product management listing.\n\nTypically used by catalog REST APIs as paged summary, never as a replacement for the full detail object.","x-autobe-prisma-schema":"shopping_mall_products","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the product in the catalog, always in UUID format as per shopping_mall_products.id."},"name":{"type":"string","description":"Product display name. Maps to shopping_mall_products.name."},"is_active":{"type":"boolean","description":"Boolean indicating if the product is currently published and buyable. Directly maps to shopping_mall_products.is_active."},"main_image_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Primary display image URI for the product, used in UI grid/listing. Can be null if no main image is set, aligning with shopping_mall_products.main_image_url."},"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Category ID that this product is assigned to (leaf node). Used for filtering/grouping. From shopping_mall_products.shopping_mall_category_id."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Reference to the seller who owns this product. From shopping_mall_products.shopping_mall_seller_id."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 creation timestamp. Copied from shopping_mall_products.created_at."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 last update timestamp. Matches shopping_mall_products.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. Null if active, populated if product has been removed as per shopping_mall_products.deleted_at."}},"required":["id","name","is_active","shopping_mall_category_id","shopping_mall_seller_id","created_at","updated_at"]},"IShoppingMallInventoryLog":{"type":"object","x-autobe-prisma-schema":"shopping_mall_inventory_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the inventory log entry. This serves as the globally unique identifier for tracing the specific inventory adjustment in the shopping mall platform.\n\nAccording to the Prisma schema, this field is a UUID and required for all inventory log entries."},"shopping_mall_inventory_record_id":{"type":"string","format":"uuid","description":"Reference to the inventory record that this log pertains to. This links to the specific SKU's inventory which was adjusted."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Seller who performed this inventory change, if the adjustment was initiated by a seller. May be null if the adjustment was done by an admin or the system."},"shopping_mall_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin who performed the inventory change, if applicable. Null if not set."},"change_type":{"type":"string","description":"Type of inventory change (increase, decrease, block, unblock, correction, etc.). Business logic uses this as a key for inventory analytics, auditing, or rollback operations."},"quantity_changed":{"type":"integer","description":"The integer value representing the quantity adjustment for this log entry. Positive for increases and negative for decreases."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Plain-text reason for the inventory adjustment. Examples include 'manual correction', 'order fulfillment', or system-derived reasons. Optional field that can be null."},"reference_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a related order or event, such as an order id if this log entry was the result of a purchase or refund. Null if not applicable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this inventory change log entry was recorded. Used for audit trails and resolving chronology in inventory management. Value expected to be in ISO 8601 format."}},"required":["id","shopping_mall_inventory_record_id","change_type","quantity_changed","created_at"],"description":"Inventory adjustment log model for e-commerce platform, as per Prisma model 'shopping_mall_inventory_logs'.\n\nEach entry records a single inventory change for audit, rollback, compliance, and operational monitoring. Key fields capture action type, quantities changed, adjustment reason, and links to the actor (admin/seller) if applicable, as well as references to affected records.\n\nThis schema is designed to support transparent, secure, and efficient inventory tracking, and is cited throughout order, fulfillment, refund, and stock management processes.\n\n- Fully references all documented fields in the underlying schema.\n- Field comments are mapped to the appropriate OpenAPI descriptions, supporting business logic for traceability and compliance.\n- Required fields are present in all adjustment log entries."},"IShoppingMallCartItem.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_cart_items","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the cart item row. This uniquely identifies a single line item within a customer's shopping cart."},"shopping_mall_cart_id":{"type":"string","format":"uuid","description":"Foreign key reference to the owning cart for this item. Ensures logical grouping of items by the customer's unique shopping cart."},"shopping_mall_product_sku_id":{"type":"string","format":"uuid","description":"Foreign key reference to the SKU (variant of a product) that this cart item represents. The SKU binds inventory, option selection, and purchase eligibility."},"quantity":{"type":"integer","description":"Number of units for this SKU in the cart. Value must be >= 1 up to system-configured per-SKU limit as enforced in business logic."},"unit_price_snapshot":{"type":"number","format":"double","description":"Unit price of this SKU at the time the item was added to the cart. This is used for price consistency and historical context. Not adjusted after addition.\n\nBusiness logic ensures this value remains unchanged after item insert unless corrected by price revalidation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this cart item entry was created. Used for audit trail, cart expiration logic, and synchronization across devices."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp reflecting the last modification to this cart item (such as quantity change). This is used for cart management, user experience, and synchronization with UI."}},"required":["id","shopping_mall_cart_id","shopping_mall_product_sku_id","quantity","unit_price_snapshot","created_at","updated_at"],"description":"Summary DTO for a single customer cart item in the e-commerce platform, as per Prisma model 'shopping_mall_cart_items'.\n\nThis summary includes the minimal set of fields used for cart views, price calculations, and order placement preparation. It covers the unique identifier, the owning cart, associated SKU, current quantity, unit price at the time of cart addition, and two timestamps for audit and cart restore features.\n\nBusiness rules about SKU validity, pricing, and concurrency are supported by referencing only valid/allowed cart items. This DTO omits relations to full cart or product for summary views, focusing on performant API response and secure customer context."},"IShoppingMallWishlist.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the wishlist.\n\nReferences the primary key 'id' field in the Prisma table 'shopping_mall_wishlists'. Used for all relational and mutation operations regarding this wishlist."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Customer's unique identifier (UUID) who owns this wishlist.\n\nReferences 'shopping_mall_customers.id' and must always match the current authenticated customer. Used for strict ownership and access control in all wishlist operations."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the wishlist entry, formatted as ISO 8601 string.\n\nReferences the 'created_at' column in the Prisma schema and is immutable for audit and order history. Used for sorting/recent display in customer profile UIs."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last modification to this wishlist or its items (ISO 8601).\n\nDirectly references 'updated_at' in the Prisma schema. Used in customer profile detail, to determine recency of changes."}},"required":["id","shopping_mall_customer_id","created_at","updated_at"],"description":"Summary schema for a single wishlist, providing only metadata and high-level information strictly as present in the shopping_mall_wishlists database table.\n\nAll properties correspond exactly to fields in the Prisma model. No computed/derived or UI-statistical fields are present here; such properties must be delivered by dedicated UI projection APIs or other DTOs. This type supports paginated indexes and summary tables of wishlists for customers."},"IShoppingMallOrder.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the order as recorded in 'shopping_mall_orders'.\n\nThis is the primary key for order detail reference, actions, or audit. Provided as a UUID string for external API consumers."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Identifier for the customer (UUID) who placed this order.\n\nReferences the foreign key in 'shopping_mall_orders' and is used for access control and order history filtering."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional seller reference (UUID) if the order is a single-seller or seller-split order. Null for marketplace-level split orders.\n\nReferences 'shopping_mall_sellers' for order fulfillment and assignment."},"order_number":{"type":"string","description":"Globally unique and human-readable order number (external-facing).\n\nDrawn directly from 'order_number' in 'shopping_mall_orders'. Used for search, support, payment reconciliation, and customer communications."},"status":{"type":"string","description":"Order status code ('pending', 'paid', 'processing', 'shipped', 'delivered', 'cancelled', etc.).\n\nDrawn from the 'status' column in 'shopping_mall_orders'. Used for filtering by state, order list rendering, and workflow enforcement."},"order_total":{"type":"number","format":"double","description":"Total price for this order, including items, shipping, and discounts in platform currency.\n\nReferences 'order_total' in the schema; always frozen at order placement time; includes decimal values. Used in all business and analytics reporting."},"currency":{"type":"string","description":"3-letter ISO currency code for the order's financials, e.g., 'USD', 'KRW'.\n\nReferences 'currency' in 'shopping_mall_orders'. Used for proper currency display, conversion, and external payment integrations."},"placed_at":{"type":"string","format":"date-time","description":"Timestamp for when this order was officially created/committed by the customer (ISO 8601).\n\nDirectly maps to 'placed_at' column in 'shopping_mall_orders'. Used for order history ordering, analytics, and customer service review."},"paid_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (ISO 8601) indicating when payment was completed for this order. Null if not yet paid.\n\nReferences the 'paid_at' column in the schema. Used for fulfillment eligibility checks, payment analytics, and compliance reporting."},"fulfilled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (ISO 8601) when the order was fully fulfilled (shipped/delivered). Null if not yet fulfilled.\n\nReferences the 'fulfilled_at' column in 'shopping_mall_orders'. Used for business analytics, revenue recognition, and customer timeline display."}},"required":["id","shopping_mall_customer_id","order_number","status","order_total","currency","placed_at"],"description":"Paginated summary schema for an order, providing the essential metadata needed to show an order in a list, dashboard, or analytics context.\n\nThis structure is optimized for performance in bulk lists and does not include item-level information, shipment, or address details. All references align with the 'shopping_mall_orders' Prisma model as documented. Used extensively in order search, customer order history, seller fulfillment worklists, and analytics dashboards."},"IShoppingMallOrderItem.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_items","properties":{"id":{"type":"string","format":"uuid","description":"Order item unique identifier.\n\nReferences the shopping_mall_order_items.id column. Serves as the primary key for order item rows, uniquely linking to the particular line in the order for audit, retrieval, and any updates or deletions."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Parent order's unique identifier.\n\nReferences shopping_mall_order_items.shopping_mall_order_id and links this line item back to the order for relationship, reconciliation, and API queries. Required for joining summary to complete order or order history views."},"shopping_mall_product_sku_id":{"type":"string","format":"uuid","description":"Purchased SKU identifier at time of order.\n\nReferences shopping_mall_product_skus.id. The SKU scope ensures proper product variant assignment, price/option/cancellation linkage, and supports inventory, fulfillment tracking, and after-sales flows."},"item_name":{"type":"string","description":"Display name of the product or SKU at the moment this item was included in the order.\n\nSnapshots the marketing or user-facing name for audit, customer communications, and history even if the product, listing, or SKU name changes after purchase. Often present in order confirmation emails/receipts for buyer clarity."},"sku_code":{"type":"string","description":"Business code or string for SKU/business traceability.\n\nReferences the SKU code used in inventory, logistics, or business documents, and remains stable for analytics, shipment, and multi-system integration regardless of internal id changes."},"quantity":{"type":"integer","description":"Number of units of this product/SKU purchased.\n\nNon-negative. Refers to the total units for the line item—used for fulfillment, refund/cancellation calculations, and inventory decrement/audit. Enforced per-platform maximum for cart/purchase."},"unit_price":{"type":"number","format":"double","description":"Unit price (per item) at the time the order was placed, in the currency of the order.\n\nSnapshots the price for audit, refund, history, and future calculations regardless of catalog changes. Used in line with shopping_mall_order_items.unit_price for financial reconciliation and analytics."},"currency":{"type":"string","description":"Currency code (ISO 4217, e.g., KRW, USD).\n\nMatches the currency from the order header (shopping_mall_orders.currency) and ensures proper display and calculations for this line, including conversion if multi-currency checkout is supported."},"item_total":{"type":"number","format":"double","description":"Order-line total price for this item line after multiplying unit price and quantity (and adjusted for discounts, if applicable), at order placement.\n\nServes as the per-line sum for order total aggregation/audit, refund eligibility, and support. Calculated as: Quantity * Unit Price - any per-line discount."},"refund_status":{"type":"string","description":"Status of refund or cancellation for this item.\n\nE.g., 'none', 'pending', 'refunded', 'cancelled'. Reflects current post-order operations and is updated in case of customer requests, admin/seller processing, and audit flows."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of initial order item row creation.\n\nAudit/event field for seeing when this line was purchased/committed; useful for analytics and troubleshooting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last modification to this order item row.\n\nSupports auditing, reconciliation, and order history drill-down for fulfillment or after-sales workflows."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft deletion, if item line is logically removed or cancelled/deleted.\n\nNullable—if present, the order line is treated as deleted for business logic and not shown in normal active views."},{"type":"null"}],"description":"Timestamp for soft deletion, if item line is logically removed or cancelled/deleted.\n\nNullable—if present, the order line is treated as deleted for business logic and not shown in normal active views."}},"required":["id","shopping_mall_order_id","shopping_mall_product_sku_id","item_name","sku_code","quantity","unit_price","currency","item_total","refund_status","created_at","updated_at"],"description":"Summary DTO for a single item line in an order.\n\nThis schema is a streamlined representation of an order line item for use in paginated order lists, summary views, and support dashboards. It omits heavyweight relations (e.g., full product/SKU detail objects) to support efficient transport. All fields are directly mapped to columns in shopping_mall_order_items and relevant for audit, analytics, customer order history, and basic fulfillment logic.\n\nRefer to shopping_mall_order_items table in the Prisma schema for detailed constraints and audit requirements. Do not include heavy relations or join-computed fields in summary variant. If new column constraints are added in Prisma, update this schema accordingly."},"IShoppingMallOrderAddress.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_addresses","properties":{"id":{"type":"string","format":"uuid","description":"Order address record unique identifier.\n\nReferences shopping_mall_order_addresses.id, serves as the primary key for the address snapshot for a particular order or timeline event. Uniquely identifies the immutable address as used for fulfillment, refund, compliance, or support."},"address_type":{"type":"string","description":"Type of address (shipping or billing or both).\n\nCanonical type enumeration: 'shipping', 'billing', or business-dependent custom types. Snapshots the address purpose as of order placement. Directly corresponds to shopping_mall_order_addresses.address_type column."},"recipient_name":{"type":"string","description":"Name of the recipient at the address as specified during order creation.\n\nUsed for fulfillment, customer communication, and audit. Snapshots input at the time of order, even if the customer's 'address book' entry changes later."},"phone":{"type":"string","description":"Contact number associated with the address.\n\nUsed by shippers/couriers and for support; snapshot at time of order for legal and customer support purposes."},"zip_code":{"type":"string","description":"Zip/postal code at the address snapshot.\n\nCaptured for logistical audit, compliance, fraud screening, and consistent delivery/region mapping across time. Defines the postal region at time of transaction, even if customer updates address book later."},"address_main":{"type":"string","description":"Main address line for delivery (e.g., street, number).\n\nLegal audit and fulfillment address snapshot as of order creation, matching business context for historical accuracy."},"address_detail":{"oneOf":[{"type":"string","description":"Address secondary line, additional detail (e.g., apt/suite/floor), nullable for addresses without sub-detail.\n\nCaptured for audit/compliance; reflects the exact address submitted for the order or refund/return/cancellation event. Only present if provided at time of order."},{"type":"null"}],"description":"Address secondary line, additional detail (e.g., apt/suite/floor), nullable for addresses without sub-detail.\n\nCaptured for audit/compliance; reflects the exact address submitted for the order or refund/return/cancellation event. Only present if provided at time of order."},"country_code":{"type":"string","description":"Country code (ISO-3166-1 alpha-2, e.g., 'KR', 'US', 'JP') as captured in address at order time.\n\nUsed for internationalization, region-based rules, compliance, and reporting. Always refer to shopping_mall_order_addresses.country_code in the schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp this address snapshot was created (point-in-time as of order/fulfillment/cancellation/return event).\n\nEnables audit trails, forensic review, and compliance with order/document retention policies."}},"required":["id","address_type","recipient_name","phone","zip_code","address_main","country_code","created_at"],"description":"Summary DTO for an immutable, historical order address as used for fulfillment, refund, cancellation, or audit.\n\nThis type provides an efficient representation of the address snapshot at key customer service milestones for auditing, UI order summary/history, and regulatory compliance. All fields map directly to columns in shopping_mall_order_addresses at the time of the event. This summary intentionally omits relationship fields and heavyweight audit links for performance in summary-listing and paginated views.\n\nFor full audit/trace, see main IShoppingMallOrderAddress. This variant is optimized for role-based access (customer, seller, admin) to support order history, analytics, and order timeline UI rendering. If Prisma adds new columns or constraints, update this schema accordingly."},"IShoppingMallOrderPaymentMethod.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this payment method record."},"payment_method_type":{"type":"string","description":"Type of payment method (e.g. 'card', 'bank_transfer', 'paypal', 'virtual_account')."},"display_name":{"type":"string","description":"Display-friendly name for this payment method (e.g., 'Visa **** 1234', 'KakaoPay', 'Hana Bank')."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this payment method snapshot was created for the order."}},"required":["id","payment_method_type","display_name","created_at"],"description":"Summary data for a point-in-time payment method snapshot used in an order. This type enables efficient listing and selection of payment methods, exposing only display-safe fields and omitting internal method structure, secrets, or PII. Used for audit, UI display, and order payment detail reference."},"IShoppingMallReview.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this review record."},"rating":{"type":"integer","minimum":1,"maximum":5,"description":"Star rating, integer 1-5."},"status":{"type":"string","description":"Review moderation status: 'pending', 'approved', 'rejected', or 'hidden'. Decides visibility and eligibility for aggregation/reward."},"body":{"type":"string","description":"Review body text snippet (full or truncated as needed for summary)."},"created_at":{"type":"string","format":"date-time","description":"Review creation timestamp (for audit and timeline sorting)."}},"required":["id","rating","status","body","created_at"],"description":"Minimal review summary for list views, product display, or moderation, exposing rating, status, and body excerpt. Intended to enable efficient browse/search interfaces and summary panels. Full review details (e.g., moderation history, attached images, comments) are not included. Use for aggregate/info/preview contexts."},"IShoppingMallReviewFlag.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_review_flags","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for this review flag record. This ID serves as the primary key in the shopping_mall_review_flags table and is used for searching, moderation, and targeted administrative actions."},"shopping_mall_review_id":{"type":"string","format":"uuid","description":"The foreign key linking to the parent product review this flag references. Used to join with the target review in the shopping_mall_reviews table for moderation and reporting."},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional: The UUID of the customer who filed the flag. May be null if flagged by a seller or admin. Used for source attribution and role-based moderation workflows."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional: The UUID of the seller who filed this flag. May be null for customer-initiated reports or admin actions. Enables per-seller moderation metrics."},"shopping_mall_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional: The UUID of the admin who created or processed the flag. Null if not admin-initiated. Used for policy enforcement and escalated moderation."},"reason":{"type":"string","description":"Short reason code or description for why the review was flagged (e.g., 'abuse', 'spam', 'policy_violation'). Used for aggregation, analytics, and surfacing moderation queues. Must follow platform-enforced reason taxonomy."},"note":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional internal note for admin handling, escalation, or tracking resolution context. Provides extra information for the moderator and is hidden from public UI."},"status":{"oneOf":[{"const":"open","description":"Flag workflow state indicating open/active moderation, a resolved flag, or a rejected/cleared report. Governs visibility in admin dashboards and moderation queues."},{"const":"resolved","description":"Flag workflow state indicating open/active moderation, a resolved flag, or a rejected/cleared report. Governs visibility in admin dashboards and moderation queues."},{"const":"rejected","description":"Flag workflow state indicating open/active moderation, a resolved flag, or a rejected/cleared report. Governs visibility in admin dashboards and moderation queues."}],"description":"Flag workflow state indicating open/active moderation, a resolved flag, or a rejected/cleared report. Governs visibility in admin dashboards and moderation queues."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601, UTC) when flag was created, for audit and event ordering."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601, UTC) indicating when the flag was last updated, for audit and historical state tracking."}},"required":["id","shopping_mall_review_id","reason","status","created_at","updated_at"],"description":"Summary representation of a product review flag for moderation search, listing, and queue workflows.\n\nRepresents a single report of policy violation or abuse for a review, including flagger role, report reason, admin/seller/customer association, reason code, short admin note, workflow status, and audit timestamps.\n\nBuilt on the shopping_mall_review_flags table, this summary is used for pagination and dashboard display. Full detail is retrieved with the IShoppingMallReviewFlag type."},"IShoppingMallOrderHistory.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_order_histories","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this order history snapshot. This is the primary key, generated as a UUID, and is used for history retrieval, audit, and escalation context."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Foreign key linking to the parent order whose state is captured in this snapshot. Used for historical state tracking and case/event linking."},"snapshot_type":{"type":"string","description":"Describes the type of event that triggered this snapshot (e.g., 'cancellation', 'refund', 'escalation', 'appeal'). Used for UI summary and workflow branching."},"order_status":{"type":"string","description":"Order status as of the snapshot (e.g., 'pending', 'paid', 'shipped', etc.), copied directly from the order at the time of event. Used for time-based audit, trajectory, or compliance reporting."},"order_total":{"type":"number","description":"Total order amount (in platform currency) as of this history event. Used for case investigation, auditing, and order financial tracking."},"snapshot_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional explanation or business comment for this history entry (e.g., escalation context, admin note, user update). Used to surface reason context in support dashboards and compliance logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601/UTC) of when this snapshot was created. Used for order timeline, investigation, and machine learning analytics."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp. When non-null, this indicates the history is no longer active, but retained for audit and compliance. Null means the record is currently valid and has not been deleted."}},"required":["id","shopping_mall_order_id","snapshot_type","order_status","order_total","created_at"],"description":"Summary information about a specific order history snapshot for audit, timeline, and customer service reporting.\n\nThis object captures the key fields for a single-point-in-time order state during a milestone event (cancellation, refund, escalation, appeal).\n\nBuilt on the shopping_mall_order_histories table. Full detail is retrievable using the IShoppingMallOrderHistory type.\n\nIncludes: snapshot type, status at event, order total, creation timestamp, and optional business reason/comment. Deleted status is tracked via deleted_at."},"IShoppingMallEscalation.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_escalations","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the escalation case.\n\nSourced from `shopping_mall_escalations.id`."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order ID linked to this escalation case.\n\nReferences `shopping_mall_orders.id`."},"initiator_customer_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Customer ID if initiated by a customer, else null.\n\nReferences `shopping_mall_customers.id`."},"initiator_seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Seller ID if initiated by a seller, else null.\n\nReferences `shopping_mall_sellers.id`."},"assigned_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Admin assigned to this escalation, if already assigned.\n\nReferences `shopping_mall_admins.id`."},"escalation_type":{"type":"string","description":"Type of escalation case (e.g., 'payment dispute', 'order not received', etc).\n\nColumn `escalation_type`."},"escalation_status":{"type":"string","description":"Current status of escalation (e.g., pending, in-review, resolved, closed, escalated-to-admin).\n\nColumn `escalation_status`."},"resolution_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Outcome or case closure reason (e.g., 'refund-issued', 'denied', 'order-resent').\n\nNullable in schema."},"created_at":{"type":"string","format":"date-time","description":"Case creation timestamp.\n\nReferences `shopping_mall_escalations.created_at`."},"updated_at":{"type":"string","format":"date-time","description":"Most recent update timestamp for this escalation case record.\n\nSourced from `shopping_mall_escalations.updated_at`."}},"required":["id","shopping_mall_order_id","escalation_type","escalation_status","created_at","updated_at"],"description":"Summary view for an escalation (customer service case/dispute). Shows basic context, status, actor references, and core timestamps.\n\nRefer to `shopping_mall_escalations` documentation for database column details. Used in paginated search, dashboard tiles, or escalation list panels."},"IShoppingMallAdminActionLog.ISummary":{"type":"object","x-autobe-prisma-schema":"shopping_mall_admin_action_logs","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this admin action log entry.\n\nReferences `shopping_mall_admin_action_logs.id`."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Admin user who performed the action.\n\nReferences `shopping_mall_admins.id`."},"action_type":{"type":"string","description":"Type of admin action (e.g., approval, ban, restore, suspend, override, edit, etc).\n\nColumn `action_type`."},"action_reason":{"type":"string","description":"Reason for the admin action. Compliance/audit context.\n\nReferences `shopping_mall_admin_action_logs.action_reason`."},"domain":{"type":"string","description":"Affected business domain/entity (e.g., customer, seller, product, order, review, system, etc).\n\nReferences `shopping_mall_admin_action_logs.domain`."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this log entry was created (action performed).\n\nReferences `shopping_mall_admin_action_logs.created_at`."}},"required":["id","shopping_mall_admin_id","action_type","action_reason","domain","created_at"],"description":"Summary record for a platform admin action log.\n\nContains main metadata for high-level auditing, compliance, or dashboard listing. See `shopping_mall_admin_action_logs` for details."},"IShoppingMallAdminAuditLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the admin audit log record."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Reference to the admin user who performed the action."},"audit_event_type":{"type":"string","description":"Type of audit event (e.g., 'login', 'permission_grant', 'system_setting', etc.)."},"domain":{"type":"string","description":"Domain of the administrator action (e.g., 'platform', 'user_management', 'orders')."},"log_level":{"type":"string","description":"Severity or level of the audit event ('info', 'warning', 'critical', etc.)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin action event was recorded in the system."}},"required":["id","shopping_mall_admin_id","audit_event_type","domain","log_level","created_at"],"description":"Summary information about an administrative audit log event for platform governance and compliance. Used for overviews and paginated listing of audit logs. This type references the shopping_mall_admin_audit_logs table and only includes summary fields, not detailed JSON context or sensitive event data. Intended for admin dashboard log listings, audits, or operational reviews."},"IShoppingMallModerationEventLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this moderation event log record."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Reference to the admin who performed this moderation event."},"event_type":{"type":"string","description":"Type of moderation event (e.g., 'flag', 'removal', 'approval', 'annotation', 'warning', 'escalation')."},"moderation_message":{"type":"string","description":"Message or comment associated with the moderation action (truncated or summarized if needed)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation event was recorded."}},"required":["id","shopping_mall_admin_id","event_type","moderation_message","created_at"],"description":"Summary representation of a moderation event log, primarily for paginated or search-oriented views for admin dashboards. This type references the shopping_mall_moderation_event_logs table and omits deep entity references for compactness. It is suitable for monitoring platform actions on sellers, products, reviews, or orders, and for audit context in admin operational reviews."},"IShoppingMallAnalyticsTrigger.ISummary":{"$comment":"Properties not included here (like schedule_config_json, outcome_log_json) are intentionally omitted for performance and index-focused queries.","description":"A summary type for Shopping Mall analytics triggers used in paginated or index API responses. Represents key scheduling and diagnostic attributes for scheduled analytics/report jobs for admin dashboard display and filtering.\n\n- This DTO is used for admin dashboard server-side pagination and quick admin-level queries regarding analytics trigger jobs.\n- Fields presented as summary must align with the underlying shopping_mall_analytics_triggers Prisma model comments and admin-facing requirements.\n\nThe summary structure includes:\n- Unique identifier for the trigger\n- Trigger type (such as dashboard update, export, data rebuild, etc.)\n- Internal job status (pending, running, success, failed, cancelled)\n- Assigned admin's identifier (if the trigger was scheduled by a specific admin)\n- Job creation timestamp for audit/reporting purposes\n- Updated timestamp for last modification (edit, schedule, outcome log)\n\nDetailed logs, full configuration JSON, and job outcome content are omitted in summary. For complete detail views or editing, reference the full IShoppingMallAnalyticsTrigger entity.","x-autobe-prisma-schema":"shopping_mall_analytics_triggers"},"IShoppingMallCustomerAddress.ICreate":{"type":"object","description":"Payload for creating a customer's address when registering or adding an address for shipping, billing, or delivery purposes. Each property aligns with the shopping_mall_customer_addresses Prisma model and ERD. Designed to support user onboarding or address management flows. This schema is also used as the 'address' object within customer registration/join payloads.\n\nFields:\n- recipient_name: Required name of the individual receiving shipment.\n- phone: Required contact number for delivery at this address.\n- region: Required geographical region (city/province/district).\n- postal_code: Required postal or ZIP code.\n- address_line1: Required first address line (street, number).\n- address_line2: Optional second address line (apartment, unit, etc.).\n- is_default: Indicates whether this address should be set as the default address for the customer at creation (at least one address must be default on registration).\n\nCorresponds exactly to the shopping_mall_customer_addresses model. All values are subject to business validation (length, format, field requirements).","x-autobe-prisma-schema":"shopping_mall_customer_addresses","properties":{"recipient_name":{"type":"string","description":"Name of the individual for this address. Required for shipping and identification by carriers. Example: 'Jane Kim'."},"phone":{"type":"string","description":"Contact phone number for this address. Used for delivery and notifications. Must be a valid number format per business validation. Example: '+82-10-1234-5678'."},"region":{"type":"string","description":"Administrative region (such as city or province) for this address. Example: 'Seoul', 'Gyeonggi-do', 'Jongno-gu'."},"postal_code":{"type":"string","description":"Postal or ZIP code (required). Used for address lookup, sorting, and shipping calculation. Example: '03187'."},"address_line1":{"type":"string","description":"First line of the address, including street and number. Example: '123 Main St'."},"address_line2":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional second address line (apartment, unit, etc.). Example: 'Apt 101', or null if not provided."},"is_default":{"type":"boolean","description":"True if this address should be the default for the customer at creation time. At least one address must be default on registration; only one permitted per customer."}},"required":["recipient_name","phone","region","postal_code","address_line1","is_default"]}}}}