import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../../../structures/IShoppingMallCustomer";

/**
 * Trigger customer email verification (shopping_mall_customers,
 * shopping_mall_email_verifications).
 *
 * This endpoint sends a verification email to a customer who has registered but
 * not yet verified their email address. The underlying logic checks the
 * existence of a customer record in shopping_mall_customers (email_verified =
 * false) and, if true, creates a new shopping_mall_email_verifications record
 * (user_id, token, expires_at, email). No information about whether a customer
 * exists or is verified is revealed by this API response.
 *
 * The delivery of the actual verification email is handled externally by
 * platform infrastructure (e.g., email service provider). Throttling of
 * repeated requests is required but implemented outside of the business API
 * logic.
 *
 * Schema reference: shopping_mall_customers.email_verified (boolean),
 * shopping_mall_email_verifications.user_id/token/expires_at/email
 * (string/date).
 *
 * Related operation: verifyEmail, which confirms the validity of the token.
 *
 * @param props.connection
 * @param props.body Payload with email to start verification process.
 * @path /auth/customer/email/request-verification
 * @accessor api.functional.auth.customer.email.request_verification.requestEmailVerification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestEmailVerification(
  connection: IConnection,
  props: requestEmailVerification.Props,
): Promise<requestEmailVerification.Response> {
  return true === connection.simulate
    ? requestEmailVerification.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestEmailVerification.METADATA,
          path: requestEmailVerification.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestEmailVerification {
  export type Props = {
    /** Payload with email to start verification process. */
    body: IShoppingMallCustomer.IRequestEmailVerification;
  };
  export type Body = IShoppingMallCustomer.IRequestEmailVerification;
  export type Response = IShoppingMallCustomer.IEmailVerificationRequestResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/email/request-verification",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/email/request-verification";
  export const random =
    (): IShoppingMallCustomer.IEmailVerificationRequestResult =>
      typia.random<IShoppingMallCustomer.IEmailVerificationRequestResult>();
  export const simulate = (
    connection: IConnection,
    props: requestEmailVerification.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestEmailVerification.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
