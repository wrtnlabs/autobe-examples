import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../structures/IShoppingMallCustomer";
export * as password from "./password/index";
export * as email from "./email/index";

/**
 * Register new customer account (shopping_mall_customers) with JWT issuance.
 *
 * This endpoint supports new customer registration for the shoppingMall
 * platform. It creates a record in the shopping_mall_customers table, requiring
 * unique email, password (hashed), full name, and phone. The implementation
 * uses Prisma's model for shopping_mall_customers, referencing fields such as
 * email (unique, string), password_hash (string), full_name (string), phone
 * (string), status (string), email_verified (boolean), created_at (datetime),
 * and updated_at (datetime).
 *
 * Customers are not considered verified until completing the external email
 * verification workflow. Registration attempts are rejected if the email
 * already exists, and status is initially set to a pending state until
 * verification. Soft-deletion semantics use the deleted_at field, preventing
 * re-registration after account removal unless handled with explicit logic
 * (verifying deleted_at is null).
 *
 * The endpoint is public; no authentication is required for registration. Upon
 * success, the system issues a JWT and customer profile DTO using
 * IShoppingMallCustomer.IAuthorized, and triggers subsequent flows for
 * login/verification.
 *
 * Security is enforced at both API and DB schema levels. Throttling, spam
 * protection, and infrastructure-level input filtering are outside direct scope
 * but required in production. Related operations: login and refresh for full
 * authentication lifecycle. Account verification is triggered as a necessary
 * step before granting full access to platform features.
 *
 * Related operation references: /auth/customer/login, /auth/customer/refresh.
 *
 * @param props.connection
 * @param props.body New customer registration payload.
 * @setHeader token.access Authorization
 *
 * @path /auth/customer/join
 * @accessor api.functional.auth.customer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** New customer registration payload. */
    body: IShoppingMallCustomer.IJoin;
  };
  export type Body = IShoppingMallCustomer.IJoin;
  export type Response = IShoppingMallCustomer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/join";
  export const random = (): IShoppingMallCustomer.IAuthorized =>
    typia.random<IShoppingMallCustomer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate customer (shopping_mall_customers) and issue tokens.
 *
 * This endpoint supports customer authentication by validating login
 * credentials. It uses the shopping_mall_customers table, where the client
 * provides email and password. The API checks email (unique, string), compares
 * the password to the stored password_hash (bcrypt), ensures the account status
 * is active, and verifies the email_verified flag.
 *
 * If authentication succeeds, an access and refresh token are issued and
 * returned as IShoppingMallCustomer.IAuthorized. Failed attempts are metered
 * and logged to mitigate brute-force risk (handled at the infra/auth middleware
 * level).
 *
 * The operation does not return detailed error cause on authentication failure,
 * complying with security best practices. The process is always paired with
 * registration and token refresh endpoints. Blocking removed (deleted) or
 * suspended accounts is enforced by checking the deleted_at and status fields
 * in the schema. The endpoint is public (no authentication required).
 *
 * Related references: /auth/customer/join (registration),
 * /auth/customer/refresh (refresh token), shopping_mall_customers Prisma
 * definition.
 *
 * @param props.connection
 * @param props.body Customer login credentials (email, password).
 * @setHeader token.access Authorization
 *
 * @path /auth/customer/login
 * @accessor api.functional.auth.customer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Customer login credentials (email, password). */
    body: IShoppingMallCustomer.ILogin;
  };
  export type Body = IShoppingMallCustomer.ILogin;
  export type Response = IShoppingMallCustomer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/login";
  export const random = (): IShoppingMallCustomer.IAuthorized =>
    typia.random<IShoppingMallCustomer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh customer JWT tokens (shopping_mall_user_sessions).
 *
 * This endpoint supports refreshing JWT tokens for customer sessions by
 * accepting a valid refresh token. It validates session state using
 * shopping_mall_user_sessions, checking refresh_token (unique, string), and
 * ensures the session is not expired or revoked via expires_at and revoked_at
 * fields.
 *
 * On success, a new access token is issued along with updated tokens, following
 * the authorized DTO IShoppingMallCustomer.IAuthorized. Invalid or expired
 * refresh tokens are rejected with generic error responses to prevent
 * information disclosure.
 *
 * The endpoint is unauthenticated but requires a valid refresh token for
 * operation. It is always paired with login and join for standard
 * authentication lifecycle management. Session integrity rules and maximum
 * concurrent session policies may be enforced at the DB or handler layer
 * (tracked via unique tokens and session records).
 *
 * All logic is based strictly on existing fields in
 * shopping_mall_user_sessions. Related references: Prisma schema, customer
 * session management flows across platform.
 *
 * @param props.connection
 * @param props.body Refresh token for acquiring new session tokens.
 * @setHeader token.access Authorization
 *
 * @path /auth/customer/refresh
 * @accessor api.functional.auth.customer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token for acquiring new session tokens. */
    body: IShoppingMallCustomer.IRefresh;
  };
  export type Body = IShoppingMallCustomer.IRefresh;
  export type Response = IShoppingMallCustomer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/refresh";
  export const random = (): IShoppingMallCustomer.IAuthorized =>
    typia.random<IShoppingMallCustomer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
