import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../../../structures/IShoppingMallCustomer";

/**
 * Reset lost customer password with valid token (shopping_mall_password_resets,
 * shopping_mall_customers).
 *
 * This operation completes the password reset flow for customers who have a
 * valid reset token. The endpoint expects the new password and a reset token as
 * input, checking the token's validity, expiration (expires_at), and usage
 * status (used_at) in shopping_mall_password_resets. If valid, it updates the
 * password_hash in shopping_mall_customers (for the referenced user) and marks
 * the token as used, revoking all customer sessions.
 *
 * No sensitive information is returned about credentials; the presence or
 * absence of token/customer is not revealed in the response. Prisma schema
 * checks are enforced transactionally. The operation is public but secured by
 * cryptographically strong tokens. Output is a generic result schema confirming
 * the action. Password policy is enforced via input validation, in line with
 * platform requirements analysis.
 *
 * References: shopping_mall_password_resets (token, user_id, expires_at,
 * used_at), shopping_mall_customers (password_hash). Related endpoints:
 * requestPasswordReset for token issuance, login for subsequent access.
 *
 * @param props.connection
 * @param props.body Payload with reset token and new password.
 * @path /auth/customer/password/reset
 * @accessor api.functional.auth.customer.password.reset.resetPassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPassword(
  connection: IConnection,
  props: resetPassword.Props,
): Promise<resetPassword.Response> {
  return true === connection.simulate
    ? resetPassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPassword.METADATA,
          path: resetPassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resetPassword {
  export type Props = {
    /** Payload with reset token and new password. */
    body: IShoppingMallCustomer.IResetPassword;
  };
  export type Body = IShoppingMallCustomer.IResetPassword;
  export type Response = IShoppingMallCustomer.IPasswordResetResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/password/reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/password/reset";
  export const random = (): IShoppingMallCustomer.IPasswordResetResult =>
    typia.random<IShoppingMallCustomer.IPasswordResetResult>();
  export const simulate = (
    connection: IConnection,
    props: resetPassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
