import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCustomer } from "../../../../../structures/IShoppingMallCustomer";

/**
 * Initiate password reset process for customer (shopping_mall_customers,
 * shopping_mall_password_resets).
 *
 * This endpoint initiates the password reset flow for customers who have
 * forgotten their password. The API accepts an email address, checks if it
 * matches a customer in shopping_mall_customers (unique, string), and if so,
 * creates a password reset record in shopping_mall_password_resets table,
 * including user_id, a random token, expires_at. For security and privacy, the
 * endpoint never reveals whether the email is registered. This aligns with both
 * requirements analysis and the Prisma schema.
 *
 * The workflow is completed via a separate endpoint that verifies a valid token
 * and allows password update. This operation is unauthenticated and idempotent
 * for input emails. Actual token delivery (email) is handled by out-of-band
 * infrastructure. Throttling and abuse risk are mitigated externally.
 *
 * The underlying Prisma schemas are strictly verified. Related fields: email
 * (shopping_mall_customers), user_id/token/expires_at
 * (shopping_mall_password_resets). Related endpoints: resetPassword (set/reset
 * new password with valid token).
 *
 * Full compliance with best practices for account recovery, no information
 * leakage, and prevention of user enumeration is observed.
 *
 * @param props.connection
 * @param props.body Payload for initiating password reset (email address).
 * @path /auth/customer/password/request-reset
 * @accessor api.functional.auth.customer.password.request_reset.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Payload for initiating password reset (email address). */
    body: IShoppingMallCustomer.IRequestPasswordReset;
  };
  export type Body = IShoppingMallCustomer.IRequestPasswordReset;
  export type Response = IShoppingMallCustomer.IPasswordResetRequestResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/customer/password/request-reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/customer/password/request-reset";
  export const random = (): IShoppingMallCustomer.IPasswordResetRequestResult =>
    typia.random<IShoppingMallCustomer.IPasswordResetRequestResult>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
