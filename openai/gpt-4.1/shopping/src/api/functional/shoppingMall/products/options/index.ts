import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductOption } from "../../../../structures/IShoppingMallProductOption";
import { IPageIShoppingMallProductOption } from "../../../../structures/IPageIShoppingMallProductOption";
export * as values from "./values/index";

/**
 * List and filter all option definitions for a specific product
 * (shopping_mall_product_options).
 *
 * Retrieve a filtered, paginated list of product option definitions for a
 * target product. This is typically used to present all selectable attributes
 * (such as color, size, etc.) associated with a product, both for public
 * viewing (customer) and for management by sellers/admins.
 *
 * This operation supports advanced filtering, sorting, and paging. Filters may
 * include exact or fuzzy search on the option name, numerical sort by
 * display_order, and status checks (e.g., active/inactive) if such columns
 * exist. Security-wise, it is recommended that sellers can only query their own
 * products, and typical customers only see published/active options.
 *
 * This API references the shopping_mall_product_options table in the Prisma
 * schema. All parameters are validated according to schema constraints, and
 * results are paginated for scalability in catalogs with many options. Related
 * endpoints may include product detail fetch, product variant(SKU) search, and
 * option management.{If any business logic restricts visibility of options per
 * role, this should be enforced in implementation.}
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the target product whose
 *   option list is being requested.
 * @param props.body Search/filtering and pagination parameters for the
 *   product's option listing.
 * @path /shoppingMall/products/:productId/options
 * @accessor api.functional.shoppingMall.products.options.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target product whose option list is
     * being requested.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * Search/filtering and pagination parameters for the product's option
     * listing.
     */
    body: IShoppingMallProductOption.IRequest;
  };
  export type Body = IShoppingMallProductOption.IRequest;
  export type Response = IPageIShoppingMallProductOption;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/products/:productId/options",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/options`;
  export const random = (): IPageIShoppingMallProductOption =>
    typia.random<IPageIShoppingMallProductOption>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch detailed information for a single product option
 * (shopping_mall_product_options).
 *
 * Retrieve the complete detail for a single product option using its unique id
 * as well as the parent product id context. This is often needed when editing,
 * inspecting, or displaying a specific option value such as a color, size, or
 * style in a product detail/management context.
 *
 * Security logic must confirm that sellers or admins accessing the detail have
 * authority on the product. For customers, public/active status may be enforced
 * so that only visible options are accessible. The underlying component is
 * shopping_mall_product_options in the Prisma Catalog schema, and all data is
 * returned as per the type IShoppingMallProductOption.
 *
 * Related operations may include option editing, product variant combination
 * management, and variant/option searching within a product.
 *
 * @param props.connection
 * @param props.productId UUID of the product this option belongs to.
 * @param props.optionId UUID of the specific product option being queried.
 * @path /shoppingMall/products/:productId/options/:optionId
 * @accessor api.functional.shoppingMall.products.options.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the product this option belongs to. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the specific product option being queried. */
    optionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductOption;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/options/:optionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/options/${encodeURIComponent(props.optionId ?? "null")}`;
  export const random = (): IShoppingMallProductOption =>
    typia.random<IShoppingMallProductOption>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("optionId")(() => typia.assert(props.optionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
