import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCatalogImage } from "../../../../structures/IShoppingMallCatalogImage";
import { IPageIShoppingMallCatalogImage } from "../../../../structures/IPageIShoppingMallCatalogImage";

/**
 * Retrieve a paginated list of images for a specific product from
 * shopping_mall_catalog_images by productId.
 *
 * Retrieve a filtered and paginated list of images associated with a given
 * product. This allows clients to display product galleries or additional
 * product photos, as managed by sellers and admins. Image metadata includes
 * URLs, alt text, and display order, which are critical for both end-user
 * viewing and accessibility.
 *
 * Security and permission logic restrict access to images of unpublished or
 * deactivated products as necessary. Only public or buyer-accessible products
 * will have their images visible to customers, while sellers and admins may
 * access full image sets for their own products or for administrative
 * purposes.
 *
 * This operation is closely tied with the shopping_mall_products and
 * shopping_mall_catalog_images Prisma schema tables, where each image maintains
 * a reference to either a product or SKU. All business logic for product
 * visibility, data filtering, and image ordering is enforced at the application
 * layer, and errors related to access or invalid productId are handled with
 * clear user feedback.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product whose images will be
 *   queried.
 * @param props.body Parameters for image list filtering, pagination, and
 *   sorting for the specified product.
 * @path /shoppingMall/products/:productId/images
 * @accessor api.functional.shoppingMall.products.images.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the product whose images will be queried. */
    productId: string & tags.Format<"uuid">;

    /**
     * Parameters for image list filtering, pagination, and sorting for the
     * specified product.
     */
    body: IShoppingMallCatalogImage.IRequest;
  };
  export type Body = IShoppingMallCatalogImage.IRequest;
  export type Response = IPageIShoppingMallCatalogImage;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/products/:productId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/images`;
  export const random = (): IPageIShoppingMallCatalogImage =>
    typia.random<IPageIShoppingMallCatalogImage>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific image of a product from
 * shopping_mall_catalog_images by productId and imageId.
 *
 * Fetches a single image's details (such as URL, alt text for accessibility,
 * display order, and creation timestamp) for a target product by referencing
 * both the product ID and the image ID. Validates that the image exists and
 * belongs to the specified product to prevent leaks or misattribution across
 * products.
 *
 * Access permissions are enforced based on the published status of the product
 * and the requester's entitlementâ€”customers can only view images for
 * public/active products, while admins/sellers may access full sets of product
 * images for their own items. This operation references the
 * shopping_mall_catalog_images table directly through the relationship to
 * shopping_mall_products as defined in the Prisma schema, providing all
 * available metadata for the queried image.
 *
 * Error handling captures scenarios such as non-existent imageId, mismatched
 * productId-image association, or insufficient permissions, returning clear,
 * actionable messages for each case.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product whose image you want
 *   to retrieve.
 * @param props.imageId Unique identifier of the image to be retrieved (must
 *   belong to the specified product).
 * @path /shoppingMall/products/:productId/images/:imageId
 * @accessor api.functional.shoppingMall.products.images.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product whose image you want to retrieve. */
    productId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the image to be retrieved (must belong to the
     * specified product).
     */
    imageId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCatalogImage;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/images/:imageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): IShoppingMallCatalogImage =>
    typia.random<IShoppingMallCatalogImage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("imageId")(() => typia.assert(props.imageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
