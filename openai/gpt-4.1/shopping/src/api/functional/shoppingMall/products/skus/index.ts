import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductSku } from "../../../../structures/IShoppingMallProductSku";
export * as images from "./images/index";

/**
 * Retrieve detailed info for a specific product SKU
 * (shopping_mall_product_skus) by product and SKU ID.
 *
 * Retrieve the complete detail for a single SKU (Stock Keeping Unit) belonging
 * to a specific product, as identified by productId and skuId. This query
 * provides all metadata present in the shopping_mall_product_skus Prisma schema
 * including SKU code, display name, sell price, status, low-stock threshold,
 * direct option breakdown (across all variant axes), and inventory states where
 * available.
 *
 * The operation ensures that only SKUs belonging to the specified product
 * (productId) are returned, supports validation of active status (or
 * appropriate fallback by admin logic), and respects soft-delete status per
 * schema. It returns null or 404 if the SKU is not found, not active, or does
 * not belong to the given productId.
 *
 * Security-wise, only public/fully listed SKUs are shown to customers; sellers
 * may see their own SKUs (including 'inactive'). Admins have full visibility.
 * Parent product validation (category, is_active) is required for business
 * compliance, and the returned structure supports all option and price fields
 * for proper variant rendering and eligibility checks for cart/order flows.
 *
 * Edge cases such as SKU-option misalignment, soft-deleted or orphaned SKUs
 * must be handled consistent with the schema and catalog enforcement. Related
 * endpoints include search/index, variant enumeration, and parent product
 * detail API.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the parent product containing
 *   the SKU.
 * @param props.skuId Unique identifier for the SKU to retrieve.
 * @path /shoppingMall/products/:productId/skus/:skuId
 * @accessor api.functional.shoppingMall.products.skus.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the parent product containing the SKU. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier for the SKU to retrieve. */
    skuId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductSku;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/skus/:skuId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): IShoppingMallProductSku =>
    typia.random<IShoppingMallProductSku>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
