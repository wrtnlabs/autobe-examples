import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProduct } from "../../../structures/IShoppingMallProduct";
import { IPageIShoppingMallProduct } from "../../../structures/IPageIShoppingMallProduct";
export * as skus from "./skus/index";
export * as options from "./options/index";
export * as images from "./images/index";
export * as reviews from "./reviews/index";

/**
 * Retrieve a filtered and paginated list of products for catalog search and
 * browsing.
 *
 * Retrieve a filtered and paginated list of products from the shopping mall
 * catalog. This operation enables users to discover products by applying
 * advanced search criteria including free-text query, category, seller, price
 * range, and variant options such as color or size. Filtering logic leverages
 * the denormalized and indexed shopping_mall_products table, which is designed
 * for rapid search and listing of active products and their associations.
 *
 * Security consideration: Listing/search APIs are public, but may include
 * customer-specific pricing or personalization if the requester is
 * authenticated. This API does not expose unpublished or disabled productsâ€”only
 * items with is_active true and category in active state appear. Rate limiting
 * and abuse protection are recommended to prevent scraping, and automatic cache
 * invalidation is triggered on catalog changes.
 *
 * Supported business logic: The response contains only published and in-stock
 * products, honoring inventory availability and business rules as outlined in
 * the requirements. Pagination, sorting, and total count metadata allow
 * efficient UI/UX implementation. Error handling includes validation for
 * invalid filters, non-existent categories, and oversized result sets (top
 * 1,000 cap enforced for queries with extreme volume).
 *
 * Related operations: Use GET /products/{productId} for full product detail,
 * PATCH /products for search/filter/pagination. The underlying Prisma
 * shopping_mall_products model is joined internally to catalog category and SKU
 * tables for advanced search. This API conforms to user-facing read-only
 * catalog patterns, not used for product creation or inventory update.
 *
 * @param props.connection
 * @param props.body Advanced product search/filter criteria and pagination
 *   options.
 * @path /shoppingMall/products
 * @accessor api.functional.shoppingMall.products.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Advanced product search/filter criteria and pagination options. */
    body: IShoppingMallProduct.IRequest;
  };
  export type Body = IShoppingMallProduct.IRequest;
  export type Response = IPageIShoppingMallProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/products";
  export const random = (): IPageIShoppingMallProduct.ISummary =>
    typia.random<IPageIShoppingMallProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full product detail by productId for catalog or detail view.
 *
 * Fetch a single product and all associated details by productId. This
 * read-only operation joins shopping_mall_products with SKUs, images, options,
 * category, and seller information, returning a full product record suitable
 * for detail view or deep linking from search, wishlist, or order history.
 * ProductId is a required path parameter and must be a valid UUID referencing
 * an existing, published product.
 *
 * The response incorporates both denormalized product fields (name,
 * description, images, prices, active state) and related entities (variant
 * options, in-stock status, seller profile, category tree, and reviews
 * aggregation if applicable). If the product does not exist or is
 * inactive/soft-deleted, the API returns a not-found or forbidden error
 * according to business rules. Only published, non-deleted products can be
 * accessed using this operation.
 *
 * Security: Public access to this endpoint is allowed; however,
 * unpublished/deleted or non-active products are not queryable by regular
 * users. Business rules ensure catalog integrity and prevent exposure of
 * restricted items. This relates directly to the shopping_mall_products entity
 * and pulls all necessary associations for product presentation on detail
 * screens.
 *
 * @param props.connection
 * @param props.productId The unique identifier (UUID) of the product to
 *   retrieve.
 * @path /shoppingMall/products/:productId
 * @accessor api.functional.shoppingMall.products.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the product to retrieve. */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProduct;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IShoppingMallProduct =>
    typia.random<IShoppingMallProduct>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
