import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductOptionValue } from "../../../../../structures/IShoppingMallProductOptionValue";

/**
 * Retrieve a specific product option value by productId, optionId, and valueId
 * (shopping_mall_product_option_values).
 *
 * Fetch a specific option value (e.g., 'Red', 'XL') for a given option (like
 * color or size) of a product. This operation ensures that only valid option
 * values linked to the assembled product and product option are available for
 * retrieval. Typical use cases include rendering a product's available variant
 * attributes on product detail pages or for admin/seller catalog editing UI.
 *
 * Security is enforced so that only those with permission to read the product
 * or variant catalog (customers, sellers for their own products, and admins)
 * can access the value details. The relational linkages to product, option, and
 * value are resolved, but sensitive internal data outside option presentation
 * attributes are excluded from the response.
 *
 * If the value or its parent option/product is missing or inactive, an
 * appropriate error is returned. The operation references the option value's
 * fields as described in the Prisma model: id, shopping_mall_product_option_id,
 * value, display_order, created_at, updated_at. This operation complements
 * other product, option, and value lookups, but only performs read queries.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the target product
 * @param props.optionId Unique identifier for the product option (e.g., color,
 *   size)
 * @param props.valueId Unique identifier of the option value to be retrieved
 * @path /shoppingMall/products/:productId/options/:optionId/values/:valueId
 * @accessor api.functional.shoppingMall.products.options.values.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier for the product option (e.g., color, size) */
    optionId: string & tags.Format<"uuid">;

    /** Unique identifier of the option value to be retrieved */
    valueId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductOptionValue;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/options/:optionId/values/:valueId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/options/${encodeURIComponent(props.optionId ?? "null")}/values/${encodeURIComponent(props.valueId ?? "null")}`;
  export const random = (): IShoppingMallProductOptionValue =>
    typia.random<IShoppingMallProductOptionValue>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("optionId")(() => typia.assert(props.optionId));
      assert.param("valueId")(() => typia.assert(props.valueId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
