import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCatalogImage } from "../../../../../structures/IShoppingMallCatalogImage";

/**
 * Retrieve a specific SKU image for a product (shopping_mall_catalog_images).
 *
 * This API endpoint retrieves an individual image for a specific SKU of a
 * product. It references the shopping_mall_catalog_images table, which manages
 * all image files associated with products and SKUs in the shopping mall.
 *
 * The operation requires three path parameters: productId, skuId, and imageId
 * to guarantee the correct association and enforce permissions. It returns the
 * full metadata for the image, including the image URI, display order, and
 * alternate text when defined. The endpoint supports business logic to filter
 * out images that have been deleted (soft-delete pattern using deleted_at in
 * the schema), and to ensure users cannot access images unrelated to the
 * specified product or SKU.
 *
 * This operation supports both customer- and seller-facing use cases, enabling
 * users to view variant-specific images on product detail pages or within
 * seller dashboards. For admin users, the operation may also integrate with
 * catalog moderation flows. Error handling includes 404 for invalid or
 * unauthorized access, and the response is limited to non-deleted entries.
 *
 * This endpoint is related to broader catalog browsing and merchant content
 * management functions, and aligns with the platform's multilingual,
 * variant-rich product model as defined in the Prisma schema.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product
 * @param props.skuId Unique identifier of the target SKU (variant)
 * @param props.imageId Unique identifier of the image file
 * @path /shoppingMall/products/:productId/skus/:skuId/images/:imageId
 * @accessor api.functional.shoppingMall.products.skus.images.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the target SKU (variant) */
    skuId: string & tags.Format<"uuid">;

    /** Unique identifier of the image file */
    imageId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCatalogImage;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/skus/:skuId/images/:imageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): IShoppingMallCatalogImage =>
    typia.random<IShoppingMallCatalogImage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.param("imageId")(() => typia.assert(props.imageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
