import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReviewReply } from "../../../../../structures/IShoppingMallReviewReply";

/**
 * Retrieve details of a single review reply under a specific product review
 * from shopping_mall_review_replies table.
 *
 * This endpoint allows users to read a specific reply posted by a seller or
 * administrator to a particular product review. Reply lookups are strictly
 * keyed by productId, reviewId, and replyId. The operation validates all three
 * IDs and ensures referential integrity among product, review, and reply,
 * returning 404 if any link in the chain is missing. Replies that are not
 * public may only be visible to the original author, associated admin, or
 * seller.
 *
 * Security checks consider the status field on review replies to enforce access
 * control, only allowing 'public' replies for general viewing. If a reply has
 * been hidden or deleted (indicated by the deleted_at column in the Prisma
 * schema), the endpoint will also return 404, enforcing non-disclosure of
 * hidden moderation artifacts.
 *
 * Business logic ensures that this endpoint supports transparency in review
 * moderation, providing immediate availability of seller/admin replies inline
 * on product pages or review timelines. Error handling ensures clients are
 * informed of both invalid references and permission-based constraints with
 * specific error messages and codes. This endpoint supports regulatory and
 * trust needs for e-commerce platforms by making moderation and seller feedback
 * transparent to customers.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product associated with the
 *   review and reply.
 * @param props.reviewId Unique identifier of the target review being replied
 *   to.
 * @param props.replyId Unique identifier of the reply to the review.
 * @path /shoppingMall/products/:productId/reviews/:reviewId/replies/:replyId
 * @accessor api.functional.shoppingMall.products.reviews.replies.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the product associated with the review and
     * reply.
     */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the target review being replied to. */
    reviewId: string & tags.Format<"uuid">;

    /** Unique identifier of the reply to the review. */
    replyId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallReviewReply;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/reviews/:reviewId/replies/:replyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): IShoppingMallReviewReply =>
    typia.random<IShoppingMallReviewReply>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("replyId")(() => typia.assert(props.replyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
