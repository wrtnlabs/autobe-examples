import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCategory } from "../../../structures/IShoppingMallCategory";
import { IPageIShoppingMallCategory } from "../../../structures/IPageIShoppingMallCategory";

/**
 * Retrieve a filtered and paginated list of shopping mall categories from
 * shopping_mall_categories.
 *
 * This API operation returns a list of categories from the
 * shopping_mall_categories table with advanced filtering functionality. The
 * operation supports searching categories by partial name matches (either in
 * Korean or English), filtering by parent_id to fetch subcategories, and
 * filtering by is_active status. Pagination is supported so clients can request
 * categories by page number and size, enabling efficient navigation even
 * through large or multi-level category trees.
 *
 * Security considerations depend on platform policy: if category data is
 * public-facing (catalog, navigation), the endpoint may be unauthenticated; if
 * used for admin or moderation actions, access should be scoped to the admin
 * role. All results are based on the underlying Prisma schema, including fields
 * such as display_order for UI navigation and multilingual descriptions for
 * proper localization. Error cases such as invalid pagination parameters, or
 * attempts to access disabled categories can be addressed with descriptive
 * error messages.
 *
 * @param props.connection
 * @param props.body Criteria and pagination parameters for filtering and
 *   searching category listings.
 * @path /shoppingMall/categories
 * @accessor api.functional.shoppingMall.categories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Criteria and pagination parameters for filtering and searching
     * category listings.
     */
    body: IShoppingMallCategory.IRequest;
  };
  export type Body = IShoppingMallCategory.IRequest;
  export type Response = IPageIShoppingMallCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/categories";
  export const random = (): IPageIShoppingMallCategory.ISummary =>
    typia.random<IPageIShoppingMallCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific category by categoryId from
 * shopping_mall_categories.
 *
 * This API operation fetches the complete details of a single category using
 * its unique categoryId from the shopping_mall_categories table. It returns all
 * relevant properties for the category, including multilingual names and
 * descriptions, parent_id for hierarchical navigation, display_order, is_active
 * flag, and audit fields such as created_at, updated_at, and deleted_at. This
 * allows clients to render detail views, administrative forms, or build
 * parent-child tree data.
 *
 * Access control is informed by platform usage: for public navigation,
 * authentication may be optional; for administrative settings (e.g., updating a
 * category), additional permissions would be required. Validators ensure that
 * provided categoryId is a valid UUID and refers to an existing record. If the
 * specified category does not exist, the endpoint responds with a clear error.
 * Related APIs include list (index), category creation, and update operations.
 * Business logic aligns with requirements for multilingual and hierarchical
 * e-commerce category data.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier (UUID) of the desired category to
 *   retrieve.
 * @path /shoppingMall/categories/:categoryId
 * @accessor api.functional.shoppingMall.categories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the desired category to retrieve. */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
