import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReviewFlag } from "../../../../../../structures/IShoppingMallReviewFlag";
import { IPageIShoppingMallReviewFlag } from "../../../../../../structures/IPageIShoppingMallReviewFlag";

/**
 * Flag a product review for moderation or abuse, associated with the
 * review_flags table.
 *
 * Use this endpoint when a platform participant (customer, seller, or admin)
 * wishes to report a product review for suspected abuse, spam, or policy
 * violation. The flag is recorded in the shopping_mall_review_flags table,
 * referencing the specific review and actor (derived from authentication
 * context). Multiple actors may flag the same review, but a single actor can
 * only have one open flag per review.
 *
 * Upon submission, the system validates the review exists and is active, and
 * checks for any existing unresolved flags by the same user. The API enforces
 * role-based authentication, ensures flags have a clear reason, and logs every
 * event for audit and moderation workflows. The review owner is not notified
 * directly, but admins and moderation tools receive notice of submitted flags
 * for processing. Related operations include update (modifying note/status),
 * and resolution (via admin action).
 *
 * Security considerations: Only authenticated users may flag reviews. Attempts
 * to flag non-existent or deleted reviews return clear error messages. All flag
 * actions are logged for moderation transparency.
 *
 * The specification references the shopping_mall_review_flags table in the
 * Prisma schema. Each flag record contains the review association, actor
 * details (customer, seller, or admin), the reason for flagging, a note field,
 * status (open/closed), and audit timestamps.
 *
 * @param props.connection
 * @param props.productId ID of the product that the review belongs to.
 * @param props.reviewId ID of the review being flagged.
 * @param props.body Flag creation details including reason for reporting and
 *   optional note.
 * @path /shoppingMall/admin/products/:productId/reviews/:reviewId/flags
 * @accessor api.functional.shoppingMall.admin.products.reviews.flags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the product that the review belongs to. */
    productId: string & tags.Format<"uuid">;

    /** ID of the review being flagged. */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Flag creation details including reason for reporting and optional
     * note.
     */
    body: IShoppingMallReviewFlag.ICreate;
  };
  export type Body = IShoppingMallReviewFlag.ICreate;
  export type Response = IShoppingMallReviewFlag;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/products/:productId/reviews/:reviewId/flags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags`;
  export const random = (): IShoppingMallReviewFlag =>
    typia.random<IShoppingMallReviewFlag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list and moderation queue of all flags for a specific
 * product review (shopping_mall_review_flags).
 *
 * This operation is designed to allow a platform administrator or moderator to
 * query all flags that have been attached to a specific review on a given
 * product. Each flag is a report of abuse, policy violation, or content
 * moderation concern, referencing the review by reviewId and allowing
 * moderators to view all reports in a single view.
 *
 * Security-wise, only admin or moderator users should have direct access to all
 * flag information, as these can contain sensitive context and audit
 * information. Customer or seller actors never have access to all flags via
 * this endpoint; instead, they can flag reviews but cannot view the report
 * queue.
 *
 * The endpoint is closely tied to the shopping_mall_review_flags table, which
 * maintains information such as who flagged the review, their role, the
 * moderation status, reason code, note, and audit timestamps. Pagination,
 * advanced query filtering by status, and ordering by creation/update time are
 * mandatory to support operational needs. The request supports filtering for
 * flags by status (open/resolved/rejected), submitted reason, or flagged actor
 * type. Error handling includes validation of productId and reviewId for
 * existence, permission checks for admin-only access, and graceful fallback for
 * reviews without any associated flags. This endpoint is used in tandem with
 * the single flag query API for detailed inspection of individual flag
 * records.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product for which the
 *   review was written, as a UUID string.
 * @param props.reviewId Unique identifier of the specific product review whose
 *   flags are being queried, as a UUID string.
 * @param props.body Flag search/filter criteria, pagination, and sorting
 *   options for review moderation workflows.
 * @path /shoppingMall/admin/products/:productId/reviews/:reviewId/flags
 * @accessor api.functional.shoppingMall.admin.products.reviews.flags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the target product for which the review was
     * written, as a UUID string.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the specific product review whose flags are
     * being queried, as a UUID string.
     */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Flag search/filter criteria, pagination, and sorting options for
     * review moderation workflows.
     */
    body: IShoppingMallReviewFlag.IRequest;
  };
  export type Body = IShoppingMallReviewFlag.IRequest;
  export type Response = IPageIShoppingMallReviewFlag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/products/:productId/reviews/:reviewId/flags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags`;
  export const random = (): IPageIShoppingMallReviewFlag.ISummary =>
    typia.random<IPageIShoppingMallReviewFlag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch all details for a specific flag record on a product review
 * (shopping_mall_review_flags).
 *
 * This operation fetches the complete details for a single flag that has been
 * filed against a specific product review. A flag is a moderation or abuse
 * report, and each is uniquely identified by flagId and associated reviewId,
 * scoped by the parent product (productId).
 *
 * The response contains all relevant information contained in the
 * shopping_mall_review_flags record, including reporting user/seller/admin
 * identity (by reference), status (open, resolved, rejected), submitted reason,
 * note, timestamps, and moderation actions if any. Associated audit context is
 * provided for investigation purposes.
 *
 * This operation is strictly admin or moderator-only, given the sensitivity of
 * flagging information and potential for containing PII or moderation
 * annotations. Customer- and seller-facing flows never use this endpoint
 * directly. The endpoint requires that the referenced product, review, and flag
 * are all valid and relationally consistent; otherwise, clear 404 or
 * permission-denied errors are provided. This endpoint is typically used from
 * the moderation dashboard for deep-dive investigation after the paginated flag
 * list is consulted.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product as a UUID
 *   string.
 * @param props.reviewId Unique identifier of the target review as a UUID
 *   string.
 * @param props.flagId Unique identifier of the target flag record under the
 *   given review, as a UUID string.
 * @path /shoppingMall/admin/products/:productId/reviews/:reviewId/flags/:flagId
 * @accessor api.functional.shoppingMall.admin.products.reviews.flags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target product as a UUID string. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the target review as a UUID string. */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the target flag record under the given review,
     * as a UUID string.
     */
    flagId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallReviewFlag;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/products/:productId/reviews/:reviewId/flags/:flagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags/${encodeURIComponent(props.flagId ?? "null")}`;
  export const random = (): IShoppingMallReviewFlag =>
    typia.random<IShoppingMallReviewFlag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("flagId")(() => typia.assert(props.flagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a review flag's note or moderation status by flagId, for compliance
 * and moderation workflows.
 *
 * This operation lets an authorized user (primarily admin, but also original
 * flagger) modify details of a product review flag, such as changing the note
 * or updating the workflow status (for example, to 'resolved' or 'rejected'
 * after moderation review). Each flag is uniquely identified by productId,
 * reviewId, and flagId.
 *
 * Security: Only the flag creator or platform moderators/admins can update a
 * flag's note or status. Attempts to update a non-existent or closed flag are
 * rejected with an appropriate error. Changes are always fully audited and
 * tracked for compliance.
 *
 * On successful update, the system logs the event, re-validates business rules
 * (e.g., status transition logic), and notifies relevant actors if escalation
 * is required. This endpoint references the shopping_mall_review_flags table in
 * the Prisma schema, where each flag includes actor, note, current status, and
 * audit fields.
 *
 * @param props.connection
 * @param props.productId ID of the product associated with the review and flag.
 * @param props.reviewId ID of the review being flagged.
 * @param props.flagId ID of the specific review flag to update.
 * @param props.body Fields to update: note text or status value.
 * @path /shoppingMall/admin/products/:productId/reviews/:reviewId/flags/:flagId
 * @accessor api.functional.shoppingMall.admin.products.reviews.flags.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the product associated with the review and flag. */
    productId: string & tags.Format<"uuid">;

    /** ID of the review being flagged. */
    reviewId: string & tags.Format<"uuid">;

    /** ID of the specific review flag to update. */
    flagId: string & tags.Format<"uuid">;

    /** Fields to update: note text or status value. */
    body: IShoppingMallReviewFlag.IUpdate;
  };
  export type Body = IShoppingMallReviewFlag.IUpdate;
  export type Response = IShoppingMallReviewFlag;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/products/:productId/reviews/:reviewId/flags/:flagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags/${encodeURIComponent(props.flagId ?? "null")}`;
  export const random = (): IShoppingMallReviewFlag =>
    typia.random<IShoppingMallReviewFlag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("flagId")(() => typia.assert(props.flagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete (hard delete) a review flag for a product review
 * (shopping_mall_review_flags).
 *
 * This API allows an administrator to permanently delete a single review flag
 * on a specified product review. The review flag (from
 * shopping_mall_review_flags) is a record that indicates a report of abuse,
 * spam, or other violations for a given review, and is uniquely identified by a
 * flagId within the context of a particular productId and reviewId.
 *
 * In practical scenarios, administrators utilize this endpoint after resolving
 * the flag or determining that the report was in error. Only users with admin
 * or moderation privileges should be able to invoke this operation, as deleting
 * review flags may impact future audit and reporting capability.
 *
 * The operation completely removes the review flag record from the database.
 * There is no soft deletion for this table. This ensures that resolved or
 * incorrect flags do not clutter moderation dashboards or analytics. When
 * performing this action, the system should confirm the flag exists for the
 * specified productId and reviewId combination before deletion.
 *
 * Related endpoints include listing review flags for moderation, updating
 * review statuses, and other administrative moderation tools. Appropriate
 * access control and logging should be implemented to capture deletions for
 * platform compliance.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the target product containing
 *   the review.
 * @param props.reviewId Unique identifier for the review to which the flag is
 *   attached.
 * @param props.flagId Unique identifier for the review flag to be deleted.
 * @path /shoppingMall/admin/products/:productId/reviews/:reviewId/flags/:flagId
 * @accessor api.functional.shoppingMall.admin.products.reviews.flags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the target product containing the review. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier for the review to which the flag is attached. */
    reviewId: string & tags.Format<"uuid">;

    /** Unique identifier for the review flag to be deleted. */
    flagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/products/:productId/reviews/:reviewId/flags/:flagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags/${encodeURIComponent(props.flagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("flagId")(() => typia.assert(props.flagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
