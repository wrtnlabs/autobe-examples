import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAppeal } from "../../../../structures/IShoppingMallAppeal";
import { IPageIShoppingMallAppeal } from "../../../../structures/IPageIShoppingMallAppeal";

/**
 * Retrieve a paginated, filtered list of appeals (shopping_mall_appeals table)
 * for admin dashboard review.
 *
 * Fetch a filtered, paginated list of appeal records from the shoppingMall
 * platform. Appeals represent formal challenges to prior escalation case
 * decisions and are critical to transparent customer and seller service
 * workflows. This operation provides system admins with advanced search
 * capabilities over the shopping_mall_appeals schema, supporting filtering by
 * status (pending, under review, resolved, dismissed, etc.), appeal_type
 * (refund denied, policy review request, etc.), time windows, actor identity,
 * and outcome type.
 *
 * Results are returned in a paginated format for dashboard consumption and can
 * be sorted by creation/update time, status, or actor. The response
 * encapsulates complete metadata for each appeal, including escalation linkage,
 * actors, appeal/request type, status, outcome, resolution remarks, and
 * creation/update timestamps. Appropriate business logic must validate admin
 * authorization and prevent access leaks to non-admin users. Errors or
 * unsupported filter parameters are handled with clear error messages. This API
 * is intended for administrative dashboard use.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria to filter appeals results
 * @path /shoppingMall/admin/appeals
 * @accessor api.functional.shoppingMall.admin.appeals.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria to filter appeals results */
    body: IShoppingMallAppeal.IRequest;
  };
  export type Body = IShoppingMallAppeal.IRequest;
  export type Response = IPageIShoppingMallAppeal;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/appeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/appeals";
  export const random = (): IPageIShoppingMallAppeal =>
    typia.random<IPageIShoppingMallAppeal>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific appeal by ID from
 * shopping_mall_appeals table.
 *
 * Retrieve detailed information about a specific customer or seller appeal
 * based on the provided appeal ID. This operation returns all relevant fields
 * of the appeal record as defined in the 'shopping_mall_appeals' schema,
 * including appellant identity, escalation reference, appeal type, status,
 * assigned reviewers, and resolution details.
 *
 * Security: The endpoint enforces role-based accessâ€”customers and sellers see
 * only their own appeals and admins have full platform-wide access. Sensitive
 * data is filtered out for roles without scope. Logging is performed for all
 * read access for audit purposes.
 *
 * Business logic ensures only appeals that have not been soft deleted
 * (deleted_at is null) are returned. Attempts to access non-existent or
 * unauthorized appeal IDs return a 404 or 403 error as appropriate.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal to retrieve information
 *   for.
 * @path /shoppingMall/admin/appeals/:appealId
 * @accessor api.functional.shoppingMall.admin.appeals.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the appeal to retrieve information for. */
    appealId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAppeal;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IShoppingMallAppeal =>
    typia.random<IShoppingMallAppeal>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific appeal record's status, resolution, or comment in the
 * ShoppingMallAppeal table.
 *
 * Update an appeal entry to reflect admin decision or ongoing review status in
 * the context of customer service escalation. Appeals are created when a
 * customer or seller contests the outcome of a previous escalation, seeking
 * additional review or policy override. Admins reviewing an appeal must
 * document the outcome, status, and method of resolution, along with a comment
 * clarifying the decision and any remediation steps taken.
 *
 * This operation enforces platform business logic, including eligibility checks
 * (only open/in-review appeals can be updated), workflow controls (status
 * changes such as resolved, dismissed, or accepted), and record-keeping for
 * audit and compliance. Admins must ensure accurate information is provided as
 * changes here affect customer entitlements and regulatory retention. All
 * actions are time-stamped, actor logged, and retrievable for later dispute or
 * compliance analysis.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the target appeal to update.
 * @param props.body Object containing properties to update in the appeal, such
 *   as new status, resolution type, and admin comment explaining the outcome.
 * @path /shoppingMall/admin/appeals/:appealId
 * @accessor api.functional.shoppingMall.admin.appeals.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target appeal to update. */
    appealId: string & tags.Format<"uuid">;

    /**
     * Object containing properties to update in the appeal, such as new
     * status, resolution type, and admin comment explaining the outcome.
     */
    body: IShoppingMallAppeal.IUpdate;
  };
  export type Body = IShoppingMallAppeal.IUpdate;
  export type Response = IShoppingMallAppeal;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/appeals/:appealId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IShoppingMallAppeal =>
    typia.random<IShoppingMallAppeal>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a specific appeal record from the ShoppingMallAppeal table
 * by its identifier.
 *
 * Permanently delete a specific appeal entry from the system, removing it from
 * the appeals queue and all customer/admin access. This action can only be
 * performed by authorized administrators and is intended for appeals records
 * that have fully completed their lifecycle or must be purged due to data error
 * or policy violation.
 *
 * The operation is subject to audit trail requirements: all deletion actions
 * are logged with timestamps and acting admin id for later compliance checks.
 * Attempts to delete appeals in active status (e.g., under review or
 * unresolved) must be rejected by business logic, returning an appropriate
 * error. Where regulatory or platform retention rules mandate, deleted appeals
 * are tracked in administrative action logs for historical reference and
 * reporting.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal to be deleted.
 * @path /shoppingMall/admin/appeals/:appealId
 * @accessor api.functional.shoppingMall.admin.appeals.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the appeal to be deleted. */
    appealId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
