import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductOptionValue } from "../../../../../../structures/IShoppingMallProductOptionValue";
import { IPageIShoppingMallProductOptionValue } from "../../../../../../structures/IPageIShoppingMallProductOptionValue";

/**
 * Create a new product option value for a product option
 * (shopping_mall_product_option_values).
 *
 * Add a new value (such as 'Blue', 'Large') to an existing product option (like
 * color or size) for a specific product. This is essential for supporting new
 * variants and expanding available SKUs for a product. The operation validates
 * seller/admin permissions, enforces value uniqueness, and provides clear error
 * feedback if a duplicate or invalid value is submitted.
 *
 * The input must conform to IShoppingMallProductOptionValue.ICreate structure,
 * which includes the desired display value and ordering. The system checks the
 * parent product's ownership (only the seller of this product or admins may add
 * option values), as well as option existence and activation.
 *
 * On success, it returns the full details of the new option value, suitable for
 * further SKU creation or UI refresh. Business rules embedded in the Prisma
 * schema, such as unique value per option and index, are strictly enforced.
 * This complements option and product management workflows for inventory and
 * catalog updates.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the product to augment option
 *   values.
 * @param props.optionId Unique identifier for the product option (e.g., color,
 *   size) to add the value to.
 * @param props.body Creation details for the new option value (e.g., value text
 *   and display order).
 * @path /shoppingMall/admin/products/:productId/options/:optionId/values
 * @accessor api.functional.shoppingMall.admin.products.options.values.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier for the product to augment option values. */
    productId: string & tags.Format<"uuid">;

    /**
     * Unique identifier for the product option (e.g., color, size) to add
     * the value to.
     */
    optionId: string & tags.Format<"uuid">;

    /**
     * Creation details for the new option value (e.g., value text and
     * display order).
     */
    body: IShoppingMallProductOptionValue.ICreate;
  };
  export type Body = IShoppingMallProductOptionValue.ICreate;
  export type Response = IShoppingMallProductOptionValue;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/products/:productId/options/:optionId/values",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/options/${encodeURIComponent(props.optionId ?? "null")}/values`;
  export const random = (): IShoppingMallProductOptionValue =>
    typia.random<IShoppingMallProductOptionValue>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("optionId")(() => typia.assert(props.optionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered, paginated list of possible values for a specific product
 * option (shopping_mall_product_option_values).
 *
 * This API lists all option values (such as 'Red', 'XL', etc.) for a specific
 * option on a product, with support for searching, filtering, and pagination.
 * The operation references the product and product option as path parameters,
 * ensuring both resources exist and are associated. Requesters can filter
 * option values by attributes such as display name or display order.
 *
 * Security is applied such that only authorized sellers (owners of the product)
 * or admin users can access this feature. The endpoint is useful for managing
 * the spectrum of choices offered for a product and bulk operations in the
 * product editing UI. The response provides the data in a paginated structure
 * with metadata about available total records, supporting efficient dashboards
 * and lazy loading interfaces.
 *
 * This operation connects directly to the underlying product option values in
 * the shopping_mall_product_option_values schema table and is used for catalog
 * maintenance purposes. Error handling will return clear validation messages if
 * the option or product does not exist or if access is unauthorized.
 *
 * @param props.connection
 * @param props.productId The unique identifier of the product to which the
 *   option and its values belong.
 * @param props.optionId The unique identifier of the product option whose
 *   values are being listed.
 * @param props.body Filter and pagination parameters for searching option
 *   values within a product option (e.g., value name, order, created_at).
 * @path /shoppingMall/admin/products/:productId/options/:optionId/values
 * @accessor api.functional.shoppingMall.admin.products.options.values.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the product to which the option and its
     * values belong.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the product option whose values are being
     * listed.
     */
    optionId: string & tags.Format<"uuid">;

    /**
     * Filter and pagination parameters for searching option values within a
     * product option (e.g., value name, order, created_at).
     */
    body: IShoppingMallProductOptionValue.IRequest;
  };
  export type Body = IShoppingMallProductOptionValue.IRequest;
  export type Response = IPageIShoppingMallProductOptionValue;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/products/:productId/options/:optionId/values",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/options/${encodeURIComponent(props.optionId ?? "null")}/values`;
  export const random = (): IPageIShoppingMallProductOptionValue =>
    typia.random<IPageIShoppingMallProductOptionValue>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("optionId")(() => typia.assert(props.optionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific option value (e.g., color or size) for a product option, by
 * product ID, option ID, and value ID, in the
 * shopping_mall_product_option_values table.
 *
 * This API operation allows sellers or admins to modify the value associated
 * with a specific product option for a designated product within the e-commerce
 * platform. The option value is a component of the variant system, enabling
 * product listings to support multiple selectable attributes such as color,
 * size, or material. Each option value must remain unique within its option
 * group and product, and changes must not violate variant combination
 * integrity.
 *
 * Security checks ensure that only the seller owning the product or platform
 * admins can update an option value. Attempting to update an option value not
 * associated with the specified product or option group returns a not-found or
 * unauthorized error. All modifications update the updated_at timestamp for
 * audit purposes, and relevant product SKUs using this value may require
 * downstream updates or cache invalidation.
 *
 * The structure strictly requires the three-level identifier path (productId,
 * optionId, valueId) to target the exact value record. Business logic prohibits
 * updating a value to one that would duplicate an existing value within the
 * same option. If the value is currently referenced by active orders or SKUs,
 * business validation ensures updates are consistent and legal. Errors are
 * returned for not found, forbidden, or validation violations. This operation
 * relates to the shopping_mall_product_option_values and their links to
 * shopping_mall_product_options and shopping_mall_products tables.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product the option belongs
 *   to.
 * @param props.optionId Unique identifier of the option group within the
 *   product (e.g., color, size).
 * @param props.valueId Unique identifier of the option value to update.
 * @param props.body Fields to update in the product option value (e.g., value
 *   name, display order, etc.).
 * @path /shoppingMall/admin/products/:productId/options/:optionId/values/:valueId
 * @accessor api.functional.shoppingMall.admin.products.options.values.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product the option belongs to. */
    productId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the option group within the product (e.g.,
     * color, size).
     */
    optionId: string & tags.Format<"uuid">;

    /** Unique identifier of the option value to update. */
    valueId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the product option value (e.g., value name,
     * display order, etc.).
     */
    body: IShoppingMallProductOptionValue.IUpdate;
  };
  export type Body = IShoppingMallProductOptionValue.IUpdate;
  export type Response = IShoppingMallProductOptionValue;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/products/:productId/options/:optionId/values/:valueId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/options/${encodeURIComponent(props.optionId ?? "null")}/values/${encodeURIComponent(props.valueId ?? "null")}`;
  export const random = (): IShoppingMallProductOptionValue =>
    typia.random<IShoppingMallProductOptionValue>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("optionId")(() => typia.assert(props.optionId));
      assert.param("valueId")(() => typia.assert(props.valueId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a specific product option value for a product option, by
 * product ID, option ID, and value ID, in the
 * shopping_mall_product_option_values table.
 *
 * This API operation enables a seller or administrator to delete a single
 * option value from an option group of a product, such as removing 'Blue' from
 * a product's available color options. The operation targets the
 * shopping_mall_product_option_values entity, requiring unique path
 * identification for the product, option, and value.
 *
 * Security rules require that the user is either the seller who owns the
 * product or an administrator. Deletion is only permitted if the value is not
 * in active use by any product SKU or pending orders; attempts to delete in-use
 * values result in validation errors. If successfully removed, the value is
 * deleted from its option group, and all dependent SKU mappings are updated
 * accordingly. The deleted value is permanently removed (hard delete) from the
 * database, as there is no soft deletion mechanism for this field in the
 * schema.
 *
 * The operation supports comprehensive error handling for not found,
 * unauthorized, or business logic violations. The request requires all
 * identifier path parameters to target the specific value. Attempting to remove
 * a value currently in use or required for a product's option matrix returns a
 * relevant error message. Audit logging registers all deletes for compliance.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product the option belongs
 *   to.
 * @param props.optionId Unique identifier of the option group within the
 *   product (e.g., color, size).
 * @param props.valueId Unique identifier of the option value to delete.
 * @path /shoppingMall/admin/products/:productId/options/:optionId/values/:valueId
 * @accessor api.functional.shoppingMall.admin.products.options.values.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the product the option belongs to. */
    productId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the option group within the product (e.g.,
     * color, size).
     */
    optionId: string & tags.Format<"uuid">;

    /** Unique identifier of the option value to delete. */
    valueId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/products/:productId/options/:optionId/values/:valueId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/options/${encodeURIComponent(props.optionId ?? "null")}/values/${encodeURIComponent(props.valueId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("optionId")(() => typia.assert(props.optionId));
      assert.param("valueId")(() => typia.assert(props.valueId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
