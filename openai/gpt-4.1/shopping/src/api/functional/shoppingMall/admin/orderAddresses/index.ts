import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderAddress } from "../../../../structures/IShoppingMallOrderAddress";
import { IPageIShoppingMallOrderAddress } from "../../../../structures/IPageIShoppingMallOrderAddress";

/**
 * Search and retrieve a list of immutable order addresses
 * (shopping_mall_order_addresses) with advanced filters and pagination.
 *
 * This endpoint provides advanced search and retrieval of order-associated
 * shipping/billing addresses from the shopping_mall_order_addresses table,
 * supporting audit, reporting, and customer service requirements. Order
 * addresses are recorded at the time of order placement and are immutable,
 * reflecting the exact snapshot the order used regardless of subsequent address
 * book edits by the customer.
 *
 * Permissions are enforced by role: customers may only retrieve order addresses
 * linked to their own orders; sellers see those for their fulfilled orders;
 * admins have full access for auditing and monitoring. The request allows
 * filtering by recipient_name, region, zip/postal code, country code,
 * address_type, and date range, and supports search for multilingual addresses.
 * Responses provide paginated results containing all address fields except
 * potentially sensitive fields where role restricts. The endpoint is crucial
 * for traceability in regulatory or customer service cases, for UI features
 * like order history detail, and for managing order delivery discrepancies. The
 * request structure follows the IShoppingMallOrderAddress.IRequest pattern for
 * consistency with complex search and pagination across the API suite.
 *
 * Error handling includes clear feedback on permission violations, invalid
 * search criteria, and unexpected service issues. The response encapsulates a
 * role-appropriate list of address summaries optimized for audit trails and
 * operational review. Linked APIs for order and shipment details reference
 * these addresses in their respective resource models.
 *
 * @param props.connection
 * @param props.body Search/filter parameters and pagination controls for
 *   querying historical order addresses.
 * @path /shoppingMall/admin/orderAddresses
 * @accessor api.functional.shoppingMall.admin.orderAddresses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search/filter parameters and pagination controls for querying
     * historical order addresses.
     */
    body: IShoppingMallOrderAddress.IRequest;
  };
  export type Body = IShoppingMallOrderAddress.IRequest;
  export type Response = IPageIShoppingMallOrderAddress.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/orderAddresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/orderAddresses";
  export const random = (): IPageIShoppingMallOrderAddress.ISummary =>
    typia.random<IPageIShoppingMallOrderAddress.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific historical order address
 * (shopping_mall_order_addresses).
 *
 * This API operation provides a detailed, read-only view of a single order
 * address snapshot by its ID. The order address table is not user-editable and
 * only contains historical information captured at the time of an order's
 * creation, ensuring audit integrity and accurate fulfillment tracking.
 *
 * Address data includes all fields required for postal, shipping, and
 * compliance workflows—recipient, phone, postal code, address fields (split
 * main/detail), region, country code, and the creation timestamp. Users cannot
 * modify or delete these records for data consistency and legal compliance;
 * only admins may access them depending on platform policy.
 *
 * The operation enforces access such that customers may only view their own
 * orders’ addresses, while admins have platform-wide access. If the specified
 * ID is not found or the user is unauthorized to view it, an appropriate error
 * is returned. This API does not expose linked order or customer identifiers in
 * the response for privacy reasons.
 *
 * This endpoint is most frequently used for user-facing order details screens,
 * audit logs, refunds, cancellations, and admin investigations.
 *
 * @param props.connection
 * @param props.orderAddressId Unique identifier (UUID) for the order address
 *   snapshot to retrieve.
 * @path /shoppingMall/admin/orderAddresses/:orderAddressId
 * @accessor api.functional.shoppingMall.admin.orderAddresses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) for the order address snapshot to retrieve. */
    orderAddressId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderAddress;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/orderAddresses/:orderAddressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orderAddresses/${encodeURIComponent(props.orderAddressId ?? "null")}`;
  export const random = (): IShoppingMallOrderAddress =>
    typia.random<IShoppingMallOrderAddress>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderAddressId")(() => typia.assert(props.orderAddressId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing order address snapshot record in the
 * shopping_mall_order_addresses table by its unique identifier.
 *
 * This API allows updating an existing order address snapshot record in the
 * shopping_mall_order_addresses table. The purpose is to support the correction
 * or completion of shipping (or billing) information after the original order
 * has been recorded, particularly in cases of initial user entry errors,
 * compliance requirements, or rare valid customer requests under administrative
 * review.
 *
 * The endpoint supports updating fields including recipient name, contact
 * information, region, zip/postal code, main address, detailed address, and
 * country code. The platform's role-based permissions model restricts update
 * actions strictly to authorized administrators; regular users and sellers
 * cannot use this endpoint directly. Updates may be limited after order
 * progresses to shipment or fulfillment, with stricter policies enforced when
 * the address is attached to orders in advanced states.
 *
 * Internally, this operation validates existence of the target address,
 * verifies it is not soft-deleted, and logs all changes for legal/audit
 * purposes. Changes may affect only address fields; no direct modification of
 * order or fulfillment status is permitted here. Errors are returned if the
 * order address does not exist, is already deleted, or the update violates
 * business constraints (e.g., trying to change address for already shipped
 * order).
 *
 * The operation must be used in accordance with privacy, legal, and compliance
 * policies, and all changes are auditable. Related endpoints include order
 * retrieval and address list endpoints; changes made via this operation are
 * visible on subsequent order detail queries.
 *
 * @param props.connection
 * @param props.orderAddressId Unique identifier of the order address record to
 *   update.
 * @param props.body Data fields to update for the specified order address
 *   snapshot.
 * @path /shoppingMall/admin/orderAddresses/:orderAddressId
 * @accessor api.functional.shoppingMall.admin.orderAddresses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the order address record to update. */
    orderAddressId: string & tags.Format<"uuid">;

    /** Data fields to update for the specified order address snapshot. */
    body: IShoppingMallOrderAddress.IUpdate;
  };
  export type Body = IShoppingMallOrderAddress.IUpdate;
  export type Response = IShoppingMallOrderAddress;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/orderAddresses/:orderAddressId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orderAddresses/${encodeURIComponent(props.orderAddressId ?? "null")}`;
  export const random = (): IShoppingMallOrderAddress =>
    typia.random<IShoppingMallOrderAddress>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderAddressId")(() => typia.assert(props.orderAddressId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an order address snapshot record from
 * shopping_mall_order_addresses by its unique identifier.
 *
 * This API endpoint allows an administrator to permanently delete an order
 * address snapshot from the shopping_mall_order_addresses table by its unique
 * identifier. Addresses in this table represent immutable historical data for
 * orders, but deletion may be permitted for obvious system errors, compliance
 * correction, or exceptional legal requests. Deletions performed through this
 * operation are hard deletes (permanently removed), as the model does not
 * support soft deletion.
 *
 * Business logic strictly restricts who may use this endpoint; only users with
 * admin roles are permitted. Attempting deletion of an address linked to an
 * active, non-cancelled order may be prevented by business policy for trace
 * integrity, returning an actionable, specific error. Audit trails are
 * automatically generated for all deletions, including actor, reason, and
 * affected record id.
 *
 * If the target address does not exist, is already deleted, or is not eligible
 * for deletion under the order's current state, an error is returned. Deleting
 * an order address does not affect or remove the actual order—the order remains
 * in place, but address references will show as deleted/removed in history
 * timelines, per compliance and platform requirements. Changes are reflected on
 * subsequent order or address queries as appropriate.
 *
 * @param props.connection
 * @param props.orderAddressId Unique identifier of the order address snapshot
 *   to delete.
 * @path /shoppingMall/admin/orderAddresses/:orderAddressId
 * @accessor api.functional.shoppingMall.admin.orderAddresses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the order address snapshot to delete. */
    orderAddressId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/orderAddresses/:orderAddressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orderAddresses/${encodeURIComponent(props.orderAddressId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderAddressId")(() => typia.assert(props.orderAddressId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
