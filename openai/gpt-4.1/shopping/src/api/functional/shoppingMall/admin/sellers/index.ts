import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSeller } from "../../../../structures/IShoppingMallSeller";
import { IPageIShoppingMallSeller } from "../../../../structures/IPageIShoppingMallSeller";
export * as addresses from "./addresses/index";

/**
 * Admin search and filter operation for registered sellers
 * (shopping_mall_sellers table) with advanced pagination and security
 * controls.
 *
 * Administrators and platform operators can request this endpoint to search,
 * retrieve, and manage the list of registered sellers. The operation provides
 * robust filtering and pagination features, enabling admins to quickly locate
 * sellers by their business name, contact details, registration time frame, and
 * onboarding/approval status.
 *
 * This endpoint helps admins to conduct compliance reviews, process KYC
 * verifications, or monitor pending sellers. It also supports batch operations,
 * analytics, and integration with other admin platform modules. Returned data
 * includes key attributes such as seller business and contact details, approval
 * status, registration info, and KYC documentation. Data access and filtering
 * adhere strictly to security guidelines, and only users with roles such as
 * admin can access detailed seller information.
 *
 * In error or empty-result cases, the operation will return a paginated
 * structure with zero results, and appropriate error codes are provided for
 * unauthorized or invalid filter requests. Related endpoints include detailed
 * seller lookups and updates for seller management.
 *
 * @param props.connection
 * @param props.body Criteria for filtering, searching, and paginating the
 *   seller list. Supports fields such as business name, approval status,
 *   registration date, and sort options.
 * @path /shoppingMall/admin/sellers
 * @accessor api.functional.shoppingMall.admin.sellers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Criteria for filtering, searching, and paginating the seller list.
     * Supports fields such as business name, approval status, registration
     * date, and sort options.
     */
    body: IShoppingMallSeller.IRequest;
  };
  export type Body = IShoppingMallSeller.IRequest;
  export type Response = IPageIShoppingMallSeller.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/sellers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/sellers";
  export const random = (): IPageIShoppingMallSeller.ISummary =>
    typia.random<IPageIShoppingMallSeller.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get complete seller account details by sellerId from shopping_mall_sellers
 * table.
 *
 * Retrieve comprehensive seller account details by seller ID from the
 * shopping_mall_sellers table. This operation supports both authenticated user
 * and admin use-cases, providing business-critical data such as contact
 * information, business entity, KYC status, and account history.
 *
 * Path parameter validation ensures that sellerId is a well-formed UUID and
 * corresponds to an existing, active, or approved seller. Full details
 * including KYC information, audit fields, and business registration numbers
 * are returned only to admin users or the account owner; all other users see
 * only public, non-sensitive fields for seller display purposes.
 *
 * This endpoint supports audit compliance by including all relevant fields for
 * administrative review. Role-based access control ensures marketplace
 * transparency while protecting sensitive or private data. Error handling
 * includes not-found responses for invalid IDs or disabled/suspended sellers,
 * and 403 errors if a user attempts to access another seller's confidential
 * information without proper permissions.
 *
 * For related operations, see seller account update (PUT /sellers/{sellerId})
 * for account changes, and authenticated order/product queries for cross-entity
 * validation and seller-product relationships.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the target seller (UUID)
 * @path /shoppingMall/admin/sellers/:sellerId
 * @accessor api.functional.shoppingMall.admin.sellers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target seller (UUID) */
    sellerId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/sellers/:sellerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update seller account information for sellerId in shopping_mall_sellers
 * table.
 *
 * Update a seller account record in the shopping_mall_sellers table, identified
 * by sellerId. Supports both self-service seller profile maintenance and
 * privileged admin updates for account management, KYC, or business
 * registration corrections.
 *
 * The request body schema IShoppingMallSeller.IUpdate requires all updatable
 * seller fields as defined in the Prisma schema. Input validation enforces
 * business logic such as unique email and registration number, correct phone
 * and URI formats, and restricted updates for status fields depending on role.
 * On successful validation and authorization, the record is updated and the
 * updated seller profile is returned as response.
 *
 * Admin actions are fully auditedâ€”updates to approval_status, KYC, or sensitive
 * attributes generate audit logs with admin identity and reason for
 * accountability. Sellers may update their own basic contact info and KYC
 * submissions but cannot self-approve, suspend, or delete their own accounts.
 * Role-based error handling is in place with descriptive error responses for
 * unauthorized or invalid data changes. For related workflows, see seller
 * registration and admin dashboard moderation tools.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller to update (UUID)
 * @param props.body All updatable seller account fields as per
 *   IShoppingMallSeller.IUpdate schema
 * @path /shoppingMall/admin/sellers/:sellerId
 * @accessor api.functional.shoppingMall.admin.sellers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller to update (UUID) */
    sellerId: string & tags.Format<"uuid">;

    /**
     * All updatable seller account fields as per
     * IShoppingMallSeller.IUpdate schema
     */
    body: IShoppingMallSeller.IUpdate;
  };
  export type Body = IShoppingMallSeller.IUpdate;
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/sellers/:sellerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a seller account from the shopping_mall_sellers table,
 * along with all associated data, if eligible.
 *
 * This API endpoint irreversibly removes a seller account from the platform by
 * deleting the associated row in the shopping_mall_sellers table. Only
 * administrators are authorized to execute this action. If the seller is
 * responsible for any active, pending, or historical orders that are not in a
 * terminal state, the system will block the deletion and return an explanatory
 * error to the admin user initiating the request.
 *
 * The deletion is performed as a hard delete since the schema supports a soft
 * delete timestamp (deleted_at), but a DELETE operation here is interpreted as
 * an intent for permanent removal. Upon successful completion, the operation
 * will invalidate the seller's authentication and access rights, deactivate
 * their products (making them unavailable for purchase), and update all audit
 * and action logs to ensure full traceability and compliance with platform
 * audit policies. All child records such as products, inventory owned by the
 * seller, and address information will be cascaded or re-associated as per
 * foreign key rules.
 *
 * Event logging will capture the admin identity, deletion rationale, and all
 * affected entity IDs for compliance and investigation purposes. If attempted
 * on a seller with open obligations (for example, unresolved orders or active
 * SKUs with inventory), the system will refuse the operation with a clear,
 * actionable error, consistent with the requirements specification referencing
 * irreversible business actions and regulatory constraints.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller to be deleted.
 * @path /shoppingMall/admin/sellers/:sellerId
 * @accessor api.functional.shoppingMall.admin.sellers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller to be deleted. */
    sellerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/sellers/:sellerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
