import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderRefund } from "../../../../../structures/IShoppingMallOrderRefund";

/**
 * Retrieve the details for a specific refund event related to an order
 * (shopping_mall_order_refunds table).
 *
 * Retrieve complete details for a specific refund event associated with a
 * particular order. This API operates directly on the
 * shopping_mall_order_refunds table, ensuring traceability of refund requests,
 * status changes, refunds resolved, initiator identity, payment linkage, and
 * timeline data.
 *
 * This operation enforces access control such that only the refund owner
 * (customer) or administrators may view sensitive refund and payment data.
 * Unauthorized attempts are denied and logged. The response includes refund
 * status (pending, approved, denied, completed), date/time fields, refund
 * amounts, business reason code, actors, attached explanation, and any
 * settlement or failure timestamps. Data is immutable for audit compliance and
 * used for customer service reviews or appeals workflows.
 *
 * The customer may use this operation through their order history or customer
 * service portal to review the refund progress, resolution, or denial
 * explanation. Admins use it to audit refund handling and improve platform
 * transparency and trust. The refundId parameter must correspond to an existing
 * refund event for the specified orderId; otherwise, enforced error handling
 * returns a 404 or role-based error response.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order for which the
 *   refund event belongs (UUID).
 * @param props.refundId Unique identifier of the refund event to be retrieved
 *   (UUID).
 * @path /shoppingMall/admin/orders/:orderId/refunds/:refundId
 * @accessor api.functional.shoppingMall.admin.orders.refunds.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the target order for which the refund event
     * belongs (UUID).
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the refund event to be retrieved (UUID). */
    refundId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderRefund;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/orders/:orderId/refunds/:refundId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): IShoppingMallOrderRefund =>
    typia.random<IShoppingMallOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update (admin/seller) a refund request for an order
 * (shopping_mall_order_refunds).
 *
 * Updates a specific refund request associated with an order. This operation
 * supports status transitions (pending, approved, denied, completed, failed),
 * allows updating the resolution reason, and may permit modification of the
 * explanation or payout details depending on the business policy. The request
 * and refundId must reference an existing refund request for the specified
 * order. Only users with seller or admin rights over the order may execute
 * updates.
 *
 * The operation cross-checks refund eligibility and current status to prevent
 * invalid transitions, such as approving a refund that has already been denied
 * or completed. Security protocols verify that the updater has proper role
 * authorization, and business logic handles all state transition rules. Changes
 * are logged in the refund record for audit traces and customer visibility. If
 * a non-authorized user calls this API or sends an invalid update, the system
 * will reject the operation with an error message and preserve the previous
 * refund status. Data is retained to meet regulatory trace and business audit
 * requirements for financial events such as refunds.
 *
 * See also: Initiating a refund via POST on /orders/{orderId}/refunds.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order associated with this
 *   refund request
 * @param props.refundId Unique identifier of the refund request to be updated
 * @param props.body Details for the refund update, such as new status
 *   (approved, denied, completed), explanation for the action, and payout
 *   information if applicable.
 * @path /shoppingMall/admin/orders/:orderId/refunds/:refundId
 * @accessor api.functional.shoppingMall.admin.orders.refunds.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the order associated with this refund request */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the refund request to be updated */
    refundId: string & tags.Format<"uuid">;

    /**
     * Details for the refund update, such as new status (approved, denied,
     * completed), explanation for the action, and payout information if
     * applicable.
     */
    body: IShoppingMallOrderRefund.IUpdate;
  };
  export type Body = IShoppingMallOrderRefund.IUpdate;
  export type Response = IShoppingMallOrderRefund;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/orders/:orderId/refunds/:refundId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): IShoppingMallOrderRefund =>
    typia.random<IShoppingMallOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently erase a specific refund event for an order
 * (shopping_mall_order_refunds table) by admin action.
 *
 * The erase operation for an order refund enables a platform administrator to
 * remove a specific refund event entry from the shopping_mall_order_refunds
 * table, linked to its parent order. This may be justified in rare scenarios
 * such as accidental duplicate entry, legal data erasure request, or to correct
 * compliance discrepancies identified in the audit process.
 *
 * Role-based access control is strictly enforced â€” only users with the 'admin'
 * role may use this endpoint, as refund records are transactional and
 * financial, and their removal impacts both audit trails and downstream
 * reporting. The operation first verifies the existence of both the order and
 * refund IDs, ensures no settlement or irrevocable financial transaction is at
 * risk, and confirms business logic (such as the refund's non-finalized state
 * or within permissible removal period) before deleting the record.
 *
 * On successful deletion, the record is purged (hard delete) and a confirmation
 * is propagated to the invoking admin. If the refund is already finalized,
 * linked to downstream payments, or otherwise protected by compliance, the
 * request is rejected with an error. All erase actions are logged in the admin
 * action logs (shopping_mall_admin_action_logs) for long-term oversight. Other
 * related APIs for order or refund history retrieval are not impacted except
 * that the deleted refund will no longer appear in any results. Error handling
 * ensures transactional integrity and provides clear, actionable feedback for
 * edge cases such as invalid IDs, permission violations, or state conflicts.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order to which the
 *   refund event belongs (UUID format).
 * @param props.refundId Unique identifier of the refund event record to be
 *   erased (UUID format).
 * @path /shoppingMall/admin/orders/:orderId/refunds/:refundId
 * @accessor api.functional.shoppingMall.admin.orders.refunds.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the parent order to which the refund event
     * belongs (UUID format).
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the refund event record to be erased (UUID
     * format).
     */
    refundId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/orders/:orderId/refunds/:refundId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
