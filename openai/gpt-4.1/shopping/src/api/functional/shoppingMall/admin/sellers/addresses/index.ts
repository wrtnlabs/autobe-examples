import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerAddress } from "../../../../../structures/IShoppingMallSellerAddress";
import { IPageIShoppingMallSellerAddress } from "../../../../../structures/IPageIShoppingMallSellerAddress";

/**
 * Retrieve all addresses for a specific seller from
 * shopping_mall_seller_addresses, supporting filtering and pagination.
 *
 * This API endpoint returns a paginated list of all addresses registered by the
 * seller specified by sellerId. The result includes all fields defined in the
 * shopping_mall_seller_addresses table, such as recipient_name, phone, region,
 * postal_code, address lines, type (business/shipping/return), and is_primary
 * flag. Filtering, sorting, search, and pagination parameters may be accepted
 * via request body for large address books, though typical usage would return a
 * manageable number of address entries per seller.
 *
 * This operation can be accessed by the seller themselves, for use in the
 * seller dashboard, or by admins managing seller information for compliance or
 * operational support. The endpoint validates that the caller has the necessary
 * permissionsâ€”seller (must be their own addresses) or admin (platform-wide
 * view). Address details may be masked or redacted for other roles as per
 * platform privacy rules. The business logic supports real-time reflection of
 * updates, and changes to these addresses are propagated across the shipping
 * and order fulfillment modules as referenced in the shopping_mall_orders
 * entity.
 *
 * Security considerations include strict authorization matching sellerId to
 * authenticated identity (unless admin), granular control of address updates,
 * and audit logging for all accesses to ensure GDPR and business policy
 * compliance.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the target seller whose addresses
 *   are retrieved.
 * @param props.body Filtering, sorting, and pagination parameters for seller
 *   address search. May be omitted to fetch all addresses without filters.
 * @path /shoppingMall/admin/sellers/:sellerId/addresses
 * @accessor api.functional.shoppingMall.admin.sellers.addresses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target seller whose addresses are retrieved. */
    sellerId: string & tags.Format<"uuid">;

    /**
     * Filtering, sorting, and pagination parameters for seller address
     * search. May be omitted to fetch all addresses without filters.
     */
    body: IShoppingMallSellerAddress.IRequest;
  };
  export type Body = IShoppingMallSellerAddress.IRequest;
  export type Response = IPageIShoppingMallSellerAddress;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/sellers/:sellerId/addresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}/addresses`;
  export const random = (): IPageIShoppingMallSellerAddress =>
    typia.random<IPageIShoppingMallSellerAddress>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a seller's address detail by addressId from
 * shopping_mall_seller_addresses.
 *
 * Fetch detailed information for a seller's address, identified by sellerId and
 * addressId, from the shopping_mall_seller_addresses table. This address may
 * represent the seller's business, shipping, or return address, as specified in
 * the 'type' field of the schema.
 *
 * This operation enforces strict access control, so only the owner seller,
 * authorized admins, or system processes with elevated privileges may access
 * the address details. The endpoint supports retrieval for real-time management
 * of seller profiles or for use during order and logistics workflows. Returned
 * details include all address fields such as recipient_name, phone, region,
 * postal_code, address_line1 and 2, is_primary, and timestamps for creation and
 * update.
 *
 * If the seller or address does not exist, or if access is denied, the
 * operation responds with appropriate error statuses such as 404 (Not Found) or
 * 403 (Forbidden). This operation is commonly followed by address update,
 * delete, or assignment functionalities to maintain consistent seller data
 * integrity.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller who owns the address
 * @param props.addressId Unique identifier of the seller's address to retrieve
 * @path /shoppingMall/admin/sellers/:sellerId/addresses/:addressId
 * @accessor api.functional.shoppingMall.admin.sellers.addresses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller who owns the address */
    sellerId: string & tags.Format<"uuid">;

    /** Unique identifier of the seller's address to retrieve */
    addressId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSellerAddress;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/sellers/:sellerId/addresses/:addressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}/addresses/${encodeURIComponent(props.addressId ?? "null")}`;
  export const random = (): IShoppingMallSellerAddress =>
    typia.random<IShoppingMallSellerAddress>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.param("addressId")(() => typia.assert(props.addressId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a seller's address data for a given addressId in
 * shopping_mall_seller_addresses.
 *
 * Update an existing seller's address, identified by sellerId and addressId.
 * Updates are only allowed to fields as per the shopping_mall_seller_addresses
 * Prisma model, which supports recipient_name, phone, region, postal_code,
 * address_line1, address_line2, type, and primary status. Input validation
 * enforces required fields and proper formatting of addresses (including region
 * and postal_code).
 *
 * Security is enforced such that updates are restricted to the seller who owns
 * the address or an admin with elevated privileges. Setting an address to
 * primary must not violate the unique constraint of only one primary address
 * per seller/type, and business logic must handle this atomically. Attempts to
 * update a non-existent address or without proper authorization result in
 * appropriate errors (e.g., 404 or 403).
 *
 * This operation is typically used in seller profile management or during
 * admin-corrective actions for compliance and logistics updates. It is
 * recommended to retrieve the latest address state before attempting an update
 * to prevent lost updates due to concurrent changes or outdated client data.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller who owns the address
 * @param props.addressId Unique identifier of the seller's address to update
 * @param props.body Data for updating a seller's address. Must follow
 *   IShoppingMallSellerAddress.IUpdate DTO schema.
 * @path /shoppingMall/admin/sellers/:sellerId/addresses/:addressId
 * @accessor api.functional.shoppingMall.admin.sellers.addresses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller who owns the address */
    sellerId: string & tags.Format<"uuid">;

    /** Unique identifier of the seller's address to update */
    addressId: string & tags.Format<"uuid">;

    /**
     * Data for updating a seller's address. Must follow
     * IShoppingMallSellerAddress.IUpdate DTO schema.
     */
    body: IShoppingMallSellerAddress.IUpdate;
  };
  export type Body = IShoppingMallSellerAddress.IUpdate;
  export type Response = IShoppingMallSellerAddress;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/sellers/:sellerId/addresses/:addressId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}/addresses/${encodeURIComponent(props.addressId ?? "null")}`;
  export const random = (): IShoppingMallSellerAddress =>
    typia.random<IShoppingMallSellerAddress>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.param("addressId")(() => typia.assert(props.addressId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
