import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderHistory } from "../../../../structures/IShoppingMallOrderHistory";
import { IPageIShoppingMallOrderHistory } from "../../../../structures/IPageIShoppingMallOrderHistory";

/**
 * Search, filter, and paginate order history snapshots for customer service and
 * auditing.
 *
 * Retrieve a paginated list of historical snapshots for orders across the
 * shopping mall platform, utilizing the shopping_mall_order_histories table.
 * This operation exposes advanced search and filtering capabilities for order
 * cancellation, refund, escalation, or compliance snapshot records, which
 * enable users and administrators to trace actions and reconstruct an order's
 * timeline.
 *
 * The endpoint supports query parameters to filter by snapshot type (such as
 * 'cancellation', 'refund', 'escalation', or 'appeal'), current or historical
 * order status, date range, and initiator. Customers will only be able to
 * access their own order histories, while sellers may view histories related to
 * their fulfillments, and admins may audit all records regardless of ownership.
 * Search results are presented in descending date order for transparency.
 *
 * Access is governed by role-based permissions, with customers restricted to
 * self-service, sellers to the orders they are responsible for, and admins
 * having full search/audit coverage. Results reflect the complete
 * audit/timepoint context for each service milestone as defined by the schema.
 *
 * @param props.connection
 * @param props.body Search/filtering criteria for retrieving order history
 *   snapshots, including snapshot type, order status, actor info, and
 *   pagination controls.
 * @path /shoppingMall/admin/orderHistories
 * @accessor api.functional.shoppingMall.admin.orderHistories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search/filtering criteria for retrieving order history snapshots,
     * including snapshot type, order status, actor info, and pagination
     * controls.
     */
    body: IShoppingMallOrderHistory.IRequest;
  };
  export type Body = IShoppingMallOrderHistory.IRequest;
  export type Response = IPageIShoppingMallOrderHistory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/orderHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/orderHistories";
  export const random = (): IPageIShoppingMallOrderHistory.ISummary =>
    typia.random<IPageIShoppingMallOrderHistory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific order history snapshot by its unique ID.
 *
 * Fetch the full detail for a single order history snapshot from the
 * shopping_mall_order_histories table, referenced by its unique orderHistoryId.
 * This endpoint is designed for scenarios where users, sellers, or
 * administrators need to review the exact state of an order at a service
 * milestoneâ€”such as a cancellation, refund, or appeal event.
 *
 * Upon providing the orderHistoryId, the operation returns all stored audit,
 * reason, and context information for that milestone, including total order
 * amount, status, and any business or compliance comments. This detail can
 * support customer self-service, seller dispute workflows, or admin legal
 * review. Access is strictly enforced based on role and ownership: customers
 * may retrieve only their own order events, sellers only for their
 * fulfillments, admins for any history entry. Error responses are provided if
 * the ID does not exist or access is denied.
 *
 * @param props.connection
 * @param props.orderHistoryId Unique identifier for the target order history
 *   snapshot to retrieve.
 * @path /shoppingMall/admin/orderHistories/:orderHistoryId
 * @accessor api.functional.shoppingMall.admin.orderHistories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target order history snapshot to retrieve. */
    orderHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderHistory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/orderHistories/:orderHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orderHistories/${encodeURIComponent(props.orderHistoryId ?? "null")}`;
  export const random = (): IShoppingMallOrderHistory =>
    typia.random<IShoppingMallOrderHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderHistoryId")(() => typia.assert(props.orderHistoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an order history record in shopping_mall_order_histories by
 * orderHistoryId (admin only).
 *
 * Update a specific order history record identified by orderHistoryId. The
 * operation enables admin users to correct or add additional information to
 * previously captured historical order snapshots. This API updates the
 * shopping_mall_order_histories table, which stores immutable snapshots of
 * order data. The update may include fields like snapshot_reason, order_total
 * adjustment, or corrections for compliance/audit purposes.
 *
 * Security considerations require exclusive admin access to this operation, as
 * these records are used for regulatory and audit reporting. An audit trail is
 * kept for every update, including the acting admin, changed fields, and
 * timestamp. Only fields that do not compromise the integrity of immutable
 * historical data may be updated. Attempts to update non-editable fields or
 * without sufficient permissions will result in an error response.
 *
 * Related APIs include endpoints for retrieving order histories, customer
 * service event logs, and escalations associated with orders. Error handling
 * includes conflict errors if another update has already occurred on the
 * snapshot, or if requested changes fail audit validation.
 *
 * @param props.connection
 * @param props.orderHistoryId The unique identifier of the order history record
 *   to update.
 * @param props.body Data to update for the specific order history record, using
 *   IShoppingMallOrderHistory.IUpdate structure.
 * @path /shoppingMall/admin/orderHistories/:orderHistoryId
 * @accessor api.functional.shoppingMall.admin.orderHistories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the order history record to update. */
    orderHistoryId: string & tags.Format<"uuid">;

    /**
     * Data to update for the specific order history record, using
     * IShoppingMallOrderHistory.IUpdate structure.
     */
    body: IShoppingMallOrderHistory.IUpdate;
  };
  export type Body = IShoppingMallOrderHistory.IUpdate;
  export type Response = IShoppingMallOrderHistory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/orderHistories/:orderHistoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orderHistories/${encodeURIComponent(props.orderHistoryId ?? "null")}`;
  export const random = (): IShoppingMallOrderHistory =>
    typia.random<IShoppingMallOrderHistory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderHistoryId")(() => typia.assert(props.orderHistoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
