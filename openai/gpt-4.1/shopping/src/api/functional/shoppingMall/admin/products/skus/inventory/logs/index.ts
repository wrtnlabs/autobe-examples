import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInventoryLog } from "../../../../../../../structures/IShoppingMallInventoryLog";
import { IPageIShoppingMallInventoryLog } from "../../../../../../../structures/IPageIShoppingMallInventoryLog";

/**
 * Search and paginate inventory adjustment logs for a product SKU
 * (shopping_mall_inventory_logs).
 *
 * Fetch a paginated, filterable, and sortable list of inventory adjustment logs
 * associated with a specific product SKU. This operation is essential for
 * sellers and admins to monitor, review, and audit inventory changes such as
 * manual increases, sales, cancellations, returns, system corrections,
 * blocking/unblocking, and other inventory state transitions.
 *
 * The API supports advanced filtering by date range, adjustment type (e.g.,
 * increase, decrease, block), actor (seller or admin), and related order
 * reference for comprehensive forensic and business reporting. Sellers can
 * access adjustment logs only for their own products/SKUs, while admins have
 * access to all logs platform-wide.
 *
 * Security enforcement ensures that sellers cannot access logs not associated
 * with their products. Pagination parameters enable scalable access to large
 * adjustment histories. All responses are derived directly from the
 * shopping_mall_inventory_logs table, which includes change metadata, actor
 * information, quantities changed, and business context. Errors include
 * unauthorized access, invalid SKU IDs, or malformed pagination/filter
 * requests.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the target product (UUID format)
 *   as referenced by shopping_mall_products.id.
 * @param props.skuId Unique identifier for the target product SKU (UUID format)
 *   as referenced by shopping_mall_product_skus.id.
 * @param props.body Filtering, search, and pagination parameters to retrieve
 *   relevant inventory adjustment logs for a SKU.
 * @path /shoppingMall/admin/products/:productId/skus/:skuId/inventory/logs
 * @accessor api.functional.shoppingMall.admin.products.skus.inventory.logs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the target product (UUID format) as referenced
     * by shopping_mall_products.id.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * Unique identifier for the target product SKU (UUID format) as
     * referenced by shopping_mall_product_skus.id.
     */
    skuId: string & tags.Format<"uuid">;

    /**
     * Filtering, search, and pagination parameters to retrieve relevant
     * inventory adjustment logs for a SKU.
     */
    body: IShoppingMallInventoryLog.IRequest;
  };
  export type Body = IShoppingMallInventoryLog.IRequest;
  export type Response = IPageIShoppingMallInventoryLog;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/products/:productId/skus/:skuId/inventory/logs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}/inventory/logs`;
  export const random = (): IPageIShoppingMallInventoryLog =>
    typia.random<IPageIShoppingMallInventoryLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
