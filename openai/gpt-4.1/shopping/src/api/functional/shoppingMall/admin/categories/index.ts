import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCategory } from "../../../../structures/IShoppingMallCategory";

/**
 * Create a new product category in the shoppingMall_categories table.
 *
 * This operation allows an admin user to create a new category under the
 * shopping_mall_categories table. Creation requires specifying category names
 * in Korean and English, both of which must be unique within the assigned
 * parent. The description fields are optional, enabling richer category context
 * for navigation and search UI.
 *
 * The parent_id is used for building the category hierarchy, supporting
 * unlimited levels (root categories have a null parent_id). Display_order
 * enables precise control of sibling ordering. The is_active boolean controls
 * if this category (and its children) are visible throughout the storefront and
 * search.
 *
 * All changes propagate as cache invalidation events system-wide for catalog
 * and navigation. Category creation is allowed only to admin-role users to
 * prevent arbitrary structure changes by external actors. Validation rejects
 * missing mandatory fields, duplicate names, or invalid parent references.
 * Error details will indicate the cause (e.g., duplicate name or parent not
 * found).
 *
 * This endpoint is strictly for administrative product catalog management and
 * is not accessible by sellers or customers directly.
 *
 * @param props.connection
 * @param props.body Category creation details including names, descriptions,
 *   parent assignment, display order, and status.
 * @path /shoppingMall/admin/categories
 * @accessor api.functional.shoppingMall.admin.categories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Category creation details including names, descriptions, parent
     * assignment, display order, and status.
     */
    body: IShoppingMallCategory.ICreate;
  };
  export type Body = IShoppingMallCategory.ICreate;
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/categories";
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product category by categoryId in the
 * shoppingMall_categories table.
 *
 * This operation lets an admin update any editable field of a category
 * identified by categoryId in the shopping_mall_categories table. Updatable
 * properties include name_ko, name_en, description_ko, description_en,
 * parent_id (for moving category in hierarchy), display_order, and is_active.
 * Unique constraints remain enforced per parent node for both names.
 *
 * The operation supports re-parenting categories (moving to different parent),
 * updating display order for navigation purposes, bulk enabling/disabling, and
 * adjusting multilingual metadata for SEO or branding reasons. Inactivation is
 * recursiveâ€”making a category inactive also inactivates all its children,
 * making associated products undiscoverable to end users.
 *
 * Only admin users can perform this operation to keep catalog structure
 * consistent and prevent accidental disruption. Error responses specify
 * reasons, such as duplicate name, invalid parent assignment (e.g., loop), or
 * constraint violation. On success, the response returns the full updated
 * record.
 *
 * @param props.connection
 * @param props.categoryId The UUID of the category to update.
 * @param props.body Category update information: new names, descriptions,
 *   parent, order, or status.
 * @path /shoppingMall/admin/categories/:categoryId
 * @accessor api.functional.shoppingMall.admin.categories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The UUID of the category to update. */
    categoryId: string & tags.Format<"uuid">;

    /**
     * Category update information: new names, descriptions, parent, order,
     * or status.
     */
    body: IShoppingMallCategory.IUpdate;
  };
  export type Body = IShoppingMallCategory.IUpdate;
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/categories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a product category (admin only) from the
 * 'shopping_mall_categories' table.
 *
 * This API endpoint allows an administrator to delete a product category from
 * the shopping mall's catalog, as defined in the 'shopping_mall_categories'
 * table of the Prisma schema. When invoked, the operation first checks if the
 * target category has any active child categories or associated products. If
 * so, deletion is blocked and a meaningful error is returned, instructing the
 * user to reassign or remove dependent objects before retrying.
 *
 * The deletion is implemented as a soft delete by setting the 'deleted_at'
 * timestamp, ensuring compliance with audit and recovery policies. All
 * soft-deleted categories are hidden from normal user and seller queries but
 * remain in the database for compliance, reporting, or potential restoration by
 * admins. Child categories and related product assignments may also be affected
 * based on cascading rules. This operation is strictly restricted to
 * administrators, reflecting the elevated privilege required for catalog
 * structure changes.
 *
 * Validation guards against accidental or malicious removal of critical
 * categories, and the operation logs a full audit record including the acting
 * admin and affected entity. Related endpoints include category creation,
 * update, and recovery/restoration APIs, which together maintain catalog
 * integrity across the platform.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier (UUID) of the target category to be
 *   deleted.
 * @path /shoppingMall/admin/categories/:categoryId
 * @accessor api.functional.shoppingMall.admin.categories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the target category to be deleted. */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
