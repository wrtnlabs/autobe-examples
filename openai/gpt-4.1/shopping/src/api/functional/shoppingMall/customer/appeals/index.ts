import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAppeal } from "../../../../structures/IShoppingMallAppeal";

/**
 * Retrieve detailed information of a specific appeal by ID from
 * shopping_mall_appeals table.
 *
 * Retrieve detailed information about a specific customer or seller appeal
 * based on the provided appeal ID. This operation returns all relevant fields
 * of the appeal record as defined in the 'shopping_mall_appeals' schema,
 * including appellant identity, escalation reference, appeal type, status,
 * assigned reviewers, and resolution details.
 *
 * Security: The endpoint enforces role-based access—customers and sellers see
 * only their own appeals and admins have full platform-wide access. Sensitive
 * data is filtered out for roles without scope. Logging is performed for all
 * read access for audit purposes.
 *
 * Business logic ensures only appeals that have not been soft deleted
 * (deleted_at is null) are returned. Attempts to access non-existent or
 * unauthorized appeal IDs return a 404 or 403 error as appropriate.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal to retrieve information
 *   for.
 * @path /shoppingMall/customer/appeals/:appealId
 * @accessor api.functional.shoppingMall.customer.appeals.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the appeal to retrieve information for. */
    appealId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAppeal;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IShoppingMallAppeal =>
    typia.random<IShoppingMallAppeal>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new appeal record for customer service on the shopping_mall_appeals
 * table.
 *
 * Create a new appeal entry in the system for an escalation that has occurred,
 * such as disagreement with an order cancellation or refund outcome. The
 * request must include all mandatory fields from the appeal creation DTO, which
 * maps to the 'shopping_mall_appeals' schema definition—referencing the
 * escalation, the appellant (customer or seller), appeal type and initial
 * status, and optionally admin reviewer if assigned.
 *
 * Validation ensures the referenced escalation exists and that the client
 * initiating the appeal is authorized to do so (i.e., tied to the escalation as
 * a customer or seller). Soft-deleted appeals or escalations cannot be used. On
 * successful creation, the API returns the full appeal record as confirmation.
 * Audit trails are updated to ensure actions are logged for compliance and
 * follow-up.
 *
 * @param props.connection
 * @param props.body Information required to file a new appeal, referencing
 *   escalation, actor, and reason.
 * @path /shoppingMall/customer/appeals
 * @accessor api.functional.shoppingMall.customer.appeals.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information required to file a new appeal, referencing escalation,
     * actor, and reason.
     */
    body: IShoppingMallAppeal.ICreate;
  };
  export type Body = IShoppingMallAppeal.ICreate;
  export type Response = IShoppingMallAppeal;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/appeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/appeals";
  export const random = (): IShoppingMallAppeal =>
    typia.random<IShoppingMallAppeal>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
