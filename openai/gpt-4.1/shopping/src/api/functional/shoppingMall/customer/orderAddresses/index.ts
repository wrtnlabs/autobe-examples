import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderAddress } from "../../../../structures/IShoppingMallOrderAddress";

/**
 * Retrieve detailed information for a specific historical order address
 * (shopping_mall_order_addresses).
 *
 * This API operation provides a detailed, read-only view of a single order
 * address snapshot by its ID. The order address table is not user-editable and
 * only contains historical information captured at the time of an order's
 * creation, ensuring audit integrity and accurate fulfillment tracking.
 *
 * Address data includes all fields required for postal, shipping, and
 * compliance workflows—recipient, phone, postal code, address fields (split
 * main/detail), region, country code, and the creation timestamp. Users cannot
 * modify or delete these records for data consistency and legal compliance;
 * only admins may access them depending on platform policy.
 *
 * The operation enforces access such that customers may only view their own
 * orders’ addresses, while admins have platform-wide access. If the specified
 * ID is not found or the user is unauthorized to view it, an appropriate error
 * is returned. This API does not expose linked order or customer identifiers in
 * the response for privacy reasons.
 *
 * This endpoint is most frequently used for user-facing order details screens,
 * audit logs, refunds, cancellations, and admin investigations.
 *
 * @param props.connection
 * @param props.orderAddressId Unique identifier (UUID) for the order address
 *   snapshot to retrieve.
 * @path /shoppingMall/customer/orderAddresses/:orderAddressId
 * @accessor api.functional.shoppingMall.customer.orderAddresses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) for the order address snapshot to retrieve. */
    orderAddressId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderAddress;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orderAddresses/:orderAddressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orderAddresses/${encodeURIComponent(props.orderAddressId ?? "null")}`;
  export const random = (): IShoppingMallOrderAddress =>
    typia.random<IShoppingMallOrderAddress>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderAddressId")(() => typia.assert(props.orderAddressId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Record a new immutable order address snapshot during order placement
 * (shopping_mall_order_addresses).
 *
 * This operation records a new immutable order address snapshot as part of the
 * order placement or checkout workflow. It accepts all required address
 * fields—recipient name, phone, postal code, address lines, detail, country
 * code, and address type—and saves them as a point-in-time record tied to the
 * specific order being placed.
 *
 * Order address snapshots guarantee that fulfillment, support, and audit
 * processes operate on the address as it was given at purchase, regardless of
 * subsequent customer changes to their stored addresses. This separation from
 * the customer address book is critical for compliance, legal records, and
 * reliability in shipping, returns, or dispute resolution.
 *
 * The API is intended for internal service use rather than direct end-user
 * submission; typically, platform systems or order placement flows will invoke
 * this endpoint. Requests are validated for completeness, with missing or
 * malformed fields producing clear errors. Once created, the order address
 * record is immutable and linked to the relevant order record. Only
 * authenticated customers placing an order may call this API.
 *
 * @param props.connection
 * @param props.body Complete set of address attributes, as of order placement,
 *   to record as a historical snapshot for the order.
 * @path /shoppingMall/customer/orderAddresses
 * @accessor api.functional.shoppingMall.customer.orderAddresses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Complete set of address attributes, as of order placement, to record
     * as a historical snapshot for the order.
     */
    body: IShoppingMallOrderAddress.ICreate;
  };
  export type Body = IShoppingMallOrderAddress.ICreate;
  export type Response = IShoppingMallOrderAddress;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orderAddresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/orderAddresses";
  export const random = (): IShoppingMallOrderAddress =>
    typia.random<IShoppingMallOrderAddress>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
