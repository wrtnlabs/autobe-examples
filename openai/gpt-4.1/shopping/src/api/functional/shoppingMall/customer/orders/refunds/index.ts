import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderRefund } from "../../../../../structures/IShoppingMallOrderRefund";

/**
 * Retrieve the details for a specific refund event related to an order
 * (shopping_mall_order_refunds table).
 *
 * Retrieve complete details for a specific refund event associated with a
 * particular order. This API operates directly on the
 * shopping_mall_order_refunds table, ensuring traceability of refund requests,
 * status changes, refunds resolved, initiator identity, payment linkage, and
 * timeline data.
 *
 * This operation enforces access control such that only the refund owner
 * (customer) or administrators may view sensitive refund and payment data.
 * Unauthorized attempts are denied and logged. The response includes refund
 * status (pending, approved, denied, completed), date/time fields, refund
 * amounts, business reason code, actors, attached explanation, and any
 * settlement or failure timestamps. Data is immutable for audit compliance and
 * used for customer service reviews or appeals workflows.
 *
 * The customer may use this operation through their order history or customer
 * service portal to review the refund progress, resolution, or denial
 * explanation. Admins use it to audit refund handling and improve platform
 * transparency and trust. The refundId parameter must correspond to an existing
 * refund event for the specified orderId; otherwise, enforced error handling
 * returns a 404 or role-based error response.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order for which the
 *   refund event belongs (UUID).
 * @param props.refundId Unique identifier of the refund event to be retrieved
 *   (UUID).
 * @path /shoppingMall/customer/orders/:orderId/refunds/:refundId
 * @accessor api.functional.shoppingMall.customer.orders.refunds.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the target order for which the refund event
     * belongs (UUID).
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the refund event to be retrieved (UUID). */
    refundId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderRefund;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/refunds/:refundId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): IShoppingMallOrderRefund =>
    typia.random<IShoppingMallOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Request a refund for a customer order (shopping_mall_order_refunds).
 *
 * Initiates a refund request for a specific order by the customer. This
 * operation uses the shopping_mall_order_refunds table to log the requested
 * refund, including a reason code, status (such as pending, approved, denied,
 * etc.), and refund amount. The system validates the order and payment state
 * before permitting the refund to be processed. Customers must provide a valid
 * explanation for the refund as well as any required documentation. Upon
 * submission, the request status is set to pending and notifications are sent
 * to sellers and relevant admins for further review and action.
 *
 * Security is enforced by confirming that the requester is the actual order
 * owner, and that refund eligibility matches both platform and seller policy.
 * Sensitive data is restricted and only exposed to authorized parties during
 * refund processing.
 *
 * All business logic, including audit logging, partial versus full refunds, and
 * special handling for failed payment provider scenarios, is implemented by the
 * provider layer. If the refund is denied, the customer will be notified with a
 * clear error message and recovery path. This operation supports compliance
 * requirements for traceability and data retention for at least 5 years.
 *
 * See also: Approving or denying pending refunds via PUT on
 * /orders/{orderId}/refunds/{refundId}.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order for which the
 *   refund is being requested
 * @param props.body Refund request details, including reason code, refund
 *   amount, and supporting documentation (if applicable).
 * @path /shoppingMall/customer/orders/:orderId/refunds
 * @accessor api.functional.shoppingMall.customer.orders.refunds.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the target order for which the refund is being
     * requested
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Refund request details, including reason code, refund amount, and
     * supporting documentation (if applicable).
     */
    body: IShoppingMallOrderRefund.ICreate;
  };
  export type Body = IShoppingMallOrderRefund.ICreate;
  export type Response = IShoppingMallOrderRefund;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orders/:orderId/refunds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds`;
  export const random = (): IShoppingMallOrderRefund =>
    typia.random<IShoppingMallOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
