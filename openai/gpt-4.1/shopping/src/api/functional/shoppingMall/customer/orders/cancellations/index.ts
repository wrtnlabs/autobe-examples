import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderCancellation } from "../../../../../structures/IShoppingMallOrderCancellation";
import { IPageIShoppingMallOrderCancellation } from "../../../../../structures/IPageIShoppingMallOrderCancellation";

/**
 * Retrieve a paginated list of cancellations related to a specific shopping
 * mall order from shopping_mall_order_cancellations.
 *
 * This API operation allows users to view a complete, filtered, and paginated
 * timeline of all cancellation requests associated with a single order.
 * Detailed information is provided for each cancellation, including status
 * (pending, approved, denied, etc.), reason code, requesting actor (customer,
 * seller, admin), timestamps, and any supporting explanations or audit logs.
 *
 * Security is enforced so that customers can only view cancellations for their
 * own orders, sellers for their order fulfillments, and admins have global
 * access. This endpoint is useful for customers to track the status of their
 * cancellation or refund requests, for sellers to process pending actions or
 * provide responses, and for admins as part of audit and oversight tasks.
 *
 * Input validation supports complex querying, such as filtering by status, date
 * range, initiator, or resolution outcome, with appropriate error handling for
 * unauthorized access or missing order records. Pagination ensures efficient
 * handling even for orders with extensive cancellation histories. Use this
 * endpoint in combination with detailed cancellation/approval endpoints for
 * full customer service workflows.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order whose
 *   cancellations will be queried.
 * @param props.body Request parameters for filtering, searching, and paginating
 *   cancellations for the target order.
 * @path /shoppingMall/customer/orders/:orderId/cancellations
 * @accessor api.functional.shoppingMall.customer.orders.cancellations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the target order whose cancellations will be
     * queried.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Request parameters for filtering, searching, and paginating
     * cancellations for the target order.
     */
    body: IShoppingMallOrderCancellation.IRequest;
  };
  export type Body = IShoppingMallOrderCancellation.IRequest;
  export type Response = IPageIShoppingMallOrderCancellation;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/orders/:orderId/cancellations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellations`;
  export const random = (): IPageIShoppingMallOrderCancellation =>
    typia.random<IPageIShoppingMallOrderCancellation>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific order cancellation record by ID from
 * shopping_mall_order_cancellations table.
 *
 * Retrieve detailed information about a specific order cancellation by its
 * unique identifier. This endpoint can be used by customers to review their own
 * cancellation requests, by sellers to monitor and handle cancellations related
 * to their products, and by administrators to audit and troubleshoot
 * cancellation cases system-wide.
 *
 * Security and permissions are enforced according to user role and cancellation
 * ownership: customers can only access their own order cancellations, sellers
 * can access cancellations for their own orders, and admins have unrestricted
 * access. Data is returned from the 'shopping_mall_order_cancellations' table,
 * and includes cancellation reason codes, status (pending, approved, denied,
 * completed, etc.), explanation text, involved actors (customer/seller/admin),
 * and all related timestamps.
 *
 * Any business logic or validation issues (such as accessing a cancellation not
 * owned by the requesting user or non-existent order/cancellation IDs) are
 * handled with appropriate error responses referencing platform-wide error
 * handling conventions. Related APIs for listing, creating, or modifying
 * cancellations are available for workflow integration.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the order whose cancellation
 *   event is being retrieved.
 * @param props.cancellationId Unique identifier (UUID) of the specific
 *   cancellation event to retrieve.
 * @path /shoppingMall/customer/orders/:orderId/cancellations/:cancellationId
 * @accessor api.functional.shoppingMall.customer.orders.cancellations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier (UUID) of the order whose cancellation event is
     * being retrieved.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Unique identifier (UUID) of the specific cancellation event to
     * retrieve.
     */
    cancellationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderCancellation;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/cancellations/:cancellationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellations/${encodeURIComponent(props.cancellationId ?? "null")}`;
  export const random = (): IShoppingMallOrderCancellation =>
    typia.random<IShoppingMallOrderCancellation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("cancellationId")(() => typia.assert(props.cancellationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing order cancellation request for a specific order
 * (shopping_mall_order_cancellations).
 *
 * This operation permits the modification of an existing order cancellation
 * request. Typical use cases include updating the status (such as moving from
 * pending to approved or denied), editing the reason code, or
 * providing/altering the explanation text for audit and workflow clarity.
 *
 * Security is enforced to ensure only authorized actors (such as the original
 * requester, responsible seller, or platform admin) can modify the
 * cancellation, following business permission rules as defined in the
 * requirements analysis. This edit operation references the
 * shopping_mall_order_cancellations table, ensuring the integrity of the
 * cancellation history and supporting audit trails for regulatory compliance.
 *
 * The request body must follow IShoppingMallOrderCancellation.IUpdate.
 * Validation checks confirm that status transitions are logically valid (e.g.,
 * can't move from completed to pending), and unauthorized changes are blocked
 * according to user role. If a referenced order or cancellation does not exist,
 * or the action is not permitted by the actor, the API responds with
 * appropriate error messages and context.
 *
 * Related endpoints include GET/PATCH operations for retrieving order
 * cancellation status and POST requests for creating a new cancellation.
 *
 * @param props.connection
 * @param props.orderId Target order's unique ID whose cancellation request
 *   should be modified.
 * @param props.cancellationId Unique cancellation request ID within the
 *   specified order to update.
 * @param props.body Updated cancellation request details, including status,
 *   reason code, or explanation text.
 * @path /shoppingMall/customer/orders/:orderId/cancellations/:cancellationId
 * @accessor api.functional.shoppingMall.customer.orders.cancellations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Target order's unique ID whose cancellation request should be
     * modified.
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique cancellation request ID within the specified order to update. */
    cancellationId: string & tags.Format<"uuid">;

    /**
     * Updated cancellation request details, including status, reason code,
     * or explanation text.
     */
    body: IShoppingMallOrderCancellation.IUpdate;
  };
  export type Body = IShoppingMallOrderCancellation.IUpdate;
  export type Response = IShoppingMallOrderCancellation;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/orders/:orderId/cancellations/:cancellationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellations/${encodeURIComponent(props.cancellationId ?? "null")}`;
  export const random = (): IShoppingMallOrderCancellation =>
    typia.random<IShoppingMallOrderCancellation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("cancellationId")(() => typia.assert(props.cancellationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (logically remove) a cancellation request related to a specific
 * order (shopping_mall_order_cancellations).
 *
 * The API enables logical (soft) deletion of an order cancellation request,
 * marking the record with a deleted_at timestamp while retaining its existence
 * for compliance and audit. This operation ensures that cancellations can be
 * retracted or administratively removed when justified, in line with permission
 * constraints defined by role and business process.
 *
 * Only the actor who created the cancellation, a seller involved in the order,
 * or an admin can delete the cancellation, and only if business rules (such as
 * not already approved/denied/finalized) allow it. The operation references the
 * shopping_mall_order_cancellations table and enforces status checks to avoid
 * removing completed or irreversibly processed records. Unauthorized or invalid
 * deletions result in error responses detailing the cause, ensuring
 * traceability for all actions.
 *
 * This endpoint is related to POST and PUT operations on cancellations, as well
 * as GET endpoints for retrieving cancellation data. The logical delete aligns
 * with the underlying schema's use of deleted_at.
 *
 * @param props.connection
 * @param props.orderId ID of the order whose cancellation request should be
 *   deleted.
 * @param props.cancellationId Unique cancellation ID to logically remove.
 * @path /shoppingMall/customer/orders/:orderId/cancellations/:cancellationId
 * @accessor api.functional.shoppingMall.customer.orders.cancellations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the order whose cancellation request should be deleted. */
    orderId: string & tags.Format<"uuid">;

    /** Unique cancellation ID to logically remove. */
    cancellationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/orders/:orderId/cancellations/:cancellationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellations/${encodeURIComponent(props.cancellationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("cancellationId")(() => typia.assert(props.cancellationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
