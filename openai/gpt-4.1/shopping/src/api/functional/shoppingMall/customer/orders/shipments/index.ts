import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderShipment } from "../../../../../structures/IShoppingMallOrderShipment";
import { IPageIShoppingMallOrderShipment } from "../../../../../structures/IPageIShoppingMallOrderShipment";

/**
 * Retrieve all shipment status records for a specific order
 * (shopping_mall_order_shipments table).
 *
 * Retrieve a paginated, filterable list of all shipment records for a specified
 * order. Each record includes carrier, tracking number, shipping status,
 * shipment number, timestamps (dispatched, delivered, etc.), and remarks. This
 * operation is mapped to the shopping_mall_order_shipments table and supports
 * both simple and split-shipment order models (including multiple sellers). The
 * API allows users to check real-time shipment status updates and may integrate
 * with third-party carrier APIs for latest tracking data.
 *
 * Authorization and data visibility rules are strictly enforced: customers may
 * query only their own orders, sellers get access to shipments involving their
 * products, and admins access all shipments. The request may include advanced
 * filtering (e.g., by shipment status), pagination, and sorting (default: by
 * creation date descending).
 *
 * Error cases (such as unauthorized, not found, or order without shipments) are
 * surfaced with clear, actionable messages. This endpoint should be used in
 * concert with order listing, fulfillment, and order detail APIs for a complete
 * fulfillment tracking workflow.
 *
 * @param props.connection
 * @param props.orderId Order ID for which all shipment records should be
 *   listed.
 * @param props.body Filtering and pagination options for shipment status
 *   retrieval (optional).
 * @path /shoppingMall/customer/orders/:orderId/shipments
 * @accessor api.functional.shoppingMall.customer.orders.shipments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order ID for which all shipment records should be listed. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Filtering and pagination options for shipment status retrieval
     * (optional).
     */
    body: IShoppingMallOrderShipment.IRequest;
  };
  export type Body = IShoppingMallOrderShipment.IRequest;
  export type Response = IPageIShoppingMallOrderShipment;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/orders/:orderId/shipments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments`;
  export const random = (): IPageIShoppingMallOrderShipment =>
    typia.random<IPageIShoppingMallOrderShipment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific order shipment
 * (shopping_mall_order_shipments).
 *
 * Retrieve a specific shipment's tracking and delivery status within an order.
 * This operation allows customers to view the carrier, tracking number, and
 * current status (pending, shipped, in transit, out for delivery, delivered,
 * returned, cancelled, etc.) for any shipment that is part of their placed
 * order.
 *
 * Sellers use this endpoint to verify which shipments have been dispatched, in
 * progress, or completed. For multi-seller or split-shipment orders, this
 * enables visibility into each parcel's progress and any relevant remarks or
 * failures.
 *
 * Admins may use this operation for support, troubleshooting, and compliance
 * checkingâ€”especially when reviewing issues such as failed delivery, returns,
 * or customer escalations. Access to shipment detail is role-restricted:
 * customers may view only their own orders, sellers only shipments of their
 * products, and admins have visibility over all records. Security checks based
 * on order and user relationships are implemented in business logic.
 *
 * All returned data is aligned with the shopping_mall_order_shipments schema,
 * including carrier, tracking_number, status, timestamps, and remarks.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order containing the
 *   shipment
 * @param props.shipmentId Unique identifier of the shipment within the
 *   specified order
 * @path /shoppingMall/customer/orders/:orderId/shipments/:shipmentId
 * @accessor api.functional.shoppingMall.customer.orders.shipments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target order containing the shipment */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the shipment within the specified order */
    shipmentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderShipment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/shipments/:shipmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): IShoppingMallOrderShipment =>
    typia.random<IShoppingMallOrderShipment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
