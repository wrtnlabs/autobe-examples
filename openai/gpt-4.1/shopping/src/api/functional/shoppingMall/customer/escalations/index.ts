import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallEscalation } from "../../../../structures/IShoppingMallEscalation";

/**
 * Create a new escalation case for an order issue (shopping_mall_escalations).
 *
 * Create a new escalation record in the system when a customer or seller cannot
 * resolve an order issue through normal self-service mechanisms. Escalations
 * are generally opened in cases of disputes, unusual refunds, shipping
 * failures, miscommunication, or system errors that need admin involvement.
 *
 * Security and permissions ensure only customers (for their own orders) and
 * sellers (for their own sales) may use this endpoint. All required
 * information—including the order reference, initiator, escalation type, and
 * description—must be included in the request. Upon submission, the escalation
 * is set to a default status, typically 'pending', and assigned for further
 * admin review.
 *
 * This operation interacts with the shopping_mall_escalations entity in the DB,
 * referencing the related order and the respective initiator, with status and
 * timestamps managed as per audit/compliance requirements. Validation includes
 * confirming order ownership and ensuring no duplicate unresolved escalation
 * for the same order and type. Errors may be returned if business rules are
 * violated (such as attempts to escalate ineligible orders, or missing required
 * justification).
 *
 * Related endpoints include those for updating the escalation status, querying
 * escalations for customer/admin dashboards, and linking escalations to
 * customer service events or appeals.
 *
 * @param props.connection
 * @param props.body Escalation creation details, including the related order,
 *   initiator information, escalation type, and optional descriptive context.
 * @path /shoppingMall/customer/escalations
 * @accessor api.functional.shoppingMall.customer.escalations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Escalation creation details, including the related order, initiator
     * information, escalation type, and optional descriptive context.
     */
    body: IShoppingMallEscalation.ICreate;
  };
  export type Body = IShoppingMallEscalation.ICreate;
  export type Response = IShoppingMallEscalation;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/escalations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/escalations";
  export const random = (): IShoppingMallEscalation =>
    typia.random<IShoppingMallEscalation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing escalation case (shopping_mall_escalations) by ID.
 *
 * Update the properties of an existing escalation record, such as its status,
 * escalation type, or resolution outcomes. Only authorized users—such as the
 * initiator (customer or seller) or an assigned admin—may perform updates to an
 * escalation. Typical updates include status transitions (e.g., 'in-review',
 * 'resolved', 'closed'), adding or updating comments, or assigning the case to
 * a specific admin.
 *
 * The endpoint strictly checks access permissions: customers can only update
 * their own escalations, sellers for their orders, and admins for any case.
 * Updates are tracked with audit logs, including who made the change, the prior
 * and new status, and timestamps for compliance and traceability. Validation
 * ensures status transitions are legal (e.g., cannot resolve a closed case,
 * must provide a resolution reason when closing, etc.) and that escalation
 * content remains consistent with business rules.
 *
 * This operation interacts with the shopping_mall_escalations record identified
 * by escalationId. Potential errors are returned on unauthorized updates,
 * invalid status transitions, or missing required fields in the update request.
 * Related flows include dashboard visibility of escalation status for
 * customers, sellers, and admins; customer service event tracking; and
 * downstream effects such as notifications or associated appeals.
 *
 * @param props.connection
 * @param props.escalationId Unique identifier for the escalation to update.
 * @param props.body Updated escalation fields, such as status change,
 *   assignment, resolution, or commentary.
 * @path /shoppingMall/customer/escalations/:escalationId
 * @accessor api.functional.shoppingMall.customer.escalations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the escalation to update. */
    escalationId: string & tags.Format<"uuid">;

    /**
     * Updated escalation fields, such as status change, assignment,
     * resolution, or commentary.
     */
    body: IShoppingMallEscalation.IUpdate;
  };
  export type Body = IShoppingMallEscalation.IUpdate;
  export type Response = IShoppingMallEscalation;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/escalations/:escalationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/escalations/${encodeURIComponent(props.escalationId ?? "null")}`;
  export const random = (): IShoppingMallEscalation =>
    typia.random<IShoppingMallEscalation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("escalationId")(() => typia.assert(props.escalationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
