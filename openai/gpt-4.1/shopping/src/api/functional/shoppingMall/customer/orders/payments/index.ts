import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderPayment } from "../../../../../structures/IShoppingMallOrderPayment";
import { IPageIShoppingMallOrderPayment } from "../../../../../structures/IPageIShoppingMallOrderPayment";

/**
 * Initiate payment for an order based on its unique ID (shopping_mall_orders).
 *
 * Initiates a payment process for an existing order by its unique identifier.
 * This operation is restricted to authenticated customers who own the order,
 * ensuring secure business logic enforcement as described in the requirements
 * and supported by the Prisma schema's shopping_mall_orders and
 * shopping_mall_order_payments tables.
 *
 * Upon a valid request, the system will validate the order status (e.g., should
 * be pending or awaiting payment), confirm that the selected payment method is
 * currently enabled, and that the payment amount matches the order's total. If
 * any validation or business logic fails (e.g., order not found, already paid,
 * insufficient permissions), a clear error is returned and the payment is not
 * processed.
 *
 * The request body must include payment method details and
 * payment-type-specific information (e.g., card, bank transfer, third-party
 * provider). The response provides confirmation of the payment's initiation,
 * the resulting payment status, any pending clarifications, and all
 * audit-relevant details for downstream order processing and user notification
 * flows.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the target order.
 * @param props.body Payment method details and required payment information for
 *   initiating the payment on the specific order.
 * @path /shoppingMall/customer/orders/:orderId/payments
 * @accessor api.functional.shoppingMall.customer.orders.payments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier for the target order. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Payment method details and required payment information for
     * initiating the payment on the specific order.
     */
    body: IShoppingMallOrderPayment.ICreate;
  };
  export type Body = IShoppingMallOrderPayment.ICreate;
  export type Response = IShoppingMallOrderPayment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IShoppingMallOrderPayment =>
    typia.random<IShoppingMallOrderPayment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated, filtered list of payments for a specific order from
 * shopping_mall_order_payments.
 *
 * Retrieve a filtered, paginated list of payment records associated with a
 * given order, using advanced query parameters such as payment status, type, or
 * date range to support customer, seller, and admin review of order payment
 * events.
 *
 * This operation integrates with the shopping_mall_order_payments table and
 * supports use cases including payment troubleshooting, history review, and
 * audit requirements for both customers and platform staff. It incorporates
 * security checks, ensuring only permitted users may view payment data for a
 * given order.
 *
 * Pagination and search parameters are defined in the request body to allow
 * flexible front-end filtering. The operation is tightly coupled with the
 * Orders, Payments, and User authentication flows, and any errors (such as
 * order not found, unauthorized, or malformed query) provide actionable
 * responses.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the target order whose payment
 *   records are to be retrieved.
 * @param props.body Filter and pagination criteria for retrieving payment
 *   records of a specific order.
 * @path /shoppingMall/customer/orders/:orderId/payments
 * @accessor api.functional.shoppingMall.customer.orders.payments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the target order whose payment records are to
     * be retrieved.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Filter and pagination criteria for retrieving payment records of a
     * specific order.
     */
    body: IShoppingMallOrderPayment.IRequest;
  };
  export type Body = IShoppingMallOrderPayment.IRequest;
  export type Response = IPageIShoppingMallOrderPayment;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IPageIShoppingMallOrderPayment =>
    typia.random<IPageIShoppingMallOrderPayment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detail for a specific order payment from shopping_mall_order_payments.
 *
 * Retrieve the details of a single payment associated with a specific order.
 * This endpoint returns information such as the payment provider reference,
 * transaction status, amount, timestamps, payment type, and any available
 * status details for compliance or issue resolution.
 *
 * Security considerations ensure the authenticated customer, seller, or admin
 * may only access payment information related to orders they are authorized to
 * view. Errors such as payment not found, order mismatch, or lack of permission
 * are gracefully handled with actionable error responses.
 *
 * This endpoint is critical for user-facing payment status pages, order
 * administration, and support flows, and it interacts closely with payment
 * gateway reconciliation, order management, and audit logging subsystems.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the target order.
 * @param props.paymentId Unique identifier for the payment record within the
 *   order.
 * @path /shoppingMall/customer/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.customer.orders.payments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier for the payment record within the order. */
    paymentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderPayment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallOrderPayment =>
    typia.random<IShoppingMallOrderPayment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing payment record for a specific order
 * (shopping_mall_order_payments).
 *
 * Updates a specific payment attempt for an order, identified by both orderId
 * and paymentId. Customers can use this endpoint to retry a payment that failed
 * previously or to switch to a different payment method if permitted by
 * business rules. Admins may also use this for manual reconciliation in special
 * cases as part of platform management.
 *
 * The operation validates that the payment record belongs to the requesting
 * user and is in a modifiable state (e.g., pending, failed). Any changes to
 * payment method must conform to allowed payment types and cannot result in
 * fractional or overpaid totals. Successful update will advance payment toward
 * completion or retry as needed. Response includes full details of the updated
 * payment and status, and any associated audit trail required for compliance
 * and customer support.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the target order.
 * @param props.paymentId Unique identifier for the payment record to be
 *   updated.
 * @param props.body Updated payment details or retry/authorization information
 *   for the payment entry.
 * @path /shoppingMall/customer/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.customer.orders.payments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the target order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier for the payment record to be updated. */
    paymentId: string & tags.Format<"uuid">;

    /**
     * Updated payment details or retry/authorization information for the
     * payment entry.
     */
    body: IShoppingMallOrderPayment.IUpdate;
  };
  export type Body = IShoppingMallOrderPayment.IUpdate;
  export type Response = IShoppingMallOrderPayment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/orders/:orderId/payments/:paymentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallOrderPayment =>
    typia.random<IShoppingMallOrderPayment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
