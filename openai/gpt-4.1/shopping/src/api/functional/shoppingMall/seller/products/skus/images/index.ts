import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCatalogImage } from "../../../../../../structures/IShoppingMallCatalogImage";
import { IPageIShoppingMallCatalogImage } from "../../../../../../structures/IPageIShoppingMallCatalogImage";

/**
 * Upload and attach a new image to a product SKU
 * (shopping_mall_catalog_images).
 *
 * This API endpoint enables an authorized seller (owner of the product/SKU) or
 * an admin to create and attach a new image to a specific SKU variant of a
 * product. It references the shopping_mall_catalog_images table for image
 * metadata and assignment.
 *
 * The operation validates all input: the SKU and product must exist and be
 * associated, and the caller must have permission to manage catalog content for
 * the SKU. The request body follows the IShoppingMallCatalogImage.ICreate
 * schema, which specifies required fields such as the image URI (must be a
 * valid, previously uploaded asset), alt text (optional for accessibility), and
 * display order (for gallery sorting).
 *
 * Proper business logic checks must confirm seller authorization and enforce
 * catalog policies (e.g., maximum images per SKU, file-size/type restrictions
 * if applicable). The operation creates the new image record, linking it to the
 * SKU and, optionally, the product. Secure audit logging is recommended for
 * admin actions. Upon success, the full image record is returned, including
 * assigned imageId for future reference.
 *
 * Error handling covers permission validation (for sellers/admins), validation
 * of SKU/Product existence, image limit enforcement, and product-SKU
 * relationship checks.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the parent product
 * @param props.skuId Unique identifier of the target SKU (variant)
 * @param props.body Image information and association data for uploading a new
 *   SKU image
 * @path /shoppingMall/seller/products/:productId/skus/:skuId/images
 * @accessor api.functional.shoppingMall.seller.products.skus.images.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the parent product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the target SKU (variant) */
    skuId: string & tags.Format<"uuid">;

    /** Image information and association data for uploading a new SKU image */
    body: IShoppingMallCatalogImage.ICreate;
  };
  export type Body = IShoppingMallCatalogImage.ICreate;
  export type Response = IShoppingMallCatalogImage;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/products/:productId/skus/:skuId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}/images`;
  export const random = (): IShoppingMallCatalogImage =>
    typia.random<IShoppingMallCatalogImage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List images for a specific product SKU from shopping_mall_catalog_images,
 * supporting advanced filtering/sorting.
 *
 * This operation enables the retrieval and management of images associated with
 * a single product SKU for catalog, display, or moderation purposes. Primary
 * use cases include sellers needing to review all images attached to a variant
 * before updating, admins conducting review/moderation of SKU images, and
 * marketplace applications displaying images per SKU on variant selection
 * changes. The core business logic performs search with optional filters and
 * paginates results for efficient loading.
 *
 * Authorization ensures that only the SKU's owner (seller) or an administrator
 * may perform this operation, preventing unauthorized access to catalog assets.
 * The relationships to shopping_mall_product_skus and
 * shopping_mall_catalog_images are validated to ensure only images belonging to
 * the specified SKU are included in the response.
 *
 * Validation checks confirm that the SKU exists and belongs to the
 * authenticated seller (if a seller is accessing), and that images are actually
 * associated as children of the specified SKU. Users may request pagination or
 * use sorting/filtering parameters (e.g., by upload date, display order) for
 * more complex use cases. Expected responses include the image metadata and
 * URIs for client rendering or further product management. Related API
 * operations include POST for image upload and DELETE for image removal; these
 * should be documented together to provide a complete management lifecycle for
 * SKU images.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product whose SKU's images
 *   will be retrieved.
 * @param props.skuId Unique identifier of the SKU whose images will be listed.
 * @param props.body Request parameters for image list retrieval, including
 *   search and pagination options specific to the SKU context.
 * @path /shoppingMall/seller/products/:productId/skus/:skuId/images
 * @accessor api.functional.shoppingMall.seller.products.skus.images.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the product whose SKU's images will be
     * retrieved.
     */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the SKU whose images will be listed. */
    skuId: string & tags.Format<"uuid">;

    /**
     * Request parameters for image list retrieval, including search and
     * pagination options specific to the SKU context.
     */
    body: IShoppingMallCatalogImage.IRequest;
  };
  export type Body = IShoppingMallCatalogImage.IRequest;
  export type Response = IPageIShoppingMallCatalogImage;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/products/:productId/skus/:skuId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}/images`;
  export const random = (): IPageIShoppingMallCatalogImage =>
    typia.random<IPageIShoppingMallCatalogImage>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing SKU image for a product. (shopping_mall_catalog_images).
 *
 * This API enables sellers to update a specific image record associated with
 * one of their product SKUs by imageId. Users must provide the IDs for the
 * product, SKU, and image to ensure proper ownership and scoping. The update
 * can modify details such as the display order for galleries, alt text for
 * accessibility, or the CDN URL for the image itself.
 *
 * Authorization is strictly limited to the seller who owns the product/SKU or
 * administrative accounts. Attempts to update an image for SKUs/products the
 * user doesn't own will be denied with a clear error. Admins may use this
 * operation for moderation or compliance. All input data is checked to
 * guarantee type, length, and referential integrity. Upon successful update,
 * the updated image record is returned.
 *
 * This operation is necessary for catalog management, supporting seller
 * workflows for product presentation, and is designed to enforce platform
 * catalog standards. Related operations include image upload (creation),
 * deletion, and image reordering within a SKU's image list. Errors may occur if
 * imageId is not valid for the SKU/product or the user lacks sufficient
 * permissions.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product
 * @param props.skuId Unique identifier of the target SKU for the product
 * @param props.imageId Unique identifier of the image associated with the SKU
 * @param props.body Fields of the SKU image to update (e.g., url, alt text,
 *   display order)
 * @path /shoppingMall/seller/products/:productId/skus/:skuId/images/:imageId
 * @accessor api.functional.shoppingMall.seller.products.skus.images.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the target SKU for the product */
    skuId: string & tags.Format<"uuid">;

    /** Unique identifier of the image associated with the SKU */
    imageId: string & tags.Format<"uuid">;

    /**
     * Fields of the SKU image to update (e.g., url, alt text, display
     * order)
     */
    body: IShoppingMallCatalogImage.IUpdate;
  };
  export type Body = IShoppingMallCatalogImage.IUpdate;
  export type Response = IShoppingMallCatalogImage;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/products/:productId/skus/:skuId/images/:imageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): IShoppingMallCatalogImage =>
    typia.random<IShoppingMallCatalogImage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.param("imageId")(() => typia.assert(props.imageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a SKU image for a specific product (shopping_mall_catalog_images).
 *
 * This API allows authorized sellers to delete an existing image from a SKU
 * they own, identified by the unique productId, skuId, and imageId path
 * parameters. Deletion is enforced as a hard delete per the schema: the record
 * is removed from the shopping_mall_catalog_images table (soft delete applies
 * only if defined in schema; otherwise, actual deletion occurs), and any links
 * to the SKU/product are immediately severed.
 *
 * Access is strictly limited to the seller for the given product/SKU or admins.
 * Unauthorized delete attempts (wrong seller, non-existent image, or mismatched
 * SKU/product) yield clear error responses. All required IDs are validated to
 * ensure context and avoid orphan deletions. Audit logging is mandatory to
 * track which actor deleted the image.
 *
 * This operation should be used in seller catalog management and admin
 * moderation workflows, particularly when images become outdated, prohibited,
 * or in violation of platform guidelines. It is related to gallery/image
 * creation and update endpoints. Upon completion, the record will not be
 * recoverable unless soft delete is later implemented by schema design.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product
 * @param props.skuId Unique identifier of the target SKU for the product
 * @param props.imageId Unique identifier of the image associated with the SKU
 * @path /shoppingMall/seller/products/:productId/skus/:skuId/images/:imageId
 * @accessor api.functional.shoppingMall.seller.products.skus.images.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the target SKU for the product */
    skuId: string & tags.Format<"uuid">;

    /** Unique identifier of the image associated with the SKU */
    imageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/seller/products/:productId/skus/:skuId/images/:imageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.param("imageId")(() => typia.assert(props.imageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
