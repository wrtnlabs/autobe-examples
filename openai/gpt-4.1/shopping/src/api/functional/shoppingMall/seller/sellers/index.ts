import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSeller } from "../../../../structures/IShoppingMallSeller";
export * as addresses from "./addresses/index";

/**
 * Get complete seller account details by sellerId from shopping_mall_sellers
 * table.
 *
 * Retrieve comprehensive seller account details by seller ID from the
 * shopping_mall_sellers table. This operation supports both authenticated user
 * and admin use-cases, providing business-critical data such as contact
 * information, business entity, KYC status, and account history.
 *
 * Path parameter validation ensures that sellerId is a well-formed UUID and
 * corresponds to an existing, active, or approved seller. Full details
 * including KYC information, audit fields, and business registration numbers
 * are returned only to admin users or the account owner; all other users see
 * only public, non-sensitive fields for seller display purposes.
 *
 * This endpoint supports audit compliance by including all relevant fields for
 * administrative review. Role-based access control ensures marketplace
 * transparency while protecting sensitive or private data. Error handling
 * includes not-found responses for invalid IDs or disabled/suspended sellers,
 * and 403 errors if a user attempts to access another seller's confidential
 * information without proper permissions.
 *
 * For related operations, see seller account update (PUT /sellers/{sellerId})
 * for account changes, and authenticated order/product queries for cross-entity
 * validation and seller-product relationships.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the target seller (UUID)
 * @path /shoppingMall/seller/sellers/:sellerId
 * @accessor api.functional.shoppingMall.seller.sellers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target seller (UUID) */
    sellerId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/sellers/:sellerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update seller account information for sellerId in shopping_mall_sellers
 * table.
 *
 * Update a seller account record in the shopping_mall_sellers table, identified
 * by sellerId. Supports both self-service seller profile maintenance and
 * privileged admin updates for account management, KYC, or business
 * registration corrections.
 *
 * The request body schema IShoppingMallSeller.IUpdate requires all updatable
 * seller fields as defined in the Prisma schema. Input validation enforces
 * business logic such as unique email and registration number, correct phone
 * and URI formats, and restricted updates for status fields depending on role.
 * On successful validation and authorization, the record is updated and the
 * updated seller profile is returned as response.
 *
 * Admin actions are fully auditedâ€”updates to approval_status, KYC, or sensitive
 * attributes generate audit logs with admin identity and reason for
 * accountability. Sellers may update their own basic contact info and KYC
 * submissions but cannot self-approve, suspend, or delete their own accounts.
 * Role-based error handling is in place with descriptive error responses for
 * unauthorized or invalid data changes. For related workflows, see seller
 * registration and admin dashboard moderation tools.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller to update (UUID)
 * @param props.body All updatable seller account fields as per
 *   IShoppingMallSeller.IUpdate schema
 * @path /shoppingMall/seller/sellers/:sellerId
 * @accessor api.functional.shoppingMall.seller.sellers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller to update (UUID) */
    sellerId: string & tags.Format<"uuid">;

    /**
     * All updatable seller account fields as per
     * IShoppingMallSeller.IUpdate schema
     */
    body: IShoppingMallSeller.IUpdate;
  };
  export type Body = IShoppingMallSeller.IUpdate;
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/sellers/:sellerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
