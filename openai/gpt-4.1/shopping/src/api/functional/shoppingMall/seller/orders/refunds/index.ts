import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderRefund } from "../../../../../structures/IShoppingMallOrderRefund";

/**
 * Update (admin/seller) a refund request for an order
 * (shopping_mall_order_refunds).
 *
 * Updates a specific refund request associated with an order. This operation
 * supports status transitions (pending, approved, denied, completed, failed),
 * allows updating the resolution reason, and may permit modification of the
 * explanation or payout details depending on the business policy. The request
 * and refundId must reference an existing refund request for the specified
 * order. Only users with seller or admin rights over the order may execute
 * updates.
 *
 * The operation cross-checks refund eligibility and current status to prevent
 * invalid transitions, such as approving a refund that has already been denied
 * or completed. Security protocols verify that the updater has proper role
 * authorization, and business logic handles all state transition rules. Changes
 * are logged in the refund record for audit traces and customer visibility. If
 * a non-authorized user calls this API or sends an invalid update, the system
 * will reject the operation with an error message and preserve the previous
 * refund status. Data is retained to meet regulatory trace and business audit
 * requirements for financial events such as refunds.
 *
 * See also: Initiating a refund via POST on /orders/{orderId}/refunds.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order associated with this
 *   refund request
 * @param props.refundId Unique identifier of the refund request to be updated
 * @param props.body Details for the refund update, such as new status
 *   (approved, denied, completed), explanation for the action, and payout
 *   information if applicable.
 * @path /shoppingMall/seller/orders/:orderId/refunds/:refundId
 * @accessor api.functional.shoppingMall.seller.orders.refunds.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the order associated with this refund request */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the refund request to be updated */
    refundId: string & tags.Format<"uuid">;

    /**
     * Details for the refund update, such as new status (approved, denied,
     * completed), explanation for the action, and payout information if
     * applicable.
     */
    body: IShoppingMallOrderRefund.IUpdate;
  };
  export type Body = IShoppingMallOrderRefund.IUpdate;
  export type Response = IShoppingMallOrderRefund;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/orders/:orderId/refunds/:refundId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): IShoppingMallOrderRefund =>
    typia.random<IShoppingMallOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
