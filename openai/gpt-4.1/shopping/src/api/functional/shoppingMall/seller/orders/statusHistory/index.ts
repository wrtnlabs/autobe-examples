import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderStatusHistory } from "../../../../../structures/IShoppingMallOrderStatusHistory";
import { IPageIShoppingMallOrderStatusHistory } from "../../../../../structures/IPageIShoppingMallOrderStatusHistory";

/**
 * Get status and transition history for an order from the Orders table.
 *
 * Retrieve the complete list and timeline of status/history entries for a
 * specific order. This operation supports filtering by event type or date range
 * and provides detailed event metadata for each transition, including the actor
 * (customer, seller, admin), event type, previous and new status, explanation,
 * and timestamps.
 *
 * Access control ensures customers only view status history for their own
 * orders, sellers can audit their fulfilled orders, and admins access any order
 * for compliance. The response returns a paginated time-ordered list of history
 * entries associated with the referenced order ID from the Orders schema. Event
 * data is linked directly to order and optionally to actor rows in related
 * tables.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the order for which the
 *   status history is being retrieved.
 * @param props.body Status history search criteria: filters, pagination, event
 *   type, or date range for retrieval of order status history.
 * @path /shoppingMall/seller/orders/:orderId/statusHistory
 * @accessor api.functional.shoppingMall.seller.orders.statusHistory.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the order for which the status history is
     * being retrieved.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Status history search criteria: filters, pagination, event type, or
     * date range for retrieval of order status history.
     */
    body: IShoppingMallOrderStatusHistory.IRequest;
  };
  export type Body = IShoppingMallOrderStatusHistory.IRequest;
  export type Response = IPageIShoppingMallOrderStatusHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/orders/:orderId/statusHistory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/statusHistory`;
  export const random = (): IPageIShoppingMallOrderStatusHistory =>
    typia.random<IPageIShoppingMallOrderStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific order status history event from the OrderStatusHistory table.
 *
 * Retrieve the full information and audit details for a single order status
 * history event. The response includes which actor triggered the event, before
 * and after states, the type of status change, event messages, and the exact
 * timestamp. This information is crucial for customer service, seller support,
 * and administrative audit needs.
 *
 * Access is secured so that customers can view history events for their own
 * orders, sellers for their fulfilled orders, and admins for any order in the
 * system. Error handling covers cases where the specified order ID or
 * statusHistoryId does not exist, or the requesting actor lacks permission to
 * view the data.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the parent order for which
 *   the status history event is being requested.
 * @param props.statusHistoryId Unique identifier (UUID) of the status history
 *   record being retrieved for the specified order.
 * @path /shoppingMall/seller/orders/:orderId/statusHistory/:statusHistoryId
 * @accessor api.functional.shoppingMall.seller.orders.statusHistory.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier (UUID) of the parent order for which the status
     * history event is being requested.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Unique identifier (UUID) of the status history record being retrieved
     * for the specified order.
     */
    statusHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderStatusHistory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/orders/:orderId/statusHistory/:statusHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/statusHistory/${encodeURIComponent(props.statusHistoryId ?? "null")}`;
  export const random = (): IShoppingMallOrderStatusHistory =>
    typia.random<IShoppingMallOrderStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("statusHistoryId")(() =>
        typia.assert(props.statusHistoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
