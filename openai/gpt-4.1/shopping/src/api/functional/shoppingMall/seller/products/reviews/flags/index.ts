import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReviewFlag } from "../../../../../../structures/IShoppingMallReviewFlag";

/**
 * Flag a product review for moderation or abuse, associated with the
 * review_flags table.
 *
 * Use this endpoint when a platform participant (customer, seller, or admin)
 * wishes to report a product review for suspected abuse, spam, or policy
 * violation. The flag is recorded in the shopping_mall_review_flags table,
 * referencing the specific review and actor (derived from authentication
 * context). Multiple actors may flag the same review, but a single actor can
 * only have one open flag per review.
 *
 * Upon submission, the system validates the review exists and is active, and
 * checks for any existing unresolved flags by the same user. The API enforces
 * role-based authentication, ensures flags have a clear reason, and logs every
 * event for audit and moderation workflows. The review owner is not notified
 * directly, but admins and moderation tools receive notice of submitted flags
 * for processing. Related operations include update (modifying note/status),
 * and resolution (via admin action).
 *
 * Security considerations: Only authenticated users may flag reviews. Attempts
 * to flag non-existent or deleted reviews return clear error messages. All flag
 * actions are logged for moderation transparency.
 *
 * The specification references the shopping_mall_review_flags table in the
 * Prisma schema. Each flag record contains the review association, actor
 * details (customer, seller, or admin), the reason for flagging, a note field,
 * status (open/closed), and audit timestamps.
 *
 * @param props.connection
 * @param props.productId ID of the product that the review belongs to.
 * @param props.reviewId ID of the review being flagged.
 * @param props.body Flag creation details including reason for reporting and
 *   optional note.
 * @path /shoppingMall/seller/products/:productId/reviews/:reviewId/flags
 * @accessor api.functional.shoppingMall.seller.products.reviews.flags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the product that the review belongs to. */
    productId: string & tags.Format<"uuid">;

    /** ID of the review being flagged. */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Flag creation details including reason for reporting and optional
     * note.
     */
    body: IShoppingMallReviewFlag.ICreate;
  };
  export type Body = IShoppingMallReviewFlag.ICreate;
  export type Response = IShoppingMallReviewFlag;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/products/:productId/reviews/:reviewId/flags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags`;
  export const random = (): IShoppingMallReviewFlag =>
    typia.random<IShoppingMallReviewFlag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a review flag's note or moderation status by flagId, for compliance
 * and moderation workflows.
 *
 * This operation lets an authorized user (primarily admin, but also original
 * flagger) modify details of a product review flag, such as changing the note
 * or updating the workflow status (for example, to 'resolved' or 'rejected'
 * after moderation review). Each flag is uniquely identified by productId,
 * reviewId, and flagId.
 *
 * Security: Only the flag creator or platform moderators/admins can update a
 * flag's note or status. Attempts to update a non-existent or closed flag are
 * rejected with an appropriate error. Changes are always fully audited and
 * tracked for compliance.
 *
 * On successful update, the system logs the event, re-validates business rules
 * (e.g., status transition logic), and notifies relevant actors if escalation
 * is required. This endpoint references the shopping_mall_review_flags table in
 * the Prisma schema, where each flag includes actor, note, current status, and
 * audit fields.
 *
 * @param props.connection
 * @param props.productId ID of the product associated with the review and flag.
 * @param props.reviewId ID of the review being flagged.
 * @param props.flagId ID of the specific review flag to update.
 * @param props.body Fields to update: note text or status value.
 * @path /shoppingMall/seller/products/:productId/reviews/:reviewId/flags/:flagId
 * @accessor api.functional.shoppingMall.seller.products.reviews.flags.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the product associated with the review and flag. */
    productId: string & tags.Format<"uuid">;

    /** ID of the review being flagged. */
    reviewId: string & tags.Format<"uuid">;

    /** ID of the specific review flag to update. */
    flagId: string & tags.Format<"uuid">;

    /** Fields to update: note text or status value. */
    body: IShoppingMallReviewFlag.IUpdate;
  };
  export type Body = IShoppingMallReviewFlag.IUpdate;
  export type Response = IShoppingMallReviewFlag;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/products/:productId/reviews/:reviewId/flags/:flagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags/${encodeURIComponent(props.flagId ?? "null")}`;
  export const random = (): IShoppingMallReviewFlag =>
    typia.random<IShoppingMallReviewFlag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("flagId")(() => typia.assert(props.flagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
