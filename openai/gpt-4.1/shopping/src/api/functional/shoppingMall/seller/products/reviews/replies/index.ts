import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReviewReply } from "../../../../../../structures/IShoppingMallReviewReply";

/**
 * Create a new reply to a product review (by seller or admin) in
 * shopping_mall_review_replies table.
 *
 * This endpoint permits authorized sellers or admins to post a reply to a
 * customer review on their product. On submission, the reply is validated for
 * maximum body length, normative status values (public/hidden), and ownership
 * by the acting seller or admin. Only one reply per review per responder is
 * permitted, preventing duplicate entries as enforced by schema constraints.
 *
 * The operation requires the review being replied to exist for the specified
 * product, enforcing referential integrity and protecting against orphaned
 * reply records. If the acting user does not have permission to reply (e.g.,
 * not the seller/admin of the product), access is denied. The reply status
 * determines its initial visibility to usersâ€”'public' for customer-visible
 * replies, 'hidden' for internal/admin-only replies.
 *
 * Business logic includes notification triggers for the original review author
 * upon reply, and audit logging for moderation. Error handling provides
 * actionable error codes/messages for permission, validation, or referential
 * integrity failures.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product associated with the
 *   review.
 * @param props.reviewId Unique identifier of the review being replied to.
 * @param props.body Reply content and status for the new reply to a review.
 *   Body must satisfy length and content requirements. Status field controls
 *   reply visibility (public or hidden).
 * @path /shoppingMall/seller/products/:productId/reviews/:reviewId/replies
 * @accessor api.functional.shoppingMall.seller.products.reviews.replies.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the product associated with the review. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the review being replied to. */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Reply content and status for the new reply to a review. Body must
     * satisfy length and content requirements. Status field controls reply
     * visibility (public or hidden).
     */
    body: IShoppingMallReviewReply.ICreate;
  };
  export type Body = IShoppingMallReviewReply.ICreate;
  export type Response = IShoppingMallReviewReply;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/products/:productId/reviews/:reviewId/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/replies`;
  export const random = (): IShoppingMallReviewReply =>
    typia.random<IShoppingMallReviewReply>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a seller or admin's reply to a specific product review reply
 * (shopping_mall_review_replies table).
 *
 * This operation allows an authorized seller or admin to update their reply to
 * a specific product review. The reply is uniquely identified by the replyId
 * within the context of the given productId and reviewId path parameters, as
 * enforced by the Prisma schema shopping_mall_review_replies. The reply content
 * (body) and reply visibility status (public/hidden) must be validated: the
 * body cannot be empty or exceed business-configured maximum length. Status
 * transitions are subject to moderation logic per business rules in the reviews
 * and ratings module.
 *
 * Only the authoring seller or admin can update their own replies, and attempts
 * to edit others' replies will result in permission denial. The operation also
 * updates the updated_at timestamp and may trigger associated audit or
 * moderation events. Related audit logs or events are updated in subsystems as
 * described in the schema.
 *
 * Common errors include attempting to update a deleted reply, editing if not
 * the original author (based on authenticated identity), or submitting invalid
 * reply content. The typical workflow is for a seller or admin to use their
 * dashboard to locate a reply and update its content or status as required,
 * with transactional guarantees enforced by the reviews subsystem.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product
 * @param props.reviewId Unique identifier of the target product review
 * @param props.replyId Unique identifier of the review reply to update
 * @param props.body Updated reply information including body text and
 *   (optionally) new status; must meet reply content validation rules
 * @path /shoppingMall/seller/products/:productId/reviews/:reviewId/replies/:replyId
 * @accessor api.functional.shoppingMall.seller.products.reviews.replies.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the target product review */
    reviewId: string & tags.Format<"uuid">;

    /** Unique identifier of the review reply to update */
    replyId: string & tags.Format<"uuid">;

    /**
     * Updated reply information including body text and (optionally) new
     * status; must meet reply content validation rules
     */
    body: IShoppingMallReviewReply.IUpdate;
  };
  export type Body = IShoppingMallReviewReply.IUpdate;
  export type Response = IShoppingMallReviewReply;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/products/:productId/reviews/:reviewId/replies/:replyId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): IShoppingMallReviewReply =>
    typia.random<IShoppingMallReviewReply>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("replyId")(() => typia.assert(props.replyId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a seller or admin's reply to a product review (hard delete
 * in shopping_mall_review_replies).
 *
 * This operation allows an authorized seller or admin to permanently delete
 * their reply to a product review. The reply is identified by the replyId in
 * the context of the given productId and reviewId as enforced by the Prisma
 * schema shopping_mall_review_replies. Deletion is a hard removal of the reply
 * record from the database. Only the reply author (seller or admin) or a
 * platform admin may perform deletion; attempts by other users will result in
 * permission errors.
 *
 * On successful deletion, the reply is no longer retrievable, and business
 * logic may update moderation or audit logs for transparency, as described in
 * the reviews and ratings and admin requirements. Deleting a non-existent or
 * already-deleted reply results in an error.
 *
 * This operation does not accept a request body and does not return a response
 * body beyond standard deletion status.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product containing the review
 * @param props.reviewId Unique identifier of the product review
 * @param props.replyId Unique identifier of the review reply to delete
 * @path /shoppingMall/seller/products/:productId/reviews/:reviewId/replies/:replyId
 * @accessor api.functional.shoppingMall.seller.products.reviews.replies.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the product containing the review */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the product review */
    reviewId: string & tags.Format<"uuid">;

    /** Unique identifier of the review reply to delete */
    replyId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/seller/products/:productId/reviews/:reviewId/replies/:replyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/reviews/${encodeURIComponent(props.reviewId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("replyId")(() => typia.assert(props.replyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
