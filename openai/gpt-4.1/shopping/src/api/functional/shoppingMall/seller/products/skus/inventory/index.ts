import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInventoryRecord } from "../../../../../../structures/IShoppingMallInventoryRecord";
export * as logs from "./logs/index";

/**
 * Replace all inventory values for a specific SKU with a full update.
 *
 * Replace the full set of inventory fields for a product SKU. All data in the
 * inventory record (quantity_available, reserved, sold, low_stock_threshold,
 * status) must be given, as no previous data is preserved. This operation
 * ensures inventory and status values are set in a single atomic update, ideal
 * for admin-initiated inventory resets or bulk reconciliation following audits
 * or data imports.
 *
 * Authorization is checked so only the owning seller or an admin can perform
 * this. Any missing fields, invalid values, or business logic violations (such
 * as negative stock) are rejected, and error messages are provided with
 * remediation steps. On success, the entire, newly written inventory record is
 * returned with updated timestamps.
 *
 * Put is not recommended for frequent operations, and should be reserved for
 * full resets or major corrections. To change only a selection of fields, use
 * the PATCH endpoint instead. This endpoint is also tightly coupled with
 * business logic to write adjustment audit logs and trigger low-stock/business
 * status signals if relevant.
 *
 * @param props.connection
 * @param props.productId The unique identifier of the product to which the SKU
 *   belongs.
 * @param props.skuId The unique identifier of the SKU whose full inventory
 *   record is being replaced.
 * @param props.body Complete inventory record fields for the SKU, replacing all
 *   previous data.
 * @path /shoppingMall/seller/products/:productId/skus/:skuId/inventory
 * @accessor api.functional.shoppingMall.seller.products.skus.inventory.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the product to which the SKU belongs. */
    productId: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the SKU whose full inventory record is being
     * replaced.
     */
    skuId: string & tags.Format<"uuid">;

    /**
     * Complete inventory record fields for the SKU, replacing all previous
     * data.
     */
    body: IShoppingMallInventoryRecord.IUpdate;
  };
  export type Body = IShoppingMallInventoryRecord.IUpdate;
  export type Response = IShoppingMallInventoryRecord;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/products/:productId/skus/:skuId/inventory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}/inventory`;
  export const random = (): IShoppingMallInventoryRecord =>
    typia.random<IShoppingMallInventoryRecord>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Partially update inventory values for a specific product SKU's inventory
 * record.
 *
 * Update selective fields of a product SKU's inventory record in the e-commerce
 * platform. This operation is used primarily by sellers to increase available
 * stock after restock, decrease stock due to losses, or mark an SKU as blocked
 * for sales. Sellers can also adjust low stock thresholds. Admins may perform
 * the same operation for all SKUs as part of compliance or correction
 * workflows.
 *
 * Security enforcement disallows customers or unrelated sellers from accessing
 * this endpoint. The API ensures the SKU belongs to the given productId and
 * that the caller has sufficient rights. Validation is performed on all mutable
 * fields to guarantee no negative quantities and status transitions must follow
 * the business state machine. On success, the new inventory values are shown.
 * If unauthorized or SKU does not exist, an error with actionable information
 * is returned.
 *
 * PATCH is preferable when only some fields of the inventory should be changed,
 * as compared to the full-replacement PUT operation. This operation is linked
 * to inventory change audit logs, which record all manual/admin inventory
 * adjustments for compliance and rollback capabilities.
 *
 * @param props.connection
 * @param props.productId The unique identifier of the product to which the SKU
 *   belongs.
 * @param props.skuId The unique identifier of the SKU whose inventory is being
 *   modified.
 * @param props.body Partial inventory update fields for the product SKU, such
 *   as available quantity or status.
 * @path /shoppingMall/seller/products/:productId/skus/:skuId/inventory
 * @accessor api.functional.shoppingMall.seller.products.skus.inventory.updatePartial
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePartial(
  connection: IConnection,
  props: updatePartial.Props,
): Promise<updatePartial.Response> {
  return true === connection.simulate
    ? updatePartial.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePartial.METADATA,
          path: updatePartial.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updatePartial {
  export type Props = {
    /** The unique identifier of the product to which the SKU belongs. */
    productId: string & tags.Format<"uuid">;

    /** The unique identifier of the SKU whose inventory is being modified. */
    skuId: string & tags.Format<"uuid">;

    /**
     * Partial inventory update fields for the product SKU, such as
     * available quantity or status.
     */
    body: IShoppingMallInventoryRecord.IPartialUpdate;
  };
  export type Body = IShoppingMallInventoryRecord.IPartialUpdate;
  export type Response = IShoppingMallInventoryRecord;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/products/:productId/skus/:skuId/inventory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/skus/${encodeURIComponent(props.skuId ?? "null")}/inventory`;
  export const random = (): IShoppingMallInventoryRecord =>
    typia.random<IShoppingMallInventoryRecord>();
  export const simulate = (
    connection: IConnection,
    props: updatePartial.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePartial.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
