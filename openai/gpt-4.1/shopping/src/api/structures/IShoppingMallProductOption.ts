import { tags } from "typia";

/**
 * Detailed DTO type representing a single product option (attribute) for a
 * product (shopping_mall_product_options), including name, order, and audit
 * timestamps.
 *
 * Strictly follows the Prisma schema for shopping_mall_product_options and
 * omits properties not in the schema. Maps to a 'product option' like Color,
 * Size, etc.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallProductOption = {
  /**
   * Primary key/UUID for this product option. References
   * shopping_mall_product_options.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Parent product ID this option is a part of. FK to
   * shopping_mall_products.id.
   */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /**
   * Option display name (e.g., 'Color', 'Size'). Must be unique for this
   * product. Indexed for fuzzy search.
   */
  name: string;

  /**
   * Display ordering for product options (integer, 0-based, among all options
   * of this product). Suggests UI order.
   */
  display_order: number & tags.Type<"int32">;

  /** Date/time when this product option was created (ISO 8601, UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Date/time when this product option was last updated (ISO 8601, UTC). */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallProductOption {
  /**
   * Request parameters for advanced search/filtering/pagination of product
   * option definitions for a product (shopping_mall_product_options).
   *
   * This DTO is used by the PATCH /shoppingMall/products/{productId}/options
   * endpoint for filtering by name/ordering/pagination.
   */
  export type IRequest = {
    /**
     * (Optional, if not present, context path param is used)
     *
     * Unique identifier of the parent product to filter product options
     * under. Matches
     * shopping_mall_product_options.shopping_mall_product_id.
     *
     * When omitted, assumes product context from API path parameter.
     */
    productId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Search query to filter product options by name. Partial/fuzzy
     * matches; leverages GIN/trigram indexes on product option name.
     */
    search?: string | undefined;

    /**
     * Lower bound for filtering product options by display order
     * (inclusive).
     */
    display_order_from?: (number & tags.Type<"int32">) | undefined;

    /**
     * Upper bound for filtering product options by display order
     * (inclusive).
     */
    display_order_to?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sorting field for listing. One of
     * ['name','display_order','created_at','updated_at'].
     */
    sort?: "name" | "display_order" | "created_at" | "updated_at" | undefined;

    /** Sort direction. 'asc' for ascending, 'desc' for descending. */
    order?: "asc" | "desc" | undefined;

    /** Page number for pagination. 1-based; default 1. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Records per page for pagination. Default is 20. Max is 100. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Payload for creating a product option as a variant axis (e.g. color,
   * size) for a product. This structure maps to shopping_mall_product_options
   * in the Prisma schema. You must provide the option name (such as 'Color')
   * and the presentation order (zero-based). The operation ensures that the
   * name is unique within the parent product and the display order is used
   * for arranging options on the product page. Only fields present in the
   * Prisma schema can be included. This type is required for endpoints that
   * create new product options for variant management.
   */
  export type ICreate = {
    /**
     * Option display name (e.g. 'Color'). Required. Unique within the same
     * product.
     */
    name: string;

    /**
     * Ordering of options for presentation within the product. Required.
     * Zero-based order for UI.
     */
    display_order: number & tags.Type<"int32">;
  };

  /**
   * Payload for updating an existing product option (such as modifying the
   * display name or presentation order) for a product. Fields are optional.
   * Use this when moving an option to a new order within the set or
   * correcting naming. Mapped to shopping_mall_product_options in the Prisma
   * schema. All updates are subject to uniqueness constraints within the
   * parent product. This DTO is used for admin/seller endpoints that manage
   * option editing for catalog maintenance. Only fields that exist on the
   * option table may be updated.
   */
  export type IUpdate = {
    /**
     * Option display name (e.g. 'Color'). Must be unique within the same
     * product. If omitted, the existing name is preserved.
     */
    name?: string | undefined;

    /**
     * Ordering of options for presentation within the product. If omitted,
     * ordering is unchanged.
     */
    display_order?: (number & tags.Type<"int32">) | undefined;
  };
}
