import { tags } from "typia";

/**
 * Customer Service Event entity. Represents a discrete event in the customer
 * service, case escalation, or appeal workflow for a shopping mall order. Each
 * event links to specific customer, seller, and/or admin actors, and optionally
 * to an order history, escalation, or appeal context. This type is foundational
 * for audits, customer journey timelines, and compliance tracking. All fields
 * are mapped directly from the shopping_mall_customer_service_events Prisma
 * model. See domain requirements for additional business context.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCustomerServiceEvent = {
  /**
   * Primary key uniquely identifying this customer service event record as
   * stored in the database. Generated as a UUID v4 on creation. Immutable
   * throughout its lifetime. Used for referencing, searching, and audit
   * links.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional reference to an order history snapshot associated with this
   * event. If present, this links the event to a particular audit milestone
   * or order state (cancellation, refund, escalation). The value is a UUID
   * referencing shopping_mall_order_histories.id or null if the event is not
   * tied to an order snapshot. Used to reconstruct complete order customer
   * service timelines for audit and compliance.
   */
  order_history_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional reference to an escalation (dispute case) event ID. Provides
   * trace linkage to complex disputes or customer service cases requiring
   * admin intervention. UUID referencing shopping_mall_escalations.id or null
   * if not related to an escalation record.
   */
  shopping_mall_escalation_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Optional reference to a related appeal case as part of the customer
   * service escalation/appeal flow. UUID referencing shopping_mall_appeals.id
   * or null if not associated with an appeal.
   */
  shopping_mall_appeal_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * ID of the customer actor performing this customer service event as
   * reported in the system. Null if not initiated by a customer. UUID
   * reference to shopping_mall_customers.id if present.
   */
  actor_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * ID of the seller actor performing or associated with this event. Null if
   * not initiated by seller. UUID reference to shopping_mall_sellers.id if
   * present.
   */
  actor_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * ID of the administrator triggering or handling this customer service
   * event. Null if not an admin-initiated event. UUID reference to
   * shopping_mall_admins.id if present.
   */
  actor_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type/category of the service event such as 'case-open', 'message',
   * 'investigation', 'resolution', 'appeal-filed', etc., as documented by
   * customer service requirements. Enum may be enforced in business logic but
   * values may be arbitrary strings here.
   */
  event_type: string;

  /**
   * High-level status of this event according to workflow: typically
   * 'in-progress', 'resolved', 'pending', 'escalated', etc. Used to track
   * processing pipeline, queue, and analytics.
   */
  event_status: string;

  /**
   * Optional business comment, detailed message, actor response, or audit
   * trace for this service event. Intended as a free-text field providing
   * full context for customer service audit and escalation case management.
   */
  event_comment?: string | null | undefined;

  /**
   * Indicates the timestamp (ISO 8601) when this customer service event was
   * registered in the database. Used for audit, ordering, and customer
   * journey timelines. Immutable.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp to logically remove events from standard
   * search/index without permanently erasing them. Null if the event is
   * active; non-null ISO 8601 UTC timestamp if removed for data
   * retention/audit. Used for compliance and not for physical deletion.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallCustomerServiceEvent {
  /**
   * Filter, search, and pagination options for retrieving customer service
   * events.
   *
   * This type matches the advanced filtering capabilities of admin dashboards
   * and customer service audit tools for interrogating the
   * shopping_mall_customer_service_events table. All fields are optional;
   * query parameters are dynamically composed. Paging and sorting (if
   * required) are typically handled by surrounding IPage/IRequest contract
   * wrappers. Used to support reconstruction of customer support timelines,
   * dispute case review, and regulatory compliance monitoring. No required
   * fields: all filtering is opt-in based on auditor needs.
   */
  export type IRequest = {
    /**
     * Reference to the related order history snapshot, if event is directly
     * tied to order audit.
     *
     * Links this customer service event to a specific milestone in order
     * evolution (cancellation, refund, escalation), supporting full audit
     * trace and post-mortem investigation. Must be a valid UUID referencing
     * an existing record in shopping_mall_order_histories.
     */
    order_history_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Reference to the related escalation case, if event is part of a
     * broader dispute.
     *
     * Allows filtering/searching all customer service events related to a
     * specific escalation instance, and for reconstructing resolution
     * timelines. Nullable and optional in schemas; only present when
     * attached to an escalation case.
     */
    shopping_mall_escalation_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Reference to the related appeal, if this event is part of an appeal
     * process.
     *
     * Supports querying of appeal-related customer service events. Nullable
     * and optional, present only when tied to appeals or repeated customer
     * challenges over admin/seller decisions.
     */
    shopping_mall_appeal_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Customer ID if the event was performed by a customer.
     *
     * Filterable field for retrieving all events performed by a specific
     * customer. Used in self-service case histories and customer-side audit
     * views.
     */
    actor_customer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Seller ID if the event was performed by a seller actor.
     *
     * Used to query and review all customer service actions performed by a
     * given seller and to distinguish seller-vs-customer-initiated events
     * during order support review.
     */
    actor_seller_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Admin ID if event was performed by a platform admin.
     *
     * Searchable by platform auditors or for tracking intervention in
     * critical service events. Provides traceability for administrative
     * workflows.
     */
    actor_admin_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type/category of the service event, such as 'case-open', 'message',
     * 'investigation', 'resolution', 'appeal-filed', and more.
     *
     * Allows filtering events by business workflow or major timeline
     * category as defined in customer service business logic. Supports both
     * standard and custom event types for extensibility.
     */
    event_type?: string | undefined;

    /**
     * Current status of this event, such as 'in-progress', 'resolved',
     * 'pending', 'escalated'.
     *
     * Used to filter pending or open service events, or to review
     * resolution outcomes across the case lifecycle.
     */
    event_status?: string | undefined;

    /**
     * Filter for events created at or after this ISO 8601 timestamp.
     *
     * Enables time-windowed search for event histories in audit, admin
     * review, or compliance scenarios. Should be formatted as UTC ISO 8601
     * string.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for events created at or before this ISO 8601 timestamp.
     *
     * Works in conjunction with 'created_at_from' to provide bounded
     * time-range queries on event timelines. Formatted as UTC ISO 8601.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Free text comment or detail filter for searching event narrative
     * content.
     *
     * Filter for events containing specific terms or explanations in their
     * event_comment field (e.g., search for 'delayed shipment', 'system
     * correction', or agent names).
     */
    event_comment?: string | undefined;
  };

  /**
   * Update DTO for a single customer service event. Used to modify permitted
   * mutable fields—status and optionally the comment—of a customer service
   * workflow event during escalation, investigation, or resolution. All
   * changes are audit-logged and mapped to fields in the
   * shopping_mall_customer_service_events table.
   */
  export type IUpdate = {
    /**
     * New status value for this event, such as 'resolved', 'in-progress',
     * 'pending', or business workflow status. Enum values may be validated
     * in the provider.
     */
    event_status: string;

    /**
     * Updated business comment, note, or audit message to log context,
     * communication, or status change for this event. Free-text field for
     * both system and user-facing commentary. Null allowed to clear the
     * comment.
     */
    event_comment?: string | null | undefined;
  };
}
