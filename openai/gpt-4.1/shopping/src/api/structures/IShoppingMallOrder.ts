import { tags } from "typia";

/**
 * Represents an individual order record in the shopping mall e-commerce
 * platform. This type encompasses all attributes essential to identify, manage,
 * fulfill, and audit a customer order, including order number, user and seller
 * associations, order status, order total and currency, snapshot references to
 * shipping/payment, and time-based audit fields. The schema is directly mapped
 * from the shopping_mall_orders Prisma table. All order management, status
 * history, fulfillment (shipment), payment records, cancellations, and refunds
 * relate to this type, and it provides full auditability through its
 * timestamped and soft-deleted columns. Do not include fields that are not
 * present in the schema table, and always validate against the requirements for
 * secure and transactional order handling in business logic. This type is used
 * for both read and mutation APIs referencing a complete order object.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrder = {
  /**
   * The unique identifier of the order. Primary key for the
   * shopping_mall_orders table.
   *
   * This field is auto-generated and used as the main reference for order,
   * fulfillment tracking, customer service events, and audit.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the customer who placed this order. Foreign key
   * referencing the shopping_mall_customers table.
   *
   * Validates order-ownership and supports retrieval for order history,
   * support, or auditing purposes.
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Optional seller's unique identifier, or null for split orders
   * (multi-seller purchases).
   */
  shopping_mall_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Point-in-time snapshot of the shipping address used at order placement.
   *
   * References shopping_mall_order_addresses.id and supports post-order
   * audits/shipments regardless of changes to customer's profile.
   */
  shipping_address_id: string & tags.Format<"uuid">;

  /**
   * Snapshot of the payment method configuration as used for the order.
   *
   * References shopping_mall_order_payment_methods.id for accurate historic
   * payment reference even if user profile changes later.
   */
  payment_method_id: string & tags.Format<"uuid">;

  /**
   * Public-facing, business-unique order identifier (for customer
   * communication, tracking, and CRM tools). Not the database id.
   *
   * Used in email notifications, receipts, and 3rd party integrations.
   */
  order_number: string;

  /**
   * The current status of this order. Typical status strings include:
   *
   * - `pending`
   * - `paid`
   * - `processing`
   * - `shipped`
   * - `delivered`
   * - `cancelled`
   *
   * This field is managed by business processes and is referenced by status
   * history and audit.
   */
  status: string;

  /** Secondary status or workflow state. May be null. */
  business_status?: string | null | undefined;

  /**
   * Total price for this order, summed from order items including shipping
   * fees and discounts (if any).
   *
   * Used for payment integrity, financial reporting, and customer receipts.
   */
  order_total: number;

  /**
   * ISO currency code (e.g., 'USD', 'KRW').
   *
   * Required for precision in cross-border platform scenarios.
   */
  currency: string;

  /**
   * Timestamp when the order was officially placed by the customer.
   *
   * ISO 8601 format. Used for sorting/retrieval and time-based analytics.
   */
  placed_at: string & tags.Format<"date-time">;

  /** Nullable. The datetime when the order was paid for, if completed. */
  paid_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Nullable. When the order was completely fulfilled for historic/audit
   * purposes.
   */
  fulfilled_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp of order creation in the system for audit and debugging.
   *
   * Populated automatically.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for last update to this order (covers status change, admin
   * actions, external syncs, etc).
   *
   * Auto-updated.
   */
  updated_at: string & tags.Format<"date-time">;

  /** Nullable deletion time. Used for logical/audited deletion. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallOrder {
  /**
   * Structured search/filter and pagination request for listing and searching
   * orders (shopping_mall_orders) on the shoppingMall e-commerce platform.
   * This DTO is used for advanced queries via PATCH endpoints where clients
   * can specify filtering criteria, search logic, sort ordering, and
   * pagination controls. All filters must precisely correspond to available
   * fields in the shopping_mall_orders Prisma schema.
   *
   * The structure allows for multi-property search including order_number,
   * status, business_status, placed_at/paid_at/fulfilled_at dateranges,
   * customer/seller references, and currency. Sort and pagination controls
   * are required for efficient large dataset navigation. This DTO must never
   * include attempt to filter by unused, non-schema, or virtual fieldsâ€”accept
   * only what is defined in the Prisma schema. String, date, and numeric
   * criteria must follow both schema typings and in-database index
   * optimization recommendations. Nullability for parameters should be
   * respected as oneOf or explicit null. This object is never persisted and
   * is for inflight query construction only, not direct database storage.
   * Adhere strictly to naming, typing, and full Prisma schema reference for
   * all supported properties.
   */
  export type IRequest = {
    /**
     * Order number for searching a specific business order record (globally
     * unique as per Prisma). Partial string search is permitted if
     * full-text index exists; otherwise, exact match only. Must reference
     * order_number field from shopping_mall_orders.
     */
    order_number?: string | undefined;

    /**
     * Current status filter for orders (e.g., pending, paid, processing,
     * shipped, delivered, cancelled) as coded in
     * shopping_mall_orders.status (string). Use exact match for status
     * value; enum values are platform-defined.
     */
    status?: string | undefined;

    /**
     * Business status/state filter for order workflow, e.g. 'hold',
     * 'review', 'escalated'. Reflects business-specific process from
     * shopping_mall_orders.business_status. Use appropriate exact match for
     * status or oneOf if nullable.
     */
    business_status?: string | undefined;

    /**
     * Begin datetime (ISO 8601) for placed_at filter on orders. Inclusive
     * lower boundary, precision as supported in shopping_mall_orders. May
     * be omitted to query from system minimum.
     */
    placed_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End datetime (ISO 8601) for placed_at filter on orders. Inclusive
     * upper boundary, precision as supported in shopping_mall_orders. Can
     * be omitted if open-ended query intended.
     */
    placed_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * UUID of customer for filtering orders by owner
     * (shopping_mall_orders.shopping_mall_customer_id). Must match id in
     * shopping_mall_customers schema.
     */
    customer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * UUID of seller for filtering single-seller orders
     * (shopping_mall_orders.shopping_mall_seller_id). Set only if searching
     * by seller role or admin.
     */
    seller_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Currency code filter for orders (shopping_mall_orders.currency);
     * typically three-letter ISO code (e.g., USD, KRW). Allows matching to
     * only orders in selected currency.
     */
    currency?: string | undefined;

    /**
     * Minimum total amount boundary for order_total field
     * (shopping_mall_orders.order_total). Numeric filter for price-based
     * queries.
     */
    min_total?: number | undefined;

    /**
     * Maximum total amount boundary for order_total field
     * (shopping_mall_orders.order_total). Numeric filter for price-based
     * queries.
     */
    max_total?: number | undefined;

    /**
     * Sort column for order listing output. Acceptable values: 'placed_at',
     * 'order_total', 'status', etc. Sorting must match schema-available
     * indexed columns.
     */
    sort_by?: string | undefined;

    /**
     * Sorting direction: 'asc' (ascending) or 'desc' (descending) for the
     * column selected by sort_by.
     */
    sort_direction?: "asc" | "desc" | undefined;

    /**
     * Page number for pagination (>= 1). Controls which page of results to
     * return. Default: 1.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /**
     * Maximum number of results per page for pagination. Enforced as per
     * system or schema policy. Default: 20. Maximum: 100.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;
  };

  /**
   * The payload required for placing a new order in the shopping mall
   * platform.
   *
   * This DTO type is used for order creation endpoints. It references all
   * required data for creating a new order, including the snapshot ID of the
   * shipping address to be used (snapshot, never a mutable address record),
   * the unique payment method snapshot ID, pre-calculated order total, and
   * currency code. The customer id and seller id are included for internal
   * API use (such as admin-placed orders or in microservice contexts, but not
   * for public-facing customer APIs, where these values are derived from
   * authentication context). This schema directly mirrors columns in the
   * shopping_mall_orders Prisma table, and is used for validating that all
   * necessary attributes are provided upon order placement. Fields must
   * strictly match existing columns; no extra or missing fields allowed. The
   * IShoppingMallOrder.ICreate type is separate from the read type to enforce
   * correct separation of input and output DTOs. Do not include fields that
   * are only system-managed or not modifiable by the order placement
   * process.
   */
  export type ICreate = {
    /**
     * The UUID of the customer placing the order. Foreign key to
     * shopping_mall_customers.
     *
     * This is not submitted by the client in customer-facing APIs, but is
     * provided internally through authentication context by the backend.
     * For admin/internal use, the field may be required.
     */
    shopping_mall_customer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Nullable for split orders covering multiple sellers. Provided for
     * single-seller context.
     */
    shopping_mall_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Required. The UUID of the shipping address snapshot to use for this
     * order. References shopping_mall_order_addresses.id.
     *
     * This address must be pre-validated and belong to the placing
     * customer, capturing the full address at the time of order for audit
     * and delivery integrity.
     */
    shipping_address_id: string & tags.Format<"uuid">;

    /**
     * Required. The UUID of the payment method snapshot to be used for
     * order payment, referencing shopping_mall_order_payment_methods.id.
     *
     * This is a one-time, point-in-time record to guarantee that the
     * payment method is audit-stable even if a user's method changes
     * later.
     */
    payment_method_id: string & tags.Format<"uuid">;

    /**
     * Total calculated price for the order, including products/SKUs,
     * shipping fees, and discounts.
     *
     * Validated by the backend before order placement; client provides the
     * intended value but system checks all values server-side before
     * persisting.
     */
    order_total: number;

    /**
     * The ISO currency code for this order (e.g., 'USD', 'KRW').
     *
     * Required for every financial order for accurate recordkeeping,
     * reconciliation, and audit.
     */
    currency: string;
  };

  /**
   * Update payload for modifying details of a shopping mall order. This type
   * is used in the order update API for authorized customers, sellers, or
   * admins. Each field can be provided individually â€“ only those fields
   * present in the request are updated. Allowed fields and update logic may
   * be restricted by workflow stage and permissions. All changes are
   * audit-logged and may affect status history or downstream entities.
   */
  export type IUpdate = {
    /**
     * The new status of the order (e.g., pending, paid, processing,
     * shipped, delivered, cancelled). This property is used to update the
     * current status of the order. It must correspond to a valid status as
     * defined in the business logic of the platform. Updating the status
     * may trigger status-history events and fulfillment timelines.
     */
    status?: string | undefined;

    /**
     * (Optional) Update the business workflow or custom business state of
     * the order. For advanced use cases where additional business flows are
     * implemented outside of the core status machine.
     */
    business_status?: string | null | undefined;

    /**
     * (Optional) New shipping address snapshot reference for the order.
     * Used only before fulfillment/shipment and only by authorized actors.
     * Mutating this field should update the address reflected in the order
     * and downstream delivery modules.
     */
    shipping_address_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * (Optional) New payment method snapshot reference for the order. This
     * enables modification of how the order is to be/will be paid if not
     * yet settled.
     */
    payment_method_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * (Optional) Comment or internal note to attach to the order, commonly
     * used by sellers/admins for fulfillment notes, exception records, or
     * customer service purposes.
     */
    remark?: string | null | undefined;
  };

  /**
   * Paginated summary schema for an order, providing the essential metadata
   * needed to show an order in a list, dashboard, or analytics context.
   *
   * This structure is optimized for performance in bulk lists and does not
   * include item-level information, shipment, or address details. All
   * references align with the 'shopping_mall_orders' Prisma model as
   * documented. Used extensively in order search, customer order history,
   * seller fulfillment worklists, and analytics dashboards.
   */
  export type ISummary = {
    /**
     * Unique identifier of the order as recorded in 'shopping_mall_orders'.
     *
     * This is the primary key for order detail reference, actions, or
     * audit. Provided as a UUID string for external API consumers.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier for the customer (UUID) who placed this order.
     *
     * References the foreign key in 'shopping_mall_orders' and is used for
     * access control and order history filtering.
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Optional seller reference (UUID) if the order is a single-seller or
     * seller-split order. Null for marketplace-level split orders.
     *
     * References 'shopping_mall_sellers' for order fulfillment and
     * assignment.
     */
    shopping_mall_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Globally unique and human-readable order number (external-facing).
     *
     * Drawn directly from 'order_number' in 'shopping_mall_orders'. Used
     * for search, support, payment reconciliation, and customer
     * communications.
     */
    order_number: string;

    /**
     * Order status code ('pending', 'paid', 'processing', 'shipped',
     * 'delivered', 'cancelled', etc.).
     *
     * Drawn from the 'status' column in 'shopping_mall_orders'. Used for
     * filtering by state, order list rendering, and workflow enforcement.
     */
    status: string;

    /**
     * Total price for this order, including items, shipping, and discounts
     * in platform currency.
     *
     * References 'order_total' in the schema; always frozen at order
     * placement time; includes decimal values. Used in all business and
     * analytics reporting.
     */
    order_total: number;

    /**
     * 3-letter ISO currency code for the order's financials, e.g., 'USD',
     * 'KRW'.
     *
     * References 'currency' in 'shopping_mall_orders'. Used for proper
     * currency display, conversion, and external payment integrations.
     */
    currency: string;

    /**
     * Timestamp for when this order was officially created/committed by the
     * customer (ISO 8601).
     *
     * Directly maps to 'placed_at' column in 'shopping_mall_orders'. Used
     * for order history ordering, analytics, and customer service review.
     */
    placed_at: string & tags.Format<"date-time">;

    /**
     * Timestamp (ISO 8601) indicating when payment was completed for this
     * order. Null if not yet paid.
     *
     * References the 'paid_at' column in the schema. Used for fulfillment
     * eligibility checks, payment analytics, and compliance reporting.
     */
    paid_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp (ISO 8601) when the order was fully fulfilled
     * (shipped/delivered). Null if not yet fulfilled.
     *
     * References the 'fulfilled_at' column in 'shopping_mall_orders'. Used
     * for business analytics, revenue recognition, and customer timeline
     * display.
     */
    fulfilled_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
