import { tags } from "typia";

import { IShoppingMallCustomerAddress } from "./IShoppingMallCustomerAddress";
import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Comprehensive DTO representing a customer account profile in the shopping
 * mall platform. This schema strictly reflects the Prisma model
 * shopping_mall_customers, covering all key profile, registration,
 * verification, and status fields. All sensitive authentication credentials
 * (e.g., password_hash) are excluded for security. Descriptions reference
 * original column comments and intended business context from the schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCustomer = {
  /**
   * Primary Key. Unique identifier for the customer account, as defined by
   * the shopping_mall_customers.id field in the Prisma schema. Universally
   * unique identifier used for direct reference throughout the platform.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Customer's unique login email address, used for authentication and
   * communications. This field is enforced as unique, and all registration or
   * authentication activities reference this value. Defined in
   * shopping_mall_customers.email.
   */
  email: string & tags.Format<"email">;

  /**
   * Customer's displayable full name, used for orders, account management,
   * and profile display. Typically between 2 and 80 characters. Defined as
   * full_name in shopping_mall_customers.
   */
  full_name: string;

  /**
   * Main phone number for the customer, used for notifications and secondary
   * verification. Format is E.164/+country code, but free-form entry is
   * supported subject to validation. Referenced in
   * shopping_mall_customers.phone.
   */
  phone: string;

  /**
   * Current account status string value. Values typically represent states
   * such as 'active', 'suspended', 'pending_verification', etc. Set during
   * registration, modified by admin actions and automated flows. Defined in
   * shopping_mall_customers.status.
   */
  status: string;

  /**
   * Boolean flag indicating whether the customer has completed email
   * verification. Only accounts with email_verified=true may access all
   * platform features. Defined in shopping_mall_customers.email_verified.
   */
  email_verified: boolean;

  /**
   * Timestamp in ISO 8601 (RFC3339) format representing when the customer
   * account was created in the system. Set once at insert. Defined as
   * created_at in shopping_mall_customers.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp in ISO 8601 format indicating when the customer account was
   * most recently modified. Updated on every profile or status change.
   * Referenced as updated_at in shopping_mall_customers.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional nullable timestamp indicating when the account was (soft)
   * deleted or withdrawn, if applicable. When not deleted, this value is
   * null. Provided for audit and compliance workflows. Sourced from
   * shopping_mall_customers.deleted_at.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallCustomer {
  /**
   * Schema for creating a new customer account (registration) in the
   * shoppingMall platform. This schema is for the join (registration)
   * endpoint request body for shopping_mall_customers.
   *
   * The payload contains the mandatory information required to onboard a new
   * regular customer and aligns directly with the Prisma table
   * shopping_mall_customers. The API enforces unique constraint on email,
   * hashes plain password client-side (never stores plaintext), captures
   * displayable full name, and main phone. Additional internal attributes,
   * such as status, email verification state, and timestamps, are determined
   * upon creation, not in this DTO.
   *
   * Do not include system-managed or sensitive fields in this schema.
   * Password is submitted as plain text and hashing is performed server-side.
   * The account is not verified until email verification is completed in a
   * separate workflow.
   *
   * Security: password field is never returned in response DTOs and must be
   * filtered at controller level for logging/tracing. The registration schema
   * is public, but validation is strictly enforced at API layer.
   *
   * Corresponds to registration/join ops for shopping_mall_customers.
   */
  export type IJoin = {
    /**
     * Customer's unique login email address. Used for login and
     * notifications. Must be unique across all customer accounts as
     * enforced by Prisma schema and business logic. Standard email format
     * is required. Email is case insensitive and compared for uniqueness.
     * Example: user@domain.com
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password chosen by the customer. Minimum of 8 characters,
     * maximum 100. Only accepted at registration and password reset
     * endpoints. Must be strong according to platform validation policies
     * (letters, digits, special characters recommended). This value will be
     * hashed (bcrypt) at the server; hashed password is never accepted or
     * stored via API. Password policy is enforced in handler.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<100>;

    /**
     * Customerâ€™s displayable full name for use in orders, shipping, and
     * account management. Required string. Must not contain symbols or
     * control characters. Example: "Jane Kim"
     */
    full_name: string & tags.MinLength<2> & tags.MaxLength<100>;

    /**
     * Customer's main contact phone number. Must be a valid phone number
     * with country code if required, only digits, plus or dash allowed.
     * Used for account verification and notifications. Example:
     * '+82-10-1234-5678' or '010-1234-5678'
     */
    phone: string & tags.MinLength<8> & tags.MaxLength<20>;

    /**
     * Initial address to assign to the customer upon registration. Address
     * is required on join for onboarding. The joined object must follow the
     * IShoppingMallCustomerAddress.ICreate schema. Attach to the customer
     * as default address.
     */
    address: IShoppingMallCustomerAddress.ICreate;
  };

  /**
   * This schema represents the response format after successful customer
   * registration or authentication (join/login/refresh) API call for the
   * shoppingMall platform. It returns a secure envelope containing essential
   * customer profile metadata and the issued JWT tokens for API
   * authentication. There are security considerations: this DTO never exposes
   * sensitive credentials such as password_hash, nor audit details like IP,
   * and is filtered to only user-facing attributes as defined in the spec.
   *
   * The token payload follows standard JWT/authorization token design and
   * always references IAuthorizationToken. The id is the customer's unique
   * UUID as stored in shopping_mall_customers. Use this type for all
   * authentication success responses for customer role in platform. Always
   * pair with IAuthorizationToken schema for token property.
   *
   * Extra fields (profile, email, name, phone) may be included as platform
   * evolves. Description in English as per guidelines. Never use for seller
   * or admin role (use their own .IAuthorized types).
   */
  export type IAuthorized = {
    /**
     * Unique identifier (UUID) of the customer account as stored in
     * shopping_mall_customers.id. This value is used throughout the API to
     * reference the authenticated customer.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Customer's unique login email address, used for authentication and
     * communications. This field is enforced as unique, and all
     * registration or authentication activities reference this value.
     * Defined in shopping_mall_customers.email.
     */
    email: string & tags.Format<"email">;

    /**
     * Customer's displayable full name, used for orders, account
     * management, and profile display. Typically between 2 and 80
     * characters. Defined as full_name in shopping_mall_customers.
     */
    full_name: string;

    /**
     * Main phone number for the customer, used for notifications and
     * secondary verification. Format is E.164/+country code, but free-form
     * entry is supported subject to validation. Referenced in
     * shopping_mall_customers.phone.
     */
    phone: string;

    /**
     * Current account status string value. Values typically represent
     * states such as 'active', 'suspended', 'pending_verification', etc.
     * Set during registration, modified by admin actions and automated
     * flows. Defined in shopping_mall_customers.status.
     */
    status: string;

    /**
     * Boolean flag indicating whether the customer has completed email
     * verification. Only accounts with email_verified=true may access all
     * platform features. Defined in
     * shopping_mall_customers.email_verified.
     */
    email_verified: boolean;

    /**
     * Timestamp in ISO 8601 (RFC3339) format representing when the customer
     * account was created in the system. Set once at insert. Defined as
     * created_at in shopping_mall_customers.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp in ISO 8601 format indicating when the customer account was
     * most recently modified. Updated on every profile or status change.
     * Referenced as updated_at in shopping_mall_customers.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Optional nullable timestamp indicating when the account was (soft)
     * deleted or withdrawn, if applicable. When not deleted, this value is
     * null. Provided for audit and compliance workflows. Sourced from
     * shopping_mall_customers.deleted_at.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request payload for authenticating a shopping mall customer user. This
   * schema is used for login APIs and must include both the unique customer
   * email and their plaintext password. All fields are required and validated
   * according to business and security policy. Credentials are verified
   * against the shopping_mall_customers table.
   */
  export type ILogin = {
    /**
     * Customer's registered email address for authentication purposes. Must
     * match a unique entry in shopping_mall_customers.email. Used for login
     * and notification communications. Email format enforced as per RFC
     * 5322.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password provided by the customer during login. Must be at
     * least 8 characters. Only accepted here for credential
     * verificationâ€”never persisted in this form. Password will be securely
     * compared (via bcrypt hash) against the stored value in
     * shopping_mall_customers.password_hash.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<128>;
  };

  /**
   * Request DTO for refreshing the customer JWT session. Contains only the
   * refresh_token, which must be verified against shopping_mall_user_sessions
   * for validity and expiration. Used to acquire new access/refresh tokens
   * without re-entering credentials.
   */
  export type IRefresh = {
    /**
     * Refresh token string issued at prior authentication event. Must be a
     * valid, non-expired, unrevoked refresh_token as found in
     * shopping_mall_user_sessions. Required for obtaining new JWT
     * access/refresh tokens in the session lifecycle. Typically an opaque
     * string with sufficient entropy for brute-force resistance.
     */
    refresh_token: string;
  };

  /**
   * Payload for initiating a customer password reset process. This payload
   * provides only the customer's email address, as used for account recovery
   * workflows. The API uses this structure to record password reset requests
   * for legitimate customers who have lost or forgotten their credentials.
   * The email must be in valid email format. This operation is mapped
   * directly to shopping_mall_customers (for account lookup) and
   * shopping_mall_password_resets (for reset token issuance/workflow).
   */
  export type IRequestPasswordReset = {
    /**
     * Email address of the customer requesting a password reset. Must match
     * the unique email in shopping_mall_customers. For customer-facing
     * flows, user privacy is protected: the API must not reveal whether an
     * email is registered. Field should be strictly validated for correct
     * email format before passing to backend logic.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Response structure returned by the API after handling a password reset
   * request from a customer. For privacy and security, regardless of whether
   * the email is registered or not, the only allowed result is { result:
   * 'accepted' }, complying with anti-account-enumeration requirements. This
   * DTO is used in the password reset flow for shopping_mall_customers.
   */
  export type IPasswordResetRequestResult = {
    /**
     * Result indicator of the password reset request. If the request is
     * accepted for further processing (whether or not a user exists for the
     * email), this will be 'accepted'. Business rule: no user data or
     * existence information should ever be revealed. The only valid
     * response value is 'accepted'.
     */
    result: "accepted";
  };

  /**
   * Request body for resetting a customer password.
   *
   * This is used in the password reset process when a customer submits a
   * valid reset token (previously delivered via email) and specifies their
   * desired new password. The operation first validates the token, then
   * updates the shopping_mall_customers.password_hash. Never returns or
   * transmits the plain password.
   */
  export type IResetPassword = {
    /**
     * Reset token for password reset flow. Must match a valid, non-expired
     * record in the shopping_mall_password_resets table.
     *
     * The token should be a cryptographically generated secure string,
     * typically sent to the customer's email when requesting a password
     * reset. Used to identify, validate, and authorize the password reset
     * operation.
     */
    token: string;

    /**
     * The new plain text password to set for the customer's account.
     *
     * Must meet platform password policy (minimum length, complexity,
     * etc.), but will always be hashed (using bcrypt or similar) before
     * being stored. Should not be returned in responses or logs. Reset
     * operations use this value to update the password_hash column in
     * shopping_mall_customers.
     */
    newPassword: string;
  };

  /**
   * Response body indicating the outcome of the password reset operation.
   *
   * On success, only 'success: true' is returned. On failure, 'success:
   * false' is given, with optionally an errorCode describing the reason
   * (e.g., 'invalid_token', 'expired_token', 'weak_password'). Never includes
   * credential or account data.
   */
  export type IPasswordResetResult = {
    /**
     * Indicates whether the password reset operation was successful.
     *
     * True if the token was valid, not expired or used, and the password
     * was successfully updated in the database. False if the token was
     * invalid, already used/expired, or the reset request failed for any
     * reason.
     */
    success: boolean;

    /**
     * Error code describing the failure reason, if any. Empty or null when
     * success=true.
     *
     * Provides error context such as 'invalid_token', 'expired_token',
     * 'token_already_used', 'weak_password', or 'internal_error', used for
     * error messaging and UI handling.
     */
    errorCode?: string | null | undefined;
  };

  /**
   * Request structure for initiating a customer email verification process in
   * the e-commerce platform. Contains the target email address for which the
   * verification code or link will be sent. No other input is required or
   * used.
   */
  export type IRequestEmailVerification = {
    /**
     * Email address to be verified via code or verification link for
     * customer onboarding. Must match an existing registration attempt or
     * pending customer account, and conform to standard email format.
     * Typically case-insensitive and unique per customer. No action or
     * error is exposed if the email is not found for privacy/security.
     * Example: "user@example.com"
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Result object for customer email verification initiation request. Always
   * an empty object for privacyâ€”never reveals existence, verification state,
   * or sensitive info about the target email address. Success/failure handled
   * out-of-band (e.g., email sent/logged).
   */
  export type IEmailVerificationRequestResult = {};

  /**
   * Payload for verifying a customer's email address with a one-time
   * verification token. Used in the email verification step for customer
   * onboarding and authentication workflows. Token must match an existing,
   * unexpired record in the system to successfully complete verification and
   * activate the customer's account.
   */
  export type IVerifyEmail = {
    /**
     * The one-time email verification token issued to the customer for
     * activating their account email address. Must be provided exactly as
     * delivered via email. This token is unique, time-limited, and
     * case-sensitive. It is stored and validated against the
     * shopping_mall_email_verifications table.
     */
    token: string;
  };

  /**
   * Result object for a customer's email verification attempt. Used as the
   * response body for email verification endpoints to indicate overall
   * success or failure and provide an actionable message for frontend
   * display. No sensitive data is returned.
   */
  export type IEmailVerificationResult = {
    /**
     * Indicates whether the email verification was successful (true) or
     * failed (false).
     */
    success: boolean;

    /**
     * A user-facing message describing the result of the email verification
     * attempt, e.g., 'Email verified successfully', 'Token expired or
     * invalid', or further next steps. Messages are localized and should be
     * appropriate for both success and failure scenarios.
     */
    message: string;
  };

  /**
   * Search/filtering/pagination request DTO for indexing or searching
   * shopping mall customer accounts. This structure is used for POST/PATCH
   * list/search admins, customer, and other management endpoints. Property
   * names and filter logic align to attributes in shopping_mall_customers as
   * defined in the Prisma schema. Optional fields may be set to null or
   * omitted for broader result sets, and required fields are handled as
   * normal filter/pagination controls.
   */
  export type IRequest = {
    /**
     * Free-text search filter for customer accounts. Supports searching by
     * email, name, or phone as specified in business logic. Null disables
     * text filter.
     */
    search?: string | null | undefined;

    /**
     * Status filter to only include customers with specified status. Valid
     * values are those present in the Prisma model (e.g., 'active',
     * 'suspended', 'pending_verification'). Null disables status filter.
     */
    status?: string | null | undefined;

    /**
     * If true, only customers who have completed email verification will be
     * included. If false, only unverified customers included. Null disables
     * email_verified filter.
     */
    email_verified?: boolean | null | undefined;

    /**
     * Search for customers created after this ISO 8601 timestamp. Null
     * disables lower timestamp filter.
     */
    created_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Search for customers created before this ISO 8601 timestamp. Null
     * disables upper timestamp filter.
     */
    created_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter to customer accounts last updated after this ISO 8601
     * timestamp.
     */
    updated_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter to customer accounts last updated before this ISO 8601
     * timestamp.
     */
    updated_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Page index (1-based) for paginated results. Must be >=1. Null for
     * default (first page).
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Maximum number of records per page. Recommended default = 20, max =
     * 100. Null for platform default.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Field on which to sort returned items. Examples: 'created_at',
     * 'updated_at', 'email'. If null or omitted, results follow default
     * sorting logic (e.g. by created_at DESC).
     */
    sort?: string | null | undefined;

    /**
     * Order direction for sorting. 'asc' or 'desc'. Null for default
     * (usually 'desc').
     */
    order?: string | null | undefined;
  };

  /**
   * Request DTO for updating a customer account profile in the shopping mall
   * platform. All fields are optional and may be updated independently.
   * Properties correspond to updatable fields in the Prisma
   * shopping_mall_customers model, with proper business rule enforcement.
   * This DTO does not permit direct password/hash modification, nor
   * modification of account id or created_at fields. Input must pass all
   * backend validation as governed by the platform's customer profile logic.
   */
  export type IUpdate = {
    /**
     * Customer's full name to be updated. Must conform to business naming
     * conventions and length constraints. Referenced by
     * shopping_mall_customers.full_name. Optional for partial updates.
     */
    full_name?: string | undefined;

    /**
     * Customer's phone number to update. Must pass validation checks but
     * format is unconstrained. Referenced by shopping_mall_customers.phone.
     * Optional for partial updates.
     */
    phone?: string | undefined;

    /**
     * Status string value to set for this customer account. Only allowed
     * fields as per business/admin policy (e.g., 'active', 'suspended').
     * Optional; admin-only update for maintenance or disciplinary actions.
     * See shopping_mall_customers.status.
     */
    status?: string | undefined;

    /**
     * Boolean flag to mark email as verified/unverified. Generally only
     * changed by admin or automated account flows. Optional. Sourced from
     * shopping_mall_customers.email_verified.
     */
    email_verified?: boolean | undefined;
  };

  /**
   * Summary information for a customer used in list views, search results, or
   * admin dashboards. Contains a subset of profile fields to optimize
   * performance and privacy in bulk queries. Based on the
   * shopping_mall_customers Prisma entity, all properties are strictly
   * present and mapped for quick reference without exposing sensitive
   * authentication or full address/profile data. Does not include phone,
   * password_hash, or deleted_at for security. Used in IPage results and
   * other summary/lookup APIs. All fields are guaranteed to exist if the
   * customer row has not been soft-deleted.
   */
  export type ISummary = {
    /**
     * The unique identifier for the customer in the platform database. This
     * property matches the 'id' field in the shopping_mall_customers Prisma
     * model.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Customer's email address for authentication and communications. Must
     * be unique. Sourced from the 'email' column in
     * shopping_mall_customers.
     */
    email: string & tags.Format<"email">;

    /**
     * The customer's displayable full name, used for orders and account
     * management. Sourced from 'full_name' in shopping_mall_customers.
     */
    full_name: string;

    /**
     * Current account status (e.g., active, suspended,
     * pending_verification). Sourced from 'status' in
     * shopping_mall_customers.
     */
    status: string;

    /**
     * Indicates if the customer has completed email verification. Mirrors
     * 'email_verified' field.
     */
    email_verified: boolean;

    /**
     * Customer registration timestamp. Sourced from 'created_at' in
     * shopping_mall_customers.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
