import { tags } from "typia";

/**
 * Order history snapshot record taken at key customer service milestones for
 * audit, compliance, and reporting. Stores a point-in-time record of the order
 * status for reference during cancellation, refund, escalation, or appeal
 * events. Includes business and audit metadata to comply with retention and
 * compliance standards.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrderHistory = {
  /** Primary Key. Unique identifier of the order history snapshot record. */
  id: string & tags.Format<"uuid">;

  /** Belonged order's unique ID. References shopping_mall_orders.id. */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * Type of the customer service event prompting the snapshot (e.g.,
   * 'cancellation', 'refund', 'escalation', 'appeal').
   */
  snapshot_type: string;

  /**
   * Order status at the time of the snapshot. Value is copied for audit
   * context from the related order.
   */
  order_status: string;

  /**
   * Order amount at the time of event (may include applied
   * refunds/cancellation).
   */
  order_total: number;

  /**
   * Business reason or comment associated with this history entry (e.g.,
   * system-generated, admin note, case user update).
   */
  snapshot_reason?: string | undefined;

  /**
   * Timestamp of the snapshot creation for auditing. In ISO 8601 with time
   * zone.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft delete. Indicates record logically removed for data retention, but
   * not physically deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallOrderHistory {
  /**
   * Request DTO for searching or paginating order history snapshot records
   * (shopping_mall_order_histories). Includes filtering parameters such as
   * snapshot type, order status, creation date range, associated order, and
   * custom reason match. Also defines pagination and sorting fields.
   */
  export type IRequest = {
    /**
     * Filter by the type of order snapshot (such as 'cancellation',
     * 'refund', 'escalation', or 'appeal'). Must match snapshot_type values
     * in the shopping_mall_order_histories table.
     */
    snapshot_type?: string | undefined;

    /**
     * Filter by order status at the time of the snapshot. Matches the
     * order_status column. Example: 'cancelled', 'pending', 'completed'.
     */
    order_status?: string | undefined;

    /** Filter for history snapshots created after this ISO 8601 datetime. */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for history snapshots created before this ISO 8601 datetime. */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter by related order's unique ID. Matches
     * shopping_mall_order_histories.shopping_mall_order_id.
     */
    order_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional search or partial string match for reason in the
     * snapshot_reason column.
     */
    snapshot_reason?: string | undefined;

    /** Current page number for pagination. Starts from 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Maximum number of items per page for pagination. */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /** Sort by this field (e.g. created_at). */
    sort_by?: string | undefined;

    /** Sort direction: 'asc' for ascending or 'desc' for descending. */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Update request for a historical order snapshot event in customer service
   * processes.
   *
   * This type is used solely by the admin dashboard for correcting or
   * appending additional context to immutable order history records in the
   * shopping_mall_order_histories table. It only exposes fields permitted by
   * business logic for update; fields such as created_at and deleted_at are
   * immutable and cannot be edited. Intended for audit corrections,
   * compliance notes, or after-action reviews. All modifications are recorded
   * with administrator identity and timestamp in platform audit logs.
   */
  export type IUpdate = {
    /**
     * Business reason or comment associated with this history entry (e.g.,
     * system-generated, admin note, case user update).
     *
     * This field allows the system or admin to annotate a particular order
     * history event, such as why a cancellation snapshot was taken, details
     * about a refund, or explanations for escalation or appeal handling in
     * customer service. Examples include 'System automatic snapshot due to
     * cancellation workflow', 'Admin corrective audit', or 'Escalation
     * snapshot - customer request'. It supports traceability and
     * post-mortem analysis. Field is optional, but detailed explanations
     * enhance auditability and compliance.
     */
    snapshot_reason?: string | undefined;
  };

  /**
   * Summary information about a specific order history snapshot for audit,
   * timeline, and customer service reporting.
   *
   * This object captures the key fields for a single-point-in-time order
   * state during a milestone event (cancellation, refund, escalation,
   * appeal).
   *
   * Built on the shopping_mall_order_histories table. Full detail is
   * retrievable using the IShoppingMallOrderHistory type.
   *
   * Includes: snapshot type, status at event, order total, creation
   * timestamp, and optional business reason/comment. Deleted status is
   * tracked via deleted_at.
   */
  export type ISummary = {
    /**
     * Unique identifier for this order history snapshot. This is the
     * primary key, generated as a UUID, and is used for history retrieval,
     * audit, and escalation context.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Foreign key linking to the parent order whose state is captured in
     * this snapshot. Used for historical state tracking and case/event
     * linking.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Describes the type of event that triggered this snapshot (e.g.,
     * 'cancellation', 'refund', 'escalation', 'appeal'). Used for UI
     * summary and workflow branching.
     */
    snapshot_type: string;

    /**
     * Order status as of the snapshot (e.g., 'pending', 'paid', 'shipped',
     * etc.), copied directly from the order at the time of event. Used for
     * time-based audit, trajectory, or compliance reporting.
     */
    order_status: string;

    /**
     * Total order amount (in platform currency) as of this history event.
     * Used for case investigation, auditing, and order financial tracking.
     */
    order_total: number;

    /**
     * Optional explanation or business comment for this history entry
     * (e.g., escalation context, admin note, user update). Used to surface
     * reason context in support dashboards and compliance logs.
     */
    snapshot_reason?: string | null | undefined;

    /**
     * Timestamp (ISO8601/UTC) of when this snapshot was created. Used for
     * order timeline, investigation, and machine learning analytics.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Soft-delete timestamp. When non-null, this indicates the history is
     * no longer active, but retained for audit and compliance. Null means
     * the record is currently valid and has not been deleted.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
