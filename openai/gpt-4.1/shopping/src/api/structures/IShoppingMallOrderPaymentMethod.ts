import { tags } from "typia";

/**
 * Order payment method snapshot resource, representing the exact point-in-time
 * payment method (type, value, display) referenced by an order or order_payment
 * row. Immutable; aligns exactly with shopping_mall_order_payment_methods
 * Prisma schema. Used for audit, dispute, financial reconciliation, UI display,
 * and support workflows. Exposes only non-sensitive metadata – never allows raw
 * credentials. For security, this is admin/user support-facing, not for
 * credential generation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrderPaymentMethod = {
  /**
   * Primary key for the order payment method snapshot, as stored in
   * shopping_mall_order_payment_methods.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Type of payment method used in the order, corresponding to
   * shopping_mall_order_payment_methods.payment_method_type. Allowed values
   * include 'card', 'bank_transfer', 'paypal', 'virtual_account', or others
   * as per business configuration.
   */
  payment_method_type: string;

  /**
   * Opaque JSON or encoded string containing method-specific metadata as of
   * order creation. For cards this may be masked numbers, for banks this may
   * be encoded account data. Immutable historic record reflecting payment
   * gateway input at checkout. This is stored in
   * shopping_mall_order_payment_methods.method_data.
   */
  method_data: string;

  /**
   * Display-friendly label shown to users and customer service for the
   * payment method (e.g., 'Visa ****1234', 'Toss Pay', 'NongHyup Account',
   * etc.), mapped from shopping_mall_order_payment_methods.display_name.
   */
  display_name: string;

  /**
   * Creation timestamp (ISO 8601, UTC) of the payment method snapshot,
   * aligned with shopping_mall_order_payment_methods.created_at.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallOrderPaymentMethod {
  /**
   * Request DTO for searching, filtering, and paginating order payment method
   * snapshots in shopping_mall_order_payment_methods. Fields align with
   * supported filters from the platform admin UI and Prisma schema. Optional
   * fields enable advanced queries; all are consistent with
   * audit/compliance/review needs.
   */
  export type IRequest = {
    /**
     * Type of payment method for order payment snapshots (e.g., 'card',
     * 'bank_transfer', 'paypal', etc.). Mandatory for defining method
     * during creation or search. Maps directly to
     * shopping_mall_order_payment_methods.payment_method_type in Prisma
     * schema. Must match supported payment method types as configured for
     * the platform.
     */
    payment_method_type?: string | undefined;

    /**
     * Display-friendly string for the payment method, such as 'Visa
     * ****1234', 'Bank Transfer Nonghyup', 'PayPal Account', etc. Used for
     * order confirmation, receipts, and UI purposes. Optional for requests
     * but recommended for better search/index UX.
     */
    display_name?: string | undefined;

    /**
     * Lower bound filter for searching payment method snapshots by creation
     * timestamp (ISO 8601 date-time format). Optional. Used in search APIs
     * supporting complex queries for audits or reporting.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound filter for searching payment method snapshots by creation
     * timestamp (ISO 8601 date-time format). Optional. Used in search APIs
     * supporting complex queries for audits or reporting.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Page number (1-based) for pagination, optional, default is 1. Used
     * for paginated retrieval of payment method snapshots.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Record page size for pagination, optional, default is 20. Controls
     * how many results per page, capped by API policy.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Sort criteria (field) for ordering results, such as 'created_at',
     * 'payment_method_type', etc., as supported by the search API and
     * schema. Optional.
     */
    sort_by?: string | undefined;

    /**
     * Sort order for results ('asc' for ascending, 'desc' for descending)
     * based on sort_by field. Optional; default is 'desc' for
     * recent-first.
     */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * DTO for creating a payment method snapshot at the time of order
   * placement. Maps fields to shopping_mall_order_payment_methods as recorded
   * for audit and reconciliation. Includes all required attributes to
   * reconstruct payment provider interactions and customer receipts. All
   * fields are required. See related business rules on unique display per
   * order, non-sensitive storage of method_data, and audit compliance.
   *
   * References Prisma: shopping_mall_order_payment_methods
   * (payment_method_type, method_data, display_name, created_at).
   */
  export type ICreate = {
    /**
     * Type of method (e.g., card, bank_transfer, paypal, virtual_account).
     * Must match one of the supported values for payment processing and
     * audit.
     */
    payment_method_type: string;

    /**
     * JSON or encoded data for this payment method at time of order (e.g.,
     * masked card, bank name, etc). Must be sufficiently detailed to verify
     * or replay payment event.
     */
    method_data: string;

    /**
     * Masked or obfuscated display for UI (e.g., Visa ****1234). Used for
     * customer-facing receipts and admin compliance screens.
     */
    display_name: string;
  };

  /**
   * DTO for updating an existing payment method snapshot attached to an
   * order. All modifiable fields must be provided, as partial updates are not
   * permitted. Each property references a column in
   * shopping_mall_order_payment_methods (see Prisma schema for details).
   * Usage is typically by admins for audit correction, not regular customer
   * updates.
   *
   * Required due to audit and regulatory requirements for exact payment
   * method provenance. All updates are fully compliant and audit-logged.
   */
  export type IUpdate = {
    /**
     * Updated type of the payment method (see Prisma table comment for
     * supported values). Changing type may be necessary if initial entry
     * was in error or business policy allows—for example, switching between
     * bank_transfer and card.
     */
    payment_method_type: string;

    /**
     * Updated JSON or encoded data for the payment method snapshot (e.g.,
     * corrected masking, updated provider strings). Must always remain
     * non-sensitive and comply with PCI/PII business standards. Only update
     * if a business/audit correction is needed.
     */
    method_data: string;

    /**
     * UI-friendly public display name; e.g., "Visa ****1234". Update to fix
     * masking, clarify display, or improve user visibility after a
     * reconciliation event.
     */
    display_name: string;
  };

  /**
   * Summary data for a point-in-time payment method snapshot used in an
   * order. This type enables efficient listing and selection of payment
   * methods, exposing only display-safe fields and omitting internal method
   * structure, secrets, or PII. Used for audit, UI display, and order payment
   * detail reference.
   */
  export type ISummary = {
    /** Unique identifier for this payment method record. */
    id: string & tags.Format<"uuid">;

    /**
     * Type of payment method (e.g. 'card', 'bank_transfer', 'paypal',
     * 'virtual_account').
     */
    payment_method_type: string;

    /**
     * Display-friendly name for this payment method (e.g., 'Visa ****
     * 1234', 'KakaoPay', 'Hana Bank').
     */
    display_name: string;

    /**
     * Timestamp for when this payment method snapshot was created for the
     * order.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
