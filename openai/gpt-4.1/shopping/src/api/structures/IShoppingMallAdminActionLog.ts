import { tags } from "typia";

/**
 * Admin action log record, representing any significant audit, compliance, or
 * platform management event performed by a system administrator. Each log entry
 * captures the full context of the action, including the acting admin, affected
 * domain/entities, intent, operational details, and audit timestamps.
 *
 * This entity supports full transparency and traceability of key admin actions
 * such as approvals, bans, edits, suspensions, overrides, or detailed
 * interventions. Log entries are immutable after creation (except for rare
 * corrections), and referenced in compliance dashboards, security
 * investigations, and regulatory inquiries. Used only in privileged admin
 * contexts for platform security, audit, and oversight.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAdminActionLog = {
  /**
   * Primary Key. Unique identifier for the admin action log entry in the
   * system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the admin who performed the action. References
   * shopping_mall_admins.id.
   */
  shopping_mall_admin_id: string & tags.Format<"uuid">;

  /**
   * UUID of the affected customer if the action was related to any customer
   * entity. References shopping_mall_customers.id. May be null.
   */
  affected_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the affected seller if the action was related to a seller entity.
   * References shopping_mall_sellers.id. May be null.
   */
  affected_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the affected product if the action was related to a product
   * entity. References shopping_mall_products.id. May be null.
   */
  affected_product_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the affected order if the action was related to an order entity.
   * References shopping_mall_orders.id. May be null.
   */
  affected_order_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the affected review if the action was related to a review entity.
   * References shopping_mall_reviews.id. May be null.
   */
  affected_review_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of admin action performed (e.g., approval, ban, suspend, override,
   * edit, restore, delete, escalation, etc.) as recorded in the audit log.
   * Used to classify the event for compliance and reporting.
   */
  action_type: string;

  /**
   * Human-readable description of why the admin action was performed.
   * Required for compliance and operational history. Explains the intent and
   * context for the action.
   */
  action_reason: string;

  /**
   * Domain or entity type affected by the admin action (e.g., customer,
   * seller, product, order, review, system, etc). Indicates which area of the
   * platform was impacted and how the action should be classified in audit
   * reports.
   */
  domain: string;

  /**
   * Serialized JSON string with structured pre/post values, audit context, or
   * additional operational details for the action. Used for deep compliance
   * audits and root cause analysis. May be null if no extended details
   * provided.
   */
  details_json?: string | null | undefined;

  /**
   * ISO 8601 timestamp of when the admin action occurred and was logged in
   * the system.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAdminActionLog {
  /**
   * Request filter and search criteria for querying admin action logs. This
   * DTO enables advanced admin-side search, filtering, sorting, and
   * pagination of systemwide admin activity for compliance and operational
   * transparency.
   *
   * Entity fields such as action_type, affected_domain, and acting_admin_id
   * allow for highly granular search of platform security and operational
   * actions. Optional time range filters and pagination options scale for
   * large result sets. Used exclusively on platform admin audit/search
   * endpoints for privileged users.
   */
  export type IRequest = {
    /**
     * Type of the admin action being searched for (e.g., approval, ban,
     * override, suspend, restore, etc.). This value is typically used as a
     * filter to narrow down the types of administrative actions included in
     * the search results.
     */
    action_type?: string | undefined;

    /**
     * Domain or entity type affected by the action, such as customer,
     * seller, product, order, or review. Used for filtering which area of
     * the platform was affected by the logged admin action.
     */
    affected_domain?: string | undefined;

    /**
     * UUID of the affected business entity (customer, seller, product,
     * order, or review), if the search should be filtered for a specific
     * entity record.
     */
    affected_entity_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * UUID of the admin for whom action logs are retrieved (used to filter
     * by actions performed by a specific administrator).
     */
    acting_admin_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter for logs created on or after this ISO 8601 timestamp
     * (inclusive).
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for logs created on or before this ISO 8601 timestamp
     * (inclusive).
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for paginated queries (starting from 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of records to retrieve per page. Platform default and
     * max limits may apply.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * Field by which to sort the results. Supported fields: 'created_at',
     * 'action_type'.
     */
    sort_by?: "created_at" | "action_type" | undefined;

    /**
     * Sort order for the sort_by field. Either 'asc' (ascending) or 'desc'
     * (descending).
     */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Schema for creating a new admin action log entry. Represents a single
   * admin-side intervention on a core business entity, with full audit trail
   * for compliance and transparency. Field mapping directly follows the
   * shopping_mall_admin_action_logs Prisma schema; required properties
   * reflect business process and legal requirements for audit and recovery.
   * All identifiers refer to the respective entity tables.
   */
  export type ICreate = {
    /**
     * The unique identifier of the admin performing the action. Refers to
     * the admin's id in the shopping_mall_admins table.
     */
    shopping_mall_admin_id: string & tags.Format<"uuid">;

    /**
     * If the action targets a customer, the customer's unique id. Nullable
     * if the action does not concern a specific customer.
     */
    affected_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If the action targets a seller, the seller's unique id. Nullable if
     * not applicable.
     */
    affected_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If the admin action involves a product, the product's unique id.
     * Nullable if not applicable.
     */
    affected_product_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If the admin action involves an order, the order's unique id.
     * Nullable if not applicable.
     */
    affected_order_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If the admin action involves a review, the review's unique id.
     * Nullable if not applicable.
     */
    affected_review_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The type of admin action. Example values: approval, ban, suspend,
     * override, edit, restore, etc.
     */
    action_type: string;

    /**
     * The business or compliance reason for the admin action; required for
     * all log entries.
     */
    action_reason: string;

    /**
     * The domain/entity type affected by the action (customer, seller,
     * product, order, review, system, etc).
     */
    domain: string;

    /**
     * Structured JSON blob with action context, such as before/after values
     * or detailed audit context. May be null if not used.
     */
    details_json?: string | null | undefined;
  };

  /**
   * Schema for admin updates to an existing action log entry. Permits limited
   * correction (action_type, action_reason, details_json). Edits are
   * controlled for audit compliance: only non-identifier, mutable properties
   * may be set. Mapped to the shopping_mall_admin_action_logs model. All
   * update events are further audited.
   */
  export type IUpdate = {
    /**
     * Admin action type. May only be updated for correction; must match
     * domain-specific taxonomy (e.g., approval, ban, suspend, override,
     * edit, restore).
     */
    action_type?: string | undefined;

    /**
     * Updated action rationale. Used if explanation for the admin action or
     * compliance note changes after review or incident correction.
     */
    action_reason?: string | undefined;

    /**
     * New or additional structured audit details, such as full before/after
     * context, attachments, or external references. Must be a stringified
     * JSON content. Optional.
     */
    details_json?: string | undefined;
  };

  /**
   * Summary record for a platform admin action log.
   *
   * Contains main metadata for high-level auditing, compliance, or dashboard
   * listing. See `shopping_mall_admin_action_logs` for details.
   */
  export type ISummary = {
    /**
     * Unique identifier for this admin action log entry.
     *
     * References `shopping_mall_admin_action_logs.id`.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Admin user who performed the action.
     *
     * References `shopping_mall_admins.id`.
     */
    shopping_mall_admin_id: string & tags.Format<"uuid">;

    /**
     * Type of admin action (e.g., approval, ban, restore, suspend,
     * override, edit, etc).
     *
     * Column `action_type`.
     */
    action_type: string;

    /**
     * Reason for the admin action. Compliance/audit context.
     *
     * References `shopping_mall_admin_action_logs.action_reason`.
     */
    action_reason: string;

    /**
     * Affected business domain/entity (e.g., customer, seller, product,
     * order, review, system, etc).
     *
     * References `shopping_mall_admin_action_logs.domain`.
     */
    domain: string;

    /**
     * Timestamp when this log entry was created (action performed).
     *
     * References `shopping_mall_admin_action_logs.created_at`.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
