import { tags } from "typia";

/**
 * Details a single item (SKU line) in an order. This DTO includes all
 * properties required to audit product purchase, inventory, pricing, refund
 * state, and compliance with e-commerce platform regulations. Direct mapping to
 * shopping_mall_order_items schema; ensures every order item is traceable,
 * immutable where needed, and supports full order detail/reconciliation flows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrderItem = {
  /**
   * Primary Key. Unique identifier for the order item, as defined in the
   * shopping_mall_order_items table. Used to distinguish each SKU entry in an
   * order, this field references the order_items entity for precise updates,
   * deletes, and audit. Must always be a valid UUID generated by the system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Parent order's {@link shopping_mall_orders.id}. This field links an order
   * item directly to its owning order, and is strictly required to establish
   * the item's context within a transactional order. Always a UUID
   * referencing shopping_mall_orders. This property cannot be modified after
   * creation, preserving full audit traceability.
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * Purchased SKU's {@link shopping_mall_product_skus.id}. Indicates the
   * specific product variant being purchased. Required and immutable after
   * creation; this field must match a SKU present in the
   * shopping_mall_product_skus table and cannot be set to a deleted SKU.
   */
  shopping_mall_product_sku_id: string & tags.Format<"uuid">;

  /**
   * Display name of the product/SKU at time of purchase. Used for historical
   * record/tracking, even if product/SKU names change later. Required for
   * customer and admin order history review, and is always stored as the
   * point-in-time name for accurate reporting.
   */
  item_name: string;

  /**
   * Business code/string for the SKU, such as 'SKU-123-RED-M'. Copied exactly
   * from the product SKU at purchase time for order detail precision.
   * Required for all line item history and downstream fulfillment/logistics.
   */
  sku_code: string;

  /**
   * Units purchased for this SKU. Integer greater than zero; enforced by
   * business logic and validated at creation. This value must always match
   * inventory movement and is essential for refund/cancellation logic.
   */
  quantity: number & tags.Type<"int32">;

  /**
   * Unit price at purchase time (may include discounts). Copied at order
   * creation and never updated, ensuring point-in-time accuracy for receipts,
   * audit, and reporting.
   */
  unit_price: number;

  /**
   * ISO 4217 currency code (e.g., 'KRW', 'USD'). Set at order item creation
   * to support multi-currency accounting and reporting.
   */
  currency: string;

  /**
   * Line item total: quantity × unit_price less any per-item discounts. Used
   * for order summary calculations and must always reflect the actual payment
   * history at the time the order is placed.
   */
  item_total: number;

  /**
   * Status of refund/cancellation for this item (e.g., 'none', 'pending',
   * 'refunded', 'cancelled'). Set and managed via order flows and required
   * for business & regulatory reporting.
   */
  refund_status: string;

  /**
   * Timestamp representing when this order item was created. Used for
   * auditing, reporting, and sorting, it is set automatically by the database
   * logic.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp representing when this order item was most recently updated.
   * Used for concurrency control, audit trails, and timelines; managed
   * automatically by backend.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp if this item is logically deleted. Null if still
   * present/active in order; used for deletion audit, compliance, and
   * regulatory/tax audits. Not visible in user order history after deletion,
   * only in admin/audit views.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallOrderItem {
  /**
   * Request type to search/filter/paginate line items in a specific order.
   * Contains standard pageable/filterable/searchable fields and custom logic
   * for retrieving subsets of order items given an order context. Used in
   * admin, seller, and customer interfaces for reviewing order breakdowns,
   * status, or inventory audit. Business logic enforces filtering, sorting,
   * and access controls on permissible fields.
   */
  export type IRequest = {
    /**
     * Page number for pagination. If not set, defaults to the first page.
     * Must be >= 1 for paginated results.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Maximum number of items to return per page. Platform/business rules
     * may set upper and lower bounds for this value. If not set, uses API
     * or business default.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Sorting mode for order items. Acceptable values may depend on
     * available business logic or UI verticals (e.g., created_at desc, name
     * asc, etc.).
     */
    sort?: string | null | undefined;

    /**
     * Full-text search string for filtering items by product/SKU name,
     * code, or user-facing text fields.
     */
    search?: string | null | undefined;

    /**
     * Filter by refund/cancellation status of order items (e.g., none,
     * pending, refunded, cancelled). Value depends on the platform's
     * allowable item-level status states.
     */
    status?: string | null | undefined;

    /**
     * Filter results by specific SKU code within the order (for detailed
     * review or management of specific order line items).
     */
    sku_code?: string | null | undefined;

    /**
     * Filter items by the name of the product/SKU at the time of purchase.
     * Business logic may allow partial or full matches for enhanced search
     * and reporting.
     */
    product_name?: string | null | undefined;
  };

  /**
   * Payload for creating a new order item (SKU line) in an existing order.
   * Maps strictly to the shopping_mall_order_items schema for every required
   * field, supporting e-commerce platform logic for order placement,
   * inventory checks, payment, and detailed audit. Security: Use ONLY for
   * authorized actors (admin, system, internal order processing logic) – not
   * end-user/UI form. All fields are captured at order item creation and
   * cannot be altered afterwards for compliance.
   */
  export type ICreate = {
    /**
     * Parent order's {@link shopping_mall_orders.id}. Must reference a valid
     * order created in the order placement process. Required for mapping
     * new order items to specific transactions.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * SKU to be included in the order. Must reference a published and
     * in-stock SKU from shopping_mall_product_skus. This is mandatory to
     * ensure accurate inventory locking and order fulfillment tracking.
     */
    shopping_mall_product_sku_id: string & tags.Format<"uuid">;

    /**
     * Display name of the ordered SKU, captured at order creation time.
     * Immutable after creation, used for order detail/audit history. Must
     * match current product SKU name at the moment of order.
     */
    item_name: string;

    /**
     * Business code for the SKU (e.g., 'T-SHIRT-L-BLACK'). Set for SKU
     * tracking downstream. Copied from current SKU at purchase for
     * immutable order history.
     */
    sku_code: string;

    /**
     * Number of units for this SKU to be included in the order. Must be at
     * least 1 and not exceeding current inventory or per-order maximum.
     * Used for inventory locking and fulfillment calculations.
     */
    quantity: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Price per unit of the SKU at purchase time, copied from SKU at order
     * creation. Used to ensure historic pricing and integrity of
     * receipts/invoices. Cannot be changed after the item is added.
     */
    unit_price: number;

    /**
     * Currency code (ISO 4217; e.g., 'KRW'). Required to support
     * multi-currency operation and correct billing/accounting. Set to match
     * order's main currency.
     */
    currency: string;

    /**
     * Computed as quantity × unit_price, may be adjusted for discounts at
     * creation if applicable. Used for order payment/reconciliation at
     * audit. Must match intended line item charge.
     */
    item_total: number;
  };

  /**
   * Update DTO for modifying a specific line item (SKU) in an order.
   *
   * This schema is used for updating an existing order item in the shopping
   * mall platform, as described in the Orders module of the Prisma schema. It
   * allows admins to adjust fields such as quantity and unit price before
   * fulfillment, but only for items in eligible states (e.g., before shipment
   * or refund). All fields are validated for business rules, and audit
   * logging is required for traceability. Required and optional fields are
   * matched exactly to the shopping_mall_order_items columns per update
   * policy.
   *
   * Reference: shopping_mall_order_items (Prisma ERD).
   */
  export type IUpdate = {
    /**
     * The new quantity for this order item.
     *
     * Must be >= 1. Reflects the updated quantity of SKUs requested for
     * this item. Actual availability and over-sale logic are enforced by
     * business rules before allowing downward adjustment. Automated
     * validation ensures no negative or zero values can be set (validation
     * error otherwise).
     *
     * Reference: shopping_mall_order_items.quantity (Prisma).
     */
    quantity?: (number & tags.Type<"int32">) | undefined;

    /**
     * The new unit price for the order item, if adjustment is allowed
     * (float).
     *
     * Only admins can update price. Must be >= 0. Used to correct pricing
     * errors, apply planned adjustments, or in rare refund/admin workflows.
     * Standard flows don't allow unit price changes after order placement
     * unless explicitly permitted by compliance rules.
     *
     * Reference: shopping_mall_order_items.unit_price (Prisma ERD).
     */
    unit_price?: number | undefined;

    /**
     * Optional display name to update the product/SKU name on the order
     * line. Typically only set by admin for correction purposes. If not
     * specified, the name remains unchanged.
     *
     * Reference: shopping_mall_order_items.item_name (Prisma ERD).
     */
    item_name?: string | undefined;

    /**
     * Currency code for the item pricing. Must be a valid ISO-4217 currency
     * code (e.g. 'KRW', 'USD'). Usually does not change after order
     * creation except in rare admin override scenarios.
     *
     * Reference: shopping_mall_order_items.currency (Prisma ERD).
     */
    currency?: string | undefined;

    /**
     * Optional change of the item-level refund/cancellation state. Controls
     * item eligibility for refund/cancel, as permitted by business logic.
     * Enum values as described in business rules (e.g., 'none', 'pending',
     * 'refunded', 'cancelled'). Usually restricted to admin updates.
     *
     * Reference: shopping_mall_order_items.refund_status (Prisma ERD).
     */
    refund_status?: string | undefined;
  };

  /**
   * Summary DTO for a single item line in an order.
   *
   * This schema is a streamlined representation of an order line item for use
   * in paginated order lists, summary views, and support dashboards. It omits
   * heavyweight relations (e.g., full product/SKU detail objects) to support
   * efficient transport. All fields are directly mapped to columns in
   * shopping_mall_order_items and relevant for audit, analytics, customer
   * order history, and basic fulfillment logic.
   *
   * Refer to shopping_mall_order_items table in the Prisma schema for
   * detailed constraints and audit requirements. Do not include heavy
   * relations or join-computed fields in summary variant. If new column
   * constraints are added in Prisma, update this schema accordingly.
   */
  export type ISummary = {
    /**
     * Order item unique identifier.
     *
     * References the shopping_mall_order_items.id column. Serves as the
     * primary key for order item rows, uniquely linking to the particular
     * line in the order for audit, retrieval, and any updates or
     * deletions.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Parent order's unique identifier.
     *
     * References shopping_mall_order_items.shopping_mall_order_id and links
     * this line item back to the order for relationship, reconciliation,
     * and API queries. Required for joining summary to complete order or
     * order history views.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Purchased SKU identifier at time of order.
     *
     * References shopping_mall_product_skus.id. The SKU scope ensures
     * proper product variant assignment, price/option/cancellation linkage,
     * and supports inventory, fulfillment tracking, and after-sales flows.
     */
    shopping_mall_product_sku_id: string & tags.Format<"uuid">;

    /**
     * Display name of the product or SKU at the moment this item was
     * included in the order.
     *
     * Snapshots the marketing or user-facing name for audit, customer
     * communications, and history even if the product, listing, or SKU name
     * changes after purchase. Often present in order confirmation
     * emails/receipts for buyer clarity.
     */
    item_name: string;

    /**
     * Business code or string for SKU/business traceability.
     *
     * References the SKU code used in inventory, logistics, or business
     * documents, and remains stable for analytics, shipment, and
     * multi-system integration regardless of internal id changes.
     */
    sku_code: string;

    /**
     * Number of units of this product/SKU purchased.
     *
     * Non-negative. Refers to the total units for the line item—used for
     * fulfillment, refund/cancellation calculations, and inventory
     * decrement/audit. Enforced per-platform maximum for cart/purchase.
     */
    quantity: number & tags.Type<"int32">;

    /**
     * Unit price (per item) at the time the order was placed, in the
     * currency of the order.
     *
     * Snapshots the price for audit, refund, history, and future
     * calculations regardless of catalog changes. Used in line with
     * shopping_mall_order_items.unit_price for financial reconciliation and
     * analytics.
     */
    unit_price: number;

    /**
     * Currency code (ISO 4217, e.g., KRW, USD).
     *
     * Matches the currency from the order header
     * (shopping_mall_orders.currency) and ensures proper display and
     * calculations for this line, including conversion if multi-currency
     * checkout is supported.
     */
    currency: string;

    /**
     * Order-line total price for this item line after multiplying unit
     * price and quantity (and adjusted for discounts, if applicable), at
     * order placement.
     *
     * Serves as the per-line sum for order total aggregation/audit, refund
     * eligibility, and support. Calculated as: Quantity * Unit Price - any
     * per-line discount.
     */
    item_total: number;

    /**
     * Status of refund or cancellation for this item.
     *
     * E.g., 'none', 'pending', 'refunded', 'cancelled'. Reflects current
     * post-order operations and is updated in case of customer requests,
     * admin/seller processing, and audit flows.
     */
    refund_status: string;

    /**
     * Timestamp of initial order item row creation.
     *
     * Audit/event field for seeing when this line was purchased/committed;
     * useful for analytics and troubleshooting.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last modification to this order item row.
     *
     * Supports auditing, reconciliation, and order history drill-down for
     * fulfillment or after-sales workflows.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for soft deletion, if item line is logically removed or
     * cancelled/deleted.
     *
     * Nullable—if present, the order line is treated as deleted for
     * business logic and not shown in normal active views.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
