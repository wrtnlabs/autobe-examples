import { tags } from "typia";

/**
 * Represents a selectable value for a specific product option (e.g., a possible
 * color or size). This object maps to a row in the
 * shopping_mall_product_option_values table. Key properties: id (UUID PK),
 * shopping_mall_product_option_id (link to the owning option), value (the
 * selection text), display_order (order for UI), and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallProductOptionValue = {
  /** Primary key. Uniquely identifies this product option value in the system. */
  id: string & tags.Format<"uuid">;

  /**
   * The parent option for this value (foreign key). References
   * shopping_mall_product_options.id. E.g., links 'Large' to the 'Size'
   * option of a product.
   */
  shopping_mall_product_option_id: string & tags.Format<"uuid">;

  /**
   * The display value for this product option value. E.g., for Size: 'L'; for
   * Color: 'Blue'. Should be unique per product option. Used in SKU
   * configuration and customer choice. Required, usually 1–32 chars.
   */
  value: string;

  /**
   * Ordering among sibling values for UI display. Determines the order in
   * which this value appears in the product variant picker or detail page.
   * Typically 0-based, contiguous, and useful for UX sorting by
   * seller/admin.
   */
  display_order: number & tags.Type<"int32">;

  /**
   * Created time for value (ISO 8601; UTC). Set automatically when the value
   * is created. Used for audit trails, ordering, and advanced search.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Date/time this value was last modified. Auto-managed. Important for cache
   * invalidation, UI refresh, and synchronization with external systems.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallProductOptionValue {
  /**
   * Request body for searching/filtering option values (e.g., for Color,
   * Size) belonging to a specific product option. The schema fields allow: 1)
   * searching by value name, 2) filtering on product and option, 3) filtering
   * by creation date, 4) paginating large lists, and 5) sorting by value or
   * order. All fields are optional—used for advanced search, admin filtering,
   * and UI list rendering. Matches the search/index operation for option
   * values. This DTO is associated with GET/PATCH endpoints for option value
   * lists. Used in both seller/admin and (read-only) customer UI contexts.
   */
  export type IRequest = {
    /**
     * Unique identifier (UUID) of the product this option value belongs to.
     * This allows scoping filtering or searching to a single product.
     */
    productId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Unique identifier (UUID) of the product option (e.g., color, size)
     * whose values are being listed or filtered. Ties this search to a
     * particular attribute of a product.
     */
    optionId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Text value of the option (e.g., 'Red', 'Large'). Searching or
     * filtering by exact or partial match is supported in this field.
     */
    value?: string | undefined;

    /**
     * Ordering of this value among sibling values for the product option.
     * Enables sorting by display sequence in listings or UIs. Used as a
     * search or sorting criterion.
     */
    display_order?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional filter: Only return option values created on or after this
     * UTC datetime (ISO 8601). Used for time-based paging/queries.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional filter: Only return option values created on or before this
     * UTC datetime (ISO 8601).
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Page number of results to return, for paginated search/filtering.
     * Default is 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of results per page, for paginated results. Default
     * and max controlled by platform settings.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Field to sort results by (e.g., 'value', 'created_at',
     * 'display_order'). Defaults to display_order if not provided.
     */
    sort_by?: string | undefined;

    /** Sort order direction: 'asc' or 'desc'. Default is ascending. */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * DTO for creating a new product option value (e.g., 'Red', 'Large') on a
   * product option (such as color, size). This is submitted by sellers or
   * admins when defining available choices for variant SKUs for a product.
   * All fields are required and based on the
   * shopping_mall_product_option_values Prisma model.
   */
  export type ICreate = {
    /**
     * Display value for this option (e.g., 'Red'). Reference for product
     * variants such as color/size/material that are selectable by users.
     * Must be unique for this product option. Usually presented as a label
     * in the UI. Required. (Prisma: value column in
     * shopping_mall_product_option_values table)
     */
    value: string;

    /**
     * Ordering among sibling option values for UX display. 0-based integer
     * index, with lower values appearing first in UI. Required for
     * consistent option picker experiences. (Prisma: display_order in
     * shopping_mall_product_option_values table)
     */
    display_order: number & tags.Type<"int32">;
  };

  /**
   * DTO for updating a product option value (such as changing display text or
   * reorder). All fields are optional; only supplied fields will be updated.
   * All updates must comply with uniqueness and format restrictions as per
   * the Prisma schema for shopping_mall_product_option_values.
   */
  export type IUpdate = {
    /**
     * Updated display value for this option (e.g., 'Blue'). Must remain
     * unique among all option values for the parent product option. Changes
     * trigger display/variant updates for existing SKUs. Optional; omit or
     * use null to leave unchanged.
     */
    value?: string | undefined;

    /**
     * Updated sort/order index for this option value. Determines ordering
     * in pickers/forms. Optional; omit or use null to leave unchanged.
     */
    display_order?: (number & tags.Type<"int32">) | undefined;
  };
}
