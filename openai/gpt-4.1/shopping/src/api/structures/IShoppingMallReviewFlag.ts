import { tags } from "typia";

/**
 * Represents a record in the review flag (shopping_mall_review_flags) table.
 * Flags are created by customers, sellers, or admins to indicate a product
 * review that might violate platform rules (abuse, spam, policy violation).
 * Stores detailed context for moderation, including who flagged the review, the
 * reason, optional note, moderation status, and audit timestamps. Designed for
 * use in both moderation queues and audit histories, matching business
 * requirements for structured and traceable moderation across the platform.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallReviewFlag = {
  /**
   * Primary key of the review flag. Uniquely identifies this flag entry in
   * the database (shopping_mall_review_flags table). Reference for audit,
   * moderation queue, and administrative decision-making.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the ID of the product review being flagged. Links
   * this flag to a unique product review for which moderation or audit is
   * required.
   */
  shopping_mall_review_id: string & tags.Format<"uuid">;

  /**
   * Optional foreign key referencing the customer who submitted the flag (if
   * actor is a customer). Indicates who reported the review for abuse, spam,
   * or policy violation. Field is nullable if flag was created by a seller or
   * admin.
   */
  shopping_mall_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional foreign key referencing the seller who submitted the flag (if
   * actor is a seller). Used for moderation workflows involving seller
   * reports of problematic reviews on their products. Nullable if flag
   * created by a customer or admin.
   */
  shopping_mall_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional foreign key referencing the admin who submitted or processed the
   * flag (if actor is an admin). Present for admin-initiated moderation
   * actions or escalations.
   */
  shopping_mall_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Code or descriptive reason for the flag (e.g., 'abuse', 'spam',
   * 'policy_violation'). Guides the moderation process and enables structured
   * queues and analytics for review quality.
   */
  reason: string;

  /**
   * Optional internal note for this flag, providing additional context or
   * moderator comments. May contain arbitrary text, only visible to admin
   * users handling moderation and audit.
   */
  note?: string | null | undefined;

  /**
   * Workflow status of the review flag. Possible values include 'open',
   * 'resolved', 'rejected'. Determines if this flag still requires moderation
   * action or has been closed. Used for filtering flags in moderation
   * dashboards.
   */
  status: string;

  /**
   * Timestamp indicating when this flag was created. Used for audit,
   * reporting, and moderation timeline tracking. ISO 8601 date-time format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating when this flag was last updated, for audit and
   * moderation process tracking. ISO 8601 date-time format.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallReviewFlag {
  /**
   * Schema for creating a new flag on a product review, used when a user
   * (customer, seller, or admin) reports a product review for abuse, spam, or
   * policy violations. The schema ensures every flag includes a valid
   * reference to the flagged review, a reason code or description, and
   * optionally, a detailed note for moderation context. Flags are persisted
   * in the shopping_mall_review_flags table and are designed to support
   * structured moderation across the e-commerce platform. All properties
   * reflect the business rules and requirements for review flagging and
   * moderation.
   */
  export type IRequest = {
    /**
     * Unique identifier of the product review being flagged for moderation
     * or abuse concerns. Must refer to an existing review in the context of
     * a product. This property ensures the flag is linked to a valid review
     * and helps maintain moderation audit trails.
     */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Short description or code indicating the reason why the review is
     * being flagged (e.g., 'abuse', 'spam', 'inappropriate content',
     * 'policy_violation'). Used to guide the moderation process for
     * administrators reviewing flagged content. Required to support
     * structured moderation queues and reporting.
     */
    reason: string;

    /**
     * Optional internal note added by the actor creating the flag. Can
     * include additional context or explanation for the flag (e.g.,
     * specifics of the violation not captured by the reason code). This
     * narrative is not typically displayed to general users but is used for
     * audit and moderation handling.
     */
    note?: string | null | undefined;
  };

  /**
   * Payload for creating a review flag in the e-commerce shopping mall review
   * moderation system. Used by customers, sellers, or admins to report a
   * review for moderation (spam, policy violation, abuse, etc.). The object
   * is persisted to the shopping_mall_review_flags table with references to
   * actor and review, status set to 'open', and timestamps as per moderation
   * policy. Only properties defined here may be set.
   */
  export type ICreate = {
    /**
     * The reason for flagging the review, such as 'abuse', 'spam',
     * 'policy_violation', or another clear summary of the moderation
     * concern. Required for all flag submissions. Must match flag options
     * supported by moderation business logic and may be displayed to
     * moderators/admins for audit and triage. Example: 'abuse',
     * 'profanity', 'scam', 'unhelpful', 'irrelevant', 'false_advertising'.
     */
    reason: string;

    /**
     * Optional internal note or additional explanation justifying the flag,
     * supporting audit and complex moderation. Used to provide context or
     * elaboration for the flag. May be shown to admin or support staff
     * during moderation workflow. Optional for most users but required for
     * admin-triggered flags or bulk moderation use cases. Example: 'User
     * exhibits repeated abusive behavior in other reviews.'
     */
    note?: string | null | undefined;
  };

  /**
   * Payload for updating a review flag record in the e-commerce platform
   * review moderation table. Used by moderators, admins, or possibly the
   * flagging user, to mark a flag as resolved, rejected, or to add internal
   * notes. Status controlling moderation workflow, and notes for audit or
   * clarification, are the main modifiable fields.
   */
  export type IUpdate = {
    /**
     * Update the note text for this flag. Typically used by moderator/admin
     * to supplement the flag record with context or audit information. May
     * also be used for the flagging user to further elaborate their report.
     * Nullable if not updating or clearing the note.
     */
    note?: string | null | undefined;

    /**
     * Update the moderation status of the flag. Must be one of the
     * following values: 'open', 'resolved', 'rejected'. Used by admins or
     * moderators to close, resolve, or reject a moderation workflow.
     * Controls visibility of the flag in dashboards; changing status to
     * 'resolved' or 'rejected' will archive the flag, while 'open' keeps it
     * active in the moderation queue.
     */
    status: "open" | "resolved" | "rejected";
  };

  /**
   * Summary representation of a product review flag for moderation search,
   * listing, and queue workflows.
   *
   * Represents a single report of policy violation or abuse for a review,
   * including flagger role, report reason, admin/seller/customer association,
   * reason code, short admin note, workflow status, and audit timestamps.
   *
   * Built on the shopping_mall_review_flags table, this summary is used for
   * pagination and dashboard display. Full detail is retrieved with the
   * IShoppingMallReviewFlag type.
   */
  export type ISummary = {
    /**
     * Unique identifier (UUID) for this review flag record. This ID serves
     * as the primary key in the shopping_mall_review_flags table and is
     * used for searching, moderation, and targeted administrative actions.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The foreign key linking to the parent product review this flag
     * references. Used to join with the target review in the
     * shopping_mall_reviews table for moderation and reporting.
     */
    shopping_mall_review_id: string & tags.Format<"uuid">;

    /**
     * Optional: The UUID of the customer who filed the flag. May be null if
     * flagged by a seller or admin. Used for source attribution and
     * role-based moderation workflows.
     */
    shopping_mall_customer_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Optional: The UUID of the seller who filed this flag. May be null for
     * customer-initiated reports or admin actions. Enables per-seller
     * moderation metrics.
     */
    shopping_mall_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional: The UUID of the admin who created or processed the flag.
     * Null if not admin-initiated. Used for policy enforcement and
     * escalated moderation.
     */
    shopping_mall_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Short reason code or description for why the review was flagged
     * (e.g., 'abuse', 'spam', 'policy_violation'). Used for aggregation,
     * analytics, and surfacing moderation queues. Must follow
     * platform-enforced reason taxonomy.
     */
    reason: string;

    /**
     * Optional internal note for admin handling, escalation, or tracking
     * resolution context. Provides extra information for the moderator and
     * is hidden from public UI.
     */
    note?: string | null | undefined;

    /**
     * Flag workflow state indicating open/active moderation, a resolved
     * flag, or a rejected/cleared report. Governs visibility in admin
     * dashboards and moderation queues.
     */
    status: "open" | "resolved" | "rejected";

    /**
     * Timestamp (ISO8601, UTC) when flag was created, for audit and event
     * ordering.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp (ISO8601, UTC) indicating when the flag was last updated,
     * for audit and historical state tracking.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
