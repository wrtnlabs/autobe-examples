import { tags } from "typia";

/**
 * Order refund entity type.
 *
 * Represents an audited record of all refund requests/events for an order. Each
 * refund object maintains a reason code, initiator actor, amount, status,
 * currency, and full audit trail. Some fields (e.g., refunded_payment_id,
 * settled_at, admin initiator, explanation) are nullable as refunds can be
 * created by either customer or admin, and not all refunds settle immediately.
 * This component is used both for reading and updating refund state and is
 * essential for order history, auditing, and business reporting.
 *
 * Status field must align with valid business logic transitions, and all
 * updates are subject to audit logging for compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrderRefund = {
  /**
   * Primary key of the refund record. Uniquely identifies each refund event
   * in shopping_mall_order_refunds.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Parent order's unique identifier, references shopping_mall_orders.id.
   * Required for establishing refund-event linkage.
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * FK to the order payment this refund applies to (nullable if not refunded
   * directly against a payment).
   */
  refunded_payment_id?: (string & tags.Format<"uuid">) | undefined;

  /** Customer who requests the refund (nullable if admin-initiated). */
  initiator_customer_id?: (string & tags.Format<"uuid">) | undefined;

  /** Admin who handled or initiated the refund event (nullable). */
  initiator_admin_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Refund business reason code (customer_cancel, failed_delivery, defective,
   * overcharge, goodwill, etc).
   */
  reason_code: string;

  /**
   * Current refund event status (pending, approved, denied, completed,
   * failed, etc).
   */
  status: string;

  /** Amount refunded for this event (may be partial or full for the order). */
  refund_amount: number;

  /** Currency code for refund amount. */
  currency: string;

  /** Timestamp when refund is requested. */
  requested_at: string & tags.Format<"date-time">;

  /** Timestamp when payout is completed (nullable if pending/denied). */
  settled_at?: (string & tags.Format<"date-time">) | undefined;

  /** Explanatory note/audit text for refund decisions (nullable). */
  explanation?: string | undefined;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update/modification for audit/compliance. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallOrderRefund {
  /**
   * Request payload for submitting a new order refund. Includes reference to
   * the target order, optional payment record, required business reason for
   * audit logging, refund amount (partial or full refund supported), the
   * currency code matching the order, and an optional textual explanation.
   * The schema ensures business, compliance, and customer service information
   * is captured.
   */
  export type ICreate = {
    /**
     * The unique identifier (UUID) of the order for which the refund is
     * being requested. Must reference an existing order in the system.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * If refunding a specific payment (e.g., for partial/multiple
     * payments), provide the unique payment id. Nullable for full order
     * refunds.
     */
    refunded_payment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Business reason code for the refund (customer_cancel,
     * failed_delivery, defective, overcharge, goodwill, etc.). Required for
     * logging and compliance.
     */
    reason_code: string;

    /**
     * The amount to be refunded for this refund event. Must be a positive
     * decimal (float), less than or equal to eligible paid amount. Partial
     * refunds are supported, as are full refunds.
     */
    refund_amount: number;

    /**
     * 3-letter ISO currency code representing the refund currency (e.g.,
     * 'USD', 'KRW'). Match to order's currency. Required for accounting and
     * multi-currency scenarios.
     */
    currency: string;

    /**
     * Optional free-text explanation for the refund request, supporting
     * audit trails, customer service notes, or user-provided detail.
     */
    explanation?: string | undefined;
  };

  /**
   * Update payload for an existing order refund event. Permits status
   * transition (e.g., pending->approved, approved->completed), updating the
   * business reason or explanation, and capturing final resolution method.
   * Used by admin or seller roles for managing refund workflow and recording
   * audit trail.
   */
  export type IUpdate = {
    /**
     * New status for the refund event. Should be one of: 'pending',
     * 'approved', 'denied', 'completed', 'failed', etc. Status machine
     * explains lifecycle transitions. Only allowed to use exact business
     * enum values validated at service.
     */
    status?: string | undefined;

    /**
     * Set or update the method/outcome of appeal closure or review (e.g.,
     * 'refund-granted', 'upheld-denial', 'manual override'). Specifies how
     * the refund event was finalized.
     */
    resolution_type?: string | undefined;

    /**
     * Add or update a free-text administrative or system explanation for
     * the refund event, such as reasoning for approval/denial.
     */
    explanation?: string | undefined;
  };
}
