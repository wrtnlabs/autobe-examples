import { tags } from "typia";

/**
 * Moderation event log entity for the shopping mall platform. Represents
 * administrative or automated moderation events affecting sellers, products,
 * reviews, or orders, including flagging, removals, approvals, warnings, or
 * escalations. Supports full audit trail and compliance. Follows the Prisma
 * schema for shopping_mall_moderation_event_logs. All properties are strictly
 * as defined by the database model and business rule documentation.
 *
 * This schema must be detailed, with each property referencing column-level
 * documentation from Prisma for clarity and business context.
 *
 * This type is used as the main DTO for representing moderation log detail in
 * responses, admin dashboards, audits, or any system task requiring event-level
 * inspection of moderation activity.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallModerationEventLog = {
  /**
   * Primary Key.
   *
   * Unique identifier for the moderation event log entry, as defined in the
   * Prisma schema (`@id`).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Admin who performed the moderation (foreign key reference to
   * shopping_mall_admins.id). This identifies the moderator responsible for
   * the action.
   */
  shopping_mall_admin_id: string & tags.Format<"uuid">;

  /**
   * Optional: The seller affected by this moderation log, if applicable
   * (shopping_mall_sellers.id). Null if not related to a seller (e.g.,
   * product or order only).
   */
  affected_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional: The product affected by this moderation log, if applicable
   * (shopping_mall_products.id). Null if not related to a product (e.g.,
   * seller-only or review-only).
   */
  affected_product_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional: The review affected by this moderation log
   * (shopping_mall_reviews.id). Null if this is not a review-related event.
   */
  affected_review_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional: The order affected by this moderation log, if referenced
   * (shopping_mall_orders.id).
   */
  affected_order_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of moderation event (e.g., flag, removal, approval, annotation,
   * warning, escalation). Enumerated business codes as strings. Must match
   * the schema's event_type values and moderation policy documentation.
   */
  event_type: string;

  /**
   * Free-text explanation for the moderation or exception event. Provided by
   * the acting admin for audit, moderation context, and future
   * investigation.
   */
  moderation_message: string;

  /**
   * Timestamp of moderation event creation, for audit and time ordering. Must
   * be ISO 8601 format.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallModerationEventLog {
  /**
   * Request body schema for listing moderation event logs via advanced
   * filtering. Used by admin dashboards to search/filter moderation logs
   * (flag, approval, etc) across products, sellers, reviews, and orders.
   * Provides pagination, time window filtering, and advanced query options
   * for detailed audit and moderation operations.
   *
   * Properties reflect fields in shopping_mall_moderation_event_logs table
   * and standard pagination/sorting for admin reporting UI. Use null or omit
   * filters for catch-all retrieval. Enum values must match platform field
   * population as per business rules.
   */
  export type IRequest = {
    /** Filter for moderation events performed by this admin (optional). */
    shopping_mall_admin_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for type of moderation event, e.g., flag, removal,
     * approval, annotation, warning, escalation, etc. Must match values as
     * stored in event_type field.
     */
    event_type?: string | undefined;

    /**
     * Optional filter for moderation events affecting a specific seller
     * (UUID).
     */
    affected_seller_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for moderation events affecting a specific product
     * (UUID).
     */
    affected_product_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for moderation events affecting a specific review
     * (UUID).
     */
    affected_review_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for moderation events affecting a specific order
     * (UUID).
     */
    affected_order_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional ISO 8601 lower bound for event creation time, for range
     * queries.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional ISO 8601 upper bound for event creation time, for range
     * queries.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Pagination: page number (1-based). Optional, defaults to 1 if
     * omitted.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Pagination: maximum records per page, defaults to 20. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<250>)
      | undefined;

    /**
     * Optional sorting field, accepts values like 'created_at:desc',
     * 'event_type:asc', etc. May choose a default if omitted.
     */
    sort?: string | undefined;
  };

  /**
   * DTO for creating a new moderation event log entry in the shopping mall
   * moderation system. Used when recording new administrative moderation
   * actions, such as policy enforcement, moderation interventions, or
   * exception events.
   *
   * Strictly limited to fields allowed during creation; does not include
   * system-generated fields (id, created_at) which are generated by the
   * backend. Each field matches the Prisma schema's column documentation and
   * the business logic implied by moderation flow requirements.
   */
  export type ICreate = {
    /**
     * The admin user's (moderator's) identifier who is performing this
     * moderation action.
     */
    shopping_mall_admin_id: string & tags.Format<"uuid">;

    /**
     * If the moderation affects a seller, this is the UUID of the seller.
     * Optional for moderation events not targeting sellers.
     */
    affected_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If the moderation affects a product, this UUID references the
     * product. Otherwise null.
     */
    affected_product_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If the moderation event affects a review, this field holds the UUID
     * of that review. Null if not applicable.
     */
    affected_review_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If the moderation event is related to a specific order (e.g., fraud,
     * shipping issues), this field references the affected order. Null if
     * not applicable.
     */
    affected_order_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of moderation event being created. Examples: 'flag', 'removal',
     * 'approval', 'annotation', 'warning', 'escalation'. Must comply with
     * business enumeration for event_type.
     */
    event_type: string;

    /**
     * Required. Human-readable message or rationale for the moderation
     * event, written by the acting admin. Explains the context of the
     * moderation decision for audit and investigation.
     */
    moderation_message: string;
  };

  /**
   * Schema for updating a moderation event log entry associated with the
   * shopping_mall_moderation_event_logs table.
   *
   * Each moderation event log tracks actions performed by an admin on
   * platform entities (e.g., product, review, seller, order) in the shopping
   * mall system. This update type allows admins to change properties such as
   * the event type, moderation message, or references to affected entities.
   * Only strict subsets of the fields are updatable, always following
   * traceability and compliance requirements. This DTO is used for PATCH
   * actions by admin users to correct or supplement previous moderation event
   * logs. Related business logic enforces permission and audit integrity.
   *
   * Refer to the original Prisma schema and business rules for updatable
   * fields. Typically, the fields include:
   *
   * - Event_type (e.g., flag, removal, approval, warning, escalation, etc.)
   * - Moderation_message (reason for action or correction)
   * - Affected_seller_id, affected_product_id, affected_review_id,
   *   affected_order_id (entity references, as needed)
   * - No timestamp or acting admin fields are updatable via this DTO. All
   *   changes are audit-logged by the platform.
   */
  export type IUpdate = {
    /**
     * Type of moderation event (e.g., flag, removal, approval, annotation,
     * warning, escalation, etc.). Must match platform-defined values.
     */
    event_type?: string | undefined;

    /**
     * Audit message or explanation for the moderation action. Used for
     * compliance, event context, or error correction.
     */
    moderation_message?: string | undefined;

    /**
     * UUID reference to the affected seller, if this event relates to a
     * seller entity. Nullable if not applicable.
     */
    affected_seller_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * UUID reference to the affected product, if this event relates to a
     * product entity. Nullable if not applicable.
     */
    affected_product_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * UUID reference to the affected review, if this event relates to a
     * product review. Nullable if not applicable.
     */
    affected_review_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * UUID reference to the affected order, if this event relates to an
     * order entity. Nullable if not applicable.
     */
    affected_order_id?: (string & tags.Format<"uuid">) | undefined;
  };

  /**
   * Summary representation of a moderation event log, primarily for paginated
   * or search-oriented views for admin dashboards. This type references the
   * shopping_mall_moderation_event_logs table and omits deep entity
   * references for compactness. It is suitable for monitoring platform
   * actions on sellers, products, reviews, or orders, and for audit context
   * in admin operational reviews.
   */
  export type ISummary = {
    /** Unique identifier for this moderation event log record. */
    id: string & tags.Format<"uuid">;

    /** Reference to the admin who performed this moderation event. */
    shopping_mall_admin_id: string & tags.Format<"uuid">;

    /**
     * Type of moderation event (e.g., 'flag', 'removal', 'approval',
     * 'annotation', 'warning', 'escalation').
     */
    event_type: string;

    /**
     * Message or comment associated with the moderation action (truncated
     * or summarized if needed).
     */
    moderation_message: string;

    /** Timestamp when the moderation event was recorded. */
    created_at: string & tags.Format<"date-time">;
  };
}
