import { tags } from "typia";

/**
 * Represents a line item within a customer's wishlist, linking a specific
 * product to their wishlist record. Each instance of this type corresponds to a
 * row in the shopping_mall_wishlist_items table. The wishlist item forms a
 * many-to-one relationship between the user's wishlist and multiple possible
 * products, supporting advanced client-side product tracking, removal, and
 * notification for stock changes or deletions.
 *
 * Ownership is strictly enforced so that only the owner of the wishlist can
 * view or modify their associated wishlist items. Suitable for use in detailed
 * retrieval and management APIs, customer dashboards, and user-facing wishlist
 * management interfaces.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallWishlistItem = {
  /**
   * Unique identifier for the wishlist item.
   *
   * This property corresponds to the 'id' field in the
   * shopping_mall_wishlist_items table. It is a UUID (Universally Unique
   * Identifier) which uniquely distinguishes each wishlist item record in the
   * database.
   *
   * This ID can be used for retrieving or manipulating the wishlist item in
   * subsequent API operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the wishlist this item belongs to.
   *
   * References the 'shopping_mall_wishlist_id' column in
   * shopping_mall_wishlist_items and is a foreign key to the parent wishlist.
   * Ensures that this item is associated with the correct user's wishlist and
   * enables efficient querying by wishlist membership.
   */
  shopping_mall_wishlist_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the product referenced by this wishlist item.
   *
   * References the 'shopping_mall_product_id' column in
   * shopping_mall_wishlist_items and is a foreign key into
   * shopping_mall_products, linking the wishlist item to a specific product
   * that has been favorited by the user.
   *
   * This linkage supports product detail lookups and business logic for
   * removing products from all wishlists in case of product deletion.
   */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /**
   * Timestamp indicating when this wishlist item was created.
   *
   * Corresponds to the 'created_at' field in shopping_mall_wishlist_items.
   * This field records when the user added the product to their wishlist. It
   * is used in sorting, analytics, and history display.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating the last time the wishlist item was updated.
   *
   * This property matches the 'updated_at' column in
   * shopping_mall_wishlist_items, marking the most recent modification (such
   * as product update, reorder, or re-addition).
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallWishlistItem {
  /**
   * DTO for searching, filtering, and paginating wishlist items for a
   * specific wishlist. This type is used in API operations for advanced
   * retrieval of products added to a customer's wishlist, and accepts options
   * for filtering by product name, product category, item addition
   * timestamps, and sorting. Pagination controls are standard.
   */
  export type IRequest = {
    /**
     * Optional product name filter. If set, only wishlist items referencing
     * products whose name contains this substring (case-insensitive,
     * language-agnostic where possible) will be included in the results.
     *
     * Useful for searching wishlists with many items by product keyword.
     */
    product_name?: string | undefined;

    /**
     * Optional product category filter. If specified, returns only wishlist
     * items referencing products within this category. Must be a valid UUID
     * referencing shopping_mall_categories.id.
     */
    category_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for wishlist items added after this timestamp (ISO
     * 8601).
     *
     * Useful for incremental sync or audit. For example:
     * '2025-06-01T00:00:00Z'.
     */
    added_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional filter for wishlist items added before this timestamp (ISO
     * 8601).
     *
     * Useful for retrospective data review.
     *
     * Example: '2025-06-28T00:00:00Z'.
     */
    added_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort order for wishlist items:
     *
     * - Created_at-desc: Newest added first (default)
     * - Created_at-asc: Oldest added first
     * - Updated_at-desc: Most recently updated first
     * - Updated_at-asc: Least recently updated first
     */
    sort?:
      | "created_at-desc"
      | "created_at-asc"
      | "updated_at-desc"
      | "updated_at-asc"
      | undefined;

    /**
     * Page number for pagination (1-based). If omitted, defaults to 1. Used
     * in conjunction with limit.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of results per page (for pagination). Default is 20.
     * Cannot exceed 100.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Payload schema for creating a new wishlist item in a user's wishlist.
   * Only the wishlist's owner may use this operation. The client must only
   * provide the product's UUID to be added to the wishlist. The system will
   * internally resolve the wishlist association via session or access
   * context; the wishlist ID is not accepted from client input to prevent
   * security bypass.
   *
   * Security checks enforce user ownership and validate that the product
   * being added exists and is available. Duplicate entries (same product in
   * the same wishlist) are prevented by a unique constraint and will trigger
   * a business rule error if violated. This structure forms the body of POST
   * requests to add new wishlist items.
   */
  export type ICreate = {
    /**
     * Product identifier to be added to the wishlist.
     *
     * Maps to the 'shopping_mall_product_id' field in
     * shopping_mall_wishlist_items. This is the only input required from
     * the client to create a wishlist item, as the wishlist ID will be
     * inferred server-side via authentication/session context (never posted
     * by the client for security reasons).
     *
     * UUID format is required. Must correspond to an active product in the
     * shopping_mall_products table. Attempting to add a non-existent or
     * deleted product should result in business validation error.
     */
    shopping_mall_product_id: string & tags.Format<"uuid">;
  };

  /**
   * Update information for a wishlist item associated with the shopping mall
   * e-commerce platform. This DTO is used for PATCH/PUT operations against a
   * specific wishlist item belonging to a customer's wishlist, as defined in
   * the shopping_mall_wishlist_items table of the Prisma schema.
   *
   * The schema allows updates only to modifiable properties of a wishlist
   * item. It DOES NOT include foreign keys to the parent wishlist or product,
   * which are immutable after creation for data integrity. Typical updatable
   * fields may include auxiliary metadata (such as customer notes or custom
   * tags), and timestamps like updated_at are handled by the system. No
   * business logic supports changing the associated customer or
   * productâ€”updates are limited to non-relational, supplementary fields, if
   * present in the schema.
   *
   * The update operation enforces all business validation rules and audit
   * requirements. If this model supports custom metadata fields on wishlist
   * items (e.g., 'note', 'priority'), such fields should be represented here.
   * Properties not present in the Prisma schema must not be included. Only
   * explicit updatable fields for the wishlist item may appear, and all
   * description and validation rules must match the
   * shopping_mall_wishlist_items table definition.
   */
  export type IUpdate = {};
}
