import { tags } from "typia";

/**
 * Main product review entity referencing shopping_mall_reviews. Contains
 * author, product, order verification, moderation status, timestamps, and body.
 * All fields are directly mapped from the review record, except derived or
 * joined fields (not present here).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallReview = {
  /** Primary key of the review entry. */
  id: string & tags.Format<"uuid">;

  /** The reviewed product's unique ID. Foreign key to product entity. */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /** Order verifying the purchase for the review (ensures verified buyer). */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /** Authoring customer's unique ID. */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /** Star rating for review (integer: 1-5). Required. */
  rating: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>;

  /** Review body text (required, 10-2000 characters). */
  body: string & tags.MinLength<10> & tags.MaxLength<2000>;

  /**
   * Moderation status for the review (e.g., 'pending', 'approved',
   * 'rejected', or 'hidden').
   */
  status: string;

  /**
   * Optional comment or annotation (public moderation/admin/seller note on
   * review).
   */
  comment?: string | undefined;

  /** Timestamp when the review was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the review was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete flag, timestamp (ISO8601) if review was deleted. Null if not
   * deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallReview {
  /**
   * Request body for searching or filtering product reviews. Allows for
   * complex review queries by product, status, rating, date, and paginated
   * results.
   */
  export type IRequest = {
    /**
     * Unique identifier (UUID) of the product for which the reviews are
     * being requested. Used to scope the review search request to a
     * particular product.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * Optional filter by review moderation status (e.g., approved, pending,
     * rejected, hidden).
     */
    status?: string | undefined;

    /**
     * Optional filter for star rating. If provided, only return reviews
     * with this rating.
     */
    rating?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>)
      | undefined;

    /**
     * Optional filter for reviews created after or at this ISO 8601
     * timestamp.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional filter for reviews created before or at this ISO 8601
     * timestamp.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional sort field for the review listing. 'created_at' means sort
     * by creation timestamp; 'rating' sorts by star rating.
     */
    sort_by?: "created_at" | "rating" | undefined;

    /** Sort order for sorting (ascending or descending). */
    sort_order?: "asc" | "desc" | undefined;

    /** Page number for pagination (default 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Maximum number of reviews per page (default 20, max 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Create DTO for a new product review. Used by a customer after completing
   * a purchase to submit a review for a product, referencing their order for
   * verification. All required fields are enforced by the review creation
   * workflow.
   */
  export type ICreate = {
    /**
     * Order verifying purchase. This field links the review to the order as
     * verified proof of purchase for the (customer, product, order)
     * constraint. Must be a valid UUID referencing an order the customer
     * has purchased. Required.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Star rating for the product, integer from 1-5 specified by the
     * customer. Must follow the discrete 1,2,3,4,5 range. Required.
     */
    rating: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>;

    /**
     * Main review text. Customer's written feedback for the product, from
     * 10 to 2000 characters. Content is validated, subject to moderation,
     * and stored as-is. Required.
     */
    body: string & tags.MinLength<10> & tags.MaxLength<2000>;
  };

  /**
   * Update DTO for an existing customer review. Permits updating rating or
   * body. Each field is optional but must comply with the original validation
   * constraints if supplied. Partial updates are allowed.
   */
  export type IUpdate = {
    /**
     * Star rating for the product (integer 1-5), allowing update. Optional;
     * must be provided if updating rating. If omitted, retains previous
     * value.
     */
    rating?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>)
      | undefined;

    /**
     * Main review text, allowing modification. If present, must be 10-2000
     * characters. Content change triggers moderation. Optional; if omitted,
     * prior review body is retained.
     */
    body?: (string & tags.MinLength<10> & tags.MaxLength<2000>) | undefined;
  };

  /**
   * Minimal review summary for list views, product display, or moderation,
   * exposing rating, status, and body excerpt. Intended to enable efficient
   * browse/search interfaces and summary panels. Full review details (e.g.,
   * moderation history, attached images, comments) are not included. Use for
   * aggregate/info/preview contexts.
   */
  export type ISummary = {
    /** Unique identifier for this review record. */
    id: string & tags.Format<"uuid">;

    /** Star rating, integer 1-5. */
    rating: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>;

    /**
     * Review moderation status: 'pending', 'approved', 'rejected', or
     * 'hidden'. Decides visibility and eligibility for aggregation/reward.
     */
    status: string;

    /** Review body text snippet (full or truncated as needed for summary). */
    body: string;

    /** Review creation timestamp (for audit and timeline sorting). */
    created_at: string & tags.Format<"date-time">;
  };
}
