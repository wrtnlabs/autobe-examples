import { tags } from "typia";

/**
 * Full representation of a product SKU (Stock Keeping Unit) from the
 * shopping_mall_product_skus table (Catalog namespace). This DTO is used as
 * both the main response schema and internal type for SKU fetching and
 * mutations. Every property in this type directly maps to a single column in
 * the Prisma model. All attributes and descriptions reference the Prisma schema
 * comments.
 *
 * Sensitive or non-public properties are never included per DTO
 * requirements—only columns that exist in the schema and are needed for
 * external DTO usage should appear. All date/time fields are in ISO 8601
 * format. Documentation is in English only for every property and the schema
 * itself.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallProductSku = {
  /**
   * Primary Key of the SKU record. Directly maps to 'id' in
   * shopping_mall_product_skus.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the parent product's ID
   * ('shopping_mall_product_id').
   */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /** Business-unique identifier for this SKU (column: 'sku_code'). */
  sku_code: string;

  /** Display name for the SKU (column: 'name'). */
  name: string;

  /** Sell price for this SKU as stored in the 'price' field (DoublePrecision). */
  price: number;

  /** SKU status (e.g., 'active', 'inactive', 'blocked'); field: 'status'. */
  status: string;

  /**
   * Custom low-stock notification threshold. Maps to 'low_stock_threshold',
   * nullable.
   */
  low_stock_threshold?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * URL for the primary image of the SKU. Corresponds to 'main_image_url',
   * nullable, VarChar(80000).
   */
  main_image_url?: string | null | undefined;

  /**
   * Creation timestamp for the SKU record (ISO 8601 format). 'created_at'
   * field.
   */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp (ISO 8601). Maps to 'updated_at' in Prisma schema. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-delete timestamp. Null if not deleted. Field: 'deleted_at'. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallProductSku {
  /**
   * DTO for searching, filtering, and paginating the list of product SKUs
   * (variants) for a given product as defined in the
   * shopping_mall_product_skus table. This DTO supports advanced search
   * scenarios for catalog and inventory management—filtering by SKU name,
   * status, price range, inventory status, and sort/pagination options.
   *
   * All properties strictly match fields in the shopping_mall_product_skus
   * model and related filter/search conventions for paged API requests. Only
   * properties that exist in the schema may appear here, and business logic
   * constraints from requirements are enforced at the DTO boundary. This
   * schema should never include properties not present in the DB models. All
   * documentation is written in English, referencing the original Prisma
   * model fields.
   */
  export type IRequest = {
    /**
     * Filter by partial or exact match of SKU display name. Referenced in
     * the Prisma schema as 'name'. Uses GIN/Trigram index for efficient
     * search.
     */
    name?: string | undefined;

    /**
     * Filter by SKU business code/unique identifier. Corresponds to
     * 'sku_code' in shopping_mall_product_skus.
     */
    sku_code?: string | undefined;

    /**
     * Filter by enumerated SKU status, as defined in the status column
     * (e.g. 'active', 'inactive', 'blocked').
     */
    status?: string | undefined;

    /**
     * Minimum price (inclusive) to filter SKUs in the search result. Mapped
     * to the 'price' field (DoublePrecision) in the Prisma model.
     */
    price_min?: number | undefined;

    /**
     * Maximum price (inclusive) to filter SKUs in the search result. Mapped
     * to the 'price' field (DoublePrecision) in the Prisma model.
     */
    price_max?: number | undefined;

    /**
     * Filter for SKUs created at or after this timestamp (ISO 8601). Uses
     * 'created_at' column in shopping_mall_product_skus.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for SKUs created at or before this timestamp (ISO 8601). */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for SKUs updated at or after this timestamp. */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for SKUs updated at or before this timestamp. */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort field for the SKU list. Allowed values: 'name', 'price',
     * 'status', 'created_at', 'updated_at'.
     */
    sort_by?:
      | "name"
      | "price"
      | "status"
      | "created_at"
      | "updated_at"
      | undefined;

    /** Sort order for the query. Allowed values: 'asc' or 'desc'. */
    sort_order?: "asc" | "desc" | undefined;

    /** Page number for paginated results. Must be >= 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of SKUs to return per page. Maximum 100 per system limits. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Payload for creating a new SKU (Stock Keeping Unit) associated with a
   * specific product in the shopping mall catalog.
   *
   * Each SKU represents a sellable variant, uniquely identified by sku_code
   * and a specific combination of option values (e.g., color, size). The
   * input must specify all required attributes for the SKU, including price,
   * status, and the set of option value IDs that define the variant
   * identity.
   *
   * Refer to the shopping_mall_product_skus table for all field validations
   * and business rules. All required fields must correspond to existing
   * values in the catalog's option and option value definitions. Ownership
   * and authorization are enforced by the provider logic, not here.
   *
   * All fields are strictly validated based on schema constraints.
   */
  export type ICreate = {
    /**
     * Business-unique identifier for this SKU (e.g. GTIN, or logical code).
     *
     * This field must be unique among all SKUs and should conform to the
     * seller or business's SKU code policies for inventory and reporting
     * integrity.
     */
    sku_code: string;

    /**
     * Display name for this SKU (e.g., 'Red L').
     *
     * Used for identifying the variant in management interfaces and buyer
     * selection flows. Must be unique per product for meaningful option
     * selection.
     */
    name: string;

    /**
     * Sell price for this SKU.
     *
     * Specifies the retail price for this variant, in the platform's
     * standard currency. Must be a positive value and match
     * business/pricing rules.
     */
    price: number;

    /**
     * SKU status such as 'active', 'inactive', 'blocked', etc.
     *
     * Status controls order eligibility and visibility in the sales UI.
     * Typical values: 'active' (available for purchase), 'inactive', or
     * 'blocked'.
     *
     * Refer to catalog status workflow for valid states.
     */
    status: string;

    /**
     * Custom low-stock warning threshold for this SKU (optional).
     *
     * When present, signals a stock warning at or below this level;
     * platform default may be used if unset.
     */
    low_stock_threshold?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Primary SKU image URL, used in option selection. Optional: If not
     * set, product main image is used.
     */
    main_image_url?: string | null | undefined;
  };

  /**
   * DTO for updating properties of a product SKU (Stock Keeping Unit) in the
   * shopping mall catalog.
   *
   * All fields are optional; supply only those to be updated for the SKU.
   * Each property corresponds to a column in the shopping_mall_product_skus
   * table. Must comply with the business rules: e.g., updates to sku_code or
   * option values maintain uniqueness, price changes are validated, and
   * status transitions observed.
   */
  export type IUpdate = {
    /**
     * Business-unique identifier for this SKU (e.g. GTIN, or logical code).
     *
     * Updates the SKU code if needed, must remain unique among all SKUs.
     * Optional in the update schema: if not supplied, sku_code is
     * unchanged.
     */
    sku_code?: string | undefined;

    /**
     * Display name for this SKU (e.g., 'Red L').
     *
     * Used for identifying the variant and must be unique per product. Can
     * be updated if required for product management.
     */
    name?: string | undefined;

    /**
     * Sell price for this SKU. Optional: Only update if the price changes.
     * Value must remain positive.
     */
    price?: number | undefined;

    /**
     * SKU status such as 'active', 'inactive', 'blocked', etc.
     *
     * Update SKU's sale state: reference catalog workflow for allowed
     * transitions.
     */
    status?: string | undefined;

    /**
     * Custom low-stock warning threshold for this SKU (optional).
     *
     * May be set or updated by seller/admin to refine inventory warnings.
     * Use null to clear.
     */
    low_stock_threshold?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Primary SKU image URL (optional). If not set, product main image is
     * used.
     */
    main_image_url?: string | null | undefined;
  };
}
