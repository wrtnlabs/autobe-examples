import { tags } from "typia";

/**
 * Represents a detailed log entry for a single administrative/audit event
 * performed by a platform admin.
 *
 * Captures event type, responsible admin, affected domain, structured event
 * context, severity, and precise creation timestamp. Supports full compliance,
 * traceability, and governance requirements for admin monitoring, incident
 * response, and regulatory audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAdminAuditLog = {
  /** Primary key, unique identifier for this audit log record. */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the administrator who performed the action. Foreign key referencing
   * the admin users table.
   *
   * Used to link the log to the precise actor responsible for the event.
   * Required for full audit compliance.
   */
  shopping_mall_admin_id: string & tags.Format<"uuid">;

  /**
   * Type of audit event (e.g., 'login', 'permission_grant', 'system_setting',
   * 'ban', 'account_unlock', 'delete_entity', etc.).
   *
   * Serves as a classifier for log entries, supporting advanced search and
   * reporting.
   */
  audit_event_type: string;

  /**
   * The operational area, module, or domain impacted by this admin action.
   * Examples: 'platform', 'user_management', 'orders', 'catalog', 'reviews',
   * etc.
   *
   * Supports domain-based audit filtering.
   */
  domain: string;

  /**
   * Serialized JSON data containing context for this event. May include
   * before/after snapshots for updated entities, or additional structured
   * information for action traceability.
   *
   * Not meant for general user viewing; primarily for admin, audit, and
   * incident review.
   */
  event_context_json?: string | undefined;

  /**
   * Severity or importance of the event (e.g., 'info', 'warning',
   * 'critical').
   *
   * Used to prioritize log entries for review and regulation compliance.
   * Values may be restricted by business policy (see platform documentation
   * for enum or allowed values).
   */
  log_level: string;

  /**
   * Timestamp when the audit log entry was recorded (ISO 8601 date-time).
   * Used for sorting, reporting, and audit trace.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAdminAuditLog {
  /**
   * Search and filtering parameters for retrieving a paginated list of
   * administrative audit log records from shopping_mall_admin_audit_logs.
   *
   * This type enables advanced search across event type, time range, domain,
   * log level, admin, and keyword fields. Supports pagination, sorting, and
   * all query-related controls required by the admin dashboard or compliance
   * auditing tools.
   */
  export type IRequest = {
    /**
     * Filter logs by specific administrator's unique ID (UUID).
     *
     * The value must reference a valid admin record if present. Enables
     * focused audit for a single acting admin or subset of actions.
     * Optional; if omitted, all admins are included in the result.
     */
    admin_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter specifying the type of audit event (e.g., 'login',
     * 'permission_grant', 'system_setting', etc.). Only logs matching this
     * type will be returned if provided. Referenced from the enum of
     * possible audit actions in the admin audit log schema.
     */
    audit_event_type?: string | undefined;

    /**
     * Filter for administrative actions taken in a specific domain or
     * operational context (e.g., 'orders', 'products', 'users',
     * 'platform'). Optional; returns all domains if not specified.
     */
    domain?: string | undefined;

    /**
     * Filter for logs by severity or log level (e.g., 'info', 'warning',
     * 'critical'). Applies if specific audit event priorities are tracked.
     * Optional.
     */
    log_level?: string | undefined;

    /**
     * Lower-bound ISO 8601 timestamp to filter logs created at or after
     * this time.
     */
    created_at_min?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper-bound ISO 8601 timestamp. Only logs created before (or at) this
     * time are included.
     */
    created_at_max?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Free-text or keyword search across event context, reason, affected
     * entity, and relevant fields. Supports partial/fuzzy matching with
     * trigram index if supported by database.
     */
    q?: string | undefined;

    /**
     * Page number to retrieve for paginated queries. Defaults to 1. Must be
     * greater than or equal to 1.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of results per page (page size). Defaults to a
     * platform-configured value such as 100; max value enforced by API to
     * prevent over-fetching.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Field to sort results by, e.g., 'created_at', 'log_level',
     * 'admin_id'. Must be a valid field in the admin audit log table.
     */
    sort_by?: string | undefined;

    /**
     * Whether to sort in descending order (true) or ascending order
     * (false). Default is descending order by creation date for newest
     * first.
     */
    desc?: boolean | undefined;
  };

  /**
   * Schema for creating a new admin audit log entry, as per
   * shopping_mall_admin_audit_logs Prisma table. Records all critical
   * platform administrative events for compliance review. Mutually exclusive
   * from admin action log, used for immutable admin activity reporting and
   * regulatory review.
   *
   * Properties reference underlying columns: admin id, event type, domain
   * context, detailed JSON state snapshot, and log level. Use this DTO when a
   * new audit trail record is required. This type never records user/customer
   * sensitive data directlyâ€”references only admin and abstracted structured
   * context.
   */
  export type ICreate = {
    /**
     * Acting admin's unique identifier from the shopping_mall_admins table.
     * Required.
     */
    shopping_mall_admin_id: string & tags.Format<"uuid">;

    /**
     * Type of audit event being logged, e.g., login, permission_grant,
     * system_setting, etc. Must be a concise identifier.
     */
    audit_event_type: string;

    /**
     * Domain context for the admin action, e.g., platform, user_management,
     * orders, products, etc.
     */
    domain: string;

    /**
     * Optional serialized JSON context with before/after states, details,
     * etc. Use for advanced audit scenarios.
     */
    event_context_json?: string | null | undefined;

    /**
     * Audit log level, e.g., info, warning, critical, based on the nature
     * of the event.
     */
    log_level: string;
  };

  /**
   * Summary information about an administrative audit log event for platform
   * governance and compliance. Used for overviews and paginated listing of
   * audit logs. This type references the shopping_mall_admin_audit_logs table
   * and only includes summary fields, not detailed JSON context or sensitive
   * event data. Intended for admin dashboard log listings, audits, or
   * operational reviews.
   */
  export type ISummary = {
    /** Unique identifier for the admin audit log record. */
    id: string & tags.Format<"uuid">;

    /** Reference to the admin user who performed the action. */
    shopping_mall_admin_id: string & tags.Format<"uuid">;

    /**
     * Type of audit event (e.g., 'login', 'permission_grant',
     * 'system_setting', etc.).
     */
    audit_event_type: string;

    /**
     * Domain of the administrator action (e.g., 'platform',
     * 'user_management', 'orders').
     */
    domain: string;

    /**
     * Severity or level of the audit event ('info', 'warning', 'critical',
     * etc.).
     */
    log_level: string;

    /** Timestamp when the admin action event was recorded in the system. */
    created_at: string & tags.Format<"date-time">;
  };
}
