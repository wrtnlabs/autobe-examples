import { tags } from "typia";

/**
 * Represents a customer's wishlist for saving favorite products for later
 * viewing or purchase. This model enforces one wishlist per customer, with
 * ownership enforced by the shopping_mall_customer_id. Includes audit fields
 * for creation and update, with soft-delete support (deleted_at). Used
 * throughout the shopping mall for personalizing UX, product promotion, and
 * conversion analysis. References the shopping_mall_wishlists Prisma schema,
 * see schema and ERD for relationship details.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallWishlist = {
  /**
   * Primary key of the wishlist. A globally unique identifier assigned to
   * each wishlist instance. Used for lookups, linking, and API referencing.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID of the customer who owns this wishlist, referring to the
   * corresponding row in shopping_mall_customers. Enforces one-to-one
   * ownership—each customer has at most one wishlist. Used to secure
   * ownership, enforce privacy, and enable CRUD operations linked to session
   * context.
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the wishlist was created. Used for ordering, retention
   * policy, and business logic on historical list entries. Immutable once
   * set.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last update or modification to this wishlist or its
   * items. Changes every time the wishlist is altered. Used for order-by, UI
   * updates, and business rules for 'most recent change.'
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallWishlist {
  /**
   * Structured filtering, search, and pagination parameters for retrieving a
   * customer's wishlist or for aggregating wishlist products. This DTO is
   * used in shoppingMall wishlist index/search APIs and supports use cases
   * such as product filtering, sorting, pagination, and applying category or
   * name-based filters. All properties are optional to support partial and
   * flexible query logic. Pagination fields conform to standard page/limit
   * patterns with default/maximums enforced by business logic. Only
   * properties defined here may be submitted by API clients.
   */
  export type IRequest = {
    /**
     * Page number for pagination (1-based index). Optional; defaults to 1
     * if omitted.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of results to return per page. Optional; platform may apply
     * limits or defaults if omitted.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Free-text search filter for product names, description, or keywords
     * in wishlist. Optional.
     */
    search?: string | undefined;

    /**
     * Filter to only include wishlist items that belong to a specific
     * product category, referenced by category UUID. Optional.
     */
    categoryId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Sort order field for wishlist items; supports 'created_at' and
     * 'updated_at'. Optional.
     */
    orderBy?: "created_at" | "updated_at" | undefined;

    /**
     * Direction for sorting (ascending/descending). Optional; default is
     * 'desc' if unspecified.
     */
    orderDirection?: "asc" | "desc" | undefined;
  };

  /**
   * DTO for creating a new wishlist entity. No fields are required because
   * wishlists are always created in the context of the authenticated customer
   * (ownership is inferred from session/token). Schema guarantees one
   * wishlist per customer. No request properties are needed—creation is
   * triggered contextually. See shopping_mall_wishlists Prisma schema.
   */
  export type ICreate = {};

  /**
   * DTO for updating wishlist properties. This structure is used by
   * authenticated customers (and optionally admins with permission) to modify
   * wishlist-level settings or properties in the shopping_mall_wishlists
   * table. Typical updatable fields in the schema are limited; for most
   * business flows, only updated_at may be set programmatically, though
   * business fields like name, visibility, or configuration settings may
   * exist in other schemas. Never include product or item references here;
   * those are managed via wishlist item operations.
   *
   * Schema strictly matches shopping_mall_wishlists; only defined updatable
   * fields are included. Audit and compliance tracking are always based on
   * updated_at.
   *
   * Partial/patch updates are permitted, and fields not present in this DTO
   * remain unchanged.
   */
  export type IUpdate = {
    /**
     * Last modification time for this wishlist. Timestamp is updated every
     * time wishlist attributes are changed.
     *
     * Format: ISO 8601. This is for UI sync and audit history. For example:
     * '2024-06-28T10:15:30Z'.
     *
     * Read-only and set automatically by the system upon successful
     * modification.
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Summary schema for a single wishlist, providing only metadata and
   * high-level information strictly as present in the shopping_mall_wishlists
   * database table.
   *
   * All properties correspond exactly to fields in the Prisma model. No
   * computed/derived or UI-statistical fields are present here; such
   * properties must be delivered by dedicated UI projection APIs or other
   * DTOs. This type supports paginated indexes and summary tables of
   * wishlists for customers.
   */
  export type ISummary = {
    /**
     * Unique identifier for the wishlist.
     *
     * References the primary key 'id' field in the Prisma table
     * 'shopping_mall_wishlists'. Used for all relational and mutation
     * operations regarding this wishlist.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Customer's unique identifier (UUID) who owns this wishlist.
     *
     * References 'shopping_mall_customers.id' and must always match the
     * current authenticated customer. Used for strict ownership and access
     * control in all wishlist operations.
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Creation timestamp for the wishlist entry, formatted as ISO 8601
     * string.
     *
     * References the 'created_at' column in the Prisma schema and is
     * immutable for audit and order history. Used for sorting/recent
     * display in customer profile UIs.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the last modification to this wishlist or its items (ISO
     * 8601).
     *
     * Directly references 'updated_at' in the Prisma schema. Used in
     * customer profile detail, to determine recency of changes.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
