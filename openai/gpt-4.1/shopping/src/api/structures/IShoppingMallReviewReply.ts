import { tags } from "typia";

/**
 * Represents a seller or admin reply to a product review in the
 * shopping_mall_review_replies table. Supports one reply per review per
 * responder type. Fields include author type, association to review/product,
 * reply body, visibility status, audit timestamps, and soft delete state.
 * Follows strict enum and nullability constraints, aligns with database
 * relations, and serves both UI display and moderation/audit workflows. Only
 * schema properties are included; all required fields must be present.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallReviewReply = {
  /**
   * Unique identifier of the review reply. Primary key in
   * shopping_mall_review_replies.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the associated review this reply belongs to. Used as a foreign
   * key to relate reply to parent review.
   */
  reviewId: string & tags.Format<"uuid">;

  /**
   * UUID of the product which the review and reply are tied to. Foreign key
   * for cross-entity integrity.
   */
  productId: string & tags.Format<"uuid">;

  /**
   * UUID of the replying seller (if the reply author is a seller); null if
   * this is an admin reply.
   */
  sellerId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the replying admin (if the reply author is an admin); null for
   * seller replies.
   */
  adminId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reply text content. Supports rich or plain text; must satisfy
   * business-configured length requirements.
   */
  body: string;

  /**
   * Visibility status of the reply: 'public' if visible, 'hidden' if
   * accessible only to admin or in moderation. Only 'public' or 'hidden'
   * allowed.
   */
  status: "public" | "hidden";

  /** The creation timestamp of the reply (ISO 8601). */
  createdAt: string & tags.Format<"date-time">;

  /** The last update timestamp of the reply (ISO 8601). */
  updatedAt: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp; ISO 8601 string if reply is deleted, null if reply
   * is active.
   */
  deletedAt?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallReviewReply {
  /**
   * Request schema for searching or filtering review replies (seller/admin)
   * for a given review under a product. Includes the reply body, visibility
   * status, and author type, as well as identifiers for product and review
   * context. Used by admin tools for moderation or bulk operations. Values
   * must match referenced entities and follow enum restrictions. Only schema
   * properties may be used, and all required fields must be present.
   */
  export type IRequest = {
    /**
     * The unique identifier of the review. Used to scope operations. Must
     * be a valid UUID referencing a review in the database.
     */
    reviewId: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the product to which the review belongs.
     * Must be a valid UUID referencing the product.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * Reply visibility status. Allowed values: 'public', 'hidden'. Used to
     * control whether the reply is viewable or internal. Typically defaults
     * to 'public'.
     */
    status: "public" | "hidden";

    /**
     * The role of the reply author. Allowed values are 'seller' or 'admin',
     * used for access control and UI display.
     */
    authorType: "seller" | "admin";

    /**
     * The reply text. Required. Must satisfy business-configured length
     * limits (should not exceed 2000 characters).
     */
    body: string & tags.MinLength<1> & tags.MaxLength<2000>;
  };

  /**
   * Data Transfer Object for creating a new review reply associated with
   * shopping_mall_review_replies. Used by the seller or admin to submit a
   * response under a product review. Body is required, visibility status is
   * set at creation. This schema is strictly mapped to the underlying Prisma
   * model; all security context and permission checks must be handled at
   * business logic/service layer, not via schema extension. All values must
   * be validated for business rules, content compliance, and role-based
   * constraints.
   */
  export type ICreate = {
    /**
     * Reply text. Displayed publicly with the review for transparency. Must
     * follow the business rule for maximum length; supports multi-paragraph
     * replies with clear business content and proper formatting for both
     * end-user and admin displays.
     */
    body: string;

    /**
     * Reply visibility status: 'public' or 'hidden'. Determines whether
     * reply is visible to customers/sellers or only in admin/moderation
     * workflows. Must be set based on business rules enforcing moderation
     * flows, transparency, or restriction.
     */
    status: string;
  };

  /**
   * Partial update Data Transfer Object for an existing review reply
   * (shopping_mall_review_replies). Allows seller/admin to replace reply
   * content (body) or status (public/hidden). Every value must conform to the
   * business logic and content standards for review replies, and constraints
   * on update eligibility must be checked in logic layer. Partial updates
   * apply (any or all updatable fields may be included).
   */
  export type IUpdate = {
    /**
     * New or edited reply content. Required if body is being updated; must
     * follow platform moderation/content rules. Multi-paragraph text with
     * support for markdown or rich text is allowed if business logic
     * permits, otherwise validated as plain string.
     */
    body?: string | undefined;

    /**
     * Updated reply visibility status: 'public' or 'hidden'. May only be
     * set by the reply author (seller or admin) or as part of a moderation
     * process by admin users. The value must match one of the allowed
     * status states. If status is omitted in the update, the current status
     * is preserved unless amended by system flow.
     */
    status?: string | undefined;
  };
}
