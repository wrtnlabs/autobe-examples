import { tags } from "typia";

/**
 * Full schema for shopping mall inventory record that tracks inventory
 * quantities for a product SKU. Each record holds a specific SKU's available
 * stock, reserved (pending) quantity, cumulative sales, custom low-stock
 * warning threshold, and current status. This type is returned by inventory
 * queries and is the authoritative API representation for inventory state in
 * the platform. All fields map directly to columns in the Prisma model
 * shopping_mall_inventory_records. Field mapping for audit and business logic
 * is strictly enforced. Used for both data retrieval (inventory status
 * dashboards, product availability lookup, admin queries) and for full PUT
 * replacement updates (in management/admin tool scenarios).
 *
 * Properties:
 *
 * - Id: Unique identifier (UUID) for the inventory record.
 * - Shopping_mall_product_sku_id: FK to SKU for this inventory record. Each SKU
 *   has a one-to-one inventory record.
 * - Quantity_available: Integer >= 0. Current in-stock, sellable units.
 * - Quantity_reserved: Integer >= 0. Units committed to pending orders (not yet
 *   sold).
 * - Quantity_sold: Integer >= 0. Cumulative total of sold units.
 *   Informational/audit only; reflects business reporting not real-time stock.
 * - Low_stock_threshold: Optional integer >= 0. Custom threshold for low-stock
 *   warning. If null, system/global default applies or warning disabled.
 * - Status: String. Inventory status (e.g., 'in_stock', 'reserved', 'blocked',
 *   'out_of_stock') reflecting business state transitions and sales
 *   eligibility.
 * - Created_at: Timestamp when inventory record was created (ISO 8601 date-time,
 *   UTC).
 * - Updated_at: Timestamp of last update.
 *
 * This DTO is the canonical shape for reading/writing inventory records. Used
 * for admin dashboards, seller tools, system integrations, and inventory
 * audits. For business uses: never add fields outside the schema; do not invent
 * extra relations or ignore audit timestamps.
 *
 * For inventories associated with ongoing orders, status, or system audit
 * triggers, changes to this DTO must be reflected throughout operational state
 * and compliance logs.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallInventoryRecord = {
  /**
   * Unique identifier (UUID) for the inventory record. PK in Prisma schema.
   * Autogenerated by system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * FK to associated product SKU. This inventory record applies to the
   * specific SKU indicated by this property. Business-internal references;
   * required for mapping inventory back to catalog hierarchy.
   */
  shopping_mall_product_sku_id: string & tags.Format<"uuid">;

  /**
   * Sellable units in stock that are not reserved or sold. Must be a
   * non-negative integer. This represents real-time stock available for
   * immediate purchase on the platform. Minimum: 0.
   */
  quantity_available: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Units currently reserved for pending orders or ongoing checkout.
   * Non-negative integer. Temporarily unavailable for purchase but not yet
   * sold (payment not completed, checkout grace, etc). Minimum: 0.
   */
  quantity_reserved: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Cumulative count of sold units for this SKU. Informational field used for
   * reporting/business audit. Not deducted from available stock. Non-negative
   * integer. May only be updated by system triggers on order completion.
   * Minimum: 0.
   */
  quantity_sold: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Custom threshold for signaling low stock to seller, admin, or front end
   * UI. Null disables custom warning. Integer >= 0 (optional; business logic
   * may enforce minimum values, or allow null for defaults).
   */
  low_stock_threshold?:
    | (number & tags.Type<"int32"> & tags.Minimum<0>)
    | null
    | undefined;

  /**
   * String value indicating current inventory status: one of 'in_stock',
   * 'reserved', 'blocked', 'out_of_stock', etc. Status codes must align with
   * platform inventory state machine and enforced by business logic. Used for
   * operational decisioning. REQUIRED in the full DTO.
   */
  status: string;

  /**
   * Record creation timestamp in ISO 8601 UTC format. Immutable, set when
   * inventory record is first written by system. Used for lifecycle audit and
   * compliance.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last inventory record update, in ISO 8601 UTC format.
   * System-managed. Used for concurrency and audit.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallInventoryRecord {
  /**
   * Partial update schema for modifying selected fields of a product SKU's
   * inventory record in the e-commerce platform. This type is used for PATCH
   * operations and allows sellers or admins to update only intended fields:
   * quantity_available, quantity_reserved, quantity_sold,
   * low_stock_threshold, and status. At least one property must be present.
   * Follows the business rules and validation logic outlined in the Prisma
   * schema for shopping_mall_inventory_records. Only mutable fields are
   * included. System-managed fields (created_at, updated_at) are not part of
   * the input payload and are ignored if provided. Refer to business logic
   * for field constraints: non-negative integers for quantities, allowed
   * status values, etc. Properties are optional and may be submitted in any
   * combination, but at least one must be present. Business rules require
   * strict validation of permissible values and state transitions. This DTO
   * is intended for partial inventory adjustment by authorized roles and
   * supports compliance, audit, and rollback business flows.
   *
   * Properties:
   *
   * - Quantity_available: Integer >= 0. The available sellable stock for the
   *   SKU.
   * - Quantity_reserved: Integer >= 0. Quantity held for pending orders.
   * - Quantity_sold: Integer >= 0. Cumulative sales count for reporting.
   * - Low_stock_threshold: Optional integer >= 0. Triggers low-stock warnings;
   *   null disables warning.
   * - Status: String. Must be a valid inventory status, e.g., 'in_stock',
   *   'reserved', 'blocked', 'out_of_stock'. Must follow allowed
   *   transitions/business logic.
   *
   * Use-cases: Seller manual stock increases or decreases, admin manual
   * corrections, system synchronizations with third party logistics, and
   * operational controls related to order placement or cancellation.
   */
  export type IPartialUpdate = {
    /**
     * Available quantity for the SKU (i.e., not reserved or sold). Must be
     * a non-negative integer. Partial update: optionally supplied for
     * restock/decrement actions. Zero means out of stock. Minimum: 0.
     */
    quantity_available?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | undefined;

    /**
     * Quantity of stock reserved for pending orders or checkout flows. Must
     * be a non-negative integer. Optional in partial update. Used to
     * temporarily hold stock before payment confirmation. Minimum: 0.
     */
    quantity_reserved?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | undefined;

    /**
     * Cumulative total of items sold for this SKU. Non-negative integer.
     * Typically updated by the system on completed fulfillment; rarely
     * modified in partial update except for admin correction. Minimum: 0.
     */
    quantity_sold?: (number & tags.Type<"int32"> & tags.Minimum<0>) | undefined;

    /**
     * Custom threshold for triggering a low stock warning. Null disables
     * the warning. Integer >= 0. Optional in partial update.
     */
    low_stock_threshold?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | null
      | undefined;

    /**
     * Current inventory status for the SKU (e.g., 'in_stock', 'reserved',
     * 'blocked', 'out_of_stock'). Must follow allowed transitions and
     * status set by business logic. Optional in partial update. Required
     * for certain transitions (e.g., block/unblock).
     */
    status?: string | undefined;
  };

  /**
   * Inventory update object for a product SKU. Used for full field
   * replacement via PUT, allowing admin/seller to set all required fields of
   * SKU-level inventory, including available, reserved, and sold quantities,
   * status, and low-stock audit fields. All fields must correspond to
   * existing columns in shopping_mall_inventory_records table according to
   * Prisma schema. Security checked against ownership. See inventory
   * management business requirements for update logic.
   *
   * Corresponds to shopping_mall_inventory_records Prisma model and supports
   * inventory correction, restocking, and administrative override flows. Do
   * not include non-existent fields or phantom attributes.
   */
  export type IUpdate = {
    /**
     * The new available stock for SKU for this update. Must be zero or
     * positive integer per business requirement. Setting to zero makes SKU
     * out-of-stock. Updated for audit and stock management.
     *
     * Corresponds to Prisma field:
     * shopping_mall_inventory_records.quantity_available (Int).
     */
    quantity_available: number & tags.Type<"int32">;

    /**
     * Quantity of SKU stock currently reserved (awaiting order
     * placement/payment). Set by order processing logic or admin/seller
     * intervention. Must be zero or positive. Audited for race-condition
     * prevention.
     *
     * Corresponds to Prisma field:
     * shopping_mall_inventory_records.quantity_reserved (Int).
     */
    quantity_reserved: number & tags.Type<"int32">;

    /**
     * Cumulative units of this SKU sold historically. Admin/seller may
     * adjust for corrections; normally incremented automatically by order
     * flow. Zero or positive integer. Used for reporting, but may also
     * drive inventory business logic.
     *
     * Corresponds to Prisma field:
     * shopping_mall_inventory_records.quantity_sold (Int).
     */
    quantity_sold: number & tags.Type<"int32">;

    /**
     * Optional low stock warning trigger level for sellers/admin. If not
     * set, system default applies. Used for notification and admin UX. Must
     * be null or non-negative integer.
     *
     * Corresponds to Prisma field:
     * shopping_mall_inventory_records.low_stock_threshold (Int, nullable).
     */
    low_stock_threshold?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Current inventory status for this SKU. Admissible values include:
     *
     * - 'in_stock'
     * - 'reserved'
     * - 'blocked'
     * - 'out_of_stock'
     *
     * Business logic and enum values enforced in the application layer.
     *
     * Corresponds to Prisma field: shopping_mall_inventory_records.status
     * (String).
     */
    status: string;

    /**
     * Timestamp in ISO 8601 format for this record's update. Managed
     * automatically by business logic. Not required in request; included
     * for reference.
     *
     * Corresponds to Prisma field:
     * shopping_mall_inventory_records.updated_at (DateTime).
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
