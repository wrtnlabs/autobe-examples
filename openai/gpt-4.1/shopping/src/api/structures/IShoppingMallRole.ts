import { tags } from "typia";

/**
 * Detailed schema for a single system role as stored in the shopping_mall_roles
 * table. Each role controls user/group RBAC, with unique role_name and
 * business-oriented description. Includes audit timestamps for full lifecycle
 * tracking. All fields are required; this schema should not be extended with
 * properties absent from the prisma model.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallRole = {
  /** Unique identifier (UUID) for the role record. */
  id: string & tags.Format<"uuid">;

  /**
   * Role key. Uppercase, unique system role code (e.g., 'CUSTOMER', 'SELLER',
   * 'ADMIN'). Assigned for permission checks via RBAC.
   */
  role_name: string;

  /**
   * Textual description of this role—summarizes business permissions, use
   * cases, and assignment context (used for admin UI and compliance
   * reporting).
   */
  description: string;

  /**
   * ISO-8601 timestamp for role creation. Used for sorting, audit, and
   * reporting.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last modification timestamp, ISO-8601 encoded. Used for admin dashboards
   * and audit timelines.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallRole {
  /**
   * Request body for searching, filtering, or paginating the list of system
   * roles (shopping_mall_roles table). Includes fields for text search, date
   * range filtering, sorting, and page controls. All fields are optional, but
   * at least one should be provided for efficiency.
   */
  export type IRequest = {
    /**
     * Search term for the role name to match (case-insensitive, supports
     * full or partial text matches). Used for filtering roles such as
     * CUSTOMER, SELLER, ADMIN, etc.
     */
    role_name?: string | undefined;

    /**
     * Partial or full text search criterion for role description
     * (case-insensitive, supports trigram/partial matching for admin UI).
     */
    description?: string | undefined;

    /**
     * Filter to include only roles created after the specified ISO 8601
     * timestamp. Useful for audit or change monitoring flows.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter to include only roles created before the specified ISO 8601
     * timestamp. Used for audit window or operational reporting.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort field for roles. Must be one of 'created_at', 'updated_at',
     * 'role_name', or 'description' (see admin schema).
     */
    order_by?:
      | "created_at"
      | "updated_at"
      | "role_name"
      | "description"
      | undefined;

    /**
     * Sort direction for the results set ('asc' for ascending, 'desc' for
     * descending). Defaults to 'asc' if omitted.
     */
    order_direction?: "asc" | "desc" | undefined;

    /** Page number for pagination (starts at 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Maximum number of results per page (default: 20, max: 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * DTO for creating a new role in the shopping_mall_roles table.
   *
   * Includes the mandatory role_name (unique, uppercase string key) and a
   * description field explaining intended platform permissions. Creation is
   * restricted to admin-level users. Must match business rules and audit
   * requirements by capturing full context for new role creation.
   *
   * All created roles are referenced by user assignments and permission
   * matrices throughout the e-commerce platform.
   */
  export type ICreate = {
    /**
     * Role key in uppercase (e.g. CUSTOMER, SELLER, ADMIN, ...).
     *
     * This property is used to uniquely identify a specific role within the
     * e-commerce platform. The value must be unique across all roles, and
     * it is used wherever user or system role assignments take place.
     * Examples include: 'CUSTOMER', 'SELLER', 'ADMIN'.
     *
     * Platform access and permissions are controlled through this key.
     */
    role_name: string;

    /**
     * Explanation of platform permissions for the role.
     *
     * Provides detailed information about what actions or access this role
     * grants to users within the system. This is displayed in admin
     * dashboards, platform documentation, and user profile UIs. Examples
     * include: 'Full access for all administrative functions', 'Can manage
     * own product listings', 'Can purchase products and manage orders'.
     */
    description: string;
  };

  /**
   * DTO for updating an existing role in the shopping_mall_roles table.
   *
   * At least one field (role_name or description) must be provided for a
   * valid update request. This is used for platform role management—allowing
   * admin users to revise the key or explanatory text of a role for clarity,
   * compliance, or system evolution.
   *
   * Any changes to role_name must observe uniqueness at the database and
   * system level to preserve integrity of access control and audit
   * references.
   */
  export type IUpdate = {
    /**
     * Role key in uppercase (e.g. CUSTOMER, SELLER, ADMIN).
     *
     * Must be a valid unique name as used in role creation. Can be updated
     * to correct or rebrand a role, but must not duplicate existing role
     * keys. Used for permission/rbac matrix updates.
     */
    role_name?: string | undefined;

    /**
     * Explanation of platform permissions for the role.
     *
     * Used to update or revise the role's business description, shown in
     * admin dashboards, documentation, and system prompts. Should always
     * clearly indicate the intended access for this role (e.g., 'Read-only
     * access to reporting module', 'Grants privilege for seller onboarding
     * workflow').
     */
    description?: string | undefined;
  };
}
