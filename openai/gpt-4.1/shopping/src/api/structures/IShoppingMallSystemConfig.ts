import { tags } from "typia";

/**
 * Single system configuration record. Maps directly to the
 * shopping_mall_system_configs Prisma table. Describes a feature flag, platform
 * setting, or toggle for runtime behavior. Supports string, int, double,
 * boolean, or JSON-typed values, only one value property populated for each
 * record. Includes audit and soft-delete fields, with detailed documentation
 * from schema comments.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSystemConfig = {
  /**
   * Primary key. Unique identifier for the system configuration record. Must
   * be a UUID according to schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * System-wide unique config key (case-insensitive, e.g. 'enable_payments',
   * 'max_cart_size'). Required to uniquely identify the configuration within
   * a given scope.
   */
  config_key: string;

  /**
   * Namespace or logical scope for configuration. Examples: 'global',
   * 'payment', 'product'. Required for grouping settings and namespacing
   * keys.
   */
  config_scope: string;

  /**
   * Describes what type the value is: 'string', 'int', 'boolean', 'double',
   * or 'json'. Only one value type is valid per record. Used for dynamic
   * config retrieval, admin validation, and safe data typing.
   */
  value_type: string;

  /**
   * String value for configs stored as string (nullable for non-string
   * configs). Used for configs with value_type = 'string'.
   */
  string_value?: string | null | undefined;

  /**
   * Integer value for configs of int type. Nullable for non-int-value
   * configs. Used for value_type = 'int'.
   */
  int_value?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * Double (floating-point) value for configs with value_type = 'double'.
   * Nullable for others.
   */
  double_value?: number | null | undefined;

  /**
   * Boolean value for configs with value_type = 'boolean'. Null for other
   * types.
   */
  boolean_value?: boolean | null | undefined;

  /**
   * JSON-encoded string for complex configs. Used for value_type = 'json'
   * only. Nullable for other types.
   */
  json_value?: string | null | undefined;

  /**
   * Timestamp when config record was created. ISO 8601 format, required for
   * audit and ordering.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update for this config record, used for cache
   * invalidation and audit.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp. If present, config is logically deleted and
   * unavailable to normal queries.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallSystemConfig {
  /**
   * Admin search/filter/pagination criteria for system configuration records.
   * Used to search, filter, and paginate the shopping_mall_system_configs
   * records in the admin panel. All properties are optional filters for
   * querying by config key, scope, type, status, with optional pagination.
   * Based on Prisma model column documentation.
   */
  export type IRequest = {
    /**
     * System-wide unique config key (case-insensitive, e.g.
     * 'enable_payments', 'max_cart_size'). Used for filtering
     * configurations by key in admin UI or settings queries.
     */
    config_key?: string | undefined;

    /**
     * Config scope (e.g., 'global', 'payment', 'product', 'review').
     * Defines the grouping of configuration entries for querying or
     * administration.
     */
    config_scope?: string | undefined;

    /**
     * Stored value type for this config (e.g., 'string', 'int', 'boolean',
     * 'json'). Used for typed queries and type-based filtering in tools.
     */
    value_type?: string | undefined;

    /**
     * Active or inactive configuration entry, for admin visibility. Not
     * directly in schema but may exist in admin request model filtering.
     */
    status?: string | undefined;

    /** Page number for pagination. Minimum: 1. Defaults to 1. */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of entries in a page. Defaults to 20. Maximum
     * typically 100.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * DTO schema for creating a system configuration entry. References the
   * shopping_mall_system_configs Prisma model. Required fields include
   * config_key, config_scope, and value_type. Exactly one of the value fields
   * (string_value, int_value, double_value, boolean_value, json_value) should
   * be non-null according to value_type. The other fields must be omitted or
   * set to null as appropriate. Used by platform admins to define or update
   * dynamic runtime settings such as feature flags or operational limits. All
   * properties must conform to business requirements for uniqueness, typing,
   * and auditability.
   */
  export type ICreate = {
    /**
     * System-wide unique config key (case-insensitive, e.g.
     * 'enable_payments', 'max_cart_size'). Used as the business identifier
     * for this runtime setting in all system and API references. Keys are
     * unique per config_scope and must not duplicate within the same
     * scope.
     */
    config_key: string;

    /**
     * Config scope (e.g., 'global', 'payment', 'product', 'review'). Used
     * for logical grouping and namespacing of config keys. Required and
     * must correspond to the correct system domain for downstream filtering
     * and admin UI grouping.
     */
    config_scope: string;

    /**
     * Indicates the type of configuration value for safe retrieval and
     * display. Allowed types are: 'string', 'int', 'boolean', 'double',
     * 'json'. This controls which value field is populated and should be
     * referenced. Only one value field must be populated according to this
     * indicated type.
     */
    value_type: string;

    /**
     * (Nullable) Value field for configurations of value_type 'string'.
     * Must only be set when value_type is 'string'.
     */
    string_value?: string | undefined;

    /**
     * (Nullable) Value field for configurations of value_type 'int'. Must
     * only be set when value_type is 'int'.
     */
    int_value?: (number & tags.Type<"int32">) | undefined;

    /**
     * (Nullable) Value field for configurations of value_type 'double'.
     * Must only be set when value_type is 'double'.
     */
    double_value?: number | undefined;

    /**
     * (Nullable) Value field for configurations of value_type 'boolean'.
     * Must only be set when value_type is 'boolean'.
     */
    boolean_value?: boolean | undefined;

    /**
     * (Nullable) Value field for configurations of value_type 'json'. Must
     * only be set when value_type is 'json'. The JSON structure should be
     * provided as stringified JSON (to fit DB schema).
     */
    json_value?: string | undefined;
  };

  /**
   * DTO for updating one or more fields of a system configuration entry.
   * References the shopping_mall_system_configs Prisma model. All fields are
   * optional; provide only those being updated. Exactly one of the value
   * fields should be non-null and the others null/omitted according to the
   * (possibly new) value_type. Uniqueness and typing validation rules apply
   * as in creation. Used in admin setting workflow to change runtime config
   * values, types, or scope assignment for feature flags, rate limits,
   * credentials, etc.
   */
  export type IUpdate = {
    /**
     * (Optional) System-wide config key to update. Only update when
     * changing the business identifier for this config. Follows same
     * requirements as on creation for uniqueness within config_scope.
     */
    config_key?: string | undefined;

    /**
     * (Optional) Config scope for the config key to update. Enables
     * migration or regrouping of config within domain. If specified, must
     * remain unique with config_key.
     */
    config_scope?: string | undefined;

    /**
     * (Optional) New type for configuration value. Allowed types are:
     * 'string', 'int', 'boolean', 'double', 'json'. Use when changing the
     * data structure or intended business use of this setting. Only one
     * value field must match the selected type.
     */
    value_type?: string | undefined;

    /**
     * (Nullable) Updated string value for configs where value_type is
     * 'string'. Must remain consistent with type.
     */
    string_value?: string | undefined;

    /**
     * (Nullable) Updated int value for configs where value_type is 'int'.
     * Must remain consistent with type.
     */
    int_value?: (number & tags.Type<"int32">) | undefined;

    /**
     * (Nullable) Updated double value for configs where value_type is
     * 'double'. Must remain consistent with type.
     */
    double_value?: number | undefined;

    /**
     * (Nullable) Updated boolean value for configs where value_type is
     * 'boolean'. Must remain consistent with type.
     */
    boolean_value?: boolean | undefined;

    /**
     * (Nullable) Updated JSON value for configs where value_type is 'json'.
     * Stringified JSON object structure only. Must remain consistent with
     * type.
     */
    json_value?: string | undefined;
  };
}
