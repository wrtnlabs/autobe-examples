import { tags } from "typia";

/**
 * Represents an individual line item within a customer's shopping cart. Each
 * cart item links a single SKU (product variant) to a cart, stores the quantity
 * to purchase, and persists the SKU price at time of addition for transactional
 * integrity. Audit timestamps for creation and modification are present for
 * cart management and checkout logic. This entity is defined by the
 * shopping_mall_cart_items table within the e-commerce shoppingMall schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCartItem = {
  /**
   * Primary key. The unique identifier for the cart item record, as stored in
   * the shopping_mall_cart_items table. This is a system-generated UUID used
   * to distinguish each cart item.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier (UUID) of the cart to which this item belongs.
   * References the parent shopping_mall_carts.id record, forming the foreign
   * key for cart line item association.
   */
  shopping_mall_cart_id: string & tags.Format<"uuid">;

  /**
   * The unique identifier (UUID) for the product SKU (Stock Keeping Unit)
   * this cart item references. Only one SKU can be selected per cart item.
   * References shopping_mall_product_skus.id in the catalog.
   */
  shopping_mall_product_sku_id: string & tags.Format<"uuid">;

  /**
   * Number of units of this SKU the customer intends to purchase. Must be at
   * least 1 (enforced by business logic) and not exceed cart/SKU maximum
   * configured by admin. Always integer precision.
   */
  quantity: number & tags.Type<"int32">;

  /**
   * The unit price of the SKU at the time the item was added to the cart.
   * This value is stored as a 'snapshot' for historical price audit and
   * consistency across checkout, even if product price fluctuates between
   * add-to-cart time and purchase.
   */
  unit_price_snapshot: number;

  /**
   * Timestamp indicating when this cart item was first created. This follows
   * ISO 8601 UTC datetime format with timezone.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the most recent modification to this cart item, e.g. when
   * quantity was changed. ISO 8601 UTC datetime format.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallCartItem {
  /**
   * Search/filter/sort/pagination parameters for listing or querying items in
   * a customer's shopping cart. Used in PATCH or GET operations on cart
   * items.
   */
  export type IRequest = {
    /**
     * Unique identifier (UUID) of the customer's shopping cart to which
     * cart items are being queried, filtered, or retrieved.
     */
    cartId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for ProductId: Only retrieve items for this product
     * in the customer's cart.
     */
    productId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for SKUId: Only retrieve cart item referencing this
     * particular SKU.
     */
    skuId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional keyword search: queries the cart items for product or SKU
     * names matching this value.
     */
    search?: string | undefined;

    /**
     * Sorting configuration for cart item listing. Allowed values include
     * 'added_desc', 'added_asc', 'name_asc', 'name_desc', 'price_asc',
     * 'price_desc'.
     */
    sort?:
      | "added_desc"
      | "added_asc"
      | "name_asc"
      | "name_desc"
      | "price_asc"
      | "price_desc"
      | undefined;

    /** Which page of paginated results to retrieve. Default is 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** The maximum number of cart items per page (default: 20, max: 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Payload structure for adding a new item to a shopping cart. Used as a
   * request body when creating a cart line (cart item). Requires valid SKU
   * reference and intended purchase quantity. Price and other values are
   * resolved on server side at time of addition. Mapped to the
   * shopping_mall_cart_items table in Prisma schema for shoppingMall
   * e-commerce platform.
   */
  export type ICreate = {
    /**
     * The unique identifier (UUID) for the product SKU to be added to the
     * cart. Must reference an active SKU in shopping_mall_product_skus and
     * belong to an in-stock product. Required for cart insert.
     */
    shopping_mall_product_sku_id: string & tags.Format<"uuid">;

    /**
     * The quantity of the selected SKU to add to the cart. Must be at least
     * 1 and not exceed the per-SKU or per-cart system limits, enforced by
     * admin settings and business validation.
     */
    quantity: number & tags.Type<"int32">;
  };

  /**
   * DTO for updating an item in a customer's shopping cart
   * (shopping_mall_cart_items) in an e-commerce platform. This interface is
   * used in cart modification operations, specifically to update the quantity
   * of an existing cart item, as well as any updatable properties defined by
   * the cart_items schema. The DTO reflects only updatable fields and
   * enforces constraints such as positive integers for quantity, and
   * business-specific cart modification rules. CartId and cartItemId are
   * passed as path parameters and are not present here. Only defined
   * properties in the Prisma schema are permitted; this DTO is used by the
   * customer role for cart management flows.
   */
  export type IUpdate = {
    /**
     * New quantity for this item in the cart. Must be at least 1 and not
     * exceed configured per-SKU or per-cart business limits. Setting this
     * value to 0 will typically result in cart item removal (handled at API
     * logic layer).
     */
    quantity: number & tags.Type<"int32"> & tags.Minimum<0>;

    /**
     * Read-only: price of the SKU at the time it was added to cart.
     * Provided for audit and validation; should not normally be updated but
     * may be provided for internal correction flows. In typical update
     * operations, this is omitted or does not need to be modified.
     */
    unit_price_snapshot?: number | undefined;
  };

  /**
   * Summary DTO for a single customer cart item in the e-commerce platform,
   * as per Prisma model 'shopping_mall_cart_items'.
   *
   * This summary includes the minimal set of fields used for cart views,
   * price calculations, and order placement preparation. It covers the unique
   * identifier, the owning cart, associated SKU, current quantity, unit price
   * at the time of cart addition, and two timestamps for audit and cart
   * restore features.
   *
   * Business rules about SKU validity, pricing, and concurrency are supported
   * by referencing only valid/allowed cart items. This DTO omits relations to
   * full cart or product for summary views, focusing on performant API
   * response and secure customer context.
   */
  export type ISummary = {
    /**
     * Primary Key of the cart item row. This uniquely identifies a single
     * line item within a customer's shopping cart.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Foreign key reference to the owning cart for this item. Ensures
     * logical grouping of items by the customer's unique shopping cart.
     */
    shopping_mall_cart_id: string & tags.Format<"uuid">;

    /**
     * Foreign key reference to the SKU (variant of a product) that this
     * cart item represents. The SKU binds inventory, option selection, and
     * purchase eligibility.
     */
    shopping_mall_product_sku_id: string & tags.Format<"uuid">;

    /**
     * Number of units for this SKU in the cart. Value must be >= 1 up to
     * system-configured per-SKU limit as enforced in business logic.
     */
    quantity: number & tags.Type<"int32">;

    /**
     * Unit price of this SKU at the time the item was added to the cart.
     * This is used for price consistency and historical context. Not
     * adjusted after addition.
     *
     * Business logic ensures this value remains unchanged after item insert
     * unless corrected by price revalidation.
     */
    unit_price_snapshot: number;

    /**
     * Timestamp indicating when this cart item entry was created. Used for
     * audit trail, cart expiration logic, and synchronization across
     * devices.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp reflecting the last modification to this cart item (such as
     * quantity change). This is used for cart management, user experience,
     * and synchronization with UI.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
