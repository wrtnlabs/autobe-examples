import { tags } from "typia";

/**
 * A product entity as represented for external response, excluding internal
 * actor/indexing identifiers. Based on shopping_mall_products. All public,
 * business-facing fields with proper format and security compliance. Intended
 * for detailed or summary product responses.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallProduct = {
  /** Product unique identifier. Primary key from shopping_mall_products.id. */
  id: string & tags.Format<"uuid">;

  /** Product display name. Used in catalog search, must be unique per seller. */
  name: string;

  /**
   * Longer text description of the product, supporting rich content and SEO.
   * May include HTML or markdown per business policy.
   */
  description: string;

  /**
   * Whether the product is active and currently listed for sale. Products
   * with is_active=false are hidden from catalog/discovery and cannot be
   * ordered.
   */
  is_active: boolean;

  /**
   * Primary image URL for the product, used in list/card views. May be null
   * if not set yet.
   */
  main_image_url?: string | undefined;

  /** Timestamp when the product record was created (ISO 8601, UTC). */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last modified timestamp for the product. Used for cache invalidation,
   * search index updates.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp (null if not deleted). Non-null means logically
   * deleted and hidden from queries.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallProduct {
  /**
   * Advanced search, filtering, and pagination parameters for product catalog
   * search and list operations. Allows fulltext, facets, category, seller,
   * price range, availability, option filtering, and pagination. All fields
   * optional, empty object yields default unfiltered search.
   */
  export type IRequest = {
    /**
     * Text query for product name or keyword. Supports partial/fuzzy search
     * using trigram index on name and description fields.
     */
    search?: string | undefined;

    /**
     * Filter products by leaf category. Only products assigned to the given
     * category_id or its descendants are included.
     */
    category_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by seller (only products listed by this seller). Useful for
     * admin or seller dashboard product management.
     */
    seller_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * If true, show only active/published products. Default varies: true
     * for customer views, both for admin.
     */
    is_active?: boolean | undefined;

    /**
     * Lower bound on price filter (inclusive). Filters products with price
     * >= min_price. Units are business-currency (e.g., USD, KRW).
     */
    min_price?: number | undefined;

    /**
     * Upper bound on price filter (inclusive). Filters products with price
     * <= max_price. Units are business-currency (e.g., USD, KRW).
     */
    max_price?: number | undefined;

    /**
     * Array of option value IDs (UUID) to filter products supporting one or
     * more specific values, e.g., ["redUUID","xlUUID"]. Returns products or
     * skus with these options.
     */
    option_values?: string[] | undefined;

    /**
     * If true, only include products with at least one SKU in stock
     * (inventory > 0). Default: false.
     */
    in_stock_only?: boolean | undefined;

    /**
     * Sort order for results. Allowed values: best, price_asc, price_desc,
     * newest, rating, popularity. Default: best.
     */
    sort?:
      | "best"
      | "price_asc"
      | "price_desc"
      | "newest"
      | "rating"
      | "popularity"
      | undefined;

    /**
     * Page number for paginated results, 1-based. Default: 1. Used with
     * limit.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of products to return per page. Default: 20, max: 100.
     * Used with page.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Data Transfer Object (DTO) for creating a new product in the shopping
   * mall platform. This schema enforces all business requirements for initial
   * product registration, referencing the shopping_mall_products Prisma
   * model. Each property is strictly documented based on the original Prisma
   * column comments and business domain rules. Sensitive/system fields (id,
   * timestamps, deleted_at) are NOT settable by clients. Uniqueness,
   * existence, and integrity constraints must be checked at the business
   * logic and persistence layer. All field values must be validated for
   * real-world e-commerce scenarios.
   */
  export type ICreate = {
    /**
     * Reference to product's seller. Corresponds with
     * shopping_mall_sellers.id. This field is required when creating a new
     * product. The seller must exist and must have permission to list
     * products. UUID format.
     */
    shopping_mall_seller_id: string & tags.Format<"uuid">;

    /**
     * Reference to the category this product is assigned to (must be a
     * leaf). Refers to shopping_mall_categories.id. Category must exist and
     * must be enabled/active. UUID format.
     */
    shopping_mall_category_id: string & tags.Format<"uuid">;

    /**
     * Product display name. Must be unique for the seller. Between 2 and
     * 100 characters, case-insensitive uniqueness required per seller.
     * Business validation required.
     */
    name: string;

    /**
     * Long description of the product. Maximum 2000 characters. Must
     * accurately describe the product for display and search purposes.
     */
    description: string;

    /**
     * Whether the product is currently active and listed (true = publicly
     * displayed, false = hidden/disabled). Must be set explicitly at
     * creation.
     */
    is_active: boolean;

    /**
     * Primary display image for this product. Optionally supplied at
     * creation. Must be a valid, accessible URL. Nullable.
     */
    main_image_url?: string | null | undefined;
  };

  /**
   * DTO for updating an existing product in the shopping mall platform,
   * corresponding to the shopping_mall_products Prisma schema. Permits
   * modification only of mutable fields: name, description, is_active,
   * main_image_url, and (if permitted) category association. All fields are
   * optional; use partial updates as per PATCH/PUT semantics. Ownership and
   * business validation must be performed by business logic (seller or admin
   * permission required). System fields such as id, created_at, updated_at,
   * deleted_at are not settable by clients. Category and name uniqueness must
   * be maintained in persistence logic. Schema precisely documents every
   * property consistent with the underlying Prisma datamodel.
   */
  export type IUpdate = {
    /**
     * Optional update for the reference to the category this product is
     * assigned to (must be a leaf). Refers to shopping_mall_categories.id.
     * Nullable for no update. Must check permission and active status of
     * category if changed.
     */
    shopping_mall_category_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Product display name. Must remain unique within the seller's catalog
     * (case-insensitive). Modification must maintain uniqueness per seller.
     * 2-100 character range.
     */
    name?: string | undefined;

    /**
     * Long description of the product. Can be updated up to 2000
     * characters.
     */
    description?: string | undefined;

    /**
     * Active/listed status (true for publicly available, false for
     * disabled). Setting to false unpublishes the product from catalog.
     * Optional on update; omitting retains current state.
     */
    is_active?: boolean | undefined;

    /**
     * Primary image URL for this product. Nullable if removing image during
     * update. String value must be a valid URL.
     */
    main_image_url?: string | null | undefined;
  };

  /**
   * Summary representation of an e-commerce product record for paginated
   * catalog queries and search APIs. This optimized structure contains the
   * essential attributes for list or grid display, quick filtering, and
   * high-volume browsing without the full detail or deep relationships of the
   * shopping_mall_products table.
   *
   * Maps directly to the shopping_mall_products Prisma schema, exposing only
   * non-sensitive, public-facing product fields. It omits full description,
   * images array, SKU breakdown, and audit logs, focusing instead on the core
   * entity overview for fast UI rendering and product management listing.
   *
   * Typically used by catalog REST APIs as paged summary, never as a
   * replacement for the full detail object.
   */
  export type ISummary = {
    /**
     * Primary Key. Unique identifier for the product in the catalog, always
     * in UUID format as per shopping_mall_products.id.
     */
    id: string & tags.Format<"uuid">;

    /** Product display name. Maps to shopping_mall_products.name. */
    name: string;

    /**
     * Boolean indicating if the product is currently published and buyable.
     * Directly maps to shopping_mall_products.is_active.
     */
    is_active: boolean;

    /**
     * Primary display image URI for the product, used in UI grid/listing.
     * Can be null if no main image is set, aligning with
     * shopping_mall_products.main_image_url.
     */
    main_image_url?: string | null | undefined;

    /**
     * Category ID that this product is assigned to (leaf node). Used for
     * filtering/grouping. From
     * shopping_mall_products.shopping_mall_category_id.
     */
    shopping_mall_category_id: string & tags.Format<"uuid">;

    /**
     * Reference to the seller who owns this product. From
     * shopping_mall_products.shopping_mall_seller_id.
     */
    shopping_mall_seller_id: string & tags.Format<"uuid">;

    /**
     * ISO 8601 creation timestamp. Copied from
     * shopping_mall_products.created_at.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * ISO 8601 last update timestamp. Matches
     * shopping_mall_products.updated_at.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft-delete timestamp. Null if active, populated if product has been
     * removed as per shopping_mall_products.deleted_at.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
