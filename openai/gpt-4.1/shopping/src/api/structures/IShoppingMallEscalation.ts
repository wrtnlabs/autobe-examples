import { tags } from "typia";

/**
 * Represents an escalation case record for orders requiring advanced support,
 * dispute resolution, or manual intervention as tracked in the platform's
 * shopping_mall_escalations table.
 *
 * Includes cross-order references, escalation metadata, initiator and owner
 * info, audit history, and resolution tracking. Encapsulates all business
 * context for audit, customer service, and compliance reporting.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallEscalation = {
  /** Primary Key. Unique identifier for this escalation record. */
  id: string & tags.Format<"uuid">;

  /** Referenced order's id for which escalation is tracked. */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /** FK to customer initiating the escalation, if customer. */
  initiator_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** FK to seller initiating the escalation, if seller. */
  initiator_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Admin user assigned to manage/resolve this escalation (optional until
   * assignment).
   */
  assigned_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Business/category type of the escalation (e.g., payment dispute, order
   * not received).
   */
  escalation_type: string;

  /**
   * Current status of this escalation record (e.g., pending, in-review,
   * resolved, closed, escalated-to-admin).
   */
  escalation_status: string;

  /**
   * Type of case closure/resolution (e.g., refund-issued, denied,
   * order-resent, goodwill-credit; optional, set at outcome).
   */
  resolution_type?: string | null | undefined;

  /**
   * Optional moderation/admin comment or customer/seller narrative for
   * resolution.
   */
  resolution_comment?: string | null | undefined;

  /** ISO8601 timestamp when the escalation case was created (UTC). */
  created_at: string & tags.Format<"date-time">;

  /** ISO8601 timestamp of last update to this escalation case (UTC). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete. Indicates case logically removed for data retention. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallEscalation {
  /**
   * Structured request payload for creating or searching escalations related
   * to order disputes or complex customer service cases.
   *
   * Includes all required fields for contextualizing and creating an
   * escalation, such as the related order (orderId), type of escalation,
   * descriptive context, initiator information, and precise actor
   * identification. Descriptions clarify decision points for platform
   * workflows, and all user-facing APIs utilizing escalations reference this
   * base type.
   */
  export type IRequest = {
    /**
     * The unique identifier of the related order for which escalation is
     * raised.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Type or reason for the escalation (e.g., 'payment dispute', 'order
     * not received', 'refund delay').
     */
    escalation_type: string;

    /**
     * Free-text justification, complaint, or scenario explaining the reason
     * for escalation.
     */
    description?: string | undefined;

    /**
     * Role initiating the escalation: 'customer' or 'seller'. Only valid
     * for actors directly related to the order (as customer or seller).
     */
    initiator_role: string;

    /**
     * Unique identifier of the actor initiating the escalation (customer or
     * seller) - required for audit and ownership checks.
     */
    initiator_id: string & tags.Format<"uuid">;
  };

  /**
   * DTO for creating a new escalation case (shopping_mall_escalations).
   * Represents user-initiated request to escalate an unresolved issue or
   * platform-side escalation of a service case. Populates audit and linkage
   * fields for compliance.
   */
  export type ICreate = {
    /**
     * The unique identifier of the order this escalation case is associated
     * with. This field is required to link the escalation with a specific
     * order and will be validated to ensure customer or seller relationship
     * to the order. Must be a valid UUID string referencing
     * shopping_mall_orders.id.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * The type or reason for the escalation, describing the category of
     * dispute such as 'payment dispute', 'order not received', 'refund
     * delay', etc. Must be a descriptive business code/tag. Example:
     * 'order_not_received', 'refund_denied', 'compliance_inquiry'.
     */
    escalation_type: string;

    /**
     * The intended or requested resolution type for the escalation
     * (optional at creation). Used if knownâ€”from the set of platform
     * support outcomes, such as 'refund-issued', 'order-resent',
     * 'manual_review', 'goodwill-credit'. May be null or omitted during
     * initial submission, but can be set for subsequent clarity.
     */
    resolution_type?: string | undefined;

    /**
     * The escalation status for the lifecycle of the case (optional at
     * creation). Typical statuses: 'pending', 'in-review', 'resolved',
     * 'closed', 'escalated-to-admin'. Defaults to 'pending' on creation if
     * omitted.
     */
    escalation_status?: string | undefined;

    /**
     * Optional initial explanation or resolution comment. Use for extra
     * context or to describe circumstances of the dispute or expected
     * administrative resolution.
     */
    resolution_comment?: string | undefined;
  };

  /**
   * DTO for updating an existing escalation (shopping_mall_escalations),
   * including status/progress changes, resolution types, admin re-assignment,
   * and resolution remarks. Only fields provided are updated. Assignment or
   * status changes are typically limited to admin/staff handling the case.
   */
  export type IUpdate = {
    /**
     * (Optional) Update to the escalation type/category of the case. Should
     * be used if the reason for escalation changes during workflow or
     * requires reclassification. Must remain consistent with allowed
     * platform escalation types.
     */
    escalation_type?: string | undefined;

    /**
     * (Optional) Update to escalation status (e.g., move from 'pending' to
     * 'in-review', 'resolved', 'closed', 'escalated-to-admin'). Valid
     * transitions are defined by business process and should be enforced in
     * workflow logic.
     */
    escalation_status?: string | undefined;

    /**
     * (Optional) Business code indicating how the escalation was resolved:
     * e.g., 'refund-issued', 'order-resent', 'manual_review',
     * 'goodwill-credit', etc. Populated when the case is progressed or
     * resolved.
     */
    resolution_type?: string | undefined;

    /**
     * (Optional) Administrative or user-facing comment or explanation about
     * the resolution. Text body providing details of how/why the escalation
     * was closed, further information, or rationale for resolution.
     */
    resolution_comment?: string | undefined;

    /**
     * (Optional, admin only) Assign or reassign the escalation to a
     * specific admin by ID. Used for case routing among customer
     * service/operational admin accounts. Must be a valid UUID referencing
     * shopping_mall_admins.id.
     */
    assigned_admin_id?: (string & tags.Format<"uuid">) | undefined;
  };

  /**
   * Summary view for an escalation (customer service case/dispute). Shows
   * basic context, status, actor references, and core timestamps.
   *
   * Refer to `shopping_mall_escalations` documentation for database column
   * details. Used in paginated search, dashboard tiles, or escalation list
   * panels.
   */
  export type ISummary = {
    /**
     * Unique identifier for the escalation case.
     *
     * Sourced from `shopping_mall_escalations.id`.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Order ID linked to this escalation case.
     *
     * References `shopping_mall_orders.id`.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Customer ID if initiated by a customer, else null.
     *
     * References `shopping_mall_customers.id`.
     */
    initiator_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Seller ID if initiated by a seller, else null.
     *
     * References `shopping_mall_sellers.id`.
     */
    initiator_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Admin assigned to this escalation, if already assigned.
     *
     * References `shopping_mall_admins.id`.
     */
    assigned_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of escalation case (e.g., 'payment dispute', 'order not
     * received', etc).
     *
     * Column `escalation_type`.
     */
    escalation_type: string;

    /**
     * Current status of escalation (e.g., pending, in-review, resolved,
     * closed, escalated-to-admin).
     *
     * Column `escalation_status`.
     */
    escalation_status: string;

    /**
     * Outcome or case closure reason (e.g., 'refund-issued', 'denied',
     * 'order-resent').
     *
     * Nullable in schema.
     */
    resolution_type?: string | null | undefined;

    /**
     * Case creation timestamp.
     *
     * References `shopping_mall_escalations.created_at`.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Most recent update timestamp for this escalation case record.
     *
     * Sourced from `shopping_mall_escalations.updated_at`.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
