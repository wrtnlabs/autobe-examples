import { tags } from "typia";

/**
 * Represents a payment event on an order, capturing details such as payment
 * status, amount, gateway, and audit fields. Maps directly to
 * shopping_mall_order_payments in the e-commerce schema. Sensitive to payment
 * workflow, order association, audit, and compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrderPayment = {
  /**
   * Primary Key. Unique identifier for the payment record per
   * shopping_mall_order_payments.id.
   */
  id: string & tags.Format<"uuid">;

  /** Parent order's ID. Corresponds to shopping_mall_orders.id. */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * Payment method snapshot at the time of order. References
   * shopping_mall_order_payment_methods.id.
   */
  order_payment_method_id: string & tags.Format<"uuid">;

  /**
   * External payment processor/gateway reference/transaction id. Must be
   * unique.
   */
  payment_ref: string;

  /** Payment method type (e.g., card, bank_transfer, paypal, toss, etc). */
  payment_type: string;

  /** Payment status: authorized, captured, failed, refunded, pending, etc. */
  status: string;

  /** Amount paid for this payment (single event). */
  paid_amount: number;

  /** ISO 4217 currency code. E.g., USD, KRW. */
  currency: string;

  /** Timestamp of payment success/settlement, if applicable. */
  paid_at?: (string & tags.Format<"date-time">) | undefined;

  /** When the payment was reconciled with external/bank/accounting records. */
  reconciliation_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Failure or decline message from payment gateway, or business reason for
   * failure.
   */
  fail_reason?: string | undefined;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp for logical deletion [nullable]. */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IShoppingMallOrderPayment {
  /**
   * Request body DTO for filtered, paginated search of order payments. Fields
   * support filtering by status, payment method, date, and control pagination
   * and sort.
   */
  export type IRequest = {
    /**
     * Unique identifier of the order whose payment records are to be
     * retrieved. This is a UUID referencing an order in
     * shopping_mall_orders.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Filter payments by status: authorized, captured, failed, refunded,
     * pending, etc.
     */
    status?: string | undefined;

    /**
     * Filter payments by method type (e.g., card, bank_transfer, paypal,
     * toss, etc.).
     */
    payment_type?: string | undefined;

    /** Start date/time to filter payments (ISO 8601, UTC). */
    date_from?: (string & tags.Format<"date-time">) | undefined;

    /** End date/time to filter payments (ISO 8601, UTC). */
    date_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination (starts at 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of items per page for pagination (max 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Field to sort by, e.g., created_at, paid_at, status. */
    sortBy?: string | undefined;

    /** Sort order: asc (ascending) or desc (descending). */
    sortDirection?: "asc" | "desc" | undefined;
  };

  /**
   * Payload for creating a new payment record for a specific order. Based on
   * shopping_mall_order_payments Prisma model. Must reference
   * order_payment_method_id and specify payment_type, status, paid_amount,
   * and currency. Uniqueness and validation are enforced for payment_ref. See
   * business logic for payment status management.
   */
  export type ICreate = {
    /**
     * Payment method snapshot ID (shopping_mall_order_payment_methods.id)
     * associated with this payment attempt. This identifies the method used
     * for the payment (e.g., card, bank_transfer, etc.). Required for
     * creation.
     */
    order_payment_method_id: string & tags.Format<"uuid">;

    /**
     * External payment processor reference/transaction id for this payment
     * attempt. Used to map local payment record to gateway response. Must
     * be unique if provided.
     */
    payment_ref?: string | undefined;

    /**
     * Type of payment method being processed (e.g., card, bank_transfer,
     * paypal, toss, virtual_account). Must be a valid value mapped to
     * allowed payment processors.
     */
    payment_type: string;

    /**
     * Payment state for this event ('authorized', 'captured', 'failed',
     * 'refunded', 'pending'). Must use valid platform payment status.
     * Status must be set based on payment gateway/provider callback.
     */
    status: string;

    /**
     * Amount paid in this payment event. Must match the expected order
     * total for final capture, or a partial in the case of multi-part
     * payment. Positive float, currency as provided.
     */
    paid_amount: number;

    /**
     * Currency code (e.g. USD, KRW) reflecting the denomination of the
     * payment. Use uppercase ISO currency codes.
     */
    currency: string;

    /**
     * Optional: Failure cause or additional detail from the payment
     * provider, required only if the status is 'failed'. May be null or
     * omitted for non-failed payments.
     */
    fail_reason?: string | undefined;
  };

  /**
   * Fields for updating a payment record for a specific order in
   * shopping_mall_order_payments. Only provide fields that require update;
   * partial resource updates allowed. All changes will be audit-logged and
   * validated for consistency with order/payment status workflow. See
   * business logic for allowed status and field transitions.
   */
  export type IUpdate = {
    /**
     * Optional: Updated gateway payment reference. Used only if payment is
     * retried or external reference changes due to failure/retry triggers.
     */
    payment_ref?: string | undefined;

    /**
     * Type of payment method being updated (e.g., card, bank_transfer,
     * paypal, toss, virtual_account), if payment method is being
     * retried/changed on update events. Must match allowed payment types.
     */
    payment_type?: string | undefined;

    /**
     * Update payment state for the payment event. Must transition according
     * to the allowed business process (e.g., failed → pending, pending →
     * captured, captured → refunded). See platform workflow for valid
     * transitions.
     */
    status?: string | undefined;

    /**
     * Optional: Adjust the paid amount if required by business logic
     * (partial payment, adjustment, error correction). Must be a valid,
     * non-negative float if set.
     */
    paid_amount?: number | undefined;

    /**
     * Currency code (e.g. USD, KRW) if needed for reconciliation, or if
     * payment method/currency changed on update. Uppercase ISO format.
     */
    currency?: string | undefined;

    /**
     * If updating payment due to gateway or business process failure,
     * provide failure reason. This may be updated to better reflect final
     * state after gateway callbacks.
     */
    fail_reason?: string | undefined;
  };
}
