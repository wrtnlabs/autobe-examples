import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerOrderAddressesOrderAddressId } from "../../../../providers/getShoppingMallCustomerOrderAddressesOrderAddressId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { postShoppingMallCustomerOrderAddresses } from "../../../../providers/postShoppingMallCustomerOrderAddresses";

import { IShoppingMallOrderAddress } from "../../../../api/structures/IShoppingMallOrderAddress";

@Controller("/shoppingMall/customer/orderAddresses")
export class ShoppingmallCustomerOrderaddressesController {
  /**
   * Retrieve detailed information for a specific historical order address
   * (shopping_mall_order_addresses).
   *
   * This API operation provides a detailed, read-only view of a single order
   * address snapshot by its ID. The order address table is not user-editable
   * and only contains historical information captured at the time of an order's
   * creation, ensuring audit integrity and accurate fulfillment tracking.
   *
   * Address data includes all fields required for postal, shipping, and
   * compliance workflows—recipient, phone, postal code, address fields (split
   * main/detail), region, country code, and the creation timestamp. Users
   * cannot modify or delete these records for data consistency and legal
   * compliance; only admins may access them depending on platform policy.
   *
   * The operation enforces access such that customers may only view their own
   * orders’ addresses, while admins have platform-wide access. If the specified
   * ID is not found or the user is unauthorized to view it, an appropriate
   * error is returned. This API does not expose linked order or customer
   * identifiers in the response for privacy reasons.
   *
   * This endpoint is most frequently used for user-facing order details
   * screens, audit logs, refunds, cancellations, and admin investigations.
   *
   * @param connection
   * @param orderAddressId Unique identifier (UUID) for the order address
   *   snapshot to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderAddressId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderAddressId")
    orderAddressId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderAddress> {
    try {
      return await getShoppingMallCustomerOrderAddressesOrderAddressId({
        customer,
        orderAddressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Record a new immutable order address snapshot during order placement
   * (shopping_mall_order_addresses).
   *
   * This operation records a new immutable order address snapshot as part of
   * the order placement or checkout workflow. It accepts all required address
   * fields—recipient name, phone, postal code, address lines, detail, country
   * code, and address type—and saves them as a point-in-time record tied to the
   * specific order being placed.
   *
   * Order address snapshots guarantee that fulfillment, support, and audit
   * processes operate on the address as it was given at purchase, regardless of
   * subsequent customer changes to their stored addresses. This separation from
   * the customer address book is critical for compliance, legal records, and
   * reliability in shipping, returns, or dispute resolution.
   *
   * The API is intended for internal service use rather than direct end-user
   * submission; typically, platform systems or order placement flows will
   * invoke this endpoint. Requests are validated for completeness, with missing
   * or malformed fields producing clear errors. Once created, the order address
   * record is immutable and linked to the relevant order record. Only
   * authenticated customers placing an order may call this API.
   *
   * @param connection
   * @param body Complete set of address attributes, as of order placement, to
   *   record as a historical snapshot for the order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallOrderAddress.ICreate,
  ): Promise<IShoppingMallOrderAddress> {
    try {
      return await postShoppingMallCustomerOrderAddresses({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
