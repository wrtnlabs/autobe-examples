import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallCustomerOrderHistories } from "../../../../providers/patchShoppingMallCustomerOrderHistories";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { getShoppingMallCustomerOrderHistoriesOrderHistoryId } from "../../../../providers/getShoppingMallCustomerOrderHistoriesOrderHistoryId";

import { IPageIShoppingMallOrderHistory } from "../../../../api/structures/IPageIShoppingMallOrderHistory";
import { IShoppingMallOrderHistory } from "../../../../api/structures/IShoppingMallOrderHistory";

@Controller("/shoppingMall/customer/orderHistories")
export class ShoppingmallCustomerOrderhistoriesController {
  /**
   * Search, filter, and paginate order history snapshots for customer service
   * and auditing.
   *
   * Retrieve a paginated list of historical snapshots for orders across the
   * shopping mall platform, utilizing the shopping_mall_order_histories table.
   * This operation exposes advanced search and filtering capabilities for order
   * cancellation, refund, escalation, or compliance snapshot records, which
   * enable users and administrators to trace actions and reconstruct an order's
   * timeline.
   *
   * The endpoint supports query parameters to filter by snapshot type (such as
   * 'cancellation', 'refund', 'escalation', or 'appeal'), current or historical
   * order status, date range, and initiator. Customers will only be able to
   * access their own order histories, while sellers may view histories related
   * to their fulfillments, and admins may audit all records regardless of
   * ownership. Search results are presented in descending date order for
   * transparency.
   *
   * Access is governed by role-based permissions, with customers restricted to
   * self-service, sellers to the orders they are responsible for, and admins
   * having full search/audit coverage. Results reflect the complete
   * audit/timepoint context for each service milestone as defined by the
   * schema.
   *
   * @param connection
   * @param body Search/filtering criteria for retrieving order history
   *   snapshots, including snapshot type, order status, actor info, and
   *   pagination controls.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallOrderHistory.IRequest,
  ): Promise<IPageIShoppingMallOrderHistory.ISummary> {
    try {
      return await patchShoppingMallCustomerOrderHistories({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific order history snapshot by its unique ID.
   *
   * Fetch the full detail for a single order history snapshot from the
   * shopping_mall_order_histories table, referenced by its unique
   * orderHistoryId. This endpoint is designed for scenarios where users,
   * sellers, or administrators need to review the exact state of an order at a
   * service milestoneâ€”such as a cancellation, refund, or appeal event.
   *
   * Upon providing the orderHistoryId, the operation returns all stored audit,
   * reason, and context information for that milestone, including total order
   * amount, status, and any business or compliance comments. This detail can
   * support customer self-service, seller dispute workflows, or admin legal
   * review. Access is strictly enforced based on role and ownership: customers
   * may retrieve only their own order events, sellers only for their
   * fulfillments, admins for any history entry. Error responses are provided if
   * the ID does not exist or access is denied.
   *
   * @param connection
   * @param orderHistoryId Unique identifier for the target order history
   *   snapshot to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderHistoryId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderHistoryId")
    orderHistoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderHistory> {
    try {
      return await getShoppingMallCustomerOrderHistoriesOrderHistoryId({
        customer,
        orderHistoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
