import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerCustomerServiceEventsEventId } from "../../../../providers/getShoppingMallCustomerCustomerServiceEventsEventId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerCustomerServiceEventsEventId } from "../../../../providers/putShoppingMallCustomerCustomerServiceEventsEventId";

import { IShoppingMallCustomerServiceEvent } from "../../../../api/structures/IShoppingMallCustomerServiceEvent";

@Controller("/shoppingMall/customer/customerServiceEvents/:eventId")
export class ShoppingmallCustomerCustomerserviceeventsController {
  /**
   * Retrieve a customer service event's details by eventId
   * (shopping_mall_customer_service_events table).
   *
   * This API retrieves a customer service event identified by its unique
   * eventId from the shopping_mall_customer_service_events table. The customer
   * service event logs actions performed by customers, sellers, admins, or the
   * system for order service cases, escalations, or appeals. The log captures
   * the associated order history, escalation, or appeal context, as well as all
   * relevant actor information (customer, seller, admin).
   *
   * Access control is vital: customers may only retrieve events they are
   * directly involved in, sellers may only see events tied to orders/products
   * they are responsible for, and admins can view all cases for oversight or
   * investigation purposes. Sensitive/comment fields require masking or
   * omission for users lacking appropriate permissions.
   *
   * This retrieval operation is critical for customer support timelines, audit
   * trails, and case histories. Error handling includes returning not found for
   * nonexistent IDs, or forbidden for unauthorized access. Related endpoints
   * include searching service events by order or filtering logs by context.
   *
   * @param connection
   * @param eventId Unique identifier of the target customer service event
   *   record (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCustomerServiceEvent> {
    try {
      return await getShoppingMallCustomerCustomerServiceEventsEventId({
        customer,
        eventId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of a customer service event record by eventId
   * (shopping_mall_customer_service_events table).
   *
   * This API allows updating certain allowed fields of an existing customer
   * service event record identified by eventId. The
   * shopping_mall_customer_service_events table provides an audit trail of
   * customer service actions spanning case escalation, investigation,
   * messaging, admin resolution, or appeal. Permitted fields to update may
   * include event_status, event_comment, or actor assignment but never audit or
   * created_at details.
   *
   * Authorization is strictly enforced: typically only admins or specifically
   * assigned actors to the event (e.g., as part of an escalation case) can
   * change status, annotate, or append a comment. Attempts to update fields
   * outside of permission scope or immutable fields (created_at, actor
   * references, order linkage) will be rejected with validation or forbidden
   * errors.
   *
   * The operation incorporates business logic to ensure customer service
   * process integrity, supporting only those field changes reflecting real
   * workflow steps (e.g., review, resolution, annotation), and rigorously logs
   * each update for audit compliance. Related APIs include retrieving event
   * details, listing all events per escalation/appeal, or escalating to admin
   * for further review.
   *
   * @param connection
   * @param eventId Unique identifier of the customer service event to update
   *   (UUID format).
   * @param body Modifiable fields for updating customer service event
   *   (event_status, event_comment, etc.) in accordance with assigned roles and
   *   business workflow.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCustomerServiceEvent.IUpdate,
  ): Promise<IShoppingMallCustomerServiceEvent> {
    try {
      return await putShoppingMallCustomerCustomerServiceEventsEventId({
        customer,
        eventId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
