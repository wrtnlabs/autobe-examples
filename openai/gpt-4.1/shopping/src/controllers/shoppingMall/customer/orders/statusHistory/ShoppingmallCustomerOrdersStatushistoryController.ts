import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallCustomerOrdersOrderIdStatusHistory } from "../../../../../providers/patchShoppingMallCustomerOrdersOrderIdStatusHistory";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { getShoppingMallCustomerOrdersOrderIdStatusHistoryStatusHistoryId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdStatusHistoryStatusHistoryId";

import { IPageIShoppingMallOrderStatusHistory } from "../../../../../api/structures/IPageIShoppingMallOrderStatusHistory";
import { IShoppingMallOrderStatusHistory } from "../../../../../api/structures/IShoppingMallOrderStatusHistory";

@Controller("/shoppingMall/customer/orders/:orderId/statusHistory")
export class ShoppingmallCustomerOrdersStatushistoryController {
  /**
   * Get status and transition history for an order from the Orders table.
   *
   * Retrieve the complete list and timeline of status/history entries for a
   * specific order. This operation supports filtering by event type or date
   * range and provides detailed event metadata for each transition, including
   * the actor (customer, seller, admin), event type, previous and new status,
   * explanation, and timestamps.
   *
   * Access control ensures customers only view status history for their own
   * orders, sellers can audit their fulfilled orders, and admins access any
   * order for compliance. The response returns a paginated time-ordered list of
   * history entries associated with the referenced order ID from the Orders
   * schema. Event data is linked directly to order and optionally to actor rows
   * in related tables.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order for which the status
   *   history is being retrieved.
   * @param body Status history search criteria: filters, pagination, event
   *   type, or date range for retrieval of order status history.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderStatusHistory.IRequest,
  ): Promise<IPageIShoppingMallOrderStatusHistory> {
    try {
      return await patchShoppingMallCustomerOrdersOrderIdStatusHistory({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific order status history event from the OrderStatusHistory
   * table.
   *
   * Retrieve the full information and audit details for a single order status
   * history event. The response includes which actor triggered the event,
   * before and after states, the type of status change, event messages, and the
   * exact timestamp. This information is crucial for customer service, seller
   * support, and administrative audit needs.
   *
   * Access is secured so that customers can view history events for their own
   * orders, sellers for their fulfilled orders, and admins for any order in the
   * system. Error handling covers cases where the specified order ID or
   * statusHistoryId does not exist, or the requesting actor lacks permission to
   * view the data.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the parent order for which the
   *   status history event is being requested.
   * @param statusHistoryId Unique identifier (UUID) of the status history
   *   record being retrieved for the specified order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusHistoryId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("statusHistoryId")
    statusHistoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderStatusHistory> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdStatusHistoryStatusHistoryId(
        {
          customer,
          orderId,
          statusHistoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
