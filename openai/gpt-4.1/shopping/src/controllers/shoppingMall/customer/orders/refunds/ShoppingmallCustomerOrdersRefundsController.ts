import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerOrdersOrderIdRefundsRefundId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdRefundsRefundId";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { postShoppingMallCustomerOrdersOrderIdRefunds } from "../../../../../providers/postShoppingMallCustomerOrdersOrderIdRefunds";

import { IShoppingMallOrderRefund } from "../../../../../api/structures/IShoppingMallOrderRefund";

@Controller("/shoppingMall/customer/orders/:orderId/refunds")
export class ShoppingmallCustomerOrdersRefundsController {
  /**
   * Retrieve the details for a specific refund event related to an order
   * (shopping_mall_order_refunds table).
   *
   * Retrieve complete details for a specific refund event associated with a
   * particular order. This API operates directly on the
   * shopping_mall_order_refunds table, ensuring traceability of refund
   * requests, status changes, refunds resolved, initiator identity, payment
   * linkage, and timeline data.
   *
   * This operation enforces access control such that only the refund owner
   * (customer) or administrators may view sensitive refund and payment data.
   * Unauthorized attempts are denied and logged. The response includes refund
   * status (pending, approved, denied, completed), date/time fields, refund
   * amounts, business reason code, actors, attached explanation, and any
   * settlement or failure timestamps. Data is immutable for audit compliance
   * and used for customer service reviews or appeals workflows.
   *
   * The customer may use this operation through their order history or customer
   * service portal to review the refund progress, resolution, or denial
   * explanation. Admins use it to audit refund handling and improve platform
   * transparency and trust. The refundId parameter must correspond to an
   * existing refund event for the specified orderId; otherwise, enforced error
   * handling returns a 404 or role-based error response.
   *
   * @param connection
   * @param orderId Unique identifier of the target order for which the refund
   *   event belongs (UUID).
   * @param refundId Unique identifier of the refund event to be retrieved
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":refundId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderRefund> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdRefundsRefundId({
        customer,
        orderId,
        refundId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Request a refund for a customer order (shopping_mall_order_refunds).
   *
   * Initiates a refund request for a specific order by the customer. This
   * operation uses the shopping_mall_order_refunds table to log the requested
   * refund, including a reason code, status (such as pending, approved, denied,
   * etc.), and refund amount. The system validates the order and payment state
   * before permitting the refund to be processed. Customers must provide a
   * valid explanation for the refund as well as any required documentation.
   * Upon submission, the request status is set to pending and notifications are
   * sent to sellers and relevant admins for further review and action.
   *
   * Security is enforced by confirming that the requester is the actual order
   * owner, and that refund eligibility matches both platform and seller policy.
   * Sensitive data is restricted and only exposed to authorized parties during
   * refund processing.
   *
   * All business logic, including audit logging, partial versus full refunds,
   * and special handling for failed payment provider scenarios, is implemented
   * by the provider layer. If the refund is denied, the customer will be
   * notified with a clear error message and recovery path. This operation
   * supports compliance requirements for traceability and data retention for at
   * least 5 years.
   *
   * See also: Approving or denying pending refunds via PUT on
   * /orders/{orderId}/refunds/{refundId}.
   *
   * @param connection
   * @param orderId Unique identifier of the target order for which the refund
   *   is being requested
   * @param body Refund request details, including reason code, refund amount,
   *   and supporting documentation (if applicable).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderRefund.ICreate,
  ): Promise<IShoppingMallOrderRefund> {
    try {
      return await postShoppingMallCustomerOrdersOrderIdRefunds({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
