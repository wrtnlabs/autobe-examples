import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerCustomersCustomerId } from "../../../../providers/getShoppingMallCustomerCustomersCustomerId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerCustomersCustomerId } from "../../../../providers/putShoppingMallCustomerCustomersCustomerId";

import { IShoppingMallCustomer } from "../../../../api/structures/IShoppingMallCustomer";

@Controller("/shoppingMall/customer/customers/:customerId")
export class ShoppingmallCustomerCustomersController {
  /**
   * Retrieve a specific customer account's detailed profile information
   * (shopping_mall_customers table).
   *
   * This API endpoint provides detailed profile information for a specific
   * customer, referencing the shopping_mall_customers table from the database
   * schema. This includes core user data such as email, hashed password (NOT
   * returned), legal name, contact phone, status
   * (active/suspended/pending_verification), and email verification flag.
   *
   * Sensitive information, such as email and phone, must only be returned to
   * either the account owner (when authenticated) or to admin users with the
   * right permissions. Unauthorized access should be denied, and attempts to
   * access non-existent accounts must result in clear error reporting.
   *
   * The operation is read-only and does not expose password hashes or sensitive
   * authentication data. Timestamps for account creation and last update are
   * included for audit purposes. Soft-deletion markers (deleted_at) are
   * available for admin review, but not for end-users. This API is closely tied
   * to profile management, admin support tools, and customer authentication
   * workflows. It is often followed by update or delete operations for profile
   * lifecycle management.
   *
   * @param connection
   * @param customerId Unique identifier of the customer whose information is to
   *   be retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCustomer> {
    try {
      return await getShoppingMallCustomerCustomersCustomerId({
        customer,
        customerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the profile information of a specific customer account
   * (shopping_mall_customers table).
   *
   * This API endpoint updates the properties of a single customer account,
   * referencing the shopping_mall_customers entity in the Prisma schema. Only
   * fields that are explicitly updatable by end-users or admins are accepted:
   * full_name, phone, status, and email verification flag can be modified,
   * subject to validation. Email address may also be changed if business logic
   * requires it, but must ensure uniqueness across accounts.
   *
   * Direct updates to security-sensitive fields such as password_hash are not
   * allowed hereâ€”users must use dedicated password reset flows. The API
   * validates the authenticity of the user or administrative privileges before
   * applying any changes. Unauthorized or invalid update attempts must be
   * cleanly rejected, with error codes explaining the failure. All field
   * changes are tracked with updated_at timestamp for audit purposes.
   *
   * This operation supports core customer profile update flows (address and
   * order associations update separately) and integrates into admin dashboards
   * to enable account corrections, suspension/reactivation, and more advanced
   * customer service. The operation references all business rules and
   * validation logic specified in the shopping_mall_customers table comments.
   *
   * @param connection
   * @param customerId Unique identifier of the customer whose profile is being
   *   updated.
   * @param body Updated customer profile information to be applied; all fields
   *   subject to validation and business rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCustomer.IUpdate,
  ): Promise<IShoppingMallCustomer> {
    try {
      return await putShoppingMallCustomerCustomersCustomerId({
        customer,
        customerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
