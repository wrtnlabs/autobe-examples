import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerWishlists } from "../../../../providers/postShoppingMallCustomerWishlists";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerWishlists } from "../../../../providers/patchShoppingMallCustomerWishlists";
import { getShoppingMallCustomerWishlistsWishlistId } from "../../../../providers/getShoppingMallCustomerWishlistsWishlistId";
import { putShoppingMallCustomerWishlistsWishlistId } from "../../../../providers/putShoppingMallCustomerWishlistsWishlistId";
import { deleteShoppingMallCustomerWishlistsWishlistId } from "../../../../providers/deleteShoppingMallCustomerWishlistsWishlistId";

import { IShoppingMallWishlist } from "../../../../api/structures/IShoppingMallWishlist";
import { IPageIShoppingMallWishlist } from "../../../../api/structures/IPageIShoppingMallWishlist";

@Controller("/shoppingMall/customer/wishlists")
export class ShoppingmallCustomerWishlistsController {
  /**
   * Create a new wishlist for the authenticated customer in
   * shopping_mall_wishlists.
   *
   * Create a new wishlist for the authenticated customer. Each customer may
   * have a maximum of one wishlist, managed independently of shopping carts.
   *
   * The operation inserts a new record in shopping_mall_wishlists and
   * associates it with the customer's unique ID. Required properties include
   * shopping_mall_customer_id (owner), timestamps, and any initial
   * configuration (all per the Prisma schema). Business rules ensure that only
   * customers may create wishlists for themselves; attempts to create multiple
   * wishlists or unauthorized creation should return an error.
   *
   * This operation integrates with the user onboarding and product-browsing
   * flows and is the entry point for customers to start saving products. Error
   * handling must include validation for already-existing wishlists
   * (per-customer), missing authentication, or invalid user role. The response
   * returns the newly created wishlist with its properties.
   *
   * @param connection
   * @param body Required properties for creating a new wishlist. Generally,
   *   only customer association is required; wishlist items can be managed
   *   separately after creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallWishlist.ICreate,
  ): Promise<IShoppingMallWishlist> {
    try {
      return await postShoppingMallCustomerWishlists({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filtered list of wishlist products for a
   * customer (shopping_mall_wishlists).
   *
   * This API endpoint allows an authenticated customer to retrieve their entire
   * wishlist, including all currently saved products. The wishlist is specific
   * to the logged-in customer (referenced by the session token) and includes
   * only products that have not been removed or deleted from the platform.
   *
   * The API provides advanced capabilities for searching, filtering, and
   * paginating the wishlist. Customers can apply filters such as product
   * category, date range, or product name. Sorting options may include date
   * added, product name, or recently updated. If wishlist items reference
   * products that no longer exist or have been removed from sale, those entries
   * are excluded from the result, ensuring only active products appear.
   *
   * The wishlist data is paginated for easier client-side rendering, with
   * support for specifying page size and number. Ownership of the wishlist is
   * strictly enforced, and unauthorized attempts to access other customers'
   * wishlists will result in an error. This endpoint does not support creating
   * or updating wishlist content—only retrieval with query enhancements.
   *
   * @param connection
   * @param body Request parameters for filtering, sorting, and paginating the
   *   customer's wishlist retrieval operation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallWishlist.IRequest,
  ): Promise<IPageIShoppingMallWishlist.ISummary> {
    try {
      return await patchShoppingMallCustomerWishlists({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific wishlist by ID from
   * shopping_mall_wishlists.
   *
   * Retrieve the full details of a specific wishlist, including associated
   * product references and timestamps for creation and last modification.
   *
   * This operation references the shopping_mall_wishlists table and returns all
   * properties as defined in the Prisma schema, such as id,
   * shopping_mall_customer_id, created_at, and updated_at. The response
   * includes a list of wishlist items, each linking to a product via
   * shopping_mall_product_id.
   *
   * Access control must ensure that only the wishlist owner or authorized admin
   * roles can view this data. Business rules dictate that wishlists are
   * customer-specific and not visible to sellers or other regular users. Error
   * cases include requests for nonexistent, deleted, or unauthorized wishlists,
   * which should return appropriate errors.
   *
   * This operation supports user flows for retrieving their saved products for
   * browsing, future purchase, or management. It may be used by front-end
   * applications to display the user's saved/wishlist products. If additional
   * details of wishlist items are required (e.g., product info, images), they
   * should be retrieved in a joined or nested response according to the DTO
   * definition.
   *
   * @param connection
   * @param wishlistId Unique identifier for the wishlist to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":wishlistId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallWishlist> {
    try {
      return await getShoppingMallCustomerWishlistsWishlistId({
        customer,
        wishlistId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the details or settings of a customer's wishlist in the
   * shopping_mall_wishlists table.
   *
   * This API allows the owner (customer) of a wishlist to update its settings
   * or details. The operation is performed upon the shopping_mall_wishlists
   * table, whose schema supports fields such as updated_at, customer
   * association, and relational links to wishlist items. The update is only
   * permitted for the customer who owns the wishlist, or for a platform admin
   * through an elevated controller.
   *
   * Business logic for this operation includes verifying the authenticated
   * user's ownership, validating that the wishlist is not soft-deleted
   * (deleted_at is null), and that any modifications match value and integrity
   * constraints (e.g., length limits for names, or uniqueness for certain list
   * properties). The updated_at timestamp is refreshed upon successful
   * operation.
   *
   * The operation is expected to fail if the wishlist does not exist, is soft
   * deleted, or is not owned by the authenticated user. All update actions are
   * logged for audit if the action is performed by an admin. Related APIs
   * typically include wishlist item CRUD operations and creation API for
   * wishlists.
   *
   * @param connection
   * @param wishlistId Unique identifier (UUID) of the wishlist to update.
   * @param body Fields for updating the wishlist, such as name, settings, or
   *   properties. May include updates to related metadata, not to the items
   *   themselves.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":wishlistId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlist.IUpdate,
  ): Promise<IShoppingMallWishlist> {
    try {
      return await putShoppingMallCustomerWishlistsWishlistId({
        customer,
        wishlistId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a customer's wishlist in the shopping_mall_wishlists table by
   * marking it as deleted.
   *
   * This endpoint marks a customer’s wishlist as deleted by updating the
   * deleted_at field with the current timestamp (soft delete). It operates on
   * the shopping_mall_wishlists table, which maintains wishlists for each
   * customer and supports soft deletion for audit, recovery, and compliance
   * reasons.
   *
   * Security-wise, only the owner (authenticated customer) or an admin can
   * perform this operation, ensuring that unauthorized users cannot remove
   * wishlists belonging to others. Once soft deleted, the wishlist is flagged
   * as such and becomes inaccessible to user APIs.
   *
   * The business logic ensures that all references to the wishlist are
   * maintained for audit, but the resource is removed from user-facing displays
   * and future CRUD access. Attempting to delete a wishlist that does not
   * exist, is already deleted, or is not owned by the requester produces a
   * relevant error.
   *
   * This operation is typically used in account cleanup, privacy flows, or
   * administrative maintenance. All actions are audited when performed by an
   * admin.
   *
   * @param connection
   * @param wishlistId Unique identifier (UUID) of the wishlist to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":wishlistId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerWishlistsWishlistId({
        customer,
        wishlistId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
