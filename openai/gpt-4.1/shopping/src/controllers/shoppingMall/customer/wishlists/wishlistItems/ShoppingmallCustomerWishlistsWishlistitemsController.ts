import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerWishlistsWishlistIdWishlistItems } from "../../../../../providers/postShoppingMallCustomerWishlistsWishlistIdWishlistItems";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerWishlistsWishlistIdWishlistItems } from "../../../../../providers/patchShoppingMallCustomerWishlistsWishlistIdWishlistItems";
import { getShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId } from "../../../../../providers/getShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId";
import { putShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId } from "../../../../../providers/putShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId";
import { deleteShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId } from "../../../../../providers/deleteShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId";

import { IShoppingMallWishlistItem } from "../../../../../api/structures/IShoppingMallWishlistItem";
import { IPageIShoppingMallWishlistItem } from "../../../../../api/structures/IPageIShoppingMallWishlistItem";

@Controller("/shoppingMall/customer/wishlists/:wishlistId/wishlistItems")
export class ShoppingmallCustomerWishlistsWishlistitemsController {
  /**
   * Add a product to a customer's wishlist (shopping_mall_wishlist_items
   * table).
   *
   * This operation enables a customer to add a product to an existing wishlist.
   * The endpoint requires the wishlistId path parameter, referencing the target
   * wishlist belonging to the authenticated customer. The request body must
   * include the product to add, and the underlying logic will create a row in
   * shopping_mall_wishlist_items if not present for this (wishlistId,
   * productId) pair.
   *
   * Authorization is enforced so only the owner of the wishlist can add
   * products, and a business rule restricts duplicate product entries per
   * wishlist.
   *
   * If the product is already present, the API may respond with a suitable
   * message or a conflict error. Error handling also covers cases where the
   * referenced wishlist does not exist or does not belong to the caller.
   *
   * The wishlist item entity links the wishlist to a product (not a SKU), and
   * persists the relationship for quick wishlist retrieval and display.
   *
   * @param connection
   * @param wishlistId Unique identifier of the wishlist to modify (must be
   *   owned by the authenticated customer)
   * @param body New wishlist item data specifying the product to add.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlistItem.ICreate,
  ): Promise<IShoppingMallWishlistItem> {
    try {
      return await postShoppingMallCustomerWishlistsWishlistIdWishlistItems({
        customer,
        wishlistId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve all wishlist items for a given customer's wishlist from the
   * shopping_mall_wishlist_items table.
   *
   * Retrieve all wishlist items belonging to a particular customer's wishlist
   * by specifying the wishlist ID. This operation enables customers to see all
   * products they have saved for later consideration or purchase. The returned
   * information includes references to the associated products, timestamps for
   * when items were added or updated, and can be configured to provide
   * paginated results.
   *
   * Customers may apply search or filtering parameters (for instance, to
   * display only products matching certain criteria or to sort by the date
   * added). The response will include all relevant details for wishlist display
   * but will hide internal system fields not intended for customers.
   *
   * Security is enforced so only the wishlist owner (authenticated customer)
   * can access their wishlist items. Requests by unauthorized users to access
   * or enumerate another customer's wishlist will be blocked. The operation is
   * tightly coupled to the shopping_mall_wishlist_items and
   * shopping_mall_products entities as defined in the Prisma schema.
   *
   * @param connection
   * @param wishlistId Unique identifier of the wishlist to retrieve items from.
   * @param body Advanced search, filtering, and pagination criteria for
   *   wishlist item retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlistItem.IRequest,
  ): Promise<IPageIShoppingMallWishlistItem> {
    try {
      return await patchShoppingMallCustomerWishlistsWishlistIdWishlistItems({
        customer,
        wishlistId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific wishlist item identified by
   * wishlistId and wishlistItemId.
   *
   * Retrieve a specific wishlist item by its unique identifier, within the
   * context of a parent wishlist. Only the wishlist owner (authenticated
   * customer) is permitted to access this data. The response includes all
   * details allowed for customer viewing, such as the referenced product
   * information, the time the item was added or updated, and the relationship
   * to the associated wishlist.
   *
   * Attempting to access a wishlist item not belonging to the authenticated
   * customer will result in access denial. This operation is crucial for
   * supporting UI features that display detailed information about a product in
   * the customer's wishlist or facilitate actions like switching an item to the
   * cart.
   *
   * The operation relies on accurate mapping between the path parameter IDs and
   * the shopping_mall_wishlist_items entity structure as defined in the Prisma
   * schema. Security best practices are enforced such that only the relevant
   * customer can retrieve this data by verifying both the wishlist and item
   * ownership.
   *
   * @param connection
   * @param wishlistId Unique identifier of the wishlist containing the item.
   * @param wishlistItemId Unique identifier of the wishlist item to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":wishlistItemId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedParam("wishlistItemId")
    wishlistItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallWishlistItem> {
    try {
      return await getShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId(
        {
          customer,
          wishlistId,
          wishlistItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a wishlist item in a customer's wishlist
   * (shopping_mall_wishlist_items table).
   *
   * This operation lets a customer update an existing wishlist item. Only the
   * owner of the wishlist may perform this operation, and only wishlist items
   * belonging to that wishlist can be updated.
   *
   * Business logic ensures the specified wishlist and wishlist item exist and
   * are associated, and that only supported fields may be updated (such as
   * notes or tags, if present in the entity). Error scenarios include attempts
   * to update non-existent or unauthorized items.
   *
   * The API will check that the combination of wishlistId and wishlistItemId is
   * valid and refers to a record owned by the authenticated customer.
   *
   * @param connection
   * @param wishlistId Unique identifier of the wishlist that contains the
   *   wishlist item.
   * @param wishlistItemId Unique identifier of the wishlist item to update.
   * @param body Data to update for the wishlist item, such as notes or display
   *   fields (fields subject to schema support).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":wishlistItemId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedParam("wishlistItemId")
    wishlistItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlistItem.IUpdate,
  ): Promise<IShoppingMallWishlistItem> {
    try {
      return await putShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId(
        {
          customer,
          wishlistId,
          wishlistItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific product from a customer's wishlist
   * (shopping_mall_wishlist_items).
   *
   * This endpoint deletes a specific product from a customer's wishlist. The
   * operation targets the shopping_mall_wishlist_items entity, which is a join
   * table linking a customer's wishlist to the products they are interested
   * in.
   *
   * Deleting a wishlist item is a permanent action; the wishlist item record is
   * removed from the database, and the product will no longer appear in the
   * customer's wishlist. Customers can only delete items from their own
   * wishlists. The system must confirm that the authenticated user owns the
   * wishlist before permitting the deletion. Attempts to delete wishlist items
   * from another user's wishlist shall be rejected with an appropriate error
   * message.
   *
   * Wishlist management forms part of the customer personalization suite.
   * Associated APIs include adding products to the wishlist, viewing all
   * wishlist items, and removing the entire wishlist, if supported. This hard
   * delete operation is irreversible. If the referenced wishlist or wishlist
   * item does not exist, the system returns a not-found error. No response body
   * is returned for successful completion.
   *
   * @param connection
   * @param wishlistId Unique identifier of the wishlist owning the wishlist
   *   item.
   * @param wishlistItemId Unique identifier of the wishlist item to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":wishlistItemId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedParam("wishlistItemId")
    wishlistItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerWishlistsWishlistIdWishlistItemsWishlistItemId(
        {
          customer,
          wishlistId,
          wishlistItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
