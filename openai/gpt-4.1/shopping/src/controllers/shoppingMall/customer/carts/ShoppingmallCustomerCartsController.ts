import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerCarts } from "../../../../providers/postShoppingMallCustomerCarts";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerCarts } from "../../../../providers/patchShoppingMallCustomerCarts";
import { getShoppingMallCustomerCartsCartId } from "../../../../providers/getShoppingMallCustomerCartsCartId";
import { putShoppingMallCustomerCartsCartId } from "../../../../providers/putShoppingMallCustomerCartsCartId";
import { deleteShoppingMallCustomerCartsCartId } from "../../../../providers/deleteShoppingMallCustomerCartsCartId";

import { IShoppingMallCart } from "../../../../api/structures/IShoppingMallCart";
import { IPageIShoppingMallCartItem } from "../../../../api/structures/IPageIShoppingMallCartItem";
import { IShoppingMallCartItem } from "../../../../api/structures/IShoppingMallCartItem";

@Controller("/shoppingMall/customer/carts")
export class ShoppingmallCustomerCartsController {
  /**
   * Create a new shopping cart for an authenticated customer and return the
   * cart information.
   *
   * Create a new shopping cart for the currently authenticated customer. This
   * writes a new entry into the shopping_mall_carts table, setting the owner
   * and default creation state. If the customer already has a cart, system
   * logic may choose to restore or merge with an abandoned/previous cart rather
   * than create a second one; business logic will enforce this uniqueness.
   *
   * Only an authenticated customer may use this endpoint. The system enforces
   * that no more than one cart exists per customer, returning the current cart
   * state if a cart already exists. Cart creation is typically handled
   * automatically upon user registration or login if no active cart exists, but
   * this API enables explicit cart creation when needed in the front-end flow.
   *
   * Related operations include cart retrieval, adding items, and cart
   * modification. Error handling addresses the case of duplicate cart creation
   * attempts or violation of unique-per-customer constraints.
   *
   * @param connection
   * @param body Parameters for creating a new shopping cart for the customer.
   *   Typically empty, but can be extended (e.g., for paying guest migration or
   *   cart merge instructions).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallCart.ICreate,
  ): Promise<IShoppingMallCart> {
    try {
      return await postShoppingMallCustomerCarts({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated search and retrieval of items in a customer's shopping cart
   * (shopping_mall_carts, shopping_mall_cart_items).
   *
   * Retrieve a filtered and paginated list of shopping cart items for the
   * authenticated customer. This operation returns all SKUs held in the cart,
   * supporting search criteria such as product/SKU name, summary view, and
   * advanced sorting.
   *
   * This API integrates data from both the shopping_mall_carts and
   * shopping_mall_cart_items entities, returning each item's SKU, product
   * detail snapshot, unit price, added quantity, and last update time. The
   * operation supports pagination and sorting, allowing customers to
   * efficiently manage large or long-standing shopping carts.
   *
   * Authorization is strictly enforced: customers may only access their own
   * carts and cannot view or modify cart data of others. If no active cart is
   * found, the operation returns an empty result set. All returned data
   * accurately reflects the current state of the cart and its items in the
   * shopping_mall_carts and shopping_mall_cart_items tables.
   *
   * @param connection
   * @param body Search, filtering, and pagination parameters for cart item
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallCartItem.IRequest,
  ): Promise<IPageIShoppingMallCartItem> {
    try {
      return await patchShoppingMallCustomerCarts({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a shopping cart by cartId, including all
   * line items.
   *
   * Retrieve the details of a specific shopping cart, allowing a customer to
   * view the products, SKUs, and current quantities in their cart. This
   * operation references the shopping_mall_carts and shopping_mall_cart_items
   * tables, incorporating all cart structure, creation and update timestamps,
   * and links to associated user and SKUs according to the schema.
   *
   * Security enforces that only the owner of the cart (authenticated customer)
   * can access the cart, preventing unauthorized viewing by others. Admin users
   * may also have access to view any cart for customer service or
   * troubleshooting purposes. Attempts to access a non-existent or unauthorized
   * cart will result in clear error responses.
   *
   * Related business logic for price and inventory validation may be triggered
   * here to ensure displayed information is up-to-date. This operation is
   * frequently paired with cart modification and checkout processes in the
   * customer journey.
   *
   * @param connection
   * @param cartId Unique identifier (UUID) of the shopping cart to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCart> {
    try {
      return await getShoppingMallCustomerCartsCartId({
        customer,
        cartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the existing shopping cart for the authenticated customer.
   *
   * This API endpoint enables a customer to update the contents or attributes
   * of their shopping cart. The cart is uniquely identified by the cartId path
   * parameter, which corresponds to the primary key in the shopping_mall_carts
   * table.
   *
   * Customers can use this operation to update their cart's items, such as
   * changing quantities or removing entire items. The update logic ensures that
   * changes are only applied to the authorized user's own cart, verifying cart
   * ownership and data integrity. The request body must include the updated
   * data as specified by the IShoppingMallCart.IUpdate schema, which reflects
   * all allowable modifications defined in the shopping_mall_carts schema,
   * including updated_at timestamp. Validation checks are performed to enforce
   * business rules such as maximum allowed cart items, quantity per SKU, and
   * stock availability.
   *
   * If the cart does not exist, or if the user attempts to update a cart not
   * owned by them, the operation returns an appropriate error message. Business
   * logic handles scenarios such as updating to a quantity greater than
   * available stock or attempting modifications when the cart has already been
   * converted to an order. Related operations include retrieving cart details
   * or adding/removing items individually. All updates are time-stamped for
   * audit and customer experience tracking.
   *
   * @param connection
   * @param cartId Unique identifier of the shopping cart to be updated
   * @param body Updated information for the customer's shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCart.IUpdate,
  ): Promise<IShoppingMallCart> {
    try {
      return await putShoppingMallCustomerCartsCartId({
        customer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a shopping cart owned by the authenticated customer.
   *
   * This API endpoint allows an authenticated customer to permanently delete
   * their shopping cart. The cart is specified by the cartId path parameter,
   * which directly maps to the primary key in the shopping_mall_carts table.
   *
   * Upon receiving the delete request, the system validates that the cart
   * exists and belongs to the authenticated user. Successful deletion results
   * in the removal of the cart record and all related cart items; the operation
   * performs a hard delete as there is no soft delete column in
   * shopping_mall_carts. This ensures that abandoned or unwanted carts are
   * purged, supporting clean state management for customers.
   *
   * If a customer attempts to delete a cart not owned by them, the system
   * returns an authorization error. Attempts to delete non-existent or already
   * checked-out carts also trigger appropriate error messages, ensuring
   * consistent business logic. Deleting a cart cannot be undone and requires
   * the customer to recreate a cart for further shopping activities. Related
   * operations include updating or retrieving cart details. All deletes are
   * audited for compliance and troubleshooting.
   *
   * @param connection
   * @param cartId Unique identifier of the shopping cart to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerCartsCartId({
        customer,
        cartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
