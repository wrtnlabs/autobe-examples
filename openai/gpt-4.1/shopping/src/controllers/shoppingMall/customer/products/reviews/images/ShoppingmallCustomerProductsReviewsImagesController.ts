import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerProductsProductIdReviewsReviewIdImages } from "../../../../../../providers/postShoppingMallCustomerProductsProductIdReviewsReviewIdImages";
import { CustomerAuth } from "../../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../../decorators/payload/CustomerPayload";
import { deleteShoppingMallCustomerProductsProductIdReviewsReviewIdImagesImageId } from "../../../../../../providers/deleteShoppingMallCustomerProductsProductIdReviewsReviewIdImagesImageId";

import { IShoppingMallReviewImage } from "../../../../../../api/structures/IShoppingMallReviewImage";

@Controller(
  "/shoppingMall/customer/products/:productId/reviews/:reviewId/images",
)
export class ShoppingmallCustomerProductsReviewsImagesController {
  /**
   * Attach new image(s) to an existing product review as review author
   * (shopping_mall_review_images table).
   *
   * Allows a customer to attach new image(s) to an existing product review for
   * visual enhancement. The operation ensures that only the review's original
   * author can upload images, with access restricted by the review's status
   * (e.g., active, not deleted, not rejected by moderation).
   *
   * It references the shopping_mall_review_images entity in the Prisma schema,
   * supporting up to 5 images per review by system policy. Uploaded images are
   * validated for file type, size, and content guidelines before association.
   * Business logic prevents uploading more images than permitted, and all new
   * images are subject to automatic and/or manual content moderation as per
   * platform rules.
   *
   * Security controls ensure that the image is attached only to a review
   * authored by the requesting customer. Any attempt by a non-author or for a
   * non-existent review triggers an error. The operation also ensures that
   * moderation or locked reviews cannot receive new images.
   *
   * Error scenarios include exceeding the maximum allowed images, uploading
   * disallowed content types, or failing moderation checks. Related operations
   * include image deletion and complete review retrieval for management of
   * attached images.
   *
   * @param connection
   * @param productId The unique identifier of the product being reviewed.
   * @param reviewId The unique identifier of the product review to which images
   *   will be added.
   * @param body Image upload and metadata for a new review image attachment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewImage.ICreate,
  ): Promise<IShoppingMallReviewImage> {
    try {
      return await postShoppingMallCustomerProductsProductIdReviewsReviewIdImages(
        {
          customer,
          productId,
          reviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific image uploaded to a product review by the review's author
   * (shopping_mall_review_images table).
   *
   * Enables the review author to permanently remove a previously attached image
   * from a product review. This action deletes the image reference from the
   * shopping_mall_review_images table and, if applicable, removes the image
   * asset from storage/CDN.
   *
   * Access control restricts this operation to the review's author; admins may
   * override only in moderation or policy violation cases as per business
   * rules. The operation verifies the existence of the image and its linkage to
   * the review and user before deletion. It disallows deletion for
   * locked/restricted reviews or images already subject to moderation
   * procedure.
   *
   * The operation accepts productId, reviewId, and imageId as path parameters
   * to specifically identify the target image. Business logic and schema
   * constraints ensure that deletion does not violate any retention or
   * moderation policies. Error conditions include unauthorized attempts, not
   * found images, or trying to remove images from non-editable reviews.
   * Deletion actions are audit-logged for platform compliance.
   *
   * This endpoint complements review image upload and detail retrieval APIs to
   * provide full review image lifecycle management for users.
   *
   * @param connection
   * @param productId The unique identifier of the product being reviewed.
   * @param reviewId The unique identifier of the product review associated with
   *   the image.
   * @param imageId The unique identifier of the image to be deleted from the
   *   review.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":imageId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerProductsProductIdReviewsReviewIdImagesImageId(
        {
          customer,
          productId,
          reviewId,
          imageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
