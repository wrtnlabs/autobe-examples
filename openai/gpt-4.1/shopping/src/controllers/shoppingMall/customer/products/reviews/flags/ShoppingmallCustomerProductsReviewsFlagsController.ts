import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerProductsProductIdReviewsReviewIdFlags } from "../../../../../../providers/postShoppingMallCustomerProductsProductIdReviewsReviewIdFlags";
import { CustomerAuth } from "../../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerProductsProductIdReviewsReviewIdFlagsFlagId } from "../../../../../../providers/putShoppingMallCustomerProductsProductIdReviewsReviewIdFlagsFlagId";

import { IShoppingMallReviewFlag } from "../../../../../../api/structures/IShoppingMallReviewFlag";

@Controller(
  "/shoppingMall/customer/products/:productId/reviews/:reviewId/flags",
)
export class ShoppingmallCustomerProductsReviewsFlagsController {
  /**
   * Flag a product review for moderation or abuse, associated with the
   * review_flags table.
   *
   * Use this endpoint when a platform participant (customer, seller, or admin)
   * wishes to report a product review for suspected abuse, spam, or policy
   * violation. The flag is recorded in the shopping_mall_review_flags table,
   * referencing the specific review and actor (derived from authentication
   * context). Multiple actors may flag the same review, but a single actor can
   * only have one open flag per review.
   *
   * Upon submission, the system validates the review exists and is active, and
   * checks for any existing unresolved flags by the same user. The API enforces
   * role-based authentication, ensures flags have a clear reason, and logs
   * every event for audit and moderation workflows. The review owner is not
   * notified directly, but admins and moderation tools receive notice of
   * submitted flags for processing. Related operations include update
   * (modifying note/status), and resolution (via admin action).
   *
   * Security considerations: Only authenticated users may flag reviews.
   * Attempts to flag non-existent or deleted reviews return clear error
   * messages. All flag actions are logged for moderation transparency.
   *
   * The specification references the shopping_mall_review_flags table in the
   * Prisma schema. Each flag record contains the review association, actor
   * details (customer, seller, or admin), the reason for flagging, a note
   * field, status (open/closed), and audit timestamps.
   *
   * @param connection
   * @param productId ID of the product that the review belongs to.
   * @param reviewId ID of the review being flagged.
   * @param body Flag creation details including reason for reporting and
   *   optional note.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewFlag.ICreate,
  ): Promise<IShoppingMallReviewFlag> {
    try {
      return await postShoppingMallCustomerProductsProductIdReviewsReviewIdFlags(
        {
          customer,
          productId,
          reviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a review flag's note or moderation status by flagId, for compliance
   * and moderation workflows.
   *
   * This operation lets an authorized user (primarily admin, but also original
   * flagger) modify details of a product review flag, such as changing the note
   * or updating the workflow status (for example, to 'resolved' or 'rejected'
   * after moderation review). Each flag is uniquely identified by productId,
   * reviewId, and flagId.
   *
   * Security: Only the flag creator or platform moderators/admins can update a
   * flag's note or status. Attempts to update a non-existent or closed flag are
   * rejected with an appropriate error. Changes are always fully audited and
   * tracked for compliance.
   *
   * On successful update, the system logs the event, re-validates business
   * rules (e.g., status transition logic), and notifies relevant actors if
   * escalation is required. This endpoint references the
   * shopping_mall_review_flags table in the Prisma schema, where each flag
   * includes actor, note, current status, and audit fields.
   *
   * @param connection
   * @param productId ID of the product associated with the review and flag.
   * @param reviewId ID of the review being flagged.
   * @param flagId ID of the specific review flag to update.
   * @param body Fields to update: note text or status value.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":flagId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("flagId")
    flagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewFlag.IUpdate,
  ): Promise<IShoppingMallReviewFlag> {
    try {
      return await putShoppingMallCustomerProductsProductIdReviewsReviewIdFlagsFlagId(
        {
          customer,
          productId,
          reviewId,
          flagId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
