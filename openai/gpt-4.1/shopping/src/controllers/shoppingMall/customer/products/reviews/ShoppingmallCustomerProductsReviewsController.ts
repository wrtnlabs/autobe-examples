import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerProductsProductIdReviews } from "../../../../../providers/postShoppingMallCustomerProductsProductIdReviews";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerProductsProductIdReviewsReviewId } from "../../../../../providers/putShoppingMallCustomerProductsProductIdReviewsReviewId";
import { deleteShoppingMallCustomerProductsProductIdReviewsReviewId } from "../../../../../providers/deleteShoppingMallCustomerProductsProductIdReviewsReviewId";

import { IShoppingMallReview } from "../../../../../api/structures/IShoppingMallReview";

@Controller("/shoppingMall/customer/products/:productId/reviews")
export class ShoppingmallCustomerProductsReviewsController {
  /**
   * Create a new review for a product in shopping_mall_reviews
   * (customer-authored).
   *
   * Allows a customer to submit a product review and rating after a completed
   * purchase. This endpoint validates that the customer has purchased the
   * product and has not already reviewed this item for this order, enforcing
   * the business rule of one review per (customer, product, order) triplet. The
   * review includes a mandatory rating (integer 1-5), body text, and can
   * optionally include attached image URIs.
   *
   * Upon submission, the review is stored in the shopping_mall_reviews table
   * with status defaulting to pending or auto-approved per policy. Automated
   * content moderation is applied before publication; reviews flagged for
   * issues or policy violation are routed for admin review before appearing in
   * the product's aggregate rating.
   *
   * Proper authentication is required (customer role). Error handling covers
   * duplicate reviews, policy violations, and purchase verification failures.
   * The IShoppingMallReview.ICreate DTO describes the expected payload; the
   * response includes the created review in normalized form for immediate
   * display or further moderation.
   *
   * @param connection
   * @param productId The unique identifier of the product being reviewed.
   * @param body New review submission, including rating, review body, optional
   *   images, and order reference.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReview.ICreate,
  ): Promise<IShoppingMallReview> {
    try {
      return await postShoppingMallCustomerProductsProductIdReviews({
        customer,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a customer's review for a specific product (shopping_mall_reviews
   * table).
   *
   * Edit a previously posted product review. The operation is designed for
   * customers who wish to update their feedback on products they have
   * purchased. Each review is uniquely identified by its productId and
   * reviewId, ensuring only the original author (reviewing customer) can edit
   * their review.
   *
   * The API operation first verifies the customer's authorship to enforce that
   * only the initial submitter can edit their own review. If the review is not
   * found, deleted, or does not belong to the authenticated user, an error is
   * thrown with explanation. Review update input includes rating (1-5,
   * integer), review body (10-2000 characters, string), and optional adjustment
   * of review images (up to system limit, typically 5 images per review, each
   * â‰¤4MB).
   *
   * Any modification to the rating or body resets moderation status to
   * "pending" if an auto-moderation workflow applies; an email or in-app
   * notification may inform the reviewer of status changing. Changes are logged
   * for admin review. If a review is under forced moderation lock or was
   * previously permanently rejected/hidden by admin, this operation is blocked
   * with a suitable client-facing error code. The response includes the full
   * updated review object including status, moderation state, and timestamps.
   * Success or validation errors are returned with clear messaging.
   *
   * @param connection
   * @param productId Unique identifier of the product being reviewed
   * @param reviewId Unique identifier of the review to update
   * @param body New review data: updated rating, body text, and optional image
   *   URIs. Only body/rating/images may be changed; authorship and order are
   *   immutable.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reviewId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReview.IUpdate,
  ): Promise<IShoppingMallReview> {
    try {
      return await putShoppingMallCustomerProductsProductIdReviewsReviewId({
        customer,
        productId,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (soft-delete) a customer's product review for compliance and
   * storefront removal (shopping_mall_reviews table).
   *
   * Completely remove (soft delete) a product review previously authored by the
   * authenticated customer. This API operation deactivates the review by
   * setting the deleted_at flag, making it invisible on the storefront and
   * excluded from all rating calculations and product detail listings, but
   * retaining a record for compliance audit and potential admin moderation
   * review.
   *
   * Authorization is tightly enforced: only the original review author
   * (customer) can perform this erase action. The endpoint checks the review's
   * existence, ownership, and current moderation status. If the review was
   * already deleted, an error is returned with an informative message. Attempts
   * to delete reviews under admin moderation lock, or belonging to another
   * customer, are denied with a clear error response. All erase operations are
   * audit-logged for future reference.
   *
   * No response body is returned on success; an HTTP 204 (No Content) is
   * expected. This operation is critical for customer self-service controls
   * over their feedback and aligns with best practice data retention policies
   * for online marketplaces.
   *
   * @param connection
   * @param productId Unique identifier of the product whose review is being
   *   deleted
   * @param reviewId Unique identifier of the review to erase (soft delete)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reviewId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerProductsProductIdReviewsReviewId({
        customer,
        productId,
        reviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
