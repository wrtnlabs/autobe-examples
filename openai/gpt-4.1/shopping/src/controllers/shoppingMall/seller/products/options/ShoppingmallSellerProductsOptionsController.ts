import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdOptions } from "../../../../../providers/postShoppingMallSellerProductsProductIdOptions";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerProductsProductIdOptionsOptionId } from "../../../../../providers/putShoppingMallSellerProductsProductIdOptionsOptionId";
import { deleteShoppingMallSellerProductsProductIdOptionsOptionId } from "../../../../../providers/deleteShoppingMallSellerProductsProductIdOptionsOptionId";

import { IShoppingMallProductOption } from "../../../../../api/structures/IShoppingMallProductOption";

@Controller("/shoppingMall/seller/products/:productId/options")
export class ShoppingmallSellerProductsOptionsController {
  /**
   * Create a product option for a given product in
   * shopping_mall_product_options table.
   *
   * Allows the authenticated seller of a product, or an admin, to define a new
   * product option within an existing product for variant management. This
   * operation is functionally tied to the shopping_mall_product_options table
   * in the Prisma schema, which contains fields for the option's parent
   * product, display name, display order, and timestamps for audit.
   *
   * The operation imposes business validation such that only an authenticated
   * seller who owns the product or an admin may create product options.
   * Duplicate option names for the same product are not allowed, and all option
   * names must comply with business naming conventions. The creation also
   * timestamps audit information for later review.
   *
   * This operation presumes that options are essential for generating all valid
   * SKU combinations for a product. API consumers should be aware that creating
   * an option does not automatically generate SKUs but allows subsequent
   * composition of product variants. If the same option name exists for the
   * targeted product, the server returns a conflict error. Related APIs include
   * product option value management and SKU creation endpoints.
   *
   * @param connection
   * @param productId Unique identifier of the parent product to which the
   *   option will be added.
   * @param body Parameters for creating a product option, such as name and
   *   display order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOption.ICreate,
  ): Promise<IShoppingMallProductOption> {
    try {
      return await postShoppingMallSellerProductsProductIdOptions({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a product option for a specific product in
   * shopping_mall_product_options table.
   *
   * Enables the seller of a product or an admin user to modify an existing
   * product option. This is applied to records in the
   * shopping_mall_product_options table which stores information on options
   * like size, color, and other configurable fields relevant for SKU
   * generation.
   *
   * The operation strictly checks that only the product's owning seller or an
   * admin can update the option, enforcing correct authorization and preventing
   * cross-product editing. Business rules forbid duplicate option names for a
   * given product and require the option name to conform to platform validation
   * rules (length, prohibited characters, etc). Update timestamps are
   * maintained for auditing purposes.
   *
   * If the specified product or option ID does not exist, or if the user
   * attempts to assign a duplicate name, the operation returns an error. This
   * API is typically called as part of catalog management interfaces for
   * sellers and admin dashboards. Related endpoints include option creation,
   * deletion, and SKU management APIs.
   *
   * @param connection
   * @param productId Unique identifier of the parent product to which the
   *   option belongs.
   * @param optionId Unique identifier of the product option to be updated.
   * @param body Information required to update a product option, including
   *   updated name or display order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":optionId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOption.IUpdate,
  ): Promise<IShoppingMallProductOption> {
    try {
      return await putShoppingMallSellerProductsProductIdOptionsOptionId({
        seller,
        productId,
        optionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific product option from a product
   * (shopping_mall_product_options) if not used by SKUs.
   *
   * This API endpoint enables sellers or administrators to permanently delete a
   * specific option (such as 'Color' or 'Size') from a given product in the
   * catalog. Deletion is allowed only if the option belongs to the targeted
   * product and the requesting user is authorized. The system enforces business
   * rules such that if any SKU is currently configured to use this option,
   * deletion is strictly blocked. The client receives an informative error if
   * attempting to delete an option that is still referenced in product
   * variants.
   *
   * Security is enforced such that only the product's owning seller or an admin
   * can execute this operation. Audit logs are maintained for compliance and
   * transparency. The product option removal updates all related database
   * references and supports real-time cache or indexing triggers, if any, to
   * ensure product listings remain accurate.
   *
   * This operation is crucial for catalog maintenance, variant management, and
   * keeping product metadata clean, as enforced by catalog management business
   * logic.
   *
   * @param connection
   * @param productId The unique identifier of the product to which the option
   *   belongs.
   * @param optionId The unique identifier of the product option to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":optionId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdOptionsOptionId({
        seller,
        productId,
        optionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
