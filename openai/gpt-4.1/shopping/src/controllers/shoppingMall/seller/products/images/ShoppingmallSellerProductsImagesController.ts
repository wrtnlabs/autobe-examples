import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdImages } from "../../../../../providers/postShoppingMallSellerProductsProductIdImages";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerProductsProductIdImagesImageId } from "../../../../../providers/putShoppingMallSellerProductsProductIdImagesImageId";
import { deleteShoppingMallSellerProductsProductIdImagesImageId } from "../../../../../providers/deleteShoppingMallSellerProductsProductIdImagesImageId";

import { IShoppingMallCatalogImage } from "../../../../../api/structures/IShoppingMallCatalogImage";

@Controller("/shoppingMall/seller/products/:productId/images")
export class ShoppingmallSellerProductsImagesController {
  /**
   * Add a new image to a specific product (shopping_mall_products table).
   *
   * This API endpoint receives a request to upload a new image for an existing
   * product. The target product is identified by the 'productId' path parameter
   * and must already exist in the product catalog. Sellers can use this to
   * expand the product gallery, or admins can use it for moderation or
   * compliance requirements.
   *
   * Request validation includes the following: the image file must be properly
   * uploaded and accessible via a URI; metadata such as optional alt text and
   * display order may be supplied; and the user must have the necessary
   * authorization to modify this product's catalog content. The system will
   * enforce maximum image count per product, allowable image file formats, and
   * size limits as per current platform configuration. If the image violates
   * policy, an error code and descriptive message will be provided.
   *
   * Security considerations: Only sellers assigned to the product and admins
   * can add images to products. Attempts by unauthorized users will be denied.
   * Image uploads may be subject to further background moderation (automated or
   * manual) before being publicly displayed.
   *
   * Related APIs: GET /products/{productId}/images (for viewing all images),
   * PUT /products/{productId}/images/{imageId} (for modifying an existing
   * image), DELETE /products/{productId}/images/{imageId} (for removing an
   * image). Each modification triggers update to product cache and business
   * audit logs. Failure cases (invalid productId, unauthorized action, invalid
   * image, or storage errors) result in appropriate error responses and do not
   * affect existing images.
   *
   * @param connection
   * @param productId Unique identifier of the product to which the new image
   *   will be added.
   * @param body Details for the image to be uploaded, including the storage
   *   URI, optional alt text, and display order within the product gallery.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCatalogImage.ICreate,
  ): Promise<IShoppingMallCatalogImage> {
    try {
      return await postShoppingMallSellerProductsProductIdImages({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an image's metadata for a specific product (shopping_mall_products,
   * shopping_mall_catalog_images).
   *
   * This API endpoint receives a request to update image metadata for a
   * specific image belonging to a product. It supports changing properties such
   * as alt text (for accessibility), display order (for gallery sorting), or
   * image URI (for replacing the visual asset).
   *
   * Only authorized users, specifically the seller assigned to the product or
   * designated admins, may perform this operation. The endpoint validates both
   * the existence of the referenced image and the user's permission to modify
   * it. The business logic layer ensures that updates are consistent with
   * product limits (e.g., ordering within the current product image set) and
   * enforces audit logging for accountability.
   *
   * If the operation is successful, the response includes the newly updated
   * image object with all applied changes. Failure modes include invalid
   * product or image IDs, permission denials, invalid input data, or attempts
   * to update images not belonging to the specified product. Related endpoints
   * are POST /products/{productId}/images for creation and DELETE
   * /products/{productId}/images/{imageId} for removal. All modifications
   * affect product cache and may trigger UI gallery reorder.
   *
   * @param connection
   * @param productId Unique identifier of the product whose image is to be
   *   updated.
   * @param imageId Unique identifier of the image to update within the
   *   product's gallery.
   * @param body New image metadata or reference to apply to this product image
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":imageId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCatalogImage.IUpdate,
  ): Promise<IShoppingMallCatalogImage> {
    try {
      return await putShoppingMallSellerProductsProductIdImagesImageId({
        seller,
        productId,
        imageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an image from a product in shopping_mall_catalog_images by imageId.
   *
   * The main purpose of this API operation is to enable sellers or
   * administrators to remove an individual image associated with a given
   * product. The deletion process ensures that the specified image record is
   * permanently deleted from the shopping_mall_catalog_images table: the system
   * removes the image by its unique imageId and verifies that the requesting
   * user is the seller of the product or an authorized admin.
   *
   * Security rules require strict authorization so that only the product's
   * owner (seller) or platform admins are permitted to perform this operation.
   * The relationship to the shopping_mall_products and
   * shopping_mall_catalog_images tables is crucial since images are referenced
   * by productId and are displayed in product galleries throughout the
   * marketplace. Additionally, the operation respects any logical or business
   * constraints, such as ensuring at least one product image remains if a
   * business rule requires it, and denies deletion otherwise.
   *
   * Business logic for validation includes checking that the product and image
   * exist and that the image is indeed associated with the given productId. If
   * the image being deleted is the product's primary image, the system may
   * trigger fallback behavior to another available image or flag the product as
   * lacking a main image; error handling must inform the caller of such states
   * and enforce consistent catalog appearance. This operation is related to the
   * PATCH /products/{productId}/images endpoint for retrieving or updating
   * product images and should be documented together for product management
   * workflows.
   *
   * @param connection
   * @param productId Unique identifier of the product whose image will be
   *   deleted.
   * @param imageId Unique identifier of the image to be deleted from the
   *   specified product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":imageId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdImagesImageId({
        seller,
        productId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
