import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdOptionsOptionIdValues } from "../../../../../../providers/postShoppingMallSellerProductsProductIdOptionsOptionIdValues";
import { SellerAuth } from "../../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../../decorators/payload/SellerPayload";
import { patchShoppingMallSellerProductsProductIdOptionsOptionIdValues } from "../../../../../../providers/patchShoppingMallSellerProductsProductIdOptionsOptionIdValues";
import { putShoppingMallSellerProductsProductIdOptionsOptionIdValuesValueId } from "../../../../../../providers/putShoppingMallSellerProductsProductIdOptionsOptionIdValuesValueId";
import { deleteShoppingMallSellerProductsProductIdOptionsOptionIdValuesValueId } from "../../../../../../providers/deleteShoppingMallSellerProductsProductIdOptionsOptionIdValuesValueId";

import { IShoppingMallProductOptionValue } from "../../../../../../api/structures/IShoppingMallProductOptionValue";
import { IPageIShoppingMallProductOptionValue } from "../../../../../../api/structures/IPageIShoppingMallProductOptionValue";

@Controller("/shoppingMall/seller/products/:productId/options/:optionId/values")
export class ShoppingmallSellerProductsOptionsValuesController {
  /**
   * Create a new product option value for a product option
   * (shopping_mall_product_option_values).
   *
   * Add a new value (such as 'Blue', 'Large') to an existing product option
   * (like color or size) for a specific product. This is essential for
   * supporting new variants and expanding available SKUs for a product. The
   * operation validates seller/admin permissions, enforces value uniqueness,
   * and provides clear error feedback if a duplicate or invalid value is
   * submitted.
   *
   * The input must conform to IShoppingMallProductOptionValue.ICreate
   * structure, which includes the desired display value and ordering. The
   * system checks the parent product's ownership (only the seller of this
   * product or admins may add option values), as well as option existence and
   * activation.
   *
   * On success, it returns the full details of the new option value, suitable
   * for further SKU creation or UI refresh. Business rules embedded in the
   * Prisma schema, such as unique value per option and index, are strictly
   * enforced. This complements option and product management workflows for
   * inventory and catalog updates.
   *
   * @param connection
   * @param productId Unique identifier for the product to augment option
   *   values.
   * @param optionId Unique identifier for the product option (e.g., color,
   *   size) to add the value to.
   * @param body Creation details for the new option value (e.g., value text and
   *   display order).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOptionValue.ICreate,
  ): Promise<IShoppingMallProductOptionValue> {
    try {
      return await postShoppingMallSellerProductsProductIdOptionsOptionIdValues(
        {
          seller,
          productId,
          optionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of possible values for a specific
   * product option (shopping_mall_product_option_values).
   *
   * This API lists all option values (such as 'Red', 'XL', etc.) for a specific
   * option on a product, with support for searching, filtering, and pagination.
   * The operation references the product and product option as path parameters,
   * ensuring both resources exist and are associated. Requesters can filter
   * option values by attributes such as display name or display order.
   *
   * Security is applied such that only authorized sellers (owners of the
   * product) or admin users can access this feature. The endpoint is useful for
   * managing the spectrum of choices offered for a product and bulk operations
   * in the product editing UI. The response provides the data in a paginated
   * structure with metadata about available total records, supporting efficient
   * dashboards and lazy loading interfaces.
   *
   * This operation connects directly to the underlying product option values in
   * the shopping_mall_product_option_values schema table and is used for
   * catalog maintenance purposes. Error handling will return clear validation
   * messages if the option or product does not exist or if access is
   * unauthorized.
   *
   * @param connection
   * @param productId The unique identifier of the product to which the option
   *   and its values belong.
   * @param optionId The unique identifier of the product option whose values
   *   are being listed.
   * @param body Filter and pagination parameters for searching option values
   *   within a product option (e.g., value name, order, created_at).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOptionValue.IRequest,
  ): Promise<IPageIShoppingMallProductOptionValue> {
    try {
      return await patchShoppingMallSellerProductsProductIdOptionsOptionIdValues(
        {
          seller,
          productId,
          optionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific option value (e.g., color or size) for a product option,
   * by product ID, option ID, and value ID, in the
   * shopping_mall_product_option_values table.
   *
   * This API operation allows sellers or admins to modify the value associated
   * with a specific product option for a designated product within the
   * e-commerce platform. The option value is a component of the variant system,
   * enabling product listings to support multiple selectable attributes such as
   * color, size, or material. Each option value must remain unique within its
   * option group and product, and changes must not violate variant combination
   * integrity.
   *
   * Security checks ensure that only the seller owning the product or platform
   * admins can update an option value. Attempting to update an option value not
   * associated with the specified product or option group returns a not-found
   * or unauthorized error. All modifications update the updated_at timestamp
   * for audit purposes, and relevant product SKUs using this value may require
   * downstream updates or cache invalidation.
   *
   * The structure strictly requires the three-level identifier path (productId,
   * optionId, valueId) to target the exact value record. Business logic
   * prohibits updating a value to one that would duplicate an existing value
   * within the same option. If the value is currently referenced by active
   * orders or SKUs, business validation ensures updates are consistent and
   * legal. Errors are returned for not found, forbidden, or validation
   * violations. This operation relates to the
   * shopping_mall_product_option_values and their links to
   * shopping_mall_product_options and shopping_mall_products tables.
   *
   * @param connection
   * @param productId Unique identifier of the product the option belongs to.
   * @param optionId Unique identifier of the option group within the product
   *   (e.g., color, size).
   * @param valueId Unique identifier of the option value to update.
   * @param body Fields to update in the product option value (e.g., value name,
   *   display order, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":valueId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedParam("valueId")
    valueId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOptionValue.IUpdate,
  ): Promise<IShoppingMallProductOptionValue> {
    try {
      return await putShoppingMallSellerProductsProductIdOptionsOptionIdValuesValueId(
        {
          seller,
          productId,
          optionId,
          valueId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific product option value for a product option, by
   * product ID, option ID, and value ID, in the
   * shopping_mall_product_option_values table.
   *
   * This API operation enables a seller or administrator to delete a single
   * option value from an option group of a product, such as removing 'Blue'
   * from a product's available color options. The operation targets the
   * shopping_mall_product_option_values entity, requiring unique path
   * identification for the product, option, and value.
   *
   * Security rules require that the user is either the seller who owns the
   * product or an administrator. Deletion is only permitted if the value is not
   * in active use by any product SKU or pending orders; attempts to delete
   * in-use values result in validation errors. If successfully removed, the
   * value is deleted from its option group, and all dependent SKU mappings are
   * updated accordingly. The deleted value is permanently removed (hard delete)
   * from the database, as there is no soft deletion mechanism for this field in
   * the schema.
   *
   * The operation supports comprehensive error handling for not found,
   * unauthorized, or business logic violations. The request requires all
   * identifier path parameters to target the specific value. Attempting to
   * remove a value currently in use or required for a product's option matrix
   * returns a relevant error message. Audit logging registers all deletes for
   * compliance.
   *
   * @param connection
   * @param productId Unique identifier of the product the option belongs to.
   * @param optionId Unique identifier of the option group within the product
   *   (e.g., color, size).
   * @param valueId Unique identifier of the option value to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":valueId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedParam("valueId")
    valueId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdOptionsOptionIdValuesValueId(
        {
          seller,
          productId,
          optionId,
          valueId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
