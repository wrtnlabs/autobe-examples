import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdReviewsReviewIdReplies } from "../../../../../../providers/postShoppingMallSellerProductsProductIdReviewsReviewIdReplies";
import { SellerAuth } from "../../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerProductsProductIdReviewsReviewIdRepliesReplyId } from "../../../../../../providers/putShoppingMallSellerProductsProductIdReviewsReviewIdRepliesReplyId";
import { deleteShoppingMallSellerProductsProductIdReviewsReviewIdRepliesReplyId } from "../../../../../../providers/deleteShoppingMallSellerProductsProductIdReviewsReviewIdRepliesReplyId";

import { IShoppingMallReviewReply } from "../../../../../../api/structures/IShoppingMallReviewReply";

@Controller(
  "/shoppingMall/seller/products/:productId/reviews/:reviewId/replies",
)
export class ShoppingmallSellerProductsReviewsRepliesController {
  /**
   * Create a new reply to a product review (by seller or admin) in
   * shopping_mall_review_replies table.
   *
   * This endpoint permits authorized sellers or admins to post a reply to a
   * customer review on their product. On submission, the reply is validated for
   * maximum body length, normative status values (public/hidden), and ownership
   * by the acting seller or admin. Only one reply per review per responder is
   * permitted, preventing duplicate entries as enforced by schema constraints.
   *
   * The operation requires the review being replied to exist for the specified
   * product, enforcing referential integrity and protecting against orphaned
   * reply records. If the acting user does not have permission to reply (e.g.,
   * not the seller/admin of the product), access is denied. The reply status
   * determines its initial visibility to usersâ€”'public' for customer-visible
   * replies, 'hidden' for internal/admin-only replies.
   *
   * Business logic includes notification triggers for the original review
   * author upon reply, and audit logging for moderation. Error handling
   * provides actionable error codes/messages for permission, validation, or
   * referential integrity failures.
   *
   * @param connection
   * @param productId Unique identifier of the product associated with the
   *   review.
   * @param reviewId Unique identifier of the review being replied to.
   * @param body Reply content and status for the new reply to a review. Body
   *   must satisfy length and content requirements. Status field controls reply
   *   visibility (public or hidden).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewReply.ICreate,
  ): Promise<IShoppingMallReviewReply> {
    try {
      return await postShoppingMallSellerProductsProductIdReviewsReviewIdReplies(
        {
          seller,
          productId,
          reviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a seller or admin's reply to a specific product review reply
   * (shopping_mall_review_replies table).
   *
   * This operation allows an authorized seller or admin to update their reply
   * to a specific product review. The reply is uniquely identified by the
   * replyId within the context of the given productId and reviewId path
   * parameters, as enforced by the Prisma schema shopping_mall_review_replies.
   * The reply content (body) and reply visibility status (public/hidden) must
   * be validated: the body cannot be empty or exceed business-configured
   * maximum length. Status transitions are subject to moderation logic per
   * business rules in the reviews and ratings module.
   *
   * Only the authoring seller or admin can update their own replies, and
   * attempts to edit others' replies will result in permission denial. The
   * operation also updates the updated_at timestamp and may trigger associated
   * audit or moderation events. Related audit logs or events are updated in
   * subsystems as described in the schema.
   *
   * Common errors include attempting to update a deleted reply, editing if not
   * the original author (based on authenticated identity), or submitting
   * invalid reply content. The typical workflow is for a seller or admin to use
   * their dashboard to locate a reply and update its content or status as
   * required, with transactional guarantees enforced by the reviews subsystem.
   *
   * @param connection
   * @param productId Unique identifier of the target product
   * @param reviewId Unique identifier of the target product review
   * @param replyId Unique identifier of the review reply to update
   * @param body Updated reply information including body text and (optionally)
   *   new status; must meet reply content validation rules
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":replyId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewReply.IUpdate,
  ): Promise<IShoppingMallReviewReply> {
    try {
      return await putShoppingMallSellerProductsProductIdReviewsReviewIdRepliesReplyId(
        {
          seller,
          productId,
          reviewId,
          replyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a seller or admin's reply to a product review (hard
   * delete in shopping_mall_review_replies).
   *
   * This operation allows an authorized seller or admin to permanently delete
   * their reply to a product review. The reply is identified by the replyId in
   * the context of the given productId and reviewId as enforced by the Prisma
   * schema shopping_mall_review_replies. Deletion is a hard removal of the
   * reply record from the database. Only the reply author (seller or admin) or
   * a platform admin may perform deletion; attempts by other users will result
   * in permission errors.
   *
   * On successful deletion, the reply is no longer retrievable, and business
   * logic may update moderation or audit logs for transparency, as described in
   * the reviews and ratings and admin requirements. Deleting a non-existent or
   * already-deleted reply results in an error.
   *
   * This operation does not accept a request body and does not return a
   * response body beyond standard deletion status.
   *
   * @param connection
   * @param productId Unique identifier of the product containing the review
   * @param reviewId Unique identifier of the product review
   * @param replyId Unique identifier of the review reply to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":replyId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdReviewsReviewIdRepliesReplyId(
        {
          seller,
          productId,
          reviewId,
          replyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
