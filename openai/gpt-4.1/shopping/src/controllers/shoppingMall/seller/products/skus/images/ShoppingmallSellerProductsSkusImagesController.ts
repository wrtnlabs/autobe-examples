import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdSkusSkuIdImages } from "../../../../../../providers/postShoppingMallSellerProductsProductIdSkusSkuIdImages";
import { SellerAuth } from "../../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../../decorators/payload/SellerPayload";
import { patchShoppingMallSellerProductsProductIdSkusSkuIdImages } from "../../../../../../providers/patchShoppingMallSellerProductsProductIdSkusSkuIdImages";
import { putShoppingMallSellerProductsProductIdSkusSkuIdImagesImageId } from "../../../../../../providers/putShoppingMallSellerProductsProductIdSkusSkuIdImagesImageId";
import { deleteShoppingMallSellerProductsProductIdSkusSkuIdImagesImageId } from "../../../../../../providers/deleteShoppingMallSellerProductsProductIdSkusSkuIdImagesImageId";

import { IShoppingMallCatalogImage } from "../../../../../../api/structures/IShoppingMallCatalogImage";
import { IPageIShoppingMallCatalogImage } from "../../../../../../api/structures/IPageIShoppingMallCatalogImage";

@Controller("/shoppingMall/seller/products/:productId/skus/:skuId/images")
export class ShoppingmallSellerProductsSkusImagesController {
  /**
   * Upload and attach a new image to a product SKU
   * (shopping_mall_catalog_images).
   *
   * This API endpoint enables an authorized seller (owner of the product/SKU)
   * or an admin to create and attach a new image to a specific SKU variant of a
   * product. It references the shopping_mall_catalog_images table for image
   * metadata and assignment.
   *
   * The operation validates all input: the SKU and product must exist and be
   * associated, and the caller must have permission to manage catalog content
   * for the SKU. The request body follows the IShoppingMallCatalogImage.ICreate
   * schema, which specifies required fields such as the image URI (must be a
   * valid, previously uploaded asset), alt text (optional for accessibility),
   * and display order (for gallery sorting).
   *
   * Proper business logic checks must confirm seller authorization and enforce
   * catalog policies (e.g., maximum images per SKU, file-size/type restrictions
   * if applicable). The operation creates the new image record, linking it to
   * the SKU and, optionally, the product. Secure audit logging is recommended
   * for admin actions. Upon success, the full image record is returned,
   * including assigned imageId for future reference.
   *
   * Error handling covers permission validation (for sellers/admins),
   * validation of SKU/Product existence, image limit enforcement, and
   * product-SKU relationship checks.
   *
   * @param connection
   * @param productId Unique identifier of the parent product
   * @param skuId Unique identifier of the target SKU (variant)
   * @param body Image information and association data for uploading a new SKU
   *   image
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCatalogImage.ICreate,
  ): Promise<IShoppingMallCatalogImage> {
    try {
      return await postShoppingMallSellerProductsProductIdSkusSkuIdImages({
        seller,
        productId,
        skuId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List images for a specific product SKU from shopping_mall_catalog_images,
   * supporting advanced filtering/sorting.
   *
   * This operation enables the retrieval and management of images associated
   * with a single product SKU for catalog, display, or moderation purposes.
   * Primary use cases include sellers needing to review all images attached to
   * a variant before updating, admins conducting review/moderation of SKU
   * images, and marketplace applications displaying images per SKU on variant
   * selection changes. The core business logic performs search with optional
   * filters and paginates results for efficient loading.
   *
   * Authorization ensures that only the SKU's owner (seller) or an
   * administrator may perform this operation, preventing unauthorized access to
   * catalog assets. The relationships to shopping_mall_product_skus and
   * shopping_mall_catalog_images are validated to ensure only images belonging
   * to the specified SKU are included in the response.
   *
   * Validation checks confirm that the SKU exists and belongs to the
   * authenticated seller (if a seller is accessing), and that images are
   * actually associated as children of the specified SKU. Users may request
   * pagination or use sorting/filtering parameters (e.g., by upload date,
   * display order) for more complex use cases. Expected responses include the
   * image metadata and URIs for client rendering or further product management.
   * Related API operations include POST for image upload and DELETE for image
   * removal; these should be documented together to provide a complete
   * management lifecycle for SKU images.
   *
   * @param connection
   * @param productId Unique identifier of the product whose SKU's images will
   *   be retrieved.
   * @param skuId Unique identifier of the SKU whose images will be listed.
   * @param body Request parameters for image list retrieval, including search
   *   and pagination options specific to the SKU context.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCatalogImage.IRequest,
  ): Promise<IPageIShoppingMallCatalogImage> {
    try {
      return await patchShoppingMallSellerProductsProductIdSkusSkuIdImages({
        seller,
        productId,
        skuId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing SKU image for a product. (shopping_mall_catalog_images).
   *
   * This API enables sellers to update a specific image record associated with
   * one of their product SKUs by imageId. Users must provide the IDs for the
   * product, SKU, and image to ensure proper ownership and scoping. The update
   * can modify details such as the display order for galleries, alt text for
   * accessibility, or the CDN URL for the image itself.
   *
   * Authorization is strictly limited to the seller who owns the product/SKU or
   * administrative accounts. Attempts to update an image for SKUs/products the
   * user doesn't own will be denied with a clear error. Admins may use this
   * operation for moderation or compliance. All input data is checked to
   * guarantee type, length, and referential integrity. Upon successful update,
   * the updated image record is returned.
   *
   * This operation is necessary for catalog management, supporting seller
   * workflows for product presentation, and is designed to enforce platform
   * catalog standards. Related operations include image upload (creation),
   * deletion, and image reordering within a SKU's image list. Errors may occur
   * if imageId is not valid for the SKU/product or the user lacks sufficient
   * permissions.
   *
   * @param connection
   * @param productId Unique identifier of the target product
   * @param skuId Unique identifier of the target SKU for the product
   * @param imageId Unique identifier of the image associated with the SKU
   * @param body Fields of the SKU image to update (e.g., url, alt text, display
   *   order)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":imageId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCatalogImage.IUpdate,
  ): Promise<IShoppingMallCatalogImage> {
    try {
      return await putShoppingMallSellerProductsProductIdSkusSkuIdImagesImageId(
        {
          seller,
          productId,
          skuId,
          imageId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a SKU image for a specific product (shopping_mall_catalog_images).
   *
   * This API allows authorized sellers to delete an existing image from a SKU
   * they own, identified by the unique productId, skuId, and imageId path
   * parameters. Deletion is enforced as a hard delete per the schema: the
   * record is removed from the shopping_mall_catalog_images table (soft delete
   * applies only if defined in schema; otherwise, actual deletion occurs), and
   * any links to the SKU/product are immediately severed.
   *
   * Access is strictly limited to the seller for the given product/SKU or
   * admins. Unauthorized delete attempts (wrong seller, non-existent image, or
   * mismatched SKU/product) yield clear error responses. All required IDs are
   * validated to ensure context and avoid orphan deletions. Audit logging is
   * mandatory to track which actor deleted the image.
   *
   * This operation should be used in seller catalog management and admin
   * moderation workflows, particularly when images become outdated, prohibited,
   * or in violation of platform guidelines. It is related to gallery/image
   * creation and update endpoints. Upon completion, the record will not be
   * recoverable unless soft delete is later implemented by schema design.
   *
   * @param connection
   * @param productId Unique identifier of the target product
   * @param skuId Unique identifier of the target SKU for the product
   * @param imageId Unique identifier of the image associated with the SKU
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":imageId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdSkusSkuIdImagesImageId(
        {
          seller,
          productId,
          skuId,
          imageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
