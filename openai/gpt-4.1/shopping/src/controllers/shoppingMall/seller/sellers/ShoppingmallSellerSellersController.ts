import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallSellerSellersSellerId } from "../../../../providers/getShoppingMallSellerSellersSellerId";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerSellersSellerId } from "../../../../providers/putShoppingMallSellerSellersSellerId";

import { IShoppingMallSeller } from "../../../../api/structures/IShoppingMallSeller";

@Controller("/shoppingMall/seller/sellers/:sellerId")
export class ShoppingmallSellerSellersController {
  /**
   * Get complete seller account details by sellerId from shopping_mall_sellers
   * table.
   *
   * Retrieve comprehensive seller account details by seller ID from the
   * shopping_mall_sellers table. This operation supports both authenticated
   * user and admin use-cases, providing business-critical data such as contact
   * information, business entity, KYC status, and account history.
   *
   * Path parameter validation ensures that sellerId is a well-formed UUID and
   * corresponds to an existing, active, or approved seller. Full details
   * including KYC information, audit fields, and business registration numbers
   * are returned only to admin users or the account owner; all other users see
   * only public, non-sensitive fields for seller display purposes.
   *
   * This endpoint supports audit compliance by including all relevant fields
   * for administrative review. Role-based access control ensures marketplace
   * transparency while protecting sensitive or private data. Error handling
   * includes not-found responses for invalid IDs or disabled/suspended sellers,
   * and 403 errors if a user attempts to access another seller's confidential
   * information without proper permissions.
   *
   * For related operations, see seller account update (PUT /sellers/{sellerId})
   * for account changes, and authenticated order/product queries for
   * cross-entity validation and seller-product relationships.
   *
   * @param connection
   * @param sellerId Unique identifier of the target seller (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSeller> {
    try {
      return await getShoppingMallSellerSellersSellerId({
        seller,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update seller account information for sellerId in shopping_mall_sellers
   * table.
   *
   * Update a seller account record in the shopping_mall_sellers table,
   * identified by sellerId. Supports both self-service seller profile
   * maintenance and privileged admin updates for account management, KYC, or
   * business registration corrections.
   *
   * The request body schema IShoppingMallSeller.IUpdate requires all updatable
   * seller fields as defined in the Prisma schema. Input validation enforces
   * business logic such as unique email and registration number, correct phone
   * and URI formats, and restricted updates for status fields depending on
   * role. On successful validation and authorization, the record is updated and
   * the updated seller profile is returned as response.
   *
   * Admin actions are fully auditedâ€”updates to approval_status, KYC, or
   * sensitive attributes generate audit logs with admin identity and reason for
   * accountability. Sellers may update their own basic contact info and KYC
   * submissions but cannot self-approve, suspend, or delete their own accounts.
   * Role-based error handling is in place with descriptive error responses for
   * unauthorized or invalid data changes. For related workflows, see seller
   * registration and admin dashboard moderation tools.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller to update (UUID)
   * @param body All updatable seller account fields as per
   *   IShoppingMallSeller.IUpdate schema
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSeller.IUpdate,
  ): Promise<IShoppingMallSeller> {
    try {
      return await putShoppingMallSellerSellersSellerId({
        seller,
        sellerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
