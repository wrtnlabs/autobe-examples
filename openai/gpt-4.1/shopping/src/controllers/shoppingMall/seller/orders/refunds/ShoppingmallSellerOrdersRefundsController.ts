import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putShoppingMallSellerOrdersOrderIdRefundsRefundId } from "../../../../../providers/putShoppingMallSellerOrdersOrderIdRefundsRefundId";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";

import { IShoppingMallOrderRefund } from "../../../../../api/structures/IShoppingMallOrderRefund";

@Controller("/shoppingMall/seller/orders/:orderId/refunds/:refundId")
export class ShoppingmallSellerOrdersRefundsController {
  /**
   * Update (admin/seller) a refund request for an order
   * (shopping_mall_order_refunds).
   *
   * Updates a specific refund request associated with an order. This operation
   * supports status transitions (pending, approved, denied, completed, failed),
   * allows updating the resolution reason, and may permit modification of the
   * explanation or payout details depending on the business policy. The request
   * and refundId must reference an existing refund request for the specified
   * order. Only users with seller or admin rights over the order may execute
   * updates.
   *
   * The operation cross-checks refund eligibility and current status to prevent
   * invalid transitions, such as approving a refund that has already been
   * denied or completed. Security protocols verify that the updater has proper
   * role authorization, and business logic handles all state transition rules.
   * Changes are logged in the refund record for audit traces and customer
   * visibility. If a non-authorized user calls this API or sends an invalid
   * update, the system will reject the operation with an error message and
   * preserve the previous refund status. Data is retained to meet regulatory
   * trace and business audit requirements for financial events such as
   * refunds.
   *
   * See also: Initiating a refund via POST on /orders/{orderId}/refunds.
   *
   * @param connection
   * @param orderId Unique identifier of the order associated with this refund
   *   request
   * @param refundId Unique identifier of the refund request to be updated
   * @param body Details for the refund update, such as new status (approved,
   *   denied, completed), explanation for the action, and payout information if
   *   applicable.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderRefund.IUpdate,
  ): Promise<IShoppingMallOrderRefund> {
    try {
      return await putShoppingMallSellerOrdersOrderIdRefundsRefundId({
        seller,
        orderId,
        refundId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
