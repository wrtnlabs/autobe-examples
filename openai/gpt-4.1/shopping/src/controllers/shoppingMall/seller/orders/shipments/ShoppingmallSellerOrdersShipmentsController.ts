import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallSellerOrdersOrderIdShipments } from "../../../../../providers/patchShoppingMallSellerOrdersOrderIdShipments";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { getShoppingMallSellerOrdersOrderIdShipmentsShipmentId } from "../../../../../providers/getShoppingMallSellerOrdersOrderIdShipmentsShipmentId";
import { putShoppingMallSellerOrdersOrderIdShipmentsShipmentId } from "../../../../../providers/putShoppingMallSellerOrdersOrderIdShipmentsShipmentId";
import { deleteShoppingMallSellerOrdersOrderIdShipmentsShipmentId } from "../../../../../providers/deleteShoppingMallSellerOrdersOrderIdShipmentsShipmentId";

import { IPageIShoppingMallOrderShipment } from "../../../../../api/structures/IPageIShoppingMallOrderShipment";
import { IShoppingMallOrderShipment } from "../../../../../api/structures/IShoppingMallOrderShipment";

@Controller("/shoppingMall/seller/orders/:orderId/shipments")
export class ShoppingmallSellerOrdersShipmentsController {
  /**
   * Retrieve all shipment status records for a specific order
   * (shopping_mall_order_shipments table).
   *
   * Retrieve a paginated, filterable list of all shipment records for a
   * specified order. Each record includes carrier, tracking number, shipping
   * status, shipment number, timestamps (dispatched, delivered, etc.), and
   * remarks. This operation is mapped to the shopping_mall_order_shipments
   * table and supports both simple and split-shipment order models (including
   * multiple sellers). The API allows users to check real-time shipment status
   * updates and may integrate with third-party carrier APIs for latest tracking
   * data.
   *
   * Authorization and data visibility rules are strictly enforced: customers
   * may query only their own orders, sellers get access to shipments involving
   * their products, and admins access all shipments. The request may include
   * advanced filtering (e.g., by shipment status), pagination, and sorting
   * (default: by creation date descending).
   *
   * Error cases (such as unauthorized, not found, or order without shipments)
   * are surfaced with clear, actionable messages. This endpoint should be used
   * in concert with order listing, fulfillment, and order detail APIs for a
   * complete fulfillment tracking workflow.
   *
   * @param connection
   * @param orderId Order ID for which all shipment records should be listed.
   * @param body Filtering and pagination options for shipment status retrieval
   *   (optional).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderShipment.IRequest,
  ): Promise<IPageIShoppingMallOrderShipment> {
    try {
      return await patchShoppingMallSellerOrdersOrderIdShipments({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific order shipment
   * (shopping_mall_order_shipments).
   *
   * Retrieve a specific shipment's tracking and delivery status within an
   * order. This operation allows customers to view the carrier, tracking
   * number, and current status (pending, shipped, in transit, out for delivery,
   * delivered, returned, cancelled, etc.) for any shipment that is part of
   * their placed order.
   *
   * Sellers use this endpoint to verify which shipments have been dispatched,
   * in progress, or completed. For multi-seller or split-shipment orders, this
   * enables visibility into each parcel's progress and any relevant remarks or
   * failures.
   *
   * Admins may use this operation for support, troubleshooting, and compliance
   * checkingâ€”especially when reviewing issues such as failed delivery, returns,
   * or customer escalations. Access to shipment detail is role-restricted:
   * customers may view only their own orders, sellers only shipments of their
   * products, and admins have visibility over all records. Security checks
   * based on order and user relationships are implemented in business logic.
   *
   * All returned data is aligned with the shopping_mall_order_shipments schema,
   * including carrier, tracking_number, status, timestamps, and remarks.
   *
   * @param connection
   * @param orderId Unique identifier of the target order containing the
   *   shipment
   * @param shipmentId Unique identifier of the shipment within the specified
   *   order
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":shipmentId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderShipment> {
    try {
      return await getShoppingMallSellerOrdersOrderIdShipmentsShipmentId({
        seller,
        orderId,
        shipmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific order shipment's details for a given order
   * (shopping_mall_order_shipments).
   *
   * Update the details of a specific order shipment by shipment identifier, as
   * stored in the shopping_mall_order_shipments table. Users may edit fields
   * such as carrier, tracking number, status, dispatched or delivered
   * timestamps, and any remarks for the given shipment.
   *
   * The operation is restricted to sellers who are responsible for the given
   * order, or admin accounts. Security is enforced by verifying ownership or
   * elevated permissions before changes are committed. The function
   * cross-validates that the referenced shipment is actually associated with
   * the given orderId, preventing orphan or cross-order editing.
   *
   * Business logic ensures that status transitions are valid (e.g., you cannot
   * set to 'delivered' before 'shipped' or 'dispatched'), and that shipment
   * details such as tracking number are present when required by carrier or
   * status. Any invalid updates will result in a descriptive error explaining
   * validation failure. All updates are logged for audit, and changes may
   * trigger notifications to customer and seller.
   *
   * Related endpoints include retrieving shipment details (GET), listing all
   * shipments for an order (GET), and deleting or cancelling a shipment (DELETE
   * operation).
   *
   * @param connection
   * @param orderId Unique identifier for the order containing the shipment.
   * @param shipmentId Unique identifier of the shipment to update.
   * @param body Updated shipment data for the order shipment (carrier, tracking
   *   info, status, dispatched/delivered date, remarks, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":shipmentId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderShipment.IUpdate,
  ): Promise<IShoppingMallOrderShipment> {
    try {
      return await putShoppingMallSellerOrdersOrderIdShipmentsShipmentId({
        seller,
        orderId,
        shipmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an individual shipment from an order
   * (shopping_mall_order_shipments) by shipmentId.
   *
   * Permanently remove a shipment from a specific order by shipmentId and
   * orderId, as tracked in the shopping_mall_order_shipments schema table. This
   * is a hard-delete, not a soft delete, and will erase all shipment-related
   * information, including carrier/tracking references and status history, for
   * the given order.
   *
   * This operation is only allowed for sellers who own the given order or
   * admins with appropriate platform authority. Before deletion, the system
   * validates that the shipment belongs to the order, and checks that removal
   * is legal (for example, the shipment is not in delivered or refunded state).
   * Attempts to erase non-removable shipments result in a detailed business
   * exception.
   *
   * The deletion action is logged for full audit, and may trigger notification
   * to the customer if the shipment was visible in order tracking. Related APIs
   * include updating or fetching shipment details, or listing all shipments for
   * an order.
   *
   * @param connection
   * @param orderId Unique identifier for the order containing the shipment.
   * @param shipmentId Unique identifier of the shipment to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":shipmentId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerOrdersOrderIdShipmentsShipmentId({
        seller,
        orderId,
        shipmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
