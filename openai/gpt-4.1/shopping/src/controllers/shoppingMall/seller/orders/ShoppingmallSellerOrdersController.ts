import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallSellerOrders } from "../../../../providers/patchShoppingMallSellerOrders";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { getShoppingMallSellerOrdersOrderId } from "../../../../providers/getShoppingMallSellerOrdersOrderId";
import { putShoppingMallSellerOrdersOrderId } from "../../../../providers/putShoppingMallSellerOrdersOrderId";

import { IPageIShoppingMallOrder } from "../../../../api/structures/IPageIShoppingMallOrder";
import { IShoppingMallOrder } from "../../../../api/structures/IShoppingMallOrder";

@Controller("/shoppingMall/seller/orders")
export class ShoppingmallSellerOrdersController {
  /**
   * Search and list paginated orders with advanced filters
   * (shopping_mall_orders).
   *
   * This endpoint provides a filtered, paginated list of orders in the shopping
   * mall platform. The operation queries the shopping_mall_orders entity, which
   * is the core table for storing order information including links to the
   * customer, optional seller reference (for split-orders), payment and
   * shipping addresses, and order items.
   *
   * The search supports advanced filtering (by order status, placed date,
   * customer or seller, order number, payment state), multi-field sorting, and
   * pagination for efficient access to potentially large datasets. Admin users
   * can access all orders; sellers may only access orders relevant to their
   * products. The structure of each result includes summary-level information:
   * order number, current status, order total, timestamp fields, main customer
   * reference, and, optionally, payment status/fulfillment data. This endpoint
   * also supports searching by keyword and filter combinations as defined in
   * the business requirement.
   *
   * Security is enforced by role constraints: admins have platform-wide access,
   * while sellers are strictly limited to their own orders. Customer-facing
   * order history may use a different, customer-restricted endpoint. Error
   * handling includes filters for non-existing search combinations and
   * validation of pagination parameters. This operation does not return full
   * order details; for that, the order detail endpoint should be used.
   *
   * @param connection
   * @param body Search and pagination criteria for retrieving filtered orders.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallOrder.IRequest,
  ): Promise<IPageIShoppingMallOrder.ISummary> {
    try {
      return await patchShoppingMallSellerOrders({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detail of a single order from shopping_mall_orders by
   * orderId.
   *
   * Retrieve the complete detail view of a single order as referenced by the
   * provided orderId. The operation fully exposes all attributes defined in
   * shopping_mall_orders, including customer and (where applicable) seller
   * association, shipping address snapshot, payment method snapshot, order line
   * items, shipment data, and full audit fields (created_at, updated_at,
   * deleted_at).
   *
   * From a security and access control perspective, only the owning customer,
   * the fulfilling seller (if present), and platform admins are allowed to view
   * order details. The endpoint must enforce this in implementation, ensuring
   * customers cannot access orders that do not belong to them, and sellers can
   * only view orders related to their products.
   *
   * All relationships (order items, status history, shipments, cancellations,
   * refunds) are framed as per the database design. Order data is provided
   * according to the schema structure and reflects the point-in-time state at
   * query, with full timeline context (placed_at, paid_at, fulfilled_at) and
   * business state if present. Expected errors include 404 for not found or 403
   * for unauthorized access.
   *
   * Related APIs include order search by customer, order listing for
   * seller/admin, and historic/timeline views for auditing. This endpoint is a
   * read-only accessor and does not modify data.
   *
   * @param connection
   * @param orderId Unique identifier of the order to retrieve (UUID from
   *   shopping_mall_orders.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrder> {
    try {
      return await getShoppingMallSellerOrdersOrderId({
        seller,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing orderâ€™s details in the shoppingMall_orders table.
   *
   * This API operation permits the modification of a placed order's details
   * within the shoppingMall_orders entity. The purpose is to enable key actors
   * (customer, seller, admin) to update an order based on workflow stage and
   * permissions.
   *
   * Customers may request updates to shipping address, contact details, or
   * cancel orders that are still pending or processing. Sellers may update
   * shipping status, input shipment tracking numbers, or add operational
   * comments if the order is in the fulfillment stage. Admins retain global
   * rights to override any field in exceptional scenarios (e.g., fraud, user
   * disputes, compliance).
   *
   * Security is strictly enforced via role-based authentication and order
   * ownership checks. Path parameter validation is required to ensure only the
   * intended order is modified. Attempting to update a finalized, cancelled, or
   * delivered order as a non-admin returns a validation error. All updates
   * trigger entry in the shopping_mall_admin_action_logs table for
   * traceability.
   *
   * Business logic includes validation of eligibility for each update request
   * type: shipping address modification is only permitted before shipment,
   * status transitions follow defined state machines, and pricing/payment
   * changes are only processed by admin.
   *
   * This operation integrates with related schemas, including
   * shopping_mall_order_addresses (address snapshot),
   * shopping_mall_order_status_history (order audit), and
   * shopping_mall_admin_action_logs (event tracking). Error handling covers
   * invalid state transitions, unauthorized access, and data integrity issues.
   * Commonly related operations include placing new orders, viewing order
   * status/history, and handling order cancellation/refunds.
   *
   * @param connection
   * @param orderId Unique identifier for the order to be updated.
   * @param body Order update payload with only the fields eligible for
   *   modification based on business rules, such as status, shipping address,
   *   or remarks.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrder.IUpdate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await putShoppingMallSellerOrdersOrderId({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
