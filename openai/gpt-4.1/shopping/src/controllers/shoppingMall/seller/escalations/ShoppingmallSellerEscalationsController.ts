import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerEscalations } from "../../../../providers/postShoppingMallSellerEscalations";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerEscalationsEscalationId } from "../../../../providers/putShoppingMallSellerEscalationsEscalationId";

import { IShoppingMallEscalation } from "../../../../api/structures/IShoppingMallEscalation";

@Controller("/shoppingMall/seller/escalations")
export class ShoppingmallSellerEscalationsController {
  /**
   * Create a new escalation case for an order issue
   * (shopping_mall_escalations).
   *
   * Create a new escalation record in the system when a customer or seller
   * cannot resolve an order issue through normal self-service mechanisms.
   * Escalations are generally opened in cases of disputes, unusual refunds,
   * shipping failures, miscommunication, or system errors that need admin
   * involvement.
   *
   * Security and permissions ensure only customers (for their own orders) and
   * sellers (for their own sales) may use this endpoint. All required
   * information—including the order reference, initiator, escalation type, and
   * description—must be included in the request. Upon submission, the
   * escalation is set to a default status, typically 'pending', and assigned
   * for further admin review.
   *
   * This operation interacts with the shopping_mall_escalations entity in the
   * DB, referencing the related order and the respective initiator, with status
   * and timestamps managed as per audit/compliance requirements. Validation
   * includes confirming order ownership and ensuring no duplicate unresolved
   * escalation for the same order and type. Errors may be returned if business
   * rules are violated (such as attempts to escalate ineligible orders, or
   * missing required justification).
   *
   * Related endpoints include those for updating the escalation status,
   * querying escalations for customer/admin dashboards, and linking escalations
   * to customer service events or appeals.
   *
   * @param connection
   * @param body Escalation creation details, including the related order,
   *   initiator information, escalation type, and optional descriptive
   *   context.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallEscalation.ICreate,
  ): Promise<IShoppingMallEscalation> {
    try {
      return await postShoppingMallSellerEscalations({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing escalation case (shopping_mall_escalations) by ID.
   *
   * Update the properties of an existing escalation record, such as its status,
   * escalation type, or resolution outcomes. Only authorized users—such as the
   * initiator (customer or seller) or an assigned admin—may perform updates to
   * an escalation. Typical updates include status transitions (e.g.,
   * 'in-review', 'resolved', 'closed'), adding or updating comments, or
   * assigning the case to a specific admin.
   *
   * The endpoint strictly checks access permissions: customers can only update
   * their own escalations, sellers for their orders, and admins for any case.
   * Updates are tracked with audit logs, including who made the change, the
   * prior and new status, and timestamps for compliance and traceability.
   * Validation ensures status transitions are legal (e.g., cannot resolve a
   * closed case, must provide a resolution reason when closing, etc.) and that
   * escalation content remains consistent with business rules.
   *
   * This operation interacts with the shopping_mall_escalations record
   * identified by escalationId. Potential errors are returned on unauthorized
   * updates, invalid status transitions, or missing required fields in the
   * update request. Related flows include dashboard visibility of escalation
   * status for customers, sellers, and admins; customer service event tracking;
   * and downstream effects such as notifications or associated appeals.
   *
   * @param connection
   * @param escalationId Unique identifier for the escalation to update.
   * @param body Updated escalation fields, such as status change, assignment,
   *   resolution, or commentary.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":escalationId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("escalationId")
    escalationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallEscalation.IUpdate,
  ): Promise<IShoppingMallEscalation> {
    try {
      return await putShoppingMallSellerEscalationsEscalationId({
        seller,
        escalationId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
