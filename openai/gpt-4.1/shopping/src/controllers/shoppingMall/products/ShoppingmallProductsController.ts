import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProducts } from "../../../providers/patchShoppingMallProducts";
import { getShoppingMallProductsProductId } from "../../../providers/getShoppingMallProductsProductId";

import { IPageIShoppingMallProduct } from "../../../api/structures/IPageIShoppingMallProduct";
import { IShoppingMallProduct } from "../../../api/structures/IShoppingMallProduct";

@Controller("/shoppingMall/products")
export class ShoppingmallProductsController {
  /**
   * Retrieve a filtered and paginated list of products for catalog search and
   * browsing.
   *
   * Retrieve a filtered and paginated list of products from the shopping mall
   * catalog. This operation enables users to discover products by applying
   * advanced search criteria including free-text query, category, seller, price
   * range, and variant options such as color or size. Filtering logic leverages
   * the denormalized and indexed shopping_mall_products table, which is
   * designed for rapid search and listing of active products and their
   * associations.
   *
   * Security consideration: Listing/search APIs are public, but may include
   * customer-specific pricing or personalization if the requester is
   * authenticated. This API does not expose unpublished or disabled
   * productsâ€”only items with is_active true and category in active state
   * appear. Rate limiting and abuse protection are recommended to prevent
   * scraping, and automatic cache invalidation is triggered on catalog
   * changes.
   *
   * Supported business logic: The response contains only published and in-stock
   * products, honoring inventory availability and business rules as outlined in
   * the requirements. Pagination, sorting, and total count metadata allow
   * efficient UI/UX implementation. Error handling includes validation for
   * invalid filters, non-existent categories, and oversized result sets (top
   * 1,000 cap enforced for queries with extreme volume).
   *
   * Related operations: Use GET /products/{productId} for full product detail,
   * PATCH /products for search/filter/pagination. The underlying Prisma
   * shopping_mall_products model is joined internally to catalog category and
   * SKU tables for advanced search. This API conforms to user-facing read-only
   * catalog patterns, not used for product creation or inventory update.
   *
   * @param connection
   * @param body Advanced product search/filter criteria and pagination options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallProduct.IRequest,
  ): Promise<IPageIShoppingMallProduct.ISummary> {
    try {
      return await patchShoppingMallProducts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full product detail by productId for catalog or detail view.
   *
   * Fetch a single product and all associated details by productId. This
   * read-only operation joins shopping_mall_products with SKUs, images,
   * options, category, and seller information, returning a full product record
   * suitable for detail view or deep linking from search, wishlist, or order
   * history. ProductId is a required path parameter and must be a valid UUID
   * referencing an existing, published product.
   *
   * The response incorporates both denormalized product fields (name,
   * description, images, prices, active state) and related entities (variant
   * options, in-stock status, seller profile, category tree, and reviews
   * aggregation if applicable). If the product does not exist or is
   * inactive/soft-deleted, the API returns a not-found or forbidden error
   * according to business rules. Only published, non-deleted products can be
   * accessed using this operation.
   *
   * Security: Public access to this endpoint is allowed; however,
   * unpublished/deleted or non-active products are not queryable by regular
   * users. Business rules ensure catalog integrity and prevent exposure of
   * restricted items. This relates directly to the shopping_mall_products
   * entity and pulls all necessary associations for product presentation on
   * detail screens.
   *
   * @param connection
   * @param productId The unique identifier (UUID) of the product to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":productId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProduct> {
    try {
      return await getShoppingMallProductsProductId({
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
