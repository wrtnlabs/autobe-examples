import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallProductsProductIdSkusSkuId } from "../../../../providers/getShoppingMallProductsProductIdSkusSkuId";

import { IShoppingMallProductSku } from "../../../../api/structures/IShoppingMallProductSku";

@Controller("/shoppingMall/products/:productId/skus/:skuId")
export class ShoppingmallProductsSkusController {
  /**
   * Retrieve detailed info for a specific product SKU
   * (shopping_mall_product_skus) by product and SKU ID.
   *
   * Retrieve the complete detail for a single SKU (Stock Keeping Unit)
   * belonging to a specific product, as identified by productId and skuId. This
   * query provides all metadata present in the shopping_mall_product_skus
   * Prisma schema including SKU code, display name, sell price, status,
   * low-stock threshold, direct option breakdown (across all variant axes), and
   * inventory states where available.
   *
   * The operation ensures that only SKUs belonging to the specified product
   * (productId) are returned, supports validation of active status (or
   * appropriate fallback by admin logic), and respects soft-delete status per
   * schema. It returns null or 404 if the SKU is not found, not active, or does
   * not belong to the given productId.
   *
   * Security-wise, only public/fully listed SKUs are shown to customers;
   * sellers may see their own SKUs (including 'inactive'). Admins have full
   * visibility. Parent product validation (category, is_active) is required for
   * business compliance, and the returned structure supports all option and
   * price fields for proper variant rendering and eligibility checks for
   * cart/order flows.
   *
   * Edge cases such as SKU-option misalignment, soft-deleted or orphaned SKUs
   * must be handled consistent with the schema and catalog enforcement. Related
   * endpoints include search/index, variant enumeration, and parent product
   * detail API.
   *
   * @param connection
   * @param productId Unique identifier for the parent product containing the
   *   SKU.
   * @param skuId Unique identifier for the SKU to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductSku> {
    try {
      return await getShoppingMallProductsProductIdSkusSkuId({
        productId,
        skuId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
