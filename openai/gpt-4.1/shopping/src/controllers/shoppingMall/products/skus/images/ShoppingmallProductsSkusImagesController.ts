import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallProductsProductIdSkusSkuIdImagesImageId } from "../../../../../providers/getShoppingMallProductsProductIdSkusSkuIdImagesImageId";

import { IShoppingMallCatalogImage } from "../../../../../api/structures/IShoppingMallCatalogImage";

@Controller("/shoppingMall/products/:productId/skus/:skuId/images/:imageId")
export class ShoppingmallProductsSkusImagesController {
  /**
   * Retrieve a specific SKU image for a product (shopping_mall_catalog_images).
   *
   * This API endpoint retrieves an individual image for a specific SKU of a
   * product. It references the shopping_mall_catalog_images table, which
   * manages all image files associated with products and SKUs in the shopping
   * mall.
   *
   * The operation requires three path parameters: productId, skuId, and imageId
   * to guarantee the correct association and enforce permissions. It returns
   * the full metadata for the image, including the image URI, display order,
   * and alternate text when defined. The endpoint supports business logic to
   * filter out images that have been deleted (soft-delete pattern using
   * deleted_at in the schema), and to ensure users cannot access images
   * unrelated to the specified product or SKU.
   *
   * This operation supports both customer- and seller-facing use cases,
   * enabling users to view variant-specific images on product detail pages or
   * within seller dashboards. For admin users, the operation may also integrate
   * with catalog moderation flows. Error handling includes 404 for invalid or
   * unauthorized access, and the response is limited to non-deleted entries.
   *
   * This endpoint is related to broader catalog browsing and merchant content
   * management functions, and aligns with the platform's multilingual,
   * variant-rich product model as defined in the Prisma schema.
   *
   * @param connection
   * @param productId Unique identifier of the target product
   * @param skuId Unique identifier of the target SKU (variant)
   * @param imageId Unique identifier of the image file
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCatalogImage> {
    try {
      return await getShoppingMallProductsProductIdSkusSkuIdImagesImageId({
        productId,
        skuId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
