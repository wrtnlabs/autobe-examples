import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallProductsProductIdOptionsOptionIdValuesValueId } from "../../../../../providers/getShoppingMallProductsProductIdOptionsOptionIdValuesValueId";

import { IShoppingMallProductOptionValue } from "../../../../../api/structures/IShoppingMallProductOptionValue";

@Controller(
  "/shoppingMall/products/:productId/options/:optionId/values/:valueId",
)
export class ShoppingmallProductsOptionsValuesController {
  /**
   * Retrieve a specific product option value by productId, optionId, and
   * valueId (shopping_mall_product_option_values).
   *
   * Fetch a specific option value (e.g., 'Red', 'XL') for a given option (like
   * color or size) of a product. This operation ensures that only valid option
   * values linked to the assembled product and product option are available for
   * retrieval. Typical use cases include rendering a product's available
   * variant attributes on product detail pages or for admin/seller catalog
   * editing UI.
   *
   * Security is enforced so that only those with permission to read the product
   * or variant catalog (customers, sellers for their own products, and admins)
   * can access the value details. The relational linkages to product, option,
   * and value are resolved, but sensitive internal data outside option
   * presentation attributes are excluded from the response.
   *
   * If the value or its parent option/product is missing or inactive, an
   * appropriate error is returned. The operation references the option value's
   * fields as described in the Prisma model: id,
   * shopping_mall_product_option_id, value, display_order, created_at,
   * updated_at. This operation complements other product, option, and value
   * lookups, but only performs read queries.
   *
   * @param connection
   * @param productId Unique identifier for the target product
   * @param optionId Unique identifier for the product option (e.g., color,
   *   size)
   * @param valueId Unique identifier of the option value to be retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedParam("valueId")
    valueId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductOptionValue> {
    try {
      return await getShoppingMallProductsProductIdOptionsOptionIdValuesValueId(
        {
          productId,
          optionId,
          valueId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
