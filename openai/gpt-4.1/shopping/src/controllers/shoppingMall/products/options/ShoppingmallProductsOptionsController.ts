import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProductsProductIdOptions } from "../../../../providers/patchShoppingMallProductsProductIdOptions";
import { getShoppingMallProductsProductIdOptionsOptionId } from "../../../../providers/getShoppingMallProductsProductIdOptionsOptionId";

import { IPageIShoppingMallProductOption } from "../../../../api/structures/IPageIShoppingMallProductOption";
import { IShoppingMallProductOption } from "../../../../api/structures/IShoppingMallProductOption";

@Controller("/shoppingMall/products/:productId/options")
export class ShoppingmallProductsOptionsController {
  /**
   * List and filter all option definitions for a specific product
   * (shopping_mall_product_options).
   *
   * Retrieve a filtered, paginated list of product option definitions for a
   * target product. This is typically used to present all selectable attributes
   * (such as color, size, etc.) associated with a product, both for public
   * viewing (customer) and for management by sellers/admins.
   *
   * This operation supports advanced filtering, sorting, and paging. Filters
   * may include exact or fuzzy search on the option name, numerical sort by
   * display_order, and status checks (e.g., active/inactive) if such columns
   * exist. Security-wise, it is recommended that sellers can only query their
   * own products, and typical customers only see published/active options.
   *
   * This API references the shopping_mall_product_options table in the Prisma
   * schema. All parameters are validated according to schema constraints, and
   * results are paginated for scalability in catalogs with many options.
   * Related endpoints may include product detail fetch, product variant(SKU)
   * search, and option management.{If any business logic restricts visibility
   * of options per role, this should be enforced in implementation.}
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the target product whose
   *   option list is being requested.
   * @param body Search/filtering and pagination parameters for the product's
   *   option listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOption.IRequest,
  ): Promise<IPageIShoppingMallProductOption> {
    try {
      return await patchShoppingMallProductsProductIdOptions({
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch detailed information for a single product option
   * (shopping_mall_product_options).
   *
   * Retrieve the complete detail for a single product option using its unique
   * id as well as the parent product id context. This is often needed when
   * editing, inspecting, or displaying a specific option value such as a color,
   * size, or style in a product detail/management context.
   *
   * Security logic must confirm that sellers or admins accessing the detail
   * have authority on the product. For customers, public/active status may be
   * enforced so that only visible options are accessible. The underlying
   * component is shopping_mall_product_options in the Prisma Catalog schema,
   * and all data is returned as per the type IShoppingMallProductOption.
   *
   * Related operations may include option editing, product variant combination
   * management, and variant/option searching within a product.
   *
   * @param connection
   * @param productId UUID of the product this option belongs to.
   * @param optionId UUID of the specific product option being queried.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":optionId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductOption> {
    try {
      return await getShoppingMallProductsProductIdOptionsOptionId({
        productId,
        optionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
