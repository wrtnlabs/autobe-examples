import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallProductsProductIdReviewsReviewIdRepliesReplyId } from "../../../../../providers/getShoppingMallProductsProductIdReviewsReviewIdRepliesReplyId";

import { IShoppingMallReviewReply } from "../../../../../api/structures/IShoppingMallReviewReply";

@Controller(
  "/shoppingMall/products/:productId/reviews/:reviewId/replies/:replyId",
)
export class ShoppingmallProductsReviewsRepliesController {
  /**
   * Retrieve details of a single review reply under a specific product review
   * from shopping_mall_review_replies table.
   *
   * This endpoint allows users to read a specific reply posted by a seller or
   * administrator to a particular product review. Reply lookups are strictly
   * keyed by productId, reviewId, and replyId. The operation validates all
   * three IDs and ensures referential integrity among product, review, and
   * reply, returning 404 if any link in the chain is missing. Replies that are
   * not public may only be visible to the original author, associated admin, or
   * seller.
   *
   * Security checks consider the status field on review replies to enforce
   * access control, only allowing 'public' replies for general viewing. If a
   * reply has been hidden or deleted (indicated by the deleted_at column in the
   * Prisma schema), the endpoint will also return 404, enforcing non-disclosure
   * of hidden moderation artifacts.
   *
   * Business logic ensures that this endpoint supports transparency in review
   * moderation, providing immediate availability of seller/admin replies inline
   * on product pages or review timelines. Error handling ensures clients are
   * informed of both invalid references and permission-based constraints with
   * specific error messages and codes. This endpoint supports regulatory and
   * trust needs for e-commerce platforms by making moderation and seller
   * feedback transparent to customers.
   *
   * @param connection
   * @param productId Unique identifier of the product associated with the
   *   review and reply.
   * @param reviewId Unique identifier of the target review being replied to.
   * @param replyId Unique identifier of the reply to the review.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReviewReply> {
    try {
      return await getShoppingMallProductsProductIdReviewsReviewIdRepliesReplyId(
        {
          productId,
          reviewId,
          replyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
