import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProductsProductIdReviews } from "../../../../providers/patchShoppingMallProductsProductIdReviews";
import { getShoppingMallProductsProductIdReviewsReviewId } from "../../../../providers/getShoppingMallProductsProductIdReviewsReviewId";

import { IPageIShoppingMallReview } from "../../../../api/structures/IPageIShoppingMallReview";
import { IShoppingMallReview } from "../../../../api/structures/IShoppingMallReview";

@Controller("/shoppingMall/products/:productId/reviews")
export class ShoppingmallProductsReviewsController {
  /**
   * Search and paginate product reviews for a given product
   * (shopping_mall_reviews table).
   *
   * Retrieve a filtered and paginated list of customer product reviews for a
   * given product by specifying the productId path parameter. This highly
   * flexible endpoint supports searching reviews by status (e.g., approved,
   * pending, rejected), star rating (1–5), creation and update timestamps, and
   * provides rich pagination and sorting options to support large review
   * volumes.
   *
   * The operation is available to all roles: customers (for public/approved
   * reviews), sellers (for their own product reviews with moderation data), and
   * admins (for moderation, audit, and platform management). The response
   * provides summaries with review rating, text snippet, author, creation date,
   * moderation status, and attached media previews. Complex filtering supports
   * large catalogs, abusive content moderation, and user-experience workflows
   * such as filtering by rating, recency, or status.
   *
   * Business logic enforces review status visibility based on role and product
   * ownership—sellers are restricted to their own products' reviews, while
   * admins can search and filter across all statuses. Customers can only access
   * public/approved reviews for products. Edge cases include empty result sets,
   * out-of-bounds pages, or inappropriate filter criteria, which should be
   * gracefully handled with clear error messages.
   *
   * @param connection
   * @param productId Unique identifier of the product whose reviews are being
   *   searched and retrieved
   * @param body Advanced search and filter criteria for locating product
   *   reviews, including status, star rating, creation range, sorting, and
   *   pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReview.IRequest,
  ): Promise<IPageIShoppingMallReview.ISummary> {
    try {
      return await patchShoppingMallProductsProductIdReviews({
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific product review by product and review ID from
   * shopping_mall_reviews.
   *
   * Retrieve the detailed information of a specific product review. This API
   * endpoint serves to fetch all core fields of a review, such as the review
   * text, star rating, status (pending, approved, rejected, or hidden), author,
   * and audit timestamps. Product reviews in the shopping_mall_reviews table
   * are uniquely identified by composite (product_id, review_id) and are always
   * linked to a product and a customer for validation.
   *
   * The operation requires both product and review identifiers as path
   * parameters to ensure strict scoping—this prevents leaking reviews across
   * unrelated products and supports auditability. Only reviews which exist and
   * are related to the specified product are retrievable. Appropriate error
   * handling is enforced for not found, mismatches, or unauthorized access
   * cases.
   *
   * Security is generally public for product review retrieval, but if reviews
   * are pending moderation or marked hidden, additional permission checks may
   * be imposed by the provider logic. The underlying Prisma schema ensures one
   * review per (customer, product, order). Responses are aligned with the
   * IShoppingMallReview DTO, which includes all essential review and
   * relationship fields for application consumption.
   *
   * @param connection
   * @param productId The unique identifier of the product whose review is being
   *   requested.
   * @param reviewId The unique identifier of the review to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reviewId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReview> {
    try {
      return await getShoppingMallProductsProductIdReviewsReviewId({
        productId,
        reviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
