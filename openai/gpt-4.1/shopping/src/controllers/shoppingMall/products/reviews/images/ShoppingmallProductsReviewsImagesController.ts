import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProductsProductIdReviewsReviewIdImages } from "../../../../../providers/patchShoppingMallProductsProductIdReviewsReviewIdImages";
import { getShoppingMallProductsProductIdReviewsReviewIdImagesImageId } from "../../../../../providers/getShoppingMallProductsProductIdReviewsReviewIdImagesImageId";

import { IPageIShoppingMallReviewImage } from "../../../../../api/structures/IPageIShoppingMallReviewImage";
import { IShoppingMallReviewImage } from "../../../../../api/structures/IShoppingMallReviewImage";

@Controller("/shoppingMall/products/:productId/reviews/:reviewId/images")
export class ShoppingmallProductsReviewsImagesController {
  /**
   * Retrieve all images for a given product review
   * (shopping_mall_review_images).
   *
   * This endpoint allows any user (including guests) to retrieve the complete
   * set of images linked to a specific review on a product. The images serve as
   * supplementary content to review text, enhancing authenticity and
   * transparency for other customers considering a purchase. Each image is
   * stored as a URI reference and includes metadata such as display order and
   * alt text for accessibility.
   *
   * Images are filtered to exclude any that are soft-deleted (indicated by a
   * non-null deleted_at in the shopping_mall_review_images schema) and are
   * sorted by display order. The operation pulls all image records matching the
   * given reviewId, ensuring only images visible to the public are returned.
   * This incorporates detailed comments from the shopping_mall_review_images
   * Prisma model, emphasizing its role as a subsidiary entity and part of
   * broader review content management.
   *
   * No authentication or authorization is required, as review images are
   * public. However, implementation should consider safe handling of image
   * URIs, prevention of information leakage through deleted/hidden content, and
   * consistency with platform-wide content moderation rules.
   *
   * @param connection
   * @param productId Target product's unique identifier (UUID) for which the
   *   review belongs
   * @param reviewId Unique identifier (UUID) of the target review whose images
   *   are being retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
  ): Promise<IPageIShoppingMallReviewImage> {
    try {
      return await patchShoppingMallProductsProductIdReviewsReviewIdImages({
        productId,
        reviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single review image by its ID (shopping_mall_review_images).
   *
   * This endpoint fetches the details for a single image associated with a
   * particular review of a product. The imageId parameter uniquely identifies
   * the image entry within the context of the referenced review and product.
   * Returned payload includes the URI (URL) to the uploaded image, optional alt
   * text for accessibility, display ordering, and any other non-deleted
   * metadata from the shopping_mall_review_images Prisma model.
   *
   * The system validates that the imageId is attached to the specified reviewId
   * and productId, ensuring no data leak or mismatched context. If the image is
   * soft-deleted (deleted_at not null), it will not be returned and appropriate
   * not-found or access-denied behavior is expected. The operation is public;
   * access control is generally not required unless hosting sensitive review
   * images (in which case additional filtering/sanitization logic may be
   * added).
   *
   * This endpoint is closely related to the list/retrieve operation for review
   * images and is expected to be used in scenarios such as gallery lightbox
   * previews or programmatic access for generating product pages.
   *
   * @param connection
   * @param productId UUID of the product to which the review and image belong
   * @param reviewId UUID of the parent review record that owns the image
   * @param imageId UUID for the review image to be retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":imageId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReviewImage> {
    try {
      return await getShoppingMallProductsProductIdReviewsReviewIdImagesImageId(
        {
          productId,
          reviewId,
          imageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
