import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProductsProductIdImages } from "../../../../providers/patchShoppingMallProductsProductIdImages";
import { getShoppingMallProductsProductIdImagesImageId } from "../../../../providers/getShoppingMallProductsProductIdImagesImageId";

import { IPageIShoppingMallCatalogImage } from "../../../../api/structures/IPageIShoppingMallCatalogImage";
import { IShoppingMallCatalogImage } from "../../../../api/structures/IShoppingMallCatalogImage";

@Controller("/shoppingMall/products/:productId/images")
export class ShoppingmallProductsImagesController {
  /**
   * Retrieve a paginated list of images for a specific product from
   * shopping_mall_catalog_images by productId.
   *
   * Retrieve a filtered and paginated list of images associated with a given
   * product. This allows clients to display product galleries or additional
   * product photos, as managed by sellers and admins. Image metadata includes
   * URLs, alt text, and display order, which are critical for both end-user
   * viewing and accessibility.
   *
   * Security and permission logic restrict access to images of unpublished or
   * deactivated products as necessary. Only public or buyer-accessible products
   * will have their images visible to customers, while sellers and admins may
   * access full image sets for their own products or for administrative
   * purposes.
   *
   * This operation is closely tied with the shopping_mall_products and
   * shopping_mall_catalog_images Prisma schema tables, where each image
   * maintains a reference to either a product or SKU. All business logic for
   * product visibility, data filtering, and image ordering is enforced at the
   * application layer, and errors related to access or invalid productId are
   * handled with clear user feedback.
   *
   * @param connection
   * @param productId Unique identifier of the product whose images will be
   *   queried.
   * @param body Parameters for image list filtering, pagination, and sorting
   *   for the specified product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCatalogImage.IRequest,
  ): Promise<IPageIShoppingMallCatalogImage> {
    try {
      return await patchShoppingMallProductsProductIdImages({
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific image of a product from
   * shopping_mall_catalog_images by productId and imageId.
   *
   * Fetches a single image's details (such as URL, alt text for accessibility,
   * display order, and creation timestamp) for a target product by referencing
   * both the product ID and the image ID. Validates that the image exists and
   * belongs to the specified product to prevent leaks or misattribution across
   * products.
   *
   * Access permissions are enforced based on the published status of the
   * product and the requester's entitlementâ€”customers can only view images for
   * public/active products, while admins/sellers may access full sets of
   * product images for their own items. This operation references the
   * shopping_mall_catalog_images table directly through the relationship to
   * shopping_mall_products as defined in the Prisma schema, providing all
   * available metadata for the queried image.
   *
   * Error handling captures scenarios such as non-existent imageId, mismatched
   * productId-image association, or insufficient permissions, returning clear,
   * actionable messages for each case.
   *
   * @param connection
   * @param productId Unique identifier of the product whose image you want to
   *   retrieve.
   * @param imageId Unique identifier of the image to be retrieved (must belong
   *   to the specified product).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":imageId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCatalogImage> {
    try {
      return await getShoppingMallProductsProductIdImagesImageId({
        productId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
