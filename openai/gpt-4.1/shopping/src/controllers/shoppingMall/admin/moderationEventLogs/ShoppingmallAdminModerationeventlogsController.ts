import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminModerationEventLogs } from "../../../../providers/postShoppingMallAdminModerationEventLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminModerationEventLogs } from "../../../../providers/patchShoppingMallAdminModerationEventLogs";
import { getShoppingMallAdminModerationEventLogsModerationEventLogId } from "../../../../providers/getShoppingMallAdminModerationEventLogsModerationEventLogId";
import { putShoppingMallAdminModerationEventLogsModerationEventLogId } from "../../../../providers/putShoppingMallAdminModerationEventLogsModerationEventLogId";
import { deleteShoppingMallAdminModerationEventLogsModerationEventLogId } from "../../../../providers/deleteShoppingMallAdminModerationEventLogsModerationEventLogId";

import { IShoppingMallModerationEventLog } from "../../../../api/structures/IShoppingMallModerationEventLog";
import { IPageIShoppingMallModerationEventLog } from "../../../../api/structures/IPageIShoppingMallModerationEventLog";

@Controller("/shoppingMall/admin/moderationEventLogs")
export class ShoppingmallAdminModerationeventlogsController {
  /**
   * Create a new moderation event log entry
   * (shopping_mall_moderation_event_logs table).
   *
   * Create a moderation event log entry for tracking actions performed by
   * platform administrators on marketplace entities. The moderation event log
   * captures detailed information about moderation interventions such as policy
   * enforcement, abuse takedown, exception handling, and other events that
   * require transparent logging. Each log entry contains the acting admin ID,
   * optional references to affected sellers, products, reviews, or orders, the
   * event type (such as flag, removal, approval, annotation, warning,
   * escalation, etc.), a moderation message that explains the action, and a
   * timestamp.
   *
   * Security is paramount for this operation; only platform administrators who
   * are properly authenticated and authorized may invoke this endpoint. The
   * action will be fully auditable for regulatory and business review. Changes
   * made through this operation are used to maintain accountability and support
   * post-incident investigation flows. Details provided within the log entry
   * must comply with business requirements for classification and completeness.
   * The moderation event log is tightly integrated with the
   * shopping_mall_moderation_event_logs table as described in the database
   * schema, and additional custom business logic applies for linking moderation
   * events to relevant domain entities.
   *
   * The operation requires all mandatory fields including acting admin, event
   * type, and moderation message, and will return the created log entry on
   * success. Error responses detail validation issues if required properties
   * are missing or permissions are insufficient. Related operations include
   * updating existing moderation event logs and retrieving moderation event
   * history for audit review.
   *
   * @param connection
   * @param body New moderation event log including admin, event type,
   *   moderation message, and affected entity references.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallModerationEventLog.ICreate,
  ): Promise<IShoppingMallModerationEventLog> {
    try {
      return await postShoppingMallAdminModerationEventLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of moderation event logs
   * (shopping_mall_moderation_event_logs table).
   *
   * Retrieve a filtered and paginated list of moderation event logs. This API
   * is primarily used by platform administrators to monitor, audit, and review
   * all moderation or exception actions recorded on products, reviews, sellers,
   * and orders. Each log references the acting admin, the affected entity (by
   * foreign key), the event type, moderation message, and timestamp.
   *
   * The endpoint enables advanced filtering including by admin, entity type,
   * event type (flag, removal, approval, escalation, warning), and date range.
   * It offers pagination support to facilitate navigation through extensive
   * moderation history. All queries operate on the moderation event log entity
   * as per the Prisma schema, which contains complete action contexts for
   * compliance.
   *
   * Service security is critical: only authenticated admins can access this
   * endpoint. Unauthorized access must return an appropriate error.
   * Implementation should enforce comprehensive logging and query performance
   * optimizations for large search spaces. Related APIs may include detailed
   * moderation event retrieval and admin audit log endpoints.
   *
   * Any business critical operation (deletion, banning, flagging, escalation,
   * unblocking, etc.) with moderation impact should be discoverable via this
   * listing for complete administrative oversight. In case of query or data
   * issues, return a meaningful error response including information for
   * debugging and request traceability.
   *
   * @param connection
   * @param body Search and filter parameters for pagination, including event
   *   type, status, acting admin, affected entity reference, and optional date
   *   ranges.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallModerationEventLog.IRequest,
  ): Promise<IPageIShoppingMallModerationEventLog.ISummary> {
    try {
      return await patchShoppingMallAdminModerationEventLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve complete detail for a single moderation event log entry by its ID
   * (shopping_mall_moderation_event_logs table).
   *
   * Retrieve detailed information about a single moderation event log by its
   * unique ID. This API is used by platform administrators to access the
   * complete audit trail and context of specific moderation or exception
   * events. The moderation_event_log_id path parameter must be a valid UUID
   * referencing an existing moderation event log entry.
   *
   * The returned resource includes the acting admin's identifier, affected
   * entity foreign keys (seller, product, review, order), event type (such as
   * flag, removal, approval, escalation, warning), moderation message, and
   * creation timestamp. It operates strictly on the moderation event logs table
   * as described in the Prisma schema, providing all available details for
   * compliance and investigatory needs.
   *
   * Permissions: Only authenticated admins can access this endpoint. Any
   * unauthorized request must return an error. Invalid or unfound IDs should
   * also return proper error messages. This operation is complementary to
   * search/list endpoints for moderation logs and may be used together for
   * deeper investigations or operational auditing. Error handling includes
   * validation on UUID format and resource existence.
   *
   * @param connection
   * @param moderationEventLogId Unique identifier of the moderation event log
   *   entry to retrieve (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationEventLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderationEventLogId")
    moderationEventLogId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallModerationEventLog> {
    try {
      return await getShoppingMallAdminModerationEventLogsModerationEventLogId({
        admin,
        moderationEventLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a moderation event log entry by log ID
   * (shopping_mall_moderation_event_logs table).
   *
   * Update an existing moderation event log entry to correct errors, supplement
   * details, or provide additional annotation on moderation actions performed
   * by platform administrators. This operation targets the
   * shopping_mall_moderation_event_logs table, and is invoked via the
   * moderationEventLogId path parameter, identifying the record to mutate.
   * Typical use cases include updating the event type after further review,
   * clarifying the moderation message, or adding further references to affected
   * marketplace entities (such as products, reviews, sellers, or orders) to
   * provide improved traceability for regulatory or investigative purposes.
   *
   * Only authenticated admin users can perform this update. Security
   * considerations ensure that only users with proper administrative role and
   * access rights may change audit log data, preventing tampering or
   * unauthorized modification. The business logic ensures only permissible
   * fields are updated (change type, moderation message, affected entity
   * references), records the updaterâ€™s identity, and logs the timestamp of the
   * change for full audit transparency.
   *
   * The response returns the updated log entry, and errors are raised if the
   * provided moderationEventLogId does not exist, if the admin lacks
   * permission, or if required update fields are missing. Related operations
   * include creation of new moderation event logs and listing of all moderation
   * actions for audit history.
   *
   * @param connection
   * @param moderationEventLogId The unique identifier of the moderation event
   *   log entry to be updated.
   * @param body Updated moderation event log parameters. May include new
   *   moderation message, event type, and affected entity references.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderationEventLogId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderationEventLogId")
    moderationEventLogId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallModerationEventLog.IUpdate,
  ): Promise<IShoppingMallModerationEventLog> {
    try {
      return await putShoppingMallAdminModerationEventLogsModerationEventLogId({
        admin,
        moderationEventLogId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a moderation event log
   * (shopping_mall_moderation_event_logs table) by ID.
   *
   * This endpoint handles the permanent deletion of a specific moderation event
   * log. It is directly tied to the shopping_mall_moderation_event_logs table
   * which maintains records of all moderation and exception actions (e.g.,
   * product flagging, review removal, seller warnings) performed by
   * administrative users on platform entities.
   *
   * Deleting a moderation event log removes evidence of moderation actions and
   * should only take place for events that are no longer required for
   * compliance, investigation, or audit. This operation is available
   * exclusively to administrators to ensure security and proper oversight;
   * attempts by unauthorized users are logged and rejected.
   *
   * The deletion action is irreversibleâ€”once a moderation event log is deleted,
   * it cannot be recovered. The API expects the unique moderationEventLogId as
   * a path parameter, referencing the primary key in the schema. Hard delete
   * behavior is enforced, and the operation does not return any content on
   * successful execution. Failure is signaled if the event does not exist or if
   * the caller lacks admin privileges. Related endpoints allow for moderation
   * event log review and search prior to deletion for risk mitigation.
   *
   * @param connection
   * @param moderationEventLogId Unique identifier of the moderation event log
   *   to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderationEventLogId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderationEventLogId")
    moderationEventLogId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminModerationEventLogsModerationEventLogId(
        {
          admin,
          moderationEventLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
