import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminCategories } from "../../../../providers/postShoppingMallAdminCategories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminCategoriesCategoryId } from "../../../../providers/putShoppingMallAdminCategoriesCategoryId";
import { deleteShoppingMallAdminCategoriesCategoryId } from "../../../../providers/deleteShoppingMallAdminCategoriesCategoryId";

import { IShoppingMallCategory } from "../../../../api/structures/IShoppingMallCategory";

@Controller("/shoppingMall/admin/categories")
export class ShoppingmallAdminCategoriesController {
  /**
   * Create a new product category in the shoppingMall_categories table.
   *
   * This operation allows an admin user to create a new category under the
   * shopping_mall_categories table. Creation requires specifying category names
   * in Korean and English, both of which must be unique within the assigned
   * parent. The description fields are optional, enabling richer category
   * context for navigation and search UI.
   *
   * The parent_id is used for building the category hierarchy, supporting
   * unlimited levels (root categories have a null parent_id). Display_order
   * enables precise control of sibling ordering. The is_active boolean controls
   * if this category (and its children) are visible throughout the storefront
   * and search.
   *
   * All changes propagate as cache invalidation events system-wide for catalog
   * and navigation. Category creation is allowed only to admin-role users to
   * prevent arbitrary structure changes by external actors. Validation rejects
   * missing mandatory fields, duplicate names, or invalid parent references.
   * Error details will indicate the cause (e.g., duplicate name or parent not
   * found).
   *
   * This endpoint is strictly for administrative product catalog management and
   * is not accessible by sellers or customers directly.
   *
   * @param connection
   * @param body Category creation details including names, descriptions, parent
   *   assignment, display order, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallCategory.ICreate,
  ): Promise<IShoppingMallCategory> {
    try {
      return await postShoppingMallAdminCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product category by categoryId in the
   * shoppingMall_categories table.
   *
   * This operation lets an admin update any editable field of a category
   * identified by categoryId in the shopping_mall_categories table. Updatable
   * properties include name_ko, name_en, description_ko, description_en,
   * parent_id (for moving category in hierarchy), display_order, and is_active.
   * Unique constraints remain enforced per parent node for both names.
   *
   * The operation supports re-parenting categories (moving to different
   * parent), updating display order for navigation purposes, bulk
   * enabling/disabling, and adjusting multilingual metadata for SEO or branding
   * reasons. Inactivation is recursiveâ€”making a category inactive also
   * inactivates all its children, making associated products undiscoverable to
   * end users.
   *
   * Only admin users can perform this operation to keep catalog structure
   * consistent and prevent accidental disruption. Error responses specify
   * reasons, such as duplicate name, invalid parent assignment (e.g., loop), or
   * constraint violation. On success, the response returns the full updated
   * record.
   *
   * @param connection
   * @param categoryId The UUID of the category to update.
   * @param body Category update information: new names, descriptions, parent,
   *   order, or status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategory.IUpdate,
  ): Promise<IShoppingMallCategory> {
    try {
      return await putShoppingMallAdminCategoriesCategoryId({
        admin,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a product category (admin only) from the
   * 'shopping_mall_categories' table.
   *
   * This API endpoint allows an administrator to delete a product category from
   * the shopping mall's catalog, as defined in the 'shopping_mall_categories'
   * table of the Prisma schema. When invoked, the operation first checks if the
   * target category has any active child categories or associated products. If
   * so, deletion is blocked and a meaningful error is returned, instructing the
   * user to reassign or remove dependent objects before retrying.
   *
   * The deletion is implemented as a soft delete by setting the 'deleted_at'
   * timestamp, ensuring compliance with audit and recovery policies. All
   * soft-deleted categories are hidden from normal user and seller queries but
   * remain in the database for compliance, reporting, or potential restoration
   * by admins. Child categories and related product assignments may also be
   * affected based on cascading rules. This operation is strictly restricted to
   * administrators, reflecting the elevated privilege required for catalog
   * structure changes.
   *
   * Validation guards against accidental or malicious removal of critical
   * categories, and the operation logs a full audit record including the acting
   * admin and affected entity. Related endpoints include category creation,
   * update, and recovery/restoration APIs, which together maintain catalog
   * integrity across the platform.
   *
   * @param connection
   * @param categoryId Unique identifier (UUID) of the target category to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminCategoriesCategoryId({
        admin,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
