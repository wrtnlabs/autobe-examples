import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminOrdersOrderIdCancellations } from "../../../../../providers/patchShoppingMallAdminOrdersOrderIdCancellations";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminOrdersOrderIdCancellationsCancellationId } from "../../../../../providers/getShoppingMallAdminOrdersOrderIdCancellationsCancellationId";
import { putShoppingMallAdminOrdersOrderIdCancellationsCancellationId } from "../../../../../providers/putShoppingMallAdminOrdersOrderIdCancellationsCancellationId";
import { deleteShoppingMallAdminOrdersOrderIdCancellationsCancellationId } from "../../../../../providers/deleteShoppingMallAdminOrdersOrderIdCancellationsCancellationId";

import { IPageIShoppingMallOrderCancellation } from "../../../../../api/structures/IPageIShoppingMallOrderCancellation";
import { IShoppingMallOrderCancellation } from "../../../../../api/structures/IShoppingMallOrderCancellation";

@Controller("/shoppingMall/admin/orders/:orderId/cancellations")
export class ShoppingmallAdminOrdersCancellationsController {
  /**
   * Retrieve a paginated list of cancellations related to a specific shopping
   * mall order from shopping_mall_order_cancellations.
   *
   * This API operation allows users to view a complete, filtered, and paginated
   * timeline of all cancellation requests associated with a single order.
   * Detailed information is provided for each cancellation, including status
   * (pending, approved, denied, etc.), reason code, requesting actor (customer,
   * seller, admin), timestamps, and any supporting explanations or audit logs.
   *
   * Security is enforced so that customers can only view cancellations for
   * their own orders, sellers for their order fulfillments, and admins have
   * global access. This endpoint is useful for customers to track the status of
   * their cancellation or refund requests, for sellers to process pending
   * actions or provide responses, and for admins as part of audit and oversight
   * tasks.
   *
   * Input validation supports complex querying, such as filtering by status,
   * date range, initiator, or resolution outcome, with appropriate error
   * handling for unauthorized access or missing order records. Pagination
   * ensures efficient handling even for orders with extensive cancellation
   * histories. Use this endpoint in combination with detailed
   * cancellation/approval endpoints for full customer service workflows.
   *
   * @param connection
   * @param orderId Unique identifier of the target order whose cancellations
   *   will be queried.
   * @param body Request parameters for filtering, searching, and paginating
   *   cancellations for the target order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderCancellation.IRequest,
  ): Promise<IPageIShoppingMallOrderCancellation> {
    try {
      return await patchShoppingMallAdminOrdersOrderIdCancellations({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific order cancellation record by ID from
   * shopping_mall_order_cancellations table.
   *
   * Retrieve detailed information about a specific order cancellation by its
   * unique identifier. This endpoint can be used by customers to review their
   * own cancellation requests, by sellers to monitor and handle cancellations
   * related to their products, and by administrators to audit and troubleshoot
   * cancellation cases system-wide.
   *
   * Security and permissions are enforced according to user role and
   * cancellation ownership: customers can only access their own order
   * cancellations, sellers can access cancellations for their own orders, and
   * admins have unrestricted access. Data is returned from the
   * 'shopping_mall_order_cancellations' table, and includes cancellation reason
   * codes, status (pending, approved, denied, completed, etc.), explanation
   * text, involved actors (customer/seller/admin), and all related timestamps.
   *
   * Any business logic or validation issues (such as accessing a cancellation
   * not owned by the requesting user or non-existent order/cancellation IDs)
   * are handled with appropriate error responses referencing platform-wide
   * error handling conventions. Related APIs for listing, creating, or
   * modifying cancellations are available for workflow integration.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order whose cancellation
   *   event is being retrieved.
   * @param cancellationId Unique identifier (UUID) of the specific cancellation
   *   event to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cancellationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderCancellation> {
    try {
      return await getShoppingMallAdminOrdersOrderIdCancellationsCancellationId(
        {
          admin,
          orderId,
          cancellationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing order cancellation request for a specific order
   * (shopping_mall_order_cancellations).
   *
   * This operation permits the modification of an existing order cancellation
   * request. Typical use cases include updating the status (such as moving from
   * pending to approved or denied), editing the reason code, or
   * providing/altering the explanation text for audit and workflow clarity.
   *
   * Security is enforced to ensure only authorized actors (such as the original
   * requester, responsible seller, or platform admin) can modify the
   * cancellation, following business permission rules as defined in the
   * requirements analysis. This edit operation references the
   * shopping_mall_order_cancellations table, ensuring the integrity of the
   * cancellation history and supporting audit trails for regulatory
   * compliance.
   *
   * The request body must follow IShoppingMallOrderCancellation.IUpdate.
   * Validation checks confirm that status transitions are logically valid
   * (e.g., can't move from completed to pending), and unauthorized changes are
   * blocked according to user role. If a referenced order or cancellation does
   * not exist, or the action is not permitted by the actor, the API responds
   * with appropriate error messages and context.
   *
   * Related endpoints include GET/PATCH operations for retrieving order
   * cancellation status and POST requests for creating a new cancellation.
   *
   * @param connection
   * @param orderId Target order's unique ID whose cancellation request should
   *   be modified.
   * @param cancellationId Unique cancellation request ID within the specified
   *   order to update.
   * @param body Updated cancellation request details, including status, reason
   *   code, or explanation text.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cancellationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderCancellation.IUpdate,
  ): Promise<IShoppingMallOrderCancellation> {
    try {
      return await putShoppingMallAdminOrdersOrderIdCancellationsCancellationId(
        {
          admin,
          orderId,
          cancellationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (logically remove) a cancellation request related to a specific
   * order (shopping_mall_order_cancellations).
   *
   * The API enables logical (soft) deletion of an order cancellation request,
   * marking the record with a deleted_at timestamp while retaining its
   * existence for compliance and audit. This operation ensures that
   * cancellations can be retracted or administratively removed when justified,
   * in line with permission constraints defined by role and business process.
   *
   * Only the actor who created the cancellation, a seller involved in the
   * order, or an admin can delete the cancellation, and only if business rules
   * (such as not already approved/denied/finalized) allow it. The operation
   * references the shopping_mall_order_cancellations table and enforces status
   * checks to avoid removing completed or irreversibly processed records.
   * Unauthorized or invalid deletions result in error responses detailing the
   * cause, ensuring traceability for all actions.
   *
   * This endpoint is related to POST and PUT operations on cancellations, as
   * well as GET endpoints for retrieving cancellation data. The logical delete
   * aligns with the underlying schema's use of deleted_at.
   *
   * @param connection
   * @param orderId ID of the order whose cancellation request should be
   *   deleted.
   * @param cancellationId Unique cancellation ID to logically remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cancellationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrdersOrderIdCancellationsCancellationId(
        {
          admin,
          orderId,
          cancellationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
