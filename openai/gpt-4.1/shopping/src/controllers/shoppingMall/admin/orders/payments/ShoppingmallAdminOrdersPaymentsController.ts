import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminOrdersOrderIdPayments } from "../../../../../providers/patchShoppingMallAdminOrdersOrderIdPayments";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminOrdersOrderIdPaymentsPaymentId } from "../../../../../providers/getShoppingMallAdminOrdersOrderIdPaymentsPaymentId";

import { IPageIShoppingMallOrderPayment } from "../../../../../api/structures/IPageIShoppingMallOrderPayment";
import { IShoppingMallOrderPayment } from "../../../../../api/structures/IShoppingMallOrderPayment";

@Controller("/shoppingMall/admin/orders/:orderId/payments")
export class ShoppingmallAdminOrdersPaymentsController {
  /**
   * Retrieve a paginated, filtered list of payments for a specific order from
   * shopping_mall_order_payments.
   *
   * Retrieve a filtered, paginated list of payment records associated with a
   * given order, using advanced query parameters such as payment status, type,
   * or date range to support customer, seller, and admin review of order
   * payment events.
   *
   * This operation integrates with the shopping_mall_order_payments table and
   * supports use cases including payment troubleshooting, history review, and
   * audit requirements for both customers and platform staff. It incorporates
   * security checks, ensuring only permitted users may view payment data for a
   * given order.
   *
   * Pagination and search parameters are defined in the request body to allow
   * flexible front-end filtering. The operation is tightly coupled with the
   * Orders, Payments, and User authentication flows, and any errors (such as
   * order not found, unauthorized, or malformed query) provide actionable
   * responses.
   *
   * @param connection
   * @param orderId Unique identifier for the target order whose payment records
   *   are to be retrieved.
   * @param body Filter and pagination criteria for retrieving payment records
   *   of a specific order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderPayment.IRequest,
  ): Promise<IPageIShoppingMallOrderPayment> {
    try {
      return await patchShoppingMallAdminOrdersOrderIdPayments({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detail for a specific order payment from shopping_mall_order_payments.
   *
   * Retrieve the details of a single payment associated with a specific order.
   * This endpoint returns information such as the payment provider reference,
   * transaction status, amount, timestamps, payment type, and any available
   * status details for compliance or issue resolution.
   *
   * Security considerations ensure the authenticated customer, seller, or admin
   * may only access payment information related to orders they are authorized
   * to view. Errors such as payment not found, order mismatch, or lack of
   * permission are gracefully handled with actionable error responses.
   *
   * This endpoint is critical for user-facing payment status pages, order
   * administration, and support flows, and it interacts closely with payment
   * gateway reconciliation, order management, and audit logging subsystems.
   *
   * @param connection
   * @param orderId Unique identifier for the target order.
   * @param paymentId Unique identifier for the payment record within the order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderPayment> {
    try {
      return await getShoppingMallAdminOrdersOrderIdPaymentsPaymentId({
        admin,
        orderId,
        paymentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
