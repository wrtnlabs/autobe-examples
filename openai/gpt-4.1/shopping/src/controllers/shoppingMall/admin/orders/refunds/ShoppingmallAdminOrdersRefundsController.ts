import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallAdminOrdersOrderIdRefundsRefundId } from "../../../../../providers/getShoppingMallAdminOrdersOrderIdRefundsRefundId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminOrdersOrderIdRefundsRefundId } from "../../../../../providers/putShoppingMallAdminOrdersOrderIdRefundsRefundId";
import { deleteShoppingMallAdminOrdersOrderIdRefundsRefundId } from "../../../../../providers/deleteShoppingMallAdminOrdersOrderIdRefundsRefundId";

import { IShoppingMallOrderRefund } from "../../../../../api/structures/IShoppingMallOrderRefund";

@Controller("/shoppingMall/admin/orders/:orderId/refunds/:refundId")
export class ShoppingmallAdminOrdersRefundsController {
  /**
   * Retrieve the details for a specific refund event related to an order
   * (shopping_mall_order_refunds table).
   *
   * Retrieve complete details for a specific refund event associated with a
   * particular order. This API operates directly on the
   * shopping_mall_order_refunds table, ensuring traceability of refund
   * requests, status changes, refunds resolved, initiator identity, payment
   * linkage, and timeline data.
   *
   * This operation enforces access control such that only the refund owner
   * (customer) or administrators may view sensitive refund and payment data.
   * Unauthorized attempts are denied and logged. The response includes refund
   * status (pending, approved, denied, completed), date/time fields, refund
   * amounts, business reason code, actors, attached explanation, and any
   * settlement or failure timestamps. Data is immutable for audit compliance
   * and used for customer service reviews or appeals workflows.
   *
   * The customer may use this operation through their order history or customer
   * service portal to review the refund progress, resolution, or denial
   * explanation. Admins use it to audit refund handling and improve platform
   * transparency and trust. The refundId parameter must correspond to an
   * existing refund event for the specified orderId; otherwise, enforced error
   * handling returns a 404 or role-based error response.
   *
   * @param connection
   * @param orderId Unique identifier of the target order for which the refund
   *   event belongs (UUID).
   * @param refundId Unique identifier of the refund event to be retrieved
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderRefund> {
    try {
      return await getShoppingMallAdminOrdersOrderIdRefundsRefundId({
        admin,
        orderId,
        refundId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update (admin/seller) a refund request for an order
   * (shopping_mall_order_refunds).
   *
   * Updates a specific refund request associated with an order. This operation
   * supports status transitions (pending, approved, denied, completed, failed),
   * allows updating the resolution reason, and may permit modification of the
   * explanation or payout details depending on the business policy. The request
   * and refundId must reference an existing refund request for the specified
   * order. Only users with seller or admin rights over the order may execute
   * updates.
   *
   * The operation cross-checks refund eligibility and current status to prevent
   * invalid transitions, such as approving a refund that has already been
   * denied or completed. Security protocols verify that the updater has proper
   * role authorization, and business logic handles all state transition rules.
   * Changes are logged in the refund record for audit traces and customer
   * visibility. If a non-authorized user calls this API or sends an invalid
   * update, the system will reject the operation with an error message and
   * preserve the previous refund status. Data is retained to meet regulatory
   * trace and business audit requirements for financial events such as
   * refunds.
   *
   * See also: Initiating a refund via POST on /orders/{orderId}/refunds.
   *
   * @param connection
   * @param orderId Unique identifier of the order associated with this refund
   *   request
   * @param refundId Unique identifier of the refund request to be updated
   * @param body Details for the refund update, such as new status (approved,
   *   denied, completed), explanation for the action, and payout information if
   *   applicable.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderRefund.IUpdate,
  ): Promise<IShoppingMallOrderRefund> {
    try {
      return await putShoppingMallAdminOrdersOrderIdRefundsRefundId({
        admin,
        orderId,
        refundId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase a specific refund event for an order
   * (shopping_mall_order_refunds table) by admin action.
   *
   * The erase operation for an order refund enables a platform administrator to
   * remove a specific refund event entry from the shopping_mall_order_refunds
   * table, linked to its parent order. This may be justified in rare scenarios
   * such as accidental duplicate entry, legal data erasure request, or to
   * correct compliance discrepancies identified in the audit process.
   *
   * Role-based access control is strictly enforced â€” only users with the
   * 'admin' role may use this endpoint, as refund records are transactional and
   * financial, and their removal impacts both audit trails and downstream
   * reporting. The operation first verifies the existence of both the order and
   * refund IDs, ensures no settlement or irrevocable financial transaction is
   * at risk, and confirms business logic (such as the refund's non-finalized
   * state or within permissible removal period) before deleting the record.
   *
   * On successful deletion, the record is purged (hard delete) and a
   * confirmation is propagated to the invoking admin. If the refund is already
   * finalized, linked to downstream payments, or otherwise protected by
   * compliance, the request is rejected with an error. All erase actions are
   * logged in the admin action logs (shopping_mall_admin_action_logs) for
   * long-term oversight. Other related APIs for order or refund history
   * retrieval are not impacted except that the deleted refund will no longer
   * appear in any results. Error handling ensures transactional integrity and
   * provides clear, actionable feedback for edge cases such as invalid IDs,
   * permission violations, or state conflicts.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order to which the refund
   *   event belongs (UUID format).
   * @param refundId Unique identifier of the refund event record to be erased
   *   (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrdersOrderIdRefundsRefundId({
        admin,
        orderId,
        refundId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
