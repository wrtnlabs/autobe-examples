import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminRoles } from "../../../../providers/postShoppingMallAdminRoles";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminRoles } from "../../../../providers/patchShoppingMallAdminRoles";
import { getShoppingMallAdminRolesRoleId } from "../../../../providers/getShoppingMallAdminRolesRoleId";
import { putShoppingMallAdminRolesRoleId } from "../../../../providers/putShoppingMallAdminRolesRoleId";
import { deleteShoppingMallAdminRolesRoleId } from "../../../../providers/deleteShoppingMallAdminRolesRoleId";

import { IShoppingMallRole } from "../../../../api/structures/IShoppingMallRole";
import { IPageIShoppingMallRole } from "../../../../api/structures/IPageIShoppingMallRole";

@Controller("/shoppingMall/admin/roles")
export class ShoppingmallAdminRolesController {
  /**
   * Create a new system role in shopping_mall_roles (admin only).
   *
   * This API allows platform administrators to define and create new system
   * roles for RBAC (role-based access control) scenarios. It inserts a role
   * record with a unique name and descriptive documentation. The operation
   * validates for uniqueness on roleName and requires both the roleName and
   * description fields as input.
   *
   * Role creation affects user management, permission matrix, and must
   * propagate to all RBAC subsystems. All create operations are audited for
   * compliance and traceability. The endpoint is strictly limited to admins;
   * unauthorized access is denied with auditing.
   *
   * No soft-delete is performed on creation; the role is inserted and becomes
   * available for assignment to new or existing users immediately after
   * creation.
   *
   * @param connection
   * @param body Information required for creating a new role, including
   *   roleName and description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallRole.ICreate,
  ): Promise<IShoppingMallRole> {
    try {
      return await postShoppingMallAdminRoles({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated, filtered role definitions from
   * shopping_mall_roles.
   *
   * This API retrieves a joined, paginated list of roles configured in the
   * system, referencing the shopping_mall_roles table from the Prisma schema.
   * The roles table provides role_name (unique) and description fields,
   * supporting search by name/description and filtering for permission
   * management workflows.
   *
   * The platform uses roles to assign user capabilities (e.g., CUSTOMER, ADMIN,
   * SELLER), shaping access control and dashboard views. This endpoint allows
   * privileged users (typically admins) to view and filter all current role
   * definitions, with support for search keywords (with GIN/Trigram indexes),
   * sort by creation/update date, and custom pagination (page size, offset).
   *
   * Returned results provide complete role metadata for client-side permission
   * matrix rendering, internal audits, and user administration screens. Errors
   * and edge cases (e.g., empty results, malformed queries) will trigger
   * standard platform error responses.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for querying role
   *   definitions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallRole.IRequest,
  ): Promise<IPageIShoppingMallRole> {
    try {
      return await patchShoppingMallAdminRoles({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific system role by roleId (shopping_mall_roles).
   *
   * Fetch complete information about a platform role (e.g., CUSTOMER, SELLER,
   * ADMIN) using the role's unique identifier from the shopping_mall_roles
   * table. The operation is essential for admin dashboards, auditing, or any UI
   * that enumerates or manages roles.
   *
   * This API is intended for admin or system use to allow determination and
   * explanation of user permissions, not for direct customer interaction. The
   * detailed response includes roleName, description, and metadata fields for
   * audit. Unauthorized or non-existent roleId queries will return an error
   * according to business rules.
   *
   * Only admin-level users should have direct access to this endpoint. All
   * requests are audited. This operation has no requestBody since all
   * parameters are in the path.
   *
   * @param connection
   * @param roleId Unique identifier for the target role (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":roleId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("roleId")
    roleId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallRole> {
    try {
      return await getShoppingMallAdminRolesRoleId({
        admin,
        roleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing platform role (shopping_mall_roles table) by its ID.
   *
   * Update the information for a specific system role by its role ID. This
   * operation is core to the administration of access control on the e-commerce
   * platform. Only platform administrators are authorized to execute this
   * operation, as improper role modifications could jeopardize platform
   * security or user access.
   *
   * When called, it updates attributes on the 'shopping_mall_roles' table, such
   * as 'role_name' (e.g., CUSTOMER, SELLER, ADMIN), and 'description'
   * (permission explanation). It enforces uniqueness of the 'role_name'
   * property, and validation ensures the updated role definition does not
   * conflict with existing assignments or violate platform invariants. Changes
   * are immediately reflected across all permission checks, and all updates are
   * logged for audit purposes.
   *
   * This API provides transactional guarantees for role editing: if the update
   * would violate uniqueness or referential constraints, an error is returned.
   * Role updates are critical for responding to evolving business requirements,
   * regulatory needs, or new features that impact permission matrices.
   *
   * @param connection
   * @param roleId Unique identifier for the role to be updated.
   * @param body Information to update the target role. Includes fields such as
   *   role_name and description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":roleId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("roleId")
    roleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallRole.IUpdate,
  ): Promise<IShoppingMallRole> {
    try {
      return await putShoppingMallAdminRolesRoleId({
        admin,
        roleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a platform role (shopping_mall_roles table) by its ID.
   *
   * Delete an existing system role from the platform's role registry by its
   * unique ID. This action is restricted to platform administrators due to its
   * impact on access control and permission matrices.
   *
   * On invocation, this operation checks referential integrity: if any users or
   * entities are still assigned the role, the operation is blocked and an error
   * is returned. The delete is a hard removal based on the absence of a
   * soft-delete field in the 'shopping_mall_roles' table. All deletions are
   * logged for audit and compliance. Removing a role cannot be undone and could
   * have system-wide effects if the role was used in access decisions.
   *
   * Appropriate error checks, validation of constraints, and confirmation of
   * non-assignment of users are critical for successful execution of this
   * operation. Documentation and approval flows should be in place before
   * attempting to delete a role. Attempts to delete system-critical roles
   * should be guarded by additional business policy checks.
   *
   * @param connection
   * @param roleId Unique identifier for the role to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":roleId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("roleId")
    roleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminRolesRoleId({
        admin,
        roleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
