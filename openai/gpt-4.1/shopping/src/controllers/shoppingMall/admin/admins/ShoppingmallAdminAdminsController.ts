import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminAdmins } from "../../../../providers/patchShoppingMallAdminAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminAdminsAdminId } from "../../../../providers/getShoppingMallAdminAdminsAdminId";
import { putShoppingMallAdminAdminsAdminId } from "../../../../providers/putShoppingMallAdminAdminsAdminId";
import { deleteShoppingMallAdminAdminsAdminId } from "../../../../providers/deleteShoppingMallAdminAdminsAdminId";

import { IPageIShoppingMallAdmin } from "../../../../api/structures/IPageIShoppingMallAdmin";
import { IShoppingMallAdmin } from "../../../../api/structures/IShoppingMallAdmin";

@Controller("/shoppingMall/admin/admins")
export class ShoppingmallAdminAdminsController {
  /**
   * List and search shopping_mall_admins with filtering and pagination for
   * dashboard monitoring.
   *
   * This API operation allows platform-level administrators to retrieve a list
   * of all admin user accounts, with advanced filtering and pagination support.
   * Operating on the shopping_mall_admins entity, it is intended for
   * administrative dashboard tooling and compliance reporting, not general user
   * or seller access. The operation supports powerful search capabilities over
   * fields such as account status, admin name, and account creation date,
   * enabling the supervision of multiple admin accounts across the platform.
   *
   * Returned results exclude sensitive information such as password hashes,
   * two-factor secrets, and other confidential fields to ensure compliance with
   * security best practices. The implementation is required to audit all access
   * to this endpoint for compliance purposes. Only users with the admin role
   * are permitted to use this endpoint; all other users must receive a clear
   * unauthorized error response. This endpoint is foundational for operational
   * security and audit oversight in the shoppingMall system.
   *
   * @param connection
   * @param body Filter criteria and pagination options for searching admin
   *   users.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAdmin.IRequest,
  ): Promise<IPageIShoppingMallAdmin.ISummary> {
    try {
      return await patchShoppingMallAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the full detail for a given administrator (shopping_mall_admins)
   * by adminId.
   *
   * This API operation returns detailed information about the administrator
   * account identified by the adminId parameter. Its core function is to
   * provide full visibility into the selected admin's core profile fields (such
   * as email, full name, status, 2FA setup) and critical audit timestamps. It
   * incorporates all security attributes, including account status (active,
   * disabled, suspended), email address, last login timestamp, and optional
   * two-factor authentication secret.
   *
   * Security considerations are critical. This endpoint should be restricted
   * strictly to users with appropriate admin privileges, require
   * authentication, and never expose the password hash to client-side
   * consumers. Relationship to underlying database is one-to-one with the
   * shopping_mall_admins schema table, guaranteeing synchronous reflection of
   * all profile and audit changes.
   *
   * Any attempt to access a non-existent or logically deleted administrator
   * should result in a clear not-found error. The operation supports
   * integration with admin audit or action log views. Related endpoints include
   * update, erase, or authentication operations for administrator accounts.
   * Output never includes related logs or tokensâ€”only core admin table columns.
   * Error handling ensures proper messaging for authorization failures or
   * invalid admin IDs.
   *
   * @param connection
   * @param adminId Unique identifier for the target administrator
   *   (shopping_mall_admins.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAdmin> {
    try {
      return await getShoppingMallAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update administrator profile and security attributes by adminId
   * (shopping_mall_admins).
   *
   * This API operation allows authorized admin users to modify the attributes
   * of an existing administrator account, identified by adminId. Updatable
   * fields may include full name, account status (active, suspended, disabled),
   * email address, and two-factor authentication settings, while the password
   * is typically managed through a separate reset/change flow.
   *
   * Security is paramount: only users with verified admin role can update admin
   * accounts, and audit trails must be written for every update for compliance
   * with platform requirements. Validations are enforced to prevent duplicate
   * emails, improper status transitions, or loss of audit data. The
   * shopping_mall_admins model is updated atomically, with timestamp columns
   * updated according to business logic.
   *
   * Upon successful update, the operation returns the newly updated
   * administrator entity as a response. Errors are handled elegantly with
   * messages for not found, duplicate, or invalid input. This operation is
   * closely related to admin creation, deletion, and detail/retrieve
   * operations, and strongly relies on the Prisma schema comments for
   * administrative security logic.
   *
   * @param connection
   * @param adminId Unique identifier of the admin to be updated
   *   (shopping_mall_admins.id).
   * @param body Administrator update fields for profile, status, email, or 2FA.
   *   See IShoppingMallAdmin.IUpdate for permitted properties.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAdmin.IUpdate,
  ): Promise<IShoppingMallAdmin> {
    try {
      return await putShoppingMallAdminAdminsAdminId({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a system admin account (shopping_mall_admins table) by
   * ID.
   *
   * This API operation is used to permanently remove an administrator account
   * from the system. It references the shopping_mall_admins table in the Prisma
   * schema, deleting the account and all associated authentication information,
   * two-factor secrets, and audit references.
   *
   * This action can only be performed by a user with sufficient privileges
   * (e.g., super-admin or system operator) and is restricted to scenarios where
   * account removal is necessary for compliance, offboarding, or platform
   * security.
   *
   * Upon execution, the admin record is fully removed from the database rather
   * than being soft-deleted, as the deleted_at column will be set if logical
   * deletion is implemented, but if hard delete is specified, the record is
   * physically removed and cannot be restored. Related logs or entities
   * referencing the removed admin remain for audit trail integrity, but this
   * user will lose all access rights immediately.
   *
   * Appropriate role checks and operation blocking are enforced at the business
   * logic level to prevent accidental or unauthorized deletions. Any failed
   * attempts (e.g., due to lack of permission or invalid adminId) return clear
   * error messages for troubleshooting.
   *
   * Operation is expected to return no response body. Errors are handled per
   * platform conventions for authorization/validation failures.
   *
   * @param connection
   * @param adminId Unique identifier of the administrator account to
   *   permanently delete (shopping_mall_admins.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
