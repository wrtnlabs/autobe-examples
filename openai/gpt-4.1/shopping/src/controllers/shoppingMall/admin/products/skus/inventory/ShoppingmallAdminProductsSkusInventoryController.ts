import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putShoppingMallAdminProductsProductIdSkusSkuIdInventory } from "../../../../../../providers/putShoppingMallAdminProductsProductIdSkusSkuIdInventory";
import { AdminAuth } from "../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminProductsProductIdSkusSkuIdInventory } from "../../../../../../providers/patchShoppingMallAdminProductsProductIdSkusSkuIdInventory";

import { IShoppingMallInventoryRecord } from "../../../../../../api/structures/IShoppingMallInventoryRecord";

@Controller("/shoppingMall/admin/products/:productId/skus/:skuId/inventory")
export class ShoppingmallAdminProductsSkusInventoryController {
  /**
   * Replace all inventory values for a specific SKU with a full update.
   *
   * Replace the full set of inventory fields for a product SKU. All data in the
   * inventory record (quantity_available, reserved, sold, low_stock_threshold,
   * status) must be given, as no previous data is preserved. This operation
   * ensures inventory and status values are set in a single atomic update,
   * ideal for admin-initiated inventory resets or bulk reconciliation following
   * audits or data imports.
   *
   * Authorization is checked so only the owning seller or an admin can perform
   * this. Any missing fields, invalid values, or business logic violations
   * (such as negative stock) are rejected, and error messages are provided with
   * remediation steps. On success, the entire, newly written inventory record
   * is returned with updated timestamps.
   *
   * Put is not recommended for frequent operations, and should be reserved for
   * full resets or major corrections. To change only a selection of fields, use
   * the PATCH endpoint instead. This endpoint is also tightly coupled with
   * business logic to write adjustment audit logs and trigger
   * low-stock/business status signals if relevant.
   *
   * @param connection
   * @param productId The unique identifier of the product to which the SKU
   *   belongs.
   * @param skuId The unique identifier of the SKU whose full inventory record
   *   is being replaced.
   * @param body Complete inventory record fields for the SKU, replacing all
   *   previous data.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallInventoryRecord.IUpdate,
  ): Promise<IShoppingMallInventoryRecord> {
    try {
      return await putShoppingMallAdminProductsProductIdSkusSkuIdInventory({
        admin,
        productId,
        skuId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Partially update inventory values for a specific product SKU's inventory
   * record.
   *
   * Update selective fields of a product SKU's inventory record in the
   * e-commerce platform. This operation is used primarily by sellers to
   * increase available stock after restock, decrease stock due to losses, or
   * mark an SKU as blocked for sales. Sellers can also adjust low stock
   * thresholds. Admins may perform the same operation for all SKUs as part of
   * compliance or correction workflows.
   *
   * Security enforcement disallows customers or unrelated sellers from
   * accessing this endpoint. The API ensures the SKU belongs to the given
   * productId and that the caller has sufficient rights. Validation is
   * performed on all mutable fields to guarantee no negative quantities and
   * status transitions must follow the business state machine. On success, the
   * new inventory values are shown. If unauthorized or SKU does not exist, an
   * error with actionable information is returned.
   *
   * PATCH is preferable when only some fields of the inventory should be
   * changed, as compared to the full-replacement PUT operation. This operation
   * is linked to inventory change audit logs, which record all manual/admin
   * inventory adjustments for compliance and rollback capabilities.
   *
   * @param connection
   * @param productId The unique identifier of the product to which the SKU
   *   belongs.
   * @param skuId The unique identifier of the SKU whose inventory is being
   *   modified.
   * @param body Partial inventory update fields for the product SKU, such as
   *   available quantity or status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async updatePartial(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallInventoryRecord.IPartialUpdate,
  ): Promise<IShoppingMallInventoryRecord> {
    try {
      return await patchShoppingMallAdminProductsProductIdSkusSkuIdInventory({
        admin,
        productId,
        skuId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
