import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminProductsProductIdSkusSkuIdInventoryLogs } from "../../../../../../../providers/patchShoppingMallAdminProductsProductIdSkusSkuIdInventoryLogs";
import { AdminAuth } from "../../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../../decorators/payload/AdminPayload";

import { IPageIShoppingMallInventoryLog } from "../../../../../../../api/structures/IPageIShoppingMallInventoryLog";
import { IShoppingMallInventoryLog } from "../../../../../../../api/structures/IShoppingMallInventoryLog";

@Controller(
  "/shoppingMall/admin/products/:productId/skus/:skuId/inventory/logs",
)
export class ShoppingmallAdminProductsSkusInventoryLogsController {
  /**
   * Search and paginate inventory adjustment logs for a product SKU
   * (shopping_mall_inventory_logs).
   *
   * Fetch a paginated, filterable, and sortable list of inventory adjustment
   * logs associated with a specific product SKU. This operation is essential
   * for sellers and admins to monitor, review, and audit inventory changes such
   * as manual increases, sales, cancellations, returns, system corrections,
   * blocking/unblocking, and other inventory state transitions.
   *
   * The API supports advanced filtering by date range, adjustment type (e.g.,
   * increase, decrease, block), actor (seller or admin), and related order
   * reference for comprehensive forensic and business reporting. Sellers can
   * access adjustment logs only for their own products/SKUs, while admins have
   * access to all logs platform-wide.
   *
   * Security enforcement ensures that sellers cannot access logs not associated
   * with their products. Pagination parameters enable scalable access to large
   * adjustment histories. All responses are derived directly from the
   * shopping_mall_inventory_logs table, which includes change metadata, actor
   * information, quantities changed, and business context. Errors include
   * unauthorized access, invalid SKU IDs, or malformed pagination/filter
   * requests.
   *
   * @param connection
   * @param productId Unique identifier for the target product (UUID format) as
   *   referenced by shopping_mall_products.id.
   * @param skuId Unique identifier for the target product SKU (UUID format) as
   *   referenced by shopping_mall_product_skus.id.
   * @param body Filtering, search, and pagination parameters to retrieve
   *   relevant inventory adjustment logs for a SKU.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("skuId")
    skuId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallInventoryLog.IRequest,
  ): Promise<IPageIShoppingMallInventoryLog> {
    try {
      return await patchShoppingMallAdminProductsProductIdSkusSkuIdInventoryLogs(
        {
          admin,
          productId,
          skuId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
