import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminProductsProductIdReviewsReviewIdFlags } from "../../../../../../providers/postShoppingMallAdminProductsProductIdReviewsReviewIdFlags";
import { AdminAuth } from "../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminProductsProductIdReviewsReviewIdFlags } from "../../../../../../providers/patchShoppingMallAdminProductsProductIdReviewsReviewIdFlags";
import { getShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId } from "../../../../../../providers/getShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId";
import { putShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId } from "../../../../../../providers/putShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId";
import { deleteShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId } from "../../../../../../providers/deleteShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId";

import { IShoppingMallReviewFlag } from "../../../../../../api/structures/IShoppingMallReviewFlag";
import { IPageIShoppingMallReviewFlag } from "../../../../../../api/structures/IPageIShoppingMallReviewFlag";

@Controller("/shoppingMall/admin/products/:productId/reviews/:reviewId/flags")
export class ShoppingmallAdminProductsReviewsFlagsController {
  /**
   * Flag a product review for moderation or abuse, associated with the
   * review_flags table.
   *
   * Use this endpoint when a platform participant (customer, seller, or admin)
   * wishes to report a product review for suspected abuse, spam, or policy
   * violation. The flag is recorded in the shopping_mall_review_flags table,
   * referencing the specific review and actor (derived from authentication
   * context). Multiple actors may flag the same review, but a single actor can
   * only have one open flag per review.
   *
   * Upon submission, the system validates the review exists and is active, and
   * checks for any existing unresolved flags by the same user. The API enforces
   * role-based authentication, ensures flags have a clear reason, and logs
   * every event for audit and moderation workflows. The review owner is not
   * notified directly, but admins and moderation tools receive notice of
   * submitted flags for processing. Related operations include update
   * (modifying note/status), and resolution (via admin action).
   *
   * Security considerations: Only authenticated users may flag reviews.
   * Attempts to flag non-existent or deleted reviews return clear error
   * messages. All flag actions are logged for moderation transparency.
   *
   * The specification references the shopping_mall_review_flags table in the
   * Prisma schema. Each flag record contains the review association, actor
   * details (customer, seller, or admin), the reason for flagging, a note
   * field, status (open/closed), and audit timestamps.
   *
   * @param connection
   * @param productId ID of the product that the review belongs to.
   * @param reviewId ID of the review being flagged.
   * @param body Flag creation details including reason for reporting and
   *   optional note.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewFlag.ICreate,
  ): Promise<IShoppingMallReviewFlag> {
    try {
      return await postShoppingMallAdminProductsProductIdReviewsReviewIdFlags({
        admin,
        productId,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated list and moderation queue of all flags for a specific
   * product review (shopping_mall_review_flags).
   *
   * This operation is designed to allow a platform administrator or moderator
   * to query all flags that have been attached to a specific review on a given
   * product. Each flag is a report of abuse, policy violation, or content
   * moderation concern, referencing the review by reviewId and allowing
   * moderators to view all reports in a single view.
   *
   * Security-wise, only admin or moderator users should have direct access to
   * all flag information, as these can contain sensitive context and audit
   * information. Customer or seller actors never have access to all flags via
   * this endpoint; instead, they can flag reviews but cannot view the report
   * queue.
   *
   * The endpoint is closely tied to the shopping_mall_review_flags table, which
   * maintains information such as who flagged the review, their role, the
   * moderation status, reason code, note, and audit timestamps. Pagination,
   * advanced query filtering by status, and ordering by creation/update time
   * are mandatory to support operational needs. The request supports filtering
   * for flags by status (open/resolved/rejected), submitted reason, or flagged
   * actor type. Error handling includes validation of productId and reviewId
   * for existence, permission checks for admin-only access, and graceful
   * fallback for reviews without any associated flags. This endpoint is used in
   * tandem with the single flag query API for detailed inspection of individual
   * flag records.
   *
   * @param connection
   * @param productId Unique identifier of the target product for which the
   *   review was written, as a UUID string.
   * @param reviewId Unique identifier of the specific product review whose
   *   flags are being queried, as a UUID string.
   * @param body Flag search/filter criteria, pagination, and sorting options
   *   for review moderation workflows.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewFlag.IRequest,
  ): Promise<IPageIShoppingMallReviewFlag.ISummary> {
    try {
      return await patchShoppingMallAdminProductsProductIdReviewsReviewIdFlags({
        admin,
        productId,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch all details for a specific flag record on a product review
   * (shopping_mall_review_flags).
   *
   * This operation fetches the complete details for a single flag that has been
   * filed against a specific product review. A flag is a moderation or abuse
   * report, and each is uniquely identified by flagId and associated reviewId,
   * scoped by the parent product (productId).
   *
   * The response contains all relevant information contained in the
   * shopping_mall_review_flags record, including reporting user/seller/admin
   * identity (by reference), status (open, resolved, rejected), submitted
   * reason, note, timestamps, and moderation actions if any. Associated audit
   * context is provided for investigation purposes.
   *
   * This operation is strictly admin or moderator-only, given the sensitivity
   * of flagging information and potential for containing PII or moderation
   * annotations. Customer- and seller-facing flows never use this endpoint
   * directly. The endpoint requires that the referenced product, review, and
   * flag are all valid and relationally consistent; otherwise, clear 404 or
   * permission-denied errors are provided. This endpoint is typically used from
   * the moderation dashboard for deep-dive investigation after the paginated
   * flag list is consulted.
   *
   * @param connection
   * @param productId Unique identifier of the target product as a UUID string.
   * @param reviewId Unique identifier of the target review as a UUID string.
   * @param flagId Unique identifier of the target flag record under the given
   *   review, as a UUID string.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":flagId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("flagId")
    flagId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReviewFlag> {
    try {
      return await getShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId(
        {
          admin,
          productId,
          reviewId,
          flagId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a review flag's note or moderation status by flagId, for compliance
   * and moderation workflows.
   *
   * This operation lets an authorized user (primarily admin, but also original
   * flagger) modify details of a product review flag, such as changing the note
   * or updating the workflow status (for example, to 'resolved' or 'rejected'
   * after moderation review). Each flag is uniquely identified by productId,
   * reviewId, and flagId.
   *
   * Security: Only the flag creator or platform moderators/admins can update a
   * flag's note or status. Attempts to update a non-existent or closed flag are
   * rejected with an appropriate error. Changes are always fully audited and
   * tracked for compliance.
   *
   * On successful update, the system logs the event, re-validates business
   * rules (e.g., status transition logic), and notifies relevant actors if
   * escalation is required. This endpoint references the
   * shopping_mall_review_flags table in the Prisma schema, where each flag
   * includes actor, note, current status, and audit fields.
   *
   * @param connection
   * @param productId ID of the product associated with the review and flag.
   * @param reviewId ID of the review being flagged.
   * @param flagId ID of the specific review flag to update.
   * @param body Fields to update: note text or status value.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":flagId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("flagId")
    flagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReviewFlag.IUpdate,
  ): Promise<IShoppingMallReviewFlag> {
    try {
      return await putShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId(
        {
          admin,
          productId,
          reviewId,
          flagId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete (hard delete) a review flag for a product review
   * (shopping_mall_review_flags).
   *
   * This API allows an administrator to permanently delete a single review flag
   * on a specified product review. The review flag (from
   * shopping_mall_review_flags) is a record that indicates a report of abuse,
   * spam, or other violations for a given review, and is uniquely identified by
   * a flagId within the context of a particular productId and reviewId.
   *
   * In practical scenarios, administrators utilize this endpoint after
   * resolving the flag or determining that the report was in error. Only users
   * with admin or moderation privileges should be able to invoke this
   * operation, as deleting review flags may impact future audit and reporting
   * capability.
   *
   * The operation completely removes the review flag record from the database.
   * There is no soft deletion for this table. This ensures that resolved or
   * incorrect flags do not clutter moderation dashboards or analytics. When
   * performing this action, the system should confirm the flag exists for the
   * specified productId and reviewId combination before deletion.
   *
   * Related endpoints include listing review flags for moderation, updating
   * review statuses, and other administrative moderation tools. Appropriate
   * access control and logging should be implemented to capture deletions for
   * platform compliance.
   *
   * @param connection
   * @param productId Unique identifier for the target product containing the
   *   review.
   * @param reviewId Unique identifier for the review to which the flag is
   *   attached.
   * @param flagId Unique identifier for the review flag to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":flagId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("flagId")
    flagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductsProductIdReviewsReviewIdFlagsFlagId(
        {
          admin,
          productId,
          reviewId,
          flagId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
