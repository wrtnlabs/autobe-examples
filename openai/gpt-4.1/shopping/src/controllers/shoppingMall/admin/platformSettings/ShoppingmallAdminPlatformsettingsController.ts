import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminPlatformSettings } from "../../../../providers/postShoppingMallAdminPlatformSettings";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminPlatformSettings } from "../../../../providers/patchShoppingMallAdminPlatformSettings";
import { getShoppingMallAdminPlatformSettingsPlatformSettingId } from "../../../../providers/getShoppingMallAdminPlatformSettingsPlatformSettingId";
import { putShoppingMallAdminPlatformSettingsPlatformSettingId } from "../../../../providers/putShoppingMallAdminPlatformSettingsPlatformSettingId";
import { deleteShoppingMallAdminPlatformSettingsPlatformSettingId } from "../../../../providers/deleteShoppingMallAdminPlatformSettingsPlatformSettingId";

import { IShoppingMallPlatformSettings } from "../../../../api/structures/IShoppingMallPlatformSettings";
import { IPageIShoppingMallPlatformSetting } from "../../../../api/structures/IPageIShoppingMallPlatformSetting";
import { IShoppingMallPlatformSetting } from "../../../../api/structures/IShoppingMallPlatformSetting";

@Controller("/shoppingMall/admin/platformSettings")
export class ShoppingmallAdminPlatformsettingsController {
  /**
   * Create new e-commerce platform-wide settings
   * (shopping_mall_platform_settings).
   *
   * Create a new set of site-wide platform settings for the e-commerce shopping
   * mall. Administrators use this endpoint to specify information such as
   * localized site titles and descriptions, support contact details, branding
   * assets (logo URI), and legal document links (privacy policy and terms of
   * service URIs).
   *
   * This operation is restricted to admin users to maintain security and
   * compliance. The platform settings table is intended for infrequent updates
   * by authorized operators, as changes propagate immediately to UI and
   * SEO/metadata references across the platform.
   *
   * Care is required to ensure that provided URIs and contact information meet
   * business policy and legal requirements. All fields must be filled according
   * to platform standards described in business requirements. Error handling
   * must guard against duplicate settings or attempts to create more than one
   * active configuration when the table is intended as a singleton.
   *
   * @param connection
   * @param body Payload for new platform settings creation, including site
   *   titles, descriptions, contact, branding, and policy URIs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallPlatformSettings.ICreate,
  ): Promise<IShoppingMallPlatformSettings> {
    try {
      return await postShoppingMallAdminPlatformSettings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated and filterable list of shopping mall platform settings
   * from shopping_mall_platform_settings.
   *
   * Retrieve a filtered and paginated list of platform settings used across the
   * shopping mall platform. This operation supports advanced search and sort
   * capabilities for administrators managing global system configuration,
   * SEO/branding details, legal reference URIs, and support information.
   * Administrators can filter by site title, status, or creation/update date,
   * and paginate results to efficiently review or update settings as needed.
   *
   * The operation enforces platform-wide administrative access control,
   * ensuring only authorized admins may view or modify platform-wide settings.
   * This endpoint interacts directly with the shopping_mall_platform_settings
   * table, referencing its schema comment and column definitions. The list may
   * include settings in both Korean and English localizations for full
   * internationalization support.
   *
   * Errors may be returned if access permissions are insufficient, filters are
   * malformed, or if there is an issue with platform settings retrieval from
   * the database. Related settings update and single-platform-setting retrieval
   * operations are typically used in conjunction with this endpoint.
   *
   * @param connection
   * @param body Filter, search, and pagination specifications for retrieving
   *   platform settings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallPlatformSetting.IRequest,
  ): Promise<IPageIShoppingMallPlatformSetting.ISummary> {
    try {
      return await patchShoppingMallAdminPlatformSettings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single shopping mall platform setting by ID from
   * shopping_mall_platform_settings.
   *
   * Retrieve the detailed information of a single platform setting record by
   * its unique platformSettingId. This operation is restricted to admin users
   * and includes all configuration and branding fields, such as Korean and
   * English site titles, descriptions, support contacts, logo/image URIs, and
   * links to privacy policy and terms of service documents as persisted in the
   * shopping_mall_platform_settings table.
   *
   * This endpoint allows administrative review and editing preparation for
   * settings, supports error feedback for request failures (e.g., not found,
   * unauthorized access), and integrates tightly with the platform's
   * configuration dashboard. Path parameter enforcement ensures that the
   * provided platformSettingId is a valid UUID matching an existing settings
   * record.
   *
   * Detailed inspection of this record is typically used for further update or
   * administrative actions, and error handling covers missing, deleted, or
   * permission-denied records.
   *
   * @param connection
   * @param platformSettingId Unique identifier of the target platform setting
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":platformSettingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("platformSettingId")
    platformSettingId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallPlatformSetting> {
    try {
      return await getShoppingMallAdminPlatformSettingsPlatformSettingId({
        admin,
        platformSettingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing e-commerce platform settings record
   * (shopping_mall_platform_settings) by ID.
   *
   * Update an existing platform-wide settings record, referenced by its unique
   * ID. This operation is restricted to admin users and is used to revise core
   * metadata for the entire site, including localized titles and descriptions,
   * customer support details, branding logos, and legal document links.
   *
   * Security is paramount; only properly authenticated admin users may perform
   * this action. The operation must validate the existence of the referenced
   * settings record, ensure appropriate formatting and completeness of updated
   * fields, and propagate updated settings to relevant caches and displays.
   *
   * Attempting to update a non-existent or deleted platform setting record must
   * result in a clear error response. Business logic must prevent unauthorized
   * changes and maintain detailed audit logs as per platform requirements.
   *
   * @param connection
   * @param platformSettingId Target platform settings record's unique ID (UUID)
   *   for update.
   * @param body Fields and values to update the platform settings record,
   *   including site titles, descriptions, support contacts, branding, and
   *   policies.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":platformSettingId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("platformSettingId")
    platformSettingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPlatformSettings.IUpdate,
  ): Promise<IShoppingMallPlatformSettings> {
    try {
      return await putShoppingMallAdminPlatformSettingsPlatformSettingId({
        admin,
        platformSettingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific platform-wide editable setting using its unique
   * identifier (soft delete if supported).
   *
   * This API operation allows a platform administrator to delete a global
   * platform setting entry identified by the specified 'platformSettingId'.
   * These settings manage editable site metadata including branding,
   * descriptions, support contacts, and legal policy URIs. When invoked, the
   * system sets the 'deleted_at' timestamp for a soft delete, preserving the
   * historical data for recovery and audit purposes.
   *
   * The operation checks the acting user's role to confirm they have 'admin'
   * privileges. It enforces that only precisely the record matching the
   * provided ID is affected. The response is empty on success. Audit trails of
   * the action are maintained through shopping_mall_admin_action_logs, linking
   * the acting admin and affected setting. All relevant caches are invalidated
   * to prevent stale UI or logic references to the deleted setting.
   *
   * The operation expects a valid UUID in the 'platformSettingId' path
   * parameter. If the specified ID does not exist or is already deleted, an
   * explicit not found or idempotency response is returned. Attempts by
   * non-admin users are denied with an error. Related API operations include
   * creation and update endpoints for platform settings management.
   *
   * @param connection
   * @param platformSettingId Unique identifier of the platform setting to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":platformSettingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("platformSettingId")
    platformSettingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminPlatformSettingsPlatformSettingId({
        admin,
        platformSettingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
