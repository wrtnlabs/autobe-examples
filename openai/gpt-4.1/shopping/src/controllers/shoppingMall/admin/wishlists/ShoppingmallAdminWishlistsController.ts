import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallAdminWishlistsWishlistId } from "../../../../providers/getShoppingMallAdminWishlistsWishlistId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminWishlistsWishlistId } from "../../../../providers/putShoppingMallAdminWishlistsWishlistId";
import { deleteShoppingMallAdminWishlistsWishlistId } from "../../../../providers/deleteShoppingMallAdminWishlistsWishlistId";

import { IShoppingMallWishlist } from "../../../../api/structures/IShoppingMallWishlist";

@Controller("/shoppingMall/admin/wishlists/:wishlistId")
export class ShoppingmallAdminWishlistsController {
  /**
   * Get detailed information about a specific wishlist by ID from
   * shopping_mall_wishlists.
   *
   * Retrieve the full details of a specific wishlist, including associated
   * product references and timestamps for creation and last modification.
   *
   * This operation references the shopping_mall_wishlists table and returns all
   * properties as defined in the Prisma schema, such as id,
   * shopping_mall_customer_id, created_at, and updated_at. The response
   * includes a list of wishlist items, each linking to a product via
   * shopping_mall_product_id.
   *
   * Access control must ensure that only the wishlist owner or authorized admin
   * roles can view this data. Business rules dictate that wishlists are
   * customer-specific and not visible to sellers or other regular users. Error
   * cases include requests for nonexistent, deleted, or unauthorized wishlists,
   * which should return appropriate errors.
   *
   * This operation supports user flows for retrieving their saved products for
   * browsing, future purchase, or management. It may be used by front-end
   * applications to display the user's saved/wishlist products. If additional
   * details of wishlist items are required (e.g., product info, images), they
   * should be retrieved in a joined or nested response according to the DTO
   * definition.
   *
   * @param connection
   * @param wishlistId Unique identifier for the wishlist to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallWishlist> {
    try {
      return await getShoppingMallAdminWishlistsWishlistId({
        admin,
        wishlistId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the details or settings of a customer's wishlist in the
   * shopping_mall_wishlists table.
   *
   * This API allows the owner (customer) of a wishlist to update its settings
   * or details. The operation is performed upon the shopping_mall_wishlists
   * table, whose schema supports fields such as updated_at, customer
   * association, and relational links to wishlist items. The update is only
   * permitted for the customer who owns the wishlist, or for a platform admin
   * through an elevated controller.
   *
   * Business logic for this operation includes verifying the authenticated
   * user's ownership, validating that the wishlist is not soft-deleted
   * (deleted_at is null), and that any modifications match value and integrity
   * constraints (e.g., length limits for names, or uniqueness for certain list
   * properties). The updated_at timestamp is refreshed upon successful
   * operation.
   *
   * The operation is expected to fail if the wishlist does not exist, is soft
   * deleted, or is not owned by the authenticated user. All update actions are
   * logged for audit if the action is performed by an admin. Related APIs
   * typically include wishlist item CRUD operations and creation API for
   * wishlists.
   *
   * @param connection
   * @param wishlistId Unique identifier (UUID) of the wishlist to update.
   * @param body Fields for updating the wishlist, such as name, settings, or
   *   properties. May include updates to related metadata, not to the items
   *   themselves.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallWishlist.IUpdate,
  ): Promise<IShoppingMallWishlist> {
    try {
      return await putShoppingMallAdminWishlistsWishlistId({
        admin,
        wishlistId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a customer's wishlist in the shopping_mall_wishlists table by
   * marking it as deleted.
   *
   * This endpoint marks a customerâ€™s wishlist as deleted by updating the
   * deleted_at field with the current timestamp (soft delete). It operates on
   * the shopping_mall_wishlists table, which maintains wishlists for each
   * customer and supports soft deletion for audit, recovery, and compliance
   * reasons.
   *
   * Security-wise, only the owner (authenticated customer) or an admin can
   * perform this operation, ensuring that unauthorized users cannot remove
   * wishlists belonging to others. Once soft deleted, the wishlist is flagged
   * as such and becomes inaccessible to user APIs.
   *
   * The business logic ensures that all references to the wishlist are
   * maintained for audit, but the resource is removed from user-facing displays
   * and future CRUD access. Attempting to delete a wishlist that does not
   * exist, is already deleted, or is not owned by the requester produces a
   * relevant error.
   *
   * This operation is typically used in account cleanup, privacy flows, or
   * administrative maintenance. All actions are audited when performed by an
   * admin.
   *
   * @param connection
   * @param wishlistId Unique identifier (UUID) of the wishlist to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("wishlistId")
    wishlistId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminWishlistsWishlistId({
        admin,
        wishlistId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
