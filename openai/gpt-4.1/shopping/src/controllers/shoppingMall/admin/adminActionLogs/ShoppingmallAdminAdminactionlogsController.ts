import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminAdminActionLogs } from "../../../../providers/postShoppingMallAdminAdminActionLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminAdminActionLogs } from "../../../../providers/patchShoppingMallAdminAdminActionLogs";
import { getShoppingMallAdminAdminActionLogsAdminActionLogId } from "../../../../providers/getShoppingMallAdminAdminActionLogsAdminActionLogId";
import { putShoppingMallAdminAdminActionLogsAdminActionLogId } from "../../../../providers/putShoppingMallAdminAdminActionLogsAdminActionLogId";
import { deleteShoppingMallAdminAdminActionLogsAdminActionLogId } from "../../../../providers/deleteShoppingMallAdminAdminActionLogsAdminActionLogId";

import { IShoppingMallAdminActionLog } from "../../../../api/structures/IShoppingMallAdminActionLog";
import { IPageIShoppingMallAdminActionLog } from "../../../../api/structures/IPageIShoppingMallAdminActionLog";

@Controller("/shoppingMall/admin/adminActionLogs")
export class ShoppingmallAdminAdminactionlogsController {
  /**
   * Create a new administrative action log entry
   * (shopping_mall_admin_action_logs table).
   *
   * This API endpoint allows an authenticated admin to create a new action log
   * describing a significant administrative event, such as approvals, bans,
   * suspensions, overrides, or edits, which impact platform data or user
   * states. Upon submission, essential details such as the acting admin,
   * affected entities (using corresponding IDs), the type and reason for the
   * action, as well as the affected domain, are recorded. Optionally,
   * structured details can be attached in JSON format for trace analysis.
   *
   * The operation ensures that all actions are auditable for future
   * investigations or compliance reviews required by regulatory policies. Only
   * users with the 'admin' role can invoke this endpoint. It directly
   * references the shopping_mall_admin_action_logs table, contributing to the
   * system's immutable administrative action trail.
   *
   * If required fields are missing or IDs do not correspond to existing
   * entities, the endpoint returns a validation error. All successful logs are
   * timestamped at creation.
   *
   * @param connection
   * @param body Information about the admin action to log, including acting
   *   admin, affected entity, action type/reason, and any context details.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAdminActionLog.ICreate,
  ): Promise<IShoppingMallAdminActionLog> {
    try {
      return await postShoppingMallAdminAdminActionLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve and search the list of administrative action logs from
   * shopping_mall_admin_action_logs table.
   *
   * This endpoint allows an administrator to search through the history of
   * administrative actions recorded in the shopping_mall_admin_action_logs
   * schema. Each log entry documents an action taken by a platform admin
   * (approval, ban, update, deletion, override, etc.) and contains references
   * to affected users, products, orders, or reviews, the domain context, the
   * reason for the action, a timestamp, and detailed structured context as JSON
   * if available.
   *
   * Security is paramount: only admin users should be granted access, as these
   * logs may contain sensitive operational or user data, including reasons for
   * disciplinary actions or platform changes. All access to this endpoint
   * itself should be recorded for compliance and monitoring purposes. Data
   * returned should mask or filter PII if the requesting admin does not have
   * full privileges.
   *
   * The operation supports sophisticated filtering queries, such as actions by
   * a particular admin, within a date/time range, or on a given domain type
   * (product, user, order, etc.). Pagination parameters help navigate large log
   * datasets, and results are sorted by creation timestamp descending by
   * default. Failures should return clear, actionable messages, and backend
   * errors must not leak sensitive information.
   *
   * @param connection
   * @param body Query parameters for filtering, searching, and paginating admin
   *   action logs. Filters may include admin ID, action type, affected
   *   entity/domain, and timestamp range.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAdminActionLog.IRequest,
  ): Promise<IPageIShoppingMallAdminActionLog.ISummary> {
    try {
      return await patchShoppingMallAdminAdminActionLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific administrative action log
   * entry from shopping_mall_admin_action_logs.
   *
   * This endpoint enables the retrieval of fully detailed information about a
   * specific administrative action log, identified by the adminActionLogId path
   * parameter and referencing the shopping_mall_admin_action_logs schema
   * entity. The log entry contains structured information about which admin
   * performed the action, the type and domain of the action (e.g., approval,
   * ban, edit), which entity was affected, the reason for the action, a JSON
   * context dump, and an audit-compliant timestamp.
   *
   * Security is strict: Only authenticated admin users may access this
   * endpoint, and all access must be recorded. The returned record provides all
   * relevant metadata including acting admin information, linked
   * customer/seller/product/order/review (if any), the rationale for the
   * action, and full structured context for root cause analysis or compliance
   * investigation. If the log entry does not exist or the admin lacks
   * sufficient privileges, the API returns a clear, appropriate error.
   *
   * This operation is a critical building block for platform accountability,
   * incident post-mortems, and regulatory reviews. It should be integrated with
   * role-based visibility controls and full access audit trails.
   *
   * @param connection
   * @param adminActionLogId Unique identifier of the admin action log entry to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminActionLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminActionLogId")
    adminActionLogId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAdminActionLog> {
    try {
      return await getShoppingMallAdminAdminActionLogsAdminActionLogId({
        admin,
        adminActionLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing admin action log entry by ID
   * (shopping_mall_admin_action_logs table).
   *
   * This API allows an authenticated admin to update fields of an existing
   * admin action log, typically to correct previous input, append
   * clarifications, or supply additional audit context. The key fields that may
   * be modified include the action reason and the details_json property,
   * enabling admins to document post-event information relevant for future
   * traceability or compliance checks.
   *
   * This operation cross-verifies that the log entry with the given identifier
   * exists and has not been soft-deleted before making any modification. Only
   * users with the 'admin' role can perform updates, and any changes are
   * timestamped and reflected in the audit system. Attempts to modify a
   * non-existent or deleted log record will result in an appropriate error
   * response.
   *
   * Partial updates are allowed; unchanged fields may be omitted from the
   * payload. Administration of immutable fields (such as acting_admin or
   * affected_entity identifiers) is generally NOT permitted via this endpoint
   * to preserve historical accuracy.
   *
   * @param connection
   * @param adminActionLogId Unique identifier of the admin action log to update
   * @param body Fields to update in the admin action log record (typically
   *   action_reason or details_json); other fields may not be updatable.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminActionLogId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminActionLogId")
    adminActionLogId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAdminActionLog.IUpdate,
  ): Promise<IShoppingMallAdminActionLog> {
    try {
      return await putShoppingMallAdminAdminActionLogsAdminActionLogId({
        admin,
        adminActionLogId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific admin action log entry (soft delete if supported) from
   * shopping_mall_admin_action_logs table.
   *
   * This DELETE operation is focused on the admin action log management for the
   * shopping mall platform. Each record in shopping_mall_admin_action_logs
   * tracks actions performed by platform admins, including the acting admin,
   * affected entity, action type, reason, and timestamp.
   *
   * The operation is restricted to administrators to support compliance with
   * data privacy, legal retention, and operational policies. When an
   * administrator issues this deletion, the system will remove the admin action
   * log record identified by 'adminActionLogId' from the database entirely.
   * Given that the model includes a nullable 'deleted_at' field, this operation
   * should perform a soft deletion by updating the 'deleted_at' timestamp
   * unless permanent deletion is explicitly mandated by business rules or
   * configuration.
   *
   * Special care must be taken to ensure that accidental or unauthorized
   * deletions do not occur, and a full audit trail should be maintained for
   * deletion activities. Related references in audit, investigation, or
   * reporting flows should be updated or handled as per platform policy. Error
   * handling should clearly report if the ID does not exist or if deletion is
   * restricted by compliance holds.
   *
   * @param connection
   * @param adminActionLogId The unique identifier of the admin action log entry
   *   to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminActionLogId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminActionLogId")
    adminActionLogId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminAdminActionLogsAdminActionLogId({
        admin,
        adminActionLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
