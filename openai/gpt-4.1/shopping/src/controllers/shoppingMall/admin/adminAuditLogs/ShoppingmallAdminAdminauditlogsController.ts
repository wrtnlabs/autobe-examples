import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminAdminAuditLogs } from "../../../../providers/postShoppingMallAdminAdminAuditLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminAdminAuditLogs } from "../../../../providers/patchShoppingMallAdminAdminAuditLogs";
import { getShoppingMallAdminAdminAuditLogsAdminAuditLogId } from "../../../../providers/getShoppingMallAdminAdminAuditLogsAdminAuditLogId";
import { putShoppingMallAdminAdminAuditLogsAdminAuditLogId } from "../../../../providers/putShoppingMallAdminAdminAuditLogsAdminAuditLogId";
import { deleteShoppingMallAdminAdminAuditLogsAdminAuditLogId } from "../../../../providers/deleteShoppingMallAdminAdminAuditLogsAdminAuditLogId";

import { IShoppingMallAdminAuditLog } from "../../../../api/structures/IShoppingMallAdminAuditLog";
import { IPageIShoppingMallAdminAuditLog } from "../../../../api/structures/IPageIShoppingMallAdminAuditLog";
import { IShoppingMallAdminActionLog } from "../../../../api/structures/IShoppingMallAdminActionLog";

@Controller("/shoppingMall/admin/adminAuditLogs")
export class ShoppingmallAdminAdminauditlogsController {
  /**
   * Create a new admin audit log entry (shopping_mall_admin_audit_logs table).
   *
   * This endpoint allows the explicit insertion of a new admin audit log record
   * into the shopping_mall_admin_audit_logs table. The primary use case is for
   * platform internal systems, background jobs, or integrations that must
   * create their own audit records as part of business-critical or compliance
   * workflows. While admin audit logs are usually produced automatically by
   * sensitive operations (such as changing user permissions, deleting products,
   * or modifying configuration), the API permits direct creation when needed.
   *
   * All required fields, such as the acting admin's ID, action type, action
   * reason, affected entity IDs (customer, seller, product, order, or review as
   * applicable), domain, and timestamp, must be provided. Default values are
   * not assumed for critical fields. Only system-level admin or internal
   * service accounts should have access to this endpoint. Audit log creation
   * should be validated for completeness and correctness, ensuring referential
   * integrity to affected entities where relevant.
   *
   * Related API operations include retrieval of admin audit logs for governance
   * or review, and listing/filtering across audit log records for incident
   * response. If required fields are missing, malformed, or referential
   * integrity cannot be verified, the system returns appropriate validation
   * errors. Logical deletion is not supported for these records, per audit
   * trail governance rules.
   *
   * @param connection
   * @param body Information for creating a new admin audit log entry, including
   *   all mandatory attributes as specified by the
   *   shopping_mall_admin_audit_logs schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAdminAuditLog.ICreate,
  ): Promise<IShoppingMallAdminAuditLog> {
    try {
      return await postShoppingMallAdminAdminAuditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of admin audit logs from
   * shopping_mall_admin_audit_logs table.
   *
   * This PATCH operation enables authorized platform administrators to search,
   * filter, and retrieve historical audit log entries related to all critical
   * administrative actions, including logins, permission changes, settings
   * modifications, and system activities. Each log in
   * shopping_mall_admin_audit_logs contains the acting admin ID, audit event
   * type, domain, serialised event context, log level, and timestamp.
   *
   * The request body uses a standardized search DTO for flexible filtering,
   * supporting criteria such as admin identifier, event type, domain, log
   * level, time range, and keyword full text queries. Pagination controls
   * (page, pageSize) are also provided in the request body to support efficient
   * navigation through high-volume data. Sorting options should be accepted
   * (e.g., by created_at descending for most recent activity first).
   *
   * Important security controls are in place to ensure only authorized admins
   * can access this audit history. The operation may exclude sensitive event
   * context fields based on the requesting adminâ€™s permissions. Error cases
   * such as invalid search criteria, lack of results, or permission denials
   * should be clearly reported.
   *
   * The response returns a paginated list of matching audit log summary
   * records, with metadata about pagination, total results, and applied filters
   * for UI display and export.
   *
   * @param connection
   * @param body Criteria, filters, and pagination parameters for searching
   *   admin audit logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAdminAuditLog.IRequest,
  ): Promise<IPageIShoppingMallAdminAuditLog.ISummary> {
    try {
      return await patchShoppingMallAdminAdminAuditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single admin audit log by unique identifier
   * (shopping_mall_admin_audit_logs table).
   *
   * This endpoint retrieves the full set of data for a single admin audit log
   * entry from the shopping_mall_admin_audit_logs table in the e-commerce
   * platform's database. The admin audit log table tracks all critical
   * platform-wide administrative actions and events, including logins,
   * permission changes, system settings modifications, and explicit admin
   * actions that are relevant for compliance and legal review.
   *
   * Authorization is typically restricted to high-privilege admin users, as
   * audit logs may contain sensitive platform or user information. Requesters
   * must have system-level admin privileges or equivalent secure credentials.
   * The endpoint expects the adminAuditLogId, which should be a valid UUID, as
   * a path parameter. On success, the system returns all log details including
   * acting admin identity, event type, event context, associated domain, log
   * level, and timestamp data.
   *
   * This API is closely related to general auditing, admin action log review,
   * and security incident response workflows. Error scenarios include
   * invalid/missing UUID or unauthorized access attempts, for which suitable
   * error messages should be returned. No Personally Identifiable Information
   * (PII) is exposed except as required in the audit context, and only to
   * properly authorized requesters.
   *
   * @param connection
   * @param adminAuditLogId Unique identifier of the targeted admin audit log
   *   entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminAuditLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminAuditLogId")
    adminAuditLogId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAdminAuditLog> {
    try {
      return await getShoppingMallAdminAdminAuditLogsAdminAuditLogId({
        admin,
        adminAuditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific admin audit log entry in the admin action log table.
   *
   * This API endpoint enables updating of a specific admin audit log entry in
   * shopping mall admin log records. Administrators may modify the action type,
   * action reason, domain, or JSON context for the log. The operation is
   * restricted to administrators; all changes are tracked with timestamps for
   * history and compliance review.
   *
   * The admin audit log is used for platform-wide administrative action
   * recording such as approvals, rejections, bans, restoration actions, and
   * compliance logs. Updates to log entries are permitted to correct or
   * annotate previous actions, but all original data is maintained for audit
   * trail purposes.
   *
   * Error cases include missing log entry for the specified adminAuditLogId or
   * attempts to update with invalid data (such as violating unique constraints
   * or schema validations). Appropriate error messages are returned on
   * validation failure or unauthorized access attempts.
   *
   * @param connection
   * @param adminAuditLogId The unique identifier of the admin audit log entry
   *   to update.
   * @param body The information to update on the admin audit log entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminAuditLogId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminAuditLogId")
    adminAuditLogId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAdminActionLog.IUpdate,
  ): Promise<IShoppingMallAdminActionLog> {
    try {
      return await putShoppingMallAdminAdminAuditLogsAdminAuditLogId({
        admin,
        adminAuditLogId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a specific admin audit log entry from the system.
   *
   * This API endpoint irreversibly deletes an admin audit log entry as
   * identified by its adminAuditLogId field. Only administrators with adequate
   * permissions can access this operation; the action removes the record
   * directly from the shopping_mall_admin_action_logs table.
   *
   * Once executed, this operation permanently erases the log entry and all
   * associated data. The deletion is immediate and cannot be undone; as the
   * admin audit log table does not retain a soft deletion marker for erased
   * entries, the record will no longer appear in audit trails or compliance
   * reports.
   *
   * Permission to perform deletion is limited to platform administrators to
   * ensure both operational security and data retention compliance. Normal
   * error handling applies for attempts to remove entries that do not exist or
   * when the user lacks required authorization.
   *
   * @param connection
   * @param adminAuditLogId The unique identifier of the admin audit log entry
   *   to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminAuditLogId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminAuditLogId")
    adminAuditLogId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminAdminAuditLogsAdminAuditLogId({
        admin,
        adminAuditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
