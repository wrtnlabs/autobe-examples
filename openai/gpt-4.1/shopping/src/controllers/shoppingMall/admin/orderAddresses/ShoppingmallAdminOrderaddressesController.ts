import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminOrderAddresses } from "../../../../providers/patchShoppingMallAdminOrderAddresses";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminOrderAddressesOrderAddressId } from "../../../../providers/getShoppingMallAdminOrderAddressesOrderAddressId";
import { putShoppingMallAdminOrderAddressesOrderAddressId } from "../../../../providers/putShoppingMallAdminOrderAddressesOrderAddressId";
import { deleteShoppingMallAdminOrderAddressesOrderAddressId } from "../../../../providers/deleteShoppingMallAdminOrderAddressesOrderAddressId";

import { IPageIShoppingMallOrderAddress } from "../../../../api/structures/IPageIShoppingMallOrderAddress";
import { IShoppingMallOrderAddress } from "../../../../api/structures/IShoppingMallOrderAddress";

@Controller("/shoppingMall/admin/orderAddresses")
export class ShoppingmallAdminOrderaddressesController {
  /**
   * Search and retrieve a list of immutable order addresses
   * (shopping_mall_order_addresses) with advanced filters and pagination.
   *
   * This endpoint provides advanced search and retrieval of order-associated
   * shipping/billing addresses from the shopping_mall_order_addresses table,
   * supporting audit, reporting, and customer service requirements. Order
   * addresses are recorded at the time of order placement and are immutable,
   * reflecting the exact snapshot the order used regardless of subsequent
   * address book edits by the customer.
   *
   * Permissions are enforced by role: customers may only retrieve order
   * addresses linked to their own orders; sellers see those for their fulfilled
   * orders; admins have full access for auditing and monitoring. The request
   * allows filtering by recipient_name, region, zip/postal code, country code,
   * address_type, and date range, and supports search for multilingual
   * addresses. Responses provide paginated results containing all address
   * fields except potentially sensitive fields where role restricts. The
   * endpoint is crucial for traceability in regulatory or customer service
   * cases, for UI features like order history detail, and for managing order
   * delivery discrepancies. The request structure follows the
   * IShoppingMallOrderAddress.IRequest pattern for consistency with complex
   * search and pagination across the API suite.
   *
   * Error handling includes clear feedback on permission violations, invalid
   * search criteria, and unexpected service issues. The response encapsulates a
   * role-appropriate list of address summaries optimized for audit trails and
   * operational review. Linked APIs for order and shipment details reference
   * these addresses in their respective resource models.
   *
   * @param connection
   * @param body Search/filter parameters and pagination controls for querying
   *   historical order addresses.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallOrderAddress.IRequest,
  ): Promise<IPageIShoppingMallOrderAddress.ISummary> {
    try {
      return await patchShoppingMallAdminOrderAddresses({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific historical order address
   * (shopping_mall_order_addresses).
   *
   * This API operation provides a detailed, read-only view of a single order
   * address snapshot by its ID. The order address table is not user-editable
   * and only contains historical information captured at the time of an order's
   * creation, ensuring audit integrity and accurate fulfillment tracking.
   *
   * Address data includes all fields required for postal, shipping, and
   * compliance workflows—recipient, phone, postal code, address fields (split
   * main/detail), region, country code, and the creation timestamp. Users
   * cannot modify or delete these records for data consistency and legal
   * compliance; only admins may access them depending on platform policy.
   *
   * The operation enforces access such that customers may only view their own
   * orders’ addresses, while admins have platform-wide access. If the specified
   * ID is not found or the user is unauthorized to view it, an appropriate
   * error is returned. This API does not expose linked order or customer
   * identifiers in the response for privacy reasons.
   *
   * This endpoint is most frequently used for user-facing order details
   * screens, audit logs, refunds, cancellations, and admin investigations.
   *
   * @param connection
   * @param orderAddressId Unique identifier (UUID) for the order address
   *   snapshot to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderAddressId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderAddressId")
    orderAddressId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderAddress> {
    try {
      return await getShoppingMallAdminOrderAddressesOrderAddressId({
        admin,
        orderAddressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing order address snapshot record in the
   * shopping_mall_order_addresses table by its unique identifier.
   *
   * This API allows updating an existing order address snapshot record in the
   * shopping_mall_order_addresses table. The purpose is to support the
   * correction or completion of shipping (or billing) information after the
   * original order has been recorded, particularly in cases of initial user
   * entry errors, compliance requirements, or rare valid customer requests
   * under administrative review.
   *
   * The endpoint supports updating fields including recipient name, contact
   * information, region, zip/postal code, main address, detailed address, and
   * country code. The platform's role-based permissions model restricts update
   * actions strictly to authorized administrators; regular users and sellers
   * cannot use this endpoint directly. Updates may be limited after order
   * progresses to shipment or fulfillment, with stricter policies enforced when
   * the address is attached to orders in advanced states.
   *
   * Internally, this operation validates existence of the target address,
   * verifies it is not soft-deleted, and logs all changes for legal/audit
   * purposes. Changes may affect only address fields; no direct modification of
   * order or fulfillment status is permitted here. Errors are returned if the
   * order address does not exist, is already deleted, or the update violates
   * business constraints (e.g., trying to change address for already shipped
   * order).
   *
   * The operation must be used in accordance with privacy, legal, and
   * compliance policies, and all changes are auditable. Related endpoints
   * include order retrieval and address list endpoints; changes made via this
   * operation are visible on subsequent order detail queries.
   *
   * @param connection
   * @param orderAddressId Unique identifier of the order address record to
   *   update.
   * @param body Data fields to update for the specified order address snapshot.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderAddressId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderAddressId")
    orderAddressId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderAddress.IUpdate,
  ): Promise<IShoppingMallOrderAddress> {
    try {
      return await putShoppingMallAdminOrderAddressesOrderAddressId({
        admin,
        orderAddressId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an order address snapshot record from
   * shopping_mall_order_addresses by its unique identifier.
   *
   * This API endpoint allows an administrator to permanently delete an order
   * address snapshot from the shopping_mall_order_addresses table by its unique
   * identifier. Addresses in this table represent immutable historical data for
   * orders, but deletion may be permitted for obvious system errors, compliance
   * correction, or exceptional legal requests. Deletions performed through this
   * operation are hard deletes (permanently removed), as the model does not
   * support soft deletion.
   *
   * Business logic strictly restricts who may use this endpoint; only users
   * with admin roles are permitted. Attempting deletion of an address linked to
   * an active, non-cancelled order may be prevented by business policy for
   * trace integrity, returning an actionable, specific error. Audit trails are
   * automatically generated for all deletions, including actor, reason, and
   * affected record id.
   *
   * If the target address does not exist, is already deleted, or is not
   * eligible for deletion under the order's current state, an error is
   * returned. Deleting an order address does not affect or remove the actual
   * order—the order remains in place, but address references will show as
   * deleted/removed in history timelines, per compliance and platform
   * requirements. Changes are reflected on subsequent order or address queries
   * as appropriate.
   *
   * @param connection
   * @param orderAddressId Unique identifier of the order address snapshot to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderAddressId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderAddressId")
    orderAddressId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrderAddressesOrderAddressId({
        admin,
        orderAddressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
