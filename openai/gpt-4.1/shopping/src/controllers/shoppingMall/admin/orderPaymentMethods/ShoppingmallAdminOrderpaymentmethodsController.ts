import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminOrderPaymentMethods } from "../../../../providers/postShoppingMallAdminOrderPaymentMethods";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminOrderPaymentMethods } from "../../../../providers/patchShoppingMallAdminOrderPaymentMethods";
import { getShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId } from "../../../../providers/getShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId";
import { putShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId } from "../../../../providers/putShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId";
import { deleteShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId } from "../../../../providers/deleteShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId";

import { IShoppingMallOrderPaymentMethod } from "../../../../api/structures/IShoppingMallOrderPaymentMethod";
import { IPageIShoppingMallOrderPaymentMethod } from "../../../../api/structures/IPageIShoppingMallOrderPaymentMethod";

@Controller("/shoppingMall/admin/orderPaymentMethods")
export class ShoppingmallAdminOrderpaymentmethodsController {
  /**
   * Create a new payment method snapshot for an order
   * (shopping_mall_order_payment_methods).
   *
   * This API operation creates a new snapshot of an order payment method for
   * recording and auditing transactional payments. Payment method snapshots are
   * required to be created for each order at checkout to store relevant data as
   * it was at the time of purchase.
   *
   * The snapshot includes the type of payment method (e.g., card,
   * bank_transfer, PayPal), method data required for reconciliation, and a
   * display name suitable for UI display or customer receipt. This operation
   * does not create or update actual third-party payment tokens; it simply
   * records a static snapshot in the database for compliance, auditing, and for
   * use in later order and payment history queries.
   *
   * This operation references the shopping_mall_order_payment_methods table,
   * ensuring all required fields (payment_method_type, method_data,
   * display_name) are provided and validated. Only administrators and internal
   * platform components are allowed to call this endpoint directly, as
   * customers and sellers typically interact with payment methods through
   * guided UI flows during checkout. Error handling includes validation of
   * required fields and compliance with method-specific data formats. This
   * operation may be paired with order/payment creation APIs for a complete
   * order processing flow.
   *
   * @param connection
   * @param body Information to capture a payment method snapshot for an order,
   *   including type, method data, and display name.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallOrderPaymentMethod.ICreate,
  ): Promise<IShoppingMallOrderPaymentMethod> {
    try {
      return await postShoppingMallAdminOrderPaymentMethods({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated and filterable index/search of order payment methods (audit
   * records) in the system, reflecting shopping_mall_order_payment_methods
   * table.
   *
   * This operation allows administrators or platform operators to retrieve a
   * filtered and paginated list of all order payment methods stored in the
   * e-commerce system. It operates on the shopping_mall_order_payment_methods
   * table, supporting queries by payment method type, masked card/bank name,
   * and creation date.
   *
   * This endpoint can be used for administrative, auditing, or customer service
   * use cases where reference to historical payment methods is necessary, such
   * as payment reconciliations or issue resolution. Sensitive payment
   * information is never exposed; rather, a safe display name and method
   * metadata is provided.
   *
   * Authorization checks should ensure only admin users (or authorized support
   * staff) have access.
   *
   * Pagination, sorting, and advanced filtering are available. Typical search
   * fields include payment_method_type (e.g., card, bank_transfer),
   * display_name, and timeframe. This operation does not allow exposure or
   * enumeration of credentials and is strictly for metadata review or
   * troubleshooting.
   *
   * Related endpoints include single payment method retrieval for detailed
   * inspection. Error conditions include invalid filter criteria, requesting a
   * page beyond result set, or insufficient permissions.
   *
   * @param connection
   * @param body Query parameters for filtering, sorting, and paginating the
   *   search of order payment methods.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallOrderPaymentMethod.IRequest,
  ): Promise<IPageIShoppingMallOrderPaymentMethod.ISummary> {
    try {
      return await patchShoppingMallAdminOrderPaymentMethods({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a specific order payment method snapshot by ID
   * (shopping_mall_order_payment_methods table).
   *
   * This operation returns comprehensive details for a single order payment
   * method record, uniquely identified by orderPaymentMethodId. It draws from
   * the shopping_mall_order_payment_methods Prisma model, which stores a
   * snapshot of the payment method (including payment_method_type,
   * display_name, method_data, and timestamps) for every created order.
   *
   * The endpoint is intended for admin or support staff, supporting granular
   * investigations for order issues, payment disputes, or customer service
   * needs where reference to historical method information is required. This
   * data is immutable post-order and represents the state at time of purchase,
   * ensuring audit and trace compliance.
   *
   * Only admin-level users are authorized to access this information as it
   * could be linked to sensitive business or user audit trails (though display
   * data is masked for privacy). Related endpoints include listing all payment
   * methods, and order-level payment investigation or dispute workflow APIs.
   *
   * Validation checks include confirming the orderPaymentMethodId exists and
   * belongs to a valid database record. Missing or unauthorized requests return
   * a 404 or 403 as appropriate.
   *
   * @param connection
   * @param orderPaymentMethodId Unique identifier (UUID) of the target order
   *   payment method record to be retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderPaymentMethodId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderPaymentMethodId")
    orderPaymentMethodId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderPaymentMethod> {
    try {
      return await getShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId({
        admin,
        orderPaymentMethodId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing order payment method snapshot
   * (shopping_mall_order_payment_methods).
   *
   * This API operation allows updating of a previously captured payment method
   * snapshot for a specific order. The update is referenced by the unique
   * orderPaymentMethodId path parameter, which corresponds to a record in
   * shopping_mall_order_payment_methods.
   *
   * The operation replaces (or amends) the type, data, or display-friendly
   * label for the payment method, which may be required if administrative
   * corrections are needed after order placement, or if UI reconciliation data
   * needs to be adjusted for audit or compliance.
   *
   * Security considerations ensure that only admin users or privileged internal
   * systems have access to this endpoint. The update strictly affects only the
   * snapshot recordâ€”no changes are made to actual payment tokens or live
   * third-party details. The response returns the complete, updated payment
   * method snapshot record for further use. Input errors (such as an invalid
   * ID, missing fields, or schema violations) are handled with clear,
   * actionable error messages. Related APIs include the creation and retrieval
   * of order payment method snapshots for audit and reconciliation flows.
   *
   * @param connection
   * @param orderPaymentMethodId Unique identifier of the payment method
   *   snapshot to update.
   * @param body Updated data for the order payment method snapshot, including
   *   method type, method data, and display name.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderPaymentMethodId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderPaymentMethodId")
    orderPaymentMethodId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderPaymentMethod.IUpdate,
  ): Promise<IShoppingMallOrderPaymentMethod> {
    try {
      return await putShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId({
        admin,
        orderPaymentMethodId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific order payment method snapshot by its ID
   * (shopping_mall_order_payment_methods table).
   *
   * Permanently remove a single order payment method snapshot record by
   * specifying its unique identifier. This table stores the historical payment
   * method data associated with an order at the time of order placement, so
   * erasing a record should only be done in exceptional circumstancesâ€”such as
   * regulatory compliance, error correction, or full order removal by platform
   * administration.
   *
   * Only system administrators with the highest privileges are permitted to
   * execute this operation. Before executing, the system must validate that the
   * order payment method is not referenced by any active orders or payment
   * records, as required by foreign key constraints to maintain referential
   * integrity.
   *
   * This is a hard delete operation: the target payment method record will be
   * entirely deleted from the shopping_mall_order_payment_methods table and
   * cannot be recovered. Careful event logging and audit trails must be
   * maintained to ensure compliance and transparency in all administrative data
   * deletion.
   *
   * Related APIs include order payment method retrieval, order viewing, and any
   * administrative audit logging endpoints. Any deletion errors, such as
   * constraint violations, should be reported with actionable error messages
   * and administrative notifications.
   *
   * @param connection
   * @param orderPaymentMethodId Unique identifier of the order payment method
   *   record to be permanently deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderPaymentMethodId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderPaymentMethodId")
    orderPaymentMethodId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrderPaymentMethodsOrderPaymentMethodId(
        {
          admin,
          orderPaymentMethodId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
