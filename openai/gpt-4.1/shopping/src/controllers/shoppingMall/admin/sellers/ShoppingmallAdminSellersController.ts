import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminSellers } from "../../../../providers/patchShoppingMallAdminSellers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminSellersSellerId } from "../../../../providers/getShoppingMallAdminSellersSellerId";
import { putShoppingMallAdminSellersSellerId } from "../../../../providers/putShoppingMallAdminSellersSellerId";
import { deleteShoppingMallAdminSellersSellerId } from "../../../../providers/deleteShoppingMallAdminSellersSellerId";

import { IPageIShoppingMallSeller } from "../../../../api/structures/IPageIShoppingMallSeller";
import { IShoppingMallSeller } from "../../../../api/structures/IShoppingMallSeller";

@Controller("/shoppingMall/admin/sellers")
export class ShoppingmallAdminSellersController {
  /**
   * Admin search and filter operation for registered sellers
   * (shopping_mall_sellers table) with advanced pagination and security
   * controls.
   *
   * Administrators and platform operators can request this endpoint to search,
   * retrieve, and manage the list of registered sellers. The operation provides
   * robust filtering and pagination features, enabling admins to quickly locate
   * sellers by their business name, contact details, registration time frame,
   * and onboarding/approval status.
   *
   * This endpoint helps admins to conduct compliance reviews, process KYC
   * verifications, or monitor pending sellers. It also supports batch
   * operations, analytics, and integration with other admin platform modules.
   * Returned data includes key attributes such as seller business and contact
   * details, approval status, registration info, and KYC documentation. Data
   * access and filtering adhere strictly to security guidelines, and only users
   * with roles such as admin can access detailed seller information.
   *
   * In error or empty-result cases, the operation will return a paginated
   * structure with zero results, and appropriate error codes are provided for
   * unauthorized or invalid filter requests. Related endpoints include detailed
   * seller lookups and updates for seller management.
   *
   * @param connection
   * @param body Criteria for filtering, searching, and paginating the seller
   *   list. Supports fields such as business name, approval status,
   *   registration date, and sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallSeller.IRequest,
  ): Promise<IPageIShoppingMallSeller.ISummary> {
    try {
      return await patchShoppingMallAdminSellers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get complete seller account details by sellerId from shopping_mall_sellers
   * table.
   *
   * Retrieve comprehensive seller account details by seller ID from the
   * shopping_mall_sellers table. This operation supports both authenticated
   * user and admin use-cases, providing business-critical data such as contact
   * information, business entity, KYC status, and account history.
   *
   * Path parameter validation ensures that sellerId is a well-formed UUID and
   * corresponds to an existing, active, or approved seller. Full details
   * including KYC information, audit fields, and business registration numbers
   * are returned only to admin users or the account owner; all other users see
   * only public, non-sensitive fields for seller display purposes.
   *
   * This endpoint supports audit compliance by including all relevant fields
   * for administrative review. Role-based access control ensures marketplace
   * transparency while protecting sensitive or private data. Error handling
   * includes not-found responses for invalid IDs or disabled/suspended sellers,
   * and 403 errors if a user attempts to access another seller's confidential
   * information without proper permissions.
   *
   * For related operations, see seller account update (PUT /sellers/{sellerId})
   * for account changes, and authenticated order/product queries for
   * cross-entity validation and seller-product relationships.
   *
   * @param connection
   * @param sellerId Unique identifier of the target seller (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSeller> {
    try {
      return await getShoppingMallAdminSellersSellerId({
        admin,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update seller account information for sellerId in shopping_mall_sellers
   * table.
   *
   * Update a seller account record in the shopping_mall_sellers table,
   * identified by sellerId. Supports both self-service seller profile
   * maintenance and privileged admin updates for account management, KYC, or
   * business registration corrections.
   *
   * The request body schema IShoppingMallSeller.IUpdate requires all updatable
   * seller fields as defined in the Prisma schema. Input validation enforces
   * business logic such as unique email and registration number, correct phone
   * and URI formats, and restricted updates for status fields depending on
   * role. On successful validation and authorization, the record is updated and
   * the updated seller profile is returned as response.
   *
   * Admin actions are fully auditedâ€”updates to approval_status, KYC, or
   * sensitive attributes generate audit logs with admin identity and reason for
   * accountability. Sellers may update their own basic contact info and KYC
   * submissions but cannot self-approve, suspend, or delete their own accounts.
   * Role-based error handling is in place with descriptive error responses for
   * unauthorized or invalid data changes. For related workflows, see seller
   * registration and admin dashboard moderation tools.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller to update (UUID)
   * @param body All updatable seller account fields as per
   *   IShoppingMallSeller.IUpdate schema
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSeller.IUpdate,
  ): Promise<IShoppingMallSeller> {
    try {
      return await putShoppingMallAdminSellersSellerId({
        admin,
        sellerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a seller account from the shopping_mall_sellers table,
   * along with all associated data, if eligible.
   *
   * This API endpoint irreversibly removes a seller account from the platform
   * by deleting the associated row in the shopping_mall_sellers table. Only
   * administrators are authorized to execute this action. If the seller is
   * responsible for any active, pending, or historical orders that are not in a
   * terminal state, the system will block the deletion and return an
   * explanatory error to the admin user initiating the request.
   *
   * The deletion is performed as a hard delete since the schema supports a soft
   * delete timestamp (deleted_at), but a DELETE operation here is interpreted
   * as an intent for permanent removal. Upon successful completion, the
   * operation will invalidate the seller's authentication and access rights,
   * deactivate their products (making them unavailable for purchase), and
   * update all audit and action logs to ensure full traceability and compliance
   * with platform audit policies. All child records such as products, inventory
   * owned by the seller, and address information will be cascaded or
   * re-associated as per foreign key rules.
   *
   * Event logging will capture the admin identity, deletion rationale, and all
   * affected entity IDs for compliance and investigation purposes. If attempted
   * on a seller with open obligations (for example, unresolved orders or active
   * SKUs with inventory), the system will refuse the operation with a clear,
   * actionable error, consistent with the requirements specification
   * referencing irreversible business actions and regulatory constraints.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminSellersSellerId({
        admin,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
