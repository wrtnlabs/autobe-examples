import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminSellersSellerIdAddresses } from "../../../../../providers/patchShoppingMallAdminSellersSellerIdAddresses";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminSellersSellerIdAddressesAddressId } from "../../../../../providers/getShoppingMallAdminSellersSellerIdAddressesAddressId";
import { putShoppingMallAdminSellersSellerIdAddressesAddressId } from "../../../../../providers/putShoppingMallAdminSellersSellerIdAddressesAddressId";

import { IPageIShoppingMallSellerAddress } from "../../../../../api/structures/IPageIShoppingMallSellerAddress";
import { IShoppingMallSellerAddress } from "../../../../../api/structures/IShoppingMallSellerAddress";

@Controller("/shoppingMall/admin/sellers/:sellerId/addresses")
export class ShoppingmallAdminSellersAddressesController {
  /**
   * Retrieve all addresses for a specific seller from
   * shopping_mall_seller_addresses, supporting filtering and pagination.
   *
   * This API endpoint returns a paginated list of all addresses registered by
   * the seller specified by sellerId. The result includes all fields defined in
   * the shopping_mall_seller_addresses table, such as recipient_name, phone,
   * region, postal_code, address lines, type (business/shipping/return), and
   * is_primary flag. Filtering, sorting, search, and pagination parameters may
   * be accepted via request body for large address books, though typical usage
   * would return a manageable number of address entries per seller.
   *
   * This operation can be accessed by the seller themselves, for use in the
   * seller dashboard, or by admins managing seller information for compliance
   * or operational support. The endpoint validates that the caller has the
   * necessary permissionsâ€”seller (must be their own addresses) or admin
   * (platform-wide view). Address details may be masked or redacted for other
   * roles as per platform privacy rules. The business logic supports real-time
   * reflection of updates, and changes to these addresses are propagated across
   * the shipping and order fulfillment modules as referenced in the
   * shopping_mall_orders entity.
   *
   * Security considerations include strict authorization matching sellerId to
   * authenticated identity (unless admin), granular control of address updates,
   * and audit logging for all accesses to ensure GDPR and business policy
   * compliance.
   *
   * @param connection
   * @param sellerId Unique identifier of the target seller whose addresses are
   *   retrieved.
   * @param body Filtering, sorting, and pagination parameters for seller
   *   address search. May be omitted to fetch all addresses without filters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSellerAddress.IRequest,
  ): Promise<IPageIShoppingMallSellerAddress> {
    try {
      return await patchShoppingMallAdminSellersSellerIdAddresses({
        admin,
        sellerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a seller's address detail by addressId from
   * shopping_mall_seller_addresses.
   *
   * Fetch detailed information for a seller's address, identified by sellerId
   * and addressId, from the shopping_mall_seller_addresses table. This address
   * may represent the seller's business, shipping, or return address, as
   * specified in the 'type' field of the schema.
   *
   * This operation enforces strict access control, so only the owner seller,
   * authorized admins, or system processes with elevated privileges may access
   * the address details. The endpoint supports retrieval for real-time
   * management of seller profiles or for use during order and logistics
   * workflows. Returned details include all address fields such as
   * recipient_name, phone, region, postal_code, address_line1 and 2,
   * is_primary, and timestamps for creation and update.
   *
   * If the seller or address does not exist, or if access is denied, the
   * operation responds with appropriate error statuses such as 404 (Not Found)
   * or 403 (Forbidden). This operation is commonly followed by address update,
   * delete, or assignment functionalities to maintain consistent seller data
   * integrity.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller who owns the address
   * @param addressId Unique identifier of the seller's address to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":addressId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedParam("addressId")
    addressId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSellerAddress> {
    try {
      return await getShoppingMallAdminSellersSellerIdAddressesAddressId({
        admin,
        sellerId,
        addressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a seller's address data for a given addressId in
   * shopping_mall_seller_addresses.
   *
   * Update an existing seller's address, identified by sellerId and addressId.
   * Updates are only allowed to fields as per the
   * shopping_mall_seller_addresses Prisma model, which supports recipient_name,
   * phone, region, postal_code, address_line1, address_line2, type, and primary
   * status. Input validation enforces required fields and proper formatting of
   * addresses (including region and postal_code).
   *
   * Security is enforced such that updates are restricted to the seller who
   * owns the address or an admin with elevated privileges. Setting an address
   * to primary must not violate the unique constraint of only one primary
   * address per seller/type, and business logic must handle this atomically.
   * Attempts to update a non-existent address or without proper authorization
   * result in appropriate errors (e.g., 404 or 403).
   *
   * This operation is typically used in seller profile management or during
   * admin-corrective actions for compliance and logistics updates. It is
   * recommended to retrieve the latest address state before attempting an
   * update to prevent lost updates due to concurrent changes or outdated client
   * data.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller who owns the address
   * @param addressId Unique identifier of the seller's address to update
   * @param body Data for updating a seller's address. Must follow
   *   IShoppingMallSellerAddress.IUpdate DTO schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":addressId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedParam("addressId")
    addressId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSellerAddress.IUpdate,
  ): Promise<IShoppingMallSellerAddress> {
    try {
      return await putShoppingMallAdminSellersSellerIdAddressesAddressId({
        admin,
        sellerId,
        addressId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
