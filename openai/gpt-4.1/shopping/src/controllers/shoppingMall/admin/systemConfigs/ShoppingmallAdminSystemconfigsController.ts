import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminSystemConfigs } from "../../../../providers/postShoppingMallAdminSystemConfigs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminSystemConfigs } from "../../../../providers/patchShoppingMallAdminSystemConfigs";
import { getShoppingMallAdminSystemConfigsSystemConfigId } from "../../../../providers/getShoppingMallAdminSystemConfigsSystemConfigId";
import { putShoppingMallAdminSystemConfigsSystemConfigId } from "../../../../providers/putShoppingMallAdminSystemConfigsSystemConfigId";
import { deleteShoppingMallAdminSystemConfigsSystemConfigId } from "../../../../providers/deleteShoppingMallAdminSystemConfigsSystemConfigId";

import { IShoppingMallSystemConfig } from "../../../../api/structures/IShoppingMallSystemConfig";
import { IPageIShoppingMallSystemConfig } from "../../../../api/structures/IPageIShoppingMallSystemConfig";

@Controller("/shoppingMall/admin/systemConfigs")
export class ShoppingmallAdminSystemconfigsController {
  /**
   * Create a new system configuration entry in shopping_mall_system_configs.
   *
   * Create a new system configuration setting in the
   * shopping_mall_system_configs table. This operation is available exclusively
   * to platform administrators for defining runtime flags, feature switches,
   * maximum limits, external service credentials, or other advanced platform
   * settings.
   *
   * The configuration requires a unique combination of config_key and
   * config_scope, identification of the intended value_type (string, int,
   * boolean, double, or json), and the typing of one of the value fields
   * accordingly. If a value is specified in an incompatible field (e.g., string
   * value for int type), validation errors will be returned.
   *
   * Security is enforced for admin access only. The service checks for
   * duplicate config keys within the same scope, rejecting if non-unique. Audit
   * fields record time and identity of creation for compliance. The endpoint's
   * response returns the created configuration entry, including all metadata
   * and value fields.
   *
   * This operation implements complex business logic related to platform-wide
   * runtime configurability, supports admin dashboard use cases, and ensures
   * traceability through auditing.
   *
   * @param connection
   * @param body The configuration data required for creation, including key,
   *   scope, value type, and the appropriate typed value field.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallSystemConfig.ICreate,
  ): Promise<IShoppingMallSystemConfig> {
    try {
      return await postShoppingMallAdminSystemConfigs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and filter system configuration settings in the
   * 'shopping_mall_system_configs' table (admin only).
   *
   * This endpoint retrieves a paginated and filterable list of system
   * configuration settings from the 'shopping_mall_system_configs' table,
   * supporting admin maintenance, diagnostics, and feature management. Admins
   * can filter results by config key, configuration scope (e.g., 'global',
   * 'payment', 'product'), value type, or specific value fields, ensuring rapid
   * access to targeted settings during routine platform operations or incident
   * response.
   *
   * Search requests support partial match by key, scope, and value, and
   * advanced queries using structured search DTOs. Pagination and sorting are
   * fully supported, with configurable page size and ordering. Access is
   * strictly limited to admins, and all access to configuration data is logged
   * for audit compliance.
   *
   * This operation is typically used together with create, update, and
   * detail/retrieval endpoints for system configuration, and forms the backbone
   * of platform feature toggling, runtime operational adjustments, and
   * infrastructure credentials management.
   *
   * @param connection
   * @param body Structured search/filter parameters and pagination/sorting
   *   instructions for admin config retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallSystemConfig.IRequest,
  ): Promise<IPageIShoppingMallSystemConfig> {
    try {
      return await patchShoppingMallAdminSystemConfigs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific system configuration entry by ID from
   * shopping_mall_system_configs.
   *
   * Fetch a single system configuration object by its unique ID from the
   * shopping_mall_system_configs table. This endpoint enables platform
   * administrators to inspect or audit details of a specific configuration,
   * such as feature toggles, rate limits, third-party credentials, or
   * operational switches.
   *
   * Security is enforced by restricting access to the admin role. The operation
   * returns all attributes of the configuration record, including value type,
   * scope, and typed values (string/int/boolean/double/json), as well as audit
   * timestamps such as creation and last update. Entries marked as soft-deleted
   * via deleted_at will not be returned in results.
   *
   * Parameters must specify the correct system configuration ID as a UUID. This
   * operation references the shopping_mall_system_configs Prisma model and is
   * related to configuration dashboard and system diagnostics flows. Error
   * handling includes not-found for non-existent or deleted records, and
   * forbidden for non-admin users.
   *
   * @param connection
   * @param systemConfigId The unique identifier (UUID) of the target system
   *   configuration entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":systemConfigId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("systemConfigId")
    systemConfigId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSystemConfig> {
    try {
      return await getShoppingMallAdminSystemConfigsSystemConfigId({
        admin,
        systemConfigId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a platform system configuration entry by its unique systemConfigId.
   *
   * Update a system configuration entry in the shopping_mall_system_configs
   * table. The operation allows an administrator to modify any attributes of a
   * system config, such as changing feature flags, limit values, or JSON
   * structures controlling platform behavior.
   *
   * Security requirements strictly limit access to admin users. The operation
   * checks that the specified systemConfigId exists; if not, it returns an
   * appropriate error. Upon a valid update request, the value type must be
   * consistent with the selected key's expected type (e.g., integer value when
   * value_type is "int").
   *
   * All updates trigger audit logging of the admin actor, old and new values,
   * and the update timestamp. System-wide cache invalidation or runtime refresh
   * may also occur following core config updates. Editable fields include all
   * value columns (string, int, double, boolean, json) and meta attributes.
   * Operation is aligned with the business imperative of feature flexibility
   * and runtime control from the admin dashboard.
   *
   * @param connection
   * @param systemConfigId Unique identifier of the system configuration to
   *   update.
   * @param body New configuration values to update for the specified
   *   systemConfigId.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":systemConfigId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("systemConfigId")
    systemConfigId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSystemConfig.IUpdate,
  ): Promise<IShoppingMallSystemConfig> {
    try {
      return await putShoppingMallAdminSystemConfigsSystemConfigId({
        admin,
        systemConfigId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a platform system configuration entry by its unique systemConfigId.
   *
   * Delete a system configuration entry by its unique identifier systemConfigId
   * from the shopping_mall_system_configs table. Only platform admin users have
   * permission to perform this operation due to the potential system-wide
   * impact of removing feature toggles or critical settings.
   *
   * The operation checks that the systemConfigId exists and is not a protected
   * configuration (e.g., essential bootstrapping settings are protected against
   * deletion by business logic). If deletion is permitted, the configuration is
   * removed from the database and will not be referenced by any system process
   * or client read. Actions are logged, and system contexts referencing the
   * setting will detect removal and react accordingly (reload, fallback, or
   * error as defined by business rules).
   *
   * This operation is considered a hard delete: the record is completely
   * removed from the table and cannot be recovered except by external backup or
   * administrator intervention. All deletions are audit-trailed, including the
   * acting admin and timestamp.
   *
   * @param connection
   * @param systemConfigId Unique identifier of the system configuration to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":systemConfigId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("systemConfigId")
    systemConfigId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminSystemConfigsSystemConfigId({
        admin,
        systemConfigId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
