import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallAdminNotificationJobsNotificationJobId } from "../../../../providers/getShoppingMallAdminNotificationJobsNotificationJobId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminNotificationJobsNotificationJobId } from "../../../../providers/putShoppingMallAdminNotificationJobsNotificationJobId";
import { deleteShoppingMallAdminNotificationJobsNotificationJobId } from "../../../../providers/deleteShoppingMallAdminNotificationJobsNotificationJobId";
import { postShoppingMallAdminNotificationJobs } from "../../../../providers/postShoppingMallAdminNotificationJobs";

import { IShoppingMallNotificationJob } from "../../../../api/structures/IShoppingMallNotificationJob";

@Controller("/shoppingMall/admin/notificationJobs")
export class ShoppingmallAdminNotificationjobsController {
  /**
   * Get detailed information for a scheduled or executed notification job by
   * job ID (shopping_mall_notification_jobs).
   *
   * Retrieve and display full details of a single notification job by its
   * unique identifier. The response includes all configuration parameters,
   * notification type (email, push, etc.), job status, all targeting
   * information, configured templates, result status for each recipient or
   * group, error logs, and related audit data relevant to platform
   * administrators. This enables the admin to audit notification effectiveness,
   * trace communication deliveries, and review any failures or partial
   * successes.
   *
   * Security: Only users with the 'admin' role are permitted to access this
   * endpoint. Access is strictly logged and sensitive details such as recipient
   * lists are provided only to authenticated admins.
   *
   * The operation integrates directly with the shopping_mall_notification_jobs
   * table, referencing fields such as job_type, job_status, target_json,
   * config_json, and result_json. The endpoint must enforce strict access
   * controls to prevent unauthorized data leaks. If the specified notification
   * job does not exist or has been deleted, an appropriate error and record of
   * access attempt must be logged in admin action log.
   *
   * Related operations include listing/searching past notification jobs and
   * creating new jobs, which admins can use to analyze past campaigns or to
   * rerun failed communication tasks.
   *
   * @param connection
   * @param notificationJobId Unique identifier (UUID) of the notification job
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationJobId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("notificationJobId")
    notificationJobId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallNotificationJob> {
    try {
      return await getShoppingMallAdminNotificationJobsNotificationJobId({
        admin,
        notificationJobId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a scheduled notification job (shopping_mall_notification_jobs table)
   * by ID as admin.
   *
   * Update a platform notification job's configuration, targeting, status, or
   * results within the shopping_mall_notification_jobs table. Typical usages
   * include adjusting targeting for scheduled platforms notifications,
   * modifying delivery configuration, or updating status (e.g., retry, cancel,
   * mark as failed/success). Admin control is required—only platform
   * administrators can perform updates.
   *
   * Audit logging is enforced for all edits, supporting compliance and
   * investigations. Edits should only occur when job status allows (not already
   * deleted or in a terminal state like 'success' or 'failed'), and downstream
   * notification systems must be updated accordingly. Errors such as attempting
   * to update a finalized or deleted job return clear error statuses and
   * reasons. This corresponds to business requirements for platform-wide
   * notification management, status tracking, and reliability/recovery. Soft
   * delete is available (deleted_at).
   *
   * @param connection
   * @param notificationJobId Unique identifier of the notification job to
   *   update.
   * @param body Update object for notification job (configuration, status,
   *   targeting, or results).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":notificationJobId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("notificationJobId")
    notificationJobId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallNotificationJob.IUpdate,
  ): Promise<IShoppingMallNotificationJob> {
    try {
      return await putShoppingMallAdminNotificationJobsNotificationJobId({
        admin,
        notificationJobId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a notification job by ID (shopping_mall_notification_jobs
   * table, admin only).
   *
   * Soft-delete a notification job by ID, marking the deleted_at field on the
   * shopping_mall_notification_jobs row rather than removing the record. This
   * aligns with audit, compliance, and operational retention
   * requirements—deleted jobs are retained for investigation and reporting, but
   * are excluded from operational display and cannot be executed or updated
   * further.
   *
   * The operation is only available to platform administrators, and all actions
   * are logged as admin events for future auditability. If the target
   * notification job does not exist or is already deleted, the operation
   * returns a clear error message. This matches regulatory and business
   * requirements for notification/event/job management across the admin
   * dashboard and reporting tools.
   *
   * @param connection
   * @param notificationJobId Unique identifier of the notification job to
   *   delete (soft-delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":notificationJobId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("notificationJobId")
    notificationJobId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminNotificationJobsNotificationJobId({
        admin,
        notificationJobId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create and schedule a new notification job for admin-initiated user, group,
   * or segment communication (shopping_mall_notification_jobs).
   *
   * Create and schedule a new notification job for bulk or targeted
   * communication from admins to platform users or groups. The API accepts a
   * payload including all job details: type (email, push, SMS, in-app),
   * recipient targeting options (user lists, groups, or segments encoded in
   * JSON), configuration for content templates, scheduling or immediate
   * execution, and optional re-delivery/retry instructions. Upon creation, the
   * job status is set to pending or running depending on execution time, and
   * the job is visible in the admin dashboard for status, progress, and
   * delivery outcome monitoring.
   *
   * Security: Only authenticated admins are permitted to create notification
   * jobs, and the requested operation is logged for auditing. The system
   * validates all inputs including recipient targeting, template references,
   * and job type. Attempts to schedule duplicate or unsupported jobs are
   * rejected with clear errors.
   *
   * This endpoint directly corresponds to the shopping_mall_notification_jobs
   * entity; on job creation, all fields such as job_type, job_status,
   * target_json, config_json, and result_json are created or initialized.
   * Admins can inspect outcomes by using the single-job query or job list
   * endpoints.
   *
   * If scheduling options are invalid (e.g., in the past, malformed JSON),
   * appropriate validation errors are returned and creation is aborted. Job
   * creation also adds to the admin action log for traceability.
   *
   * @param connection
   * @param body Data required to create a new notification job including job
   *   type, recipient targeting, config options, template, schedule, and
   *   execution parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallNotificationJob.ICreate,
  ): Promise<IShoppingMallNotificationJob> {
    try {
      return await postShoppingMallAdminNotificationJobs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
