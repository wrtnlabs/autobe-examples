import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallCategories } from "../../../providers/patchShoppingMallCategories";
import { getShoppingMallCategoriesCategoryId } from "../../../providers/getShoppingMallCategoriesCategoryId";

import { IPageIShoppingMallCategory } from "../../../api/structures/IPageIShoppingMallCategory";
import { IShoppingMallCategory } from "../../../api/structures/IShoppingMallCategory";

@Controller("/shoppingMall/categories")
export class ShoppingmallCategoriesController {
  /**
   * Retrieve a filtered and paginated list of shopping mall categories from
   * shopping_mall_categories.
   *
   * This API operation returns a list of categories from the
   * shopping_mall_categories table with advanced filtering functionality. The
   * operation supports searching categories by partial name matches (either in
   * Korean or English), filtering by parent_id to fetch subcategories, and
   * filtering by is_active status. Pagination is supported so clients can
   * request categories by page number and size, enabling efficient navigation
   * even through large or multi-level category trees.
   *
   * Security considerations depend on platform policy: if category data is
   * public-facing (catalog, navigation), the endpoint may be unauthenticated;
   * if used for admin or moderation actions, access should be scoped to the
   * admin role. All results are based on the underlying Prisma schema,
   * including fields such as display_order for UI navigation and multilingual
   * descriptions for proper localization. Error cases such as invalid
   * pagination parameters, or attempts to access disabled categories can be
   * addressed with descriptive error messages.
   *
   * @param connection
   * @param body Criteria and pagination parameters for filtering and searching
   *   category listings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallCategory.IRequest,
  ): Promise<IPageIShoppingMallCategory.ISummary> {
    try {
      return await patchShoppingMallCategories({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific category by categoryId from
   * shopping_mall_categories.
   *
   * This API operation fetches the complete details of a single category using
   * its unique categoryId from the shopping_mall_categories table. It returns
   * all relevant properties for the category, including multilingual names and
   * descriptions, parent_id for hierarchical navigation, display_order,
   * is_active flag, and audit fields such as created_at, updated_at, and
   * deleted_at. This allows clients to render detail views, administrative
   * forms, or build parent-child tree data.
   *
   * Access control is informed by platform usage: for public navigation,
   * authentication may be optional; for administrative settings (e.g., updating
   * a category), additional permissions would be required. Validators ensure
   * that provided categoryId is a valid UUID and refers to an existing record.
   * If the specified category does not exist, the endpoint responds with a
   * clear error. Related APIs include list (index), category creation, and
   * update operations. Business logic aligns with requirements for multilingual
   * and hierarchical e-commerce category data.
   *
   * @param connection
   * @param categoryId Unique identifier (UUID) of the desired category to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCategory> {
    try {
      return await getShoppingMallCategoriesCategoryId({
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
