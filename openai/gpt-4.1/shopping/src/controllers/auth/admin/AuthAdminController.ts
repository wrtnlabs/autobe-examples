import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { IShoppingMallAdmin } from "../../../api/structures/IShoppingMallAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register a new admin account in the shopping_mall_admins table (admin
   * join).
   *
   * This operation allows a new system administrator to register an admin
   * account in the shoppingMall platform. The core purpose is to facilitate
   * initial onboarding for platform administrators by creating a secure and
   * unique admin record in the 'shopping_mall_admins' table.
   *
   * All required authentication fields—including 'email', 'password_hash', and
   * 'full_name'—must be provided and validated for uniqueness. The system
   * enforces email uniqueness at the database level, ensuring no duplicate
   * accounts. Upon registration, a status (such as 'pending') is set, and a
   * timestamp is created. Email verification and two-factor authentication are
   * configured separately.
   *
   * The implementation strictly uses the fields defined in the schema—email,
   * password_hash, full_name, status, two_factor_secret, with password_hash
   * being securely hashed (never plaintext). The response returns a new JWT for
   * the admin, following issuance standards for access and refresh tokens.
   *
   * This endpoint is accessed by unauthenticated users only (public), and does
   * not interact with any business entities, product records, or customer
   * accounts. Registration validation occurs at both API and database levels,
   * returning errors for constraint violations or invalid payloads.
   *
   * Related endpoints include admin login (authenticate and issue token with
   * credentials) and refresh (token renewal), but these are handled
   * independently and reference this admin record for credentials. All admin
   * registration attempts are logged for audit purposes.
   *
   * @param connection
   * @param body Admin registration information (email, password_hash,
   *   full_name, etc.)
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IShoppingMallAdmin.ICreate,
  ): Promise<IShoppingMallAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an admin using 'shopping_mall_admins' table credentials; issue
   * JWT tokens on success.
   *
   * This operation handles system administrator login for the shoppingMall
   * platform, providing core authentication by comparing submitted credentials
   * to fields in the 'shopping_mall_admins' table. It references only existing
   * schema fields: 'email', 'password_hash', and 'status' for verifying
   * identity and account state.
   *
   * Credentials are validated by comparing the submitted (hashed) password to
   * the stored 'password_hash' field, and the email must match a unique record.
   * If two-factor is enabled for this admin (presence of 'two_factor_secret'),
   * the system enforces code verification.
   *
   * Upon successful match and status verification, the system issues a JWT set
   * (access and refresh tokens) with all required role/permissions in the
   * payload. This endpoint is public and stateless; on error, standard
   * 401/403/409 codes are returned depending on reason—invalid credentials,
   * account locked, or conflict. Failed logins and suspicious attempts are
   * logged for security audit in the admin logs.
   *
   * The login operation never returns password data or partial credentials in
   * any response. After successful login, 'last_login_at' is updated for audit.
   * Related endpoints include admin registration (join) for account creation
   * and refresh for token renewal.
   *
   * @param connection
   * @param body Admin login credentials (email and password)
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IShoppingMallAdmin.ILogin,
  ): Promise<IShoppingMallAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh admin JWT session tokens using a stored valid refresh token.
   *
   * Handles admin token renewal for authenticated sessions in the shoppingMall
   * platform, aligning with JWT session best practices. This operation checks
   * the presence and validity of the admin's refresh token against stored
   * sessions in 'shopping_mall_user_sessions', following the schema's session,
   * expiry, and revocation fields.
   *
   * On valid, unexpired, and active session, it generates a new access and
   * refresh token for the admin, encoding necessary context (admin id, role,
   * permissions, expiry, etc.) in the JWT payload. Invalid, expired, or revoked
   * tokens lead to immediate rejection and security logging.
   *
   * Account status (active, disabled, or suspended) is enforced by referencing
   * the 'status' field in 'shopping_mall_admins', preventing token renewal for
   * non-active admins. Related operations include login (for initial
   * authentication), join (for admin account creation), and logout (to revoke
   * the refresh token/session).
   *
   * This endpoint requires a valid refresh token and returns only new JWT
   * tokens—never sensitive account details or password data. All refresh
   * actions are logged for admin session audit and monitoring compliance.
   *
   * @param connection
   * @param body Refresh token provided after admin login
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IShoppingMallAdmin.IRefresh,
  ): Promise<IShoppingMallAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
