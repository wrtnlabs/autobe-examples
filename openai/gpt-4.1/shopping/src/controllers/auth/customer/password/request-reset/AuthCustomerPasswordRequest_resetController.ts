import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCustomerPasswordRequestReset } from "../../../../../providers/postAuthCustomerPasswordRequestReset";

import { IShoppingMallCustomer } from "../../../../../api/structures/IShoppingMallCustomer";

@Controller("/auth/customer/password/request-reset")
export class AuthCustomerPasswordRequest_resetController {
  /**
   * Initiate password reset process for customer (shopping_mall_customers,
   * shopping_mall_password_resets).
   *
   * This endpoint initiates the password reset flow for customers who have
   * forgotten their password. The API accepts an email address, checks if it
   * matches a customer in shopping_mall_customers (unique, string), and if so,
   * creates a password reset record in shopping_mall_password_resets table,
   * including user_id, a random token, expires_at. For security and privacy,
   * the endpoint never reveals whether the email is registered. This aligns
   * with both requirements analysis and the Prisma schema.
   *
   * The workflow is completed via a separate endpoint that verifies a valid
   * token and allows password update. This operation is unauthenticated and
   * idempotent for input emails. Actual token delivery (email) is handled by
   * out-of-band infrastructure. Throttling and abuse risk are mitigated
   * externally.
   *
   * The underlying Prisma schemas are strictly verified. Related fields: email
   * (shopping_mall_customers), user_id/token/expires_at
   * (shopping_mall_password_resets). Related endpoints: resetPassword
   * (set/reset new password with valid token).
   *
   * Full compliance with best practices for account recovery, no information
   * leakage, and prevention of user enumeration is observed.
   *
   * @param connection
   * @param body Payload for initiating password reset (email address).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: IShoppingMallCustomer.IRequestPasswordReset,
  ): Promise<IShoppingMallCustomer.IPasswordResetRequestResult> {
    try {
      return await postAuthCustomerPasswordRequestReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
