import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCustomerPasswordReset } from "../../../../../providers/postAuthCustomerPasswordReset";

import { IShoppingMallCustomer } from "../../../../../api/structures/IShoppingMallCustomer";

@Controller("/auth/customer/password/reset")
export class AuthCustomerPasswordResetController {
  /**
   * Reset lost customer password with valid token
   * (shopping_mall_password_resets, shopping_mall_customers).
   *
   * This operation completes the password reset flow for customers who have a
   * valid reset token. The endpoint expects the new password and a reset token
   * as input, checking the token's validity, expiration (expires_at), and usage
   * status (used_at) in shopping_mall_password_resets. If valid, it updates the
   * password_hash in shopping_mall_customers (for the referenced user) and
   * marks the token as used, revoking all customer sessions.
   *
   * No sensitive information is returned about credentials; the presence or
   * absence of token/customer is not revealed in the response. Prisma schema
   * checks are enforced transactionally. The operation is public but secured by
   * cryptographically strong tokens. Output is a generic result schema
   * confirming the action. Password policy is enforced via input validation, in
   * line with platform requirements analysis.
   *
   * References: shopping_mall_password_resets (token, user_id, expires_at,
   * used_at), shopping_mall_customers (password_hash). Related endpoints:
   * requestPasswordReset for token issuance, login for subsequent access.
   *
   * @param connection
   * @param body Payload with reset token and new password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resetPassword(
    @TypedBody()
    body: IShoppingMallCustomer.IResetPassword,
  ): Promise<IShoppingMallCustomer.IPasswordResetResult> {
    try {
      return await postAuthCustomerPasswordReset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
