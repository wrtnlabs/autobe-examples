import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCustomerEmailVerify } from "../../../../../providers/postAuthCustomerEmailVerify";

import { IShoppingMallCustomer } from "../../../../../api/structures/IShoppingMallCustomer";

@Controller("/auth/customer/email/verify")
export class AuthCustomerEmailVerifyController {
  /**
   * Complete customer email verification process
   * (shopping_mall_email_verifications, shopping_mall_customers).
   *
   * This endpoint verifies a customer's email address using a unique,
   * time-limited verification token issued by
   * shopping_mall_email_verifications. It checks the token's existence and
   * expiry, updates the referenced customer's email_verified field
   * (shopping_mall_customers), and deletes the used verification record.
   *
   * If the token is invalid or expired, a generic error is returned with no
   * information about account existence. This API does not require
   * authentication and only returns a status indicating the outcome, for
   * security and privacy compliance.
   *
   * Prisma schema references:
   * shopping_mall_email_verifications.token/user_id/expires_at,
   * shopping_mall_customers.email_verified/ id. Related endpoint:
   * requestEmailVerification to (re)start the workflow.
   *
   * @param connection
   * @param body Token for verifying customer email address.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: IShoppingMallCustomer.IVerifyEmail,
  ): Promise<IShoppingMallCustomer.IEmailVerificationResult> {
    try {
      return await postAuthCustomerEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
