import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCustomerEmailRequestVerification } from "../../../../../providers/postAuthCustomerEmailRequestVerification";

import { IShoppingMallCustomer } from "../../../../../api/structures/IShoppingMallCustomer";

@Controller("/auth/customer/email/request-verification")
export class AuthCustomerEmailRequest_verificationController {
  /**
   * Trigger customer email verification (shopping_mall_customers,
   * shopping_mall_email_verifications).
   *
   * This endpoint sends a verification email to a customer who has registered
   * but not yet verified their email address. The underlying logic checks the
   * existence of a customer record in shopping_mall_customers (email_verified =
   * false) and, if true, creates a new shopping_mall_email_verifications record
   * (user_id, token, expires_at, email). No information about whether a
   * customer exists or is verified is revealed by this API response.
   *
   * The delivery of the actual verification email is handled externally by
   * platform infrastructure (e.g., email service provider). Throttling of
   * repeated requests is required but implemented outside of the business API
   * logic.
   *
   * Schema reference: shopping_mall_customers.email_verified (boolean),
   * shopping_mall_email_verifications.user_id/token/expires_at/email
   * (string/date).
   *
   * Related operation: verifyEmail, which confirms the validity of the token.
   *
   * @param connection
   * @param body Payload with email to start verification process.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestEmailVerification(
    @TypedBody()
    body: IShoppingMallCustomer.IRequestEmailVerification,
  ): Promise<IShoppingMallCustomer.IEmailVerificationRequestResult> {
    try {
      return await postAuthCustomerEmailRequestVerification({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
