import { tags } from "typia";

/**
 * Represents a single upvote or downvote event by a member on a specific
 * comment. Each record is unique per member and comment combination, enforcing
 * one vote per user per comment. Used for tracking, scoring, audit, and
 * anti-abuse moderation for the Reddit-like threaded commenting system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommentVote = {
  /**
   * Primary key for the comment vote record. Serves as the unique identifier
   * for audit, retrieval, update, and deletion operations. Must be UUID
   * formatted and is system-generated on creation.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID of the comment being voted on. References the primary key of the
   * associated comment in community_platform_comments. Links the vote record
   * to the target comment for enforcement of single-vote-per-user-per-comment
   * business rules.
   */
  community_platform_comment_id: string & tags.Format<"uuid">;

  /**
   * The UUID of the platform member (user) who cast this vote. References
   * community_platform_members.id. Used for identifying vote ownership and
   * enforcing that each user may only have one vote per comment.
   */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * Specifies the direction of the vote: +1 for upvote, -1 for downvote. This
   * property must adhere to the allowed enum and cannot be values other than
   * 1 or -1. Represents the core voting signal for scoring and controversy
   * calculations. Zero is not stored in this schema, only +1 or -1.
   */
  vote_value: 1 | -1;

  /**
   * Timestamp indicating when this vote was originally submitted by the
   * member. Used for chronological ordering and audit. Recorded automatically
   * on creation.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating when the vote was last updated or changed (e.g., if
   * changed from upvote to downvote). Allows audit tracking and history.
   * Recorded automatically on update.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp (nullable). When present, indicates the vote has
   * been revoked/deleted and is no longer included in scoring or active
   * calculations. A value of null means the vote is active. Nullability
   * enforces system compliance with soft-delete retention and audit
   * policies.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommentVote {
  /**
   * Request body for searching, filtering, and paginating votes associated
   * with a comment. Includes reference to the post and comment, and specifies
   * the intended vote action (upvote or downvote). Used by member actors to
   * register or update their vote on a comment.
   */
  export type IRequest = {
    /**
     * The unique identifier (UUID) of the post containing the target
     * comment. Used for scoping the comment voting operation to a specific
     * post context and for validation of comment-post relationship.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * The unique identifier (UUID) of the comment being voted on. This is
     * mandatory and is the target for the upvote or downvote action. Must
     * correspond to an active, not-deleted comment that belongs to the
     * specified post.
     */
    commentId: string & tags.Format<"uuid">;

    /**
     * Indicates the vote value. Must be either 1 (upvote) or -1 (downvote).
     * Zero (0) is reserved for revoking or nullifying a previous vote, and
     * is not used when creating a new vote. The value is validated and is
     * required for creating or changing a vote status on a comment.
     */
    vote_value: 1 | -1;
  };

  /**
   * DTO for submitting a new vote (upvote or downvote) on a comment. The
   * member is determined via authentication context and is not supplied in
   * the body.
   */
  export type ICreate = {
    /**
     * The value of the vote. This must be either '1' (for upvote) or '-1'
     * (for downvote).
     *
     * Business rules:
     *
     * - Allowed values: 1 (upvote), -1 (downvote)
     * - Users may NOT vote on their own comments.
     * - Members may update their existing vote on this comment, if one
     *   exists.
     * - Vote must be performed by an authenticated member in good standing
     *   (not banned).
     * - All votes are subject to rate limiting and may be subject to
     *   community-specific rules.
     * - Attempts to vote beyond allowed limits or on non-existent comments
     *   will be rejected.
     */
    vote_value: number & tags.Type<"int32">;

    /**
     * The unique identifier of the comment being voted on.
     *
     * - Must be a valid UUID referencing an existing row in
     *   community_platform_comments.
     * - The comment must not be deleted (deleted_at must be null).
     * - The comment must be visible and accessible to the voting member per
     *   business rules.
     * - Only one vote is permitted per member per comment, enforced at the
     *   business logic layer.
     */
    comment_id: string & tags.Format<"uuid">;
  };

  /**
   * DTO for updating (changing) an existing vote record for a comment. Only
   * the member who cast the vote may update it. Used to toggle
   * upvote/downvote or revoke the vote.
   */
  export type IUpdate = {
    /**
     * The new value of the vote to record for this member/comment pairing.
     *
     * Allowed values:
     *
     * - 1: Represents an upvote
     * - -1: Represents a downvote
     * - 0 (optional, not always supported): Represents a vote revocation
     *
     * Business rules:
     *
     * - If omitted, the operation may be interpreted as a vote removal (i.e.,
     *   revocation).
     * - Only the member who originally cast the vote can update their own
     *   vote.
     * - Members may change their vote from upvote to downvote or vice versa,
     *   or remove the vote entirely.
     * - Community and platform rate limits are enforced for updates.
     * - Vote value MUST be in the allowed set; any other value is rejected.
     * - Attempts to update votes for deleted/non-existent comments will be
     *   rejected.
     */
    vote_value: number & tags.Type<"int32">;
  };

  /**
   * Summary DTO for voting action on a comment. Used for paginated list
   * display in IPageICommunityPlatformCommentVote.ISummary.
   *
   * Fields included per summary conventions and from the
   * community_platform_comment_votes table. No sensitive fields (such as
   * internal system traces, revocation status, or user IP) are exposed in the
   * summary variant.
   */
  export type ISummary = {
    /** Unique identifier for the comment vote. */
    id: string & tags.Format<"uuid">;

    /** Unique identifier for the voted comment. */
    community_platform_comment_id: string & tags.Format<"uuid">;

    /** Member who voted on the comment. */
    community_platform_member_id: string & tags.Format<"uuid">;

    /** Vote value (1 for upvote, -1 for downvote). */
    vote_value: number & tags.Type<"int32">;

    /** Timestamp when the comment vote was added. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of the last status update for this vote. */
    updated_at: string & tags.Format<"date-time">;
  };
}
