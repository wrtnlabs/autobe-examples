import { tags } from "typia";

/**
 * Represents the cached controversial score for a single post or comment. Used
 * to efficiently support 'controversial' sort orders in the Reddit-like
 * community platform, and to identify highly-debated, high-engagement content.
 *
 * Aligns with the community_platform_controversial_scores Prisma model.
 * Contains references to either a post or comment, the calculated controversial
 * score, and the timestamp when the score was last updated. Used for analytics,
 * sorting, and moderation interfaces.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformControversialScore = {
  /**
   * Unique identifier for the controversial score record. Corresponds to the
   * primary key of the community_platform_controversial_scores table in
   * Prisma. Used for precise reference and update tracking.
   *
   * This value is globally unique within the system and must be a string
   * formatted as a UUID.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Primary key of the associated post (if this controversial score refers to
   * a post). This is nullable; when not present, the controversial score may
   * refer to a comment.
   *
   * Should be set to the relevant post ID from the community_platform_posts
   * table, or null if this record is for a comment.
   */
  community_platform_post_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Primary key of the associated comment (if applicable). This is a nullable
   * field and is used only if the controversial score is for a comment rather
   * than a post.
   *
   * Refer to community_platform_comments.id or leave null for post-related
   * scores.
   */
  community_platform_comment_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Precomputed controversial score for real-time sorting and ranking
   * purposes. This is typically a floating-point number calculated by backend
   * algorithms based on patterns of upvotes and downvotes, and other
   * engagement metrics.
   *
   * Business logic determines the score's calculation. Higher or specific
   * value ranges indicate greater controversy and engagement.
   */
  controversial_score: number;

  /**
   * Timestamp of the last update to this controversial score, in ISO 8601
   * date-time format. Indicates when the score was most recently
   * recalculated. Useful for cache freshness and UI update triggers.
   */
  score_updated_at: string & tags.Format<"date-time">;
};
