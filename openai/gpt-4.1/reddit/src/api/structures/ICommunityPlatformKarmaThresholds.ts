import { tags } from "typia";

/**
 * Karma threshold configuration for platform or community-based gating. This
 * entity defines a minimum required karma for a particular action (e.g.,
 * posting, voting), enables enforcement of feature access, and may restrict or
 * unlock features for users globally or within a specific community scope.
 * Contains full details for audit and configuration UIs. Directly corresponds
 * to the community_platform_karma_thresholds table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformKarmaThresholds = {
  /**
   * Primary Key. Unique identifier for this karma threshold entry in the
   * system. Used for reference and update operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Nullable. References the community_platform_communities.id if the
   * threshold is scoped to a specific community, or null if the threshold
   * applies platform-wide.
   */
  community_platform_community_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Business type/key for the threshold (e.g. 'post_creation',
   * 'comment_voting', 'subscription_unlock'). Determines which feature this
   * threshold governs. This property matches values in feature gating logic.
   */
  threshold_type: string;

  /**
   * Required karma value that must be attained to unlock the gated feature or
   * action represented by threshold_type. Negative values may be supported
   * for penalty logic. Must be an integer.
   */
  threshold_value: number & tags.Type<"int32">;

  /**
   * Optional human-readable reason or system code explaining the gating
   * logic. Used in UIs or business logic to display why a feature is locked
   * for the user below this threshold.
   */
  feature_lock_reason?: string | null | undefined;

  /**
   * Row creation timestamp, in ISO 8601 format with timezone. Used for audit,
   * ordering, and analytics.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp, marking when this threshold was
   * removed/deactivated if not currently active. Null when actively
   * enforced.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformKarmaThresholds {
  /**
   * Schema for creating a new karma threshold configuration for the platform
   * or a community, as defined in the community_platform_karma_thresholds
   * Prisma table. Used by admins to gate features based on karma. Optional
   * community_platform_community_id specifies if the threshold is global or
   * community-specific.
   */
  export type ICreate = {
    /**
     * Nullable. Community to which threshold applies. References
     * community_platform_communities.id. If null, threshold applies
     * platform-wide. Used for community-specific gating.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Business type/key for the threshold (e.g. 'post_creation',
     * 'comment_voting', 'subscription_unlock'). Uniquely identifies the
     * feature or business process governed by this threshold.
     */
    threshold_type: string;

    /**
     * Required karma value for this threshold. Must be an integer, may be
     * negative or positive depending on business rules. Used to
     * restrict/enable feature access.
     */
    threshold_value: number & tags.Type<"int32">;

    /**
     * Reason for gating associated with this threshold (human-readable,
     * optional). E.g., explanation to show users about karma block.
     * Optional field.
     */
    feature_lock_reason?: string | null | undefined;
  };
}
