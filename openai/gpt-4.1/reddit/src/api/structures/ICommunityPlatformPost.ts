import { tags } from "typia";

/**
 * Full schema representing a post entity from community_platform_posts.
 *
 * Includes all direct table columns, excluding seldom-exposed sensitive
 * content, with field-matching names for implementation. 'deleted_at' is
 * nullable; only present if soft-deleted.
 *
 * For responses, includes all non-sensitive fields per security guidelines. For
 * creation, certain fields (id, created_at, updated_at) are system-managed and
 * may not be set by client. For search/list summary, most fields may be
 * required.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPost = {
  /** Unique identifier for the post (Primary Key). */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the creating member; references
   * community_platform_members.id.
   */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the community this post belongs to. References
   * community_platform_communities.id.
   */
  community_platform_community_id: string & tags.Format<"uuid">;

  /** Post title. Maximum 300 characters. Used in search and display. */
  title: string;

  /**
   * Optional text body for text posts. Up to 40,000 characters. Null for
   * link/image posts.
   */
  content_body?: string | undefined;

  /**
   * Indicates the type of post: 'text', 'link', or 'image'. Use to select
   * proper rendering and content validation.
   */
  content_type: string;

  /**
   * Moderation or publication status. E.g. 'published', 'pending', 'removed',
   * 'mod_queued'. Business rules apply.
   */
  status: string;

  /** ISO 8601 timestamp of when the post was created. */
  created_at: string & tags.Format<"date-time">;

  /** ISO 8601 timestamp representing the last time the post was updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp; null if active, else ISO8601 when deleted. Used
   * for archival/retention flows.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace ICommunityPlatformPost {
  /**
   * Request DTO for advanced search, pagination, and filter of posts using
   * business rules from requirement analysis. Limits access to client-allowed
   * filters and supports only existing fields. No direct user_id filters.
   * Client may use search, filters, and sorting to specify post query use
   * cases for feeds and exploration experiences.
   */
  export type IRequest = {
    /** Page number for pagination (minimum 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page (max 100, default 20). */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * Sorting logic for result: 'hot', 'new', 'top', 'controversial', or
     * fall back to 'created_at'.
     */
    sort_by?:
      | "hot"
      | "new"
      | "top"
      | "controversial"
      | "created_at"
      | undefined;

    /** Full-text search (on post title, body for text, URL for links). */
    search?: string | undefined;

    /** Filter to a single community's posts. */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /** Optional content type to filter results. */
    content_type?: "text" | "link" | "image" | undefined;

    /**
     * Optional status field to filter: published, pending, removed,
     * mod_queued, etc.
     */
    status?: string | undefined;
  };

  /**
   * Create DTO for a new community post, representing user-generated content
   * within a specific community. Excludes identity fields (id, author/member
   * id), timestamps, and system fields, which are set by the backend.
   * Fulfills all business constraints for initial post creation. Must
   * reference only fields that exist in community_platform_posts. Many other
   * fields and relationships are system-managed.
   */
  export type ICreate = {
    /**
     * Target community's unique identifier. This is a required reference to
     * the community in which the post is being created. Must match an
     * existing community's id from the community_platform_communities
     * table.
     */
    community_platform_community_id: string & tags.Format<"uuid">;

    /**
     * Post title. This is a required, non-empty string used as the main
     * identifying text. Limited to 300 characters, used for indexing and
     * search, and must pass format and banned word filters per business
     * rules.
     */
    title: string & tags.MaxLength<300>;

    /**
     * Optional text content body for text posts. May be omitted or set to
     * null when not applicable (e.g., for link or image posts).
     */
    content_body?: (string & tags.MaxLength<40000>) | null | undefined;

    /**
     * Indicates the type of post ('text', 'link', or 'image'). Must be one
     * of the specified enum values. Used to control creation logic and
     * validate required fields.
     */
    content_type: "text" | "link" | "image";

    /**
     * Moderation or publication status for workflow (e.g., 'pending',
     * 'published', 'removed', 'hidden', 'mod_queued'). The initial status
     * is system/business policy dependent.
     */
    status?: string | undefined;
  };

  /**
   * Update DTO for community_platform_posts. All fields optional, supporting
   * partial updates for editing, moderation, or post status changes.
   * Forbidden to update author/member/community references, id, or
   * timestamps. Applies all business and integrity constraints for partial
   * updates. No system-managed fields allowed. Only fields that exist on
   * community_platform_posts.
   */
  export type IUpdate = {
    /**
     * Optional new post title. Limited to 300 characters, must pass content
     * policy and banned word filters.
     */
    title?: (string & tags.MaxLength<300>) | undefined;

    /**
     * Updated text content for text posts; nullable for other types per
     * business rules.
     */
    content_body?: (string & tags.MaxLength<40000>) | null | undefined;

    /**
     * If updating, must be one of: 'text', 'link', 'image'. Controls
     * validation and enforceable only if post was not yet published.
     */
    content_type?: "text" | "link" | "image" | undefined;

    /**
     * Optional update to moderation/publication status. E.g., 'published',
     * 'pending', 'removed', per policy.
     */
    status?: string | undefined;
  };

  /**
   * Summary DTO representing minimal information about a post for efficient
   * list display, search, and index operations.
   *
   * Aggregates only the essential identifying, status, and metadata fields
   * necessary for rendering post previews, leaderboards, and search results
   * across the platform. Maps to the main columns of the
   * community_platform_posts entity and omits heavy/nested content such as
   * full bodies, complex relations, and linked attachments. Fields like
   * 'deleted_at' are included as nullable for admin/mod coordination and to
   * distinguish soft-deleted/archived entries. All type definitions match the
   * database schema to ensure operational integrity and allow programmatic
   * construction of optimized feed responses in sorted, filtered, or
   * paginated lists.
   */
  export type ISummary = {
    /**
     * Unique identifier (UUID) for the post.
     *
     * Corresponds to the 'id' column in community_platform_posts and is
     * used as the reference key.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the member who created the post.
     *
     * From the 'community_platform_member_id' column, this field is vital
     * for author attribution and permission checks.
     */
    community_platform_member_id: string & tags.Format<"uuid">;

    /**
     * UUID of the community the post belongs to.
     *
     * From 'community_platform_community_id', this field allows filtering
     * and browsing by community context.
     */
    community_platform_community_id: string & tags.Format<"uuid">;

    /**
     * Title of the post.
     *
     * Directly from the 'title' column; maximum of 300 characters as per
     * business validation. Used for display and full-text search.
     */
    title: string;

    /**
     * Type of post content, e.g., 'text', 'link', or 'image'.
     *
     * Mapped from the 'content_type' column. Used to determine downstream
     * rendering, validation, and workflow for post attachments.
     */
    content_type: string;

    /**
     * Publication/moderation status of the post (e.g., 'published',
     * 'pending', 'removed', 'mod_queued').
     *
     * Field 'status' defines whether the post is visible, queued for
     * moderation, or hidden from standard views.
     */
    status: string;

    /**
     * Timestamp when the post was created.
     *
     * Matches 'created_at' in the Prisma schema. Supports sorting by
     * recency and audit trails.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the post was last substantively updated.
     *
     * Taken from 'updated_at'; useful for determining post freshness or
     * recency of edits.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft delete timestamp if set, otherwise null for active posts.
     *
     * Mapped from 'deleted_at'. Indicates whether the post is active or
     * archived/removed in the backend.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
