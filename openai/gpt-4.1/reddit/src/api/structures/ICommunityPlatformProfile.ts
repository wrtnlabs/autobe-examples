import { tags } from "typia";

/**
 * Full user profile record for the Reddit-like platform. Directly corresponds
 * to the community_platform_profiles table. Includes all member-editable public
 * fields and privacy status. Foreign keys to member account and references to
 * profile assets are represented. All properties are thoroughly documented to
 * support profile displays, privacy controls, and compliance/audit workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformProfile = {
  /** Unique identifier (UUID) for this profile entity, primary key. */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the member to whom this profile belongs. Links the profile to the
   * account holder.
   */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * The user's display handle. Publicly visible and unique per platform. Must
   * be 3-32 characters, case-insensitive, and conform to platform username
   * policy.
   */
  username: string;

  /**
   * Optional profile biography, displayed on profile page. May be null or
   * omitted for new users. Markdown supported. Length 0-1000 characters.
   */
  bio?: string | null | undefined;

  /**
   * Public URI to a profile picture/avatar. May be null/omitted for users
   * without a custom avatar.
   */
  avatar_uri?: (string & tags.Format<"uri">) | null | undefined;

  /**
   * Optional public email displayed on the user's profile, if the user opts
   * in. May be null for privacy.
   */
  display_email?: (string & tags.Format<"email">) | null | undefined;

  /**
   * Optional user-curated status (such as 'On vacation'). Shown on profile if
   * present. Max 100 characters.
   */
  status_message?: string | null | undefined;

  /**
   * Determines whether the profile is publicly visible or restricted by
   * privacy settings. True = public, false = private/restricted.
   */
  is_public: boolean;

  /** Timestamp when the profile was created (ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the profile was last updated (ISO 8601 UTC). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion flag. If set, the profile has been deleted/revoked but
   * retained for audit purposes (ISO 8601 UTC or null if active).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformProfile {
  /**
   * Request DTO for advanced profile search/listing. Supports exact, partial,
   * and full-text filtering for platform user profiles. All fields are
   * optional and may be combined for complex queries.
   */
  export type IRequest = {
    /** The unique identifier of the target profile to search/filter. */
    profileId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * A case-insensitive filter for the username (unique display handle).
     * Supports partial text search via platform search index.
     */
    username?: string | undefined;

    /**
     * Full-text search on biography/about text of user profile (partial
     * match, supports advanced queries per platform spec).
     */
    bio?: string | undefined;

    /**
     * Short user status filter for matching on current status (e.g. 'on
     * vacation').
     */
    statusMessage?: string | undefined;

    /**
     * Filter by public visibility (true = public profile, false =
     * restricted/private).
     */
    isPublic?: boolean | undefined;

    /**
     * Filter for profiles created after this timestamp (ISO 8601 UTC,
     * inclusive).
     */
    createdAfter?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for profiles created before this timestamp (ISO 8601 UTC,
     * inclusive).
     */
    createdBefore?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for profiles updated after this timestamp (ISO 8601 UTC,
     * inclusive).
     */
    updatedAfter?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for profiles updated before this timestamp (ISO 8601 UTC,
     * inclusive).
     */
    updatedBefore?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Field by which to sort results. Allowed values: 'created_at',
     * 'updated_at', 'username'.
     */
    sortBy?: "created_at" | "updated_at" | "username" | undefined;

    /** Sort order direction. Allowed values are 'asc' or 'desc'. */
    sortOrder?: "asc" | "desc" | undefined;

    /** Result page number (1-based index). Default is 1 if omitted. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of results per page. Maximum 100, defaults to 20 if omitted. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Data Transfer Object (DTO) for updating a user's profile in the
   * Reddit-like community platform. Includes all modifiable fields from
   * community_platform_profiles Prisma model. All fields are optional and
   * updatable independently. This schema is strictly limited to fields
   * present in the underlying Prisma schema, especially as regards usernames,
   * bio text, avatar images, and privacy control. This DTO should not include
   * any authentication, ID, timestamps, or system fields such as created_at
   * or deleted_at. Updates are allowed only for the authenticated user (self)
   * or administrators/moderators with the requisite privileges. Nullable
   * fields accept explicit null for clearing content; otherwise, do not send
   * a property to leave it unchanged.
   *
   * Follows security principle: never update system-managed fields or change
   * ownership. References the Prisma schema for property validation, format,
   * and constraints.
   */
  export type IUpdate = {
    /**
     * The unique username displayed for the user profile. Must be unique
     * across the platform and is required to meet platform constraints for
     * length and special characters. This property is referenced directly
     * from the 'username' field in community_platform_profiles. Used for
     * user display, mentions, and search indexing.
     */
    username?: string | undefined;

    /** User's bio section. Markdown allowed. Optional. */
    bio?: string | null | undefined;

    /** URL for avatar/profile image. Optional. */
    avatar_uri?: string | null | undefined;

    /** Public-facing email, optional and privacy-controlled. */
    display_email?: string | null | undefined;

    /** A short status message for the user's profile. */
    status_message?: string | null | undefined;

    /**
     * Flag indicating if the user's profile is publicly visible. Updates
     * privacy status for the account. Members can toggle this for
     * self-profile only.
     */
    is_public?: boolean | undefined;
  };
}
