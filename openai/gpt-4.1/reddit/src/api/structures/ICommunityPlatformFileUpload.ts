import { tags } from "typia";

/**
 * File upload record representing an asset uploaded via the platform (such as a
 * user image, post image, community banner/icon, etc.), as stored in
 * 'community_platform_file_uploads'.
 *
 * Includes all file metadata required for rendering, permission auditing, asset
 * cleanup, and business rule enforcement. This entity links to members
 * (ownership), communities, posts, or profile use cases via foreign keys.
 * Sensitive and internal-only fields remain omitted, but enough data is present
 * for moderation and display workflows. Follows all relational and audit
 * conventions as specified in the Prisma and requirements analysis.
 *
 * Every property in this schema directly matches a field in the corresponding
 * Prisma table, and is thoroughly documented to help frontend/backend
 * engineers, auditors, and business analysts.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformFileUpload = {
  /**
   * Primary key identifier of the file upload. Corresponds to the 'id' column
   * in the database. Uniquely identifies this file resource.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID of the member who performed the upload, referencing
   * 'community_platform_members.id'. Used for ownership, permission checks,
   * and audit.
   */
  uploaded_by_member_id: string & tags.Format<"uuid">;

  /**
   * Original name of the file as supplied by the uploading user. Used for
   * display and context.
   */
  original_filename: string;

  /**
   * Unique reference to the storage backend (e.g. S3 key, GCS path). Used for
   * internal or integration-level file retrieval. Must be unique across all
   * files.
   */
  storage_key: string;

  /**
   * MIME type for the file (e.g., 'image/png', 'application/pdf'). Used for
   * validation, preview, and display.
   */
  mime_type: string;

  /**
   * Size of the file in bytes. Used for quota management, previews, and
   * download statistics.
   */
  file_size_bytes: number & tags.Type<"int32">;

  /**
   * Public (or signed) URL where the file can be accessed for download or
   * preview. Used in UI and API responses for asset delivery. Must be unique
   * across all files.
   */
  url: string & tags.MaxLength<80000>;

  /**
   * Current lifecycle status for the upload (e.g. 'active', 'deleted',
   * 'archived'). Used to drive file visibility and cleanup workflows.
   */
  status: string;

  /** Timestamp when the file upload record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when file metadata was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp that indicates soft deletion; if present, file is archived or
   * inaccessible but retained for audit. Null if file is still active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformFileUpload {
  /**
   * Filter, search, sorting, and pagination parameters for finding file
   * uploads (community_platform_file_uploads). Used by moderation/admin
   * review dashboards or user file management UIs. All properties are
   * optional and can be combined for tailored search and navigation.
   */
  export type IRequest = {
    /**
     * ID of the uploader (member). Filter to file uploads performed by a
     * specific member, typically for user self-service or moderation
     * review.
     *
     * This supports UUIDs for precise member tracking.
     */
    uploaded_by_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Status of the file (e.g., 'active', 'deleted', 'archived').
     *
     * Filter file uploads according to logical status. This field matches
     * the value in the file upload record, enabling quick search by active
     * or removed content.
     */
    status?: string | null | undefined;

    /**
     * MIME type filter for files (e.g., 'image/png').
     *
     * Use to find uploads of specific types, such as images for posts or
     * banners (e.g., 'image/jpeg', 'image/png').
     */
    mime_type?: string | null | undefined;

    /**
     * Filter by original filename (supports partial match or exact).
     *
     * This assists in finding uploads based on user-supplied filename,
     * useful for user asset management or moderation workflows.
     */
    original_filename?: string | null | undefined;

    /**
     * Lower bound timestamp for file upload creation date filter
     * (inclusive, ISO8601).
     *
     * Used to filter results from a specific start date. Allows for
     * date-based log review or period-specific analytics.
     */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound timestamp for file upload creation date filter
     * (inclusive, ISO8601).
     *
     * Use to restrict search to uploads created before or at this
     * timestamp. Paired with created_at_from for date range searches.
     */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Page number for pagination (1-based). Specify to select the results
     * page to return. Defaults to 1 if undefined.
     *
     * Aligns with OpenAPI/DTO pagination standards.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Count per page (pagination limit). Maximum items to return per page.
     * Standard default (e.g., 20 or 50) may be set by system policy and is
     * recommended to prevent performance abuse.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;
  };

  /**
   * The payload required to initiate a file upload record in the platform
   * database (community_platform_file_uploads), used in the API's file upload
   * operation. Fields match the underlying schema and represent all file
   * metadata required at creation.
   *
   * The record links to the uploading member, specifies display name, storage
   * pointer, MIME type, size, and URL for access. Status controls business
   * workflow (active upon upload or staged for moderation). Timestamp fields
   * are system-generated and omitted from client request on create.
   *
   * Careful business validation must check file size, storage_key uniqueness,
   * and proper status assignment. Designed with global file management,
   * moderation, and privacy in mind, matching requirements and ERD design.
   */
  export type ICreate = {
    /**
     * UUID of the platform member performing the upload, references
     * 'community_platform_members.id'. Required for audit and permissions.
     */
    uploaded_by_member_id: string & tags.Format<"uuid">;

    /**
     * The filename as provided by the user's device upon upload. Used for
     * display and disambiguation.
     */
    original_filename: string;

    /**
     * Unique key or reference for the file in the storage backend (S3 path,
     * blob identifier, etc). Must be unique for file retrieval and
     * management.
     */
    storage_key: string;

    /**
     * MIME type of the file (e.g., 'image/png', 'application/pdf').
     * Controls preview and is used for validation.
     */
    mime_type: string;

    /**
     * Exact size of the uploaded file in bytes. Used for limits, quota
     * calculation, and cleanup.
     */
    file_size_bytes: number & tags.Type<"int32">;

    /**
     * Full public or signed URL for accessing the file. UI and clients use
     * this for rendering or download. Must be unique and correspond to the
     * uploaded file.
     */
    url: string & tags.MaxLength<80000>;

    /**
     * Status for the new upload (e.g., 'active', 'pending', 'archived').
     * Controls initial visibility on the platform.
     */
    status: string;
  };

  /**
   * Update fields for a file upload record in
   * community_platform_file_uploads. This is strictly for metadata—not for
   * binary uploads. Fields allowed for update are: original_filename (for
   * correcting user-facing names or typos), status (to
   * soft-delete/archive/activate), and url (to remap storage endpoints if
   * object is moved). All changes must be audit logged and authenticated.
   * Updates to file_size_bytes, mime_type, or storage_key are not possible
   * via this endpoint. Only the member who uploaded the file, assigned
   * community moderators, or admins may invoke updates depending on business
   * rule.
   */
  export type IUpdate = {
    /**
     * Original filename as submitted by user. Used primarily for
     * user-facing identification, auditing, or display in upload dialogs
     * and content associations. Example: "screenshot-2024-09-11.png". This
     * property allows the user to correct typos/labels for existing files,
     * but should never affect underlying file storage or URL references.
     */
    original_filename?: string | undefined;

    /**
     * Current logical status of the file record. Must match a recognized
     * system status: typically one of 'active', 'deleted', 'archived',
     * etc., as used in file upload management workflows. Changing to
     * 'deleted' marks a soft delete (the file is hidden from content lists
     * but persists for audit); 'archived' is for long-term retention;
     * 'active' means available for use. Only allowed values should be
     * accepted—enforce via business constraints.
     */
    status?: string | undefined;

    /**
     * Public or signed URL for retrieving this file. May be changed if the
     * underlying file is moved or re-keyed in storage. Maximum platform
     * limit: 80,000 characters. Only URLs following approved file storage
     * policies should be set here. Used for dynamic file source migration
     * or storage optimizations (e.g., CDN cache update).
     */
    url?: string | undefined;
  };

  /**
   * Summary DTO for platform file uploads for grid/list operations.
   *
   * Contains all key fields needed for overview lists, asset management, or
   * moderation UIs. Reflects the schema definition of a file uploaded via the
   * platform (e.g., images, avatars, banners, attachments). See
   * community_platform_file_uploads for column details. Some fields like
   * deleted_at may be null. Used for summarized API responses or admin grid
   * listings.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Auto-generated unique identifier for the file upload record.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Uploader's member ID (@link community_platform_members.id).
     *
     * References the user who uploaded the file. Required for audit and
     * access logic.
     */
    uploaded_by_member_id: string & tags.Format<"uuid">;

    /**
     * Original filename as submitted by user. Provides client context for
     * display/audit. String field.
     */
    original_filename: string;

    /**
     * File's MIME type (e.g., 'image/png'). Used for filtering and
     * validation. String field.
     */
    mime_type: string;

    /**
     * File size in bytes. Indicates the binary payload size; used for quota
     * enforcement & UI display.
     */
    file_size_bytes: number & tags.Type<"int32">;

    /**
     * Public or signed URL for retrieving this file. Large varchar field
     * stores the pointer to download/preview; may be signed or public.
     */
    url: string & tags.MaxLength<80000>;

    /**
     * File status string: typically values like 'active', 'deleted',
     * 'archived'.
     *
     * Used to determine display and availability.
     */
    status: string;

    /**
     * Timestamp of file upload creation. ISO 8601 date-time string
     * representing when the upload was created.
     */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of the last update to the file metadata. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp. Null if file is active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
