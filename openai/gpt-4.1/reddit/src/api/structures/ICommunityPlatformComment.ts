import { tags } from "typia";

/**
 * Represents a single threaded/nested comment attached to a post on the
 * community platform. Fields and relationships strictly follow the
 * community_platform_comments Prisma schema; does not include denormalized or
 * calculated values. Includes threading (parent_id), author reference, content,
 * moderation/publication status, audit timestamps, and soft-deletion markers
 * where supported by the schema. Intended for use in comment retrieval (detail
 * and lists), thread rendering, moderation actions, profile comment listings,
 * and audit trails.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformComment = {
  /**
   * Primary key of the comment. Uniquely identifies this comment row in the
   * community_platform_comments table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The ID of the post to which this comment was attached, referencing
   * community_platform_posts.id.
   */
  community_platform_post_id: string & tags.Format<"uuid">;

  /**
   * The ID of the member who authored this comment, referencing
   * community_platform_members.id.
   */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * Optional. If present, the ID of the parent comment for nested replies.
   * Root comments have parent_id null. Enables threaded/nested comment
   * structure, referencing community_platform_comments.id.
   */
  parent_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Main textual content of the comment. Markdown may be supported. Maximum
   * length and validation governed by business rules (<= 10,000 characters).
   */
  body: string;

  /**
   * Depth of this comment in the nested thread tree. Root comments: 1. Child
   * comments: incremented by parent's nesting_level. Limited per business
   * rules/max system config. Used for render optimization and depth
   * enforcement.
   */
  nesting_level: number & tags.Type<"int32">;

  /**
   * Current moderation or publication status of this comment. Typical values:
   * 'published', 'deleted', 'mod_queued', 'removed', 'hidden', etc. Used to
   * control visibility, moderation, and workflow.
   */
  status: string;

  /**
   * Timestamp for when the comment was originally created. Always in UTC and
   * stored in ISO 8601 format. Used for sorting, filtering, and
   * audit/replay.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the most recent substantive update to this comment. In UTC
   * ISO 8601 format. Enables tracking of edits, histories, and audit/replay.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Nullable. If present, soft delete marker indicating when this comment was
   * disabled, orphaned, or removed from public views. Not present (null) for
   * active comments. Used for audit and compliance.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformComment {
  /**
   * Comment search/filter/pagination request DTO for
   * community_platform_comments.
   *
   * Allows searching or listing comments for a post, user, or thread, with
   * advanced filtering (nesting_level, status, membership, etc.), pagination
   * controls, and full-text search support. Retrieved fields must only
   * reference actual columns present in the comments table, and sort/nest
   * filtering behavior must comply with business rules for thread depth and
   * sorting algorithms. Used in post comment lists, profile views, moderator
   * tools, and search UI.
   */
  export type IRequest = {
    /**
     * Page number for paginated results. Must be a positive integer. Used
     * to skip to a specific comment page.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of comments to return per page. The default may be set
     * by business logic and is recommended to be between 10 and 100. Used
     * for pagination controls.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Field or algorithm to sort comments by. Acceptable values include
     * 'new' (latest first), 'top' (by score), 'controversial' (by
     * controversial score), 'old' (oldest first), or custom algorithms if
     * supported by business logic.
     */
    sort_by?: string | undefined;

    /**
     * Sort order for comments. Should be 'asc' for ascending or 'desc' for
     * descending. The field may be ignored if sort_by specifies a custom
     * algorithm.
     */
    order?: string | undefined;

    /**
     * Limit search results to comments up to the specified nesting (thread)
     * depth. Root comments are level 1; replies are incrementally deeper.
     * Optional and typically used when rendering collapsed or flattened
     * comment views.
     */
    nesting_level?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<10>)
      | undefined;

    /**
     * If specified, will filter to only comments that are direct replies to
     * a specific parent comment, by UUID. Used for loading thread slices.
     */
    parent_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter comments by their current status. Business logic will restrict
     * to values such as 'published', 'deleted', 'mod_queued', 'removed',
     * 'hidden', etc.
     */
    status?: string | undefined;

    /**
     * Optionally filter comments to those authored by a specific member,
     * using UUID from the members table. Used for profile comment views or
     * moderator/member filtering.
     */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter for comments created at or after this ISO 8601 timestamp. Used
     * for search range.
     */
    date_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for comments created at or before this ISO 8601 timestamp.
     * Used for search range.
     */
    date_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Full text search within comment bodies. Performs a substring or
     * text-indexed search across body content.
     */
    search?: string | undefined;
  };

  /**
   * Data required to create a new comment entity within a post.
   *
   * Corresponds to the community_platform_comments table. Used for
   * member-initiated comment creation on posts, with support for optional
   * nested replies using parent_id. Validates all input according to maximum
   * lengths, text, moderation/content policy, and ensures correct linkage to
   * parent post/comment. The field parent_id may be null (for root comments)
   * or a valid UUID for a parent comment. This DTO is used as request body
   * for comment creation endpoints and respects all business and schema
   * constraints.
   */
  export type ICreate = {
    /**
     * The unique identifier of the target post to which this comment will
     * be attached. Must match an existing record in the
     * community_platform_posts table. Represents the parent post's foreign
     * key.
     */
    community_platform_post_id: string & tags.Format<"uuid">;

    /**
     * The comment body text. Required and must not be empty or only
     * whitespace. Maximum allowed length is 10,000 characters. Subject to
     * platform and community moderation/content policy for formatting,
     * banned words, and length constraints.
     */
    body: string;

    /**
     * The unique identifier of the parent comment if this is a reply
     * (nested comment). Nullable for top-level comments. Used for
     * threading/nesting structure and moderated to a maximum depth per
     * business rules.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Partial update data for editing an existing comment in the
   * community_platform_comments table.
   *
   * Used as request body for comment update operations, typically to change
   * an existing comment's body. Only the author (within allowed edit window)
   * and authorized moderators/admins may perform updates. Only includes
   * fields that the platform permits to be changed by the API; currently
   * restricted to body text. Payload is validated for length, non-empty
   * content, and content policies. This DTO is utilized for comment editing
   * flows, including member and moderation workflows. All schema and business
   * rules are enforced on update.
   */
  export type IUpdate = {
    /**
     * Updated body text for the comment (max 10,000 characters, required
     * for edit). May not be empty or only whitespace. Subject to all
     * content, banned word, and formatting validation rules upon update.
     */
    body: string;
  };

  /**
   * Summary DTO for a comment in the Reddit-like community platform, suitable
   * for list and thread display. Based on the community_platform_comments
   * Prisma schema. This type provides key information for rendering a list of
   * comments under a post, thread, or profile, while omitting large body text
   * and moderation workflow fields. This summary enables efficient comment
   * lists, including relationship, context, and status references, without
   * full nested detail. It is referenced by paginated comment list endpoints
   * and should always include business-critical context for display
   * components.
   *
   * This schema is tightly aligned with business rules for thread rendering
   * and profile history, and provides the minimal essential information
   * needed for comment previews, pagination, and sorting in comment lists.
   * All property descriptions are derived from the Prisma schema and business
   * documentation.
   */
  export type ISummary = {
    /**
     * Unique identifier for the comment. Corresponds to the 'id' column in
     * community_platform_comments. Required for lookup and thread
     * construction.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the post to which this comment is attached. Used to
     * link comments to their parent post context. Sourced from Prisma
     * 'community_platform_post_id'.
     */
    community_platform_post_id: string & tags.Format<"uuid">;

    /**
     * Identifier of the comment's author (member). Used for display and
     * profile references. Sourced from Prisma
     * 'community_platform_member_id'.
     */
    community_platform_member_id: string & tags.Format<"uuid">;

    /**
     * Optional reference to the immediate parent comment (if this is a
     * reply). Enables threaded/nested comment UI rendering. Sourced from
     * Prisma 'parent_id'. May be null if this comment is a root-level
     * reply.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The current depth in the comment thread (root=1, limited per system
     * config and business rules). Used for proper indenting and
     * reply-limiting. Matches 'nesting_level' column in Prisma.
     */
    nesting_level: number & tags.Type<"int32">;

    /**
     * Moderation/publication status of the comment (e.g., published,
     * deleted, hidden, mod_queued, removed). Used for controlling
     * display/UI. Derived from Prisma 'status' column.
     */
    status: string;

    /**
     * Timestamp when the comment was originally created. Allows for
     * ordering and display of time annotations. Derived from 'created_at'
     * column.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the last update or edit to the comment. Required for
     * edit history, real-time updates, or 'edited' display. From
     * 'updated_at'.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
