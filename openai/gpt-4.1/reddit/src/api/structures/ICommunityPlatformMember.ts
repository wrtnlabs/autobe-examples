import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * A registered, verified user of the Reddit-like community platform. Represents
 * all primary business flows for members, including content creation, voting,
 * commenting, subscribing, and reporting. Email is unique and used for
 * authentication. Excludes sensitive properties like password_hash. Only
 * includes fields existing in the community_platform_members Prisma schema.
 * Timestamp and status fields are present only if found in the schema.
 *
 * Reference to Prisma schema: community_platform_members table documentation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformMember = {
  /**
   * Primary Key.
   *
   * Unique identifier for the platform member, assigned as a UUID. Referenced
   * by all related member properties and business logic tables.
   *
   * @see community_platform_members schema comment.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique user email for authentication, required to be unique per member.
   * Used for login and contact.
   *
   * @see community_platform_members.email column comment.
   */
  email: string;

  /**
   * Whether email has been confirmed via platform verification flow. Cannot
   * post/comment/vote unless true.
   *
   * @see community_platform_members.email_verified column comment.
   */
  email_verified: boolean;

  /**
   * Current member status: 'active', 'blocked', 'suspended', etc. Used for
   * permission enforcement and ban handling.
   *
   * @see community_platform_members.status column comment.
   */
  status: string;

  /**
   * Timestamp when user account was registered.
   *
   * @see community_platform_members.created_at column comment.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last time account metadata was updated (profile or auth details).
   *
   * @see community_platform_members.updated_at column comment.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft-deletion timestamp for ban/erasure or self-removal.
   *
   * @see community_platform_members.deleted_at column comment.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformMember {
  /**
   * Create DTO for registering a new platform member (Reddit-like
   * registration).
   *
   * Defines the structure for incoming registration data necessary to create
   * a row in the 'community_platform_members' table. This type captures the
   * requirements for user-supplied registration, fully compliant with
   * business logic and Prisma schema commentary:
   *
   * - 'email': Must be unique, case-insensitive, and formatted as a valid email
   *   address. Used for authentication, contact, and identity verification.
   * - 'password': The raw, plain-text password supplied by the user. The
   *   backend must hash this using bcrypt or a comparable algorithm before
   *   storing it into the password_hash column. No plain text may be stored
   *   or logged in plaintext. Must meet minimum and maximum length and policy
   *   constraints (not enforced here but in service logic).
   *
   * Other fields from the schema such as 'email_verified', 'status',
   * 'created_at', and 'updated_at' are system/populated and must NOT be
   * supplied by the client or API consumer. Actor identity (member, guest,
   * session) is not accepted via the API and comes from security
   * context/middleware. No acceptance of 'id', 'deleted_at', or
   * role/escalation fields is allowed.
   *
   * References: 'community_platform_members' table in Prisma schema.
   *
   * Only the required properties are exposed. All platform
   * registration/authorization related logic references this type in the
   * OpenAPI spec.
   */
  export type ICreate = {
    /**
     * The unique user email for authentication and platform communications.
     * Must be unique across the platform, normalized for case, and
     * validated per standard email RFC rules. This is the user's principal
     * identity for login and identification.
     *
     * Examples:
     *
     * - 'alice@example.com'
     * - 'bob.smith@corporate.co'
     *
     * Constraints: Must be present, unique (enforced in DB), not null, and
     * conform to length and formatting policies.
     */
    email: string & tags.Format<"email">;

    /**
     * The user's plain-text password as provided during registration. This
     * field is required ONLY during initial account creation and must NOT
     * be stored or persisted in cleartext. The backend will hash this into
     * 'password_hash' (bcrypt, Argon2, or similar) before writing to the
     * database.
     *
     * Examples:
     *
     * - 'P@ssw0rd123!'
     * - 'Qwerty!2024'
     *
     * Constraints: Frontend/backend will enforce minimum length,
     * complexity, and restriction rules. Forbidden in logs, API responses,
     * or later reads. Immediately discarded after use for credential
     * hashing.
     */
    password: string;
  };

  /**
   * Authorization response for a registered member, including identity,
   * session tokens (JWT), and key profile properties.
   *
   * Returned after successful join, login, or token refresh. Sensitive fields
   * such as password hashes are intentionally omitted for security.
   * Membership status and email verification are surfaced for downstream
   * authorization logic.
   *
   * Maps to the community_platform_members table schema and security policy
   * requirements.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated member (matches the id column
     * of community_platform_members).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Email address of the member. This value is unique and corresponds to
     * the login credential.
     */
    email: string & tags.Format<"email">;

    /**
     * Whether the member has completed email verification. Participation in
     * most platform actions is restricted if false.
     */
    email_verified: boolean;

    /**
     * Membership status, such as 'active', 'blocked', 'suspended', etc.
     * This field determines current account accessibility and permissions.
     */
    status: string;

    /**
     * Timestamp when user account was registered.
     *
     * @see community_platform_members.created_at column comment.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last time account metadata was updated (profile or auth details).
     *
     * @see community_platform_members.updated_at column comment.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Optional soft-deletion timestamp for ban/erasure or self-removal.
     *
     * @see community_platform_members.deleted_at column comment.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Payload for authenticating a member login. Requires email and plain-text
   * password.
   *
   * Never transmits password hashes; only a valid, direct plaintext
   * credential is permissible and will be securely handled. Used for login
   * and issuing of member session tokens.
   *
   * The email property must match a valid, registered member; password is
   * checked against the stored hash per the community_platform_members
   * schema. All logic follows strong security and error-handling
   * requirements.
   */
  export type ILogin = {
    /**
     * Unique email address registered for the member. Used for
     * authentication and must comply with email structure.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain-text password for login. Must meet platform security policy
     * (length, complexity) and will be compared securely to the bcrypt hash
     * stored in the password_hash column. The actual hash is not sent by
     * clients.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<72>;
  };

  /**
   * Request schema for the refresh action on the Community Platform Member
   * entity.
   *
   * This object represents a refresh request for an authenticated member,
   * typically used to exchange a valid refresh token for a new set of JWT
   * session tokens. As defined by business workflows, no properties are
   * included here for schema-level complianceâ€”authentication context such as
   * the refresh token is expected to be included via headers or cookies, not
   * in the request body object itself.
   *
   * This schema is used strictly as a method marker for POST
   * /auth/member/refresh and does not require or permit any properties. See
   * authentication token exchange logic for underlying field handling.
   *
   * Referenced in: Platform Authentication API, Member Session Management.
   */
  export type IRefresh = {};

  /**
   * Input schema for searching/filtering/paginating
   * community_platform_members (users). Includes options for searching by
   * partial email, filtering by status or registration/update timestamps,
   * field-based sorting, and standard pagination controls. All properties are
   * optional and may be supplied in any combination. Required fields (such as
   * page, limit) are validated in context depending on business rule. This
   * DTO never exposes sensitive authentication info and only supports filters
   * mapped to columns in the prisma schema.
   */
  export type IRequest = {
    /**
     * Search filter for partial email matching. Used to filter user list by
     * user's email address. Accepts both exact and partial matches.
     * Typically case-insensitive. Example: 'john@company.com', 'admin',
     * 'gmail'. Not required.
     */
    email?: string | undefined;

    /**
     * Status filter for users (e.g., 'active', 'blocked', 'suspended',
     * 'deleted'). Matches the values in the
     * community_platform_members.status column. Used to limit search to
     * specific account states. Optional.
     */
    status?: string | undefined;

    /**
     * Lower bound for registration date search. Filters for users who
     * registered on or after this timestamp. Must be in ISO 8601 format
     * (YYYY-MM-DDTHH:mm:ss.sssZ). Optional.
     */
    createdAtFrom?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound for registration date search. Filters for users who
     * registered on or before this timestamp. Must be in ISO 8601 format
     * (YYYY-MM-DDTHH:mm:ss.sssZ). Optional.
     */
    createdAtTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Lower bound for last update date. Filters for users whose account
     * information was updated on or after this timestamp. Useful for audit
     * or change tracking. ISO 8601. Optional.
     */
    updatedAtFrom?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound for last update date. Filters for users whose account
     * info was updated on or before this timestamp. ISO 8601. Optional.
     */
    updatedAtTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Field name used to sort the search results. Typically one of:
     * 'created_at', 'updated_at', or 'email'. Optional. Must match valid
     * columns in the Prisma schema. Use with order.
     */
    sortBy?: string | undefined;

    /**
     * Sort order: 'asc' (ascending) or 'desc' (descending). Used with
     * sortBy to define sort direction. Optional. Default typically 'desc'
     * for recency-based sorts.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Page number for pagination (1-based index). Optional. Defaults to 1
     * if omitted. Used in conjunction with limit to define paginated
     * window.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of records per page for pagination. Controls the page size of
     * list results. Optional; default and maximum limits are enforced at
     * API/business logic level. Maximum typical: 100.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * DTO for updating member profile/account fields. Only email and status are
   * mutable by update operations per business and database policy. Does NOT
   * allow updating password_hash or system-managed timestamps here. Partial
   * update pattern, all fields optional.
   *
   * Reference: community_platform_members Prisma table comment and security
   * checklist.
   */
  export type IUpdate = {
    /**
     * Unique user email for authentication, required to be unique per
     * member. Used for login and contact.
     *
     * @see community_platform_members.email column comment.
     */
    email?: string | undefined;

    /**
     * Current member status: 'active', 'blocked', 'suspended', etc. Used
     * for permission enforcement and ban handling.
     *
     * @see community_platform_members.status column comment.
     */
    status?: string | undefined;
  };

  /**
   * Summary object for a platform member, for use in search listings or
   * relationship references. This DTO provides key identifying and status
   * fields of a member, referencing the 'community_platform_members' table in
   * the Prisma schema. Does not include sensitive authentication data or full
   * profile details.
   *
   * Used for admin and moderator listings, search results, and as a
   * lightweight reference in relationships to comments, posts, or moderation
   * tables. Contains only public and role-relevant identifying fields.
   * Forbids password or authentication secret exposure.
   */
  export type ISummary = {
    /**
     * Unique identifier for the member in UUID format, as defined in the
     * Prisma schema. This ID is used as the primary key for identifying
     * platform users throughout the system. Used for referencing user
     * across posts, comments, subscriptions, and moderation actions.
     *
     * ID values are system-generated and never modifiable by users.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique email address of the member, as enforced by the Prisma schema.
     * Used for login authentication, communication, and notifications. This
     * email must be unique per user and is a key contact field. Display or
     * update of the email address is restricted by role and privacy
     * settings. Emails are never exposed to other users except as allowed
     * by configuration or explicit privacy options.
     *
     * Email uniqueness is strictly enforced at the database level, and
     * format is validated upon creation and mutation.
     */
    email: string & tags.Format<"email">;

    /**
     * Indicates whether the member has completed the email verification
     * process. If false, user cannot participate in member-only platform
     * actions, including posting, commenting, or voting.
     *
     * The platform requires email verification as a prerequisite for
     * participation to ensure user authenticity and compliance with
     * business and regulatory policies.
     */
    email_verified: boolean;

    /**
     * Current status of the member account, as defined in Prisma: examples
     * include 'active', 'blocked', 'suspended', or other platform-defined
     * states. The status directly controls account-enabled features and may
     * be used for rate limiting, blocking, or audit tracking. Only admins
     * or system workflows may change status. The status is indexed for
     * backend query efficiency.
     *
     * A non-'active' status restricts or denies platform access, in
     * accordance with business logic for bans, discipline, or account
     * closure.
     */
    status: string;

    /**
     * Timestamp when the member account was first created. Set by the
     * backend and never modifiable. Used for user journey analytics,
     * account age calculations, and audit trails.
     *
     * All member creation events are logged for audit and compliance
     * review.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp for account metadata, including profile edits,
     * status changes, or verification events. Automatically set on any
     * mutation and used in audit/compliance reports.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating soft deletion of the member account, or null if
     * active. Used for compliance, audit retention, and recovery flows.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
