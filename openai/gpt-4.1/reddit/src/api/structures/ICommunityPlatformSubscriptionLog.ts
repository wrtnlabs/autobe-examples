import { tags } from "typia";

/**
 * Represents a single subscription log event in
 * community_platform_subscription_logs. Each record logs a
 * subscribe/unsubscribe (or other) event by a member to/of a community, with
 * event type, actor, timing, and optional analytics metadata.
 *
 * This DTO is used both for listing logs and for returning detail on a single
 * log record.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSubscriptionLog = {
  /** Primary Key. Unique identifier (UUID) for this subscription log entry. */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the member (community_platform_members.id) performing the
   * subscribe/unsubscribe event.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * Reference to the community (community_platform_communities.id) associated
   * with the subscription event.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Describes event type: 'subscribe', 'unsubscribe', or future event types.
   * Must be interpreted according to business logic, enum values possible:
   * subscribe/unsubscribe.
   */
  event_type: string;

  /**
   * Timestamp when the subscription log event occurred (ISO 8601 string, UTC
   * with timezone).
   */
  event_at: string & tags.Format<"date-time">;

  /**
   * Optional JSON-structured metadata for analytic/audit use. Stores
   * additional event context. May be null.
   */
  metadata?: string | undefined;
};
export namespace ICommunityPlatformSubscriptionLog {
  /**
   * Request body schema for searching/filtering subscription log events in
   * community_platform_subscription_logs. Supports pagination (page, limit),
   * filtering by event_type, date range (start_date, end_date), sorting, and
   * advanced metadata queries.
   *
   * This DTO can be used for PATCH requests to member/mod/admin subscription
   * log listing endpoints.
   */
  export type IRequest = {
    /** Page number for pagination. Should be a positive integer. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of items per page for pagination. Set reasonable
     * limits according to API default/max. (e.g., 10, 20, 50).
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Filter logs by event type (e.g., 'subscribe', 'unsubscribe', etc.). */
    event_type?: string | undefined;

    /**
     * Start date for filtering logs by event timestamp (inclusive). ISO
     * 8601 string.
     */
    start_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End date for filtering logs by event timestamp (inclusive). ISO 8601
     * string.
     */
    end_date?: (string & tags.Format<"date-time">) | undefined;

    /** Field to sort logs by. Acceptable values: 'event_at', 'event_type'. */
    sort_by?: "event_at" | "event_type" | undefined;

    /** Sort order for the results (ascending or descending). */
    sort_order?: "asc" | "desc" | undefined;

    /**
     * Optional query to match metadata content (if searching within event
     * metadata JSON/text blobs).
     */
    metadata_query?: string | undefined;
  };

  /**
   * Summary DTO representing a single subscription log event for a community
   * platform member. Based on the community_platform_subscription_logs Prisma
   * schema. Intended for use in paginated subscription event search views,
   * user audit logs, or analytics dashboards for subscription/unsubscription
   * event review. These summaries support filtering by event_type, time, and
   * allow efficient display without exposing verbose event metadata.
   *
   * This schema enables event timeline construction for users and admins
   * wishing to view the sequence of subscription actions, including
   * subscribe/unsubscribe workflow review. Each summary is directly mapped
   * from a database record, ensuring all audit trail and analytic
   * requirements are met.
   */
  export type ISummary = {
    /**
     * Unique identifier of the subscription log entry. Sourced from the
     * primary key 'id' in community_platform_subscription_logs.
     */
    id: string & tags.Format<"uuid">;

    /**
     * ID of the member whose subscription event this log covers. From
     * 'member_id' column.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * ID of the community impacted by this event. From 'community_id'
     * column in Prisma.
     */
    community_id: string & tags.Format<"uuid">;

    /**
     * Describes the type of event: 'subscribe', 'unsubscribe', or other
     * platform-defined values. Sourced from 'event_type' in Prisma and
     * business requirement.
     */
    event_type: string;

    /**
     * Timestamp of when the subscription or unsubscription occurred. Prisma
     * column: 'event_at'.
     */
    event_at: string & tags.Format<"date-time">;
  };
}
