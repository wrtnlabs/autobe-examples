import { tags } from "typia";

/**
 * Represents an image attached to a post in the community platform. This maps
 * to a row in the community_platform_post_images table. Each image is linked to
 * its parent post, has a file upload reference for the image asset, and is
 * ordered within the post's image sequence. All property names and types follow
 * the Prisma schema definition exactly. No additional or missing properties are
 * allowed.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPostImage = {
  /**
   * Primary key for this post image association. Each image attached to a
   * post has a unique UUID.
   */
  id: string & tags.Format<"uuid">;

  /**
   * References the parent post's unique identifier, indicating which post
   * this image is attached to.
   */
  community_platform_post_id: string & tags.Format<"uuid">;

  /**
   * References the file upload id from the global file upload table.
   * Indicates which file (image asset) is attached to the post as an image.
   */
  community_platform_file_upload_id: string & tags.Format<"uuid">;

  /**
   * Order of the image within the post's gallery (1 to N). Determines display
   * sequence for multi-image posts.
   */
  ordering: number & tags.Type<"int32">;
};
export namespace ICommunityPlatformPostImage {
  /**
   * Request structure for searching, filtering, or paginating images attached
   * to a specific post. Supports filtering on postId and ordering, and is
   * used as the body of image search/list endpoints for post galleries or
   * details. Only defined properties may be included.
   */
  export type IRequest = {
    /**
     * The unique identifier of the post for which post images should be
     * queried. Required when filtering or searching images attached to a
     * single post.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Optional. Filter by specific image ordering within the post, if known
     * (e.g., return only images with ordering=1).
     */
    ordering?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Payload schema for creating a new image relationship to a post within the
   * platform. This schema is used to associate a previously uploaded image
   * (from the file upload subsystem) as an attachment to a specific post,
   * enforcing gallery ordering and referential integrity.
   *
   * Each instance creates a row in the community_platform_post_images table,
   * linking the post and the uploaded file, and specifying the image's
   * display order among those attached to the post. Used by content creation
   * and editing workflows, particularly when users wish to attach, reorder,
   * or manage post images.
   *
   * All required properties are strictly defined by the underlying Prisma
   * database schema for the community_platform_post_images table. Only valid,
   * pre-uploaded files may be referenced, and post IDs must point to existing
   * posts.
   */
  export type ICreate = {
    /**
     * Unique identifier for the parent post to which this image is
     * attached. This must be the UUID of an existing row in the
     * community_platform_posts table. Required to associate the image with
     * a post upon creation.
     *
     * Based on the database schema, this field provides referential
     * integrity and ensures that images cannot exist without parent posts.
     * Use cases include creating image galleries for posts and associating
     * each image as part of the ordered sequence attached to a post.
     */
    community_platform_post_id: string & tags.Format<"uuid">;

    /**
     * Unique identifier (UUID) for the file upload associated with this
     * post image. Must reference a valid entry in the
     * community_platform_file_uploads table (image previously uploaded).
     * This field is necessary to properly reference, display, and audit
     * files used as post attachments.
     *
     * Referential integrity ensures that the post image always points to a
     * valid stored file. Only files that have been successfully uploaded
     * can be referenced; uploading a new file is a separate API call
     * handled by the file upload subsystem.
     */
    community_platform_file_upload_id: string & tags.Format<"uuid">;

    /**
     * The display order for this image within its parent post (gallery or
     * image list). This integer value determines the sequence in which
     * images are presented to users and must be unique per post. First
     * image should be 1, with higher numbers used for subsequent images.
     *
     * Order enforcement enables gallery/carousel display logic, and helps
     * users control which image appears as the primary or cover image. API
     * logic should reject duplicate ordering for the same post and should
     * enforce minimum (1) and maximum (per business rule) constraints. See
     * requirements for overall image count per post.
     */
    ordering: number & tags.Type<"int32">;
  };

  /**
   * Schema for updating metadata of an existing post image relationship, as
   * recorded in the community_platform_post_images table. Only the 'ordering'
   * field is updatable according to the platform's business logic and audit
   * requirements; the parent post and file upload associations are fixed at
   * creation.
   *
   * Used in workflows where post image order needs to be changed (for
   * example, reordering gallery images or promoting an image to be the
   * cover). Input must pass uniqueness and range validations; the update will
   * be rejected if a duplicate or invalid ordering is provided. All changes
   * should be tracked for audit and compliance.
   */
  export type IUpdate = {
    /**
     * The new display order for this attached image within its parent
     * post's image gallery. This field must be specified when updating
     * image order to change the sequence in which the image appears among
     * others attached to the same post.
     *
     * Business logic in the update handler will enforce uniqueness of
     * ordering per post, and will reject duplicate or out-of-range values.
     * Valid orderings start at 1 and may go up to the platform or
     * community-configured maximum. Changing this field allows users to
     * reorder images for display purposes.
     */
    ordering: number & tags.Type<"int32">;
  };
}
