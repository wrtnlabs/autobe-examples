import { tags } from "typia";

/**
 * Represents a single system-level configuration entry for the platform. Each
 * configuration entry is uniquely identifiable by its ID and key, and is used
 * to store system feature flags, thresholds, and runtime toggles that can alter
 * platform behavior without code redeployment. Records the key, value
 * (string-encoded but may represent any type), description, and creation/update
 * timestamps for tracking operational history and compliance. This schema is
 * directly mapped to the 'community_platform_system_configs' table in the
 * database and is managed by platform administrators only. Used to power
 * backend dashboards, operational management, and DevOps feature switches.
 * Audit-compliant and indexed for fast search by key or description. All fields
 * are enforced at the database level for integrity and operational safety.
 *
 * Paragraphs:
 *
 * 1. System configuration entries are essential for platform runtime adaptation,
 *    supporting live toggling of experimental features, setting platform-wide
 *    thresholds, or adjusting feature flags without pushing new code. Each
 *    entry must have a unique key and string value, and descriptive metadata
 *    for traceability.
 * 2. Administrators can add, update, or remove system configuration entries as
 *    necessary, and changes are tracked using the created and updated timestamp
 *    fields for audit and debugging purposes.
 * 3. This configuration interface is intentionally separated from user-facing or
 *    business logic tables to encapsulate pure operational parameters and is
 *    rarely accessed in normal end-user workflows. Only privileged admin users
 *    have access to create, modify, or query these entries.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSystemConfig = {
  /** Primary Key. Unique identifier for the configuration entry. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique string key for the system configuration setting (e.g.,
   * 'max_post_length', 'enable_new_feature'). Must be unique across all
   * configs.
   */
  key: string;

  /**
   * Configurable value for the setting, encoded as a string. Can represent a
   * number, boolean, JSON, or any string value, according to consuming system
   * logic.
   */
  value: string;

  /**
   * Explanation of the configuration key's purpose. Optional, may provide
   * human-readable context or administrative notes.
   */
  description?: string | null | undefined;

  /** Timestamp when this config entry was created (ISO 8601 format). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this config entry was last updated (ISO 8601 format). */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformSystemConfig {
  /**
   * Request body for searching, filtering, and paginating the list of
   * platform system configuration entries. Supports filter by configuration
   * key, description, and paginated result retrieval for admin configuration
   * management and dashboard listing. All filter and pagination fields are
   * optional; omitted fields will result in comprehensive or default listing
   * behavior.
   */
  export type IRequest = {
    /**
     * Optional filter parameter to search system configuration entries by
     * their exact or partial configuration key. Used to restrict search
     * results to configs with matching key values. Case-insensitive;
     * partial matches permitted. If omitted, no filter is applied.
     */
    key?: string | undefined;

    /**
     * Optional filter to search across configuration entry descriptions.
     * Enables full-text search for descriptive content or usage rationale.
     * Case-insensitive search with support for substring match. If
     * unspecified, the filter is not applied.
     */
    description?: string | undefined;

    /**
     * The page number to retrieve for paginated system configuration index
     * results. Used to support client-side navigation of large config
     * result sets. Defaults to first page (1) if not provided.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of results to return per page. Supports pagination and
     * load management in admin UI interfaces. If omitted, a default
     * platform page size will be used (commonly 20 or 50). Must be
     * positive.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Result sort order for configuration entries. Acceptable values:
     * 'created_at', 'updated_at', 'key'. Determines which property to order
     * the results by. Direction (asc/desc) may be specified in an extended
     * sorting parameter or by prefix convention if so implemented in the
     * business logic.
     */
    sort?: string | undefined;

    /**
     * (Optional) Filter to include configs with a particular
     * business-defined status, such as 'active', 'archived', or other
     * status used in system settings. If provided, limits the result set to
     * configs currently matching the supplied status value.
     */
    status?: string | undefined;
  };

  /**
   * Data Transfer Object for creating a new entry in the system configuration
   * store ('community_platform_system_configs'). Used by platform
   * administrators to define and add new system-wide parameter entries such
   * as feature flags, operational thresholds, or system toggles without code
   * changes. The schema enforces that a key (unique string) and value
   * (string-encoded) are provided, with optional description text to clarify
   * business or technical purpose. On creation, timestamps and unique
   * identifiers are assigned systemically. This interface prevents
   * unauthorized alteration of system parameters, ensuring operational safety
   * and traceable configuration evolution.
   *
   * Paragraphs:
   *
   * 1. The creation DTO includes the configuration key, value, and optional
   *    description, in accordance with the integrity constraints of the
   *    system configuration table. Key uniqueness is enforced at the database
   *    layer.
   * 2. The 'value' is always a string but may hold complex, serialized data
   *    (JSON object/string, booleans, numbers) depending on usage context; it
   *    is the responsibility of config consumers to parse as required.
   */
  export type ICreate = {
    /**
     * Unique string key for the configuration entry. Must not duplicate
     * existing config keys.
     */
    key: string;

    /**
     * The value to assign to the configuration entry, encoded as a string
     * (but can represent numbers, booleans, or JSON).
     */
    value: string;

    /**
     * Optional, human-readable description of this configuration entry's
     * business or technical intent.
     */
    description?: string | null | undefined;
  };

  /**
   * Update DTO for system configuration values in the Reddit-like community
   * platform. Used for updating feature flags, thresholds, and other
   * platform-wide settings at runtime without code deployment. All fields
   * must exist in the Prisma 'community_platform_system_configs' table. The
   * type is used for partial (PATCH) or full (PUT) updates by admins. Only
   * updatable fields are permitted. Reference the original table for allowed
   * columns.
   */
  export type IUpdate = {
    /**
     * Unique identifier for the configuration setting. Used as a key in the
     * key-value store. Must be unique and URL-safe. Changing this may
     * affect platform components relying on the key.
     */
    key: string;

    /**
     * Configurable value for the setting. String-encoded and may represent
     * JSON, integer, boolean, etc. Subject to business validation at the
     * service layer.
     */
    value: string;

    /**
     * Explanation of the configuration key's purpose and scope. Used for
     * moderation, auditability, and reasoning about the config purpose.
     * Optional field for human-readable context.
     */
    description?: string | null | undefined;
  };
}
