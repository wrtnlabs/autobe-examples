import { tags } from "typia";

/**
 * A single versioned community rule set. Contains the authoritative governance
 * document (body), versioning for audit, and timestamps for lifecycle tracking.
 * Used by members, moderators, and admins to enforce community-specific
 * behavior.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityRule = {
  /**
   * Unique identifier for the community rule entry. Primary key for
   * referencing this rule entry in the database and API.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the parent community
   * (community_platform_communities.id). Identifies which community this rule
   * applies to.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Full text or Markdown-formatted content of the rule document. The
   * source-of-truth for posting, commenting, and moderation governance in the
   * community. Length: up to 50,000 characters.
   */
  body: string;

  /**
   * Integer version number for the rule set. Increments with each update.
   * Used for audit, version control, and rollback workflows.
   */
  version: number & tags.Type<"int32">;

  /**
   * Timestamp when this rule version became official or published. Used for
   * audit, rollback, and user notification.
   */
  published_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the rule entry was created in the database. Supports audit
   * trails.
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the most recent update to this rule entry. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCommunityRule {
  /**
   * Filtering, search, and pagination parameters for listing or finding rules
   * belonging to a specific community. Use community_id as required context,
   * and supply sorting, search, or version control as needed for UI filtering
   * or mod/admin review. All filters are optional except community_id.
   */
  export type IRequest = {
    /**
     * Unique identifier of the parent community for which to list or filter
     * rules. Required context for all listings.
     */
    community_id: string & tags.Format<"uuid">;

    /**
     * Version number of the community rules to filter for, if provided.
     * Optional; when omitted, returns all versions.
     */
    version?: (number & tags.Type<"int32">) | undefined;

    /**
     * Full-text search query for rule body content. Enables searching by
     * text or keywords.
     */
    search?: string | undefined;

    /**
     * Lower bound (inclusive) for filtering rules by published_at
     * timestamp. Useful for time-based version audit.
     */
    published_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound (inclusive) for filtering rules by published_at
     * timestamp.
     */
    published_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Field by which the results are sorted. Allowed values: version,
     * created_at, updated_at, published_at.
     */
    sort_by?:
      | "version"
      | "created_at"
      | "updated_at"
      | "published_at"
      | undefined;

    /** Sort order: 'asc' for ascending, 'desc' for descending. */
    order?: "asc" | "desc" | undefined;

    /** Page number for pagination (starting from 1). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of rule results per page. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * DTO schema for creating a new community-specific rules document. Used by
   * community moderators or admins to define posting, commenting, and
   * moderation policies.
   *
   * This type matches the fields from the community_platform_community_rules
   * Prisma table necessary to provision a new rule version. Descriptions
   * provide guidance on content length, audit policies, and formatting.
   */
  export type ICreate = {
    /**
     * The full text or rich content of the community rule. Markdown is
     * supported and should not exceed 50,000 characters.
     *
     * This field represents the actual rule content and will be enforced as
     * the governance policy within the target community. Required for
     * creation and must adhere to content guidelines and formatting rules
     * described in requirements.
     */
    body: string;

    /**
     * Version number for the community rule. Should increment on every rule
     * update.
     *
     * Used for audit, rollback, and policy tracking purposes. Required for
     * new rules; must be unique per community.
     */
    version: number & tags.Type<"int32">;

    /**
     * The official publication date/time of this rule version. Used for
     * establishing when the rule becomes effective and for audit
     * versioning.
     *
     * Should be an ISO 8601 timestamp.
     */
    published_at: string & tags.Format<"date-time">;
  };

  /**
   * DTO for updating an existing community rule document. Includes current
   * body, version, and publication time fields. All updates are subject to
   * versioning, character limit, and audit compliance as enforced by the
   * platform's requirements and Prisma schema
   * (community_platform_community_rules table).
   *
   * Typically used as a payload in PUT methods for rules update endpoints;
   * enforces new version and publication time per edit.
   */
  export type IUpdate = {
    /**
     * Editable full text or Markdown rule document for the community.
     *
     * Use this field to update rule wording, formatting, or content in line
     * with changing community policies. Updates must respect overall
     * character limits.
     */
    body: string;

    /**
     * The next integer version number for the rule document.
     *
     * Must be strictly monotonically increasing; required for audit trails
     * and version rollback.
     */
    version: number & tags.Type<"int32">;

    /**
     * Timestamp for latest publication of this version of the rule.
     *
     * Required to signal the effective date/time for versioned policy. Must
     * be an ISO 8601 string.
     */
    published_at: string & tags.Format<"date-time">;
  };
}
