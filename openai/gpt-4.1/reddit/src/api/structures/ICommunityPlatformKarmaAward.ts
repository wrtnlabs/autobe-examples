import { tags } from "typia";

/**
 * Represents a historical award or badge granted to a member for achievement on
 * the platform or within a specific community.
 *
 * Each karma award records the recipient member, optional community
 * association, award type (e.g., gold, founder, legendary), reason for award,
 * and event timestamp. Intended for analytics, profile badges, moderation
 * recognition, or administrative rewards. Fields map directly to the
 * community_platform_karma_awards table in Prisma.
 *
 * Business rules require proper validation of referenced member/community,
 * regulated award types, reasonable event times, and concise, safe
 * descriptions. Communications regarding awards (notifications, profile
 * display) utilize this model as a canonical reference.
 *
 * Karma awards are typically visible on user profiles and may inform
 * permissions or member reputation flows. This structure supports compliance
 * with audit and recognition policies. All fields are strictly required unless
 * otherwise indicated by the schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformKarmaAward = {
  /**
   * Primary key; the unique identifier for the karma award event as stored in
   * the database. This UUID is used for direct record retrieval, referencing,
   * and audit.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the member who received the award. Maps to the
   * unique member id in community_platform_members. Required for proper
   * association and display.
   */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * Optional foreign key to the community in which this award was earned.
   * Null for global or platform-level awards, otherwise references
   * community_platform_communities.id. Used for community-specific
   * recognition flows.
   */
  community_platform_community_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Short key or descriptor for the award type (e.g., 'gold', 'founder',
   * 'legendary'). Can be used for badge icons or business logic gating. The
   * value is regulated by award type business rules.
   */
  award_type: string;

  /**
   * Optional human-readable description or rationale for conferring the
   * award, such as 'Top contributor of the month'. Used for tooltips,
   * notifications, or context display. May be null if system-awarded.
   */
  award_reason?: string | null | undefined;

  /**
   * Timestamp at which the award event occurred, recorded in ISO8601 format
   * with time zone. Provides context for when the user earned the
   * achievement.
   */
  event_time: string & tags.Format<"date-time">;

  /**
   * Timestamp when this award record was inserted into the database. Used for
   * audit and analytics.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft delete field; timestamp indicating when this award was revoked, null
   * if active. Enables historical views or compliance reporting.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformKarmaAward {
  /**
   * Query request object for searching karma award events.
   *
   * This DTO is used in PATCH (search/filter/index) operations on karma
   * awards to support paginated, filtered, and sorted listing in admin
   * dashboards, analytics, or profile achievement displays. Each field
   * corresponds to a filter or sort/pagination parameter supported by the
   * karma award index/search API. All filters are optional; omitting them
   * yields unfiltered/global results.
   *
   * Where relevant, all IDs are UUID strings referencing corresponding
   * entities in the platform. Sorting and pagination properties control
   * result navigation and ordering. Supports large-scale queries for
   * analytics/reporting as well as targeted achievement lookup for individual
   * users.
   */
  export type IRequest = {
    /**
     * Optional filter. Retrieve awards for a specific member only
     * (referencing community_platform_members.id).
     *
     * If omitted or null, results are not filtered by member.
     */
    member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter. Retrieve awards for a specific community.
     *
     * If omitted or null, returns awards globally or from all communities.
     */
    community_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter. Type or key of the award (e.g., 'gold', 'founder',
     * 'legendary').
     *
     * If set, restricts results to this award type. If null/omitted,
     * accepts all types.
     */
    award_type?: string | null | undefined;

    /**
     * Optional filter. Lower bound (inclusive) for award event time. UTC
     * ISO8601.
     */
    event_time_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional filter. Upper bound (inclusive) for award event time. UTC
     * ISO8601.
     */
    event_time_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional. The page number to retrieve in paginated results (1-based).
     * If omitted/null, defaults to 1.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Optional. The number of records to return per page in paginated
     * results. If omitted/null, the system may use a platform default or
     * maximum.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Optional. Sort field. Possible values: 'event_time', 'award_type',
     * etc. If omitted/null, defaults to 'event_time' descending.
     */
    sort_by?: string | null | undefined;

    /** Optional. 'asc' or 'desc'. Defaults to 'desc'. */
    sort_direction?: string | null | undefined;
  };

  /**
   * Payload for creating a new karma award assigned to a member, optionally
   * scoped to a community. Used by administrative or automated reward logic.
   *
   * Fields mirror those in ICommunityPlatformKarmaAward, omitting ID and
   * audit fields (which are assigned by the backend). All references
   * (member_id, optional community_id) must be validated for existence and
   * award_type should follow platform-defined keys. Reason is optional, and
   * event_time supports either current or backdated award creation
   * (ISO8601).
   */
  export type ICreate = {
    /**
     * UUID for the member receiving this award
     * (community_platform_members.id). Required and validated at creation.
     */
    community_platform_member_id: string & tags.Format<"uuid">;

    /**
     * Nullable UUID pointing to the community in which the award was earned
     * (community_platform_communities.id). Null indicates a platform-wide
     * achievement.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Short key or descriptor for the award type to be assigned (e.g.,
     * 'gold', 'top_contributor'). Must conform to business-regulated award
     * types.
     */
    award_type: string;

    /**
     * Human-readable explanation of why the award is issued (optional).
     * Used for display, tooltips, or compliance logs.
     */
    award_reason?: string | null | undefined;

    /**
     * Timestamp for when this award was earned or is considered effective.
     * Should be ISO8601 and is typically set to the moment of creation
     * unless a historical backfill is required.
     */
    event_time: string & tags.Format<"date-time">;
  };

  /**
   * Update object for a Karma Award (Badge/Reward event).
   *
   * Enables administrators to modify the human-readable award reason, type,
   * revocation status, associated community, or the event timestamp, as
   * defined by the karma award record for compliance, appeal resolution, or
   * correcting data. See the original business and schema comments for
   * permitted flows. All fields are optional—only supplied fields will be
   * updated.
   */
  export type IUpdate = {
    /**
     * Short human-readable description of why the award was granted.
     *
     * Update this to provide a new or corrected description when modifying
     * the award record.
     */
    award_reason?: string | undefined;

    /**
     * Type or key of the award (e.g. 'gold', 'founder', 'legendary').
     *
     * Allows updating the classification or categorization of an
     * already-issued award if a reclassification is necessary.
     */
    award_type?: string | undefined;

    /**
     * Nullable. Community in which the award was accrued (for
     * community-specific badges). Reference to
     * {@link community_platform_communities.id}. If omitted or set to null,
     * award is considered platform-wide.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Time when the award was granted. If updating this field, ensure to
     * use an appropriate ISO 8601 timestamp reflective of the award date.
     */
    event_time?: (string & tags.Format<"date-time">) | undefined;

    /**
     * When the award was revoked (if ever). Null otherwise. Update to
     * current date-time string to revoke, or null to un-revoke.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view of a karma award or badge assigned to a platform member for
   * achievements or milestone events.
   *
   * This DTO is designed for award lists, feeds, or profile badge overviews.
   * It includes the essential identifying and descriptive fields—award type,
   * reasons, community (if scoped), and timestamps—used in profile displays
   * and admin analytics.
   *
   * Data is sourced directly from the Prisma community_platform_karma_awards
   * table. Fields reflect the business logic of achievement tracking,
   * milestone recognition, and per-community or global awards. Sensitive
   * system metadata (such as deleted_at) is omitted for list/summary
   * presentation.
   */
  export type ISummary = {
    /**
     * Unique identifier of the karma award record.
     *
     * This value is a UUID primary key in the Prisma
     * community_platform_karma_awards table. Used for referencing awards,
     * database operations, and auditing badge-related actions.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The platform member receiving this award.
     *
     * Foreign key reference to community_platform_members.id. Identifies
     * the user who earned this badge/award event. Used for assignment,
     * retrieval, and analytic linkage.
     */
    community_platform_member_id: string & tags.Format<"uuid">;

    /**
     * Community in which this award is applicable (nullable).
     *
     * When set, references community_platform_communities.id, indicating
     * the badge was earned in a specific community context. If null, the
     * award is platform-wide. Essential for community-scoped achievement or
     * status awards.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Short label classifying the badge/award type, e.g., 'gold',
     * 'founder', 'legendary'.
     *
     * Used for badge display, grouping award statistics, and mapping UI
     * icons. The set of allowed award_types is defined by platform business
     * policy.
     */
    award_type: string;

    /**
     * Optional short description or justification for why the award was
     * granted.
     *
     * Human-created, limited-length strings explaining the event, e.g.,
     * 'Top contributor for October', 'Voted most helpful by peers'. Used in
     * profile rendering or analytics. May be null if award_type alone
     * suffices.
     */
    award_reason?: string | null | undefined;

    /**
     * ISO8601 timestamp when the award was officially granted.
     *
     * Indicates when the user achieved the threshold, badge was issued, or
     * similar event occurred.
     */
    event_time: string & tags.Format<"date-time">;
  };
}
