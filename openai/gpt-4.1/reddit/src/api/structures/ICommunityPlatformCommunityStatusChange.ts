import { tags } from "typia";

/**
 * Audit record and snapshot of a single status change event for a community.
 * Models an entry in community_platform_community_status_changes, capturing
 * state transitions, responsible actors, and context. Essential for compliance,
 * audit, and moderator history. Field documentation derives from the Prisma
 * schema and requirements analysis.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityStatusChange = {
  /**
   * Primary key for the community status change record, referencing
   * community_platform_community_status_changes.id in the database.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the community affected by this status transition, matching
   * community_platform_communities.id.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * ID of the admin or moderator who performed the status change, referencing
   * platform actor tables.
   */
  performed_by_id: string & tags.Format<"uuid">;

  /**
   * String code for the old status of the community (e.g., 'active',
   * 'private').
   */
  previous_status: string;

  /**
   * String code for the new status after this change (e.g., 'banned',
   * 'archived').
   */
  new_status: string;

  /**
   * Short explanation or code for why this status change occurred (e.g.,
   * 'policy_violation', 'user request'), nullable if no extra reason given.
   */
  change_reason?: string | null | undefined;

  /**
   * Additional context or notes about the status change, for audit/compliance
   * (free-form, optional).
   */
  notes?: string | null | undefined;

  /**
   * ISO timestamp of when the status change was made and recorded; required
   * for compliance/audit.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCommunityStatusChange {
  /**
   * Filtering and pagination parameters for searching the
   * community_platform_community_status_changes audit log. Allows querying by
   * actor, status, date range, and custom sort order for audit and compliance
   * workflows.
   */
  export type IRequest = {
    /**
     * Page number for paginated results (1-based index). Returned pages
     * contain a fixed number of results as per platform policy. Optional;
     * defaults to 1 if omitted.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of status change entries per page. Useful for controlling
     * pagination performance in large communities. Typical values: 10, 20,
     * 50. Optional; default set by system config.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Filter by new_status or previous_status value. Only results with this
     * status (either before or after the change) will be included. Useful
     * for reviewing all 'banned', 'private', or 'active' transitions.
     * Optional.
     */
    status?: string | undefined;

    /**
     * UUID (string) of the moderator or admin who performed the status
     * change. Use to filter audit trail by actor.
     */
    performed_by_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * ISO 8601 formatted date-time string representing the start of the
     * query window (inclusive). Only status changes created_at after this
     * are returned. Optional.
     */
    from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 formatted date-time string representing the end of the query
     * window (inclusive). Only status changes created_at before this are
     * returned. Optional.
     */
    to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort order for results. Valid values: 'created_at' (default,
     * descending), 'previous_status', 'new_status'. Allow sorting primarily
     * by date or status code. Optional.
     */
    sort?: "created_at" | "previous_status" | "new_status" | undefined;

    /**
     * Ascending ('asc') or descending ('desc') sort on the sort property.
     * Default: 'desc' (most recent first). Optional.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Schema component for creating a new community status change event in the
   * audit trail system (community_platform_community_status_changes).
   *
   * This object defines all required and optional fields for recording a new
   * event when a community's status changes (ban, unban, private, suspend,
   * etc.). It establishes a historical record for compliance, audit, and
   * workflow review. Refer to Prisma schema for field constraints and
   * enumeration values.
   */
  export type ICreate = {
    /**
     * The previous status of the community before the change (e.g.,
     * 'active', 'suspended', 'private').
     *
     * This field records the state of the community immediately prior to
     * the status change event. It is essential for audit trails and
     * understanding the context of the change. The value must match a valid
     * status as recognized by the business logic and should be consistent
     * with the statuses defined for communities. Refer to the Prisma schema
     * for enumerated or accepted values.
     *
     * Example: 'active', 'banned', 'private', 'archived'.
     */
    previous_status: string;

    /**
     * The new status of the community after the change (e.g., 'banned',
     * 'private', 'active').
     *
     * This property indicates the resulting state of the community
     * following this status change event. It is critical for enforcement of
     * community access policies and historical review. Must be a valid
     * status per platform rules and business requirements described in the
     * Prisma schema.
     *
     * Example: 'banned', 'private', 'active', 'archived'.
     */
    new_status: string;

    /**
     * A brief, human-readable reason or code for the status change event.
     *
     * Optional field used to provide context for why the status change
     * occurred. This may include references to policy, violations, user
     * requests, or system triggers. Limited to short explanatory text. This
     * field supports compliance, user appeals, and moderator communication
     * flows.
     *
     * Example: 'Rule violation', 'DMCA takedown', 'User request',
     * 'Automated system policy'.
     */
    change_reason?: string | undefined;

    /**
     * Optional additional notes, free-form comments or justification for
     * moderators or admins. Typically used for internal audit,
     * transparency, or investigator annotation.
     *
     * Business rules recommend using this field for secondary explanations,
     * escalation details, or operational metadata. May be left empty if not
     * needed.
     *
     * Example: 'Member banned for repeated policy infractions and
     * subsequent appeal failure.'
     */
    notes?: string | undefined;

    /**
     * The UUID of the moderator or admin who performed this status change
     * action.
     *
     * This field associates the status change action with the responsible
     * actor for audit trail and compliance. Must reference a valid admin or
     * moderator as defined in the system. The value is required to
     * demonstrate authorized workflow and support future transparency and
     * appeal processes.
     *
     * Example: '395fd7ba-80af-4722-b4c6-d265d2d4238d'.
     */
    performed_by_id: string & tags.Format<"uuid">;
  };

  /**
   * Schema component for updating or amending an existing community status
   * change audit record in the system
   * (community_platform_community_status_changes).
   *
   * Permits corrections or additions to documentation for audit, compliance,
   * or transparency. Field updatability is governed by business policy. All
   * modifications must be fully auditable with justification.
   */
  export type IUpdate = {
    /**
     * If specified, changes the recorded previous status value for this
     * community status change record. Use only for audit correction or
     * appeals.
     */
    previous_status?: string | undefined;

    /**
     * If specified, changes the target status for this historical record.
     * Permitted only if business/audit workflow allows adjustment
     * post-event. Use with clear compliance justification.
     */
    new_status?: string | undefined;

    /**
     * Updates or rewrites the reason for this status change for audit and
     * compliance clarity. Use only per platform workflow - e.g., verified
     * appeals or admin correction.
     */
    change_reason?: string | undefined;

    /**
     * Amends or adds additional internal/explanatory notes for this audit
     * entry.
     */
    notes?: string | undefined;
  };
}
