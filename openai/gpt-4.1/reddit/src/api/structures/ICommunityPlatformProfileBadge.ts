import { tags } from "typia";

/**
 * Profile badge entity representing a reward, achievement, or status assigned
 * to a user profile. This type is tightly linked to the platform's badge and
 * achievement system, as defined in the community_platform_profile_badges
 * Prisma model. Each badge can be related to a karma award, has detailed
 * issuance metadata, and can optionally be revoked. This schema is essential
 * for profile displays, recognition features, compliance, and audit workflows.
 * Directly reflects all fields of the Prisma model--NEVER add or omit
 * properties. All fields and their business context are described below.
 *
 * - Each badge belongs to a profile (community_platform_profile_id) and can
 *   optionally relate to a community_platform_karma_award.
 * - Badges are categorized by badge_type and badge_name, have full audit
 *   timestamps, and record both assignment and possible revocation (with
 *   reasons).
 * - This entity is created/managed through badge award, moderation, and
 *   self-service profile flows, always matching the Prisma schema.
 *
 * CAUTION: Do NOT expose hidden or soft-deleted entries to unauthorized roles.
 * NEVER include or exclude any property not present in the schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformProfileBadge = {
  /**
   * Unique identifier (UUID) for the badge assignment. Primary key in the
   * badge table. Always present and auto-generated.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the profile this badge is assigned to. Required.
   * Always references a profile id.
   */
  community_platform_profile_id: string & tags.Format<"uuid">;

  /**
   * (Optional) Reference to the karma award definition, if badge is granted
   * as a result of karma achievement. Nullable. Links to
   * community_platform_karma_awards.id or is null for non-karma badges.
   */
  community_platform_karma_award_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Type or category of badge, such as 'gold', 'anniversary', or custom
   * category. Categorizes badge for display and analytics. Required, string.
   */
  badge_type: string;

  /**
   * Human-readable display name of the badge assigned. Required. Used for
   * badge display in user profile and achievement summaries.
   */
  badge_name: string;

  /**
   * Timestamp indicating when this badge was assigned to the profile.
   * Required. Set automatically at badge grant time.
   */
  issued_at: string & tags.Format<"date-time">;

  /**
   * (Optional) Username/admin name/system or automation that issued the
   * badge. Useful for audit and transparency. Nullable in schema.
   */
  issuer?: string | null | undefined;

  /**
   * (Optional) Timestamp indicating when the badge was revoked. Null if the
   * badge is currently active. If set, badge should be considered
   * revoked/inactive but retained for audit.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * (Optional) Short reason for badge revocation. Set by admin/moderator or
   * system, if applicable. Nullable.
   */
  revoke_reason?: string | null | undefined;

  /**
   * Timestamp when badge record was created in the system. For audit/history,
   * required.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for last update of this badge record (could be status change,
   * revocation, etc). Required.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion/recovery timestamp. If set, the badge is logically deleted
   * or hidden except for compliance or audit review. Null if active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformProfileBadge {
  /**
   * Request DTO for querying a paginated and filterable list of badges
   * assigned to a user profile in the community_platform_profile_badges
   * schema. Supports filters on recipient profile ID, type and name of badge,
   * issuance date range, revoked/active status, sorting, and pagination. This
   * DTO is used in endpoints that enable searching or listing badge records
   * for analytics, profile UI, or moderation review – with all properties
   * tracking their corresponding columns in the Prisma schema. All properties
   * are optional to allow broad or fine-tuned filters. All queries using this
   * DTO should support flexible filtering – for example, a moderator may want
   * to see all 'gold' badges awarded in the last month, or a member could
   * query their own visible badge list.
   *
   * Pagination and sorting properties ('page', 'limit', 'sort_by', 'order')
   * are provided to support efficient server/client-side navigation of
   * potentially large result sets. Date filtering is performed using ISO 8601
   * strings, and UUIDs guarantee referential integrity for profile lookups.
   */
  export type IRequest = {
    /**
     * Filter: Only fetch badges for this profile UUID. Used to query badge
     * list for specific user profile. It is a required parameter in API
     * endpoints that are profile-specific, but optional for system-wide
     * badge searches.
     */
    profileId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter badges by badge type (for example: 'gold', 'anniversary',
     * 'community-contributor'). Allows searching for badges of a given
     * category for analytics, filtering, or moderation purposes. Mapped to
     * the 'badge_type' column in Prisma schema.
     */
    badge_type?: string | undefined;

    /**
     * Filter badges by their display name, such as 'Reddit Gold', 'Top
     * Commenter'. Supports text search in badge name. Useful for UI search
     * and moderation dashboards.
     */
    badge_name?: string | undefined;

    /**
     * Inclusive filter: fetch only badges issued from this ISO 8601
     * date-time (UTC) onwards. Useful for analytics, recent badge awards,
     * or auditing. Expects full RFC 3339 date-time string.
     */
    issued_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Inclusive filter: fetch only badges issued up to this ISO 8601
     * date-time (UTC). Used for bounded range queries or for reviewing
     * badges within a certain period.
     */
    issued_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter badges by active (not revoked) or revoked status. Useful for
     * systems that display current vs. past badges.
     */
    revoked?: boolean | undefined;

    /**
     * Field name to sort by (for example: 'issued_at', 'badge_type'). Used
     * for ordering query results, supports sorting by issuance time or
     * badge category.
     */
    sort_by?: string | undefined;

    /**
     * Sort order direction for query results. Only valid values are 'asc'
     * (ascending) or 'desc' (descending).
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Page number for paginated badge search results. Starts at 1. Required
     * for pagination-enabled queries.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of badge records to return per page. Used for
     * server-side pagination.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /**
   * Request body schema for creating a new profile badge assignment. Used in
   * badge reward workflows, admin badge assignment, or system-driven
   * achievement grants. ONLY includes those properties that can be set at
   * creation time and match columns from community_platform_profile_badges
   * with non-generated, non-audit, or required input fields. NEVER include
   * id, created_at, or updated_at - these are set by the system.
   *
   * Business rules:
   *
   * - Profile id is required. A reference to the profile that will receive the
   *   badge.
   * - Karma award id is optional (nullable), set if badge is awarded due to a
   *   karma achievement. For non-karma badges, leave this as null or omit.
   * - Badge_type and badge_name are mandatory.
   * - Issued_at is usually set to current timestamp, but can be specified for
   *   backdating/admin workflows.
   * - Issuer is optional for automation, required for admin/manual assignment.
   * - Optional fields (revoked_at, revoke_reason, deleted_at) should be omitted
   *   or set null at creation.
   * - All input must conform strictly to the types and business context
   *   described.
   *
   * All property definitions are by reference to the Prisma schema.
   */
  export type ICreate = {
    /**
     * Profile id (required) - recipient of the badge. Must reference a
     * valid profile from the system.
     */
    community_platform_profile_id: string & tags.Format<"uuid">;

    /**
     * (Optional) Foreign key to karma award if badge is tied to a specific
     * karma achievement. Can be null.
     */
    community_platform_karma_award_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Badge category/type (e.g. 'gold', 'legendary', admin custom value).
     * Required.
     */
    badge_type: string;

    /**
     * Human-readable name of the badge for profile display (e.g. 'Founder',
     * 'Champion'). Required field.
     */
    badge_name: string;

    /**
     * Timestamp of issuance (optional). Can be assigned for explicit
     * backdated/admin badge issuance, but will default to current time if
     * omitted.
     */
    issued_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Identity (username/admin/system) of the badge issuer. For
     * audit and display. Nullable.
     */
    issuer?: string | null | undefined;
  };

  /**
   * Update data structure for a badge record associated with a member
   * profile. Used for revocation, annotation, or display updates by owners,
   * moderators, or admins. All properties must match those specified in the
   * Prisma model community_platform_profile_badges. Updating includes
   * modifying badge_name, badge_type, revocation info, or issuer details. Do
   * not include properties not found on the actual Prisma model.
   */
  export type IUpdate = {
    /**
     * Type/category of badge (e.g., 'gold', 'anniversary',
     * 'community-contributor'). Must match platform/business badge
     * taxonomy.
     */
    badge_type?: string | undefined;

    /** Display name of badge as awarded. */
    badge_name?: string | undefined;

    /** RFC3339 timestamp for when badge was issued. */
    issued_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional identifier or description of badge issuer (username, admin
     * name, or system).
     */
    issuer?: string | null | undefined;

    /** When badge was revoked (if applicable; else null). */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** If revoked, brief reason for revocation. */
    revoke_reason?: string | null | undefined;
  };

  /**
   * Summary view of a badge earned by a user profile. Used for paginated
   * profile badge listings or management dialogs.
   *
   * References the community_platform_profile_badges table. Includes all
   * display and audit metadata relevant to summary context, but omits badge
   * award linkage details.
   */
  export type ISummary = {
    /**
     * Unique identifier for the profile badge.
     *
     * References PK column from community_platform_profile_badges. This
     * value is used for badge management and API operations.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The ID of the profile that owns this badge.
     *
     * References FK column from community_platform_profile_badges. Allows
     * linkage to community_platform_profiles.
     */
    community_platform_profile_id: string & tags.Format<"uuid">;

    /**
     * Type or category of badge (e.g. 'gold', 'anniversary',
     * 'community-contributor').
     *
     * Classification of the badge for display and analytics. Must follow
     * platform badge taxonomy.
     */
    badge_type: string;

    /**
     * Display name of the badge. Human-readable string used in profile
     * displays, achievements, and notifications.
     */
    badge_name: string;

    /**
     * Timestamp for when the badge was granted to the user. Used for
     * sorting, qualification, and timeline rendering.
     */
    issued_at: string & tags.Format<"date-time">;

    /**
     * (Optional) User, moderator, admin, or system that issued the badge.
     * Display for audit and compliance if available.
     */
    issuer?: string | null | undefined;

    /** (Optional) Time badge was revoked, if removed. Null if active. */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** (Optional) Reason the badge was revoked, if any. */
    revoke_reason?: string | null | undefined;

    /**
     * Soft deletion timestamp for the badge assignment record for
     * historical/audit retention.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
