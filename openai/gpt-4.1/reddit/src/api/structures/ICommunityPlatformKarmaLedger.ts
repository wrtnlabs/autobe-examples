import { tags } from "typia";

/**
 * A current karma ledger record for a member, scoped globally or to a specific
 * community. Derived from the community_platform_karma_ledgers table in the
 * Prisma schema. Contains only explicitly defined properties. Timestamps use
 * ISO 8601 format.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformKarmaLedger = {
  /** Primary Key. Unique UUID for the ledger record. */
  id: string & tags.Format<"uuid">;

  /** Belonged member's UUID. References community_platform_members.id. */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * Referenced community UUID (nullable for platform-wide/global karma).
   * References community_platform_communities.id.
   */
  community_platform_community_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Current karma value for the member (may be negative; server-enforced min
   * if needed).
   */
  current_karma: number & tags.Type<"int32">;

  /**
   * (Nullable) Optional human/business-readable reason for feature gating
   * (e.g., why user can't post).
   */
  feature_lock_reason?: string | null | undefined;

  /**
   * Last time the ledger was updated (ISO 8601 standard format, always
   * present).
   */
  updated_at: string & tags.Format<"date-time">;

  /** Record creation timestamp (ISO 8601 standard format). */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp; indicates deleted status if non-null. Null if
   * active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformKarmaLedger {
  /**
   * Search/filter and pagination parameters for karma ledger retrieval. Used
   * by admins to search for karma ledgers by member, community, status,
   * range, and for paging through results. Maps to fields in the
   * community_platform_karma_ledgers table. Contains only properties present
   * in the schema or matching filter needs. Filtering by 'deleted_at' is done
   * via status where needed, since hard-delete is possible.
   */
  export type IRequest = {
    /**
     * The UUID of the member whose karma ledger records are to be
     * retrieved. Optional if searching by broader criteria.
     */
    community_platform_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * (Optional) The UUID of the community to filter ledgers by a specific
     * community context. Null or omitted means platform-wide/global
     * search.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Optional minimum boundary for current karma value for range
     * filtering.
     */
    min_karma?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional maximum boundary for current karma value for range
     * filtering.
     */
    max_karma?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional filter for ledgers having a specific business reason for
     * current feature lock (string match).
     */
    feature_lock_reason?: string | undefined;

    /**
     * Optional filter for active vs deleted ledgers (e.g., 'active',
     * 'deleted', etc.)
     */
    status?: string | undefined;

    /**
     * Optional field specifying the key to sort by (e.g., 'created_at',
     * 'updated_at', 'current_karma').
     */
    sort_by?: string | undefined;

    /** Sort order direction (ascending or descending) */
    order?: "asc" | "desc" | undefined;

    /** Optional page number for pagination. Starts at 1. */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Max results per page for pagination control (default/maximum depends
     * on platform policy, e.g., 50, 100, etc.)
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional cursor (opaque string or uuid) for cursor-based paging;
     * mutually exclusive with page/limit.
     */
    cursor?: string | undefined;
  };

  /**
   * Request body for creating a new karma ledger entry. This DTO enables
   * administrators to create a member karma tracking record, optionally
   * scoped to a specific community or platform-wide. It must specify the
   * member, initial karma value, and may include a community and a gating
   * reason. All fields correspond to columns in the
   * community_platform_karma_ledgers table.
   */
  export type ICreate = {
    /**
     * The unique identifier (UUID) of the member for whom the karma ledger
     * is created. This field references the primary key 'id' in the
     * 'community_platform_members' table. It is required to establish the
     * owner of the karma ledger, either for platform-wide or
     * community-specific tracking.
     */
    community_platform_member_id: string & tags.Format<"uuid">;

    /**
     * (Optional) The unique identifier (UUID) of the community to which
     * this karma ledger applies. If null, the karma ledger is
     * platform-wide; if provided, it references the 'id' in
     * 'community_platform_communities'.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * The initial karma points value to set for the member in this ledger.
     * Must be an integer and can be positive, zero, or negative according
     * to platform policy.
     */
    current_karma: number & tags.Type<"int32">;

    /**
     * (Optional) The reason for gating features for this member due to the
     * state of their karma. Used to indicate manual lockout, special
     * gating, or other admin-enforced restriction. Provide null if no lock
     * is present.
     */
    feature_lock_reason?: string | null | undefined;
  };

  /**
   * Request body for updating (patching) an existing karma ledger record.
   * This DTO enables administrators to adjust the member's current karma
   * value and/or the 'feature_lock_reason'. All fields correspond to mutable
   * columns in the community_platform_karma_ledgers table. Only fields
   * included in the request will be updated.
   */
  export type IUpdate = {
    /**
     * The updated karma value for this ledger entry. Must be an integer.
     * Can be negative per business rule. This is used by administrators
     * when correcting or adjusting a member's points manually.
     */
    current_karma?: (number & tags.Type<"int32">) | undefined;

    /**
     * (Optional) A reason for feature lockout or null if no lock is to be
     * set. Allows administrators to gate feature access or to document a
     * manual restriction reason. Set to null to remove an existing lock
     * reason.
     */
    feature_lock_reason?: string | null | undefined;
  };

  /**
   * Summary object of a karma ledger record for a member and optionally a
   * community, used for paginated or indexed listings.
   *
   * References the 'community_platform_karma_ledgers' schema. Provides key
   * information on a member's current karma, feature gating reason, and
   * lifecycle timestamps. Used in lists, management dashboards, and feed
   * gating checks.
   */
  export type ISummary = {
    /**
     * Unique identifier for the karma ledger entry.
     *
     * Corresponds to the 'id' field in the Prisma
     * community_platform_karma_ledgers table. Used for referencing and
     * managing specific ledger records throughout the platform.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The member's unique identifier whom this karma ledger refers to.
     *
     * References 'community_platform_members.id'. Indicates which user this
     * karma ledger affects, directly connecting to member profile, account,
     * and engagement records.
     */
    community_platform_member_id: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the scoped community for this karma ledger,
     * or null for global platform karma.
     *
     * References 'community_platform_communities.id'. When null, this
     * ledger applies globally to the member; when UUID, represents
     * per-community karma management for advanced feature gating.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * The user's current karma value for this ledger (can be negative).
     *
     * Holds the live karma tally as of the latest voting or moderation
     * adjustment, reflecting both positive and negative engagement.
     * Directly restricts and enables karma-gated features per policy.
     */
    current_karma: number & tags.Type<"int32">;

    /**
     * If present, a textual reason why this karma ledger enforces a gating
     * lockout (e.g., feature locked due to negative karma).
     *
     * Explains why certain features may be restricted for this member (such
     * as inability to post or subscribe due to low karma) as defined by
     * business policy.
     */
    feature_lock_reason?: string | null | undefined;

    /**
     * Timestamp representing the last time the karma ledger entry was
     * updated.
     *
     * Used for cache invalidation and UI refreshes; updates after each
     * karma modification event.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of initial creation for this karma ledger entry.
     *
     * Supports auditing and compliance, representing when the entry was
     * first started.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for soft-deleting the karma ledger, or null when active.
     *
     * Soft-delete support for compliance, allowing ledger records to be
     * hidden or archived on user ban or account erasure. 'Null' when
     * active; date-time when soft-deleted.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
