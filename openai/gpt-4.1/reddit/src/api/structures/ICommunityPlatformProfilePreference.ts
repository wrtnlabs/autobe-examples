import { tags } from "typia";

/**
 * Stores user-configurable preferences related to their profile, appearance,
 * privacy settings, notification controls, and messaging policies. Each record
 * is uniquely associated with a user profile (community_platform_profiles), and
 * contains language and theme preferences, opt-ins for email/badge visibility,
 * notification settings, and message reception controls. Used for customizing
 * user profile experiences and respecting privacy and accessibility choices on
 * the Reddit-like community platform. Soft deletion via deleted_at is supported
 * for privacy/erasure policies.
 *
 * Based on the Prisma schema: community_platform_profile_preferences.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Profiles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformProfilePreference = {
  /**
   * Primary Key.
   *
   * Unique identifier for this profile preference record.
   *
   * @db.Uuid
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to associated user profile (community_platform_profiles.id).
   * Indicates the profile to which these preferences belong.
   */
  community_platform_profile_id: string & tags.Format<"uuid">;

  /**
   * User’s preferred language setting for the platform or profile display.
   * String, nullable.
   */
  language?: string | null | undefined;

  /** Preferred visual theme (e.g., 'light', 'dark'). String, nullable. */
  theme?: string | null | undefined;

  /**
   * Whether to show display email (see profile) on public profile page.
   * Boolean.
   */
  show_email: boolean;

  /** Whether to show earned badges to the public. Boolean. */
  show_badges: boolean;

  /**
   * Whether the user permits incoming messages from people they don’t
   * follow/subscriptions. Boolean.
   */
  allow_messages_from_nonfollowers: boolean;

  /**
   * Serialized (JSON or similar) notification settings—a flexible preferences
   * blob for alerts, messaging, and platform info. String, nullable.
   */
  notification_settings?: string | null | undefined;

  /** Timestamp for preference record creation. DateTime (ISO 8601, RFC 3339). */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for last preference modification. DateTime (ISO 8601, RFC
   * 3339).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for soft deletion or recovery of preferences. DateTime (ISO
   * 8601, RFC 3339). Nullable.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformProfilePreference {
  /**
   * DTO for updating the user's profile preferences/settings. Used as request
   * body for PUT/PATCH operations on the profile preference resource,
   * targeted by the owning profile's ID. Client may specify any subset of
   * fields for update; all are optional. Setting a value to null will reset
   * that field to platform default.
   *
   * This DTO closely maps to 'community_platform_profile_preferences' Prisma
   * model, but used for partial updates of existing settings, supporting all
   * business rules regarding accessibility, privacy, notification, and
   * interface customization. Validation logic applies for allowed values
   * (languages, themes, etc).
   */
  export type IUpdate = {
    /**
     * New value for user's language selection. Must be valid ISO 639-1
     * code. Null resets to global default.
     */
    language?: string | null | undefined;

    /**
     * New preferred UI theme. Must be an allowed theme value or null to
     * reset.
     */
    theme?: string | null | undefined;

    /**
     * Whether to show email address publicly on the profile. Set true/false
     * per the user's privacy choice.
     */
    show_email?: boolean | undefined;

    /**
     * Whether earned badges are shown to public viewers outside of
     * member/admin profile views.
     */
    show_badges?: boolean | undefined;

    /**
     * Allow or block incoming DMs from users the member is not
     * following/subscribed to.
     */
    allow_messages_from_nonfollowers?: boolean | undefined;

    /**
     * Serialized notification preferences. Use null to clear or reset all
     * notification customizations.
     */
    notification_settings?: string | null | undefined;
  };
}
