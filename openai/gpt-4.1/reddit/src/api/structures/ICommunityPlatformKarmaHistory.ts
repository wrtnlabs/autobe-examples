import { tags } from "typia";

/**
 * Karma history record capturing the full detail of a single karma-affecting
 * event for a member. References member, optional community, post, and/or
 * comment, and provides all context needed for analytic, audit, or profile
 * breakdown views. Descriptions are rooted in Prisma schema for
 * 'community_platform_karma_history'.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformKarmaHistory = {
  /** Primary Key. The unique UUID for this karma history record. */
  id: string & tags.Format<"uuid">;

  /** Foreign key. The UUID of the member affected by this karma event. */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * Optional foreign key. UUID of the related communityâ€”if karma scope is
   * community-limited. Null for global/platform events.
   */
  community_platform_community_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Optional foreign key. UUID of the related post if this event is
   * post-scoped (e.g., for votes/upvotes/downvotes on posts).
   */
  community_platform_post_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Optional foreign key. UUID of the related comment if this event is
   * comment-scoped (e.g., for votes/upvotes/downvotes on comments).
   */
  community_platform_comment_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Type of karma event. Examples: 'upvote', 'downvote',
   * 'moderation_penalty', 'admin_adjustment'. Used for business logic and
   * filtering.
   */
  event_type: string;

  /** The signed integer delta of karma for this event (positive or negative). */
  change_amount: number & tags.Type<"int32">;

  /**
   * Short string that provides additional context for the event: 'voting',
   * 'system', 'moderation', or other free-form categories used for business
   * analytics.
   */
  event_context: string;

  /**
   * Timestamp for when this event was registered (ISO 8601); may match
   * created_at but allows future expansion.
   */
  event_time: string & tags.Format<"date-time">;

  /**
   * Timestamp when this record was created in the system. May match
   * event_time.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion. Timestamp if the record was logically deleted; otherwise
   * null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformKarmaHistory {
  /**
   * Request object for searching and filtering paginated member karma history
   * events. Enables dashboard/profile views, analytics, or export. All
   * filters are optional for maximum reach-down control, but page/limit are
   * usually included for UI queries.
   */
  export type IRequest = {
    /**
     * Filter: The UUID of the member whose karma history is to be listed.
     * Effective for user profile audit scenarios or self-profile access.
     * Must match a valid member id if provided.
     */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter: The UUID of the community for which to restrict karma events.
     * Use null for platform-wide/global karma history.
     */
    community_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter: Type of event(s) to include (e.g., 'upvote', 'downvote',
     * 'moderation_penalty', 'admin_adjustment'). May support
     * comma-separated or repeated values.
     */
    event_type?: string | undefined;

    /**
     * Optional lower bound for event_time (inclusive); only karma events on
     * or after this timestamp are included.
     */
    after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional upper bound for event_time (exclusive); only karma events
     * strictly before this timestamp are included.
     */
    before?: (string & tags.Format<"date-time">) | undefined;

    /** Sort order for result. Defaults to descending (most recent first). */
    sort?: "event_time-desc" | "event_time-asc" | undefined;

    /** Pagination: Page number, starting from 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Pagination: Number of records per page. Policy may restrict max page
     * size.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };
}
