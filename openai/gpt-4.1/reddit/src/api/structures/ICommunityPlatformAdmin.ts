import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Platform administrator entity.
 *
 * Represents a platform-level administrator account with the highest privileges
 * in the system. Admins can manage users, configure global platform settings,
 * assign moderator roles, perform system-wide moderation, and access sensitive
 * audit logs. The model enforces unique email addresses and contains
 * authentication, status, and audit fields. Critical for ensuring platform
 * security, disaster recovery, and regulatory compliance. Each admin is
 * uniquely distinguishable from members and moderators, and their activity is
 * thoroughly tracked.
 *
 * Based on the 'community_platform_admins' table in the Prisma schema. This
 * includes email, password hash (not exposed in response DTOs), superuser
 * boolean, account status, audit timestamps, and soft-deletion support.
 *
 * Directly referenced in administrative flows: onboarding, login, refresh,
 * status changes, audit/event logging, and moderator management. Sensitive
 * authentication details (e.g., password_hash) must never be present or exposed
 * in API responses.
 *
 * For more information, see the Community Platform Requirements Analysis,
 * non-functional requirements, and user roles documentation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAdmin = {
  /**
   * Admin unique identifier in UUID format.
   *
   * Primary key for the admin entity. Used for identity verification,
   * traceability in logs, and as a foreign key across audit and moderation
   * tables. Required for referencing this administrator in all role and
   * permission granting/approval operations.
   *
   * Corresponds to the 'id' column in the community_platform_admins table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Admin email for authentication and contact (must be unique).
   *
   * Main login credential and unique identifier for admin authentication
   * workflows. Must be an official business/admin-controlled address and must
   * NOT be reused among other actors (members/moderators). Emails are
   * case-insensitive and subject to platform-specific domain restrictions.
   *
   * Corresponds to the 'email' column in the community_platform_admins table.
   */
  email: string & tags.Format<"email">;

  /**
   * Whether admin possesses unrestricted/emergency privileges.
   *
   * Used for distinction between regular and super admins. Superusers bypass
   * certain access restrictions for emergency and disaster recovery flows,
   * subject to audit. Superuser status is always required for executing
   * system-wide critical actions (e.g., platform reconfiguration, recovery,
   * or irreversible data manipulation).
   */
  superuser: boolean;

  /**
   * Account status indicator (e.g., active, suspended, deleted).
   *
   * Determines access and login capability for this admin. If not 'active',
   * login and platform operations are denied. Valid values include 'active',
   * 'suspended', 'deleted'. Business rules enforce single active status at a
   * time.
   *
   * Corresponds to the 'status' column in the community_platform_admins
   * table.
   */
  status: string;

  /**
   * Timestamp of admin account creation in ISO 8601.
   *
   * Records when the admin was first registered, critical for audit and
   * lifecycle tracking. Required for compliance documentation and
   * role/authority validation during investigations. Maps to 'created_at'
   * column.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the latest account modification (profile, status).
   *
   * Tracks the most recent update to the admin account, including any status,
   * email or role changes. Audit and history workflows rely on this date for
   * compliance and forensic purposes. Maps to 'updated_at' column.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion or account revocation timestamp, null unless deleted.
   *
   * Indicates if the admin account has been logically removed (soft deleted)
   * for audit, compliance, or self-removal flows. Null if still active or
   * only suspended. Not available for reactivation unless permitted by
   * retention policy. Maps to 'deleted_at' column.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformAdmin {
  /**
   * Schema to create a new platform administrator in the community system.
   *
   * This DTO is intended for the /auth/admin/join POST operation, where a
   * unique email address and password are required. Superuser privileges can
   * optionally be granted. Input is validated for uniqueness, password
   * strength, and proper admin onboarding flows. The password will be
   * securely hashed by the backend; never store plaintext passwords. Security
   * rules and audit logs apply to all creations.
   */
  export type ICreate = {
    /**
     * The unique email address for the new admin. This must not be already
     * in use by any other admin or authentication actor in the system. Used
     * for login and notification purposes. Required.
     */
    email: string & tags.Format<"email">;

    /**
     * The initial plaintext password to be set for the new admin. The
     * backend will hash this before storing. Plaintext must meet system
     * complexity requirements (min length, complexity per NFRs) and is not
     * persisted in this DTO -- only used for transmission over TLS.
     * Required.
     */
    password: string;

    /**
     * If true, grants this admin full superuser privileges to the platform
     * (highest authority). Recommended to set to false unless this is a
     * primary ops/admin onboarding scenario. Optional, default is false if
     * omitted.
     */
    superuser?: boolean | undefined;
  };

  /**
   * Authorization response for a platform admin in the Reddit-like community
   * platform. This schema is returned after successful login, join
   * (registration), or token refresh for a platform-wide admin, and includes
   * the admin's unique identifier and a JWT-based authorization token.
   *
   * This type directly maps to the 'community_platform_admins' Prisma model
   * and is geared for secured authentication flows in system administration
   * APIs.
   *
   * The 'id' field is the UUID of the admin record in
   * 'community_platform_admins'. The 'token' must reference the standardized
   * 'IAuthorizationToken' type (which is expected to exist as a reusable
   * component in the API spec), representing the JWT access/refresh token
   * structure for admin authentication. This schema provides the minimum
   * payload for initiating secured admin sessions and enforcing role-based
   * permissions.
   *
   * Use this type strictly for sensitive authentication responses. Never
   * include or expose password hashes, email credentials, or administrative
   * secrets in responses of this type.
   *
   * All operations issuing this response must be tightly audited and comply
   * with system security policies. Use in conjunction with
   * ICommunityPlatformAdmin.ILogin for login request/response and in refresh
   * flows for session extension.
   *
   * - Prisma model: community_platform_admins
   * - Required for: POST /auth/admin/login, POST /auth/admin/join, POST
   *   /auth/admin/refresh, and any admin-auth session/refresh responses.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the platform admin as defined in the Prisma
     * model 'community_platform_admins'. UUID v4 format.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Admin email for authentication and contact (must be unique).
     *
     * Main login credential and unique identifier for admin authentication
     * workflows. Must be an official business/admin-controlled address and
     * must NOT be reused among other actors (members/moderators). Emails
     * are case-insensitive and subject to platform-specific domain
     * restrictions.
     *
     * Corresponds to the 'email' column in the community_platform_admins
     * table.
     */
    email: string & tags.Format<"email">;

    /**
     * Whether admin possesses unrestricted/emergency privileges.
     *
     * Used for distinction between regular and super admins. Superusers
     * bypass certain access restrictions for emergency and disaster
     * recovery flows, subject to audit. Superuser status is always required
     * for executing system-wide critical actions (e.g., platform
     * reconfiguration, recovery, or irreversible data manipulation).
     */
    superuser: boolean;

    /**
     * Account status indicator (e.g., active, suspended, deleted).
     *
     * Determines access and login capability for this admin. If not
     * 'active', login and platform operations are denied. Valid values
     * include 'active', 'suspended', 'deleted'. Business rules enforce
     * single active status at a time.
     *
     * Corresponds to the 'status' column in the community_platform_admins
     * table.
     */
    status: string;

    /**
     * Timestamp of admin account creation in ISO 8601.
     *
     * Records when the admin was first registered, critical for audit and
     * lifecycle tracking. Required for compliance documentation and
     * role/authority validation during investigations. Maps to 'created_at'
     * column.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the latest account modification (profile, status).
     *
     * Tracks the most recent update to the admin account, including any
     * status, email or role changes. Audit and history workflows rely on
     * this date for compliance and forensic purposes. Maps to 'updated_at'
     * column.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion or account revocation timestamp, null unless deleted.
     *
     * Indicates if the admin account has been logically removed (soft
     * deleted) for audit, compliance, or self-removal flows. Null if still
     * active or only suspended. Not available for reactivation unless
     * permitted by retention policy. Maps to 'deleted_at' column.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request schema for platform administrator login in the Reddit-like
   * community platform. Used in POST /auth/admin/login to authenticate a
   * platform admin using credentials. Credentials are validated against the
   * 'community_platform_admins' table in the Prisma schema.
   *
   * - 'email': Required. The unique email address of the admin attempting to
   *   log in. Must match the stored record in 'community_platform_admins'.
   * - 'password': Required. The admin's password, supplied in plain text and
   *   not pre-hashed. The backend is responsible for securely
   *   hashing/validating this password. Never expose this in response
   *   bodies.
   *
   * Do not include any additional authentication details or administrative
   * secrets. Used only for login.
   *
   * - Prisma model: community_platform_admins
   * - Required for: POST /auth/admin/login request body.
   */
  export type ILogin = {
    /**
     * Unique email address of the platform admin attempting to log in. Must
     * conform to email RFC format and match a stored record in
     * 'community_platform_admins'.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password for the platform admin. Sent by the client for
     * backend-side hashing/verification. Never echo this field in API
     * responses. Backend must securely handle this and never log or expose
     * plain text passwords.
     */
    password: string;
  };

  /**
   * Request schema for refreshing an admin's authentication/session. This
   * object is intentionally empty, as the refresh action relies on external
   * context (such as cookies or headers containing the refresh token) and
   * does not require a JSON body. No properties are accepted or required.
   * This DTO is used to maintain OpenAPI compatibility and type consistency
   * within the refresh endpoint for platform admins.
   */
  export type IRefresh = {};

  /**
   * Filter and pagination struct for searching and listing administrator
   * accounts on the Reddit-like platform. Used for admin dashboards,
   * analytics, compliance tasks, and administrator management interfaces. No
   * required properties; all fields are optional filters. All string
   * properties support partial match (ILIKE or trgm search when possible in
   * backend). Must strictly match schema fields from
   * `community_platform_admins`.
   *
   * - Email: filter by unique admin email substring or exact email.
   * - Status: filter by admin's account status (`active`, `suspended`, etc.)
   * - Superuser: filter for accounts with or without superuser capability.
   * - Created_at_from, created_at_to: filters by platform admin creation date,
   *   using inclusive lower/upper bounds (ISO date string, e.g.
   *   `2025-01-01T00:00:00Z`).
   * - Updated_at_from, updated_at_to: similar for last metadata update.
   * - Page: which page of paginated result (default 1). Must be positive
   *   integer.
   * - Limit: size of page (default 100, max 500 for large admin tables).
   * - Sort_by: which field to sort the returned admins (e.g. `created_at`,
   *   `updated_at`, `email`)
   * - Sort_dir: `asc` or `desc` (default: `desc`, most recent first).
   *
   * If a filter is not specified, it is ignored.
   */
  export type IRequest = {
    /** Admin email; partial or full match for search. */
    email?: string | undefined;

    /** Admin status filter (e.g., 'active', 'suspended'). */
    status?: string | undefined;

    /** Filter by superuser privilege (true/false). */
    superuser?: boolean | undefined;

    /** Inclusive lower bound for admin account creation date/time. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Inclusive upper bound for admin account creation date/time. */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Inclusive lower bound for admin account last update timestamp. */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Inclusive upper bound for admin account last update timestamp. */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Result page number for pagination (default: 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Result page size limit (default: 100, max: 500). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<500>)
      | undefined;

    /**
     * Which field to sort by—must be a valid column in the admin table,
     * such as 'created_at', 'updated_at', or 'email'.
     */
    sort_by?: string | undefined;

    /**
     * Sort direction: 'asc' for ascending, 'desc' for descending (default:
     * 'desc').
     */
    sort_dir?: "asc" | "desc" | undefined;
  };

  /**
   * DTO for updating a platform admin account.
   *
   * Permits an administrator or superuser to manage configuration and
   * lifecycle fields for another platform admin. Reflects business
   * constraints for updating status, superuser flag, or email. Used in
   * privileged admin management APIs for status changes, email corrections,
   * or superuser assignment/removal. Sensitive authentication changes (like
   * password hash) are NOT permitted here; those must use dedicated flows.
   *
   * Aligns directly to updatable fields in the 'community_platform_admins'
   * Prisma model: email, superuser, and status. Immutable columns such as
   * 'id', 'created_at', and 'deleted_at' MUST NOT be altered through this
   * DTO.
   *
   * Audit requirements: All changes are logged for compliance and review. No
   * direct exposure of authentication secrets (e.g., password_hash). Partial
   * updates permitted; at least one property must be provided per call.
   */
  export type IUpdate = {
    /**
     * (Optional) Update email for this admin. Must be unique and official.
     *
     * When present, supersedes prior email, subject to validation and
     * business rules. Platform consistency and audit policies enforced.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * (Optional) Assign or remove superuser/emergency privilege.
     *
     * Superuser status enables or disables ability to perform unrestricted
     * system actions. Platform-specific policy may restrict who can
     * assign/remove this flag.
     */
    superuser?: boolean | undefined;

    /**
     * (Optional) Set account status ('active', 'suspended', 'deleted').
     *
     * Controls login and platform operation access. Update triggers audit
     * recording and may affect access to critical systems.
     */
    status?: string | undefined;
  };

  /**
   * Summary DTO for platform administrator users.
   *
   * Includes basic information for listing or summary display of admin
   * accounts.
   *
   * References the core admin fields: ID, email, superuser flag, status, and
   * core audit timestamps for high-level compliance and account management.
   */
  export type ISummary = {
    /**
     * Unique identifier for the administrator account.
     *
     * This value is globally unique and is the primary key of the admin
     * entity in the database.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Administrator's email address. Used for login and contact. Must be
     * unique across all admin accounts.
     */
    email: string & tags.Format<"email">;

    /**
     * Indicates whether this admin has superuser/ultimate permissions
     * across the platform.
     *
     * Superuser admins can override platform-level controls and are
     * permitted all admin-restricted actions. Non-superuser admins have
     * more restricted rights and may be limited for compliance and audit
     * separation of duties.
     */
    superuser: boolean;

    /**
     * Current status of the admin account. Typical values include 'active',
     * 'suspended', or 'deleted'. Determines accessibility and participation
     * in privileged workflows.
     */
    status: string;

    /**
     * Timestamp of when the admin account was created.
     *
     * This is recorded in UTC and is not editable.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * The most recent time the admin's record was updated, such as status
     * change or credential update.
     *
     * Always in UTC. Used for audit and compliance tracking.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for soft deletion, indicating when this admin was
     * deactivated or scheduled for erasure.
     *
     * Null if active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
