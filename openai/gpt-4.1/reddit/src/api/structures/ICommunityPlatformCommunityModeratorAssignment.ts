import { tags } from "typia";

/**
 * Moderator assignment record linking a platform member to a specific community
 * and moderator role. Corresponds directly to a row in
 * community_platform_community_moderator_assignments.
 *
 * Includes assignment period, assigned role, assignment/removal context, and
 * audit fields for tracking. Nullable end_at or note fields indicate open-ended
 * or completed/terminated assignments.
 *
 * Used for displaying moderator teams, assignment audit, and role-based
 * permission logic per community.
 *
 * All properties map directly to columns in the referenced Prisma model.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityModeratorAssignment = {
  /** Primary Key. Unique identifier for the moderator assignment (UUID). */
  id: string & tags.Format<"uuid">;

  /**
   * Community for which moderation is assigned (UUID reference to
   * community_platform_communities.id).
   */
  community_id: string & tags.Format<"uuid">;

  /** Assigned member (UUID reference to community_platform_members.id). */
  member_id: string & tags.Format<"uuid">;

  /**
   * Moderator role (e.g., owner, moderator, trial_mod, etc.). Defines
   * permissions and hierarchy within the community.
   */
  role: string;

  /**
   * Admin/moderator who assigned this moderator role (UUID). For audit and
   * permission tracking.
   */
  assigned_by_id: string & tags.Format<"uuid">;

  /**
   * Assignment start time. ISO 8601 UTC timestamp for when this moderator
   * role took effect.
   */
  start_at: string & tags.Format<"date-time">;

  /**
   * Assignment end time (timestamp or null). If null, this assignment is
   * still active.
   */
  end_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Short note for this assignment. May include reason, context, or removal
   * comment. Optional.
   */
  note?: string | null | undefined;

  /** Record creation timestamp (UTC, ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last update to this record (UTC, ISO 8601). */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCommunityModeratorAssignment {
  /**
   * Request DTO for searching/filtering moderator assignments in the
   * community_platform_community_moderator_assignments table.
   *
   * All properties are optional filters for advanced search and pagination.
   * No property is strictly required; filters may be combined. Pagination is
   * enforced through page and limit. If not provided, system defaults are
   * applied.
   *
   * See detail in associated community and moderation assignment management
   * flows.
   */
  export type IRequest = {
    /**
     * Unique identifier (UUID) of the community to search moderator
     * assignments for.
     */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /** Unique identifier (UUID) of the member being searched or filtered. */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Moderator role to filter by (e.g., 'owner', 'moderator',
     * 'trial_mod').
     */
    role?: string | undefined;

    /**
     * Unique identifier (UUID) of the admin or moderator who assigned this
     * moderator role. Used as a filter.
     */
    assigned_by_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Current status to filter assigned moderator records (e.g., 'active',
     * 'ended').
     */
    status?: string | undefined;

    /**
     * ISO 8601 timestamp to filter assignments whose start_at is after this
     * value.
     */
    start_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 timestamp to filter assignments whose start_at is before
     * this value.
     */
    start_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 timestamp to filter assignments with end_at after this
     * value; useful for finding ended assignments in a window.
     */
    end_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 timestamp to filter assignments with end_at before this
     * value.
     */
    end_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Partial or full search within the assignment note for keyword-based
     * search.
     */
    note?: string | undefined;

    /** Page number to retrieve (pagination). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records per result page (pagination). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Column name to sort results by, such as 'created_at', 'updated_at',
     * 'start_at', or 'end_at'.
     */
    order_by?: string | undefined;

    /** Sort direction: ascending or descending. */
    order_dir?: "asc" | "desc" | undefined;
  };

  /**
   * DTO representing creation information for assigning a platform member as
   * a moderator of a specific community. Maps directly to the
   * 'community_platform_community_moderator_assignments' Prisma schema table.
   * Used for assignment creation, onboarding of moderators, and management
   * workflows by admins. All critical business rules for relationships,
   * permission levels, and audit logging enforced. The assigning actor ID is
   * provided by authentication context/service, not by client. Note that
   * assignment is to a community context, but the community_id is inferred
   * from route or path context, NOT included directly. Includes audit and
   * relationship fields. Does not permit inclusion of fields managed by the
   * system (e.g., created_at, updated_at) or immutable/permanent fields not
   * set at creation.
   */
  export type ICreate = {
    /**
     * The unique identifier of the platform member being assigned the
     * moderator role to a specific community. Must reference an existing
     * member in the 'community_platform_members' table.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * The moderator role assigned for the community (e.g., 'owner',
     * 'moderator', 'trial_mod', etc.). Role definitions determine the level
     * of permission and hierarchy. String value must match business logic
     * constraints.
     */
    role: string;

    /**
     * Assignment start time for the moderator role, in ISO 8601 format with
     * timezone. Used for audit and activation logic.
     */
    start_at: string & tags.Format<"date-time">;

    /**
     * Optional short reason or note for assignment/removal. Supplies
     * justification or explanation for the action. Nullable field with a
     * maximum reasonable length (e.g., 500 characters).
     */
    note?: string | null | undefined;
  };

  /**
   * DTO representing permitted updatable fields for an existing moderator
   * assignment in a community. Maps directly to the updatable columns in
   * 'community_platform_community_moderator_assignments' (excluding audit and
   * system-managed fields such as created_at, updated_at, and primary key
   * ids). Used in updating assignments for role change, truncating/modifying
   * end date, or attaching justification notes. Must follow permission policy
   * for who may update. All properties optional and validate business
   * logic/rule compliance. Does not permit modification of assignment
   * relationships (e.g., cannot change assigned member or community for
   * existing record).
   */
  export type IUpdate = {
    /**
     * Updates the moderator role for the assignment (e.g., promoting from
     * 'trial_mod' to 'moderator', or changing to 'owner'). String value
     * must follow platform business rules for allowed roles.
     */
    role?: string | undefined;

    /**
     * If assignment ends (due to removal, resignation, etc.), this field
     * specifies the time the assignment ended. Nullable: set for concluded
     * assignments only, otherwise omitted.
     */
    end_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional note or reason for modifying the assignment or for removal.
     * May document rationale for audit or compliance tracking. Nullable
     * field.
     */
    note?: string | undefined;
  };

  /**
   * Summary view of a community moderator assignment for listings or
   * administrative review.
   *
   * Represents a minimal, efficient version of the
   * community_platform_community_moderator_assignments entity, focusing on
   * the core identifying fields, role metadata, and assignment timing. Used
   * primarily in paginated list results, filter queries, and management
   * dashboards where detailed profile or audit fields are not required.
   * Follows the structure defined by the Prisma model's main columns,
   * omitting navigation properties and heavy join data. This summary enables
   * quick assessments of current and past moderation coverage, assignment
   * validity, and compliance with community governance rules. Refer to the
   * Prisma schema's comments for in-depth documentation per column. All
   * properties present in this summary exist on the original table and are
   * required for reconstruction of moderator listings and assignment
   * workflows. Nullability for fields like 'end_at' and 'note' matches their
   * nullable types in the table to allow for flexible, audit-friendly status
   * tracking.
   *
   * See also: https://github.com/wrtnlabs/autobe
   */
  export type ISummary = {
    /**
     * Unique identifier of the moderator assignment record.
     *
     * Corresponds to the 'id' column in
     * community_platform_community_moderator_assignments. Used as the
     * primary key for referencing this assignment from the API and for
     * audit purposes.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the community the moderation assignment is for.
     *
     * References the 'community_id' in
     * community_platform_community_moderator_assignments table. This
     * indicates which community this assignment applies to.
     */
    community_id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the member who is assigned as a moderator.
     *
     * Corresponds to the 'member_id' in
     * community_platform_community_moderator_assignments.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * Moderator role type assigned for this community (owner, moderator,
     * trial_mod, etc.).
     *
     * Represents the level or nature of moderation privileges and is used
     * to determine scope within the community for this assignment. Derived
     * from the 'role' field in
     * community_platform_community_moderator_assignments.
     */
    role: string;

    /**
     * Unique identifier (UUID) of the admin/moderator who assigned this
     * moderation role.
     *
     * References 'assigned_by_id'. Critical for audit trails and role
     * delegation review.
     */
    assigned_by_id: string & tags.Format<"uuid">;

    /**
     * Timestamp representing when this moderator assignment started.
     *
     * Directly from the 'start_at' column in the corresponding table. Used
     * for tracking moderator tenure.
     */
    start_at: string & tags.Format<"date-time">;

    /**
     * If set, represents when this moderator assignment ended (due to
     * removal, resignation, or role change). Otherwise, null for active
     * assignments.
     *
     * Mapped from 'end_at' in the schema. Used to discern current vs.
     * historical assignments.
     */
    end_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Short note providing reason or context for the assignment or its
     * removal/resignation.
     *
     * Optional as in 'note' column, can contain additional information
     * about assignment changes or related events.
     */
    note?: string | null | undefined;

    /**
     * Timestamp when the assignment record was created.
     *
     * Matches 'created_at' in the database and is used for record-keeping
     * and timeline audit.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the most recent update to this moderator assignment
     * record.
     *
     * Pulled from 'updated_at' column in the associated table.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
