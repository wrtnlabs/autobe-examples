import { tags } from "typia";

/**
 * Represents a single karma penalty applied to a member for rules violations or
 * moderation actions. Fields include member, (optional) community, type,
 * status, value (amount/duration), reason, and application/expiration
 * timestamps. Based on the community_platform_karma_penalties schema. Used for
 * audit, enforcement, or analytics to trace sanctions and feature gating for
 * users. Business logic constrains type, value, and status validity. Does not
 * include sensitive profile/member details beyond penalized party.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformKarmaPenalty = {
  /** Primary key. The unique UUID identifier for this karma penalty record. */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the penalized member's ID in community_platform_members.
   * Indicates who is subject to the penalty.
   */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * Reference to the affected community (if any); nullable for global
   * penalties. If set, penalty applies only in this community.
   */
  community_platform_community_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Type of penalty action, e.g. 'deduction', 'suspension'. This value
   * conveys the punishment mechanism; constrained by business logic.
   */
  penalty_type: string;

  /**
   * The numeric value of the penalty—negative for deductions, positive as
   * duration for suspensions (if applicable). Interpreted by penalty_type.
   */
  penalty_value: number & tags.Type<"int32">;

  /**
   * Human-readable explanation for why the penalty was applied. Entered by
   * the moderator or admin issuing the penalty.
   */
  penalty_reason: string;

  /**
   * Current status of the penalty: 'active', 'expired', 'revoked', etc.
   * Drives enforcement/compliance logic.
   */
  penalty_status: string;

  /** Timestamp when the penalty was originally applied. */
  applied_at: string & tags.Format<"date-time">;

  /**
   * Nullable. If penalty expires, timestamp for expiration; otherwise null
   * for permanent penalties.
   */
  expires_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Timestamp for penalty record creation. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for logical deletion (soft delete) of this penalty. Null if
   * still active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformKarmaPenalty {
  /**
   * Request body for filtering and paginated searching of karma penalties in
   * the community_platform_karma_penalties table. Each property corresponds
   * to a valid query/filter parameter. This DTO is used in admin or moderator
   * workflows for listing, reviewing, and auditing penalties across members
   * and communities. All properties are optional except for pagination;
   * combined filters allow for targeted audits and enforcement checks.
   */
  export type IRequest = {
    /**
     * The unique identifier of the member whose penalty records are being
     * requested or filtered. Used to scope the search to a specific
     * platform user.
     */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * The unique identifier of the target community to which the penalty is
     * scoped. If provided, restricts the search to penalties only within
     * this community context; if null, penalties may be global or
     * unscoped.
     */
    community_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The type of penalty such as deduction or suspension. Used as a filter
     * to restrict results to penalties of a particular category.
     */
    penalty_type?: string | undefined;

    /**
     * Filter for the penalty status (e.g., 'active', 'expired', 'revoked').
     * Allows searching for currently active, expired, or manually revoked
     * penalties.
     */
    penalty_status?: string | undefined;

    /**
     * ISO 8601 timestamp; if specified, only returns penalties applied
     * after this date. Used for time-range or audit filtering.
     */
    applied_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 timestamp; only penalties applied before this date are
     * returned. Used for narrowing results to a date window.
     */
    applied_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Page number for pagination. Used in conjunction with limit to page
     * results.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * The number of penalty records to return per page. Used to control
     * pagination size.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * The property by which to order penalty records, e.g. 'applied_at',
     * 'penalty_value'.
     */
    sort_by?: string | undefined;

    /**
     * The direction of result sorting: ascending (asc) or descending
     * (desc).
     */
    sort_direction?: "asc" | "desc" | undefined;
  };

  /**
   * Create DTO for a karma penalty record in
   * community_platform_karma_penalties.
   *
   * This type is used to create a new penalty entry assigning a deduction or
   * restriction to a platform member, optionally scoped to a community. It
   * captures all business-required fields for penalty creation and aligns
   * with the schema. Referenced members and communities are validated for
   * existence and permissions prior to creation.
   *
   * Status and timestamps determine enforcement windows and permanence. All
   * business rules and relationships must be respected for policy
   * compliance.
   */
  export type ICreate = {
    /**
     * ID of the member subject to the penalty. References
     * {@link community_platform_members.id}.
     *
     * This field is required and ensures penalty tracking is always
     * associated with a valid user account. Used as a foreign key for
     * relational integrity with user/member tables.
     *
     * Must be a valid, existing member UUID.
     */
    community_platform_member_id: string & tags.Format<"uuid">;

    /**
     * Optional. Specify the community if the penalty is community-scoped.
     * Set to null for global platform-wide penalty.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Type of penalty. Allowed (per business logic): 'deduction',
     * 'suspension', etc.
     *
     * Used to apply different business rules or restrictions.
     */
    penalty_type: string;

    /**
     * Numeric value for the penalty. Negative for deduction, duration if
     * suspension. Typically enforced via business rules. E.g. -10 for
     * deduction, 7 for 7-day suspension.
     */
    penalty_value: number & tags.Type<"int32">;

    /**
     * Detailed human-readable reason for the penalty. Required. This should
     * give clear context for audit, user notification, or compliance
     * review.
     */
    penalty_reason: string;

    /**
     * Current penalty status. Allowed values: 'active', 'expired',
     * 'revoked'. Sets how penalty is enforced in platform logic.
     *
     * Status must be managed according to business transitions (e.g.,
     * active to expired when end time is reached).
     */
    penalty_status: string;

    /**
     * ISO8601 timestamp for when the penalty is applied/starts. Used for
     * audit and real-time logic.
     */
    applied_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for when penalty ends/auto-expires. Null for permanent
     * penalties.
     */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Update DTO for an existing karma penalty record in
   * community_platform_karma_penalties.
   *
   * All fields are optional; only supplied fields are changed. Used for
   * resolving appeals, correcting penalty data, enforcing early expiry or
   * status transitions (e.g., revocation or reinstatement).
   *
   * Business rules may restrict which fields can be updated based on current
   * status or timing in the workflow. Every update is subject to audit and
   * compliance review for traceability.
   */
  export type IUpdate = {
    /** (Optional) Update the type of penalty if allowed by business logic. */
    penalty_type?: string | undefined;

    /**
     * (Optional) Update the penalty value—for corrections or adjustment
     * after review.
     */
    penalty_value?: (number & tags.Type<"int32">) | undefined;

    /**
     * (Optional) Update the reason for the penalty—e.g., additional
     * context, correction, or appeal resolution.
     *
     * Should reflect accurate reasoning for compliance and audit trails.
     */
    penalty_reason?: string | undefined;

    /**
     * (Optional) Update the status—valid statuses per business logic:
     * 'active', 'expired', 'revoked'. Used for appeal, manual expiry, or
     * reinstatement workflows.
     */
    penalty_status?: string | undefined;

    /**
     * (Optional) Change the application timestamp. Used in correction
     * workflows or upon reactivation of a penalty.
     */
    applied_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Modify the penalty's expiration time. Null for
     * indefinite/never expires.
     */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary object for a karma penalty, used in paginated listings.
   *
   * References the 'community_platform_karma_penalties' schema. Surface-level
   * details for audit, member penalty dashboard, and profile restriction
   * views. Includes key identifiers, status, reason, and business-relevant
   * dates.
   */
  export type ISummary = {
    /**
     * Unique identifier for the karma penalty record.
     *
     * References 'id' from the Prisma community_platform_karma_penalties
     * table. Used for reliable referencing, detail lookups, and audit
     * correction.
     */
    id: string & tags.Format<"uuid">;

    /**
     * ID of the member who received this penalty.
     *
     * Corresponds to 'community_platform_members.id' and supports both user
     * restriction workflows and profile penalty displays.
     */
    community_platform_member_id: string & tags.Format<"uuid">;

    /**
     * Optional ID of the community where the penalty was applied or null
     * for global/platform-wide penalties.
     *
     * Used in community-scoped moderation and policy enforcement to
     * distinguish between global and local penalties.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Business type or category of penalty (e.g., 'deduction',
     * 'suspension').
     *
     * Referenced in policy, enforcement, and compliance flows. Free-form
     * string controlled by business enums. Example: 'suspension',
     * 'deduction', 'temporary_lock'.
     */
    penalty_type: string;

    /**
     * Numeric value of the penalty. Negative for deduction, positive for
     * karma awards, or integer (duration) for some penalty types.
     *
     * Represents the scale of the penalty in platform units (e.g., karma
     * points removed or number of days suspended as per penalty_type).
     */
    penalty_value: number & tags.Type<"int32">;

    /**
     * Human-readable reason for assigning this penalty.
     *
     * Used in user notices, moderator dashboards, and audit logs to clarify
     * why the penalty was assigned. Typically provided by the moderator or
     * admin assigning the penalty.
     */
    penalty_reason: string;

    /**
     * The status of this penalty ('active', 'expired', 'revoked' etc).
     *
     * Business enums that dictate if the penalty is still in effect, has
     * been lifted, or was removed following an appeal.
     */
    penalty_status: string;

    /**
     * Timestamp indicating when the penalty was applied.
     *
     * Tracks when the penalty began. Used for analytics, appeal windows,
     * and duration calculations.
     */
    applied_at: string & tags.Format<"date-time">;

    /**
     * When the penalty expires or ends. Null for permanent penalties.
     *
     * Temporary penalties (such as time-based suspensions) will be set;
     * permanent bans/deductions leave this as null.
     */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp for record creation for compliance and audit.
     *
     * May match 'applied_at' in most use cases; represents DB row
     * initialization.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for soft deletion of this penalty. Null for active/visible
     * entries.
     *
     * Soft-deletes support transparency and regulatory retention.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
