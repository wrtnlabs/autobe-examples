import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Detailed metadata for a community moderator account assignment. Maps to the
 * 'community_platform_moderators' Prisma model, which tracks a member's
 * assignment as a moderator within a particular community (by community_id).
 * Includes authentication and permission fields, relationship to member and
 * community, unique email, account status, and audit timestamps, plus a
 * soft-delete marker. Password hash is NOT included for security; always omit.
 * This schema is used for responses and management interfaces, and should
 * reference only actual Prisma columns unless computed fields are required by
 * the API business logic (in which case, these must be separately documented).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformModerator = {
  /** Primary key. Unique identifier for moderator account/assignment. */
  id: string & tags.Format<"uuid">;

  /**
   * Related member entity acting as basis for authentication and core
   * participation. References community_platform_members.id.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * Community this moderator assignment applies to. References
   * community_platform_communities.id.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Moderator's email address (used for authentication/notification). Must be
   * unique among all moderator assignments. Must match related member's
   * email.
   */
  email: string & tags.Format<"email">;

  /**
   * Moderator account status: 'active', 'suspended', 'resigned', etc. Used
   * for permission enforcement and incident response.
   */
  status: string;

  /** Timestamp for moderator account assignment/creation. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for the last update to the assignment or moderator record. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp marking soft deletion; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformModerator {
  /**
   * Data Transfer Object for moderator registration (join) workflow on the
   * Community Platform.
   *
   * This object is used in the API that allows a new moderator to be created.
   * Required fields include:
   *
   * - 'email': Moderator's unique email address, used for authentication
   *   (format: email).
   * - 'password': The moderator's chosen password (plain text, format:
   *   password; the server hashes it).
   * - 'community_id': UUID of the community where moderator is assigned.
   *
   * This object must comply with business validation: referenced member
   * account must already exist and be verified for the given email, and the
   * community must be valid before moderator assignment is accepted. This
   * schema is directly mapped to onboarding operations for community
   * moderator roles.
   */
  export type IJoin = {
    /**
     * Email address of the moderator. Must be unique among all moderators
     * and match the email used for membership registration. Used for
     * authentication and notifications.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password which will be securely hashed before storage in
     * the system. Used for moderator authentication. Plain text password is
     * never stored in the database.
     */
    password: string & tags.Format<"password">;

    /**
     * UUID of the community to which the moderator will be assigned. Must
     * reference an existing community where this member will serve as a
     * moderator.
     */
    community_id: string & tags.Format<"uuid">;
  };

  /**
   * Authorization response containing JWT token and moderator account
   * metadata.
   *
   * Returned after successful moderator authentication (login, join, or
   * refresh). The object reflects the current authenticated session and
   * exposes the moderator's basic metadata and permissions context.
   *
   * Sensitive fields (such as password_hash) are never exposed in this DTO.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated moderator. Matches 'id' from
     * the community_platform_moderators table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Related member entity acting as basis for authentication and core
     * participation. References community_platform_members.id.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * UUID of the community the moderator is assigned to. Used to scope
     * moderator permissions.
     */
    community_id: string & tags.Format<"uuid">;

    /**
     * Moderator's email address, as used for authentication in the
     * 'community_platform_moderators' table.
     */
    email: string;

    /**
     * Account status for the moderator (e.g., 'active', 'suspended',
     * 'resigned'). Comes from the 'status' field in the moderator table.
     */
    status: string;

    /**
     * Timestamp when the moderator account was created, as stored in
     * 'created_at' column.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the last update to this moderator account, from
     * 'updated_at' column.
     */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp marking soft deletion; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Moderator login request. Submit email and plain-text password to
   * authenticate and request authorization tokens. Email is case-insensitive
   * and must refer to an existing moderator account; password must be valid
   * according to platform policy.
   */
  export type ILogin = {
    /**
     * Moderator login email. Must be matched against the unique 'email' in
     * the moderator table.
     */
    email: string;

    /**
     * Plain-text password for authentication. Never stored or exposed
     * except in transit for login. Must be validated and hashed securely
     * before storage or session issue.
     */
    password: string;
  };

  /**
   * Schema for refreshing a moderator's session token.
   *
   * This DTO is used in the moderator authentication flow to request a new
   * JWT/refresh token. It does not require any properties in the POST body,
   * as the refresh token is typically supplied via HTTP-only cookie or
   * Authorization header. Empty object indicates no input requirement.
   */
  export type IRefresh = {};

  /**
   * Request/Query DTO for searching, filtering, and paginating community
   * platform moderators (community_platform_moderators). All fields are
   * optional unless required by application. Supports paging, sorting, and
   * filtering by various moderator record fields. Reference: Prisma model
   * 'community_platform_moderators'.
   */
  export type IRequest = {
    /**
     * Page number for pagination. Starts from 1 for the first page.
     * Optional. Used to paginate through large lists of moderator
     * assignments or moderator accounts.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of moderator records to return per page. Optional.
     * Controls page size for pagination. Typically defaults to a reasonable
     * value like 20-100.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Filter for moderator account status (e.g., 'active', 'suspended',
     * 'resigned'). Optional. Only returns moderators whose status matches
     * the given value, if supplied.
     */
    status?: string | undefined;

    /**
     * Filter for moderators assigned to a given community, by community id
     * (UUID). Optional.
     */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter for moderators matching a given platform member id (UUID).
     * Optional.
     */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter for moderator accounts matching a given email address (may
     * support partial match or full match depending on business logic).
     * Optional.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Field by which to sort search results. Optional. 'created_at' sorts
     * by creation timestamp, 'updated_at' sorts by last update timestamp.
     */
    sort_by?: "created_at" | "updated_at" | undefined;

    /**
     * Sort order for the sort_by field. Optional. 'asc' for ascending,
     * 'desc' for descending sort.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Update payload for a moderator account in the Reddit-like community
   * platform. This corresponds to the `community_platform_moderators` Prisma
   * model, enabling updates to moderator-specific properties including
   * account status, notification email, and other editable account
   * attributes, while disallowing immutable fields such as the unique
   * identifier, member_id, password hash, and creation timestamps.
   *
   * All updates must comply with platform role management, audit, and
   * moderation assignment rules. Typical fields for update include:
   *
   * - Status: String; current state such as `active`, `suspended`, or
   *   `resigned` (immutably tracked in the database for compliance and
   *   moderation process enforcement). Only allowed status transitions per
   *   moderation policy.
   * - Email: String; must remain unique among moderators and be used for
   *   authentication and notification. Updatable by admin or platform
   *   operator only.
   * - Deleted_at: Nullable DateTime; may be set to indicate soft deletion of
   *   the moderator role/assignment when it is removed or resigned. Not set
   *   by moderator directly but by platform operator through privileged
   *   workflow.
   *
   * Other fields such as assigned communities, privileges, or assignment
   * dates cannot be updated using this DTO and are managed by separate
   * moderator assignment endpoints.
   *
   * All update operations are strictly permission-controlled, audited, and
   * may be subject to further workflow triggers (such as revoking moderator
   * access or sending verification notifications). Any attempt to update
   * restricted or non-existent fields will result in validation error.
   *
   * Business context: The update DTO is used predominantly by admin
   * interfaces, platform-wide role management flows, and in edge cases,
   * automated migration or audit tooling, but not by moderators themselves
   * for self-service. All changes are subject to audit and platform
   * traceability.
   */
  export type IUpdate = {
    /**
     * Moderator's authentication and notification email. Must remain
     * unique. Only updatable when changing authentication address or on
     * admin request. Platform operator only; not user-editable in
     * self-service flow.
     */
    email?: string | undefined;

    /**
     * Moderator's account status. Acceptable values include `active`,
     * `suspended`, `resigned`, and potentially others depending on business
     * extension. Controls authentication, dashboard access, and workflow
     * participation. Immutable except via admin-initiated update.
     */
    status?: string | undefined;

    /**
     * Timestamp used for soft-deletion or to mark the moderator as
     * resigned/removed. Managed by admin. If set, the moderator credential
     * is decommissioned in platform workflows. Nullable.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary record for community moderator assignments as defined in the
   * 'community_platform_moderators' table in the Prisma schema. This summary
   * DTO provides key fields for listing, searching, and referencing moderator
   * assignments in admin and moderation tools.
   *
   * Excludes privilege escalation details and confidential authentication
   * material. Used in dashboards, member-moderator linking, and compliance
   * audit workflows. Tied strictly to one community and one member per
   * assignment, reflecting permissions logic and unique assignment
   * enforcement at the DB level.
   */
  export type ISummary = {
    /**
     * Unique identifier for the community_platform_moderators record in
     * UUID format. This ID is used as the primary key for the moderator
     * assignment in the system. Not to be confused with the underlying
     * member id.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Foreign key reference to the member record
     * (community_platform_members.id) who owns this moderator assignment.
     * Used for tying moderator-specific privileges back to member
     * credentials and for ensuring only one active moderator per member per
     * community.
     *
     * Critical for enforcing unique moderator assignments and permissions
     * scoping within a community.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * Foreign key reference to the target community
     * (community_platform_communities.id) in which the moderator is active.
     * Moderation privileges are scoped per community and this field
     * strictly ties assignments to each community context.
     */
    community_id: string & tags.Format<"uuid">;

    /**
     * Email address for the moderator, which must match the associated
     * member email and be unique. Used for authentication and notification.
     * Not public-facing.
     */
    email: string & tags.Format<"email">;

    /**
     * Moderator account status, such as 'active', 'suspended', or
     * 'resigned'. Determines moderation powers within assigned communities
     * and is used for compliance and permissions checks.
     *
     * This field is enforced by business rules for role management and
     * incident response.
     */
    status: string;

    /**
     * Timestamp when this moderator assignment was created. Useful for
     * auditing and workflow tracking. Set automatically by the backend.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp for the moderator record. Indicates when
     * assignment details, permissions, or status were last changed.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Indicates whether the moderator assignment has been soft deleted,
     * removed, or resigned. Null if the record is active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
