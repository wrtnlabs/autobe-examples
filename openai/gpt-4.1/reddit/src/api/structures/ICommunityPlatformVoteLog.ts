import { tags } from "typia";

/**
 * Voting log record for post or comment actions. Contains auditing information
 * for upvotes, downvotes, and revocations by platform members. Referenced from
 * vote log page listings.
 *
 * All fields mapped from the community_platform_vote_logs Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformVoteLog = {
  /** Unique identifier for the vote log entry. */
  id: string & tags.Format<"uuid">;

  /** Member whose action this vote log entry refers to. */
  community_platform_member_id: string & tags.Format<"uuid">;

  /** Post being voted on (if relevant). Nullable for comment votes. */
  community_platform_post_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /** Comment being voted on (if relevant). Nullable for post votes. */
  community_platform_comment_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /** "post" or "comment"â€”type of the vote action logged. */
  vote_type: string;

  /** Action performed: upvote (1), downvote (-1), or zero (0) for revocation. */
  vote_value: number & tags.Type<"int32">;

  /**
   * Optional anonymized IP address or device fingerprint for abuse or
   * anti-bot analysis.
   */
  ip_fingerprint?: string | null | undefined;

  /** Optional user agent string for device/user analysis. */
  user_agent?: string | null | undefined;

  /**
   * Result of attempted voting action (e.g., "success", "duplicate",
   * "revoked", "error").
   */
  action_status: string;

  /**
   * Human-readable message for the audit log, describing action outcome or
   * error.
   */
  action_message?: string | null | undefined;

  /** Time this action was logged. */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformVoteLog {
  /**
   * Criteria for advanced search, filtering, and pagination of the
   * community_platform_vote_logs voting log table for moderation, audit, and
   * forensics. This DTO supports admin/moderator dashboards and analytics
   * tools for querying vote activity. All fields are optional - apply filters
   * as needed.
   *
   * Fields support restricting results by page, sort, member, type, affected
   * content, value, action status, device info, and time window.
   */
  export type IRequest = {
    /**
     * Page number for pagination. Must be a positive integer. Indicates the
     * current result page; used for paginated voting log queries.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of records per page. Must be a positive integer (usually
     * limited by backend policy). Controls page size for search results.
     * Default platform value often used if unspecified.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Defines which property to sort voting logs by. Allowed values are
     * 'created_at' (sort by time of log creation), 'vote_type' (separates
     * post/comment votes), and 'vote_value' (up/down). Used for result
     * ordering, typically in analytics and moderation interfaces.
     */
    sort_by?: "created_at" | "vote_type" | "vote_value" | undefined;

    /**
     * Direction of sorting: 'asc' for ascending, 'desc' for descending.
     * Used in conjunction with 'sort_by' to control ordering of search
     * result lists.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Unique identifier of the member whose voting logs are being queried.
     * Allows filtering logs to a specific user. Refer to
     * community_platform_members.id for actual lookup.
     */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type of content associated with log search. Allows filtering logs by
     * whether the vote was on a post or comment. Only allowed values are
     * 'post' or 'comment'.
     */
    content_type?: "post" | "comment" | undefined;

    /**
     * ID of the specific post or comment for which voting logs are being
     * retrieved, depending on content_type. Allows focused investigation or
     * audit of single content items.
     */
    content_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Value of the vote operation. Allowed values: 1 for upvote, -1 for
     * downvote, 0 for revoked/removed. Useful for filtering for positive,
     * negative, or revoked vote events. Must match enum exactly.
     */
    vote_value?: 1 | -1 | 0 | undefined;

    /**
     * Search by action status category. Allowed values correspond to the
     * result of the voting operation: 'success' (vote recorded),
     * 'duplicate' (attempted duplicate), 'revoked' (vote removed), or
     * 'error' (problem).
     */
    action_status?: "success" | "duplicate" | "revoked" | "error" | undefined;

    /**
     * Optional search filter by anonymized or hashed IP/device fingerprint
     * for anti-abuse or forensics. Used by admins to correlate suspicious
     * or automated activity.
     */
    ip_fingerprint?: string | undefined;

    /**
     * Optional filter by user agent string as logged. Allows for
     * device/browser-specific query filtering.
     */
    user_agent?: string | undefined;

    /**
     * Include only voting logs created after this timestamp. ISO 8601
     * date-time format. Used for temporal drill down or incident
     * investigation.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Include only voting logs created before this timestamp. ISO 8601
     * date-time format. Allows bounding search results within a specific
     * incident or time window.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;
  };
}
