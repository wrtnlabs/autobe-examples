import { tags } from "typia";

/**
 * A full record of a moderation action performed on platform content or users.
 * Records the critical details for audit, compliance, and moderator analytics
 * purposes. Each action is linked to the acting user (moderator/admin), an
 * optional related post or comment, related report, specific business action,
 * an optional descriptive note, and a precise action timestamp. Only fields
 * defined in the Prisma schema for moderation actions are included (see schema
 * for full description and relationships).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformModerationAction = {
  /**
   * Primary key for the moderation action record, auto-generated by the
   * system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier of the moderator or admin who performed this action.
   * References admin or moderator user in the corresponding actor tables.
   */
  actor_id: string & tags.Format<"uuid">;

  /**
   * ID of the post affected by this moderation action, if any. Nullable if
   * the action does not relate to a post.
   */
  target_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * ID of the comment affected by this moderation action, if any. Nullable if
   * the action does not relate to a comment.
   */
  target_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * ID of the content report triggering this moderation action, if any.
   * Nullable if not applicable (e.g., action is manual, not from a report).
   */
  report_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of moderation action performed. System-defined values such as
   * 'remove_post', 'remove_comment', 'warn_user', 'ban_user', 'escalate',
   * 'dismiss', 'edit_content', 'pin', etc. See business and ERD documentation
   * for full allowed values. This field represents the business operation
   * classification.
   */
  action_type: string;

  /**
   * Optional free-form text describing the details or context of the
   * moderation action (e.g., reason for removal or escalation, moderator
   * notes, or audit context). Useful for compliance, transparency, and user
   * notification purposes.
   */
  description?: string | null | undefined;

  /**
   * Timestamp (UTC, RFC 3339) when this moderation action was
   * logged/performed.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformModerationAction {
  /**
   * Filtering and search criteria for retrieving a paginated list of
   * moderation actions from the community_platform_moderation_actions table.
   * Used by admin and moderator interfaces to support bulk review and audit
   * of moderation interventions across the platform, individual communities,
   * or for a specific user or content item. Fields should strictly match
   * filter and sort options supported by the backend, and only include
   * properties existing in the schema or documented in feature requirements.
   */
  export type IRequest = {
    /**
     * Unique identifier of the moderator or admin actor performing or
     * requesting search/filter. Used for log scoping or actor-based
     * filtering, but typically set by server/context not by client input.
     */
    actor_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter to moderation actions within a particular community.
     * If present, restricts action listing to that community's scope.
     */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type of moderation action. May be used as a filter for search/index:
     * e.g., 'remove_post', 'remove_comment', 'warn_user', 'ban_user',
     * 'escalate', 'dismiss', 'pin', 'edit_content', etc. Exact values may
     * be system-defined or business-specified.
     */
    action_type?: string | undefined;

    /**
     * Optional filter for actions against a specific post. Mutually
     * exclusive with target_comment_id in many search scenarios.
     */
    target_post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for actions against a specific comment. Mutually
     * exclusive with target_post_id in many search scenarios.
     */
    target_comment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional filter for moderation actions related to a specific report
     * or escalation.
     */
    report_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional text search for filtering actions with a matching
     * description or moderator note. May support partial matches or trigram
     * full-text search depending on backend implementation.
     */
    description_query?: string | undefined;

    /**
     * Optional UTC timestamp for filtering actions performed after a
     * certain point in time (inclusive). Format:
     * 'YYYY-MM-DDTHH:mm:ss.sssZ'.
     */
    start_time?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional UTC timestamp for filtering actions performed before a
     * certain point in time (inclusive). Format:
     * 'YYYY-MM-DDTHH:mm:ss.sssZ'.
     */
    end_time?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Field for sorting moderation actions. Typical values: 'created_at',
     * 'action_type', 'actor_id'. May support descending/ascending via
     * sort_order, or via field value (e.g., '-created_at').
     */
    sort_by?: string | undefined;

    /**
     * Order for sorting (ascending or descending). Applied to sort_by
     * field.
     */
    sort_order?: "asc" | "desc" | undefined;

    /**
     * Requested page number for paginated results. Defaults to 1 if not
     * specified.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum results per page for pagination; upper bound determined by
     * business rules.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;
  };

  /**
   * DTO for creating a new moderation action record in the moderation audit
   * log. Corresponds to the community_platform_moderation_actions table.
   * Recognizes all referential integrity and business policy rules, ensures
   * robust tracking and compliance for content safety workflows. This object
   * is tightly aligned to the business requirements for moderator action
   * logging and platform transparency. All foreign key UUIDs must reference
   * valid entities, and nullable fields support the various moderation
   * contexts (e.g., post, comment, ban, escalation or report-based actions).
   *
   * Includes only properties that actually exist on the Prisma
   * moderation_actions table—absolutely no invented or non-schema fields.
   * Audit-aware, security-aligned, and fully annotated for OpenAPI
   * integration.
   */
  export type ICreate = {
    /**
     * The UUID of the moderator or admin performing the moderation action.
     * This property links the action to its responsible actor, as required
     * by the Prisma schema.
     */
    actor_id: string & tags.Format<"uuid">;

    /**
     * The UUID of the post affected by the moderation action, if
     * applicable. Set to null if action targets a comment or user ban, not
     * a post.
     */
    target_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The UUID of the comment affected by the moderation action, if
     * applicable. Null if not targeting a comment.
     */
    target_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The UUID of the community_platform_reports record associated with
     * this moderation action, if applicable. Null for direct actions not
     * originating from a report.
     */
    report_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of moderation action. Typical values include: 'remove_post',
     * 'remove_comment', 'pin', 'warn_user', 'ban_user', 'escalate',
     * 'dismiss', 'edit_content', 'other'. This field drives workflow, audit
     * classification, and analytics.
     */
    action_type: string;

    /**
     * Free-form (optional) text describing the details or context for the
     * moderation action. Used to capture moderator notes, reasons, or
     * explanations. (nullable)
     */
    description?: string | null | undefined;
  };

  /**
   * DTO for updating an existing moderation action record. Mirrors only
   * properties present in the community_platform_moderation_actions table
   * that may be safely updated by moderators/admins—never introduces
   * non-schema fields. All updates are subject to business rules (e.g., which
   * fields are mutable), and audit tracks changes including the actor and
   * edit timestamps. This type ensures full schema compliance, traceability,
   * and OpenAPI integration with business-aligned documentation.
   *
   * No properties are required since updates are partial by intent (Patch
   * semantics), but all fields must exist in the source schema.
   */
  export type IUpdate = {
    /**
     * The UUID of the moderator/admin performing the update to this
     * moderation action. Used for audit tracking of record changes.
     */
    actor_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type of moderation action. This field can only be updated as
     * permitted by business rules, e.g., for correction or if action type
     * was entered incorrectly.
     */
    action_type?: string | undefined;

    /**
     * UUID of the post affected by this moderation action, if changing post
     * association (rare in practice).
     */
    target_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * UUID of the comment affected by the action, if updating association.
     * Nullable.
     */
    target_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * UUID of the related report, if re-linking this action to a different
     * or corrected report. Nullable.
     */
    report_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Updated or revised description text providing additional context or
     * correction to the moderation action audit record. Nullable.
     */
    description?: string | null | undefined;
  };

  /**
   * Summary of a moderation action record from the
   * community_platform_moderation_actions table. Provides a concise overview
   * including action type, affected content, and timestamps for audit and
   * list display. Does not contain full detail or sensitive notes. Actor IDs
   * are omitted for non-privileged consumption.
   */
  export type ISummary = {
    /**
     * Unique identifier for this moderation action (primary key of the
     * moderation_actions table).
     */
    id: string & tags.Format<"uuid">;

    /** Type of moderation action (e.g., remove_post, warn_user, escalate). */
    action_type: string;

    /** ID of targeted post (nullable if action is on a comment or ban). */
    target_post_id?: (string & tags.Format<"uuid">) | undefined;

    /** ID of targeted comment (nullable if action is on a post or user). */
    target_comment_id?: (string & tags.Format<"uuid">) | undefined;

    /** Reference to associated report (if any), nullable. */
    report_id?: (string & tags.Format<"uuid">) | undefined;

    /** Timestamp when the action was recorded. */
    created_at: string & tags.Format<"date-time">;
  };
}
