import { tags } from "typia";

/**
 * Represents a single subscription of a member to a community. Contains foreign
 * key references for member and community, timestamps for tracking when the
 * subscription was started or ended (for unsubscribed history), and supports
 * both active and deleted (unsubscribed) states for analytics and listing user
 * subscriptions. Used in member dashboard and subscription management flows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSubscription = {
  /** Unique identifier for this subscription record, assigned at creation. */
  id: string & tags.Format<"uuid">;

  /** UUID referencing the subscribed member (community_platform_members.id). */
  member_id: string & tags.Format<"uuid">;

  /**
   * UUID referencing the target community
   * (community_platform_communities.id).
   */
  community_id: string & tags.Format<"uuid">;

  /** Timestamp when this subscription was established. ISO 8601 format. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user unsubscribed (soft deleted). Null when
   * subscription is active. Used to distinguish between current and previous
   * subscriptions.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformSubscription {
  /**
   * Filtering and pagination criteria for searching community subscriptions.
   * Allows filtering by user, community, status, time range, and advanced
   * sorting for listing or dashboard usage. Intended to support both simple
   * and advanced queries on the subscriptions table.
   */
  export type IRequest = {
    /**
     * The UUID of the member whose subscriptions to filter. If null or
     * omitted, returns the subscriptions for the authenticated member only.
     * Used for admin or support scenarios.
     */
    member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional unique identifier to filter subscriptions to a specific
     * community.
     */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by the active/deleted status. Use 'active' for current
     * subscriptions, 'deleted' for unsubscribed history. If omitted,
     * returns all.
     */
    status?: string | undefined;

    /**
     * Return only subscriptions created on or after this timestamp. ISO
     * 8601, for date range filtering.
     */
    created_at_min?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Return only subscriptions created on or before this timestamp. ISO
     * 8601.
     */
    created_at_max?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter: only show subscriptions deleted (unsubscribed) at or after
     * this time. Allows querying for recent unsubscribes.
     */
    deleted_at_min?: (string & tags.Format<"date-time">) | undefined;

    /** Filter: only show subscriptions deleted at or before this time. */
    deleted_at_max?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Free-text search across community name or member display info. Used
     * for filtering by partial matches or advanced search capabilities.
     */
    search?: string | undefined;

    /**
     * Sort key for ordering results. Choose from 'created_at',
     * 'deleted_at', or 'community_name'.
     */
    sort_by?: "created_at" | "deleted_at" | "community_name" | undefined;

    /** Sort order: ascending ('asc') or descending ('desc'). */
    sort_order?: "asc" | "desc" | undefined;

    /** Page number for pagination. Defaults to 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records to return per page. Defaults to 20, max 100. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * DTO for creation of a new community subscription association. Used in
   * POST /communityPlatform/member/subscriptions. Only requires the target
   * community_id; all member information is derived from the current
   * authenticated user context.
   */
  export type ICreate = {
    /**
     * The UUID of the community to subscribe to. Must reference an existing
     * community. Required for creating a new community subscription.
     */
    community_id: string & tags.Format<"uuid">;
  };

  /**
   * DTO for updating a user's community subscription record. Used in
   * PUT/PATCH /communityPlatform/member/subscriptions/{subscriptionId} or
   * relevant admin flows. Only 'deleted_at' field is permitted for update, to
   * support soft-delete/reactivation. No other fields can be set by clients.
   */
  export type IUpdate = {
    /**
     * Indicates the logical deletion (unsubscription) time. If set to
     * timestamp, subscription is ended; if null, the subscription is
     * active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
