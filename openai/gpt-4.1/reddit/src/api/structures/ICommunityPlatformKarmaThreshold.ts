import { tags } from "typia";

/**
 * Karma threshold configuration entity.
 *
 * Represents a rule requiring a certain amount of karma for feature unlocks,
 * permissions, or content gating at the platform or community level. Used for
 * business logic such as requiring minimum karma before posting, voting, or
 * subscribing. Each row applies globally unless community_platform_community_id
 * is set, in which case it is scoped to a specific community. Thresholds are
 * referenced in feature access logic, permission checks, and analytics. Tied
 * directly to the community_platform_karma_thresholds Prisma model.
 *
 * See also: 'feature_lock_reason' gives user-facing feedback; 'threshold_type'
 * describes feature being gated. Enforced by privilege and content gating
 * flows. All date fields are in ISO8601 UTC format.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformKarmaThreshold = {
  /**
   * Primary Key.
   *
   * The unique identifier for the karma threshold record. Globally unique
   * UUID referencing this configuration row in the
   * community_platform_karma_thresholds table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional. Community to which threshold applies.
   *
   * If present, the threshold applies to the specified community (referencing
   * community_platform_communities.id). If null, the threshold is global for
   * the entire platform. Set to null for platform-wide thresholds or specify
   * a UUID for community-specific gating.
   */
  community_platform_community_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Business type/key for the threshold (e.g. 'post_creation',
   * 'comment_voting', 'subscription_unlock').
   *
   * Defines what feature, permission, or gate this threshold enforces. The
   * feature type must align with platform rules and should be unique per
   * community.
   */
  threshold_type: string;

  /**
   * The required karma value for this threshold.
   *
   * The integer number of points needed to unlock or pass the gate for the
   * feature type specified in threshold_type.
   */
  threshold_value: number & tags.Type<"int32">;

  /**
   * Optional business reason for feature lockout if karma is below threshold.
   *
   * Human-readable rationale explaining why the threshold exists or what
   * restriction is enforced when the user is locked out.
   */
  feature_lock_reason?: string | null | undefined;

  /** Timestamp when the karma threshold entry was created. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp for retention/deprecation tracking. Null means
   * active; if set, this karma threshold is no longer enforced.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformKarmaThreshold {
  /**
   * Search, filter, and pagination criteria for karma thresholds. This DTO
   * enables administrators to query the list of karma threshold settings
   * using filters for community, type, and custom sort orders, supporting
   * management and configuration of feature gating rules.
   */
  export type IRequest = {
    /**
     * Nullable UUID referencing the specific community the karma threshold
     * applies to. If omitted or null, applies platform-wide. Used for
     * filtering or targeting searches within a particular community's karma
     * restrictions.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /**
     * Business key for the type of karma threshold (e.g., 'post_creation',
     * 'comment_voting', 'subscription_unlock'). Used for filtering searches
     * by type or feature gating logic.
     */
    threshold_type?: string | undefined;

    /** Page number for paginated results. Optional. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of results per page in paginated responses. Optional. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sort specification (e.g., 'created_at', 'threshold_value',
     * ascending/descending). Optional.
     */
    sort?: string | undefined;
  };

  /**
   * Schema for updating fields of an existing karma threshold record in
   * community_platform_karma_thresholds. Used by admins to edit feature
   * gating configuration. Optional fields.
   */
  export type IUpdate = {
    /**
     * Business type/key for the threshold (e.g. 'post_creation',
     * 'comment_voting', 'subscription_unlock'). Uniquely identifies the
     * feature or business process governed by this threshold. Only
     * updatable by admin.
     */
    threshold_type?: string | undefined;

    /**
     * Required karma value for this threshold. Must be an integer. Used to
     * restrict/enable feature access. Only updatable by admin.
     */
    threshold_value?: (number & tags.Type<"int32">) | undefined;

    /**
     * Reason for gating associated with this threshold (human-readable,
     * optional). E.g., explanation to show users about karma block.
     * Optional field, updatable by admin.
     */
    feature_lock_reason?: string | null | undefined;
  };
}
