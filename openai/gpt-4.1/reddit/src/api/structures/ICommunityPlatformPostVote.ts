import { tags } from "typia";

/**
 * A single post vote record as stored in the community_platform_post_votes
 * table. Captures who voted, on which post, what value, and when the action
 * occurred. Enforces business logic of one vote per member per post, and
 * distinguishes between upvotes (+1) and downvotes (-1). Soft deletes handled
 * by deleted_at field.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPostVote = {
  /**
   * Primary key. Unique identifier for this post vote record. Corresponds to
   * community_platform_post_votes.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the post being voted on. Points to
   * community_platform_posts.id. Used to associate this vote with a specific
   * post.
   */
  community_platform_post_id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the member who cast the vote. Points to
   * community_platform_members.id. Used to track which member performed this
   * voting action.
   */
  community_platform_member_id: string & tags.Format<"uuid">;

  /**
   * Vote value: +1 for upvote, -1 for downvote. Required. No other values
   * permitted. Enforced via enum in application logic.
   */
  vote_value: -1 | 1;

  /** Timestamp when the vote action was created. ISO8601 format. Required. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the latest update to the vote (e.g., if value changed,
   * revoked, or other mutation). ISO8601 format. Required.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete field. If non-null, this vote is considered revoked/archived
   * and should not count for tallies or participatory calculations. Null when
   * active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformPostVote {
  /**
   * Filtering and pagination criteria for searching platform post votes
   * (community_platform_post_votes table). Permits advanced querying for
   * upvotes/downvotes, member-based filtering, status auditing, and
   * time-based analytics for moderation, admin, and reporting UI. All
   * properties must correspond to allowed columns and indexes in the schema.
   */
  export type IRequest = {
    /**
     * The unique identifier of the target post for which to search, filter,
     * or paginate vote records. Corresponds to community_platform_posts.id.
     * This is used when scoping query results to a single post.
     */
    community_platform_post_id: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the member who cast the vote. Optional
     * filter for showing only votes from a specific user. Corresponds to
     * community_platform_members.id.
     */
    community_platform_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Vote value filter: +1 for upvotes, -1 for downvotes. Optional input
     * to restrict search to upvotes, downvotes, or both.
     */
    vote_value?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional filter for vote status: e.g., 'active' (default), 'revoked',
     * or system-defined archival statuses if present in the application
     * logic.
     */
    status?: string | undefined;

    /**
     * Show votes created on or after this ISO8601 timestamp (inclusive).
     * Optional filter. Used for date-range paging/analytics.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Show votes created on or before this ISO8601 timestamp (inclusive).
     * Optional filter. Used for date-range paging/analytics.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Show votes updated on or after this ISO8601 timestamp (inclusive).
     * Optional filter for analytics or audit.
     */
    updated_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Show votes updated on or before this ISO8601 timestamp (inclusive).
     * Optional filter for analytics or audit.
     */
    updated_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If true, also include soft deleted (revoked) votes in results.
     * Default false. Optional.
     */
    deleted?: boolean | undefined;

    /**
     * Field by which to sort the results. Allowed values: 'created_at',
     * 'updated_at'. Optional.
     */
    sort_by?: "created_at" | "updated_at" | undefined;

    /**
     * Sort order, ascending or descending. Allowed values: 'asc', 'desc'.
     * Optional.
     */
    sort_order?: "asc" | "desc" | undefined;

    /** Result page number, for pagination. Default: 1. Optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum records per page, for pagination. Default: 20. Optional.
     * Enforced maximum is 100.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * DTO for casting a new vote (upvote or downvote) on a post, matching the
   * community_platform_post_votes schema.
   *
   * Only includes vote value; post association is set by the endpoint
   * context. Used by members to submit upvotes/downvotes, enforcing policy
   * for vote uniqueness and content ownership.
   */
  export type ICreate = {
    /**
     * Vote value for the post, indicating upvote (+1) or downvote (-1).
     *
     * Acceptable values are only 1 (for upvote) or -1 (for downvote). Must
     * match precise values, no deviation allowed.
     *
     * Used by authenticated members to create new vote records for a
     * specified post. Vote ownership, rate limits, and policy are enforced
     * at the application layer. Votes from post authors themselves are not
     * permitted.
     */
    vote_value: number & tags.Type<"int32">;
  };

  /**
   * DTO for updating or revoking an existing post vote, referencing the
   * community_platform_post_votes schema.
   *
   * Typically used when a member wants to change their previous vote for a
   * post, or remove (revoke) their vote entirely. Member identity and post
   * context are managed by endpoint context and authentication.
   */
  export type IUpdate = {
    /**
     * Updated vote value for the post. Should be +1 to indicate an upvote,
     * -1 for a downvote, or 0 if revoking a previous vote.
     *
     * Only the values 1, -1, or 0 are permitted. This value is strictly
     * required when updating a vote.
     */
    vote_value: number & tags.Type<"int32">;
  };
}
