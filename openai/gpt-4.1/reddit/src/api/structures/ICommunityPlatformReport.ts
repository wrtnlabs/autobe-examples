import { tags } from "typia";

/**
 * Represents a single content report submitted by a member, as stored in
 * `community_platform_reports` table. Includes content references (post_id,
 * comment_id), reporting actor, report category, reason/explanation, workflow
 * status, moderation result, moderator, and audit timestamps. Used in
 * moderation review, compliance, and abuse tracking.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformReport = {
  /**
   * Unique identifier for this report, as primary key. Maps directly to
   * `community_platform_reports.id`.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID of the member who filed this report. Required and set via
   * authentication context NOT user input. Prisma: `reporting_member_id`.
   */
  reporting_member_id: string & tags.Format<"uuid">;

  /**
   * The post ID being reported, if the report targets a post. Nullable.
   * Prisma: `post_id`.
   */
  post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * The comment ID being reported, if the report targets a comment. Nullable.
   * Prisma: `comment_id`.
   */
  comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Category for this report, referencing the predefined report category
   * table (e.g., spam, abuse, harassment, NSFW, etc). Required. Prisma:
   * `report_category_id`.
   */
  report_category_id: string & tags.Format<"uuid">;

  /**
   * Optional free form explanation given by reporter; required if category
   * allows or mandates it. Prisma: `reason_text`.
   */
  reason_text?: string | null | undefined;

  /**
   * Workflow status for this report. Valid values: pending, under_review,
   * resolved, escalated, dismissed. Prisma: `status`.
   */
  status: string;

  /**
   * Result of moderation review or action taken, such as 'removed',
   * 'no_action', 'banned', etc. Nullable until reviewed. Prisma:
   * `moderation_result`.
   */
  moderation_result?: string | null | undefined;

  /**
   * The moderator/admin (UUID) who handled this report. Nullable until
   * resolved. Prisma: `moderated_by_id`.
   */
  moderated_by_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Timestamp indicating when the report was submitted. Prisma: `created_at`. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for when the report was last updated (status or result
   * changes). Prisma: `updated_at`.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformReport {
  /**
   * Parameters for filtering, searching, sorting, and paginating report
   * entities (community_platform_reports table) when searching for content
   * reports (e.g., for moderation review screens in the Reddit-like community
   * platform). Includes options for filtering by status, category,
   * content/post/comment, reporter, handler, creation dates, free text,
   * sorting, and paging. All properties are optional to allow flexible
   * advanced search combinations.
   */
  export type IRequest = {
    /**
     * Status of reports to filter by. E.g.,
     * 'pending','resolved','escalated'. Optional.
     */
    status?: string | undefined;

    /**
     * Report category (join to report_categories table if needed). Filter
     * for reports of a specific category. Optional.
     */
    category?: string | undefined;

    /** ID of member submitting the report. To filter by reporter. Optional. */
    reporting_member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Type of content being reported. Enum: 'post', 'comment'. Optional. */
    target_type?: "post" | "comment" | undefined;

    /** Reported post ID if applicable. Optional. */
    post_id?: (string & tags.Format<"uuid">) | undefined;

    /** Reported comment ID, if applicable. Optional. */
    comment_id?: (string & tags.Format<"uuid">) | undefined;

    /** ID of moderator/admin handling the report. Optional. */
    moderated_by_id?: (string & tags.Format<"uuid">) | undefined;

    /** ISO date-time filter for earliest report submission date. Optional. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO date-time filter for most recent report submission date.
     * Optional.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Free-text search, applies to reason or details fields. Optional. */
    search?: string | undefined;

    /** Sort order: e.g., by 'created_at', 'status', or 'category'. Optional. */
    sort?: "created_at" | "status" | "category" | undefined;

    /** Sort direction. Enum: 'asc', 'desc'. Optional. */
    order?: "asc" | "desc" | undefined;

    /** Page number for pagination. Optional. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Page size/limit for pagination. Optional. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Payload for a member to file a content report. The user must supply a
   * report_category_id. Exactly one of post_id or comment_id should be
   * provided; reason_text is included if category allows/mandates it.
   * Reporting member is inferred from authentication context, not from body
   * input.
   */
  export type ICreate = {
    /**
     * The post ID being reported, if the report is about a post. Only one
     * of post_id or comment_id should be provided.
     */
    post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The comment ID being reported, if the report is about a comment. Only
     * one of post_id or comment_id should be provided.
     */
    comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Category/reason ID why content is being reported. Must reference a
     * valid entry from report categories table.
     */
    report_category_id: string & tags.Format<"uuid">;

    /**
     * Optional free-form explanation for the report. Required only if
     * category allows/mandates extra input.
     */
    reason_text?: string | null | undefined;
  };

  /**
   * Update payload for moderating and resolving content reports. Applies to
   * the moderation workflow; changes the status and resolution as managed by
   * admins/moderators. Matches business rules for audit trail, status
   * lifecycle, and staff intervention. Does not allow requester, post, or
   * comment references to be altered by mutation.
   */
  export type IUpdate = {
    /**
     * Workflow status of the content report (e.g., pending, under_review,
     * resolved, escalated, dismissed).
     *
     * This field updates the stage of the moderation process as the report
     * is triaged, escalated, resolved, or closed by staff moderation. Must
     * reflect only valid, meaningful workflow states defined by business
     * policy.
     */
    status: string;

    /**
     * Result action taken by moderator/admin upon resolving this report:
     * e.g., removed, warning, no_action, banned, escalated, dismissed, or
     * other recognized moderation outcome.
     *
     * This field documents the outcome/status that is the direct result of
     * handling the user report, aligned with moderation and compliance
     * flows.
     */
    moderation_result: string;

    /**
     * UUID of the moderator/admin who handled and resolved the report. This
     * references the 'community_platform_admins' or
     * 'community_platform_moderators' as the actor who took final action on
     * the report. Used for auditability, compliance review, transparency,
     * and user notification.
     *
     * Must be a valid UUID referencing the resolving actor.
     */
    moderated_by_id: string & tags.Format<"uuid">;
  };

  /**
   * Summary representation of a user-submitted content report for moderation
   * dashboards, abuse triage, or audit listing. This DTO surfaces the most
   * essential fields of a report — identifiers, reason/category, status, and
   * audit timestamps — while omitting sensitive fields or full free-form
   * reasons. Mapped directly to the community_platform_reports schema for
   * rapid moderation filtering, sorting, and decision making. Intended for
   * array/list usage, not for full detail view.
   *
   * This summary type enables effective moderators and admins to triage,
   * sort, or batch-select reports for further action without loading heavy
   * relational or audit trail detail. Only one of post_id or comment_id is
   * set for any given report.
   *
   * References the moderation result as available but leaves free-form
   * rationale and in-depth workflow for the detail DTO. Provides quick
   * compliance view and operational oversight over the abuse/report
   * pipeline.
   */
  export type ISummary = {
    /**
     * Unique identifier for the content report as assigned in the
     * community_platform_reports table. This value is essential for
     * performing reference lookups, updates, and audit operations within
     * moderation workflows.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the member who submitted the report. Enables
     * audit trail and compliance visibility. Pseudonymized for privacy.
     */
    reporting_member_id: string & tags.Format<"uuid">;

    /**
     * References the reported post (if the report targets a post).
     * Nullable; will be null if the report targets a comment instead.
     */
    post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * References the reported comment if applicable (nullable). Only one of
     * post_id or comment_id will be set for a given report.
     */
    comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Unique identifier for the report category, referencing moderation and
     * policy reasons such as spam, abuse, or off-topic. Used to route,
     * display, and audit the reason for reporting as linked to
     * community_platform_report_categories.
     */
    report_category_id: string & tags.Format<"uuid">;

    /**
     * Current workflow status for the report. Typical values: pending,
     * under_review, resolved, escalated, dismissed. Used to drive
     * moderation flows and dashboard sorting.
     */
    status: string;

    /**
     * Outcome/action taken by the moderator (optional, nullable). E.g.,
     * removed, warning, no_action, banned, escalated. Null if not
     * reviewed.
     */
    moderation_result?: string | null | undefined;

    /**
     * Timestamp indicating when the report was originally filed, in
     * RFC3339/ISO 8601 format. Used for audit, dashboard filters, and
     * compliance timelines.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the last update or transition in the report's moderation
     * workflow. Used for monitoring, sorting, and queue ordering.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
