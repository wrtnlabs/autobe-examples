import { tags } from "typia";

/**
 * Complete core entity for a community/subreddit. Represents the principal
 * 'hub' object for organizing content, membership, moderation, and all
 * community-scoped features on the platform. Maps exactly to the
 * community_platform_communities table, using strictly the fields defined in
 * the Prisma schema. Deletion is soft by 'deleted_at' field. Extensions are
 * allowed only as per view or response contextâ€”not in DB-mapped types.
 * Properties are documented and constrained to platform policy and
 * creation/editor flows. Parent for all community management operations, UI
 * detail panels, search result listings, and community feed integration.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunity = {
  /** Primary key; unique identifier for the community. */
  id: string & tags.Format<"uuid">;

  /** Creator's member UUID; references the initial owner and moderator. */
  creator_member_id: string & tags.Format<"uuid">;

  /**
   * Unique community identifier (URL/display name, case-insensitive, 3-100
   * characters).
   */
  name: string;

  /** Community display title (3-100 characters). */
  title: string;

  /**
   * Detailed community description or info (optional, supports Markdown,
   * 10-10000 characters).
   */
  description?: string | null | undefined;

  /**
   * URL-safe slug for public linking and navigation. Unique,
   * case-insensitive.
   */
  slug: string;

  /**
   * Current community status (e.g., 'active', 'private', 'banned',
   * 'archived'). Label drives accessibility, moderation, search visibility,
   * and content policy.
   */
  status: string;

  /** Timestamp when the community was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last setting or metadata update. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp of soft deletion/archival; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommunity {
  /**
   * Request DTO for searching, filtering, sorting, and paginating the list of
   * communities. Allows advanced queries such as partial text match, filter
   * by status, and dynamic sort options suitable for discovery, management,
   * or moderation scenarios.
   */
  export type IRequest = {
    /**
     * The result page number (starting from 1). Used for client-side
     * pagination.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * The number of results per page. Constrained by platform limits and
     * business policy. Typical defaults: 20-50.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Search keyword or filter string for partial matching of community
     * name, title, or description. Applies text search with casing/partial
     * options per implementation.
     */
    search?: string | undefined;

    /**
     * Filter communities by current status (e.g., 'active', 'banned',
     * 'private', etc.). Only statuses defined by platform policy are
     * recognized.
     */
    status?: string | undefined;

    /**
     * Sort key to order the result set. Common values: 'hot' (default),
     * 'new', 'top', 'controversial', or property names like 'created_at'.
     */
    sort?: "hot" | "new" | "top" | "controversial" | undefined;

    /**
     * Sort direction ('asc' or 'desc'). Applies to the chosen sort key.
     * Default per platform conventions.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * DTO for creating a new community entity. Mirrors the
   * community_platform_communities table in Prisma, referencing the required
   * fields 'name', 'title', 'slug', and optionally 'description'. Intended
   * for member role (not guests), with additional business constraints
   * enforced on length, uniqueness, and format. Does NOT include
   * creator_member_id (derived from auth context), status (set by system), or
   * timestamp fields (auto-generated).
   */
  export type ICreate = {
    /**
     * Unique community identifier (display and URL). Case-insensitive.
     * 3-100 characters. Refer to the 'name' column of the
     * community_platform_communities table in the Prisma schema. Must be a
     * string between 3 and 100 characters, unique among all communities.
     * Used for both community display and RESTful linking.
     */
    name: string;

    /**
     * Community's display title. 3-100 characters, shown in
     * listings/headers. Maps to the 'title' column in
     * community_platform_communities. This is the main display string, and
     * must be within 3-100 characters.
     */
    title: string;

    /**
     * Detailed community description. 10-10000 characters. Markdown
     * allowed. Corresponds to the description column in
     * community_platform_communities. Can be omitted or set to null, but if
     * provided, must be 10 to 10000 characters, markdown supported.
     */
    description?: string | null | undefined;

    /**
     * URL-safe slug, unique. Used for pretty URLs and direct linking.
     * Field: slug in community_platform_communities. Must be non-empty,
     * unique, URL-safe string.
     */
    slug: string;
  };

  /**
   * DTO for updating fields on an existing community entity, mapped to the
   * community_platform_communities Prisma schema. All fields are optional
   * (Partial<T> style), and may include 'title', 'description', 'slug', and
   * optionally 'status' (admin-only). Id, creator/owner references, and
   * timestamp fields are intentionally excluded in accordance with Prisma
   * model and business rules. This type is permissive for PATCH/PUT-style
   * update flows.
   */
  export type IUpdate = {
    /**
     * Community's display title. 3-100 characters. Display title for
     * listings or headers. Optional during update; if present, must be
     * within allowed length.
     */
    title?: string | undefined;

    /**
     * Detailed community description. 10-10000 characters, markdown
     * allowed. Optional for update; can be null to clear description or
     * string to replace.
     */
    description?: string | null | undefined;

    /**
     * URL-safe unique slug for community. If updating, must remain unique
     * and URL-safe.
     */
    slug?: string | undefined;

    /**
     * Current status (e.g., active, private, banned, archived). Allowed
     * transitions determined by business rules.
     */
    status?: string | undefined;
  };

  /**
   * Summary DTO for communities (subreddits).
   *
   * This presents high-level information for community listings/searches:
   * unique id, name, SEO slug, operational status, and timestamps. These
   * properties support feed listings, discovery/search, and basic moderation
   * displays.
   */
  export type ISummary = {
    /**
     * Unique identifier for the community (subreddit).
     *
     * This is the primary key for cross-entity linkages and all business
     * operations involving this community.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The globally unique community name, as used in URLs and discovery.
     * Must be case-insensitive and between 3-100 characters as enforced by
     * business logic.
     */
    name: string;

    /**
     * Display title for the community, used in headers and search. Must be
     * 3-100 characters.
     */
    title: string;

    /**
     * Slug for SEO-friendly URLs, must be unique and safely used in paths.
     * Usually a normalized version of the community name.
     */
    slug: string;

    /**
     * Current operational status of the community, e.g., 'active',
     * 'private', 'banned', 'archived'. Drives UI visibility and access.
     */
    status: string;

    /**
     * Community creation timestamp, set by the platform when initially
     * registered by its creator. UTC only.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last updated time for the community's settings, metadata, or
     * moderation status. Used for synchronization and feedback to
     * admins/moderators.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
