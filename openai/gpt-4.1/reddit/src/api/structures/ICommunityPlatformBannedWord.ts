import { tags } from "typia";

/**
 * Schema representing a platform-wide banned word or phrase, used in content
 * policy enforcement. Tracks ban rationale, enforcement status, timestamps, and
 * optional soft deletion. Reflects the structure and comments of the
 * community_platform_banned_words table in Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformBannedWord = {
  /** Unique identifier for this banned word entry. */
  id: string & tags.Format<"uuid">;

  /** Word or phrase that is platform-wide prohibited. Must be unique. */
  word: string;

  /**
   * Explanation for this ban reason. Documents purpose for moderators,
   * admins, or compliance. Optional.
   */
  reason?: string | undefined;

  /**
   * Whether this word is currently actively enforced. True for active bans;
   * false otherwise.
   */
  active: boolean;

  /** Timestamp when entry was added to the ban list. ISO 8601 format. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when entry was last modified, for audit/compliance. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion. Null if active; ISO 8601 otherwise. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformBannedWord {
  /**
   * Request DTO for searching, filtering, and paginating banned words in the
   * moderation policy system. Supports filtering by keyword, enforcement
   * status, creation dates, search string, and pagination controls.
   */
  export type IRequest = {
    /**
     * Page number for pagination. Optional; if provided, must be positive
     * integer.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of items per page for pagination. Optional; if
     * provided, must be positive integer.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Optional search string for filtering banned words by substring match. */
    search?: string | undefined;

    /**
     * If present, restrict results to only currently active (true) or
     * inactive (false) banned words.
     */
    active?: boolean | undefined;

    /**
     * Filters results to those created at or after this ISO 8601 date-time.
     * Optional.
     */
    createdFrom?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filters results to those created at or before this ISO 8601
     * date-time. Optional.
     */
    createdTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Field to sort results by. Allowed values: 'word', 'created_at',
     * 'updated_at'.
     */
    sort?: "word" | "created_at" | "updated_at" | undefined;

    /**
     * Sort order for the field specified in 'sort'. Allowed values: 'asc',
     * 'desc'.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * DTO body for creating (adding) a new banned word/phrase in the platform's
   * banned word list. This component strictly corresponds to the creation of
   * records in the 'community_platform_banned_words' table. It should include
   * the banned word (must be unique across all entries), an optional reason
   * (can be null), and whether the ban is active (enforced upon creation).
   * Security and auditability are critical: only platform administrators or
   * authorized moderators should be permitted to call this DTO, and all
   * fields are audited.
   */
  export type ICreate = {
    /**
     * Word or phrase that is to be banned across the platform. This
     * property represents the exact text string, which must be unique
     * (case-insensitive) within all banned word entries. Typical uses
     * include profanities, hate speech, and prohibited phrases per platform
     * content policy. Enforced by moderators and automated content review.
     *
     * Field size and formatting must comply with platform rules, usually
     * with maximum lengths (e.g., 255 chars) and normalization for
     * whitespace or special characters. Examples: 'spoiler', 'scam',
     * 'hateword'. Platform logic will also check for duplicates and
     * rejected forms.
     */
    word: string;

    /**
     * Optional text explaining the rationale for banning this word/phrase.
     * May provide additional moderation context, a policy excerpt, or link
     * to community guidelines. Useful for audit and appeals; not always
     * displayed to end-users.
     *
     * If omitted, the rationale for banning should be self-evident or
     * defined in platform/global moderation rules. Example: 'Violates hate
     * speech policy; flagged for regulatory compliance.'
     */
    reason?: string | null | undefined;

    /**
     * Specifies whether this banned word is currently enforced (true) or
     * not (false). Set to true to immediately begin filtering content for
     * this word, or false to add/edit the entry but not enforce yet (e.g.,
     * for staged rule updates or temporary suspensions).
     *
     * Enforcement logic will check this flag before blocking or flagging
     * associated user-submitted content. For most new bans, this should be
     * true unless deliberate delay is required.
     */
    active: boolean;
  };
}
