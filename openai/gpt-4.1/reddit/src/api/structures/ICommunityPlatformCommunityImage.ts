import { tags } from "typia";

/**
 * Community image object (non-banner) tied to a community. Directly models a
 * row from community_platform_community_images. Contains all metadata
 * describing its file upload, image purpose, and display status. Used for
 * community branding/identity and asset management. Field documentation is
 * derived from Prisma schema comments and business rules.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityImage = {
  /**
   * Primary key identifier for this community image, matching the 'id' field
   * in the community_platform_community_images table. Immutable once set.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the community this image belongs to, linking to
   * community_platform_communities.id. Needed for context and referential
   * integrity.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * UUID referencing the actual storage record for this image in
   * community_platform_file_uploads.id.
   */
  file_upload_id: string & tags.Format<"uuid">;

  /**
   * Type of image (e.g., 'icon', 'background', etc.). Used for display logic
   * and filtering.
   */
  image_type: string;

  /**
   * Order/priority for multiple images of the same type. If set, must be a
   * unique non-negative integer for a given community/image_type
   * combination.
   */
  order?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * Accessibility text describing the image. Optional; may be null or up to
   * 250 characters.
   */
  alt_text?: string | null | undefined;

  /**
   * Indicates if this image is currently displayed/used for its community.
   * True for main image, false for archived/legacy images.
   */
  active: boolean;

  /**
   * Timestamp when this image was created/added to the community, using ISO
   * string format. Immutable.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for the most recent metadata change to this community image
   * (not the file).
   */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete/archival timestamp. If set (not null), image is not active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommunityImage {
  /**
   * Request schema for searching/filtering community images associated with a
   * community. Supports type filtering, sorting, status filtering, and
   * pagination for visual asset management.
   */
  export type IRequest = {
    /** Unique identifier (UUID) of the community to which to filter images. */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type of image to filter results (e.g. 'icon', 'background', etc.).
     * Additional context can be derived from platform conventions regarding
     * community visuals.
     */
    image_type?: string | undefined;

    /** Boolean flag to filter only currently displayed community images. */
    active?: boolean | undefined;

    /**
     * Order/priority for filtering or sorting the display of community
     * images of the same type (if required).
     */
    order?: (number & tags.Type<"int32">) | undefined;

    /**
     * If present, returns only community images created after this ISO 8601
     * date-time.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If present, returns only community images created before this ISO
     * 8601 date-time.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Field to sort results by; supports created_at timestamp or order for
     * presentation.
     */
    sort_by?: "created_at" | "order" | undefined;

    /** Sort order direction: ascending or descending. */
    sort_order?: "asc" | "desc" | undefined;

    /** Page number for paginated results. Starts at 1. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of results per page for pagination. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * DTO for creating a community image, representing branding, icon, or
   * background visuals. Maps directly to the
   * community_platform_community_images table. Enforces file reference, image
   * type, order, alt text, and activation status. Only fields defined in
   * Prisma schema are present.
   */
  export type ICreate = {
    /**
     * Pointer to uploaded file. Reference to the unique id in
     * community_platform_file_uploads. This field is required and links the
     * image entity to an uploaded file.
     */
    file_upload_id: string & tags.Format<"uuid">;

    /**
     * Type of image (e.g., 'icon', 'background'). This field is used for
     * filtering community images and must match the business-controlled
     * enum of available image types. See community branding requirements
     * for allowed types.
     */
    image_type: string;

    /**
     * Order/priority for multiple images of the same type, if needed. Used
     * to determine display sequence among images of identical image_type
     * for a community. Optional.
     */
    order?: (number & tags.Type<"int32">) | undefined;

    /**
     * Accessibility alt text for the image (0-250 chars). Should be
     * provided for improved accessibility, but is optional.
     */
    alt_text?: (string & tags.MaxLength<250>) | undefined;

    /**
     * Whether this image is currently displayed for the community. Used to
     * control active/inactive states for rotation or display management.
     */
    active: boolean;
  };

  /**
   * DTO for updating fields of an existing community image, such as type,
   * order, alt_text, and display activation state. Only modifiable fields per
   * the schema may be present. All updates are validated by business logic
   * and system permissions.
   */
  export type IUpdate = {
    /**
     * Type of image (e.g., 'icon', 'background'). Updates image's
     * classification for branding. Must match acceptable business types.
     */
    image_type?: string | undefined;

    /**
     * Order/priority for images of the same type. Used to reconfigure
     * display sequence.
     */
    order?: (number & tags.Type<"int32">) | undefined;

    /**
     * Accessibility alt text for image. Updates alt text for improved
     * accessibility; optional.
     */
    alt_text?: (string & tags.MaxLength<250>) | undefined;

    /**
     * Indicates if the image is set as currently displayed/active for the
     * community.
     */
    active?: boolean | undefined;
  };
}
