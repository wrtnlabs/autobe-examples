import { tags } from "typia";

/**
 * Full DTO for a community banner image as defined in
 * community_platform_community_banners Prisma schema. Captures metadata such as
 * community association, file reference, order (for display rotation),
 * accessibility alt text, enabled state, created/updated timestamps, and soft
 * deletion for archiving. File upload reference must be resolved for actual
 * image content. All fields and constraints match the Prisma schema. Used for
 * both detail and list endpoints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityBanner = {
  /** Primary Key. Unique identifier of the community banner. */
  id: string & tags.Format<"uuid">;

  /**
   * References the community this banner belongs to. Points to
   * community_platform_communities.id.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Pointer to the actual uploaded file record. Refers to
   * community_platform_file_uploads.id, where the image location and metadata
   * is stored.
   */
  file_upload_id: string & tags.Format<"uuid">;

  /**
   * Order/index for banners used in rotation for a community, e.g. for hero
   * banner carousels. Lower numbers have higher precedence. Can be null for
   * single banners.
   */
  order?: (number & tags.Type<"int32">) | undefined;

  /** Accessibility alt text for the image, up to 250 characters. Nullable. */
  alt_text?: string | undefined;

  /**
   * Whether this banner is currently enabled/displayed on front end for the
   * community.
   */
  active: boolean;

  /** Timestamp when banner was created/uploaded (ISO 8601 string). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the most recent update to the banner metadata. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp for archiving or rotation. Null if the banner is
   * active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommunityBanner {
  /**
   * Request DTO for searching, filtering, and paginating community banner
   * images. Used by moderation/admin UIs to find banners for a given
   * community by status, order, file, or metadata. Supports advanced queries
   * and permissions enforcement. All parameters are optional and can be
   * combined.
   */
  export type IRequest = {
    /**
     * UUID of the community this banner request is for. Used to scope
     * search/filter operations. If omitted, results filter against all
     * communities the actor can access.
     */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter for active or inactive banners. Set true to find only enabled
     * banners, false for archived/disabled banners.
     */
    active?: boolean | undefined;

    /**
     * Order/index filter for banners. Used to retrieve banners of a
     * specific order/priority for community display rotation.
     */
    order?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * UUID reference to the file upload for the banner. Used to find
     * banners referencing a specific upload record.
     */
    file_upload_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter range: earliest created_at timestamp to include (ISO 8601
     * string).
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter range: latest created_at timestamp to include (ISO 8601
     * string).
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter range: earliest updated_at timestamp to include (ISO 8601
     * string).
     */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter range: latest updated_at timestamp to include (ISO 8601
     * string).
     */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Partial or full search term to match alt text (accessibility) for
     * banners.
     */
    alt_text?: string | undefined;

    /**
     * When true, include soft-deleted (archived) banner images in search
     * results. Default is false.
     */
    include_deleted?: boolean | undefined;

    /** Pagination: page number for result set. Default is 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Pagination: number of records per page. Platform maximum enforced. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /**
   * Request object used to create a new banner image for a community. This
   * schema links a previously uploaded image to a community as a banner,
   * optionally specifying display order and accessibility metadata. All
   * attributes must comply with the business logic enforced by the system,
   * including required active flag, image file reference, and optional
   * ordering/alt text. Field constraints and relationships map to the
   * `community_platform_community_banners` schema, supporting compliance and
   * accessibility policies.
   *
   * Security: Only moderators or admins for the relevant community may create
   * banners. Permissions and image file validity must be enforced by the
   * application. Creation times and primary keys are system-generated.
   */
  export type ICreate = {
    /**
     * UUID of the file record referencing the uploaded banner image, as
     * stored in the `community_platform_file_uploads` table. This is used
     * to associate the banner entry with an already-uploaded image asset.
     *
     * The field is required and must point to a valid existing file upload.
     */
    file_upload_id: string & tags.Format<"uuid">;

    /**
     * Display order or index for this banner in relation to other banners
     * used in the same community.
     *
     * Optional. Used to control the sequence of banners if multiple are
     * present. Lower numbers may correspond to higher-priority banners.
     * Null/unspecified values may default to the back of the order list.
     */
    order?: (number & tags.Type<"int32">) | undefined;

    /**
     * Alternative text for accessibility purposes. May be displayed to
     * screen readers or as fallback if the image does not load. Optional
     * and maximum length is 250 characters.
     */
    alt_text?: (string & tags.MaxLength<250>) | undefined;

    /**
     * Whether this banner is currently enabled and displayed for the
     * community. Set to true for immediate display, or false to add the
     * banner without making it active.
     *
     * Used by moderation or admin UI for managing banner visibility and
     * image rotation.
     */
    active: boolean;
  };

  /**
   * Update object for an existing community banner, as defined in the
   * `community_platform_community_banners` table. Fields here may be provided
   * selectively for partial updates. The request is typically used to update
   * the display order, alternative accessibility text, or activation status
   * of a banner image. Only the existing banner's metadata is changed â€“ not
   * the image file itself. Field values correspond to those defined in the
   * Prisma schema and support moderator/admin workflows for managing
   * community branding assets.
   */
  export type IUpdate = {
    /**
     * Display order or index for this banner relative to others for the
     * community. Changing this updates banner sequencing in rotation or
     * carousel display. Optional; only provided if the order needs to be
     * changed.
     */
    order?: (number & tags.Type<"int32">) | undefined;

    /**
     * Alternative text for the banner image (for accessibility or display
     * fallback). May be edited by moderators or admins and is limited to
     * 250 characters. Optional; supply new alt_text or omit to leave
     * unchanged.
     */
    alt_text?: (string & tags.MaxLength<250>) | undefined;

    /**
     * Flag to toggle whether this banner is publicly visible in the
     * community. Set to true to activate, or false to hide the banner from
     * users. Optional; omitting this leaves the activation status
     * unchanged.
     */
    active?: boolean | undefined;
  };
}
