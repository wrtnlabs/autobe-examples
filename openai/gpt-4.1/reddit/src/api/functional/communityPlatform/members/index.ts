import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMember } from "../../../structures/ICommunityPlatformMember";

/**
 * Retrieve the full account and profile details of a specific member by ID from
 * the community_platform_members table.
 *
 * Retrieves all available profile and account information for a single
 * registered member based on the provided memberId. This includes public and
 * private fields depending on the role and context of the requester.
 * Information provided consists of member email, account verification state,
 * status (e.g., active, blocked, suspended), and activity timestamps such as
 * created_at and updated_at.
 *
 * If the requester is viewing their own profile or has sufficient permissions
 * (e.g., admin), additional protected fields may be exposed in the response as
 * allowed by business rules. All sensitive authentication data, such as
 * password hashes, are strictly omitted from public output.
 *
 * This operation is directly aligned with the community_platform_members table,
 * referencing related entities such as profiles, subscriptions, posts, comment
 * histories, and karma. Proper permissions and privacy logic are enforced in
 * the business layer depending on the requester's identity.
 *
 * Error handling covers not-found situations, permission blocks, and privacy
 * restrictions, ensuring members can only view information for which they have
 * rights. Used in user profile pages and admin tools for inspecting member
 * records.
 *
 * @param props.connection
 * @param props.memberId Unique identifier (UUID) of the member whose profile
 *   information is requested.
 * @path /communityPlatform/members/:memberId
 * @accessor api.functional.communityPlatform.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier (UUID) of the member whose profile information is
     * requested.
     */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformMember;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ICommunityPlatformMember =>
    typia.random<ICommunityPlatformMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
