import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformControversialScore } from "../../../../structures/ICommunityPlatformControversialScore";

/**
 * Retrieve the cached controversial score for a specific comment
 * (community_platform_controversial_scores).
 *
 * This endpoint allows retrieval of the most recently computed controversial
 * score for a comment, given its unique commentId. The controversial score is a
 * metric indicating high engagement through polarized voting, supporting sort
 * options such as 'controversial' in UI comment sections. Data is returned from
 * the community_platform_controversial_scores table, optimized for fast lookup
 * during comment listing or analytics operations.
 *
 * The commentId parameter must reference a valid comment entity in the system
 * (UUID). Only scores for visible, permitted comments are available; comments
 * in banned, hidden, or private threads may have access restrictions. Clients
 * use this API in conjunction with comment list or detail views when showing
 * comments ranked by controversy.
 *
 * Common error scenarios include not found (404) if the comment or its
 * controversial score is missing, or forbidden (403) if the comment is not
 * visible to the requester. The API safeguards against exposing scores for
 * restricted or deleted content.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment for which to retrieve
 *   the controversial score.
 * @path /communityPlatform/comments/:commentId/controversialScore
 * @accessor api.functional.communityPlatform.comments.controversialScore.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the comment for which to retrieve the
     * controversial score.
     */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformControversialScore;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/comments/:commentId/controversialScore",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/comments/${encodeURIComponent(props.commentId ?? "null")}/controversialScore`;
  export const random = (): ICommunityPlatformControversialScore =>
    typia.random<ICommunityPlatformControversialScore>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
