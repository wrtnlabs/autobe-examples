import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformEscalationLog } from "../../../../structures/ICommunityPlatformEscalationLog";
import { IPageICommunityPlatformEscalationLog } from "../../../../structures/IPageICommunityPlatformEscalationLog";

/**
 * Create a new escalation log entry for moderation/admin review in
 * community_platform_escalation_logs.
 *
 * Create an escalation log to elevate unresolved or special-case moderation
 * reports to administrative review. This operation records a new escalation
 * entry with details including the initiator, target report, escalation reason,
 * destination admin (if any), and initial status.
 *
 * The workflow requires precise validation: the associated report must exist
 * and the requesting user must have a legitimate reason and role to escalate.
 * The Prisma schema assures relational integrity with references to reports,
 * admins, and members. All escalations are subsequently visible to assigned
 * admins and tracked for audit purposes to ensure complete transparency of the
 * moderation process.
 *
 * Security and abuse-prevention considerations are critical; only authenticated
 * members, moderators, or admins may create an escalation, and all actions are
 * thoroughly logged. Invalid references, lack of rights, or missing required
 * information results in explicit error responses as per audit and platform
 * policy.
 *
 * @param props.connection
 * @param props.body Details required to create an escalation log entry,
 *   including reason, related report, and assigned admin (if applicable).
 * @path /communityPlatform/admin/escalationLogs
 * @accessor api.functional.communityPlatform.admin.escalationLogs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details required to create an escalation log entry, including reason,
     * related report, and assigned admin (if applicable).
     */
    body: ICommunityPlatformEscalationLog.ICreate;
  };
  export type Body = ICommunityPlatformEscalationLog.ICreate;
  export type Response = ICommunityPlatformEscalationLog;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/escalationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/escalationLogs";
  export const random = (): ICommunityPlatformEscalationLog =>
    typia.random<ICommunityPlatformEscalationLog>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve and search escalation logs (admin and authorized moderators).
 *
 * This endpoint enables authorized users to search, paginate, and filter
 * escalation log records from the 'community_platform_escalation_logs' table.
 * Escalation logs record all transfers of unresolved or complex moderation
 * reports from general moderators to admin review, documenting when and why
 * escalation occurred, who initiated it, and how it was ultimately resolved.
 *
 * The operation provides robust filtering options by escalation status
 * (pending, in_review, resolved, closed), report ID, initiator, assigned admin,
 * and event time range. The response object includes both the paginated list of
 * escalation log summaries and pagination metadata (e.g., total count, current
 * page). Authorization is restricted to users with appropriate
 * permissions—typically administrators and assigned moderators with community
 * management rights.
 *
 * Additional security considerations include preventing access to escalations
 * unrelated to the requester's scope (e.g., moderators cannot view escalations
 * outside their community assignment, and only admins see all logs). Filtering
 * may also be applied based on time period for audit queries or compliance
 * checks.
 *
 * If no logs match the given criteria or page, the response returns an empty
 * result set with appropriate pagination metadata.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination options for escalation log
 *   filtering.
 * @path /communityPlatform/admin/escalationLogs
 * @accessor api.functional.communityPlatform.admin.escalationLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination options for escalation log filtering. */
    body: ICommunityPlatformEscalationLog.IRequest;
  };
  export type Body = ICommunityPlatformEscalationLog.IRequest;
  export type Response = IPageICommunityPlatformEscalationLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/escalationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/escalationLogs";
  export const random = (): IPageICommunityPlatformEscalationLog.ISummary =>
    typia.random<IPageICommunityPlatformEscalationLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific escalation log entry from
 * community_platform_escalation_logs by its ID.
 *
 * Retrieve the complete content of an escalation log for moderation or abuse
 * reporting workflow. This operation provides a comprehensive view of the
 * escalation process, including all status changes, participant details,
 * escalation rationale, and resulting actions as tracked in the
 * community_platform_escalation_logs table.
 *
 * Access to detailed escalation logs is restricted to assigned moderators for
 * their communities and platform administrators. Sensitive user and moderation
 * data is displayed only if the requester holds appropriate role authorization,
 * ensuring privacy and compliance with platform policy.
 *
 * The operation enforces precise access control by checking the requesting
 * user’s rights against the Prisma schema relationships for escalations,
 * members, and admins. It requires a valid escalationLogId parameter formatted
 * as a UUID and returns all information necessary for a thorough audit, dispute
 * review, or compliance investigation. Error responses are provided for invalid
 * IDs or unauthorized access attempts.
 *
 * @param props.connection
 * @param props.escalationLogId Unique identifier (UUID) of the escalation log
 *   to retrieve.
 * @path /communityPlatform/admin/escalationLogs/:escalationLogId
 * @accessor api.functional.communityPlatform.admin.escalationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the escalation log to retrieve. */
    escalationLogId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformEscalationLog;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/escalationLogs/:escalationLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/escalationLogs/${encodeURIComponent(props.escalationLogId ?? "null")}`;
  export const random = (): ICommunityPlatformEscalationLog =>
    typia.random<ICommunityPlatformEscalationLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("escalationLogId")(() =>
        typia.assert(props.escalationLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific escalation log entry for moderation escalation (Admin only,
 * community_platform_escalation_logs).
 *
 * Updates the details of a platform escalation log entry, as recorded in the
 * community_platform_escalation_logs table. Escalation logs capture instances
 * where a moderator or member has escalated a report or incident for
 * admin-level attention, due to complexity, conflict of interest, or time
 * limits.
 *
 * This operation enforces that only admin-level users may perform updates, in
 * compliance with moderation and audit policy. Updates may include changing the
 * workflow status, assignment, escalation reason, or the resolution summary.
 * Activity is logged for compliance, traceability, and transparency around all
 * admin-involved moderation workflows.
 *
 * Validators must ensure the target escalation log exists, the admin has
 * authority, and the status transitions are compliant with business rules
 * (e.g., 'in_review' can transition to 'resolved' or 'closed'). Invalid
 * transitions or unauthorized attempts trigger explicit errors. This endpoint
 * is intended for use by moderation dashboards and compliance teams to handle
 * high-importance content safety incidents.
 *
 * @param props.connection
 * @param props.escalationLogId Unique identifier of the escalation log entry to
 *   update.
 * @param props.body Fields to update on the escalation log, conforming to
 *   escalation log update DTO.
 * @path /communityPlatform/admin/escalationLogs/:escalationLogId
 * @accessor api.functional.communityPlatform.admin.escalationLogs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the escalation log entry to update. */
    escalationLogId: string & tags.Format<"uuid">;

    /**
     * Fields to update on the escalation log, conforming to escalation log
     * update DTO.
     */
    body: ICommunityPlatformEscalationLog.IUpdate;
  };
  export type Body = ICommunityPlatformEscalationLog.IUpdate;
  export type Response = ICommunityPlatformEscalationLog;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/escalationLogs/:escalationLogId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/escalationLogs/${encodeURIComponent(props.escalationLogId ?? "null")}`;
  export const random = (): ICommunityPlatformEscalationLog =>
    typia.random<ICommunityPlatformEscalationLog>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("escalationLogId")(() =>
        typia.assert(props.escalationLogId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a specific escalation log entry (Admin only,
 * community_platform_escalation_logs).
 *
 * Permanently deletes an escalation log entry from the escalation workflow in
 * the community_platform_escalation_logs table. Used only by platform admins
 * for purposes such as removal of erroneous escalations, privacy requests, or
 * exceptional compliance reviews, this operation should be disabled if audit
 * retention is required by policy. The deletion is a hard delete, as the
 * escalation logs table does not feature a soft delete column, and once removed
 * the information cannot be recovered.
 *
 * Access checks ensure only admins may delete escalation logs. Attempted
 * deletions against non-existent or protected escalation logs return explicit
 * errors. This operation must be used deliberately, as it removes all trace of
 * the record from the escalation workflow and the moderation review process.
 *
 * @param props.connection
 * @param props.escalationLogId Unique identifier of the escalation log entry to
 *   delete.
 * @path /communityPlatform/admin/escalationLogs/:escalationLogId
 * @accessor api.functional.communityPlatform.admin.escalationLogs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the escalation log entry to delete. */
    escalationLogId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/escalationLogs/:escalationLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/escalationLogs/${encodeURIComponent(props.escalationLogId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("escalationLogId")(() =>
        typia.assert(props.escalationLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
