import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSystemConfig } from "../../../../structures/ICommunityPlatformSystemConfig";
import { IPageICommunityPlatformSystemConfig } from "../../../../structures/IPageICommunityPlatformSystemConfig";

/**
 * Create a new system configuration entry (community_platform_system_configs
 * table).
 *
 * Create a new configuration setting for the community platform. The operation
 * inserts a row into the community_platform_system_configs table, establishing
 * a key-value setting used for runtime feature toggles, thresholds, or global
 * switches. This operation is crucial for system flexibility, allowing
 * administrators to dynamically adjust platform behavior (including
 * enable/disable of experimental features, setting posting or karma limits, and
 * more) without requiring code changes or redeployment.
 *
 * Access to this operation is restricted to administrative users, as it impacts
 * platform-wide stability and feature availability. Each configuration entry
 * must have a unique key, a string value (which can represent JSON, numbers, or
 * booleans serialized as strings), and an explanatory description. Fields such
 * as created_at and updated_at are handled automatically by the system. If a
 * duplicate key is submitted, the operation must fail with a clear error
 * message, and no data is inserted.
 *
 * Validation rules include mandatory key uniqueness, non-empty value, and
 * proper descriptive text. Related operations include updating or deleting
 * configs and querying the current system configuration map. Errors may arise
 * from uniqueness violations, forbidden access, or invalid field formats.
 *
 * @param props.connection
 * @param props.body Configuration parameters for the new system setting (key,
 *   value, description).
 * @path /communityPlatform/admin/systemConfigs
 * @accessor api.functional.communityPlatform.admin.systemConfigs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Configuration parameters for the new system setting (key, value,
     * description).
     */
    body: ICommunityPlatformSystemConfig.ICreate;
  };
  export type Body = ICommunityPlatformSystemConfig.ICreate;
  export type Response = ICommunityPlatformSystemConfig;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/systemConfigs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/systemConfigs";
  export const random = (): ICommunityPlatformSystemConfig =>
    typia.random<ICommunityPlatformSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated, filterable list of system configuration
 * entries (admin only, community_platform_system_configs table).
 *
 * Retrieve a paginated, searchable list of all system configuration values from
 * the community_platform_system_configs table. These configuration entries
 * define global runtime settings used throughout the platform, such as feature
 * switches, system thresholds, and platform-wide toggles that affect business
 * logic without redeploying code.
 *
 * Access to this endpoint is restricted to users with the "admin" role in
 * accordance with platform security principles. Admins can use the request body
 * to specify advanced filtering, full-text searching (by key, description),
 * pagination controls (page, page size), and sorting by creation or update
 * date. This operation is essential for backend dashboards and DevOps workflows
 * managing platform configuration, allowing for continuous delivery of new
 * features and agile response to incidents by toggling features on or off.
 *
 * Input validation logic enforces permitted filter parameters and pagination
 * ranges. The operation will not return sensitive config values that the
 * requester lacks permission to view. Error handling covers missing or invalid
 * request payloads, permission issues, and internal query errors. This endpoint
 * is to be used in conjunction with detail retrieval and config update
 * endpoints for a full admin config management workflow.
 *
 * @param props.connection
 * @param props.body Filtering and pagination criteria for searching system
 *   configuration entries.
 * @path /communityPlatform/admin/systemConfigs
 * @accessor api.functional.communityPlatform.admin.systemConfigs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering and pagination criteria for searching system configuration
     * entries.
     */
    body: ICommunityPlatformSystemConfig.IRequest;
  };
  export type Body = ICommunityPlatformSystemConfig.IRequest;
  export type Response = IPageICommunityPlatformSystemConfig;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/systemConfigs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/systemConfigs";
  export const random = (): IPageICommunityPlatformSystemConfig =>
    typia.random<IPageICommunityPlatformSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information on a single system configuration entry by ID
 * (admin only, community_platform_system_configs table).
 *
 * Retrieve detailed information on a single system configuration entry from the
 * community_platform_system_configs table by specifying its systemConfigId.
 * This operation is critical for admins seeking full details (key, value,
 * description, timestamps) about a specific configuration parameter, typically
 * prior to making updates or auditing changes.
 *
 * Security is enforced by restricting access to users with the "admin" role.
 * The operation supports robust error handling, including 404 responses if the
 * systemConfigId does not correspond to any existing config, and 403 if
 * attempted by a non-admin. Input validation ensures the supplied UUID is
 * well-formed before querying the database. This operation, used in conjunction
 * with the configs list and update endpoints, forms part of an integrated admin
 * system configuration dashboard or API workflow.
 *
 * @param props.connection
 * @param props.systemConfigId Unique identifier (UUID) of the target system
 *   configuration entry.
 * @path /communityPlatform/admin/systemConfigs/:systemConfigId
 * @accessor api.functional.communityPlatform.admin.systemConfigs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target system configuration entry. */
    systemConfigId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSystemConfig;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/systemConfigs/:systemConfigId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/systemConfigs/${encodeURIComponent(props.systemConfigId ?? "null")}`;
  export const random = (): ICommunityPlatformSystemConfig =>
    typia.random<ICommunityPlatformSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemConfigId")(() => typia.assert(props.systemConfigId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing system configuration entry
 * (community_platform_system_configs table).
 *
 * Update an existing system configuration record by providing its unique id and
 * new configuration data. This operation allows administrative users to adjust
 * platform feature switches, runtime values (for example, max comment depth or
 * posting limits), or provide updated description text for auditability. The
 * community_platform_system_configs table assures that each config entry is
 * uniquely identified by its id, while the key remains unique per setting.
 *
 * Security and permissions are strictly enforced, allowing this update only for
 * admin users. Incoming requests must supply a valid UUID for the configuration
 * id and adhere to any constraints on allowed value types (string encoding for
 * values, appropriate length/format for keys and descriptions). Any attempt to
 * update a non-existent configuration should result in a clear, not-found
 * error. Uniqueness is enforced for the key field across all configs, so
 * updates cannot create duplicate keys.
 *
 * Automatic handling of updated_at timestamp and auditing is performed by the
 * system. Related operations include creation, deletion, and retrieval of
 * configuration settings. Proper error handling covers not-found cases,
 * uniqueness violations, and unauthorized access attempts.
 *
 * @param props.connection
 * @param props.systemConfigId Unique identifier (UUID) for the target system
 *   configuration entry to update.
 * @param props.body Object with fields to update (key, value, description) for
 *   the configuration record.
 * @path /communityPlatform/admin/systemConfigs/:systemConfigId
 * @accessor api.functional.communityPlatform.admin.systemConfigs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier (UUID) for the target system configuration entry to
     * update.
     */
    systemConfigId: string & tags.Format<"uuid">;

    /**
     * Object with fields to update (key, value, description) for the
     * configuration record.
     */
    body: ICommunityPlatformSystemConfig.IUpdate;
  };
  export type Body = ICommunityPlatformSystemConfig.IUpdate;
  export type Response = ICommunityPlatformSystemConfig;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/systemConfigs/:systemConfigId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/systemConfigs/${encodeURIComponent(props.systemConfigId ?? "null")}`;
  export const random = (): ICommunityPlatformSystemConfig =>
    typia.random<ICommunityPlatformSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemConfigId")(() => typia.assert(props.systemConfigId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a system configuration key-value entry by ID
 * (community_platform_system_configs table).
 *
 * This operation deletes an existing system configuration entry, identified by
 * its unique systemConfigId, from the key-value store used for runtime settings
 * and feature flags. Such configurations are managed under the
 * community_platform_system_configs table and are essential for platform-wide
 * controls.
 *
 * Only users with the 'admin' role are permitted to invoke this operation, as
 * removing or altering system settings can have a major impact on application
 * stability and feature availability. Each deletion should be accompanied by
 * audit logging to maintain an immutable record of critical system changes.
 *
 * Once deleted, the configuration entry is completely removed from the system
 * and cannot be recovered. Attempting to delete non-existent or protected
 * entries should return appropriate error responses. Associated settings and
 * toggles will revert to platform defaults or become unavailable if this config
 * entry controlled those features.
 *
 * @param props.connection
 * @param props.systemConfigId Unique identifier (UUID) of the system
 *   configuration entry to delete
 * @path /communityPlatform/admin/systemConfigs/:systemConfigId
 * @accessor api.functional.communityPlatform.admin.systemConfigs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the system configuration entry to delete */
    systemConfigId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/systemConfigs/:systemConfigId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/systemConfigs/${encodeURIComponent(props.systemConfigId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemConfigId")(() => typia.assert(props.systemConfigId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
