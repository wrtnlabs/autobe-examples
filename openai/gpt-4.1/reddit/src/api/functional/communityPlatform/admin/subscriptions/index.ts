import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSubscription } from "../../../../structures/ICommunityPlatformSubscription";
export * as logs from "./logs/index";

/**
 * Update a specific community subscription record
 * (community_platform_subscriptions).
 *
 * This endpoint allows an authenticated member or an administrator to update
 * their subscription details to a specific community, identified by the
 * subscriptionId path parameter. The operation refers to the
 * community_platform_subscriptions table and supports modifications such as
 * reactivating a subscription or updating subscription-related settings.
 *
 * Only the member who owns the subscription, or an admin, is allowed to update
 * these records. Attempts by unauthorized users are rejected with explicit
 * error messages. Business logic verifies that the target subscription exists,
 * that the member is not banned from the community, and that the requested
 * changes comply with platform policy (e.g., subscription limit).
 *
 * All updates are logged for audit purposes. The request body must include any
 * fields allowed for update, such as activation status or preferences,
 * following the schema for ICommunityPlatformSubscription.IUpdate. Response
 * returns the full updated subscription record as defined by
 * ICommunityPlatformSubscription.
 *
 * Related endpoints include subscribing (POST /subscriptions),
 * deleting/unsubscribing (DELETE /subscriptions/{subscriptionId}), and listing
 * current subscriptions for the member.
 *
 * @param props.connection
 * @param props.subscriptionId Unique identifier of the subscription to update
 * @param props.body Fields to update for the member's subscription record
 * @path /communityPlatform/admin/subscriptions/:subscriptionId
 * @accessor api.functional.communityPlatform.admin.subscriptions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the subscription to update */
    subscriptionId: string & tags.Format<"uuid">;

    /** Fields to update for the member's subscription record */
    body: ICommunityPlatformSubscription.IUpdate;
  };
  export type Body = ICommunityPlatformSubscription.IUpdate;
  export type Response = ICommunityPlatformSubscription;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/subscriptions/:subscriptionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): ICommunityPlatformSubscription =>
    typia.random<ICommunityPlatformSubscription>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Unsubscribe (soft delete) a member's community subscription
 * (community_platform_subscriptions).
 *
 * This endpoint allows an authenticated member to unsubscribe from a community
 * by performing a soft delete on an existing subscription record, specified by
 * subscriptionId. The operation interacts with the
 * community_platform_subscriptions table and updates the deleted_at field
 * rather than removing the record, preserving historical and audit data.
 *
 * Access is restricted to the subscription owner or platform admins;
 * unauthorized attempts are blocked with a clear error response. Business logic
 * ensures the subscription exists, is active, and that the member is not
 * prevented from unsubscribing (e.g., due to a business restriction).
 *
 * The request does not require a body and there is no response body on success.
 * All unsubscribe events are logged and may impact personalized feeds,
 * notifications, and analytics for both the user and the community. This
 * endpoint is related to subscription creation (POST /subscriptions), updating
 * (PUT /subscriptions/{subscriptionId}), and viewing current subscriptions.
 *
 * @param props.connection
 * @param props.subscriptionId Unique identifier of the subscription to delete
 *   (unsubscribe)
 * @path /communityPlatform/admin/subscriptions/:subscriptionId
 * @accessor api.functional.communityPlatform.admin.subscriptions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the subscription to delete (unsubscribe) */
    subscriptionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/subscriptions/:subscriptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
