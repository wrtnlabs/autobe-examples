import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformModerator } from "../../../../structures/ICommunityPlatformModerator";
import { IPageICommunityPlatformModerator } from "../../../../structures/IPageICommunityPlatformModerator";

/**
 * List, filter, and paginate moderator assignments (from
 * community_platform_moderators).
 *
 * Retrieve a search-filtered, paginated list of community moderator assignments
 * from the system. This endpoint supports query parameters for filtering by
 * assigned community, associated member, moderator role, and status, as well as
 * sorting by assignment or update time. Designed for admin-level oversight, the
 * operation aids in identifying current and historical moderator roles,
 * auditing assignment changes, and managing moderator team composition across
 * communities.
 *
 * Security and privacy are enforced so only users with 'admin' role have access
 * to comprehensive listing. Results return basic moderator assignment
 * information as defined in the community_platform_moderators schema, including
 * references to community_id, member_id, moderator status, email, and
 * assignment timestamps. This operation is intended to provide administrative
 * visibility and support moderator management tasks, escalation preparedness,
 * and compliance reviews.
 *
 * Related API endpoints may allow filtering for a single community or member.
 * This operation focuses on platform-wide or cross-community listing for
 * supervisory roles. Appropriate error handling is in place for invalid filter
 * values, insufficient permissions, or excessive query ranges. Pagination
 * metadata is included with each response.
 *
 * @param props.connection
 * @param props.body Advanced moderator filtering, pagination, and query
 *   parameters.
 * @path /communityPlatform/admin/moderators
 * @accessor api.functional.communityPlatform.admin.moderators.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Advanced moderator filtering, pagination, and query parameters. */
    body: ICommunityPlatformModerator.IRequest;
  };
  export type Body = ICommunityPlatformModerator.IRequest;
  export type Response = IPageICommunityPlatformModerator.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/moderators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/moderators";
  export const random = (): IPageICommunityPlatformModerator.ISummary =>
    typia.random<IPageICommunityPlatformModerator.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific moderator assignment
 * (community_platform_moderators).
 *
 * Retrieve the full details for a single moderator entity by its unique UUID.
 * The moderator represents a specific assignment of moderation privileges for a
 * member in a community. This operation allows administrative or privileged
 * actors to query moderator assignments for compliance review, permission
 * tracing, or interface display.
 *
 * Moderators are tightly linked to platform members and communities. The
 * information returned includes all assigned privileges, role status, and any
 * pending suspension or deletion. Sensitive data such as passwords are excluded
 * from the response object. Authorization is required for access, and the
 * endpoint is intended for use in both admin and privileged moderation UIs, as
 * well as support tools. If the specified moderatorId does not exist or has
 * been deleted, an appropriate error response should be returned.
 *
 * Security and auditing: This endpoint should be accessed only by authorized
 * roles, such as admins, or with appropriate permission checks, as moderation
 * assignments represent sensitive access rights. All retrievals are logged for
 * compliance purposes. Usage in business interfaces for adjusting or displaying
 * moderator staff lists is a primary scenario.
 *
 * @param props.connection
 * @param props.moderatorId The unique identifier (UUID) of the moderator
 *   assignment to retrieve.
 * @path /communityPlatform/admin/moderators/:moderatorId
 * @accessor api.functional.communityPlatform.admin.moderators.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the moderator assignment to retrieve. */
    moderatorId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformModerator;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/moderators/:moderatorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/moderators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): ICommunityPlatformModerator =>
    typia.random<ICommunityPlatformModerator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the assignment details or status for a specific moderator entry
 * (community_platform_moderators).
 *
 * Update the details of an existing moderator assignment record, referenced by
 * its UUID. This operation can be used to suspend, reinstate, or alter
 * moderator status and assignment parameters, in accordance with business
 * policy or incident review.
 *
 * Allowable updates include status, email/contact (if needed), and account
 * assignment properties. Authentication and strict permission checks are
 * enforced; typically, only administrative staff may initiate updates. The
 * request body must confirm to the update DTO and may trigger further audits or
 * notifications depending on policy.
 *
 * This operation is a hard update against the underlying database record in
 * community_platform_moderators. Change actions are recorded for traceability,
 * and workflows should handle cases where attempted updates reference
 * non-existent or deleted moderator entries. Related interfaces may refresh the
 * moderator assignment list upon successful update, ensuring UIs and compliance
 * tools reflect the latest state.
 *
 * @param props.connection
 * @param props.moderatorId The unique identifier (UUID) of the moderator
 *   assignment to update.
 * @param props.body Data fields required to update the moderator assignment.
 * @path /communityPlatform/admin/moderators/:moderatorId
 * @accessor api.functional.communityPlatform.admin.moderators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the moderator assignment to update. */
    moderatorId: string & tags.Format<"uuid">;

    /** Data fields required to update the moderator assignment. */
    body: ICommunityPlatformModerator.IUpdate;
  };
  export type Body = ICommunityPlatformModerator.IUpdate;
  export type Response = ICommunityPlatformModerator;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/moderators/:moderatorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/moderators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): ICommunityPlatformModerator =>
    typia.random<ICommunityPlatformModerator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a moderator assignment by its ID
 * (community_platform_moderators table).
 *
 * This operation offers administrators the ability to permanently delete a
 * moderator entity from the platform. The community_platform_moderators schema
 * associates each moderator to a member, an assigned community, and other
 * metadata used by escalation and policy enforcement. By accessing this
 * endpoint, an administrator can revoke a moderator's control over a given
 * community, which is useful in disciplinary scenarios, moderator retirement,
 * or as part of community restructuring.
 *
 * The operation enforces strict role-based access control: only users with the
 * 'admin' role can execute deletions. The endpoint consumes a moderatorId as a
 * path parameter, referencing the primary key of the moderator assignment to
 * target. Upon successful invocation, the moderator record is removed from the
 * database and is no longer valid for authentication, and related audit logs
 * should record the actor, action, and targeted moderator.
 *
 * Care should be taken to understand cascade behaviors: removal does not
 * automatically remove the member's basic account, nor does it reassess
 * community-level permissions unless additional business rules specify this.
 * All changes associated with deleting the moderator (e.g., removal from
 * moderation queues, reports, or community assignments) must be handled by the
 * related business workflows, ideally via post-delete hooks or batch
 * reconciliation to preserve data integrity and traceability for compliance.
 * System will return confirmation of deletion or error if the target identifier
 * is not found.
 *
 * @param props.connection
 * @param props.moderatorId Unique identifier for the moderator to be deleted.
 * @path /communityPlatform/admin/moderators/:moderatorId
 * @accessor api.functional.communityPlatform.admin.moderators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the moderator to be deleted. */
    moderatorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/moderators/:moderatorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/moderators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
