import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformKarmaLedger } from "../../../../structures/ICommunityPlatformKarmaLedger";
import { IPageICommunityPlatformKarmaLedger } from "../../../../structures/IPageICommunityPlatformKarmaLedger";

/**
 * Create a karma ledger entry for a member (optionally per-community) via
 * community_platform_karma_ledgers.
 *
 * Creates a new karma ledger record, initializing point balances (current_karma
 * field) for a member either platform-wide or scoped to a given community.
 * Reserved for 'admin' operations, not general users. Request requires
 * member_id, may specify a community_id, with constraints enforced. Fails if
 * entry exists for member/community pair. Successful response returns the new
 * ledger entry.
 *
 * @param props.connection
 * @param props.body Creation details: member UUID, optional community UUID,
 *   business context for new ledger
 * @path /communityPlatform/admin/karmaLedgers
 * @accessor api.functional.communityPlatform.admin.karmaLedgers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Creation details: member UUID, optional community UUID, business
     * context for new ledger
     */
    body: ICommunityPlatformKarmaLedger.ICreate;
  };
  export type Body = ICommunityPlatformKarmaLedger.ICreate;
  export type Response = ICommunityPlatformKarmaLedger;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/karmaLedgers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/karmaLedgers";
  export const random = (): ICommunityPlatformKarmaLedger =>
    typia.random<ICommunityPlatformKarmaLedger>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate karma ledgers
 * (community_platform_karma_ledgers).
 *
 * Retrieve a paginated, filterable list of karma ledgers representing the
 * current karma state for members across the platform and per community. Use
 * advanced query capabilities to filter on member ID, community, and
 * currentKarma ranges. This operation provides supporting information for
 * profile pages, admin dashboards, and feature access audits.
 *
 * The operation returns a paginated result set, enabling large-scale analysis
 * as well as individual lookups. Security must restrict broad access to admin
 * roles or, where applicable, allow members to view only their own records. The
 * endpoint is not intended for bulk mutation of karma but serves as a read
 * access point for score analysis, moderation, or feature gating based on
 * business rules.
 *
 * The response object must follow the paginated response standard, using
 * summary DTOs relevant to karma ledgers, and must avoid exposing sensitive or
 * irrelevant member data. Integrate with index or search endpoints for members
 * as appropriate for context and drilldown capabilities.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for karma ledger
 *   retrieval
 * @path /communityPlatform/admin/karmaLedgers
 * @accessor api.functional.communityPlatform.admin.karmaLedgers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination parameters for karma ledger retrieval */
    body: ICommunityPlatformKarmaLedger.IRequest;
  };
  export type Body = ICommunityPlatformKarmaLedger.IRequest;
  export type Response = IPageICommunityPlatformKarmaLedger.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/karmaLedgers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/karmaLedgers";
  export const random = (): IPageICommunityPlatformKarmaLedger.ISummary =>
    typia.random<IPageICommunityPlatformKarmaLedger.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing karma ledger entry for a member or community
 * (community_platform_karma_ledgers table).
 *
 * Update a specific karma ledger entry for a member, either globally or for a
 * specific community, allowing changes to the current_karma value,
 * feature_lock_reason, or associated timestamps.
 *
 * The primary business use cases include administrator-initiated corrections
 * for karma miscalculation, granting exceptions, or enforcing disciplinary
 * adjustments outside of standard voting workflows. Only high-privilege roles
 * (e.g., admin) should be permitted to modify a user's karma via this endpoint,
 * as improper changes could affect important access controls or platform
 * integrity.
 *
 * This operation interfaces with the community_platform_karma_ledgers table as
 * described in the Prisma schema. Each record ties a member's ID to either a
 * global or per-community karma context, with 'current_karma' and a possible
 * 'feature_lock_reason'.
 *
 * All updates must be fully validated: negative karma is possible (per policy),
 * but setting values should respect business policies (not allow uncontrolled
 * inflation/deflation unless intended). Each update should be logged via the
 * community_platform_audit_logs table for traceability.
 *
 * Error handling considerations include invalid ledger IDs, updates to
 * non-existent or deleted ledgers, or attempts to overwrite with disallowed
 * values per policy.
 *
 * @param props.connection
 * @param props.karmaLedgerId Unique identifier of the karma ledger record to be
 *   updated.
 * @param props.body Update fields for the given karma ledger (current_karma,
 *   reason, timestamps, etc.).
 * @path /communityPlatform/admin/karmaLedgers/:karmaLedgerId
 * @accessor api.functional.communityPlatform.admin.karmaLedgers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the karma ledger record to be updated. */
    karmaLedgerId: string & tags.Format<"uuid">;

    /**
     * Update fields for the given karma ledger (current_karma, reason,
     * timestamps, etc.).
     */
    body: ICommunityPlatformKarmaLedger.IUpdate;
  };
  export type Body = ICommunityPlatformKarmaLedger.IUpdate;
  export type Response = ICommunityPlatformKarmaLedger;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/karmaLedgers/:karmaLedgerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/karmaLedgers/${encodeURIComponent(props.karmaLedgerId ?? "null")}`;
  export const random = (): ICommunityPlatformKarmaLedger =>
    typia.random<ICommunityPlatformKarmaLedger>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("karmaLedgerId")(() => typia.assert(props.karmaLedgerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove (hard delete) a karma ledger from the
 * community_platform_karma_ledgers table by ID.
 *
 * Delete a specific karma ledger entry for a user, either globally or for a
 * community, from the community_platform_karma_ledgers table.
 *
 * Permanently removing a ledger disables associated feature or policy gating
 * checks for that member in the relevant context. This operation is typically
 * used for manual correction in rare circumstances or as part of account
 * purging processes. Only admins should be allowed to perform hard deletions
 * due to the risk of breaking business logic that depends on karma for feature
 * gating or permission controls.
 *
 * This is a hard delete according to the Prisma schema—no soft delete or
 * recovery mechanism exists. Once removed, all information about the
 * current_karma and feature lock reason is lost, with the change ideally logged
 * in system audit logs for compliance.
 *
 * Handling of invalid IDs, non-existent targets, or already-purged ledgers
 * should return proper error messages. The action should be auditable by
 * referencing an associated log entry in admin workflows.
 *
 * @param props.connection
 * @param props.karmaLedgerId Unique identifier of the target karma ledger to
 *   remove.
 * @path /communityPlatform/admin/karmaLedgers/:karmaLedgerId
 * @accessor api.functional.communityPlatform.admin.karmaLedgers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target karma ledger to remove. */
    karmaLedgerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/karmaLedgers/:karmaLedgerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/karmaLedgers/${encodeURIComponent(props.karmaLedgerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("karmaLedgerId")(() => typia.assert(props.karmaLedgerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
