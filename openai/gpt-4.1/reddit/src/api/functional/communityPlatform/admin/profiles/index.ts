import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformProfile } from "../../../../structures/ICommunityPlatformProfile";
import { IPageICommunityPlatformProfile } from "../../../../structures/IPageICommunityPlatformProfile";
export * as badges from "./badges/index";
export * as history from "./history/index";
export * as preferences from "./preferences/index";

/**
 * Search and retrieve paginated user profiles, based on
 * community_platform_profiles.
 *
 * This API operation retrieves a filtered and paginated collection of user
 * profiles from the community_platform_profiles table, supporting discovery,
 * moderation, and analytics scenarios. Profile records include basic details
 * such as username, display name, avatar URI, public visibility flag, short
 * status, bio, and related timestamps.
 *
 * Moderators and admins can use this endpoint to search for suspicious or
 * noteworthy accounts by text, time window, or status. Regular members may have
 * restricted visibility (or none at all) depending on platform settings and
 * their own authentication state; only public profiles are returned unless
 * higher privileges are assigned. Sensitive user data such as email, history,
 * or preferences are omitted or redacted for privacy. Filtering supports
 * username, status, creation and update times, and text search within bios or
 * display names. Sorting by creation, activity, or username is available to
 * help discover new or trending users.
 *
 * Paginated results improve usability for large user bases. Typically, this
 * endpoint would be called by admin dashboards, user search modules, or
 * community moderation tools for managing and analyzing platform communities.
 *
 * @param props.connection
 * @param props.body Search, filtering, and pagination criteria for selecting
 *   user profiles. Supports username, status, and bio search.
 * @path /communityPlatform/admin/profiles
 * @accessor api.functional.communityPlatform.admin.profiles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filtering, and pagination criteria for selecting user
     * profiles. Supports username, status, and bio search.
     */
    body: ICommunityPlatformProfile.IRequest;
  };
  export type Body = ICommunityPlatformProfile.IRequest;
  export type Response = IPageICommunityPlatformProfile;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/profiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/profiles";
  export const random = (): IPageICommunityPlatformProfile =>
    typia.random<IPageICommunityPlatformProfile>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user profile by profile ID in the community_platform_profiles table.
 *
 * This operation allows for the permanent removal of a user profile from the
 * platform based on the specified profileId. Deletion can only be performed by
 * the profile owner or an administrator, enforcing strict permissions as
 * outlined in the business requirements. The profile is soft-deleted, moving
 * its record to an inactive state by setting the deleted_at timestamp. Data
 * relationships with posts, comments, and badges are maintained for audit
 * purposes, even after profile deletion, per compliance policies.
 *
 * Security concerns require that profile deletions are logged, with
 * notification provided to the affected user. Any attempt to delete a profile
 * without the correct authorization is blocked and logged for potential review.
 * Error handling includes responding to invalid or non-existent profile IDs,
 * and preventing deletion if the profile is already marked as deleted.
 *
 * This operation is closely related to account closure and privacy flows. It is
 * important to ensure that all GDPR or similar compliance requirements are
 * enforced, including data retention, right to erasure, and audit logging.
 *
 * @param props.connection
 * @param props.profileId The unique identifier of the profile to delete.
 * @path /communityPlatform/admin/profiles/:profileId
 * @accessor api.functional.communityPlatform.admin.profiles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the profile to delete. */
    profileId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/profiles/:profileId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/profiles/${encodeURIComponent(props.profileId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
