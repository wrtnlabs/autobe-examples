import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformModerationQueue } from "../../../../structures/ICommunityPlatformModerationQueue";
import { IPageICommunityPlatformModerationQueue } from "../../../../structures/IPageICommunityPlatformModerationQueue";

/**
 * Create a new moderation queue entry for reported content
 * (CommunityPlatformModerationQueue).
 *
 * This operation allows a moderator (or admin) to submit a new report or
 * escalate an item to the moderation queue for a specific community. Upon
 * submission, a new queue entry is created, linking to the target community,
 * the original report, and (optionally) assigning a moderator responsible for
 * handling the report. It sets an initial workflow status (typically 'pending')
 * and can specify processing priority (e.g., normal, high).
 *
 * Moderators and administrators use this endpoint to triage and route reports
 * for efficient moderation action. Status, assigned moderator, and other
 * workflow fields can be updated after creation using the update endpoint. The
 * moderation queue supports audit, escalation, and workload balancing per
 * community. Security is enforced so only authorized moderators/admins can
 * create queue entries.
 *
 * The Prisma schema requires the community_id (referencing the target
 * community), report_id (referencing the original report), status, priority,
 * and optionally assigned_moderator_id. All relationships must use valid UUIDs
 * for referenced entities. Errors are returned if references are invalid or if
 * business logic (such as exceeding queue thresholds) is violated. This
 * operation is intended for use by moderators and admins only, and is critical
 * for abuse handling, compliance, and process transparency.
 *
 * @param props.connection
 * @param props.body Information for the new moderation queue entry: target
 *   community, report, status, priority, and optionally assigned moderator.
 * @path /communityPlatform/admin/moderationQueues
 * @accessor api.functional.communityPlatform.admin.moderationQueues.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information for the new moderation queue entry: target community,
     * report, status, priority, and optionally assigned moderator.
     */
    body: ICommunityPlatformModerationQueue.ICreate;
  };
  export type Body = ICommunityPlatformModerationQueue.ICreate;
  export type Response = ICommunityPlatformModerationQueue;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/moderationQueues",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/moderationQueues";
  export const random = (): ICommunityPlatformModerationQueue =>
    typia.random<ICommunityPlatformModerationQueue>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search moderation queues for pending and ongoing content reports
 * (community_platform_moderation_queues).
 *
 * Retrieve a filtered and paginated list of moderation queues that correspond
 * to open, pending, or escalated content reports awaiting moderator or admin
 * attention. Each queue summarizes the status, referenced report, assigned
 * moderation actor (if any), target community, and workflow priority.
 *
 * This operation is fundamental for moderation dashboards, allowing efficient
 * triage and prioritization of workload. Filtering by community, assigned
 * moderator, status, and priority enables targeted review for large platforms.
 * Pagination is required for scale and usability.
 *
 * Authorization is limited to users with moderator or admin roles; regular
 * members are strictly forbidden. Moderators will only see queues in
 * communities for which they are assigned; admins may view all.
 *
 * Moderation queues reference the underlying report, community, and assigned
 * actor, linking to actions such as resolving or escalating. This endpoint
 * should be used alongside related operations for report resolution and audit
 * trail retrieval.
 *
 * Proper error handling is provided for unauthorized attempts, invalid search
 * criteria, or exceeding result page limits. All usages should observe abuse
 * prevention and avoid information leakage beyond user's permission scope.
 *
 * @param props.connection
 * @param props.body Search/filter and pagination parameters for moderation
 *   queue listing. Supports filtering by status, assigned moderator, community,
 *   and priority, as well as pagination controls.
 * @path /communityPlatform/admin/moderationQueues
 * @accessor api.functional.communityPlatform.admin.moderationQueues.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search/filter and pagination parameters for moderation queue listing.
     * Supports filtering by status, assigned moderator, community, and
     * priority, as well as pagination controls.
     */
    body: ICommunityPlatformModerationQueue.IRequest;
  };
  export type Body = ICommunityPlatformModerationQueue.IRequest;
  export type Response = IPageICommunityPlatformModerationQueue.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/moderationQueues",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/moderationQueues";
  export const random = (): IPageICommunityPlatformModerationQueue.ISummary =>
    typia.random<IPageICommunityPlatformModerationQueue.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific moderation queue entry
 * (community_platform_moderation_queues).
 *
 * Fetches the full detail of a single moderation queue entry, given its unique
 * identifier. The details returned include the current status (pending, in
 * progress, resolved, escalated), associated report details, assigned moderator
 * (if any), target community, and workflow priority. Also includes timestamps
 * for creation and last update, and any reference to related moderator action
 * history.
 *
 * This endpoint is used by moderation dashboards when a moderator or admin
 * selects a queue for review, prior to taking actions such as resolve or
 * escalation. Sensitive fields (e.g., original reporter, moderation notes,
 * escalation reasons) are exposed in accordance with the permissions of the
 * authenticated user: moderators see full detail for their assigned
 * communities, admins may see all. Unauthorized or member roles are strictly
 * forbidden from accessing this resource.
 *
 * The operation expects a valid UUID for the moderationQueueId parameter,
 * performs authorization checks, and returns either the queue details or
 * appropriate error if not found or not permitted. Used in conjunction with
 * related endpoints for moderation actions and audit trails.
 *
 * @param props.connection
 * @param props.moderationQueueId Unique identifier for the moderation queue
 *   entry to retrieve.
 * @path /communityPlatform/admin/moderationQueues/:moderationQueueId
 * @accessor api.functional.communityPlatform.admin.moderationQueues.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the moderation queue entry to retrieve. */
    moderationQueueId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformModerationQueue;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/moderationQueues/:moderationQueueId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/moderationQueues/${encodeURIComponent(props.moderationQueueId ?? "null")}`;
  export const random = (): ICommunityPlatformModerationQueue =>
    typia.random<ICommunityPlatformModerationQueue>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationQueueId")(() =>
        typia.assert(props.moderationQueueId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing moderation queue entry (CommunityPlatformModerationQueue).
 *
 * This endpoint allows authorized moderators or admins to update a queued
 * moderation task for a specific reported content item. Typical updates include
 * changing the queue status (e.g., from 'pending' to 'in_progress' or
 * 'resolved'), setting or updating the assigned moderator, or adjusting the
 * handling priority (e.g., for urgent content such as abuse).
 *
 * The community_platform_moderation_queues table requires that
 * moderationQueueId matches an existing queue entry, and that any referenced
 * moderator or report IDs are valid UUIDs, respecting referential integrity.
 * Business logic enforces valid status transitions, role-based permissions
 * (moderators and admins only), and prevents unauthorized updates. Attempts to
 * update non-existent or finalized (already resolved) queue entries return
 * errors. This operation is vital for tracking the resolution path of abuse
 * reports and ensuring transparent, auditable moderation workflows.
 *
 * Related business processes include notification of moderators upon new or
 * escalated assignments and audit logging of all queue status changes, as
 * referenced in the requirements analysis and the Prisma table comments.
 *
 * @param props.connection
 * @param props.moderationQueueId Unique identifier of the target moderation
 *   queue entry to update.
 * @param props.body Fields for updating the moderation queue: status, assigned
 *   moderator, priority, etc.
 * @path /communityPlatform/admin/moderationQueues/:moderationQueueId
 * @accessor api.functional.communityPlatform.admin.moderationQueues.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target moderation queue entry to update. */
    moderationQueueId: string & tags.Format<"uuid">;

    /**
     * Fields for updating the moderation queue: status, assigned moderator,
     * priority, etc.
     */
    body: ICommunityPlatformModerationQueue.IUpdate;
  };
  export type Body = ICommunityPlatformModerationQueue.IUpdate;
  export type Response = ICommunityPlatformModerationQueue;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/moderationQueues/:moderationQueueId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/moderationQueues/${encodeURIComponent(props.moderationQueueId ?? "null")}`;
  export const random = (): ICommunityPlatformModerationQueue =>
    typia.random<ICommunityPlatformModerationQueue>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationQueueId")(() =>
        typia.assert(props.moderationQueueId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently erase a moderation queue entry from the moderation queue table
 * after resolution.
 *
 * Delete a specific moderation queue entry from the system, permanently
 * removing its record from the database. This operation is used for moderation
 * cases that have been fully resolved or closed, ensuring that the moderation
 * queue remains manageable and up-to-date.
 *
 * Only users with the moderator or admin role may perform this operation, and
 * only for queues in communities they moderate (or all queues if admin).
 * Deletion attempts on active, unresolved, or escalated entries will be
 * rejected.
 *
 * Prior to deletion, all related moderation actions and audit logs should be
 * reviewed to ensure that removing the entry does not compromise compliance
 * record keeping. This action is logged for traceability, with an audit log
 * entry recording the actor, time, and details of the removal.
 *
 * @param props.connection
 * @param props.moderationQueueId Unique identifier of the target moderation
 *   queue entry to delete
 * @path /communityPlatform/admin/moderationQueues/:moderationQueueId
 * @accessor api.functional.communityPlatform.admin.moderationQueues.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target moderation queue entry to delete */
    moderationQueueId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/moderationQueues/:moderationQueueId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/moderationQueues/${encodeURIComponent(props.moderationQueueId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationQueueId")(() =>
        typia.assert(props.moderationQueueId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
