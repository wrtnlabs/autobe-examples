import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAuditLog } from "../../../../structures/ICommunityPlatformAuditLog";

/**
 * Retrieve detailed information for a specific audit log entry
 * (community_platform_audit_logs table).
 *
 * Retrieve a specific audit log record by its unique identifier from the audit
 * log table. This log provides granular details regarding who performed an
 * action, the type of action, the affected table, and contextual details
 * captured at the time of the event.
 *
 * Audit logs are critical for compliance, security investigations, and
 * transparency, allowing platform administrators to reconstruct event
 * histories, policy changes, or security incidents. Each audit log may contain
 * information such as actor type, actor ID, action type, target table, target
 * ID, event details, and timestamps.
 *
 * Access to individual audit logs should be restricted to admin users only, as
 * log records may contain sensitive or private contextual information. Platform
 * staff can use this endpoint to monitor activity, investigate reported issues,
 * and maintain the integrity and security posture of the system. If a log entry
 * does not exist or access is prohibited, the API will return a suitable error
 * (e.g., 404 Not Found, 403 Forbidden).
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier (UUID) of the audit log entry to
 *   retrieve.
 * @path /communityPlatform/admin/auditLogs/:auditLogId
 * @accessor api.functional.communityPlatform.admin.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the audit log entry to retrieve. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): ICommunityPlatformAuditLog =>
    typia.random<ICommunityPlatformAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
