import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Permanently remove (soft delete) a comment from a post, restricted to author,
 * moderators, or admins as per permissions (community_platform_comments).
 *
 * This DELETE operation enables end-users (authors), community moderators, or
 * admins to delete individual comments within a post. According to the Prisma
 * schema, each comment is identified by 'id' and may be nested (using
 * parent_id). Comments include a soft delete field, allowing the comment to be
 * marked as deleted rather than physically removed, supporting both user
 * privacy and retention/audit requirements.
 *
 * Authorization checks ensure that only the author, a community moderator (as
 * identified via moderator assignments), or a platform admin may perform the
 * deletion. The API must verify the acting user's role and permissions before
 * marking the comment as deleted. Soft deletion is performed by setting the
 * 'deleted_at' timestamp, hiding the comment from normal views, and optionally
 * displaying a placeholder if policy requires.
 *
 * If the deleted comment is a parent in a threaded discussion, application
 * logic must determine whether to recursively mark all child comments as
 * deleted or to orphan/reparent them at the nearest allowed level, according to
 * platform business logic. This action triggers audit logging, as required for
 * traceability and policy compliance. Deletion cascades to associated votes and
 * reports per business rules.
 *
 * Error conditions include attempts by unauthorized users, conflicts with
 * moderation policies (e.g., trying to delete an already-removed comment), and
 * deletion of non-existent comments. Related safeguards ensure proper
 * notification and fallback.
 *
 * Related operations include comment creation (POST), editing (PUT), and
 * moderation workflows for comment enforcement.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post containing the
 *   comment targeted for deletion.
 * @param props.commentId Unique identifier of the comment to be deleted within
 *   the post.
 * @path /communityPlatform/admin/posts/:postId/comments/:commentId
 * @accessor api.functional.communityPlatform.admin.posts.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the parent post containing the comment targeted
     * for deletion.
     */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to be deleted within the post. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
