import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformBannedWord } from "../../../../structures/ICommunityPlatformBannedWord";
import { IPageICommunityPlatformBannedWord } from "../../../../structures/IPageICommunityPlatformBannedWord";
import { ICommunityPlatformBannedWords } from "../../../../structures/ICommunityPlatformBannedWords";

/**
 * Add a new banned word or phrase for platform content policy enforcement
 * (community_platform_banned_words).
 *
 * Create a new entry in the platform-wide banned words list for moderation and
 * automated filtering. This function is vital for enabling timely response to
 * emerging content issues, community policy changes, or new regulatory
 * requirements that dictate the prohibition of specific terms or phrases.
 *
 * The operation supports full audit logging of who enacts the ban and why,
 * relying on Prisma schema enforcement for word uniqueness and optional reason
 * entry. It only allows users with administrative permissions to add or
 * activate banned words, preventing unauthorized curation of moderation policy.
 * Validation includes word uniqueness, proper formatting, and optional rational
 * explanation for later reference or appeal.
 *
 * If the word already exists (even if soft-deleted), an error is returned
 * specifying the conflict, and all business logic aligns with the moderation
 * audit trail. Error scenarios cover authorization failures, validation errors,
 * and attempts to introduce banned words that contradict platform guidelines.
 *
 * @param props.connection
 * @param props.body Details of the new banned word to create, including word,
 *   enforcement status, and explanatory reason.
 * @path /communityPlatform/admin/bannedWords
 * @accessor api.functional.communityPlatform.admin.bannedWords.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details of the new banned word to create, including word, enforcement
     * status, and explanatory reason.
     */
    body: ICommunityPlatformBannedWord.ICreate;
  };
  export type Body = ICommunityPlatformBannedWord.ICreate;
  export type Response = ICommunityPlatformBannedWord;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/bannedWords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/bannedWords";
  export const random = (): ICommunityPlatformBannedWord =>
    typia.random<ICommunityPlatformBannedWord>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered and paginated list of all banned words
 * (community_platform_banned_words table).
 *
 * Search the list of banned words or phrases, filtering by keyword, enforcement
 * status, or reason. Allows platform administrators to easily maintain, review,
 * and audit banned terms for content moderation and policy compliance.
 *
 * Administrators may use this endpoint to search for banned words by partial
 * matches, sort the results by date of creation or update, filter by current
 * enforcement status (active/inactive), and understand the reasoning for each
 * banned word entry, which is essential for compliance and transparency.
 *
 * The data returned includes details such as the banned word, the reason for
 * its prohibition, enforcement status, timestamps, and, if present, a record of
 * soft-deleted entries. Rate limiting and authorization apply; only
 * administrative users should have access due to the policy-sensitive nature of
 * this data. Related operations include adding, updating, or deleting banned
 * words, which are handled by separate endpoints.
 *
 * @param props.connection
 * @param props.body Filter, sorting, and pagination parameters for searching
 *   banned words.
 * @path /communityPlatform/admin/bannedWords
 * @accessor api.functional.communityPlatform.admin.bannedWords.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter, sorting, and pagination parameters for searching banned
     * words.
     */
    body: ICommunityPlatformBannedWord.IRequest;
  };
  export type Body = ICommunityPlatformBannedWord.IRequest;
  export type Response = IPageICommunityPlatformBannedWord;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/bannedWords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/bannedWords";
  export const random = (): IPageICommunityPlatformBannedWord =>
    typia.random<IPageICommunityPlatformBannedWord>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific banned word for moderation policy review
 * (community_platform_banned_words).
 *
 * Retrieve detailed information about a particular banned word by its unique
 * identifier. This is useful for moderation and administrative purposes where
 * understanding the word, reasoning for its entry in the ban list, and its
 * enforcement status (active or soft-deleted) is needed.
 *
 * Security controls restrict access to only users with administrative rights or
 * elevated moderation roles since the banned words list governs sensitive
 * moderation logic and policy enforcement. The endpoint provides full details,
 * including the rationale (reason), when the ban was enacted or removed
 * (deleted_at), and any accompanying metadata for compliance, review, or
 * appeals.
 *
 * It operates directly against the 'community_platform_banned_words' table as
 * outlined in the Prisma schema, ensuring all returned fields correspond to
 * that structure. Error handling covers forbidden access (insufficient
 * permissions), non-existent identifiers (word not found), and attempts to view
 * banned words that are not available to the callerâ€™s role (in the case of
 * soft-deleted entries).
 *
 * @param props.connection
 * @param props.bannedWordId Unique identifier of the banned word entry to
 *   retrieve.
 * @path /communityPlatform/admin/bannedWords/:bannedWordId
 * @accessor api.functional.communityPlatform.admin.bannedWords.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the banned word entry to retrieve. */
    bannedWordId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformBannedWord;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/bannedWords/:bannedWordId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/bannedWords/${encodeURIComponent(props.bannedWordId ?? "null")}`;
  export const random = (): ICommunityPlatformBannedWord =>
    typia.random<ICommunityPlatformBannedWord>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bannedWordId")(() => typia.assert(props.bannedWordId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a platform-wide banned word entry for content moderation
 * (community_platform_banned_words).
 *
 * Update a banned word entry for the platform's content moderation system.
 * Banned words are used by the system to filter and prevent submission of
 * prohibited content across posts, comments, and other user inputs.
 * Administrators can use this endpoint to change the prohibited word or phrase,
 * adjust its enforcement status, and alter or add rationale for why it is
 * banned.
 *
 * Platform policy requires all changes to banned words to be logged and
 * auditable, supporting compliance with moderation transparency. Updating a
 * banned word may include activating or deactivating the enforcement, and
 * modifying the reason message displayed to users on violation attempts.
 *
 * The operation validates uniqueness (case-insensitive) for word updates and
 * ensures that reactivation or deactivation is immediately propagated to all
 * moderation flows. Only users with administrative privileges are authorized to
 * perform this operation. Changes take effect immediately across the platform.
 * If the word is already in use as a banned word for another entry, a conflict
 * error will be returned. All input fields must adhere to character length and
 * format constraints as defined by the Prisma schema.
 *
 * @param props.connection
 * @param props.bannedWordId Unique identifier of the banned word entry to
 *   update.
 * @param props.body Updated banned word information to be applied to the
 *   record.
 * @path /communityPlatform/admin/bannedWords/:bannedWordId
 * @accessor api.functional.communityPlatform.admin.bannedWords.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the banned word entry to update. */
    bannedWordId: string & tags.Format<"uuid">;

    /** Updated banned word information to be applied to the record. */
    body: ICommunityPlatformBannedWords.IUpdate;
  };
  export type Body = ICommunityPlatformBannedWords.IUpdate;
  export type Response = ICommunityPlatformBannedWords;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/bannedWords/:bannedWordId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/bannedWords/${encodeURIComponent(props.bannedWordId ?? "null")}`;
  export const random = (): ICommunityPlatformBannedWords =>
    typia.random<ICommunityPlatformBannedWords>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bannedWordId")(() => typia.assert(props.bannedWordId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a platform-wide banned word entry
 * (community_platform_banned_words).
 *
 * Remove a banned word from the system's prohibited content list. Once a banned
 * word is deleted, it is no longer enforced by moderation filters, and its
 * usage may become permissible for all platform users in posts, comments, and
 * any user-submitted fields.
 *
 * Deleting a banned word is a hard-delete operation, which means the entry is
 * permanently removed from the database (community_platform_banned_words),
 * erasing all historical moderation controls associated with that word or
 * phrase. This operation is exclusively available to admin users due to the
 * impact on community safety and moderation effectiveness.
 *
 * Upon completion, the system instantly ceases enforcement of the removed word
 * across all content moderation and validation flows. If an invalid or
 * non-existent banned word ID is specified, an error is returned.
 * Administrators should ensure policy and moderation staff are informed of such
 * changes. No response body is returned for a successful deletion; errors are
 * handled per platform standard error response structure.
 *
 * @param props.connection
 * @param props.bannedWordId Unique identifier of the banned word entry to be
 *   deleted.
 * @path /communityPlatform/admin/bannedWords/:bannedWordId
 * @accessor api.functional.communityPlatform.admin.bannedWords.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the banned word entry to be deleted. */
    bannedWordId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/bannedWords/:bannedWordId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/bannedWords/${encodeURIComponent(props.bannedWordId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bannedWordId")(() => typia.assert(props.bannedWordId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
