import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdmin } from "../../../../structures/ICommunityPlatformAdmin";
import { IPageICommunityPlatformAdmin } from "../../../../structures/IPageICommunityPlatformAdmin";

/**
 * List, filter, and paginate all platform admin accounts
 * (community_platform_admins table).
 *
 * This operation provides a paginated and filterable index of administrator
 * accounts from the community_platform_admins Prisma schema. Each administrator
 * is represented by metadata such as their unique ID, email, whether they are a
 * superuser, their account status (e.g., active, suspended, deleted), and audit
 * timestamps. The operation is essential for performing platform-wide
 * management, facilitating compliance monitoring, and supporting security
 * reviews such as separation-of-duty analysis or admin credential audits.
 *
 * Security and privacy are paramount: full exposure of admin details is only
 * available to authenticated users with the 'admin' role. Sensitive details
 * such as password hashes are never returned. All search activity should be
 * logged for audit traceability. The endpoint supports complex filters and
 * sortsâ€”for example, filtering by status or superuser state, and sorting by
 * created_at or updated_at.
 *
 * The response returns a paginated summary DTO for each admin record to enable
 * efficient rendering and actionable insights for backoffice and operational
 * dashboards. Should be integrated with admin role management workflows (e.g.,
 * onboarding, offboarding, role changes), and related platform
 * auditing/monitoring flows. If a search/filter returns no results, an empty
 * dataset with pagination metadata is returned. Robust error handling ensures
 * forbidden access is detected and logged, with appropriate messages for
 * unauthorized requests.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering and
 *   sorting admin accounts.
 * @path /communityPlatform/admin/admins
 * @accessor api.functional.communityPlatform.admin.admins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering and sorting
     * admin accounts.
     */
    body: ICommunityPlatformAdmin.IRequest;
  };
  export type Body = ICommunityPlatformAdmin.IRequest;
  export type Response = IPageICommunityPlatformAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/admins";
  export const random = (): IPageICommunityPlatformAdmin.ISummary =>
    typia.random<IPageICommunityPlatformAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific platform administrator
 * (community_platform_admins).
 *
 * This operation retrieves the complete profile for a platform administrator
 * based on the provided adminId. The adminId must match a valid UUID for an
 * administrator in the community_platform_admins table. Returned information
 * includes the admin's email address, superuser privilege flag, account status
 * (such as active or suspended), and audit metadata (timestamps for creation,
 * update, and soft deletion).
 *
 * Security for this operation is strict: only users with the admin role may
 * access this endpoint, enabling platform staff to view or verify other admin
 * accounts for platform management, compliance, or delegation of privileges.
 * Sensitive information (like password hashes or MFA secrets) is not included
 * in the response.
 *
 * The response body reflects all core fields in the Prisma schema, including
 * audit fields useful for administrative interfaces. Related sub-entities (such
 * as logs, assignments) are not returned but may be referenced elsewhere. Error
 * scenarios include invalid or missing adminId, unauthorized access, or
 * non-existent records.
 *
 * @param props.connection
 * @param props.adminId Unique identifier (UUID) of the platform administrator
 *   to retrieve.
 * @path /communityPlatform/admin/admins/:adminId
 * @accessor api.functional.communityPlatform.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the platform administrator to retrieve. */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAdmin;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): ICommunityPlatformAdmin =>
    typia.random<ICommunityPlatformAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific platform administrator's profile/status
 * (community_platform_admins).
 *
 * This operation updates the properties of a platform administrator, identified
 * by their adminId, as stored in the community_platform_admins table.
 * Acceptable fields for updating depend on business policies: typically,
 * account status, superuser privileges, and email are updatable. Password_hash
 * changes may require additional security workflows and are generally handled
 * by dedicated credential endpoints for best practice.
 *
 * Only users with admin authorization, typically superusers, may invoke this
 * operation. All updates are subject to audit requirements: the API must
 * maintain timestamps and provide clear history for compliance. Responses
 * include the updated admin's complete entity details as confirmation. Attempts
 * to update non-existent, deleted, or unauthorized admin accounts will yield
 * appropriate errors or rejections by business logic.
 *
 * All modifications must comply with account lifecycle rules, and platform
 * policies regarding administrative privilege changes, to prevent privilege
 * escalation or accidental lockouts. Sensitive settings and credentials must be
 * protected according to security guidelines.
 *
 * @param props.connection
 * @param props.adminId Unique identifier (UUID) of the administrator to update.
 * @param props.body Fields to update for the administrator (status, superuser
 *   flag, email, or other editable properties).
 * @path /communityPlatform/admin/admins/:adminId
 * @accessor api.functional.communityPlatform.admin.admins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the administrator to update. */
    adminId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the administrator (status, superuser flag,
     * email, or other editable properties).
     */
    body: ICommunityPlatformAdmin.IUpdate;
  };
  export type Body = ICommunityPlatformAdmin.IUpdate;
  export type Response = ICommunityPlatformAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/admins/:adminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): ICommunityPlatformAdmin =>
    typia.random<ICommunityPlatformAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
