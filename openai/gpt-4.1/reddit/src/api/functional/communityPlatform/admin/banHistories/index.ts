import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformBanHistory } from "../../../../structures/ICommunityPlatformBanHistory";

/**
 * Get detailed information for a specific member ban history record by
 * banHistoryId (community_platform_ban_histories).
 *
 * Retrieve and view a detailed ban history entry for a particular member,
 * moderator, or admin as recorded in the ban histories table.
 *
 * This API operation supports security-critical moderation review and is
 * accessible only to authorized administrators and, as appropriate, to
 * community-level moderators with scope for the affected ban. Path parameter
 * banHistoryId is required and must be a valid UUID matching an existing ban
 * record. The operation returns all properties of the ban including who issued
 * it, for which member, within which community (if applicable), duration, type,
 * whether the ban is active, the reason provided by the moderator or admin, and
 * references to the triggering report if the ban originated from a user
 * report.
 *
 * Data exposure must be carefully controlled: only authorized actors can access
 * ban history, and sensitive information about admin/moderator actors will be
 * displayed according to role and business rules. Error responses are returned
 * if the banHistoryId is not found or the caller lacks permission.
 *
 * This endpoint relates closely to audit and escalation workflows as bans may
 * be referenced in appeal, compliance requests, or moderation dashboards.
 *
 * @param props.connection
 * @param props.banHistoryId The unique identifier of the ban history record to
 *   retrieve.
 * @path /communityPlatform/admin/banHistories/:banHistoryId
 * @accessor api.functional.communityPlatform.admin.banHistories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the ban history record to retrieve. */
    banHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformBanHistory;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/banHistories/:banHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/banHistories/${encodeURIComponent(props.banHistoryId ?? "null")}`;
  export const random = (): ICommunityPlatformBanHistory =>
    typia.random<ICommunityPlatformBanHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("banHistoryId")(() => typia.assert(props.banHistoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing member ban history record
 * (community_platform_ban_histories).
 *
 * Update an existing ban history record for a member in the community platform.
 *
 * This operation allows a platform administrator or entitled moderator to edit
 * a ban record, such as changing its reason, duration, status
 * (active/inactive), or associating it with a specific report or community.
 * Edits may be required for handling appeal outcomes, revising ban periods
 * (e.g., converting a temporary ban to permanent or vice versa), correcting
 * errors, or adding clarifying notes. The system must ensure only authorized
 * actors make such changes, and all changes should be preserved for compliance
 * and future review.
 *
 * The operation directly references the community_platform_ban_histories table
 * as per the Prisma schema, updating all modifiable columns. Care must be taken
 * not to erase critical audit trailsâ€”edits should be justified and additional
 * audit logs should be recorded. Proper validation ensures that updates adhere
 * to business rules, such as allowed ban_type values and permissible state
 * transitions. If an update would violate integrity (e.g., ending a ban in the
 * past when still marked active), the system should block the change and return
 * a clear error.
 *
 * This endpoint is closely related to system compliance, legal retention, and
 * appeal workflows. Other endpoints, such as viewing ban histories or the
 * underlying user's profile, may be referenced by clients before or after
 * calling this endpoint.
 *
 * @param props.connection
 * @param props.banHistoryId Unique identifier of the ban history entry to be
 *   updated.
 * @param props.body Fields to update in the ban history record for a member
 *   (status, reason, period, action details).
 * @path /communityPlatform/admin/banHistories/:banHistoryId
 * @accessor api.functional.communityPlatform.admin.banHistories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the ban history entry to be updated. */
    banHistoryId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the ban history record for a member (status,
     * reason, period, action details).
     */
    body: ICommunityPlatformBanHistory.IUpdate;
  };
  export type Body = ICommunityPlatformBanHistory.IUpdate;
  export type Response = ICommunityPlatformBanHistory;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/banHistories/:banHistoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/banHistories/${encodeURIComponent(props.banHistoryId ?? "null")}`;
  export const random = (): ICommunityPlatformBanHistory =>
    typia.random<ICommunityPlatformBanHistory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("banHistoryId")(() => typia.assert(props.banHistoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently erase (hard delete) a ban history record
 * (community_platform_ban_histories) by id.
 *
 * Permanently delete a ban history entry from the community platform system.
 *
 * This operation is reserved strictly for platform administrators and addresses
 * extraordinary circumstances such as legal data removal requests, proven
 * wrongful moderation actions, or compliance with privacy regulations (e.g.,
 * GDPR). By design, this is a hard delete: the row is fully removed from
 * community_platform_ban_histories based on the given banHistoryId, and cannot
 * be restored. Because ban histories serve a critical role in platform
 * integrity and moderation accountability, this operation should require
 * additional checks before completion, such as explicit confirmation, logging
 * the action in a secondary audit trail, and potentially requiring multi-admin
 * approval. System implementers are expected to guard this API carefully.
 *
 * Care must be taken to ensure related audit and history records are either
 * handled per policy (cascaded deletes or manual cleanup) or preserved where
 * legally required. If the record does not exist, or deletion is not permitted
 * by the current retention or compliance policy, the system should respond with
 * a clear error.
 *
 * Use this endpoint in rare, exceptional business workflows only, and document
 * every use.
 *
 * @param props.connection
 * @param props.banHistoryId Unique identifier of the ban history entry to
 *   erase.
 * @path /communityPlatform/admin/banHistories/:banHistoryId
 * @accessor api.functional.communityPlatform.admin.banHistories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the ban history entry to erase. */
    banHistoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/banHistories/:banHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/banHistories/${encodeURIComponent(props.banHistoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("banHistoryId")(() => typia.assert(props.banHistoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create and record a new member ban in the moderation ban histories table
 * (community_platform_ban_histories).
 *
 * Record the issuance of a new member ban by a moderator or administrator.
 * Required information includes the banned member's ID, the moderator or admin
 * being the issuer, the target community if community-specific (else null for
 * global ban), the reason for the ban, type of ban (temporary or permanent),
 * issue and expiration times, and references to any original user report.
 *
 * The input is validated for correct assignment: only authorized moderators or
 * admins can create bans, and the type, duration, and reasons are checked
 * against community and system policies. Start and end times are used to
 * enforce temporary or permanent status. Duplicate or conflicting active bans
 * are prevented.
 *
 * The operation provides an audit trail for moderation transparency and
 * compliance, with cross-references for appeals, review, or escalation. On
 * success, the complete ban history record is returned. Permission failures and
 * input validation errors are surfaced as error responses.
 *
 * @param props.connection
 * @param props.body Ban history creation data, specifying member, issuer,
 *   community, period, reason, and reference metadata.
 * @path /communityPlatform/admin/banHistories
 * @accessor api.functional.communityPlatform.admin.banHistories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Ban history creation data, specifying member, issuer, community,
     * period, reason, and reference metadata.
     */
    body: ICommunityPlatformBanHistory.ICreate;
  };
  export type Body = ICommunityPlatformBanHistory.ICreate;
  export type Response = ICommunityPlatformBanHistory;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/banHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/banHistories";
  export const random = (): ICommunityPlatformBanHistory =>
    typia.random<ICommunityPlatformBanHistory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
