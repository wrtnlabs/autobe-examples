import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityStatusChange } from "../../../../../structures/ICommunityPlatformCommunityStatusChange";
import { IPageICommunityPlatformCommunityStatusChange } from "../../../../../structures/IPageICommunityPlatformCommunityStatusChange";

/**
 * Create and record a new community status change event (e.g., banned, private,
 * active) into the audit trail.
 *
 * This API endpoint enables administrators to record a new status change event
 * for a community, such as banning, suspending, or reinstating it, or moving it
 * into private or archived state. The operation updates the
 * community_platform_community_status_changes table, logging the actor
 * (administrator), targeted community, transition from prior status to the
 * resulting status, and any accompanying justification or notes for the event.
 * This ensures every significant administrative or moderation action is
 * transparently recorded.
 *
 * Strict authorization is required to avoid abuse or fraudulent changes; only
 * platform admins or, where appropriate, moderators assigned to the target
 * community should be allowed to invoke this operation. Upon execution, the
 * operation ensures all provided status values are validated against allowed
 * enumerations and that the referenced community is not soft-deleted. Errors
 * are returned on invalid community, status value, or insufficient privilege.
 *
 * This operation complements the ability to retrieve and list community status
 * change events, providing a consistent audit log and compliance system for
 * reassigning roles, handling appeals, or performing forensic analysis. Proper
 * integration with notification and messaging systems is encouraged to inform
 * affected users and moderators of the change.
 *
 * @param props.connection
 * @param props.communityId Identifier for the target community whose status
 *   will be updated.
 * @param props.body Details required to create a new community status change
 *   (prior status, new status, actor, reason, notes).
 * @path /communityPlatform/admin/communities/:communityId/statusChanges
 * @accessor api.functional.communityPlatform.admin.communities.statusChanges.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Identifier for the target community whose status will be updated. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Details required to create a new community status change (prior
     * status, new status, actor, reason, notes).
     */
    body: ICommunityPlatformCommunityStatusChange.ICreate;
  };
  export type Body = ICommunityPlatformCommunityStatusChange.ICreate;
  export type Response = ICommunityPlatformCommunityStatusChange;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/admin/communities/:communityId/statusChanges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/communities/${encodeURIComponent(props.communityId ?? "null")}/statusChanges`;
  export const random = (): ICommunityPlatformCommunityStatusChange =>
    typia.random<ICommunityPlatformCommunityStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated audit trail of all status changes for a community
 * (community_platform_community_status_changes table).
 *
 * This API endpoint allows authorized users (moderators for the community or
 * administrators) to search and retrieve paginated audit records of all status
 * changes for a given community, as recorded in the
 * 'community_platform_community_status_changes' table. Each record logs a
 * change event including the previous and new status, the admin or moderator
 * who performed the change, the rationale, any audit notes, and precise
 * timestamps.
 *
 * Clients submit a PATCH request to the endpoint with optional advanced
 * filtering and pagination parameters in the body, enabling sorting by
 * timestamp, filtering by status types (such as banned or private), or querying
 * by the actor responsible. Security enforcement ensures only users with
 * moderator or admin privileges for that community may access this data. If a
 * user without sufficient privileges attempts access, an error is returned.
 *
 * Typical uses include compliance audits, moderator activity reviews, or
 * regulatory checks. This operation is critical for transparency and
 * accountability in the management of community accessibility and configuration
 * changes.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community whose status
 *   change logs are being retrieved
 * @param props.body Advanced filtering, search, sorting, and pagination options
 *   for retrieving status change logs.
 * @path /communityPlatform/admin/communities/:communityId/statusChanges
 * @accessor api.functional.communityPlatform.admin.communities.statusChanges.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the community whose status change logs are being
     * retrieved
     */
    communityId: string & tags.Format<"uuid">;

    /**
     * Advanced filtering, search, sorting, and pagination options for
     * retrieving status change logs.
     */
    body: ICommunityPlatformCommunityStatusChange.IRequest;
  };
  export type Body = ICommunityPlatformCommunityStatusChange.IRequest;
  export type Response = IPageICommunityPlatformCommunityStatusChange;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/communities/:communityId/statusChanges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/communities/${encodeURIComponent(props.communityId ?? "null")}/statusChanges`;
  export const random = (): IPageICommunityPlatformCommunityStatusChange =>
    typia.random<IPageICommunityPlatformCommunityStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific community status change event by its ID from
 * community_platform_community_status_changes.
 *
 * This operation provides detailed retrieval of a single status change event
 * for a specified community. Each record in the
 * community_platform_community_status_changes table represents a snapshot of a
 * status transition (such as from 'active' to 'banned', or from 'private' to
 * 'active'). The record includes who performed the status change—admin or
 * moderator—when the event occurred, and the reasoning and notes associated
 * with the action. If a community is banned or unbanned, made private or
 * public, or otherwise undergoes changes affecting accessibility, this entry
 * allows full insight into how, when, and why the action occurred.
 *
 * Access to this operation is generally restricted to roles with appropriate
 * permissions: users may see limited fields, while moderators and admins have
 * full audit visibility. The operation is essential for compliance reviews,
 * historical access control decisions, user appeals, and forensics in the event
 * of misconduct or errors. Business logic ensures only non-soft-deleted
 * communities and status changes are visible, and fields such as notes,
 * previous status, and new status are protected from unauthorized exposure.
 *
 * Proper error handling is implemented for invalid or nonexistent community or
 * status change IDs, and for attempts to view events of deleted/banned
 * communities (subject to role). Clients should use this API in conjunction
 * with the listing/creation endpoints for status changes to provide
 * administrators and moderators with transparent records.
 *
 * @param props.connection
 * @param props.communityId Identifier of the target community.
 * @param props.statusChangeId Identifier of the specific community status
 *   change to retrieve.
 * @path /communityPlatform/admin/communities/:communityId/statusChanges/:statusChangeId
 * @accessor api.functional.communityPlatform.admin.communities.statusChanges.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the target community. */
    communityId: string & tags.Format<"uuid">;

    /** Identifier of the specific community status change to retrieve. */
    statusChangeId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunityStatusChange;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/communities/:communityId/statusChanges/:statusChangeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/communities/${encodeURIComponent(props.communityId ?? "null")}/statusChanges/${encodeURIComponent(props.statusChangeId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityStatusChange =>
    typia.random<ICommunityPlatformCommunityStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("statusChangeId")(() => typia.assert(props.statusChangeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update community status change entry
 * (community_platform_community_status_changes table).
 *
 * This API operation enables administrators to update the details of a single
 * community status change record. Such status changes record all transitions in
 * community state (such as from 'active' to 'banned', 'private', 'archived'),
 * including the moderator/admin responsible, timestamps, and supporting
 * reasoning. Updating may involve correcting the previous/new status fields,
 * change_reason, or notes for audit accuracy.
 *
 * Security is enforced strictly: only admin roles are permitted, and attempted
 * changes are logged for compliance. Modifications must reference actual
 * community and status change IDs in the path parameters, ensuring precise
 * targeting in the database. Underlying Prisma schema fields such as
 * previous_status, new_status, change_reason, and notes are referenced for
 * updates.
 *
 * Validation rules require that the combination of communityId and
 * statusChangeId exists, and that the request body supplies valid values
 * matching the business schema for allowed edits. Attempts to update finalized
 * or historical status changes may be rejected according to audit lock or
 * compliance flags. This operation is related to the creation and querying of
 * community status changes, but solely supports update, not creation or
 * deletion. Errors are raised if edit constraints are violated or unauthorized
 * access is attempted.
 *
 * @param props.connection
 * @param props.communityId The unique identifier (UUID) of the target community
 * @param props.statusChangeId The unique identifier (UUID) of the status change
 *   entry to update
 * @param props.body Updated data for the community status change entry
 * @path /communityPlatform/admin/communities/:communityId/statusChanges/:statusChangeId
 * @accessor api.functional.communityPlatform.admin.communities.statusChanges.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the target community */
    communityId: string & tags.Format<"uuid">;

    /** The unique identifier (UUID) of the status change entry to update */
    statusChangeId: string & tags.Format<"uuid">;

    /** Updated data for the community status change entry */
    body: ICommunityPlatformCommunityStatusChange.IUpdate;
  };
  export type Body = ICommunityPlatformCommunityStatusChange.IUpdate;
  export type Response = ICommunityPlatformCommunityStatusChange;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/admin/communities/:communityId/statusChanges/:statusChangeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/admin/communities/${encodeURIComponent(props.communityId ?? "null")}/statusChanges/${encodeURIComponent(props.statusChangeId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityStatusChange =>
    typia.random<ICommunityPlatformCommunityStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("statusChangeId")(() => typia.assert(props.statusChangeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a community status change entry
 * (community_platform_community_status_changes table).
 *
 * This API operation allows platform administrators to permanently delete a
 * community status change event. Status changes are audit records tracking
 * every transition in a community's status, including who executed the change,
 * previous/new status, reasons, and timestamps. Deleting such records is not
 * routine and is only allowed in exceptional circumstances (such as regulatory
 * erasure requests or clear policy compliance errors), due to the nature of
 * audit requirements.
 *
 * The deletion is enforced as a hard delete, irreversibly removing the record
 * from the database without a soft-deleted field, as the schema lacks a soft
 * deletion column. Only admin roles may invoke this operation, and all actions
 * are logged for oversight. Path parameters precisely identify both the
 * community and the specific status change record.
 *
 * Errors are returned if the record does not exist, deletion is disallowed due
 * to audit lock, or the user lacks the required role. This operation is
 * strictly for deletion and does not support recovery or undeletion. It should
 * be used sparingly and with full compliance review.
 *
 * @param props.connection
 * @param props.communityId The unique identifier (UUID) of the target community
 * @param props.statusChangeId The unique identifier (UUID) of the status change
 *   entry to delete
 * @path /communityPlatform/admin/communities/:communityId/statusChanges/:statusChangeId
 * @accessor api.functional.communityPlatform.admin.communities.statusChanges.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier (UUID) of the target community */
    communityId: string & tags.Format<"uuid">;

    /** The unique identifier (UUID) of the status change entry to delete */
    statusChangeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/admin/communities/:communityId/statusChanges/:statusChangeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/communities/${encodeURIComponent(props.communityId ?? "null")}/statusChanges/${encodeURIComponent(props.statusChangeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("statusChangeId")(() => typia.assert(props.statusChangeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
