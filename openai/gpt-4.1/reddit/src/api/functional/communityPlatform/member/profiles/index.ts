import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformProfile } from "../../../../structures/ICommunityPlatformProfile";
export * as badges from "./badges/index";
export * as history from "./history/index";
export * as preferences from "./preferences/index";

/**
 * Update an existing profile entry in community_platform_profiles by profileId.
 *
 * Allows an authenticated user to modify their own profile information,
 * including username (which must be unique and within allowed length
 * constraints), biography/about text, avatar image URI, status message, and
 * privacy setting (public or restricted). The request must pass all relevant
 * validations, such as uniqueness checks for username, maximum lengths for
 * bio/status, valid URI formats for avatar, and appropriate privacy option
 * selection.
 *
 * If an administrator or moderator calls this operation for a profile they do
 * not own, the platform must ensure the caller has the correct role and logs
 * the edit for audit and compliance as per requirements. If a member tries to
 * edit a profile they do not own, the operation is rejected with an
 * authorization error.
 *
 * If any part of the input fails business logic validation (e.g., username
 * already in use, bio too long), the operation must provide detailed error
 * information in accordance with error-handling guidelines. On successful
 * update, the operation returns the updated profile entity as defined by the
 * Prisma schema.
 *
 * @param props.connection
 * @param props.profileId Unique identifier of the target profile to update.
 * @param props.body New profile data (username, bio, avatar_uri, etc) to update
 *   for the specified profileId.
 * @path /communityPlatform/member/profiles/:profileId
 * @accessor api.functional.communityPlatform.member.profiles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target profile to update. */
    profileId: string & tags.Format<"uuid">;

    /**
     * New profile data (username, bio, avatar_uri, etc) to update for the
     * specified profileId.
     */
    body: ICommunityPlatformProfile.IUpdate;
  };
  export type Body = ICommunityPlatformProfile.IUpdate;
  export type Response = ICommunityPlatformProfile;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/profiles/:profileId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/profiles/${encodeURIComponent(props.profileId ?? "null")}`;
  export const random = (): ICommunityPlatformProfile =>
    typia.random<ICommunityPlatformProfile>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user profile by profile ID in the community_platform_profiles table.
 *
 * This operation allows for the permanent removal of a user profile from the
 * platform based on the specified profileId. Deletion can only be performed by
 * the profile owner or an administrator, enforcing strict permissions as
 * outlined in the business requirements. The profile is soft-deleted, moving
 * its record to an inactive state by setting the deleted_at timestamp. Data
 * relationships with posts, comments, and badges are maintained for audit
 * purposes, even after profile deletion, per compliance policies.
 *
 * Security concerns require that profile deletions are logged, with
 * notification provided to the affected user. Any attempt to delete a profile
 * without the correct authorization is blocked and logged for potential review.
 * Error handling includes responding to invalid or non-existent profile IDs,
 * and preventing deletion if the profile is already marked as deleted.
 *
 * This operation is closely related to account closure and privacy flows. It is
 * important to ensure that all GDPR or similar compliance requirements are
 * enforced, including data retention, right to erasure, and audit logging.
 *
 * @param props.connection
 * @param props.profileId The unique identifier of the profile to delete.
 * @path /communityPlatform/member/profiles/:profileId
 * @accessor api.functional.communityPlatform.member.profiles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the profile to delete. */
    profileId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/profiles/:profileId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/profiles/${encodeURIComponent(props.profileId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
