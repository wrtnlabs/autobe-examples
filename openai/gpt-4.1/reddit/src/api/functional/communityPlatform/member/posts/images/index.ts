import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostImage } from "../../../../../structures/ICommunityPlatformPostImage";

/**
 * Add an image to a post as an attachment (community_platform_post_images,
 * community_platform_file_uploads).
 *
 * Attach a new image to an existing post, enriching the presentation or content
 * variety within a community thread.
 *
 * The user (typically, the original post author) can add images by referencing
 * files that have been successfully uploaded to the platform. The request must
 * specify the relevant post, the pre-uploaded file as its image, and define the
 * image's order within the post (for cases with multiple images). The API
 * enforces all business rules from the database schema and requirement specs,
 * such as limiting total image count, ensuring file format/size/type validity,
 * and permission checks (only the author, mods, or admins may add images to a
 * post). File references must match IDs in the file uploads table and must not
 * already be soft-deleted. All image additions are audited and may be subject
 * to moderation approval flows depending on post status.
 *
 * The underlying tables are 'community_platform_post_images' (for the
 * association) and 'community_platform_file_uploads' (for the referenced file).
 * Input must include the IDs for both the target post and the image properly.
 * Request errors are returned for permission violations, non-existent or
 * invalid file IDs, or exceeding image count per post.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post to attach the image
 *   to.
 * @param props.body Information for associating an uploaded image with a post,
 *   including the file upload ID and display ordering.
 * @path /communityPlatform/member/posts/:postId/images
 * @accessor api.functional.communityPlatform.member.posts.images.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target post to attach the image to. */
    postId: string & tags.Format<"uuid">;

    /**
     * Information for associating an uploaded image with a post, including
     * the file upload ID and display ordering.
     */
    body: ICommunityPlatformPostImage.ICreate;
  };
  export type Body = ICommunityPlatformPostImage.ICreate;
  export type Response = ICommunityPlatformPostImage;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/posts/:postId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/images`;
  export const random = (): ICommunityPlatformPostImage =>
    typia.random<ICommunityPlatformPostImage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update or reorder a post's existing image attachment
 * (community_platform_post_images).
 *
 * Update or reorder an image associated with a post. This is typically used to
 * adjust the sequence of images within a post's gallery or change the file
 * association if image replacement is allowed by future platform policies.
 *
 * This operation requires both the post and image identifiers, as the
 * association table 'community_platform_post_images' uses both as keys for
 * lookups and uniqueness constraints. Only permitted users (original author,
 * moderators, or admins) can change image details. If the operation attempts to
 * assign a duplicate image order for the same post, or references an invalid or
 * soft-deleted file/image, it will result in a detailed error. No actual file
 * upload occurs via this endpoint; only references and orderings are changed.
 *
 * All updates are audited for change tracing according to platform policies and
 * backend logic. Soft-deleted images may not be updated; changes are only
 * permitted on active associations.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post whose image entry is
 *   being updated.
 * @param props.imageId Unique identifier of the specific image association (not
 *   the file ID) to update.
 * @param props.body Information detailing the new ordering for the post image,
 *   or its new associated file if replacement is supported.
 * @path /communityPlatform/member/posts/:postId/images/:imageId
 * @accessor api.functional.communityPlatform.member.posts.images.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the target post whose image entry is being
     * updated.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the specific image association (not the file ID)
     * to update.
     */
    imageId: string & tags.Format<"uuid">;

    /**
     * Information detailing the new ordering for the post image, or its new
     * associated file if replacement is supported.
     */
    body: ICommunityPlatformPostImage.IUpdate;
  };
  export type Body = ICommunityPlatformPostImage.IUpdate;
  export type Response = ICommunityPlatformPostImage;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/posts/:postId/images/:imageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): ICommunityPlatformPostImage =>
    typia.random<ICommunityPlatformPostImage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("imageId")(() => typia.assert(props.imageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an image attachment from a post (community_platform_post_images
 * table).
 *
 * This API operation allows the deletion of a specific image from a post,
 * implemented on the community_platform_post_images table. Each post image
 * attachment is referenced by imageId and is tied to a parent post via postId.
 * The operation requires the user to be authenticated as the post owner,
 * moderator of the respective community, or an admin.
 *
 * The endpoint enforces permission checks so that unauthorized attempts are
 * rejected. Deletion is a hard delete (no soft delete field in the post images
 * schema), which means the attachment is permanently removed from the database
 * and the post's image gallery. However, the underlying image file in
 * community_platform_file_uploads remains unless business or file management
 * logic triggers cleanup. If the image does not belong to the specified post,
 * or the post or image does not exist, the API returns an appropriate not-found
 * error.
 *
 * This operation is typically used in post editing workflows or moderation,
 * permitting users to manage or clean up their image attachments. Admin and
 * moderator roles can use the same operation in the context of moderation or
 * content management. Error handling includes validation of ownership,
 * existence of IDs, and rejection of attempts by unauthorized or
 * unauthenticated users. Deletion actions should be logged for audit if
 * required by compliance policy.
 *
 * @param props.connection
 * @param props.postId Unique identifier (UUID) of the target post. Identifies
 *   the parent post to which the image is attached.
 * @param props.imageId Unique identifier (UUID) of the post image attachment to
 *   delete.
 * @path /communityPlatform/member/posts/:postId/images/:imageId
 * @accessor api.functional.communityPlatform.member.posts.images.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target post. Identifies the parent
     * post to which the image is attached.
     */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the post image attachment to delete. */
    imageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/posts/:postId/images/:imageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("imageId")(() => typia.assert(props.imageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
