import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformReport } from "../../../../structures/ICommunityPlatformReport";

/**
 * Submit a new content report against a post or comment
 * (community_platform_reports table).
 *
 * Submit a new content abuse, spam, or policy violation report targeting either
 * a specific post or a comment. The reporting member must specify at least the
 * post or comment being reported, select a report category, and provide a
 * reason text if required for that category. The endpoint ensures uniqueness
 * constraints (only one report per user per item) and enforces rate limits
 * (e.g., 10 reports per user per 24 hour period). The report is immediately set
 * to status 'pending' and triggers downstream notification or moderation
 * queuing as required by the platform.
 *
 * On creation, all input is validated for correct references and content
 * format, checking that the member, post, or comment exist and are related,
 * that the category is approved, and that the explanation (if present) conforms
 * to guidelines. The report workflow state, moderation_result, and handler
 * fields are initially unset or nullâ€”these are populated as the moderation
 * process evolves.
 *
 * This endpoint is used by ordinary platform members and does not require
 * moderator/admin permissions. It is open to authenticated users but cannot be
 * abused by guests. If submission fails due to business/regulatory constraints,
 * the endpoint returns appropriate error codes/messages.
 *
 * @param props.connection
 * @param props.body Report submission details including reporter, target post
 *   or comment, category, and optional reason.
 * @path /communityPlatform/member/reports
 * @accessor api.functional.communityPlatform.member.reports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Report submission details including reporter, target post or comment,
     * category, and optional reason.
     */
    body: ICommunityPlatformReport.ICreate;
  };
  export type Body = ICommunityPlatformReport.ICreate;
  export type Response = ICommunityPlatformReport;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/reports";
  export const random = (): ICommunityPlatformReport =>
    typia.random<ICommunityPlatformReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
