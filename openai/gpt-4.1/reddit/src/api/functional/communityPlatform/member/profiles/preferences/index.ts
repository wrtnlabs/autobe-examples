import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformProfilePreferences } from "../../../../../structures/ICommunityPlatformProfilePreferences";
import { ICommunityPlatformProfilePreference } from "../../../../../structures/ICommunityPlatformProfilePreference";

/**
 * Retrieve the profile preferences for a given user from
 * community_platform_profile_preferences.
 *
 * This GET operation returns all current preference settings for an individual
 * user profile from the community_platform_profile_preferences table.
 * Preference items include language choice, theme (e.g., light/dark mode),
 * whether email and badges are displayed, notification customization, and
 * opt-in/opt-out controls for message receipt from non-followers. This assists
 * in rendering user settings in both web and mobile interfaces, and informs
 * backend processes that respect user privacy and notification choices.
 *
 * Profile preferences are only visible to the profile owner and to platform
 * administrators for support and compliance purposes. Unauthorized or public
 * access to profile preferences is strictly forbidden and results in a 403
 * error. When successful, the API returns all persisted settings according to
 * the schema, and ensures members can verify or modify their configuration as
 * needed. This endpoint is closely connected to profile update and settings
 * modification operations, enabling consistent user experience and strong
 * privacy guarantees.
 *
 * @param props.connection
 * @param props.profileId The unique identifier of the target profile
 * @path /communityPlatform/member/profiles/:profileId/preferences
 * @accessor api.functional.communityPlatform.member.profiles.preferences.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the target profile */
    profileId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformProfilePreferences;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/profiles/:profileId/preferences",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/profiles/${encodeURIComponent(props.profileId ?? "null")}/preferences`;
  export const random = (): ICommunityPlatformProfilePreferences =>
    typia.random<ICommunityPlatformProfilePreferences>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a user profile's preferences in the
 * community_platform_profile_preferences table.
 *
 * Update the preference settings for a specific user profile. This operation
 * enables modifications on notification preferences, privacy visibility, email
 * sharing, badge display, language choice, theme, and messaging permissions for
 * the profile. It references the community_platform_profile_preferences schema
 * and ensures that only the authenticated profile owner or an administrator can
 * apply changes.
 *
 * Security is enforced so that users cannot change preferences of profiles they
 * do not own, unless they are admins. Changes are written with current
 * timestamps and an audit trail for compliance. Business rules ensure
 * validation of all inputs (such as allowed theme, language formats, and
 * opt-in/out booleans per platform policies).
 *
 * This operation supports seamless adjustment of user experience and privacy
 * for every member, addresses accessibility needs, and underpins the user's
 * right to configure profile display, notification options, and exposure to
 * platforms features. Any sensitive preference (e.g., email visibility or open
 * messaging) is validated and will be restricted according to parental consent
 * or platform age limits, if applicable.
 *
 * @param props.connection
 * @param props.profileId The unique identifier of the target user profile whose
 *   preferences are being updated.
 * @param props.body The updated profile preference fields for the user profile.
 * @path /communityPlatform/member/profiles/:profileId/preferences
 * @accessor api.functional.communityPlatform.member.profiles.preferences.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the target user profile whose preferences
     * are being updated.
     */
    profileId: string & tags.Format<"uuid">;

    /** The updated profile preference fields for the user profile. */
    body: ICommunityPlatformProfilePreference.IUpdate;
  };
  export type Body = ICommunityPlatformProfilePreference.IUpdate;
  export type Response = ICommunityPlatformProfilePreference;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/profiles/:profileId/preferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/profiles/${encodeURIComponent(props.profileId ?? "null")}/preferences`;
  export const random = (): ICommunityPlatformProfilePreference =>
    typia.random<ICommunityPlatformProfilePreference>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
