import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformFileUpload } from "../../../../structures/ICommunityPlatformFileUpload";

/**
 * Upload a new file to the platform and record its metadata in
 * community_platform_file_uploads.
 *
 * Members use this endpoint to upload one or multiple files that will later be
 * attached to posts, communities, or user profiles. When a POST request is made
 * to this endpoint, the system verifies the requester is an authenticated
 * member with the status of 'active'. The file's metadata such as filename,
 * mime type, file size, and URL are recorded, while physical file storage may
 * be handled by an external file store (the system references only the storage
 * key and URL).
 *
 * Rate limits and file-type validation are strictly enforced to prevent abuse.
 * The operation rejects files larger than platform limits or unsupported types,
 * returning a descriptive error. Uploaded files are set to status 'active' and
 * can be referenced by their unique identifier in future content submissions.
 *
 * Security considerations dictate that only members with verified email and
 * appropriate status may upload. Moderators or admins can later manage or
 * delete these files for compliance. The operation is related to content
 * posting but is a prerequisite step for image posts or profile/community
 * branding updates.
 *
 * Other API operations that rely on uploaded files include endpoints for
 * creating posts with images, updating community or profile imagery, and
 * moderation of offensive content.
 *
 * @param props.connection
 * @param props.body File upload metadata including member identifier, original
 *   filename, MIME type, file size, and intended purpose. Actual file content
 *   should be uploaded to external storage, with storage key and URL recorded
 *   here.
 * @path /communityPlatform/member/fileUploads
 * @accessor api.functional.communityPlatform.member.fileUploads.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * File upload metadata including member identifier, original filename,
     * MIME type, file size, and intended purpose. Actual file content
     * should be uploaded to external storage, with storage key and URL
     * recorded here.
     */
    body: ICommunityPlatformFileUpload.ICreate;
  };
  export type Body = ICommunityPlatformFileUpload.ICreate;
  export type Response = ICommunityPlatformFileUpload;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/fileUploads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/fileUploads";
  export const random = (): ICommunityPlatformFileUpload =>
    typia.random<ICommunityPlatformFileUpload>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update metadata or logical status of an existing file upload in
 * community_platform_file_uploads.
 *
 * Authenticated members, moderators, or admins use this endpoint to update
 * non-binary metadata for a previously uploaded file. Allowed updates may
 * include renaming the file, updating the status ('active', 'deleted',
 * 'archived'), or changing the associated public URL when the file is moved in
 * storage. The file upload record is uniquely identified by fileUploadId
 * (UUID).
 *
 * This operation enforces strict permission checks: a member may only update
 * their own uploads; moderators and admins may update any file within their
 * scope. Attempting to update the status to 'deleted' marks the file as
 * soft-deleted and prevents further display/association but does not physically
 * remove stored content (to preserve integrity and audit). Updated file uploads
 * retain all prior relationships to posts, comments, communities, or profiles
 * unless deleted.
 *
 * Security requirements and audit protocols are enforced at every update,
 * ensuring the action is logged with member or role details. Related APIs
 * include endpoints for deleting file associations from posts or communities
 * and for retrieving file metadata by id.
 *
 * @param props.connection
 * @param props.fileUploadId Unique identifier of the file upload to update.
 * @param props.body Fields to update within the file upload metadata such as
 *   filename, status, or URL. Only non-binary changes allowed; actual
 *   storage/move/removal is out-of-band.
 * @path /communityPlatform/member/fileUploads/:fileUploadId
 * @accessor api.functional.communityPlatform.member.fileUploads.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the file upload to update. */
    fileUploadId: string & tags.Format<"uuid">;

    /**
     * Fields to update within the file upload metadata such as filename,
     * status, or URL. Only non-binary changes allowed; actual
     * storage/move/removal is out-of-band.
     */
    body: ICommunityPlatformFileUpload.IUpdate;
  };
  export type Body = ICommunityPlatformFileUpload.IUpdate;
  export type Response = ICommunityPlatformFileUpload;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/fileUploads/:fileUploadId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/fileUploads/${encodeURIComponent(props.fileUploadId ?? "null")}`;
  export const random = (): ICommunityPlatformFileUpload =>
    typia.random<ICommunityPlatformFileUpload>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("fileUploadId")(() => typia.assert(props.fileUploadId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
