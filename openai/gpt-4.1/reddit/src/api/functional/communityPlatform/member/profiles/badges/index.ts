import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformProfileBadge } from "../../../../../structures/ICommunityPlatformProfileBadge";

/**
 * Update a specific badge for a user profile as defined in the
 * community_platform_profile_badges table.
 *
 * Update a badge entry for a user profile within the community platform. This
 * operation targets the community_platform_profile_badges table, which stores
 * all public and earned badges displayed on a user's profile. The badge is
 * uniquely identified within the scope of a specific profile.
 *
 * Authorization is enforced by allowing profile owners, assigned community
 * moderators (for badges granted via moderation/karma awards), and system
 * administrators to update badge details. Business logic ensures that updates
 * are limited to badge properties such as badge_name, badge_type, or revocation
 * info, and cannot reassign the badge to another profile or arbitrarily alter
 * relationships to karma awards except as permitted by platform policy.
 *
 * The request body must supply a valid ICommunityPlatformProfileBadge.IUpdate
 * DTO, which is checked against all badge update validation rules: only fields
 * permitted for update are processed, with constraints on strings and
 * timestamps as per the schema. Errors, such as attempting to edit non-owned or
 * non-existent badges, return informative responses as indicated in the error
 * handling section of requirements.
 *
 * Other related flows are profile badge creation/deletion, badge award events,
 * and retrieval/display of earned badges in profile and community contexts.
 *
 * @param props.connection
 * @param props.profileId Unique identifier of the target user profile whose
 *   badge is being updated.
 * @param props.badgeId Unique identifier of the badge assigned to the profile
 *   to be updated.
 * @param props.body Update details for the specified badge on the user profile.
 * @path /communityPlatform/member/profiles/:profileId/badges/:badgeId
 * @accessor api.functional.communityPlatform.member.profiles.badges.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the target user profile whose badge is being
     * updated.
     */
    profileId: string & tags.Format<"uuid">;

    /** Unique identifier of the badge assigned to the profile to be updated. */
    badgeId: string & tags.Format<"uuid">;

    /** Update details for the specified badge on the user profile. */
    body: ICommunityPlatformProfileBadge.IUpdate;
  };
  export type Body = ICommunityPlatformProfileBadge.IUpdate;
  export type Response = ICommunityPlatformProfileBadge;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/profiles/:profileId/badges/:badgeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/profiles/${encodeURIComponent(props.profileId ?? "null")}/badges/${encodeURIComponent(props.badgeId ?? "null")}`;
  export const random = (): ICommunityPlatformProfileBadge =>
    typia.random<ICommunityPlatformProfileBadge>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
      assert.param("badgeId")(() => typia.assert(props.badgeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (revoke/remove) a badge from a user profile in the
 * community_platform_profile_badges table.
 *
 * Remove or revoke a badge from a user's profile by its unique identifier. This
 * operation acts on the community_platform_profile_badges table, which contains
 * all badge assignments granted to user profiles, including those tied to karma
 * awards or granted by moderators. The badgeId must be a valid badge currently
 * assigned to the specified profile.
 *
 * Authorization is enforced to allow only badge owners (profile members),
 * assigned moderators with appropriate permissions, or platform administrators
 * to perform badge deletion. Business rules ensure the correct badge/profile
 * relationship, soft delete or revocation timestamping, and full audit trail is
 * maintained for each badge deletion, in line with platform compliance
 * requirements.
 *
 * Errors are returned if the profile or badge ID does not exist, if there is a
 * mismatch between the profile and badge association, or if insufficient
 * permissions are detected. This operation may trigger notifications or
 * additional compliance actions as dictated by business logic.
 *
 * Typical use cases include user-initiated badge revocation, moderator-forced
 * removal for rule violations, and admin-driven compliance cleanups.
 *
 * @param props.connection
 * @param props.profileId Unique identifier of the user profile whose badge is
 *   to be deleted.
 * @param props.badgeId Unique identifier of the badge being deleted from the
 *   profile.
 * @path /communityPlatform/member/profiles/:profileId/badges/:badgeId
 * @accessor api.functional.communityPlatform.member.profiles.badges.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user profile whose badge is to be deleted. */
    profileId: string & tags.Format<"uuid">;

    /** Unique identifier of the badge being deleted from the profile. */
    badgeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/profiles/:profileId/badges/:badgeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/profiles/${encodeURIComponent(props.profileId ?? "null")}/badges/${encodeURIComponent(props.badgeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
      assert.param("badgeId")(() => typia.assert(props.badgeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
