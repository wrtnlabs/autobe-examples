import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../../structures/IPageICommunityPlatformCommunity";
export * as rules from "./rules/index";

/**
 * Create a new community, enforcing unique naming and member creation policy,
 * via community_platform_communities.
 *
 * Allow an authenticated member to create a new community, supplying a unique
 * name, title, description, slug, and other initial configuration fields. The
 * operation will validate business rules such as name case insensitivity and
 * length, description validity, member creation quotas, and association with
 * the initiating member as the creator.
 *
 * Upon successful creation, the member becomes the initial moderator and owner
 * of the community, and all relevant fields such as creation timestamps,
 * status, and moderation links are recorded as described in the
 * community_platform_communities Prisma schema.
 *
 * Validation includes: enforcing unique name and slug, length and format
 * checks, restrictions against banned/prohibited names, and ensuring the member
 * does not exceed their creation quota (as defined by the associated business
 * rules document). If any validation fails, a clear error is returned with
 * actionable information.
 *
 * Following successful creation, clients may call further API operations to
 * manage images, banners, community rules, or assign additional moderators.
 * Related operations include updating community settings, viewing community
 * details, and deleting or archiving communities (subject to permissions and
 * soft-delete policy).
 *
 * @param props.connection
 * @param props.body Community creation information, including unique name,
 *   title, description, slug, and the creator member's identifier.
 * @path /communityPlatform/member/communities
 * @accessor api.functional.communityPlatform.member.communities.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Community creation information, including unique name, title,
     * description, slug, and the creator member's identifier.
     */
    body: ICommunityPlatformCommunity.ICreate;
  };
  export type Body = ICommunityPlatformCommunity.ICreate;
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/communities";
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate the list of communities
 * (community_platform_communities table).
 *
 * Retrieve a paginated and searchable list of communities, allowing the user to
 * filter by status, search by name or title, and sort using different
 * algorithms (hot, new, top, controversial). This endpoint supports members in
 * finding new communities to join as well as moderators/admins in reviewing
 * community listings.
 *
 * Security-wise, access to public communities is typically open to all
 * authenticated users, but the underlying search and metadata returned can be
 * filtered based on authorization context and privacy constraints. Advanced
 * user roles may receive additional metadata such as moderation status or
 * hidden communities depending on platform rules.
 *
 * This endpoint operates on the community_platform_communities table,
 * leveraging fields like name, title, description, slug, status, and
 * created_at. The request body allows for specification of filtering, sorting,
 * and pagination preferences. Business logic, such as maximum communities per
 * page and allowed search filters, is enforced based on platform configuration.
 * List results are optimized for display and bandwidth efficiency.
 *
 * Behavior in case of errors includes returning an empty array for no match,
 * descriptive error messages for invalid filters, and enforcing appropriate
 * rate limits to protect backend resources.
 *
 * @param props.connection
 * @param props.body Structured search, sorting, and pagination parameters for
 *   querying the community list.
 * @path /communityPlatform/member/communities
 * @accessor api.functional.communityPlatform.member.communities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Structured search, sorting, and pagination parameters for querying
     * the community list.
     */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/member/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/communities";
  export const random = (): IPageICommunityPlatformCommunity.ISummary =>
    typia.random<IPageICommunityPlatformCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
