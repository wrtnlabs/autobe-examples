import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformKarmaLedger } from "../../../../structures/ICommunityPlatformKarmaLedger";

/**
 * Retrieve a karma ledger record by id (community_platform_karma_ledgers).
 *
 * This API returns a detailed record for a member's karma (and optionally
 * community-specific karma) from the community_platform_karma_ledgers table
 * using its unique identifier. This enables user profile pages, feature checks,
 * and moderation panels to reflect current karma and feature lock status.
 * Accessible to any authenticated "member"; errors returned if id is not found,
 * deleted, or restricted.
 *
 * @param props.connection
 * @param props.karmaLedgerId The UUID of the karma ledger to retrieve
 * @path /communityPlatform/member/karmaLedgers/:karmaLedgerId
 * @accessor api.functional.communityPlatform.member.karmaLedgers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The UUID of the karma ledger to retrieve */
    karmaLedgerId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformKarmaLedger;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/karmaLedgers/:karmaLedgerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/karmaLedgers/${encodeURIComponent(props.karmaLedgerId ?? "null")}`;
  export const random = (): ICommunityPlatformKarmaLedger =>
    typia.random<ICommunityPlatformKarmaLedger>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("karmaLedgerId")(() => typia.assert(props.karmaLedgerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
