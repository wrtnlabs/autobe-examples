import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMember } from "../../../../structures/ICommunityPlatformMember";

/**
 * Update permitted account/profile fields for a specified member in the
 * community_platform_members table.
 *
 * Updates account-related information for an existing registered member.
 * Accepts a request body detailing changes allowed by business policy: this can
 * include email address, status, and potentially other permitted metadata for a
 * member user.
 *
 * This operation is strictly scoped to fields that are considered safe for
 * update by the authenticated user or administrators based on business rules in
 * the community_platform_members table. It never allows modification to
 * security-critical fields such as password_hash via this endpoint. Status
 * changes (e.g., blocking, reactivation) require appropriate permissions, only
 * available to admin or system flows.
 *
 * Input validation ensures emails remain unique and conform to required
 * formats, and account status transitions are respected. The operation returns
 * the full, updated account/profile entity as confirmation. Error handling
 * covers invalid transitions, unique constraint violations, unauthorized update
 * attempts, and not-found errors.
 *
 * @param props.connection
 * @param props.memberId Unique identifier (UUID) of the member whose
 *   profile/account is being updated.
 * @param props.body Fields allowed for update on the community_platform_members
 *   entity (e.g., email, status), per current platform policy.
 * @path /communityPlatform/member/members/:memberId
 * @accessor api.functional.communityPlatform.member.members.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier (UUID) of the member whose profile/account is being
     * updated.
     */
    memberId: string & tags.Format<"uuid">;

    /**
     * Fields allowed for update on the community_platform_members entity
     * (e.g., email, status), per current platform policy.
     */
    body: ICommunityPlatformMember.IUpdate;
  };
  export type Body = ICommunityPlatformMember.IUpdate;
  export type Response = ICommunityPlatformMember;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/members/:memberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ICommunityPlatformMember =>
    typia.random<ICommunityPlatformMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
