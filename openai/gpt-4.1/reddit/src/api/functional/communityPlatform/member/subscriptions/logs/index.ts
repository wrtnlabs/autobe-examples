import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSubscriptionLog } from "../../../../../structures/ICommunityPlatformSubscriptionLog";
import { IPageICommunityPlatformSubscriptionLog } from "../../../../../structures/IPageICommunityPlatformSubscriptionLog";

/**
 * Search and retrieve paginated subscription log events for a specific
 * subscription (community_platform_subscription_logs).
 *
 * Retrieve a paginated, filtered list of all subscription log events associated
 * with a particular subscription. This operation targets the
 * community_platform_subscription_logs table, leveraging the subscriptionId
 * (which is the parent community_platform_subscriptions primary key) to find
 * all event records (subscribe, unsubscribe, etc.) linked to that
 * subscription.
 *
 * The result enables detailed monitoring of a member's
 * subscription/unsubscription behavior within a specific community, supporting
 * sorting and search across timestamps, event_type, and metadata fields. Useful
 * for audit trails, investigating quota enforcement, or providing a user's
 * historical record of subscription interactions.
 *
 * Permission checks are performed so only the subscription owner, platform
 * admins, or moderators with necessary privileges can access this data. Output
 * is paginated for performance and security. Clients should use appropriate
 * query and pagination parameters as defined in the request DTO, supporting
 * flexible querying and review for moderation or support scenarios.
 *
 * Related operations include retrieving the details of individual log events or
 * fetching the list of subscriptions. This operation is critical for auditing
 * and user account transparency.
 *
 * @param props.connection
 * @param props.subscriptionId Unique identifier (UUID) of the
 *   community_platform_subscriptions record for which to retrieve log events.
 * @param props.body Request body containing search, filter, and pagination
 *   criteria for subscription log event retrieval.
 * @path /communityPlatform/member/subscriptions/:subscriptionId/logs
 * @accessor api.functional.communityPlatform.member.subscriptions.logs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the community_platform_subscriptions
     * record for which to retrieve log events.
     */
    subscriptionId: string & tags.Format<"uuid">;

    /**
     * Request body containing search, filter, and pagination criteria for
     * subscription log event retrieval.
     */
    body: ICommunityPlatformSubscriptionLog.IRequest;
  };
  export type Body = ICommunityPlatformSubscriptionLog.IRequest;
  export type Response = IPageICommunityPlatformSubscriptionLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/member/subscriptions/:subscriptionId/logs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}/logs`;
  export const random = (): IPageICommunityPlatformSubscriptionLog.ISummary =>
    typia.random<IPageICommunityPlatformSubscriptionLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific subscription log event by logId for a given
 * subscription (community_platform_subscription_logs).
 *
 * Get the full details of a particular subscription log event tied to a parent
 * subscription. This fetches all columns from the
 * community_platform_subscription_logs table for a specific logId, enforcing
 * linkage to the given subscriptionId for context and permission validation.
 *
 * This enables use cases such as reviewing the exact timestamp, event type
 * (subscribe/unsubscribe), and metadata related to an individual subscription
 * action. Security and access checks ensure that only authorized roles—the
 * subscription owner, relevant moderators, or platform admins—can access the
 * log details.
 *
 * If no event log matching both subscriptionId and logId is found, or if the
 * user is unauthorized, an appropriate error is returned. Useful for support
 * staff, admins, or users verifying their history. This operation is highly
 * granular and links closely to broader subscription management and log list
 * operations for consistency and traceability.
 *
 * @param props.connection
 * @param props.subscriptionId Unique identifier (UUID) of the parent
 *   community_platform_subscriptions record containing this log event.
 * @param props.logId Unique identifier (UUID) of the specific
 *   community_platform_subscription_logs event record to retrieve.
 * @path /communityPlatform/member/subscriptions/:subscriptionId/logs/:logId
 * @accessor api.functional.communityPlatform.member.subscriptions.logs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier (UUID) of the parent
     * community_platform_subscriptions record containing this log event.
     */
    subscriptionId: string & tags.Format<"uuid">;

    /**
     * Unique identifier (UUID) of the specific
     * community_platform_subscription_logs event record to retrieve.
     */
    logId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSubscriptionLog;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/subscriptions/:subscriptionId/logs/:logId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}/logs/${encodeURIComponent(props.logId ?? "null")}`;
  export const random = (): ICommunityPlatformSubscriptionLog =>
    typia.random<ICommunityPlatformSubscriptionLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.param("logId")(() => typia.assert(props.logId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
