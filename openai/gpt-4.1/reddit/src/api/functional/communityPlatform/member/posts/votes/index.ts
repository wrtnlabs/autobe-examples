import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostVote } from "../../../../../structures/ICommunityPlatformPostVote";

/**
 * Cast an upvote or downvote on a post (community_platform_post_votes).
 *
 * This operation lets a logged-in member upvote or downvote a particular post
 * identified by postId. The system enforces that the user can vote only once
 * per post, automatically updating their previous vote if it exists and
 * recalculating the post score and the user's karma accordingly.
 *
 * Security measures include rate limiting to prevent abuse, ensuring only
 * authenticated members can vote, and rejecting votes from the content's author
 * in accordance with platform rules. Additionally, the action is written to
 * audit and voting logs for compliance and anti-abuse review. Error handling
 * covers attempts by unauthorized users, duplicate or invalid votes, and
 * self-voting scenarios, providing clear error messages in such cases.
 *
 * The operation is tightly linked to the community_platform_post_votes table,
 * storing postId, memberId, vote_value, and timestamps as described in schema
 * comments. Companion operations include updating or revoking a vote and
 * retrieving post vote summaries.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post to which the vote will
 *   be applied.
 * @param props.body Payload specifying the vote value and additional metadata
 *   for the vote action.
 * @path /communityPlatform/member/posts/:postId/votes
 * @accessor api.functional.communityPlatform.member.posts.votes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The unique identifier of the post to which the vote will be applied. */
    postId: string & tags.Format<"uuid">;

    /**
     * Payload specifying the vote value and additional metadata for the
     * vote action.
     */
    body: ICommunityPlatformPostVote.ICreate;
  };
  export type Body = ICommunityPlatformPostVote.ICreate;
  export type Response = ICommunityPlatformPostVote;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/posts/:postId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): ICommunityPlatformPostVote =>
    typia.random<ICommunityPlatformPostVote>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update or revoke a post vote (community_platform_post_votes).
 *
 * The purpose of this operation is to let a logged-in member update or revoke
 * their existing vote on a given post. Path parameters postId and voteId are
 * required to identify the specific vote. Only the member who cast the original
 * vote is allowed to perform this update, and attempts by others are denied.
 *
 * Authorization ensures only members can update their votes, and role-based
 * access is enforced strictly. The business rules prevent updating a vote on
 * one's own content or making duplicate changes. On a successful request, the
 * operation updates the voting record in the community_platform_post_votes
 * table, adjust the post's score and user's karma, and records the action for
 * compliance and auditing as described in the schema comments. Errors due to
 * lack of permission, illegal updates, or voting on non-existent or deleted
 * posts will be handled with clear, actionable messages.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post associated with the
 *   vote.
 * @param props.voteId The unique identifier of the vote to be updated or
 *   revoked.
 * @param props.body Payload specifying the new vote value or an indication to
 *   revoke the vote.
 * @path /communityPlatform/member/posts/:postId/votes/:voteId
 * @accessor api.functional.communityPlatform.member.posts.votes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the post associated with the vote. */
    postId: string & tags.Format<"uuid">;

    /** The unique identifier of the vote to be updated or revoked. */
    voteId: string & tags.Format<"uuid">;

    /**
     * Payload specifying the new vote value or an indication to revoke the
     * vote.
     */
    body: ICommunityPlatformPostVote.IUpdate;
  };
  export type Body = ICommunityPlatformPostVote.IUpdate;
  export type Response = ICommunityPlatformPostVote;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/posts/:postId/votes/:voteId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): ICommunityPlatformPostVote =>
    typia.random<ICommunityPlatformPostVote>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("voteId")(() => typia.assert(props.voteId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a specific user's vote from a given post
 * (community_platform_post_votes).
 *
 * This API endpoint enables users to remove their explicit upvote or downvote
 * from a specific post. It is intended for situations where the user wishes to
 * retract their previous voting actionâ€”such as changing their mind or
 * correcting a mis-click.
 *
 * The operation checks that the voteId belongs to a valid vote entry for the
 * indicated postId and verifies the requesting user's authority. If the
 * requester is not the original voter, but holds a moderator or admin role with
 * the appropriate permissions within the target post's community (or at the
 * platform level), deletion is allowed for moderation or abuse response.
 *
 * Votes are soft-deleted if the schema supports it (see
 * community_platform_post_votes.deleted_at); otherwise, they are permanently
 * removed from the database. Following deletion, the system will trigger
 * recalculation of the associated post's score, update the karma for the voter,
 * and audit-log the activity for review.
 *
 * Errors are returned in the following situations: the vote is not found,
 * belongs to another user without escalation rights, or the vote is already
 * deleted. Rate-limiting is enforced to prevent abuse, particularly by
 * automated (bot) clients.
 *
 * Related business functions include the POST and PATCH vote endpoints for
 * casting or changing a vote, and analytics/sorting recalculation flows for
 * post rankings and user karma.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post on which the vote was cast
 * @param props.voteId Unique identifier of the vote entry to be deleted
 * @path /communityPlatform/member/posts/:postId/votes/:voteId
 * @accessor api.functional.communityPlatform.member.posts.votes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the post on which the vote was cast */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the vote entry to be deleted */
    voteId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/posts/:postId/votes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
