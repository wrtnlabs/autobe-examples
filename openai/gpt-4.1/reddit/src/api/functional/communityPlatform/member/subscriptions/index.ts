import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSubscription } from "../../../../structures/ICommunityPlatformSubscription";
import { IPageICommunityPlatformSubscription } from "../../../../structures/IPageICommunityPlatformSubscription";
export * as logs from "./logs/index";

/**
 * Subscribe the authenticated user to a community, creating a new subscription
 * record in community_platform_subscriptions.
 *
 * Allows an authenticated user to subscribe to a specified community by
 * creating a new subscription entry in the community_platform_subscriptions
 * table. The operation enforces all business rules for subscriptions, including
 * verifying user identity, confirming the community is valid and active,
 * ensuring the user is not banned from the community, and confirming the user
 * has not exceeded the maximum allowed number of subscriptions.
 *
 * Upon successful creation, the response includes the subscription ID, member
 * ID, community ID, and timestamps. Requests must include the community ID to
 * subscribe to. Only members with sufficient permissions can create new
 * subscriptions; attempts to subscribe to banned or nonexistent communities, or
 * when over quota, should result in appropriate error responses. Related
 * operations include listing a memberâ€™s subscriptions and unsubscribing from a
 * community.
 *
 * @param props.connection
 * @param props.body Data required to create a new community subscription,
 *   specifically the target community_id (and any additional attributes as
 *   dictated by business rules).
 * @path /communityPlatform/member/subscriptions
 * @accessor api.functional.communityPlatform.member.subscriptions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data required to create a new community subscription, specifically
     * the target community_id (and any additional attributes as dictated by
     * business rules).
     */
    body: ICommunityPlatformSubscription.ICreate;
  };
  export type Body = ICommunityPlatformSubscription.ICreate;
  export type Response = ICommunityPlatformSubscription;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/subscriptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/subscriptions";
  export const random = (): ICommunityPlatformSubscription =>
    typia.random<ICommunityPlatformSubscription>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search a member's current and historical community subscriptions
 * with advanced filtering and pagination (community_platform_subscriptions).
 *
 * This PATCH operation allows an authenticated user to search and retrieve
 * their list of community subscriptions with optional filters and ordering.
 * According to the Prisma schema, the community_platform_subscriptions table
 * tracks subscriptions via member_id and community_id, with fields for creation
 * and deletion timestamps (soft delete). The request body accepts filter
 * criteria such as active/inactive subscriptions, specific community IDs/names,
 * and pagination parameters (page size, cursor, etc.).
 *
 * The operation runs in the context of the authenticated user ('member' role)
 * and only exposes their own subscription data. It supports sorting by
 * community name, creation date, or other business-relevant keys. The response
 * is a paginated structure listing the user's subscriptions, each including
 * fields like subscription id, community info, created_at, and deleted_at (if
 * unsubscribed).
 *
 * Security considerations ensure no exposure of other users' subscriptions or
 * sensitive internal data. Additional business logic enforces maximum
 * subscription count (as per business rules) and integrates with community
 * status checks (e.g., handling banned or deleted communities). Error handling
 * covers invalid filters, out-of-bounds pagination, and unauthorized access.
 *
 * Related endpoints include community subscribe/unsubscribe POST/DELETE routes,
 * and user profile summary APIs displaying subscription lists.
 *
 * @param props.connection
 * @param props.body Filter, search, sort, and pagination request for community
 *   subscriptions.
 * @path /communityPlatform/member/subscriptions
 * @accessor api.functional.communityPlatform.member.subscriptions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter, search, sort, and pagination request for community
     * subscriptions.
     */
    body: ICommunityPlatformSubscription.IRequest;
  };
  export type Body = ICommunityPlatformSubscription.IRequest;
  export type Response = IPageICommunityPlatformSubscription;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/member/subscriptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/member/subscriptions";
  export const random = (): IPageICommunityPlatformSubscription =>
    typia.random<IPageICommunityPlatformSubscription>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a specific community subscription by subscription ID in
 * the community_platform_subscriptions table.
 *
 * Fetch the full details of a user's subscription to a particular community,
 * given the subscription's unique identifier. The operation references the
 * community_platform_subscriptions table, which links members to communities
 * and tracks subscription status, timestamps, and soft deletion for
 * unsubscribing.
 *
 * This API can be used by authenticated users to confirm their active
 * subscription, see when it was created, and check whether it is still active
 * or has been deleted (unsubscribed). It returns the member ID, community ID,
 * creation time, and deleted_at timestamp if relevant. Permission checks should
 * ensure only the member or authorized administrators can access this
 * subscription record.
 *
 * Error handling includes returning a not-found error if the subscription does
 * not exist or permission denied if an unauthorized user attempts access.
 * Related operations include listing all subscriptions for a member or
 * subscribing/unsubscribing to a community.
 *
 * @param props.connection
 * @param props.subscriptionId Unique identifier of the subscription record
 * @path /communityPlatform/member/subscriptions/:subscriptionId
 * @accessor api.functional.communityPlatform.member.subscriptions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the subscription record */
    subscriptionId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSubscription;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/subscriptions/:subscriptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): ICommunityPlatformSubscription =>
    typia.random<ICommunityPlatformSubscription>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific community subscription record
 * (community_platform_subscriptions).
 *
 * This endpoint allows an authenticated member or an administrator to update
 * their subscription details to a specific community, identified by the
 * subscriptionId path parameter. The operation refers to the
 * community_platform_subscriptions table and supports modifications such as
 * reactivating a subscription or updating subscription-related settings.
 *
 * Only the member who owns the subscription, or an admin, is allowed to update
 * these records. Attempts by unauthorized users are rejected with explicit
 * error messages. Business logic verifies that the target subscription exists,
 * that the member is not banned from the community, and that the requested
 * changes comply with platform policy (e.g., subscription limit).
 *
 * All updates are logged for audit purposes. The request body must include any
 * fields allowed for update, such as activation status or preferences,
 * following the schema for ICommunityPlatformSubscription.IUpdate. Response
 * returns the full updated subscription record as defined by
 * ICommunityPlatformSubscription.
 *
 * Related endpoints include subscribing (POST /subscriptions),
 * deleting/unsubscribing (DELETE /subscriptions/{subscriptionId}), and listing
 * current subscriptions for the member.
 *
 * @param props.connection
 * @param props.subscriptionId Unique identifier of the subscription to update
 * @param props.body Fields to update for the member's subscription record
 * @path /communityPlatform/member/subscriptions/:subscriptionId
 * @accessor api.functional.communityPlatform.member.subscriptions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the subscription to update */
    subscriptionId: string & tags.Format<"uuid">;

    /** Fields to update for the member's subscription record */
    body: ICommunityPlatformSubscription.IUpdate;
  };
  export type Body = ICommunityPlatformSubscription.IUpdate;
  export type Response = ICommunityPlatformSubscription;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/subscriptions/:subscriptionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): ICommunityPlatformSubscription =>
    typia.random<ICommunityPlatformSubscription>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Unsubscribe (soft delete) a member's community subscription
 * (community_platform_subscriptions).
 *
 * This endpoint allows an authenticated member to unsubscribe from a community
 * by performing a soft delete on an existing subscription record, specified by
 * subscriptionId. The operation interacts with the
 * community_platform_subscriptions table and updates the deleted_at field
 * rather than removing the record, preserving historical and audit data.
 *
 * Access is restricted to the subscription owner or platform admins;
 * unauthorized attempts are blocked with a clear error response. Business logic
 * ensures the subscription exists, is active, and that the member is not
 * prevented from unsubscribing (e.g., due to a business restriction).
 *
 * The request does not require a body and there is no response body on success.
 * All unsubscribe events are logged and may impact personalized feeds,
 * notifications, and analytics for both the user and the community. This
 * endpoint is related to subscription creation (POST /subscriptions), updating
 * (PUT /subscriptions/{subscriptionId}), and viewing current subscriptions.
 *
 * @param props.connection
 * @param props.subscriptionId Unique identifier of the subscription to delete
 *   (unsubscribe)
 * @path /communityPlatform/member/subscriptions/:subscriptionId
 * @accessor api.functional.communityPlatform.member.subscriptions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the subscription to delete (unsubscribe) */
    subscriptionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/subscriptions/:subscriptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
