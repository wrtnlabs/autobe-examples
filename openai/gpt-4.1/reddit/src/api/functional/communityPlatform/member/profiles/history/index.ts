import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformProfileHistory } from "../../../../../structures/ICommunityPlatformProfileHistory";
import { IPageICommunityPlatformProfileHistory } from "../../../../../structures/IPageICommunityPlatformProfileHistory";

/**
 * Retrieve paginated edit history of a specific user profile from
 * community_platform_profile_histories.
 *
 * This API operation retrieves a paginated list of all changes ever made to the
 * specified user profile. It references the
 * community_platform_profile_histories table, which records every edit or
 * updateâ€”such as username changes, bio modifications, avatar updates, privacy
 * toggles, and status messages. Each history item includes the changed fields,
 * value snapshots before and after the change, actor who performed the change
 * (user, system, or admin), change reason, and timestamp of edit.
 *
 * Access to profile history is restricted to the profile owner themselves or
 * platform administrators, ensuring privacy of historical profile states. This
 * enforces platform compliance with best practices around privacy and
 * transparency: members can trace all modifications made to their own profile,
 * while admins may audit histories for regulatory or abuse investigations.
 * Sensitive fields, such as email and status, are revealed only if the
 * requestor has appropriate authorization.
 *
 * The endpoint supports pagination to handle large history sets, as well as
 * advanced filtering (by date range, editing actor, or field changed) as part
 * of the request body. Expected errors include invalid profileId (404),
 * unauthorized access (403), and improper pagination/filtering (400). The
 * response returns a paginated, chronologically-ordered list of profile history
 * objects, each with full snapshot details as per the Prisma schema. Related
 * operations include retrieving the current profile state, updating profile
 * information, and reviewing audit trails for account management.
 *
 * @param props.connection
 * @param props.profileId The unique identifier of the profile whose history is
 *   being retrieved
 * @param props.body Criteria for searching and paginating the profile history,
 *   such as date range, editor, and fields changed
 * @path /communityPlatform/member/profiles/:profileId/history
 * @accessor api.functional.communityPlatform.member.profiles.history.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The unique identifier of the profile whose history is being retrieved */
    profileId: string & tags.Format<"uuid">;

    /**
     * Criteria for searching and paginating the profile history, such as
     * date range, editor, and fields changed
     */
    body: ICommunityPlatformProfileHistory.IRequest;
  };
  export type Body = ICommunityPlatformProfileHistory.IRequest;
  export type Response = IPageICommunityPlatformProfileHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/member/profiles/:profileId/history",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/profiles/${encodeURIComponent(props.profileId ?? "null")}/history`;
  export const random = (): IPageICommunityPlatformProfileHistory =>
    typia.random<IPageICommunityPlatformProfileHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
