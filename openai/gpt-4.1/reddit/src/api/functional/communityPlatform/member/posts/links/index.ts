import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostLink } from "../../../../../structures/ICommunityPlatformPostLink";

/**
 * Attach a new link to an existing post via community_platform_post_links.
 *
 * This operation enables authenticated users to attach a new external hyperlink
 * to an existing post. The endpoint accepts full link information, including
 * the target URL and optional preview metadata, in the request body structured
 * according to the ICommunityPlatformPostLink.ICreate DTO. The parent postId
 * must reference a valid post in the system, and only eligible users (typically
 * the post author or editors) are permitted to add links.
 *
 * The link details are validated per business and technical policiesâ€”URLs must
 * conform to allowed formats, and policies may block certain domains for safety
 * reasons. If the post does not exist or is not editable, the operation returns
 * a clear error. On successful creation, it inserts a new row into
 * community_platform_post_links, relating the link to the parent post and
 * enabling rendering of link preview cards within the post interface.
 *
 * This operation works in conjunction with post creation/edit workflows and is
 * reflected in post detail views as well as the list of attached links. All
 * validation rules concerning URLs, preview metadata, and post ownership are
 * enforced. Errors include forbidden, not-found, and validation-type issues.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post to which the new link will
 *   be attached
 * @param props.body New link information to be attached to the specified post
 * @path /communityPlatform/member/posts/:postId/links
 * @accessor api.functional.communityPlatform.member.posts.links.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the post to which the new link will be attached */
    postId: string & tags.Format<"uuid">;

    /** New link information to be attached to the specified post */
    body: ICommunityPlatformPostLink.ICreate;
  };
  export type Body = ICommunityPlatformPostLink.ICreate;
  export type Response = ICommunityPlatformPostLink;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/posts/:postId/links",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/links`;
  export const random = (): ICommunityPlatformPostLink =>
    typia.random<ICommunityPlatformPostLink>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing external link attached to a post in
 * community_platform_post_links.
 *
 * This API operation facilitates the update of an existing link attached to a
 * specific post. It operates on the community_platform_post_links schema which
 * saves external link metadata for posts in the community platform.
 *
 * When a user invokes this endpoint, the system authenticates the user as the
 * post creator or a moderator for the relevant community. The payload allows
 * changes to the URL, preview title, preview description, or preview image URI.
 * The updated data must pass URL validity checks and be verified against
 * blacklists, spam, or prohibited content policies defined at the community or
 * platform level.
 *
 * If a community or global moderation rule marks the link for review (due to
 * flagging or high edit frequency), the post will be queued for moderator
 * review. All updates are logged in the audit trail. The operation is related
 * to endpoints that create new links (POST) and fetch post details or comment
 * threads (GET). Errors are thrown for invalid input, lack of permission, or
 * prohibited changes.
 *
 * Security is enforced by requiring user authentication and ownership/moderator
 * checks. An audit of all edit operations ensures compliance, and any
 * suspicious activity may trigger additional review.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post to which the link is
 *   attached.
 * @param props.linkId Unique identifier of the link to be updated (targeting
 *   post_links row).
 * @param props.body New link data and preview metadata to update the post link.
 * @path /communityPlatform/member/posts/:postId/links/:linkId
 * @accessor api.functional.communityPlatform.member.posts.links.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the parent post to which the link is attached. */
    postId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the link to be updated (targeting post_links
     * row).
     */
    linkId: string & tags.Format<"uuid">;

    /** New link data and preview metadata to update the post link. */
    body: ICommunityPlatformPostLink.IUpdate;
  };
  export type Body = ICommunityPlatformPostLink.IUpdate;
  export type Response = ICommunityPlatformPostLink;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/posts/:postId/links/:linkId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/links/${encodeURIComponent(props.linkId ?? "null")}`;
  export const random = (): ICommunityPlatformPostLink =>
    typia.random<ICommunityPlatformPostLink>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("linkId")(() => typia.assert(props.linkId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a post link (community_platform_post_links) for a given
 * post and link ID.
 *
 * Use this API operation to delete an existing external link from a specific
 * post. The community_platform_post_links table will be affected, with the
 * targeted link record identified by the linkId for the given post. The owner
 * of the post or a moderator assigned to the parent community may perform this
 * deletion. The system ensures that only users with proper authorization may
 * invoke this endpoint, checking content owner or moderator privileges on the
 * specified post.
 *
 * Upon deletion, the link reference is removed, and the post's associated
 * metadata is updated as needed. No soft-deletion field exists in this table
 * for the link, so the operation results in hard deletion from the database.
 * Audit logging is performed for compliance. This operation is directly related
 * to link creation (POST) and link updating (PUT). If any business or
 * moderation rules are violated (e.g., attempt to delete a required or
 * protected link), a specific error is returned.
 *
 * Error scenarios include unauthorized caller, non-existent link or post, and
 * constraint violations (such as required links per post type). Edge case
 * handling ensures that the deletion cannot break referential integrity for the
 * parent post.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post.
 * @param props.linkId Unique identifier of the post link to delete.
 * @path /communityPlatform/member/posts/:postId/links/:linkId
 * @accessor api.functional.communityPlatform.member.posts.links.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the parent post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the post link to delete. */
    linkId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/posts/:postId/links/:linkId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/links/${encodeURIComponent(props.linkId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("linkId")(() => typia.assert(props.linkId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
