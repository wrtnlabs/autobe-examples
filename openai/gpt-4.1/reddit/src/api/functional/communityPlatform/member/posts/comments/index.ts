import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../../structures/ICommunityPlatformComment";

/**
 * Create a new comment on a specific post (community_platform_comments).
 *
 * This endpoint enables authenticated and verified members to submit a new
 * comment on a post. It references the community_platform_comments Prisma
 * model, capturing details such as the comment body, author (member), post
 * association, optional parent comment for replies, nesting level, and
 * moderation/publication status.
 *
 * Input validation occurs to enforce maximum comment length, non-empty bodies,
 * reply depth restrictions, and content rules (including banned words,
 * formatting, and moderation policies) as described in the Prisma schema and
 * business requirements. Additionally, posting frequency and member/community
 * ban state are checked. Attempting to comment beyond allowed nesting levels or
 * while under restriction yields an appropriate error.
 *
 * When invoked, the system will link the comment to its parent post (and
 * optionally to another comment for threading), ensure it is properly nested,
 * set moderation and status flags (e.g., published, mod_queued), and record
 * creation timestamps. The response will return the complete comment object as
 * recorded in the database, ready for rendering or client confirmation.
 *
 * Frontend clients should display any server-supplied error messages indicating
 * validation, permission, or moderation issues. Related endpoints provide
 * update, delete, and retrieval actions for comments and their threads.
 *
 * @param props.connection
 * @param props.postId Unique identifier (UUID) of the post to which the comment
 *   will be attached.
 * @param props.body Information required to create a new comment as a reply to
 *   a post or to an existing comment.
 * @path /communityPlatform/member/posts/:postId/comments
 * @accessor api.functional.communityPlatform.member.posts.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier (UUID) of the post to which the comment will be
     * attached.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Information required to create a new comment as a reply to a post or
     * to an existing comment.
     */
    body: ICommunityPlatformComment.ICreate;
  };
  export type Body = ICommunityPlatformComment.ICreate;
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/member/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing comment in a post (community_platform_comments).
 *
 * This endpoint allows a verified member (original author) or an authorized
 * moderator/admin to update a comment attached to a specific post. It acts on
 * the community_platform_comments Prisma model, supporting comment text edits,
 * moderation status changes, and historical edit tracking via related tables.
 *
 * Business logic enforces required validation: edited bodies must be within
 * allowed length, pass forbidden/banned word filters, and not exceed permitted
 * depth. If outside the author-editing time window, only moderators/admins may
 * edit the comment, and all edits are logged for audit purposes (see comment
 * edit history model). Unauthorized edit attempts are rejected with a clear
 * error.
 *
 * The request path requires both the unique postId and the target commentId.
 * The request body contains the updated text content. Response returns the
 * modified comment with all relevant status and metadata, such as timestamps,
 * author, and moderation state. Associated endpoints are available for deleting
 * or retrieving threaded comments in the same context.
 *
 * @param props.connection
 * @param props.postId Unique identifier (UUID) of the post containing the
 *   comment to update.
 * @param props.commentId Unique identifier (UUID) of the comment to be updated.
 * @param props.body Updated comment body and applicable fields for comment edit
 *   (as allowed by business rules and permission model).
 * @path /communityPlatform/member/posts/:postId/comments/:commentId
 * @accessor api.functional.communityPlatform.member.posts.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier (UUID) of the post containing the comment to
     * update.
     */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the comment to be updated. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Updated comment body and applicable fields for comment edit (as
     * allowed by business rules and permission model).
     */
    body: ICommunityPlatformComment.IUpdate;
  };
  export type Body = ICommunityPlatformComment.IUpdate;
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/member/posts/:postId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove (soft delete) a comment from a post, restricted to author,
 * moderators, or admins as per permissions (community_platform_comments).
 *
 * This DELETE operation enables end-users (authors), community moderators, or
 * admins to delete individual comments within a post. According to the Prisma
 * schema, each comment is identified by 'id' and may be nested (using
 * parent_id). Comments include a soft delete field, allowing the comment to be
 * marked as deleted rather than physically removed, supporting both user
 * privacy and retention/audit requirements.
 *
 * Authorization checks ensure that only the author, a community moderator (as
 * identified via moderator assignments), or a platform admin may perform the
 * deletion. The API must verify the acting user's role and permissions before
 * marking the comment as deleted. Soft deletion is performed by setting the
 * 'deleted_at' timestamp, hiding the comment from normal views, and optionally
 * displaying a placeholder if policy requires.
 *
 * If the deleted comment is a parent in a threaded discussion, application
 * logic must determine whether to recursively mark all child comments as
 * deleted or to orphan/reparent them at the nearest allowed level, according to
 * platform business logic. This action triggers audit logging, as required for
 * traceability and policy compliance. Deletion cascades to associated votes and
 * reports per business rules.
 *
 * Error conditions include attempts by unauthorized users, conflicts with
 * moderation policies (e.g., trying to delete an already-removed comment), and
 * deletion of non-existent comments. Related safeguards ensure proper
 * notification and fallback.
 *
 * Related operations include comment creation (POST), editing (PUT), and
 * moderation workflows for comment enforcement.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post containing the
 *   comment targeted for deletion.
 * @param props.commentId Unique identifier of the comment to be deleted within
 *   the post.
 * @path /communityPlatform/member/posts/:postId/comments/:commentId
 * @accessor api.functional.communityPlatform.member.posts.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the parent post containing the comment targeted
     * for deletion.
     */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to be deleted within the post. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/member/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
