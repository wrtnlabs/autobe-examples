import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityRule } from "../../../../../structures/ICommunityPlatformCommunityRule";
import { IPageICommunityPlatformCommunityRule } from "../../../../../structures/IPageICommunityPlatformCommunityRule";

/**
 * Retrieve a paginated and filtered list of rules for a specific community from
 * community_platform_community_rules.
 *
 * Fetch a filtered, sortable, and paginated list of rule documents belonging to
 * a particular community. This is essential for displaying all current and
 * historical community rules, allowing users and moderators to review the
 * governance documents and comply with community-specific policies.
 *
 * The operation supports advanced search queries, filtering by version,
 * filtering by publication date, and ordering by most recent first or by
 * version number. It incorporates complete pagination metadata so UIs can
 * efficiently display scrollable lists or tables of rules. Access to
 * unpublished, draft, or previous rule versions may be restricted to community
 * moderators or administrators, while current published rules are shown to all
 * community members and guests, depending on community privacy settings.
 *
 * This endpoint is related directly to the community_platform_community_rules
 * table, referencing the versioning and body fields. Error cases include
 * invalid community ID, lack of permissions, or if the community has no
 * published rules. The operation integrates with content moderation and
 * compliance workflows for maintaining community standards.
 *
 * @param props.connection
 * @param props.communityId The unique identifier of the target community whose
 *   rules are being requested.
 * @param props.body Filtering, pagination, and query parameters to search and
 *   list rules for this community. Includes version, published date, sorting,
 *   and pagination fields.
 * @path /communityPlatform/member/communities/:communityId/rules
 * @accessor api.functional.communityPlatform.member.communities.rules.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the target community whose rules are being
     * requested.
     */
    communityId: string & tags.Format<"uuid">;

    /**
     * Filtering, pagination, and query parameters to search and list rules
     * for this community. Includes version, published date, sorting, and
     * pagination fields.
     */
    body: ICommunityPlatformCommunityRule.IRequest;
  };
  export type Body = ICommunityPlatformCommunityRule.IRequest;
  export type Response = IPageICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/member/communities/:communityId/rules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/member/communities/${encodeURIComponent(props.communityId ?? "null")}/rules`;
  export const random = (): IPageICommunityPlatformCommunityRule =>
    typia.random<IPageICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single rule document by ID from the
 * community_platform_community_rules table for a community.
 *
 * Fetch a specific versioned rule for a community identified by its unique
 * ruleId and communityId. This enables accurate audit, detailed display, and
 * compliance with community policies for all users with access to that rule.
 *
 * The operation accesses the community_platform_community_rules schema,
 * retrieving the rule's body, version, published timestamp, and related
 * metadata. If the rule is unpublished, deleted, or restricted, additional role
 * checks will limit access only to moderators, administrators, or the creator.
 *
 * Error scenarios include invalid or non-existent ruleId, permissions errors
 * (e.g., guests may not see draft or mod-only rules), or attempts to fetch
 * rules from the wrong community context. The endpoint is often used alongside
 * paginated rule lists to support rule preview, editing, or audit scenarios.
 * Validation of input IDs and enforcing visibility depending on rule status are
 * critical aspects of the provider logic.
 *
 * @param props.connection
 * @param props.communityId The unique identifier of the community containing
 *   the rule.
 * @param props.ruleId The unique identifier of the rule to retrieve.
 * @path /communityPlatform/member/communities/:communityId/rules/:ruleId
 * @accessor api.functional.communityPlatform.member.communities.rules.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the community containing the rule. */
    communityId: string & tags.Format<"uuid">;

    /** The unique identifier of the rule to retrieve. */
    ruleId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/communities/:communityId/rules/:ruleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/communities/${encodeURIComponent(props.communityId ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
