import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformReportCategory } from "../../../structures/ICommunityPlatformReportCategory";
import { IPageICommunityPlatformReportCategory } from "../../../structures/IPageICommunityPlatformReportCategory";

/**
 * List and search report categories (community_platform_report_categories
 * table).
 *
 * Fetch a filterable, paginated list of all report categories available for
 * reporting inappropriate content. This operation uses the
 * community_platform_report_categories table and includes every category's
 * display name, permission to allow free-text explanations, and time of
 * creation and update.
 *
 * Clients can supply search criteria, pagination parameters, or sorting
 * preferences to tailor the list for display in content flagging interfaces.
 * Proper use of this endpoint ensures platform-wide compliance with reporting
 * reason policies and streamlines updates when categories are added or
 * changed.
 *
 * Authorization is not required; all authenticated users and guests may
 * retrieve the category list. This is necessary for clients to build forms and
 * validation logic matching current policy. Error handling ensures graceful
 * recovery if category data is inaccessible or if search criteria are invalid.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination criteria for finding
 *   categories (optional).
 * @path /communityPlatform/reportCategories
 * @accessor api.functional.communityPlatform.reportCategories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination criteria for finding categories
     * (optional).
     */
    body: ICommunityPlatformReportCategory.IRequest;
  };
  export type Body = ICommunityPlatformReportCategory.IRequest;
  export type Response = IPageICommunityPlatformReportCategory;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/reportCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/reportCategories";
  export const random = (): IPageICommunityPlatformReportCategory =>
    typia.random<IPageICommunityPlatformReportCategory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific report category by ID
 * (community_platform_report_categories table).
 *
 * Fetch the complete definition for a report category referenced by its unique
 * identifier. The community_platform_report_categories table defines each
 * category's name, whether free text is permitted, and associated timestamps
 * for creation and update.
 *
 * This operation is essential for validating or displaying category information
 * on user-facing report forms or in moderation/admin review tools. It may be
 * used for rule configuration, UI explanations, or for checking if a reporting
 * workflow allows user input beyond the standard predefined reasons.
 *
 * The endpoint requires a valid reportCategoryId, which must be a
 * string-encoded UUID. Public access is permitted, as category definitions are
 * not confidential.
 *
 * @param props.connection
 * @param props.reportCategoryId Target report category's unique identifier
 *   (UUID).
 * @path /communityPlatform/reportCategories/:reportCategoryId
 * @accessor api.functional.communityPlatform.reportCategories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target report category's unique identifier (UUID). */
    reportCategoryId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformReportCategory;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/reportCategories/:reportCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/reportCategories/${encodeURIComponent(props.reportCategoryId ?? "null")}`;
  export const random = (): ICommunityPlatformReportCategory =>
    typia.random<ICommunityPlatformReportCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportCategoryId")(() =>
        typia.assert(props.reportCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
