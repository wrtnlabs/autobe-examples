import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformProfile } from "../../../structures/ICommunityPlatformProfile";
export * as badges from "./badges/index";

/**
 * Retrieve detailed user profile data by profileId from
 * community_platform_profiles.
 *
 * Fetches all profile metadata for the specified profileId from the
 * community_platform_profiles table. This includes the public username
 * (unique), biography (if set), avatar URI, display email (only if the user has
 * opted-in), status message, and privacy flag determining if the profile is
 * public or restricted. The response also includes profile creation and update
 * timestamps, along with soft-deletion information if relevant for compliance.
 *
 * If the requesting user is not permitted (e.g., if profile is private and
 * requester has no access), the operation should return an appropriate
 * authorization error or only anonymized/limited profile data, as dictated by
 * privacy settings. The operation must comply with the privacy and status
 * fields, returning hidden items only to profile owners or admins as
 * appropriate.
 *
 * Profiles are linked one-to-one with members; related resources (badges,
 * profile history, preferences) may be included or referenced on additional API
 * calls to keep response payloads compact. Typical use: rendering profile pages
 * for public browsing or member dashboard; should also support administrative
 * or moderation profile review with extra information as allowed by role.
 *
 * @param props.connection
 * @param props.profileId Unique identifier of the target profile to retrieve.
 * @path /communityPlatform/profiles/:profileId
 * @accessor api.functional.communityPlatform.profiles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target profile to retrieve. */
    profileId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformProfile;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/profiles/:profileId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/profiles/${encodeURIComponent(props.profileId ?? "null")}`;
  export const random = (): ICommunityPlatformProfile =>
    typia.random<ICommunityPlatformProfile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
