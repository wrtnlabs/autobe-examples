import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformProfileBadge } from "../../../../structures/ICommunityPlatformProfileBadge";
import { IPageICommunityPlatformProfileBadge } from "../../../../structures/IPageICommunityPlatformProfileBadge";

/**
 * Search and retrieve paginated badge summaries for a user profile in
 * community_platform_profile_badges.
 *
 * This operation returns a filtered and paginated list of badges that belong to
 * a user profile, corresponding to the profileId provided in the path. It acts
 * upon the community_platform_profile_badges table, exposing badge types,
 * names, and status for display on the user’s profile.
 *
 * The endpoint supports advanced search features, including filtering by badge
 * type, issuance status, or time period, and allows for pagination and sorting
 * based on creation or issuance timestamps. Only public data is returned
 * according to the requesting user's permission. Access is controlled, and
 * retrieving another user's badge list may be subject to profile privacy and
 * settings.
 *
 * This operation integrates with platform profile and badge award flows,
 * linking to the relevant user’s achievements and reward history. It avoids
 * exposing sensitive badge reasons or private award notes unless the viewer is
 * the profile owner or an admin. Error handling includes blocked access for
 * profiles that are private or when the viewer lacks permissions.
 *
 * @param props.connection
 * @param props.profileId The unique identifier of the user profile whose badges
 *   are being fetched.
 * @param props.body Filter and pagination criteria for badge retrieval on user
 *   profiles.
 * @path /communityPlatform/profiles/:profileId/badges
 * @accessor api.functional.communityPlatform.profiles.badges.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the user profile whose badges are being
     * fetched.
     */
    profileId: string & tags.Format<"uuid">;

    /** Filter and pagination criteria for badge retrieval on user profiles. */
    body: ICommunityPlatformProfileBadge.IRequest;
  };
  export type Body = ICommunityPlatformProfileBadge.IRequest;
  export type Response = IPageICommunityPlatformProfileBadge.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/profiles/:profileId/badges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/profiles/${encodeURIComponent(props.profileId ?? "null")}/badges`;
  export const random = (): IPageICommunityPlatformProfileBadge.ISummary =>
    typia.random<IPageICommunityPlatformProfileBadge.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific badge assigned to a user profile
 * (community_platform_profile_badges).
 *
 * This endpoint provides a detailed view of a specific badge associated with a
 * user profile. The badge is linked through the
 * community_platform_profile_badges table, which stores references to user
 * achievements or rewards. When the client calls this API with a valid
 * profileId and badgeId, the service looks up the badge, validates ownership
 * against the target profile, and returns all metadata fields including
 * badge_type, badge_name, issued_at, revocation information (if present), and
 * any linked karma award reference.
 *
 * Access to badge details is typically unrestricted for public profiles, but
 * may require additional privacy or role checks if the user profile is marked
 * as private (is_public = false) in the community_platform_profiles table.
 * Proper error handling must be implemented if the badge is not found, is not
 * assigned to the specified profile, or access is restricted by privacy policy.
 * This endpoint is intended for profile and reputation displays, and may also
 * be used by moderation/admin views for badge management functions.
 *
 * Ownership and relationship between profile and badge are enforced by unique
 * constraints in the schema. Proper schema-level and business rule validation
 * are mandatory for accurate, compliant data retrieval.
 *
 * @param props.connection
 * @param props.profileId Unique identifier of the target user profile.
 * @param props.badgeId Unique identifier of the badge assigned to the profile.
 * @path /communityPlatform/profiles/:profileId/badges/:badgeId
 * @accessor api.functional.communityPlatform.profiles.badges.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user profile. */
    profileId: string & tags.Format<"uuid">;

    /** Unique identifier of the badge assigned to the profile. */
    badgeId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformProfileBadge;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/profiles/:profileId/badges/:badgeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/profiles/${encodeURIComponent(props.profileId ?? "null")}/badges/${encodeURIComponent(props.badgeId ?? "null")}`;
  export const random = (): ICommunityPlatformProfileBadge =>
    typia.random<ICommunityPlatformProfileBadge>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("profileId")(() => typia.assert(props.profileId));
      assert.param("badgeId")(() => typia.assert(props.badgeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
