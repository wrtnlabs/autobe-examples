import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityRule } from "../../../../../structures/ICommunityPlatformCommunityRule";

/**
 * Create a new community-specific rules document for a given community
 * (community_platform_community_rules).
 *
 * Create a new set of rules for a specific community by providing rule body
 * content and required metadata.
 *
 * This operation uses the community_platform_community_rules table in the
 * database, which contains fields for body (the full Markdown rule text),
 * version (integer, incremented on edits, used for audit/version control),
 * community_id (the community to which rules apply), and timestamps for
 * published, created, and updated dates.
 *
 * Security: Only authenticated users with moderator or admin privileges for the
 * specified community are permitted to create new rules. The request must
 * reference a community (by UUID), and checks should confirm the actor's
 * authorization. If an unauthorized or unauthenticated user calls this
 * endpoint, an error is returned.
 *
 * Business logic: Validation enforces length and formatting for the rule body,
 * ensures no duplicate version number for the same community, and sets
 * published and created timestamps. On creation, the rules are active for the
 * given community until replaced by a higher version. Error handling covers
 * invalid community references, overly long rule text, redundant version, or
 * permission errors.
 *
 * Related Operations: For updating existing rules, use the update operation on
 * /communities/{communityId}/rules/{ruleId} with PUT. For retrieving rules, use
 * GET endpoints not included here.
 *
 * Edge Cases: If moderation rules change rapidly or concurrent edits occur, the
 * system may require last-write-wins or version increment logic. Timestamps are
 * auto-assigned by the backend.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community for which
 *   the rules are being created.
 * @param props.body New community rules content, version, and publication
 *   metadata.
 * @path /communityPlatform/moderator/communities/:communityId/rules
 * @accessor api.functional.communityPlatform.moderator.communities.rules.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the target community for which the rules are
     * being created.
     */
    communityId: string & tags.Format<"uuid">;

    /** New community rules content, version, and publication metadata. */
    body: ICommunityPlatformCommunityRule.ICreate;
  };
  export type Body = ICommunityPlatformCommunityRule.ICreate;
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/moderator/communities/:communityId/rules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/moderator/communities/${encodeURIComponent(props.communityId ?? "null")}/rules`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing community rules document by community and rule ID
 * (community_platform_community_rules).
 *
 * Update an existing rules document for a given community. This operation
 * requires both the community UUID (communityId) and the unique identifier of
 * the rule document (ruleId).
 *
 * The operation operates on the community_platform_community_rules table, which
 * tracks community_id, body (Markdown), version, published_at, created_at, and
 * updated_at. The system validates that only authorized moderators or
 * administrators for the target community may update its rules. Versioning
 * logic must ensure that edits are tracked and that the version field strictly
 * increases with each update for auditability. Edits are reflected in the
 * updated_at timestamp, while the published_at timestamp may also be updated if
 * the rule is officially republished.
 *
 * Authorization is strictly enforced at the endpoint: only assigned moderators
 * or platform admins may update rules for a given community. Validation checks
 * for version increment, Markdown length/format, and association with the
 * correct community. Errors include permission denied, invalid or non-existent
 * rule/community identifiers, conflicting version numbers, or text exceeding
 * 50,000 characters.
 *
 * Related Operations: To create new rules, use the POST
 * /communities/{communityId}/rules endpoint. For removal, only permitted via
 * archival or soft delete as determined by business needs (not covered here).
 *
 * Concurrency: The system must ensure that updates do not allow version
 * regression or data loss due to simultaneous edits; the last-write or explicit
 * version check strategy should be considered.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community for which
 *   the rules are to be updated.
 * @param props.ruleId Unique identifier of the rule document being updated.
 * @param props.body Editable fields for rules document update, including body,
 *   version, and publication details.
 * @path /communityPlatform/moderator/communities/:communityId/rules/:ruleId
 * @accessor api.functional.communityPlatform.moderator.communities.rules.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the target community for which the rules are to
     * be updated.
     */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the rule document being updated. */
    ruleId: string & tags.Format<"uuid">;

    /**
     * Editable fields for rules document update, including body, version,
     * and publication details.
     */
    body: ICommunityPlatformCommunityRule.IUpdate;
  };
  export type Body = ICommunityPlatformCommunityRule.IUpdate;
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/moderator/communities/:communityId/rules/:ruleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/moderator/communities/${encodeURIComponent(props.communityId ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a specific rule from a community
 * (community_platform_community_rules table).
 *
 * This API endpoint serves to delete a specific community rule from the
 * platform, referencing the community_platform_community_rules table in the
 * Prisma schema. Each rule pertains to a particular community and version,
 * providing customized governance for posting, commenting, and moderation.
 *
 * To execute this operation, the client must supply both the parent community's
 * unique identifier (communityId) and the rule's unique identifier (ruleId) as
 * path parameters. Both identifiers are UUIDs. Only users with appropriate
 * moderator or admin privileges for the target community may call this
 * endpoint; unauthorized attempts should be blocked with a clear error
 * response.
 *
 * Upon successful invocation, the rule is permanently removed from the
 * database. There are no soft delete fields on the schema, so this is a hard
 * delete operation. Once deletion is performed, the rule cannot be recovered.
 * All deletion actions should be recorded in the audit log for regulatory and
 * governance transparency. This operation is typically used during moderation,
 * restructuring, or when a community's policy has become obsolete.
 *
 * Related operations include the creation and updating of rules, as well as
 * retrieval of existing rules. In combination, these enable full lifecycle
 * management of community governance policies.
 *
 * @param props.connection
 * @param props.communityId The unique identifier of the target community which
 *   the rule belongs to.
 * @param props.ruleId The unique identifier of the rule to permanently delete
 *   from the community.
 * @path /communityPlatform/moderator/communities/:communityId/rules/:ruleId
 * @accessor api.functional.communityPlatform.moderator.communities.rules.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier of the target community which the rule belongs
     * to.
     */
    communityId: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the rule to permanently delete from the
     * community.
     */
    ruleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/moderator/communities/:communityId/rules/:ruleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/moderator/communities/${encodeURIComponent(props.communityId ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
