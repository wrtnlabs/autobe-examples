import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommentVote } from "../../../../../structures/ICommunityPlatformCommentVote";
import { IPageICommunityPlatformCommentVote } from "../../../../../structures/IPageICommunityPlatformCommentVote";

/**
 * Search and retrieve votes on a comment for moderation or audit
 * (community_platform_comment_votes).
 *
 * This API endpoint supports moderators and administrators in reviewing the
 * full set of votes cast on a given comment. It is typically used for detailed
 * analysis during moderation incident review, anti-abuse investigations, or
 * transparency audits.
 *
 * The operation receives a commentId to identify the comment of interest, then
 * applies filters, search, and pagination according to the provided request
 * body (such as by voter, vote type, or date). It responds with a paginated
 * summary of vote logs, indicating upvotes, downvotes, voter identities (with
 * user identity masking as required), and timestamps.
 *
 * Security checks restrict access to users with 'moderator' or 'admin' roles
 * for the relevant comment's community, preventing abuse or unauthorized data
 * exposure. Results are sorted and paginated per request parameters and
 * platform conventions.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment whose votes are to be
 *   retrieved
 * @param props.body Filter, search, and pagination criteria for retrieving
 *   votes on a comment
 * @path /communityPlatform/moderator/comments/:commentId/votes
 * @accessor api.functional.communityPlatform.moderator.comments.votes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the comment whose votes are to be retrieved */
    commentId: string & tags.Format<"uuid">;

    /**
     * Filter, search, and pagination criteria for retrieving votes on a
     * comment
     */
    body: ICommunityPlatformCommentVote.IRequest;
  };
  export type Body = ICommunityPlatformCommentVote.IRequest;
  export type Response = IPageICommunityPlatformCommentVote.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/moderator/comments/:commentId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/moderator/comments/${encodeURIComponent(props.commentId ?? "null")}/votes`;
  export const random = (): IPageICommunityPlatformCommentVote.ISummary =>
    typia.random<IPageICommunityPlatformCommentVote.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific vote on a comment from community_platform_comment_votes.
 *
 * Fetch full details of a single vote record tied to a comment, as stored in
 * community_platform_comment_votes. This endpoint is reserved primarily for
 * audit or moderation use, since regular users do not have access to view
 * voting details of others due to privacy.
 *
 * Security for this operation is strict: only users with the 'admin' or
 * 'moderator' role, and with scope covering the affiliated community, may
 * request this data. Audit logging is strongly recommended for all queries via
 * this endpoint.
 *
 * This operation supports incident review, anti-abuse measures, and vote
 * appeals workflows. Entry data is validated against the Prisma schema to
 * ensure both IDs exist and match a unique vote. If the provided voteId does
 * not match a record for the given commentId, a not found error is returned.
 * This does not return revoked or soft-deleted votes unless specifically
 * requested by additional query parameters.
 *
 * Related operations: vote log retrieval, member voting history (for
 * self-access), comment summary statistics, and comment moderation functions.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment.
 * @param props.voteId Unique identifier of the vote on the comment.
 * @path /communityPlatform/moderator/comments/:commentId/votes/:voteId
 * @accessor api.functional.communityPlatform.moderator.comments.votes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target comment. */
    commentId: string & tags.Format<"uuid">;

    /** Unique identifier of the vote on the comment. */
    voteId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommentVote;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/moderator/comments/:commentId/votes/:voteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/moderator/comments/${encodeURIComponent(props.commentId ?? "null")}/votes/${encodeURIComponent(props.voteId ?? "null")}`;
  export const random = (): ICommunityPlatformCommentVote =>
    typia.random<ICommunityPlatformCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("voteId")(() => typia.assert(props.voteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
