import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMember } from "../../../../structures/ICommunityPlatformMember";
import { IPageICommunityPlatformMember } from "../../../../structures/IPageICommunityPlatformMember";

/**
 * Search and filter platform members (users) with pagination and detailed
 * criteria (community_platform_members).
 *
 * This operation enables administrators and authorized moderators to search the
 * list of registered members (users) of the community platform. It accesses the
 * community_platform_members table and supports advanced filtering by email
 * (partial match), registration date, last updated date, and account status.
 * Paging and sorting options ensure that large user lists are manageable, with
 * results returned as paginated summaries.
 *
 * Each result record contains the member's ID, email, current status, creation
 * and update times, and, if allowed, additional public properties. Sensitive
 * authentication details, such as the password hash, are never returned. Search
 * operations may be rate-limited and are typically used for management,
 * moderation, user analytics, audit logging, or verification flows.
 *
 * Security is enforced via admin or moderator roles: only those roles can
 * retrieve the full user list or see accounts in 'blocked' or 'deleted' status.
 * Usage includes finding potentially abusive accounts, filtering members by
 * verification state, or generating audit/compliance reports. Related endpoints
 * include retrieval of individual member details (GET by ID), status update
 * (PUT), and creation or removal of users (for admin systems). Errors include
 * invalid filter criteria or access denied for insufficient permissions.
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination options for listing members,
 *   such as email, status, registration/updated date range, and sort order.
 * @path /communityPlatform/moderator/members
 * @accessor api.functional.communityPlatform.moderator.members.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter, search, and pagination options for listing members, such as
     * email, status, registration/updated date range, and sort order.
     */
    body: ICommunityPlatformMember.IRequest;
  };
  export type Body = ICommunityPlatformMember.IRequest;
  export type Response = IPageICommunityPlatformMember.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/moderator/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/moderator/members";
  export const random = (): IPageICommunityPlatformMember.ISummary =>
    typia.random<IPageICommunityPlatformMember.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
