import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityStatusChange } from "../../../../../structures/ICommunityPlatformCommunityStatusChange";
import { IPageICommunityPlatformCommunityStatusChange } from "../../../../../structures/IPageICommunityPlatformCommunityStatusChange";

/**
 * Retrieve paginated audit trail of all status changes for a community
 * (community_platform_community_status_changes table).
 *
 * This API endpoint allows authorized users (moderators for the community or
 * administrators) to search and retrieve paginated audit records of all status
 * changes for a given community, as recorded in the
 * 'community_platform_community_status_changes' table. Each record logs a
 * change event including the previous and new status, the admin or moderator
 * who performed the change, the rationale, any audit notes, and precise
 * timestamps.
 *
 * Clients submit a PATCH request to the endpoint with optional advanced
 * filtering and pagination parameters in the body, enabling sorting by
 * timestamp, filtering by status types (such as banned or private), or querying
 * by the actor responsible. Security enforcement ensures only users with
 * moderator or admin privileges for that community may access this data. If a
 * user without sufficient privileges attempts access, an error is returned.
 *
 * Typical uses include compliance audits, moderator activity reviews, or
 * regulatory checks. This operation is critical for transparency and
 * accountability in the management of community accessibility and configuration
 * changes.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community whose status
 *   change logs are being retrieved
 * @param props.body Advanced filtering, search, sorting, and pagination options
 *   for retrieving status change logs.
 * @path /communityPlatform/moderator/communities/:communityId/statusChanges
 * @accessor api.functional.communityPlatform.moderator.communities.statusChanges.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the community whose status change logs are being
     * retrieved
     */
    communityId: string & tags.Format<"uuid">;

    /**
     * Advanced filtering, search, sorting, and pagination options for
     * retrieving status change logs.
     */
    body: ICommunityPlatformCommunityStatusChange.IRequest;
  };
  export type Body = ICommunityPlatformCommunityStatusChange.IRequest;
  export type Response = IPageICommunityPlatformCommunityStatusChange;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/moderator/communities/:communityId/statusChanges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/moderator/communities/${encodeURIComponent(props.communityId ?? "null")}/statusChanges`;
  export const random = (): IPageICommunityPlatformCommunityStatusChange =>
    typia.random<IPageICommunityPlatformCommunityStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
