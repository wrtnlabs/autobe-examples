import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformVoteLog } from "../../../../structures/ICommunityPlatformVoteLog";
import { IPageICommunityPlatformVoteLog } from "../../../../structures/IPageICommunityPlatformVoteLog";

/**
 * Search voting logs for auditing and moderation, based on
 * community_platform_vote_logs.
 *
 * This API is designed to retrieve a paginated and filterable list of voting
 * activity logs as stored in the community_platform_vote_logs table. Voting
 * logs include every upvote, downvote, vote revocation, along with associated
 * member IDs, content IDs (post or comment), device/IP information, action
 * status (success, duplicate, revoked, error), and timestamp of the action.
 *
 * Access to this API is restricted to administrators and community moderators
 * for anti-abuse investigation, trend analysis, and audit trail compliance.
 * Unauthorized access should be strictly blocked. The response provides full
 * context records, which may be joined with member/post/comment details for
 * comprehensive moderation review. Usage of this endpoint is expected during
 * routine compliance audits and whenever suspicious or rule-breaking voting
 * behavior is reported or detected.
 *
 * Filtering options should include member ID, vote type (post/comment), action
 * status, date/time windows, affected content, and optionally device/IP fields
 * for forensics. Results are paginated for efficiency, supporting cursor or
 * offset-based pagination as needed, with total record count included. This
 * endpoint may be heavily rate-limited and carefully logged for
 * regulatory/trust & safety reasons.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination input for vote logs.
 *   Includes filters for member, content, vote type/value, action, and time
 *   window.
 * @path /communityPlatform/moderator/voteLogs
 * @accessor api.functional.communityPlatform.moderator.voteLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination input for vote logs. Includes filters
     * for member, content, vote type/value, action, and time window.
     */
    body: ICommunityPlatformVoteLog.IRequest;
  };
  export type Body = ICommunityPlatformVoteLog.IRequest;
  export type Response = IPageICommunityPlatformVoteLog;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/moderator/voteLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/moderator/voteLogs";
  export const random = (): IPageICommunityPlatformVoteLog =>
    typia.random<IPageICommunityPlatformVoteLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
