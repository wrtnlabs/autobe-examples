import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityImage } from "../../../../../structures/ICommunityPlatformCommunityImage";

/**
 * Add an image to a community using an existing file reference as branding or a
 * visual asset (community_platform_community_images).
 *
 * This endpoint is used to create a new image entry for a designated community,
 * supporting community branding, icons, backgrounds, or other visual assets.
 * Upon receiving a valid image record and associated metadata, the system
 * ensures the requesting user has sufficient privileges—typically a moderator
 * of the target community or a platform administrator.
 *
 * Uploaded images must already exist in the global file upload system,
 * referenced via file_upload_id, ensuring that direct binary data transfer is
 * handled by a separate upload flow. The image_type and order fields allow
 * communities to manage multiple visuals and control display order, while
 * alt_text enhances accessibility. The system applies validation based on the
 * platform's business constraints, including permitted file types (JPEG, PNG,
 * etc.), maximum file size, and community-specific limits on the quantity and
 * types of images.
 *
 * If the operation is successful, it returns the newly created image record
 * with all associated properties. In case of permission failure, validation
 * errors, or exceeding quota, appropriate error responses and business messages
 * are returned. This operation should be used in conjunction with
 * administrative or moderation dashboards and may integrate with future feature
 * extensions such as image galleries or versioned branding assets.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community to which
 *   the image should be uploaded and assigned.
 * @param props.body Metadata and association details for the community image to
 *   be created. Must include file_upload_id and type information.
 * @path /communityPlatform/moderator/communities/:communityId/images
 * @accessor api.functional.communityPlatform.moderator.communities.images.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the target community to which the image should
     * be uploaded and assigned.
     */
    communityId: string & tags.Format<"uuid">;

    /**
     * Metadata and association details for the community image to be
     * created. Must include file_upload_id and type information.
     */
    body: ICommunityPlatformCommunityImage.ICreate;
  };
  export type Body = ICommunityPlatformCommunityImage.ICreate;
  export type Response = ICommunityPlatformCommunityImage;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/moderator/communities/:communityId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/moderator/communities/${encodeURIComponent(props.communityId ?? "null")}/images`;
  export const random = (): ICommunityPlatformCommunityImage =>
    typia.random<ICommunityPlatformCommunityImage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update metadata or display properties of a specific community image
 * (community_platform_community_images).
 *
 * This endpoint allows modification of an existing image record associated with
 * a community, supporting scenarios such as updating alt text for
 * accessibility, changing image order, activating/deactivating visuals, or
 * reclassifying the image_type (icon, background, etc.). Only users with
 * appropriate role-based permissions (moderators of the community or platform
 * admins) may use this operation; the system enforces these authorization
 * checks before applying updates.
 *
 * This operation does not replace the binary file but updates related metadata,
 * and thus expects only fields modifiable at the record level—such as alt_text,
 * order, image_type, or activation status. Updates are validated for compliance
 * with business rules on allowed values, maximum image counts, uniqueness of
 * order within each image_type, and accessibility string length. Full change
 * history is logged for auditing, supporting restoration or rollback if
 * needed.
 *
 * If successful, the operation returns the updated community image record. If
 * the operation fails due to permission errors, validation issues, or
 * constraints (such as attempting to set conflicting orders), informative error
 * messages and guidance for correction are provided.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community for which the
 *   image is being managed.
 * @param props.imageId Unique identifier of the community image record to be
 *   updated.
 * @param props.body Fields to update for the community image. Only metadata,
 *   not the actual image file, is updated.
 * @path /communityPlatform/moderator/communities/:communityId/images/:imageId
 * @accessor api.functional.communityPlatform.moderator.communities.images.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the community for which the image is being
     * managed.
     */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the community image record to be updated. */
    imageId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the community image. Only metadata, not the
     * actual image file, is updated.
     */
    body: ICommunityPlatformCommunityImage.IUpdate;
  };
  export type Body = ICommunityPlatformCommunityImage.IUpdate;
  export type Response = ICommunityPlatformCommunityImage;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/moderator/communities/:communityId/images/:imageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/moderator/communities/${encodeURIComponent(props.communityId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityImage =>
    typia.random<ICommunityPlatformCommunityImage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("imageId")(() => typia.assert(props.imageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a non-banner image from a community
 * (community_platform_community_images table).
 *
 * This API endpoint enables an authorized moderator or admin to delete a
 * specific image from a community. Images in
 * 'community_platform_community_images' are used for non-banner purposes like
 * icons or backgrounds, and each is associated with a community and an
 * underlying file upload (from community_platform_file_uploads).
 *
 * Upon receiving a DELETE request with both the communityId and imageId, the
 * operation validates moderator or admin permissions before removing the target
 * image. Any file resource reference must be handled appropriately in relation
 * to other usages (such as banners, posts), with the primary focus being the
 * removal of the image's explicit record in the community's image listing.
 *
 * Security is paramount; only moderators assigned to the relevant community or
 * admins can perform this operation. An error is returned if the image is not
 * found, belongs to a different community, or the requester lacks permission.
 * This operation does not remove the actual file data from storage but strictly
 * detaches the image from the community in question, following the ERD and
 * table definitions. All action outcomes are logged for compliance and audit.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community from which this
 *   image is being removed
 * @param props.imageId Unique identifier of the image to be removed from the
 *   community
 * @path /communityPlatform/moderator/communities/:communityId/images/:imageId
 * @accessor api.functional.communityPlatform.moderator.communities.images.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the community from which this image is being
     * removed
     */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the image to be removed from the community */
    imageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/moderator/communities/:communityId/images/:imageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/moderator/communities/${encodeURIComponent(props.communityId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("imageId")(() => typia.assert(props.imageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
