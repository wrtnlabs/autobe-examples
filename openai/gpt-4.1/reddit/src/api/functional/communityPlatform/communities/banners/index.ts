import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityBanner } from "../../../../structures/ICommunityPlatformCommunityBanner";

/**
 * Retrieve detailed information about a specific community banner
 * (community_platform_community_banners).
 *
 * This endpoint provides all available metadata for the specified banner image
 * belonging to a particular community, referencing the
 * community_platform_community_banners Prisma schema table and its
 * relationships. It is designed to enable users to retrieve banner details
 * required for display on community pages or for moderation and branding
 * management interfaces.
 *
 * Security is enforced such that both general members and moderators can access
 * banner details for public or their managed communities, while admins may
 * access all banners for any community. Unauthorized users will receive
 * appropriate error messages if requesting non-public or inactive banners.
 *
 * The operation ensures that banner information returned includes its display
 * status, associated file upload (via file_upload_id), ordering (for
 * rotation/multiple banners), and alternative text for accessibility. The
 * operation does not expose any write capabilities or modifications, focusing
 * strictly on retrieval. Error handling includes record-not-found and
 * permission-denied scenarios, ensuring users cannot access banners outside
 * their access scope.
 *
 * Related operations include listing all banners for a community or updating
 * banners for community appearance management. This operation pairs with the
 * POST /communities/{communityId}/banners endpoint for creation workflows, as
 * well as moderation actions for banner rotation or removal.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community associated
 *   with the banner.
 * @param props.bannerId Unique identifier of the specific banner image to
 *   retrieve.
 * @path /communityPlatform/communities/:communityId/banners/:bannerId
 * @accessor api.functional.communityPlatform.communities.banners.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target community associated with the banner. */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific banner image to retrieve. */
    bannerId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunityBanner;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId/banners/:bannerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}/banners/${encodeURIComponent(props.bannerId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityBanner =>
    typia.random<ICommunityPlatformCommunityBanner>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("bannerId")(() => typia.assert(props.bannerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
