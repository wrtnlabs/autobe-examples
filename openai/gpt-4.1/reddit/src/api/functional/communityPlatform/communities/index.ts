import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../structures/IPageICommunityPlatformCommunity";
export * as banners from "./banners/index";
export * as images from "./images/index";

/**
 * Search and retrieve a paginated, filtered list of communities from the
 * platform.
 *
 * This operation enables paginated and filtered retrieval of communities from
 * the platform, supporting advanced search, filter, and sorting options as
 * defined by business requirements. Users can search by partial community name,
 * filter by status (such as active, private, or banned), and limit results
 * based on creation date or other relevant metadata. The operation is used for
 * both community discovery (public to all users) and for internal management
 * interfaces (admins, moderators) with appropriate permission filters applied.
 *
 * Authorization plays a critical role, with public users limited to public and
 * discoverable communities, while authenticated users may see communities they
 * moderate or administer, including some with restricted status. The response
 * schema includes essential details such as community IDs, name, title,
 * description, status, slug, and creation timestamp, but hides sensitive or
 * restricted fields from unauthorized users. Efficient implementation is
 * necessary to support large-scale listing, with all filters and sorting
 * parameters validated per requirements and Prisma schema, and invalid queries
 * return appropriate error messages.
 *
 * This endpoint integrates closely with other API operations including detailed
 * community view (GET by ID), community post listing, community creation
 * (POST), status management (PUT), moderation assignment, and subscription
 * APIs. Errors are handled gracefully, returning user-friendly messages for
 * filter/sort parameter issues or unauthorized attempts at restricted data.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination criteria for community
 *   listing.
 * @path /communityPlatform/communities
 * @accessor api.functional.communityPlatform.communities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination criteria for community listing. */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/communities";
  export const random = (): IPageICommunityPlatformCommunity.ISummary =>
    typia.random<IPageICommunityPlatformCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific community from the
 * community_platform_communities table.
 *
 * Retrieve detailed metadata and configuration for the specified community
 * using its unique identifier. This encompasses key community details including
 * the display title, name, description, slug, status, associated creator,
 * timestamps, and deletion status.
 *
 * Authorization for this operation is public, enabling both authenticated users
 * and guests to load community pages for engagement or browsing. However, the
 * system may enforce access control for non-public or restricted communities
 * depending on the status.
 *
 * The data for this operation corresponds to the community_platform_communities
 * Prisma DB schema, directly mapping all columns for accurate platform
 * representation. Any business logic regarding soft-deleted or private
 * communities must be handled in downstream logic, but their visibility can be
 * reflected via the status and deleted_at fields.
 *
 * Related operations include listing communities for discovery, creating a new
 * community, updating existing community settings, and moderation of community
 * attributes. Failure conditions include invalid communityId, non-existing
 * communities, or restricted/archived status.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community.
 * @path /communityPlatform/communities/:communityId
 * @accessor api.functional.communityPlatform.communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target community. */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
