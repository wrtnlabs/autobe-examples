import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformControversialScore } from "../../../../structures/ICommunityPlatformControversialScore";

/**
 * Retrieve the cached controversial score for a specific post
 * (community_platform_controversial_scores).
 *
 * This API endpoint allows clients to retrieve the current controversial score
 * for a given post, identified by its unique postId. The controversial score is
 * used in sorting posts according to controversy, calculated by analyzing the
 * distribution of upvotes and downvotes, as well as engagement metrics. The
 * result is drawn from the community_platform_controversial_scores table, which
 * caches these values for fast access.
 *
 * Security is enforced so that only public or authorized community posts are
 * retrievable; posts belonging to private or banned communities may not expose
 * controversial scores depending on status. The controversial score is designed
 * for consumption by end-user applications displaying post lists or analytics
 * modules.
 *
 * The underlying record is linked to the specified post via the postId path
 * parameter. Validation ensures that postId is a valid UUID; if the post is not
 * found or the score is unavailable, a clear error is returned. This endpoint
 * is typically used in conjunction with post listing or post detail endpoints
 * when clients need to sort or display information based on controversy.
 *
 * Error handling includes not found (404) for missing posts or scores and
 * permission denied (403) for restricted content.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post for which to retrieve the
 *   controversial score.
 * @path /communityPlatform/posts/:postId/controversialScore
 * @accessor api.functional.communityPlatform.posts.controversialScore.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the post for which to retrieve the controversial
     * score.
     */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformControversialScore;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId/controversialScore",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/controversialScore`;
  export const random = (): ICommunityPlatformControversialScore =>
    typia.random<ICommunityPlatformControversialScore>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
