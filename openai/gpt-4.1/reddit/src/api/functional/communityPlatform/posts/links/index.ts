import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostLink } from "../../../../structures/ICommunityPlatformPostLink";
import { IPageICommunityPlatformPostLink } from "../../../../structures/IPageICommunityPlatformPostLink";

/**
 * Retrieve and search all links attached to a post
 * (community_platform_post_links table).
 *
 * This API operation enables clients to retrieve, filter, and paginate the set
 * of all hyperlinks attached to a specific post, using the
 * community_platform_post_links table. The postId path parameter identifies the
 * post whose associated links are to be queried. Each result provides detailed
 * information including the original URL, optional preview title/description,
 * and a preview image URI if available. This supports listing, moderation, and
 * UI rendering of post-linked content.
 *
 * Security and permissions are enforced such that only users authorized to view
 * the post (including guests for public posts and authenticated users for
 * restricted posts) can access the attached link references. The operation is
 * intended for use in post detail views, moderation dashboards, or user content
 * management screens.
 *
 * Supports rich query/body parameters for advanced filtering, like partial URL
 * search, link status, or pagination controls appropriate to the volume of
 * attached links. Returned responses are paginated and reflect only links
 * attached to the specified post. Error handling covers not-found scenarios and
 * access violations. Related operations include link creation and deletion. The
 * endpoint is for retrieval only; modification or deletion of links are handled
 * by other endpoints.
 *
 * @param props.connection
 * @param props.postId Unique identifier (UUID) of the target post. Links for
 *   this post will be retrieved.
 * @param props.body Request body containing filtering, sorting, and pagination
 *   parameters for retrieving post links. Examples include partial URL matches,
 *   link status, page number, or page size.
 * @path /communityPlatform/posts/:postId/links
 * @accessor api.functional.communityPlatform.posts.links.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target post. Links for this post will
     * be retrieved.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Request body containing filtering, sorting, and pagination parameters
     * for retrieving post links. Examples include partial URL matches, link
     * status, page number, or page size.
     */
    body: ICommunityPlatformPostLink.IRequest;
  };
  export type Body = ICommunityPlatformPostLink.IRequest;
  export type Response = IPageICommunityPlatformPostLink;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts/:postId/links",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/links`;
  export const random = (): IPageICommunityPlatformPostLink =>
    typia.random<IPageICommunityPlatformPostLink>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve an individual link attached to a specific post from
 * community_platform_post_links.
 *
 * This API operation allows clients to fetch detailed information about a
 * single external link that has been associated with a specific post. The
 * information includes the link's URL, optional preview metadata, and its
 * relationship to the post, leveraging the fields defined in the
 * community_platform_post_links schema. Access control is enforced to restrict
 * read access according to the visibility of the post and its parent
 * communityâ€”public posts and communities can be viewed by any user, while
 * private or restricted posts require that the requester have access rights.
 *
 * The operation checks that the supplied postId represents an existing post,
 * and the linkId references a valid link record that is associated with that
 * post. Requests where the link is not attached to the given post, or where the
 * post is not accessible, result in a clear error response. Security measures
 * ensure that information about links in unpublished or deleted posts is never
 * revealed to unauthorized users.
 *
 * This endpoint is closely related to the post retrieval endpoints, and its
 * correct functioning may require integration or pre-checks with post detail
 * APIs (such as "GET /posts/{postId}"). It plays an important role in rendering
 * link previews and ensuring a smooth user experience for content involving
 * external links. All fields returned correspond to the
 * community_platform_post_links schema. Error handling includes not-found
 * errors for missing links or posts and permission errors if the link's post or
 * its parent community is not accessible to the requester.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post to which the link is
 *   attached
 * @param props.linkId Unique identifier of the target link attached to this
 *   post
 * @path /communityPlatform/posts/:postId/links/:linkId
 * @accessor api.functional.communityPlatform.posts.links.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent post to which the link is attached */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target link attached to this post */
    linkId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPostLink;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId/links/:linkId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/links/${encodeURIComponent(props.linkId ?? "null")}`;
  export const random = (): ICommunityPlatformPostLink =>
    typia.random<ICommunityPlatformPostLink>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("linkId")(() => typia.assert(props.linkId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
