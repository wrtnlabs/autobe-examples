import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../structures/ICommunityPlatformPost";
import { IPageICommunityPlatformPost } from "../../../structures/IPageICommunityPlatformPost";
export * as images from "./images/index";
export * as links from "./links/index";
export * as comments from "./comments/index";
export * as controversialScore from "./controversialScore/index";

/**
 * Search, filter, and paginate platform posts (community_platform_posts table).
 *
 * This operation retrieves a paginated and filterable list of posts from the
 * community_platform_posts table, enabling rich client-side search experiences
 * for users browsing, searching, or discovering posts. Clients may request
 * filters based on content type (text, link, image), post status (published,
 * pending, removed), target community, or text queries.
 *
 * The request body (ICommunityPlatformPost.IRequest) allows specifying advanced
 * search, pagination, and sort options (e.g., hot, new, top, controversial).
 * The response (IPageICommunityPlatformPost.ISummary) returns a page of post
 * summaries, including essential fields for display and client interactions.
 * Security: Both guests and members can search and view posts, but certain
 * fields or statuses (e.g., pending or removed) may only be accessible to
 * moderators or the post creator. Permission checks must be enforced to hide or
 * redact sensitive content.
 *
 * The operation performs optimized text searching and incorporates Prisma table
 * indexes on fields such as title, creation date, and status to improve
 * performance. Error handling returns empty results or appropriate error codes
 * if no matches are found or if filters are invalid. Pagination metadata is
 * always included in the response for infinite scrolling or page-by-page
 * navigation.
 *
 * @param props.connection
 * @param props.body Search, filter, sorting, and pagination parameters for
 *   retrieving posts.
 * @path /communityPlatform/posts
 * @accessor api.functional.communityPlatform.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, sorting, and pagination parameters for retrieving
     * posts.
     */
    body: ICommunityPlatformPost.IRequest;
  };
  export type Body = ICommunityPlatformPost.IRequest;
  export type Response = IPageICommunityPlatformPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/posts";
  export const random = (): IPageICommunityPlatformPost.ISummary =>
    typia.random<IPageICommunityPlatformPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single post's details by ID from the community_platform_posts
 * table.
 *
 * This endpoint fetches a user's post details from the system by unique post
 * ID. Only posts that exist and are not soft-deleted or restricted will be
 * shown; otherwise, access will be denied or a not-found error returned.
 *
 * Security: Guests and authenticated users can access public posts. Posts with
 * status values indicating moderation removal or restriction (e.g., removed,
 * hidden, mod_queued) are hidden unless the requester is a moderator or the
 * post's author. Validation ensures the post exists, is not banned or deleted,
 * and all related content (images, links) is included only if attached to the
 * post.
 *
 * Business logic: This endpoint is suitable for use in post detail pages,
 * direct post links, and user profile displays. Associated comments, votes, and
 * moderator actions are not directly returned here, but can be retrieved via
 * parallel or nested API calls. All error cases (not found, unauthorized
 * access) return succinct, actionable responses. Posts are associated with
 * communities, so community-level visibility or bans may affect access.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the post to be retrieved
 * @path /communityPlatform/posts/:postId
 * @accessor api.functional.communityPlatform.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the post to be retrieved */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPost;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityPlatformPost =>
    typia.random<ICommunityPlatformPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
