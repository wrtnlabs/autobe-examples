import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../structures/ICommunityPlatformComment";
import { IPageICommunityPlatformComment } from "../../../../structures/IPageICommunityPlatformComment";

/**
 * Search, sort, and retrieve a paginated/nested list of comments for a specific
 * post from community_platform_comments.
 *
 * Retrieve a filtered and paginated list of comments for a given post from the
 * community_platform_comments table. The operation supports advanced filtering
 * such as nesting level (thread depth), member, or timeframe; sorting by
 * recency, score, controversial, or custom ranking. It processes rapid or
 * bot-driven queries according to business rate limits.
 *
 * The operation ensures thread constraints: it displays children up to the
 * configured maximum nesting. Security and permissions are enforced per
 * community and user ban status; only published and not-moderated-removed
 * comments are returned. Members can use this operation to browse replies,
 * search content, or load additional comments on demand.
 *
 * Pagination options and sorting order are handled through the request body
 * parameters, while the response provides a paginated/structured list optimized
 * for direct UI rendering.
 *
 * @param props.connection
 * @param props.postId Target post's unique identifier (UUID).
 * @param props.body Filtering, search, pagination, and sort options for this
 *   post's comment retrieval.
 * @path /communityPlatform/posts/:postId/comments
 * @accessor api.functional.communityPlatform.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target post's unique identifier (UUID). */
    postId: string & tags.Format<"uuid">;

    /**
     * Filtering, search, pagination, and sort options for this post's
     * comment retrieval.
     */
    body: ICommunityPlatformComment.IRequest;
  };
  export type Body = ICommunityPlatformComment.IRequest;
  export type Response = IPageICommunityPlatformComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageICommunityPlatformComment.ISummary =>
    typia.random<IPageICommunityPlatformComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the details of a specific comment on a post from
 * community_platform_comments.
 *
 * Fetch the full details of a single comment belonging to a particular post
 * using the community_platform_comments table. The commentId parameter uniquely
 * identifies the comment, ensuring only published, viewable comments are
 * retrievable by this operation.
 *
 * Authorization and comment visibility checks are applied according to the
 * viewer's role, as well as post and community status (e.g., banned, deleted,
 * hidden threads). Moderation audit logs and edit history are not included but
 * may be accessed separately as per business and privacy rules. All standard
 * edge cases—soft deleted, moderated-removed, or non-public comments—are
 * handled with appropriate error responses or visibility restrictions.
 *
 * @param props.connection
 * @param props.postId Target post's unique identifier (UUID).
 * @param props.commentId Unique identifier for the comment.
 * @path /communityPlatform/posts/:postId/comments/:commentId
 * @accessor api.functional.communityPlatform.posts.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target post's unique identifier (UUID). */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier for the comment. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
