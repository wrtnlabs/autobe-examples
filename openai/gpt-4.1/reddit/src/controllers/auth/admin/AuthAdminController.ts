import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { ICommunityPlatformAdmin } from "../../../api/structures/ICommunityPlatformAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register a new admin in the community_platform_admins table with full
   * authentication onboarding.
   *
   * This endpoint facilitates registration of new platform administrators by
   * creating a record in the 'community_platform_admins' table. Administrators
   * must supply a unique email address, a secure password (hashed upon
   * receipt), a 'superuser' Boolean flag (if the registering actor has this
   * capability), and an initial status (typically set to 'active'). The
   * operation relies strictly on the email, password_hash, superuser, and
   * status columns in the table. All registration requests are thoroughly
   * validated, and email uniqueness is enforced to prevent duplication. Upon
   * successful registration, a JWT-based authorization response is issued that
   * conveys the admin's access token and refresh token, as required by the
   * platform's session and token rules. This endpoint forms the basis of the
   * administrator onboarding and is a prerequisite for all further admin
   * authentication flows.
   *
   * Credentials are never stored in plaintext; password_hash is mandatory and
   * created via secure cryptographic hashing before storage. The endpoint will
   * reject registration attempts with duplicate emails, or in cases where
   * required information is missing. All registration and subsequent actions
   * are logged for auditability through the community_platform_audit_logs
   * table. Registration can only be performed through this endpoint; no
   * alternative join flows for platform admins are provided.
   *
   * Administrators who successfully register have platform-wide authority, but
   * actions may still be subject to status review or role-based access checks
   * for superuser-privileged APIs, ensuring platform security and
   * administrative separation of duties. The JWT token payload will reflect the
   * admin role and initial permissions per system configuration.
   *
   * Security reviews are required for all admin registration flows. Strong
   * validation and cryptographic policies are enforced at all stages.
   * Duplicate, weak, or compromised passwords are strictly disallowed per
   * policy.
   *
   * Related operations: admin login (authentication), admin token refresh, and
   * status/suspension management. The join operation is the entry-point for all
   * admin authentication flows and must be executed first.
   *
   * @param connection
   * @param body Admin registration information for onboarding a new
   *   administrator account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ICommunityPlatformAdmin.ICreate,
  ): Promise<ICommunityPlatformAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an admin with email and password; issue tokens if credentials
   * match community_platform_admins table.
   *
   * This endpoint authenticates an existing platform administrator by verifying
   * their credentials against the 'community_platform_admins' table. The admin
   * must supply a valid, unique email and password. The password is hashed on
   * receipt using secure algorithms and compared with the stored
   * 'password_hash' from the schema. Only active accounts with 'status' set to
   * 'active' will be permitted to log in, as specified by the status column.
   *
   * Upon successful authentication, the system issues a JWT access token (for
   * immediate use) and a refresh token (for session renewal). Both tokens are
   * embedded in a structured response object conforming to the platform's
   * authentication requirements and session/token rules. Credentials are never
   * exposed or stored in plaintext at any stage. Failed login
   * attempts—including attempts with invalid passwords or for suspended/deleted
   * accounts—are logged for audit, and repeated failed attempts may trigger
   * account lockout as per business rules.
   *
   * The login flow leverages the exact fields present in the schema: 'email',
   * 'password_hash', 'superuser', and 'status'. Invalid or locked accounts are
   * denied login and a generic authentication failure message is returned to
   * prevent information disclosure. This operation is a critical part of the
   * platform's administrator authentication suite and forms the basis of all
   * subsequent privileged admin sessions.
   *
   * The endpoint is implemented strictly to enforce administrative security,
   * logging, and credential isolation. It is paired with admin registration and
   * token refresh operations for a complete authentication flow.
   *
   * Security reviews and cryptographic audits are essential for this endpoint.
   * All tokens are issued following approved JWT/token management policies.
   * Rate limiting and brute force protections are in place for this endpoint to
   * protect against abuse and credential stuffing attacks.
   *
   * Related operations: /auth/admin/join for registration, /auth/admin/refresh
   * for token renewal. The login must precede all authenticated admin actions.
   *
   * @param connection
   * @param body Admin login credentials (email, password).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ICommunityPlatformAdmin.ILogin,
  ): Promise<ICommunityPlatformAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh admin's JWT session tokens using a valid current refresh token
   * (community_platform_admins table).
   *
   * This endpoint allows an authenticated platform administrator to renew their
   * session by exchanging a valid refresh token for a new set of tokens. The
   * operation checks the validity and authenticity of the provided refresh
   * token, referencing active tokens tied to the admin in the
   * 'community_platform_admins' table. Only admins with 'status' set to
   * 'active' may successfully refresh their tokens. The system rejects requests
   * using expired, revoked, or invalid refresh tokens, or for accounts marked
   * 'suspended' or 'deleted' via the status and deleted_at columns.
   *
   * On successful validation, the system returns a new JWT access token
   * (short-lived) and a fresh refresh token (with original or truncated
   * expiry). The tokens' payload reflects the admin's access rights, current
   * status, and superuser setting. The refresh flow ensures that administrative
   * session continuity stays secure and self-contained, in line with platform
   * session/token renewal standards.
   *
   * All refresh token requests—whether accepted or rejected—are logged via the
   * 'community_platform_audit_logs' table to ensure complete traceability.
   * Attempts to refresh using a token associated with an inactive admin account
   * are strictly denied. Security policies ensure strong protections against
   * refresh token misuse, theft, or replay.
   *
   * This endpoint is a core element for administrative session management and
   * is mandatory for uninterrupted admin workflows requiring extended
   * authentication. It works together with /auth/admin/login and
   * /auth/admin/join for a secure admin session lifecycle.
   *
   * @param connection
   * @param body Refresh token payload for admin session renewal.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ICommunityPlatformAdmin.IRefresh,
  ): Promise<ICommunityPlatformAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
