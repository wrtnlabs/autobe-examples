import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformAdminAdmins } from "../../../../providers/patchCommunityPlatformAdminAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getCommunityPlatformAdminAdminsAdminId } from "../../../../providers/getCommunityPlatformAdminAdminsAdminId";
import { putCommunityPlatformAdminAdminsAdminId } from "../../../../providers/putCommunityPlatformAdminAdminsAdminId";

import { IPageICommunityPlatformAdmin } from "../../../../api/structures/IPageICommunityPlatformAdmin";
import { ICommunityPlatformAdmin } from "../../../../api/structures/ICommunityPlatformAdmin";

@Controller("/communityPlatform/admin/admins")
export class CommunityplatformAdminAdminsController {
  /**
   * List, filter, and paginate all platform admin accounts
   * (community_platform_admins table).
   *
   * This operation provides a paginated and filterable index of administrator
   * accounts from the community_platform_admins Prisma schema. Each
   * administrator is represented by metadata such as their unique ID, email,
   * whether they are a superuser, their account status (e.g., active,
   * suspended, deleted), and audit timestamps. The operation is essential for
   * performing platform-wide management, facilitating compliance monitoring,
   * and supporting security reviews such as separation-of-duty analysis or
   * admin credential audits.
   *
   * Security and privacy are paramount: full exposure of admin details is only
   * available to authenticated users with the 'admin' role. Sensitive details
   * such as password hashes are never returned. All search activity should be
   * logged for audit traceability. The endpoint supports complex filters and
   * sortsâ€”for example, filtering by status or superuser state, and sorting by
   * created_at or updated_at.
   *
   * The response returns a paginated summary DTO for each admin record to
   * enable efficient rendering and actionable insights for backoffice and
   * operational dashboards. Should be integrated with admin role management
   * workflows (e.g., onboarding, offboarding, role changes), and related
   * platform auditing/monitoring flows. If a search/filter returns no results,
   * an empty dataset with pagination metadata is returned. Robust error
   * handling ensures forbidden access is detected and logged, with appropriate
   * messages for unauthorized requests.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering and
   *   sorting admin accounts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformAdmin.IRequest,
  ): Promise<IPageICommunityPlatformAdmin.ISummary> {
    try {
      return await patchCommunityPlatformAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific platform administrator
   * (community_platform_admins).
   *
   * This operation retrieves the complete profile for a platform administrator
   * based on the provided adminId. The adminId must match a valid UUID for an
   * administrator in the community_platform_admins table. Returned information
   * includes the admin's email address, superuser privilege flag, account
   * status (such as active or suspended), and audit metadata (timestamps for
   * creation, update, and soft deletion).
   *
   * Security for this operation is strict: only users with the admin role may
   * access this endpoint, enabling platform staff to view or verify other admin
   * accounts for platform management, compliance, or delegation of privileges.
   * Sensitive information (like password hashes or MFA secrets) is not included
   * in the response.
   *
   * The response body reflects all core fields in the Prisma schema, including
   * audit fields useful for administrative interfaces. Related sub-entities
   * (such as logs, assignments) are not returned but may be referenced
   * elsewhere. Error scenarios include invalid or missing adminId, unauthorized
   * access, or non-existent records.
   *
   * @param connection
   * @param adminId Unique identifier (UUID) of the platform administrator to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAdmin> {
    try {
      return await getCommunityPlatformAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific platform administrator's profile/status
   * (community_platform_admins).
   *
   * This operation updates the properties of a platform administrator,
   * identified by their adminId, as stored in the community_platform_admins
   * table. Acceptable fields for updating depend on business policies:
   * typically, account status, superuser privileges, and email are updatable.
   * Password_hash changes may require additional security workflows and are
   * generally handled by dedicated credential endpoints for best practice.
   *
   * Only users with admin authorization, typically superusers, may invoke this
   * operation. All updates are subject to audit requirements: the API must
   * maintain timestamps and provide clear history for compliance. Responses
   * include the updated admin's complete entity details as confirmation.
   * Attempts to update non-existent, deleted, or unauthorized admin accounts
   * will yield appropriate errors or rejections by business logic.
   *
   * All modifications must comply with account lifecycle rules, and platform
   * policies regarding administrative privilege changes, to prevent privilege
   * escalation or accidental lockouts. Sensitive settings and credentials must
   * be protected according to security guidelines.
   *
   * @param connection
   * @param adminId Unique identifier (UUID) of the administrator to update.
   * @param body Fields to update for the administrator (status, superuser flag,
   *   email, or other editable properties).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformAdmin.IUpdate,
  ): Promise<ICommunityPlatformAdmin> {
    try {
      return await putCommunityPlatformAdminAdminsAdminId({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
