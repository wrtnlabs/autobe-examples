import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformAdminAuditLogsAuditLogId } from "../../../../providers/getCommunityPlatformAdminAuditLogsAuditLogId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ICommunityPlatformAuditLog } from "../../../../api/structures/ICommunityPlatformAuditLog";

@Controller("/communityPlatform/admin/auditLogs/:auditLogId")
export class CommunityplatformAdminAuditlogsController {
  /**
   * Retrieve detailed information for a specific audit log entry
   * (community_platform_audit_logs table).
   *
   * Retrieve a specific audit log record by its unique identifier from the
   * audit log table. This log provides granular details regarding who performed
   * an action, the type of action, the affected table, and contextual details
   * captured at the time of the event.
   *
   * Audit logs are critical for compliance, security investigations, and
   * transparency, allowing platform administrators to reconstruct event
   * histories, policy changes, or security incidents. Each audit log may
   * contain information such as actor type, actor ID, action type, target
   * table, target ID, event details, and timestamps.
   *
   * Access to individual audit logs should be restricted to admin users only,
   * as log records may contain sensitive or private contextual information.
   * Platform staff can use this endpoint to monitor activity, investigate
   * reported issues, and maintain the integrity and security posture of the
   * system. If a log entry does not exist or access is prohibited, the API will
   * return a suitable error (e.g., 404 Not Found, 403 Forbidden).
   *
   * @param connection
   * @param auditLogId Unique identifier (UUID) of the audit log entry to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAuditLog> {
    try {
      return await getCommunityPlatformAdminAuditLogsAuditLogId({
        admin,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
