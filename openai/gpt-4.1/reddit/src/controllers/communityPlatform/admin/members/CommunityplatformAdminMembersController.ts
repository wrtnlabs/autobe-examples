import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformAdminMembers } from "../../../../providers/patchCommunityPlatformAdminMembers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { deleteCommunityPlatformAdminMembersMemberId } from "../../../../providers/deleteCommunityPlatformAdminMembersMemberId";

import { IPageICommunityPlatformMember } from "../../../../api/structures/IPageICommunityPlatformMember";
import { ICommunityPlatformMember } from "../../../../api/structures/ICommunityPlatformMember";

@Controller("/communityPlatform/admin/members")
export class CommunityplatformAdminMembersController {
  /**
   * Search and filter platform members (users) with pagination and detailed
   * criteria (community_platform_members).
   *
   * This operation enables administrators and authorized moderators to search
   * the list of registered members (users) of the community platform. It
   * accesses the community_platform_members table and supports advanced
   * filtering by email (partial match), registration date, last updated date,
   * and account status. Paging and sorting options ensure that large user lists
   * are manageable, with results returned as paginated summaries.
   *
   * Each result record contains the member's ID, email, current status,
   * creation and update times, and, if allowed, additional public properties.
   * Sensitive authentication details, such as the password hash, are never
   * returned. Search operations may be rate-limited and are typically used for
   * management, moderation, user analytics, audit logging, or verification
   * flows.
   *
   * Security is enforced via admin or moderator roles: only those roles can
   * retrieve the full user list or see accounts in 'blocked' or 'deleted'
   * status. Usage includes finding potentially abusive accounts, filtering
   * members by verification state, or generating audit/compliance reports.
   * Related endpoints include retrieval of individual member details (GET by
   * ID), status update (PUT), and creation or removal of users (for admin
   * systems). Errors include invalid filter criteria or access denied for
   * insufficient permissions.
   *
   * @param connection
   * @param body Filter, search, and pagination options for listing members,
   *   such as email, status, registration/updated date range, and sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformMember.IRequest,
  ): Promise<IPageICommunityPlatformMember.ISummary> {
    try {
      return await patchCommunityPlatformAdminMembers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete (hard-delete) a member account from
   * community_platform_members.
   *
   * Delete a member account from the platform by its unique identifier. This
   * endpoint enables administrators to perform hard deletion (irreversible
   * removal) of a user, including all associated posts, comments, votes, and
   * subscriptions. The operation first checks admin-level authorization,
   * verifies that the member ID exists, and enforces all relational cascade
   * deletions as defined in the Prisma schema. This action is critical for
   * fulfilling account erasure and legal compliance requests.
   *
   * The operation is tightly integrated with the community_platform_members
   * table, referencing relational constraints with dependent records in the
   * communities, posts, comments, votes, subscriptions, karma, and reports
   * tables. As the Prisma schema supports a soft delete via 'deleted_at', but
   * this API implements hard deletion, the operation ensures all data is
   * unrecoverable after execution.
   *
   * Expected behavior includes proper audit logging of the action and
   * notification to all affected subsystems. Error handling is implemented for
   * non-existent IDs, insufficient permissions, and failed transactional
   * deletes. The response is empty, indicating successful erasure or returns
   * error details if unsuccessful.
   *
   * @param connection
   * @param memberId The UUID of the member to be permanently deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":memberId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminMembersMemberId({
        admin,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
