import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminReportCategories } from "../../../../providers/postCommunityPlatformAdminReportCategories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putCommunityPlatformAdminReportCategoriesReportCategoryId } from "../../../../providers/putCommunityPlatformAdminReportCategoriesReportCategoryId";
import { deleteCommunityPlatformAdminReportCategoriesReportCategoryId } from "../../../../providers/deleteCommunityPlatformAdminReportCategoriesReportCategoryId";

import { ICommunityPlatformReportCategory } from "../../../../api/structures/ICommunityPlatformReportCategory";

@Controller("/communityPlatform/admin/reportCategories")
export class CommunityplatformAdminReportcategoriesController {
  /**
   * Create a new report category for content moderation/reporting
   * (community_platform_report_categories).
   *
   * This API endpoint enables platform administrators to add a new standardized
   * report category used in content flagging throughout the platform. The
   * report category will be presented as an explicit reason in user-facing
   * reporting dialogs, supporting both compliance and analytics around
   * moderation flows.
   *
   * Permission to access this API is strictly limited to admin users, as the
   * maintenance of report categories is a critical moderation configuration
   * action. Use cases include adding categories for new types of abuse,
   * evolving legal requirements, or platform policy updates.
   *
   * All category names must be unique and human-readable, with the option to
   * permit or require users filing reports to submit additional descriptive
   * text (when allow_free_text is true). Category creation is logged for audit
   * and compliance purposes.
   *
   * Expected error conditions include attempts to create duplicate categories
   * or using disallowed category names. Resolved errors should provide
   * actionable information to the administrator regarding the naming or input
   * violation.
   *
   * @param connection
   * @param body Data for the new report category, including unique name and
   *   free-text allowance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformReportCategory.ICreate,
  ): Promise<ICommunityPlatformReportCategory> {
    try {
      return await postCommunityPlatformAdminReportCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing report category (community_platform_report_categories).
   *
   * This endpoint grants admin users the ability to update the properties of a
   * report category. Updating categories is sometimes necessary to reflect
   * evolving moderation practices, new regulatory demands, or improved
   * reporting clarity for users.
   *
   * The core attributes updatable via this endpoint are the unique name and the
   * boolean flag permitting or requiring free-text details for reports in this
   * category. All changes are verified against schema requirements—names must
   * remain unique and meaningful, and structural changes should not compromise
   * any report referencing this category.
   *
   * Changes are rigorously audited. Attempting to update with a duplicate name
   * or unauthorized modifications will return descriptive errors. This flow
   * ensures platform-wide moderation consistency and the adaptability of
   * reporting infrastructure.
   *
   * @param connection
   * @param reportCategoryId Unique identifier of the report category to update.
   * @param body Updated data for the report category (e.g., new name or
   *   allow_free_text).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reportCategoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportCategoryId")
    reportCategoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformReportCategory.IUpdate,
  ): Promise<ICommunityPlatformReportCategory> {
    try {
      return await putCommunityPlatformAdminReportCategoriesReportCategoryId({
        admin,
        reportCategoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a report category (community_platform_report_categories table) by
   * ID.
   *
   * Delete a specific report category from the set of platform-supported
   * reporting reasons. This is a permanent removal—the report category is no
   * longer available for selection when users file content reports. The
   * operation ensures data integrity by disallowing deletion if the category is
   * in use by unresolved or active reports, avoiding accidental orphaning of
   * moderation workflows or untraceable report references.
   *
   * Only users with the admin role can execute this deletion. Adequate
   * safeguards must be in place to prevent the removal of report categories
   * which might impact in-use moderation or abuse workflows. The system should
   * provide clear error feedback if deletion is denied due to referential
   * integrity checks or if the category does not exist.
   *
   * This endpoint works in conjunction with index, creation, or update
   * operations on report categories, and is vital for platform policy evolution
   * or refinement of moderation terminology. All actions must be recorded in
   * the audit logs for compliance and accountability at the administrative
   * level.
   *
   * @param connection
   * @param reportCategoryId Unique identifier of the report category to
   *   permanently remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reportCategoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("reportCategoryId")
    reportCategoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminReportCategoriesReportCategoryId(
        {
          admin,
          reportCategoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
