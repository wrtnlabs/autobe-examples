import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPlatformAdminSubscriptionsSubscriptionId } from "../../../../providers/putCommunityPlatformAdminSubscriptionsSubscriptionId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { deleteCommunityPlatformAdminSubscriptionsSubscriptionId } from "../../../../providers/deleteCommunityPlatformAdminSubscriptionsSubscriptionId";

import { ICommunityPlatformSubscription } from "../../../../api/structures/ICommunityPlatformSubscription";

@Controller("/communityPlatform/admin/subscriptions/:subscriptionId")
export class CommunityplatformAdminSubscriptionsController {
  /**
   * Update a specific community subscription record
   * (community_platform_subscriptions).
   *
   * This endpoint allows an authenticated member or an administrator to update
   * their subscription details to a specific community, identified by the
   * subscriptionId path parameter. The operation refers to the
   * community_platform_subscriptions table and supports modifications such as
   * reactivating a subscription or updating subscription-related settings.
   *
   * Only the member who owns the subscription, or an admin, is allowed to
   * update these records. Attempts by unauthorized users are rejected with
   * explicit error messages. Business logic verifies that the target
   * subscription exists, that the member is not banned from the community, and
   * that the requested changes comply with platform policy (e.g., subscription
   * limit).
   *
   * All updates are logged for audit purposes. The request body must include
   * any fields allowed for update, such as activation status or preferences,
   * following the schema for ICommunityPlatformSubscription.IUpdate. Response
   * returns the full updated subscription record as defined by
   * ICommunityPlatformSubscription.
   *
   * Related endpoints include subscribing (POST /subscriptions),
   * deleting/unsubscribing (DELETE /subscriptions/{subscriptionId}), and
   * listing current subscriptions for the member.
   *
   * @param connection
   * @param subscriptionId Unique identifier of the subscription to update
   * @param body Fields to update for the member's subscription record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformSubscription.IUpdate,
  ): Promise<ICommunityPlatformSubscription> {
    try {
      return await putCommunityPlatformAdminSubscriptionsSubscriptionId({
        admin,
        subscriptionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Unsubscribe (soft delete) a member's community subscription
   * (community_platform_subscriptions).
   *
   * This endpoint allows an authenticated member to unsubscribe from a
   * community by performing a soft delete on an existing subscription record,
   * specified by subscriptionId. The operation interacts with the
   * community_platform_subscriptions table and updates the deleted_at field
   * rather than removing the record, preserving historical and audit data.
   *
   * Access is restricted to the subscription owner or platform admins;
   * unauthorized attempts are blocked with a clear error response. Business
   * logic ensures the subscription exists, is active, and that the member is
   * not prevented from unsubscribing (e.g., due to a business restriction).
   *
   * The request does not require a body and there is no response body on
   * success. All unsubscribe events are logged and may impact personalized
   * feeds, notifications, and analytics for both the user and the community.
   * This endpoint is related to subscription creation (POST /subscriptions),
   * updating (PUT /subscriptions/{subscriptionId}), and viewing current
   * subscriptions.
   *
   * @param connection
   * @param subscriptionId Unique identifier of the subscription to delete
   *   (unsubscribe)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminSubscriptionsSubscriptionId({
        admin,
        subscriptionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
