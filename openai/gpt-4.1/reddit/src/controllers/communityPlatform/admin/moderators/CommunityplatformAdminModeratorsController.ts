import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformAdminModerators } from "../../../../providers/patchCommunityPlatformAdminModerators";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getCommunityPlatformAdminModeratorsModeratorId } from "../../../../providers/getCommunityPlatformAdminModeratorsModeratorId";
import { putCommunityPlatformAdminModeratorsModeratorId } from "../../../../providers/putCommunityPlatformAdminModeratorsModeratorId";
import { deleteCommunityPlatformAdminModeratorsModeratorId } from "../../../../providers/deleteCommunityPlatformAdminModeratorsModeratorId";

import { IPageICommunityPlatformModerator } from "../../../../api/structures/IPageICommunityPlatformModerator";
import { ICommunityPlatformModerator } from "../../../../api/structures/ICommunityPlatformModerator";

@Controller("/communityPlatform/admin/moderators")
export class CommunityplatformAdminModeratorsController {
  /**
   * List, filter, and paginate moderator assignments (from
   * community_platform_moderators).
   *
   * Retrieve a search-filtered, paginated list of community moderator
   * assignments from the system. This endpoint supports query parameters for
   * filtering by assigned community, associated member, moderator role, and
   * status, as well as sorting by assignment or update time. Designed for
   * admin-level oversight, the operation aids in identifying current and
   * historical moderator roles, auditing assignment changes, and managing
   * moderator team composition across communities.
   *
   * Security and privacy are enforced so only users with 'admin' role have
   * access to comprehensive listing. Results return basic moderator assignment
   * information as defined in the community_platform_moderators schema,
   * including references to community_id, member_id, moderator status, email,
   * and assignment timestamps. This operation is intended to provide
   * administrative visibility and support moderator management tasks,
   * escalation preparedness, and compliance reviews.
   *
   * Related API endpoints may allow filtering for a single community or member.
   * This operation focuses on platform-wide or cross-community listing for
   * supervisory roles. Appropriate error handling is in place for invalid
   * filter values, insufficient permissions, or excessive query ranges.
   * Pagination metadata is included with each response.
   *
   * @param connection
   * @param body Advanced moderator filtering, pagination, and query parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformModerator.IRequest,
  ): Promise<IPageICommunityPlatformModerator.ISummary> {
    try {
      return await patchCommunityPlatformAdminModerators({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific moderator assignment
   * (community_platform_moderators).
   *
   * Retrieve the full details for a single moderator entity by its unique UUID.
   * The moderator represents a specific assignment of moderation privileges for
   * a member in a community. This operation allows administrative or privileged
   * actors to query moderator assignments for compliance review, permission
   * tracing, or interface display.
   *
   * Moderators are tightly linked to platform members and communities. The
   * information returned includes all assigned privileges, role status, and any
   * pending suspension or deletion. Sensitive data such as passwords are
   * excluded from the response object. Authorization is required for access,
   * and the endpoint is intended for use in both admin and privileged
   * moderation UIs, as well as support tools. If the specified moderatorId does
   * not exist or has been deleted, an appropriate error response should be
   * returned.
   *
   * Security and auditing: This endpoint should be accessed only by authorized
   * roles, such as admins, or with appropriate permission checks, as moderation
   * assignments represent sensitive access rights. All retrievals are logged
   * for compliance purposes. Usage in business interfaces for adjusting or
   * displaying moderator staff lists is a primary scenario.
   *
   * @param connection
   * @param moderatorId The unique identifier (UUID) of the moderator assignment
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderatorId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformModerator> {
    try {
      return await getCommunityPlatformAdminModeratorsModeratorId({
        admin,
        moderatorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the assignment details or status for a specific moderator entry
   * (community_platform_moderators).
   *
   * Update the details of an existing moderator assignment record, referenced
   * by its UUID. This operation can be used to suspend, reinstate, or alter
   * moderator status and assignment parameters, in accordance with business
   * policy or incident review.
   *
   * Allowable updates include status, email/contact (if needed), and account
   * assignment properties. Authentication and strict permission checks are
   * enforced; typically, only administrative staff may initiate updates. The
   * request body must confirm to the update DTO and may trigger further audits
   * or notifications depending on policy.
   *
   * This operation is a hard update against the underlying database record in
   * community_platform_moderators. Change actions are recorded for
   * traceability, and workflows should handle cases where attempted updates
   * reference non-existent or deleted moderator entries. Related interfaces may
   * refresh the moderator assignment list upon successful update, ensuring UIs
   * and compliance tools reflect the latest state.
   *
   * @param connection
   * @param moderatorId The unique identifier (UUID) of the moderator assignment
   *   to update.
   * @param body Data fields required to update the moderator assignment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderatorId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformModerator.IUpdate,
  ): Promise<ICommunityPlatformModerator> {
    try {
      return await putCommunityPlatformAdminModeratorsModeratorId({
        admin,
        moderatorId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a moderator assignment by its ID
   * (community_platform_moderators table).
   *
   * This operation offers administrators the ability to permanently delete a
   * moderator entity from the platform. The community_platform_moderators
   * schema associates each moderator to a member, an assigned community, and
   * other metadata used by escalation and policy enforcement. By accessing this
   * endpoint, an administrator can revoke a moderator's control over a given
   * community, which is useful in disciplinary scenarios, moderator retirement,
   * or as part of community restructuring.
   *
   * The operation enforces strict role-based access control: only users with
   * the 'admin' role can execute deletions. The endpoint consumes a moderatorId
   * as a path parameter, referencing the primary key of the moderator
   * assignment to target. Upon successful invocation, the moderator record is
   * removed from the database and is no longer valid for authentication, and
   * related audit logs should record the actor, action, and targeted
   * moderator.
   *
   * Care should be taken to understand cascade behaviors: removal does not
   * automatically remove the member's basic account, nor does it reassess
   * community-level permissions unless additional business rules specify this.
   * All changes associated with deleting the moderator (e.g., removal from
   * moderation queues, reports, or community assignments) must be handled by
   * the related business workflows, ideally via post-delete hooks or batch
   * reconciliation to preserve data integrity and traceability for compliance.
   * System will return confirmation of deletion or error if the target
   * identifier is not found.
   *
   * @param connection
   * @param moderatorId Unique identifier for the moderator to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderatorId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminModeratorsModeratorId({
        admin,
        moderatorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
