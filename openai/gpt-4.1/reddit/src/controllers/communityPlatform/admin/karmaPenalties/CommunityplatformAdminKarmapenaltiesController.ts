import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminKarmaPenalties } from "../../../../providers/postCommunityPlatformAdminKarmaPenalties";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchCommunityPlatformAdminKarmaPenalties } from "../../../../providers/patchCommunityPlatformAdminKarmaPenalties";
import { getCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId } from "../../../../providers/getCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId";
import { putCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId } from "../../../../providers/putCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId";
import { deleteCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId } from "../../../../providers/deleteCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId";

import { ICommunityPlatformKarmaPenalty } from "../../../../api/structures/ICommunityPlatformKarmaPenalty";
import { IPageICommunityPlatformKarmaPenalty } from "../../../../api/structures/IPageICommunityPlatformKarmaPenalty";

@Controller("/communityPlatform/admin/karmaPenalties")
export class CommunityplatformAdminKarmapenaltiesController {
  /**
   * Create a karma penalty for a member (admin/moderator only,
   * community_platform_karma_penalties table).
   *
   * Use this API to impose a karma penalty on a user. Moderators and admins may
   * call this endpoint after reviewing violations, confirmed abuse, or as part
   * of escalation. All penalty types (deduction, suspension, etc.) must comply
   * with bounds set by platform policy. The penalty is applied immediately, and
   * the affected user's karma will be updated per the business logic and
   * referenced in their profile and permissions-checks. All penalty assignments
   * are logged for audit and compliance visibility.
   *
   * Only members with appropriate role and valid authentication may call this
   * API, typically from the moderation console, not by ordinary users. Attempts
   * to create penalties exceeding allowed limits or with invalid parameters
   * will result in clear error messages with reason codes. Related endpoints
   * include the karma ledger for current state and penalties/query for user
   * history.
   *
   * @param connection
   * @param body Karma penalty creation payload conforming to required fields
   *   (member, penalty type, value, reason, optional community scope)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaPenalty.ICreate,
  ): Promise<ICommunityPlatformKarmaPenalty> {
    try {
      return await postCommunityPlatformAdminKarmaPenalties({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of karma penalties
   * (community_platform_karma_penalties).
   *
   * Retrieve a filtered, paginated list of karma penalties assigned to platform
   * members. This operation supports advanced filtering on penalty type,
   * status, member, community, or time range, making it suitable for reviewing
   * moderation actions, account restrictions, or penalty analytics.
   *
   * Security considerations: This endpoint is intended for administrative or
   * moderation use due to sensitive enforcement data. Access should be
   * permitted only to roles responsible for user sanctions and moderation
   * policy. Data returned is restricted to authorized actors and must adhere to
   * privacy and audit guidelines.
   *
   * This operation interacts directly with the
   * community_platform_karma_penalties table, providing all penalty fields,
   * relations to members and communities, and relevant metadata for each
   * penalty record. It supports pagination, sorting, and search. Potential
   * dependencies include user/member lookup APIs for context enrichment. Error
   * handling covers invalid filters, permission denial, and data access
   * violations.
   *
   * @param connection
   * @param body Criteria, filters, pagination, and sorting options for listing
   *   karma penalties.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaPenalty.IRequest,
  ): Promise<IPageICommunityPlatformKarmaPenalty.ISummary> {
    try {
      return await patchCommunityPlatformAdminKarmaPenalties({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific karma penalty
   * (community_platform_karma_penalties) by ID.
   *
   * Fetch detailed information for a specific karma penalty assigned to a
   * platform member. Returns all penalty attributes, including references to
   * the associated member, optional community context, penalty type (deduction,
   * suspension, etc.), status, value, reason, time span, and soft deletion flag
   * if applicable.
   *
   * This operation is designed for use by administrators and moderators who
   * require access to enforcement details for audit, user account
   * interventions, or appeals. Unauthorized users are denied access due to the
   * privacy and sensitivity of sanction information. Related APIs may include
   * member lookups or community reference endpoints for context.
   *
   * Error handling includes not found (invalid or revoked ID), permission
   * denial, and attempt to access penalties outside the user's moderation
   * scope.
   *
   * @param connection
   * @param karmaPenaltyId Unique identifier of the target karma penalty record
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":karmaPenaltyId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaPenaltyId")
    karmaPenaltyId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformKarmaPenalty> {
    try {
      return await getCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId({
        admin,
        karmaPenaltyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing karma penalty by ID (admin/moderator only,
   * community_platform_karma_penalties table).
   *
   * This endpoint enables a privileged user to update an existing karma penalty
   * imposed on a member. Typical use cases include completing a manual review,
   * reactivating, expiring, or revoking a penalty, or correcting errors from
   * prior entries. All updates are strictly validatedâ€”certain fields such as
   * penalty status, penalty value, and expiration can be changed under policy.
   * The operation logs the change for compliance and notifies affected users as
   * prescribed by the business flow.
   *
   * Only users with proper administrative or moderation role may call this.
   * Errors due to unauthorized access, transition to invalid penalty states, or
   * attempts to edit immutable fields will be met with informative error
   * responses recorded in the audit log. Related operations include penalty
   * history and ledger queries.
   *
   * @param connection
   * @param karmaPenaltyId Unique identifier for the karma penalty record to
   *   update
   * @param body Update data for the karma penalty (fields allowed by business
   *   policy)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":karmaPenaltyId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaPenaltyId")
    karmaPenaltyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformKarmaPenalty.IUpdate,
  ): Promise<ICommunityPlatformKarmaPenalty> {
    try {
      return await putCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId({
        admin,
        karmaPenaltyId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a karma penalty from the
   * community_platform_karma_penalties table by ID.
   *
   * This API endpoint enables authorized administrative actors to permanently
   * delete a karma penalty entry from the system. The primary use case is to
   * remove penalties that were incorrectly imposed or should be lifted ahead of
   * automatic expiration. The operation directly references the
   * 'community_platform_karma_penalties' table, with 'id' serving as the unique
   * identifier for deletion.
   *
   * Security restrictions are strictly enforced: only users with 'admin' or
   * designated 'moderator' roles can invoke this endpoint. A full audit log of
   * the action should be maintained separately for compliance. No soft-delete
   * or reversible behavior is provided, as 'deleted_at' is for logical deletion
   * and here actual removal is intended per admin/moderator intent.
   *
   * Care must be taken to ensure the referenced penalty still exists and has
   * not previously been deleted or revoked. The system should handle and
   * communicate errors such as 'penalty not found' or 'already deleted.' No
   * request or response body is returned aside from standard success/error
   * signaling.
   *
   * @param connection
   * @param karmaPenaltyId Unique identifier of the karma penalty to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":karmaPenaltyId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaPenaltyId")
    karmaPenaltyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminKarmaPenaltiesKarmaPenaltyId({
        admin,
        karmaPenaltyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
