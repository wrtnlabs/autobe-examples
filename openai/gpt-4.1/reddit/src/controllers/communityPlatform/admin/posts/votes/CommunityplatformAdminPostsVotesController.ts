import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformAdminPostsPostIdVotes } from "../../../../../providers/patchCommunityPlatformAdminPostsPostIdVotes";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getCommunityPlatformAdminPostsPostIdVotesVoteId } from "../../../../../providers/getCommunityPlatformAdminPostsPostIdVotesVoteId";
import { deleteCommunityPlatformAdminPostsPostIdVotesVoteId } from "../../../../../providers/deleteCommunityPlatformAdminPostsPostIdVotesVoteId";

import { IPageICommunityPlatformPostVote } from "../../../../../api/structures/IPageICommunityPlatformPostVote";
import { ICommunityPlatformPostVote } from "../../../../../api/structures/ICommunityPlatformPostVote";

@Controller("/communityPlatform/admin/posts/:postId/votes")
export class CommunityplatformAdminPostsVotesController {
  /**
   * Retrieve the paginated list of all votes cast on a specific post from the
   * community_platform_post_votes table.
   *
   * This API operation lets a caller retrieve all voting records applied to a
   * single post, designated by the post's unique identifier. It provides the
   * full transaction history for upvotes and downvotes, referencing the fields
   * from community_platform_post_votes such as vote_value, created_at,
   * updated_at, deleted_at, and the associated user ID.
   *
   * Access control for this endpoint typically restricts listing votes to
   * moderators (for auditing) or to the post owner for self-view; in some
   * regulatory contexts, admin access may be required for full transparency.
   * The Prisma schema ensures referential integrity, linking post IDs to
   * members and making every vote traceable. Voting logs foster accountability,
   * allowing detection of anomalous voting patterns or enforcing anti-abuse
   * measures.
   *
   * Returned results are paginated and may include details such as voter ID
   * (linked to community_platform_members), vote direction (+1 for upvote, -1
   * for downvote), creation and update timestamps, and soft deletion state for
   * revoked votes. The response supports moderation UI, post audit logs, or
   * advanced analytical dashboards. If the requested postId does not exist, is
   * inaccessible, or if the user is unauthorized for viewing votes, the system
   * will return appropriate error messages or an empty list.
   *
   * @param connection
   * @param postId The unique identifier of the post for which votes will be
   *   listed.
   * @param body Criteria for filtering, sorting, and paginating vote records
   *   for a specific post. Includes order, filters, and page specification.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostVote.IRequest,
  ): Promise<IPageICommunityPlatformPostVote> {
    try {
      return await patchCommunityPlatformAdminPostsPostIdVotes({
        admin,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single vote record for a post from the
   * community_platform_post_votes table using postId and voteId.
   *
   * This endpoint allows callers to view detailed information for a single vote
   * transaction on a post. The operation accepts both postId and voteId as path
   * parameters, ensuring the vote belongs to the specified post. The response
   * includes all key fields of a community_platform_post_votes record:
   * vote_value (+1 or -1), referenced member ID, creation and update
   * timestamps, and soft deletion state. This enables complete auditability and
   * transparency into voting actions on posts.
   *
   * Authorization for this endpoint is typically limited to moderators (for
   * community audit), admins (for compliance), and the vote owner for personal
   * review. The response readily supports moderation workflows, anti-abuse
   * investigations, or member-facing UIs showing voting history. Error handling
   * covers invalid IDs, non-existent records, or unauthorized access attempts,
   * returning appropriate messages or status codes in such cases.
   *
   * This operation leverages the full referential integrity of the voting
   * records in the Prisma model and ties each vote record to both its post and
   * casting member for fully traceable voting history.
   *
   * @param connection
   * @param postId The unique identifier of the post to which the vote belongs.
   * @param voteId The unique identifier of the vote record for the target post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":voteId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostVote> {
    try {
      return await getCommunityPlatformAdminPostsPostIdVotesVoteId({
        admin,
        postId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a specific user's vote from a given post
   * (community_platform_post_votes).
   *
   * This API endpoint enables users to remove their explicit upvote or downvote
   * from a specific post. It is intended for situations where the user wishes
   * to retract their previous voting actionâ€”such as changing their mind or
   * correcting a mis-click.
   *
   * The operation checks that the voteId belongs to a valid vote entry for the
   * indicated postId and verifies the requesting user's authority. If the
   * requester is not the original voter, but holds a moderator or admin role
   * with the appropriate permissions within the target post's community (or at
   * the platform level), deletion is allowed for moderation or abuse response.
   *
   * Votes are soft-deleted if the schema supports it (see
   * community_platform_post_votes.deleted_at); otherwise, they are permanently
   * removed from the database. Following deletion, the system will trigger
   * recalculation of the associated post's score, update the karma for the
   * voter, and audit-log the activity for review.
   *
   * Errors are returned in the following situations: the vote is not found,
   * belongs to another user without escalation rights, or the vote is already
   * deleted. Rate-limiting is enforced to prevent abuse, particularly by
   * automated (bot) clients.
   *
   * Related business functions include the POST and PATCH vote endpoints for
   * casting or changing a vote, and analytics/sorting recalculation flows for
   * post rankings and user karma.
   *
   * @param connection
   * @param postId Unique identifier of the post on which the vote was cast
   * @param voteId Unique identifier of the vote entry to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminPostsPostIdVotesVoteId({
        admin,
        postId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
