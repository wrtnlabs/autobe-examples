import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminBannedWords } from "../../../../providers/postCommunityPlatformAdminBannedWords";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchCommunityPlatformAdminBannedWords } from "../../../../providers/patchCommunityPlatformAdminBannedWords";
import { getCommunityPlatformAdminBannedWordsBannedWordId } from "../../../../providers/getCommunityPlatformAdminBannedWordsBannedWordId";
import { putCommunityPlatformAdminBannedWordsBannedWordId } from "../../../../providers/putCommunityPlatformAdminBannedWordsBannedWordId";
import { deleteCommunityPlatformAdminBannedWordsBannedWordId } from "../../../../providers/deleteCommunityPlatformAdminBannedWordsBannedWordId";

import { ICommunityPlatformBannedWord } from "../../../../api/structures/ICommunityPlatformBannedWord";
import { IPageICommunityPlatformBannedWord } from "../../../../api/structures/IPageICommunityPlatformBannedWord";
import { ICommunityPlatformBannedWords } from "../../../../api/structures/ICommunityPlatformBannedWords";

@Controller("/communityPlatform/admin/bannedWords")
export class CommunityplatformAdminBannedwordsController {
  /**
   * Add a new banned word or phrase for platform content policy enforcement
   * (community_platform_banned_words).
   *
   * Create a new entry in the platform-wide banned words list for moderation
   * and automated filtering. This function is vital for enabling timely
   * response to emerging content issues, community policy changes, or new
   * regulatory requirements that dictate the prohibition of specific terms or
   * phrases.
   *
   * The operation supports full audit logging of who enacts the ban and why,
   * relying on Prisma schema enforcement for word uniqueness and optional
   * reason entry. It only allows users with administrative permissions to add
   * or activate banned words, preventing unauthorized curation of moderation
   * policy. Validation includes word uniqueness, proper formatting, and
   * optional rational explanation for later reference or appeal.
   *
   * If the word already exists (even if soft-deleted), an error is returned
   * specifying the conflict, and all business logic aligns with the moderation
   * audit trail. Error scenarios cover authorization failures, validation
   * errors, and attempts to introduce banned words that contradict platform
   * guidelines.
   *
   * @param connection
   * @param body Details of the new banned word to create, including word,
   *   enforcement status, and explanatory reason.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformBannedWord.ICreate,
  ): Promise<ICommunityPlatformBannedWord> {
    try {
      return await postCommunityPlatformAdminBannedWords({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered and paginated list of all banned words
   * (community_platform_banned_words table).
   *
   * Search the list of banned words or phrases, filtering by keyword,
   * enforcement status, or reason. Allows platform administrators to easily
   * maintain, review, and audit banned terms for content moderation and policy
   * compliance.
   *
   * Administrators may use this endpoint to search for banned words by partial
   * matches, sort the results by date of creation or update, filter by current
   * enforcement status (active/inactive), and understand the reasoning for each
   * banned word entry, which is essential for compliance and transparency.
   *
   * The data returned includes details such as the banned word, the reason for
   * its prohibition, enforcement status, timestamps, and, if present, a record
   * of soft-deleted entries. Rate limiting and authorization apply; only
   * administrative users should have access due to the policy-sensitive nature
   * of this data. Related operations include adding, updating, or deleting
   * banned words, which are handled by separate endpoints.
   *
   * @param connection
   * @param body Filter, sorting, and pagination parameters for searching banned
   *   words.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformBannedWord.IRequest,
  ): Promise<IPageICommunityPlatformBannedWord> {
    try {
      return await patchCommunityPlatformAdminBannedWords({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific banned word for moderation policy review
   * (community_platform_banned_words).
   *
   * Retrieve detailed information about a particular banned word by its unique
   * identifier. This is useful for moderation and administrative purposes where
   * understanding the word, reasoning for its entry in the ban list, and its
   * enforcement status (active or soft-deleted) is needed.
   *
   * Security controls restrict access to only users with administrative rights
   * or elevated moderation roles since the banned words list governs sensitive
   * moderation logic and policy enforcement. The endpoint provides full
   * details, including the rationale (reason), when the ban was enacted or
   * removed (deleted_at), and any accompanying metadata for compliance, review,
   * or appeals.
   *
   * It operates directly against the 'community_platform_banned_words' table as
   * outlined in the Prisma schema, ensuring all returned fields correspond to
   * that structure. Error handling covers forbidden access (insufficient
   * permissions), non-existent identifiers (word not found), and attempts to
   * view banned words that are not available to the callerâ€™s role (in the case
   * of soft-deleted entries).
   *
   * @param connection
   * @param bannedWordId Unique identifier of the banned word entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":bannedWordId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("bannedWordId")
    bannedWordId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformBannedWord> {
    try {
      return await getCommunityPlatformAdminBannedWordsBannedWordId({
        admin,
        bannedWordId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a platform-wide banned word entry for content moderation
   * (community_platform_banned_words).
   *
   * Update a banned word entry for the platform's content moderation system.
   * Banned words are used by the system to filter and prevent submission of
   * prohibited content across posts, comments, and other user inputs.
   * Administrators can use this endpoint to change the prohibited word or
   * phrase, adjust its enforcement status, and alter or add rationale for why
   * it is banned.
   *
   * Platform policy requires all changes to banned words to be logged and
   * auditable, supporting compliance with moderation transparency. Updating a
   * banned word may include activating or deactivating the enforcement, and
   * modifying the reason message displayed to users on violation attempts.
   *
   * The operation validates uniqueness (case-insensitive) for word updates and
   * ensures that reactivation or deactivation is immediately propagated to all
   * moderation flows. Only users with administrative privileges are authorized
   * to perform this operation. Changes take effect immediately across the
   * platform. If the word is already in use as a banned word for another entry,
   * a conflict error will be returned. All input fields must adhere to
   * character length and format constraints as defined by the Prisma schema.
   *
   * @param connection
   * @param bannedWordId Unique identifier of the banned word entry to update.
   * @param body Updated banned word information to be applied to the record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":bannedWordId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("bannedWordId")
    bannedWordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformBannedWords.IUpdate,
  ): Promise<ICommunityPlatformBannedWords> {
    try {
      return await putCommunityPlatformAdminBannedWordsBannedWordId({
        admin,
        bannedWordId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a platform-wide banned word entry
   * (community_platform_banned_words).
   *
   * Remove a banned word from the system's prohibited content list. Once a
   * banned word is deleted, it is no longer enforced by moderation filters, and
   * its usage may become permissible for all platform users in posts, comments,
   * and any user-submitted fields.
   *
   * Deleting a banned word is a hard-delete operation, which means the entry is
   * permanently removed from the database (community_platform_banned_words),
   * erasing all historical moderation controls associated with that word or
   * phrase. This operation is exclusively available to admin users due to the
   * impact on community safety and moderation effectiveness.
   *
   * Upon completion, the system instantly ceases enforcement of the removed
   * word across all content moderation and validation flows. If an invalid or
   * non-existent banned word ID is specified, an error is returned.
   * Administrators should ensure policy and moderation staff are informed of
   * such changes. No response body is returned for a successful deletion;
   * errors are handled per platform standard error response structure.
   *
   * @param connection
   * @param bannedWordId Unique identifier of the banned word entry to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bannedWordId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("bannedWordId")
    bannedWordId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminBannedWordsBannedWordId({
        admin,
        bannedWordId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
