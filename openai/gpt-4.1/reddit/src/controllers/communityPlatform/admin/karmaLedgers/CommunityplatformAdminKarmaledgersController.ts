import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminKarmaLedgers } from "../../../../providers/postCommunityPlatformAdminKarmaLedgers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchCommunityPlatformAdminKarmaLedgers } from "../../../../providers/patchCommunityPlatformAdminKarmaLedgers";
import { putCommunityPlatformAdminKarmaLedgersKarmaLedgerId } from "../../../../providers/putCommunityPlatformAdminKarmaLedgersKarmaLedgerId";
import { deleteCommunityPlatformAdminKarmaLedgersKarmaLedgerId } from "../../../../providers/deleteCommunityPlatformAdminKarmaLedgersKarmaLedgerId";

import { ICommunityPlatformKarmaLedger } from "../../../../api/structures/ICommunityPlatformKarmaLedger";
import { IPageICommunityPlatformKarmaLedger } from "../../../../api/structures/IPageICommunityPlatformKarmaLedger";

@Controller("/communityPlatform/admin/karmaLedgers")
export class CommunityplatformAdminKarmaledgersController {
  /**
   * Create a karma ledger entry for a member (optionally per-community) via
   * community_platform_karma_ledgers.
   *
   * Creates a new karma ledger record, initializing point balances
   * (current_karma field) for a member either platform-wide or scoped to a
   * given community. Reserved for 'admin' operations, not general users.
   * Request requires member_id, may specify a community_id, with constraints
   * enforced. Fails if entry exists for member/community pair. Successful
   * response returns the new ledger entry.
   *
   * @param connection
   * @param body Creation details: member UUID, optional community UUID,
   *   business context for new ledger
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaLedger.ICreate,
  ): Promise<ICommunityPlatformKarmaLedger> {
    try {
      return await postCommunityPlatformAdminKarmaLedgers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate karma ledgers
   * (community_platform_karma_ledgers).
   *
   * Retrieve a paginated, filterable list of karma ledgers representing the
   * current karma state for members across the platform and per community. Use
   * advanced query capabilities to filter on member ID, community, and
   * currentKarma ranges. This operation provides supporting information for
   * profile pages, admin dashboards, and feature access audits.
   *
   * The operation returns a paginated result set, enabling large-scale analysis
   * as well as individual lookups. Security must restrict broad access to admin
   * roles or, where applicable, allow members to view only their own records.
   * The endpoint is not intended for bulk mutation of karma but serves as a
   * read access point for score analysis, moderation, or feature gating based
   * on business rules.
   *
   * The response object must follow the paginated response standard, using
   * summary DTOs relevant to karma ledgers, and must avoid exposing sensitive
   * or irrelevant member data. Integrate with index or search endpoints for
   * members as appropriate for context and drilldown capabilities.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for karma ledger
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaLedger.IRequest,
  ): Promise<IPageICommunityPlatformKarmaLedger.ISummary> {
    try {
      return await patchCommunityPlatformAdminKarmaLedgers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing karma ledger entry for a member or community
   * (community_platform_karma_ledgers table).
   *
   * Update a specific karma ledger entry for a member, either globally or for a
   * specific community, allowing changes to the current_karma value,
   * feature_lock_reason, or associated timestamps.
   *
   * The primary business use cases include administrator-initiated corrections
   * for karma miscalculation, granting exceptions, or enforcing disciplinary
   * adjustments outside of standard voting workflows. Only high-privilege roles
   * (e.g., admin) should be permitted to modify a user's karma via this
   * endpoint, as improper changes could affect important access controls or
   * platform integrity.
   *
   * This operation interfaces with the community_platform_karma_ledgers table
   * as described in the Prisma schema. Each record ties a member's ID to either
   * a global or per-community karma context, with 'current_karma' and a
   * possible 'feature_lock_reason'.
   *
   * All updates must be fully validated: negative karma is possible (per
   * policy), but setting values should respect business policies (not allow
   * uncontrolled inflation/deflation unless intended). Each update should be
   * logged via the community_platform_audit_logs table for traceability.
   *
   * Error handling considerations include invalid ledger IDs, updates to
   * non-existent or deleted ledgers, or attempts to overwrite with disallowed
   * values per policy.
   *
   * @param connection
   * @param karmaLedgerId Unique identifier of the karma ledger record to be
   *   updated.
   * @param body Update fields for the given karma ledger (current_karma,
   *   reason, timestamps, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":karmaLedgerId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaLedgerId")
    karmaLedgerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformKarmaLedger.IUpdate,
  ): Promise<ICommunityPlatformKarmaLedger> {
    try {
      return await putCommunityPlatformAdminKarmaLedgersKarmaLedgerId({
        admin,
        karmaLedgerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove (hard delete) a karma ledger from the
   * community_platform_karma_ledgers table by ID.
   *
   * Delete a specific karma ledger entry for a user, either globally or for a
   * community, from the community_platform_karma_ledgers table.
   *
   * Permanently removing a ledger disables associated feature or policy gating
   * checks for that member in the relevant context. This operation is typically
   * used for manual correction in rare circumstances or as part of account
   * purging processes. Only admins should be allowed to perform hard deletions
   * due to the risk of breaking business logic that depends on karma for
   * feature gating or permission controls.
   *
   * This is a hard delete according to the Prisma schemaâ€”no soft delete or
   * recovery mechanism exists. Once removed, all information about the
   * current_karma and feature lock reason is lost, with the change ideally
   * logged in system audit logs for compliance.
   *
   * Handling of invalid IDs, non-existent targets, or already-purged ledgers
   * should return proper error messages. The action should be auditable by
   * referencing an associated log entry in admin workflows.
   *
   * @param connection
   * @param karmaLedgerId Unique identifier of the target karma ledger to
   *   remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":karmaLedgerId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaLedgerId")
    karmaLedgerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminKarmaLedgersKarmaLedgerId({
        admin,
        karmaLedgerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
