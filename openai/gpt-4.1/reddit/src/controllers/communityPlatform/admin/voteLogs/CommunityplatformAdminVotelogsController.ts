import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchCommunityPlatformAdminVoteLogs } from "../../../../providers/patchCommunityPlatformAdminVoteLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IPageICommunityPlatformVoteLog } from "../../../../api/structures/IPageICommunityPlatformVoteLog";
import { ICommunityPlatformVoteLog } from "../../../../api/structures/ICommunityPlatformVoteLog";

@Controller("/communityPlatform/admin/voteLogs")
export class CommunityplatformAdminVotelogsController {
  /**
   * Search voting logs for auditing and moderation, based on
   * community_platform_vote_logs.
   *
   * This API is designed to retrieve a paginated and filterable list of voting
   * activity logs as stored in the community_platform_vote_logs table. Voting
   * logs include every upvote, downvote, vote revocation, along with associated
   * member IDs, content IDs (post or comment), device/IP information, action
   * status (success, duplicate, revoked, error), and timestamp of the action.
   *
   * Access to this API is restricted to administrators and community moderators
   * for anti-abuse investigation, trend analysis, and audit trail compliance.
   * Unauthorized access should be strictly blocked. The response provides full
   * context records, which may be joined with member/post/comment details for
   * comprehensive moderation review. Usage of this endpoint is expected during
   * routine compliance audits and whenever suspicious or rule-breaking voting
   * behavior is reported or detected.
   *
   * Filtering options should include member ID, vote type (post/comment),
   * action status, date/time windows, affected content, and optionally
   * device/IP fields for forensics. Results are paginated for efficiency,
   * supporting cursor or offset-based pagination as needed, with total record
   * count included. This endpoint may be heavily rate-limited and carefully
   * logged for regulatory/trust & safety reasons.
   *
   * @param connection
   * @param body Search, filter, and pagination input for vote logs. Includes
   *   filters for member, content, vote type/value, action, and time window.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformVoteLog.IRequest,
  ): Promise<IPageICommunityPlatformVoteLog> {
    try {
      return await patchCommunityPlatformAdminVoteLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
