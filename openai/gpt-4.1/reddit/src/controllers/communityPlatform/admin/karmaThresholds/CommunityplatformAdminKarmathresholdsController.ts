import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminKarmaThresholds } from "../../../../providers/postCommunityPlatformAdminKarmaThresholds";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchCommunityPlatformAdminKarmaThresholds } from "../../../../providers/patchCommunityPlatformAdminKarmaThresholds";
import { getCommunityPlatformAdminKarmaThresholdsKarmaThresholdId } from "../../../../providers/getCommunityPlatformAdminKarmaThresholdsKarmaThresholdId";
import { putCommunityPlatformAdminKarmaThresholdsKarmaThresholdId } from "../../../../providers/putCommunityPlatformAdminKarmaThresholdsKarmaThresholdId";
import { deleteCommunityPlatformAdminKarmaThresholdsKarmaThresholdId } from "../../../../providers/deleteCommunityPlatformAdminKarmaThresholdsKarmaThresholdId";

import { ICommunityPlatformKarmaThresholds } from "../../../../api/structures/ICommunityPlatformKarmaThresholds";
import { IPageICommunityPlatformKarmaThreshold } from "../../../../api/structures/IPageICommunityPlatformKarmaThreshold";
import { ICommunityPlatformKarmaThreshold } from "../../../../api/structures/ICommunityPlatformKarmaThreshold";

@Controller("/communityPlatform/admin/karmaThresholds")
export class CommunityplatformAdminKarmathresholdsController {
  /**
   * Create a new karma threshold configuration
   * (community_platform_karma_thresholds).
   *
   * Create a new karma threshold setting to control feature access on the
   * platform or within a community. This API is utilized by administrators or
   * platform operators to set the minimum karma required to perform key actions
   * (e.g., post creation, voting, or unlocking features) by specifying
   * threshold_type, threshold_value, community ID (if applicable), and any
   * additional lock reason.
   *
   * Upon successful creation, the operation stores the record in the
   * community_platform_karma_thresholds table and returns the newly created
   * object. Incoming requests are validated for duplicates (unique threshold
   * types per community), reasonable karma values, and valid associations to
   * existing communities. Access is restricted to platform administrators, and
   * audit logs are generated for compliance.
   *
   * Errors may be returned if validation, uniqueness, or referencing
   * constraints are violated, such as attempting to set multiple thresholds of
   * the same type for a community or specifying a non-existent community.
   * Related API operations include updating or deleting threshold
   * configurations as feature policies change.
   *
   * @param connection
   * @param body Information needed to create a new karma threshold, including
   *   required karma value, feature type, lock reason, and (optional) target
   *   community
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaThresholds.ICreate,
  ): Promise<ICommunityPlatformKarmaThresholds> {
    try {
      return await postCommunityPlatformAdminKarmaThresholds({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated karma threshold definitions.
   *
   * This operation enables admins to search the list of karma thresholds, which
   * control gating/unlocking of features based on user community or global
   * karma scores. Supported filters may include threshold type (such as
   * 'post_creation', 'comment_voting'), target community, or global thresholds.
   * Pagination and sorting parameters are included in the request body for
   * efficient querying of potentially large datasets.
   *
   * This operation interacts with the community_platform_karma_thresholds table
   * as described in the Prisma schema documentation. It is used to configure
   * and audit platform or community rules regarding karma-gated features.
   * Errors are handled for invalid queries or access by unauthorized roles.
   * Only platform administrators are permitted to perform this operation,
   * protecting the integrity of feature gating.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination criteria for karma
   *   thresholds search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaThreshold.IRequest,
  ): Promise<IPageICommunityPlatformKarmaThreshold> {
    try {
      return await patchCommunityPlatformAdminKarmaThresholds({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific community karma threshold configuration
   * (community_platform_karma_thresholds).
   *
   * Retrieve the details of a single karma threshold configuration for the
   * platform or a specific community. This operation provides full information
   * about the threshold requirement, such as the threshold type (e.g.,
   * post_creation, comment_voting), required karma value, and optional feature
   * lock reason for feature gating.
   *
   * The API is used by frontend and backend services to enforce permissions or
   * display feature requirements to users. Only authorized roles with access to
   * platform settings or moderation features can access this information if the
   * threshold is configured as private. The karma threshold belongs to the
   * community_platform_karma_thresholds table, using a UUID identifier for
   * lookup.
   *
   * If the requested karmaThresholdId does not exist or is not accessible by
   * the current user role, the operation will return an appropriate error. No
   * sensitive or internal data is exposed; response contains only
   * public-meaningful configuration details. This operation is often coupled
   * with update or creation endpoints for administrative or moderation
   * workflows.
   *
   * @param connection
   * @param karmaThresholdId The unique identifier (UUID) of the target karma
   *   threshold configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":karmaThresholdId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaThresholdId")
    karmaThresholdId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformKarmaThresholds> {
    try {
      return await getCommunityPlatformAdminKarmaThresholdsKarmaThresholdId({
        admin,
        karmaThresholdId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a karma threshold entry in the community_platform_karma_thresholds
   * table by its ID.
   *
   * Update an existing karma threshold by its unique identifier. The
   * karma_platform_karma_thresholds table manages configurable thresholds for
   * karma-based restrictions, such as limitations on posting, voting, or
   * community actions.
   *
   * This operation is restricted to admin users, who have the authority to
   * modify thresholds that impact platform permissions. Appropriate validation
   * should ensure updated threshold values are within allowed business
   * constraints, do not create duplicate entries within the same scope (global
   * or community), and that required fields are present. The system must reject
   * updates that would violate platform policy or create inconsistencies.
   *
   * Upon successful update, the complete threshold entry is returned for client
   * validation and audit purposes. Error handling must provide informative
   * feedback for any rejected update attempts, specifying constraint violations
   * or business rule failures encountered.
   *
   * @param connection
   * @param karmaThresholdId Unique identifier of the karma threshold setting to
   *   update.
   * @param body The set of fields to update on the specified karma threshold.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":karmaThresholdId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaThresholdId")
    karmaThresholdId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformKarmaThreshold.IUpdate,
  ): Promise<ICommunityPlatformKarmaThreshold> {
    try {
      return await putCommunityPlatformAdminKarmaThresholdsKarmaThresholdId({
        admin,
        karmaThresholdId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a karma threshold entry from the community_platform_karma_thresholds
   * table by its unique ID (hard delete).
   *
   * Permanently remove an existing karma threshold configuration from the
   * database by its unique ID. The community_platform_karma_thresholds table
   * stores minimum karma requirements for actions such as posting or
   * subscribing.
   *
   * This operation supports platform reconfiguration and policy evolution,
   * allowing the removal of obsolete or unnecessary feature gates. Admin-only
   * access ensures proper auditing and authority. There is no soft-delete for
   * this table, so once deleted, the record and its associated settings are
   * unrecoverable.
   *
   * Care should be taken to ensure that deletion does not cause users to bypass
   * necessary restrictions or break downstream business logic; potentially
   * critical rules should be confirmed prior to deletion. Error handling must
   * cover cases where the target threshold does not exist or is already
   * deleted, with clear, non-ambiguous error responses.
   *
   * @param connection
   * @param karmaThresholdId Unique identifier of the karma threshold setting to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":karmaThresholdId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaThresholdId")
    karmaThresholdId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminKarmaThresholdsKarmaThresholdId({
        admin,
        karmaThresholdId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
