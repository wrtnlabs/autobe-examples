import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminKarmaAwards } from "../../../../providers/postCommunityPlatformAdminKarmaAwards";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchCommunityPlatformAdminKarmaAwards } from "../../../../providers/patchCommunityPlatformAdminKarmaAwards";
import { getCommunityPlatformAdminKarmaAwardsKarmaAwardId } from "../../../../providers/getCommunityPlatformAdminKarmaAwardsKarmaAwardId";
import { putCommunityPlatformAdminKarmaAwardsKarmaAwardId } from "../../../../providers/putCommunityPlatformAdminKarmaAwardsKarmaAwardId";
import { deleteCommunityPlatformAdminKarmaAwardsKarmaAwardId } from "../../../../providers/deleteCommunityPlatformAdminKarmaAwardsKarmaAwardId";

import { ICommunityPlatformKarmaAward } from "../../../../api/structures/ICommunityPlatformKarmaAward";
import { IPageICommunityPlatformKarmaAward } from "../../../../api/structures/IPageICommunityPlatformKarmaAward";

@Controller("/communityPlatform/admin/karmaAwards")
export class CommunityplatformAdminKarmaawardsController {
  /**
   * Create a new karma award record for a member
   * (community_platform_karma_awards table).
   *
   * Create a new karma award for a member. This operation inserts a new record
   * into the community_platform_karma_awards table, which tracks platform and
   * community-specific recognition (e.g., badges or awards) for user
   * achievements.
   *
   * Authorized actors for this operation include admins or trusted automation,
   * since it affects the display of official achievements and is subject to
   * strict business and audit rules. The operation accepts all required fields
   * (member, optional community, award type, reason/description, and event
   * time). The backend must validate that the member exists and optionally
   * check that a valid community is referenced for community-specific awards.
   *
   * Successful creation returns the full karma award record. If required
   * validation fails (e.g., member not found, invalid award_type, or improper
   * permissions), the operation should return detailed, actionable error
   * messages and log the event for audit compliance.
   *
   * This API complements member achievement flows and may trigger UI updates in
   * user profiles or award notifications. Related operations include
   * editing/updating awards or viewing accumulative karma summaries by
   * member/community.
   *
   * @param connection
   * @param body Information required to create a new karma award (member,
   *   optional community, award_type, event time, optional reason)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaAward.ICreate,
  ): Promise<ICommunityPlatformKarmaAward> {
    try {
      return await postCommunityPlatformAdminKarmaAwards({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of user karma awards.
   *
   * Retrieve a filtered and paginated listing of karma awards (reward
   * events/badges) granted to users, providing advanced query capabilities for
   * platform operators or for displaying award lists in user profiles.
   *
   * The operation is applicable for administrative or analytic purposes and
   * allows searching by member, specific community, award type, description,
   * and event time. It is used to display badges or trophies in user profiles,
   * or to track global and community-specific reward trends.
   *
   * Security is restricted to administrative roles; regular users do not have
   * access to the full award list in bulk. Care must be taken not to expose
   * private data, such as linkage to hidden communities, without proper
   * authorization.
   *
   * This operation integrates with the community_platform_karma_awards table,
   * returning paginated records in a summary view. It supports response limits,
   * sorting by event_time or award_type, and should handle error cases such as
   * malformed query filters or permission violations appropriately.
   *
   * @param connection
   * @param body Search and filter parameters for querying karma awards,
   *   including pagination, member/community targeting, and award type
   *   filters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaAward.IRequest,
  ): Promise<IPageICommunityPlatformKarmaAward.ISummary> {
    try {
      return await patchCommunityPlatformAdminKarmaAwards({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detail for a single user karma award by ID.
   *
   * Retrieve all available fields for a single karma award (badge/reward
   * event), including member, optional community, award type, award reason, and
   * timestamps.
   *
   * This operation is accessible only to admins for audit or analytic purposes,
   * or in context where displaying the full details is appropriate (such as in
   * a user's own profile view if the caller is authorized). It is crucial for
   * compliance, dispute resolution, or for rendering historical achievements in
   * a user summary page.
   *
   * Parameter validation ensures that only valid, existing IDs are accepted;
   * error handling must distinguish between not found (nonexistent ID) and
   * unauthorized access (role or ownership invalid). Responses include all
   * public and administrative fields for the given award.
   *
   * The Prisma entity is community_platform_karma_awards, and the endpoint
   * returns the record mapped to ICommunityPlatformKarmaAward; sensitive or
   * internal fields are omitted if not relevant to the current user context.
   *
   * @param connection
   * @param karmaAwardId Unique identifier of the karma award record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":karmaAwardId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaAwardId")
    karmaAwardId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformKarmaAward> {
    try {
      return await getCommunityPlatformAdminKarmaAwardsKarmaAwardId({
        admin,
        karmaAwardId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing karma award by its ID (community_platform_karma_awards
   * table).
   *
   * Update an existing karma award record using its unique ID. This operation
   * modifies a record in the community_platform_karma_awards table, which logs
   * badges/awards assigned based on karma or achievements.
   *
   * It accepts the karmaAwardId as a path parameter and an update body
   * specifying the award's revised fields. Typical business flows supported
   * include administrative corrections, revocation of awards for compliance or
   * policy breaches, and updates to contextual descriptions or reasons.
   *
   * The operation must authorize only admin-level roles, validate that the
   * referenced award exists, and ensure that updates are consistent with
   * organization policies. Changes are logged for audit. Related APIs include
   * award creation and achievement feed endpoints for user profiles. If the
   * record does not exist or validation fails, a descriptive failure message
   * should be returned.
   *
   * This operation works directly with the community_platform_karma_awards
   * Prisma schema; only legitimate, schema-defined fields may be updated.
   *
   * @param connection
   * @param karmaAwardId Unique identifier of the karma award to update
   * @param body Fields for updating the karma award record (e.g., reason, type,
   *   community, event time, revocation info)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":karmaAwardId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaAwardId")
    karmaAwardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformKarmaAward.IUpdate,
  ): Promise<ICommunityPlatformKarmaAward> {
    try {
      return await putCommunityPlatformAdminKarmaAwardsKarmaAwardId({
        admin,
        karmaAwardId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a karma award (community_platform_karma_awards) by ID
   * (admin only).
   *
   * Invoking this operation will permanently delete a karma award from the
   * community platform. The target of the operation is the
   * community_platform_karma_awards table within the database. The operation is
   * only available to admin users due to its impact on user reputations and
   * system auditing.
   *
   * The purpose is to allow administrators to remove awards that were granted
   * in error, are subject to compliance or moderation actions, or must be
   * rescinded for other business reasons. The operation checks for the
   * existence of the specified award and, if found, hard-deletes itâ€”eliminating
   * it from all user profiles, badge displays, and relevant analytics
   * calculations. The operation does not support soft deletion, in alignment
   * with the database schema which lacks a deleted_at or similar field for
   * karma awards.
   *
   * This operation is designed for rare, exceptional cases where an award's
   * presence is deemed inappropriate or incorrect. Use of this endpoint should
   * be carefully logged and subject to peer review to prevent accidental or
   * malicious deletions. Attempts to delete a non-existent award will result in
   * an error response indicating that the award was not found.
   *
   * Administrators must be aware that this operation's effect is irreversible.
   * After deletion, the karma award is removed from all associated user
   * profiles and cannot be restored. If auditability is necessary, external
   * audit logging should supplement this operation, as the primary database
   * record will no longer exist.
   *
   * @param connection
   * @param karmaAwardId Unique identifier (UUID) of the karma award to be
   *   deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":karmaAwardId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("karmaAwardId")
    karmaAwardId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminKarmaAwardsKarmaAwardId({
        admin,
        karmaAwardId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
