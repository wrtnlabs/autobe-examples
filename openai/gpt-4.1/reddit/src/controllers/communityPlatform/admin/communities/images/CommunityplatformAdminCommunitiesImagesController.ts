import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminCommunitiesCommunityIdImages } from "../../../../../providers/postCommunityPlatformAdminCommunitiesCommunityIdImages";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putCommunityPlatformAdminCommunitiesCommunityIdImagesImageId } from "../../../../../providers/putCommunityPlatformAdminCommunitiesCommunityIdImagesImageId";
import { deleteCommunityPlatformAdminCommunitiesCommunityIdImagesImageId } from "../../../../../providers/deleteCommunityPlatformAdminCommunitiesCommunityIdImagesImageId";

import { ICommunityPlatformCommunityImage } from "../../../../../api/structures/ICommunityPlatformCommunityImage";

@Controller("/communityPlatform/admin/communities/:communityId/images")
export class CommunityplatformAdminCommunitiesImagesController {
  /**
   * Add an image to a community using an existing file reference as branding or
   * a visual asset (community_platform_community_images).
   *
   * This endpoint is used to create a new image entry for a designated
   * community, supporting community branding, icons, backgrounds, or other
   * visual assets. Upon receiving a valid image record and associated metadata,
   * the system ensures the requesting user has sufficient privileges—typically
   * a moderator of the target community or a platform administrator.
   *
   * Uploaded images must already exist in the global file upload system,
   * referenced via file_upload_id, ensuring that direct binary data transfer is
   * handled by a separate upload flow. The image_type and order fields allow
   * communities to manage multiple visuals and control display order, while
   * alt_text enhances accessibility. The system applies validation based on the
   * platform's business constraints, including permitted file types (JPEG, PNG,
   * etc.), maximum file size, and community-specific limits on the quantity and
   * types of images.
   *
   * If the operation is successful, it returns the newly created image record
   * with all associated properties. In case of permission failure, validation
   * errors, or exceeding quota, appropriate error responses and business
   * messages are returned. This operation should be used in conjunction with
   * administrative or moderation dashboards and may integrate with future
   * feature extensions such as image galleries or versioned branding assets.
   *
   * @param connection
   * @param communityId Unique identifier of the target community to which the
   *   image should be uploaded and assigned.
   * @param body Metadata and association details for the community image to be
   *   created. Must include file_upload_id and type information.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityImage.ICreate,
  ): Promise<ICommunityPlatformCommunityImage> {
    try {
      return await postCommunityPlatformAdminCommunitiesCommunityIdImages({
        admin,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata or display properties of a specific community image
   * (community_platform_community_images).
   *
   * This endpoint allows modification of an existing image record associated
   * with a community, supporting scenarios such as updating alt text for
   * accessibility, changing image order, activating/deactivating visuals, or
   * reclassifying the image_type (icon, background, etc.). Only users with
   * appropriate role-based permissions (moderators of the community or platform
   * admins) may use this operation; the system enforces these authorization
   * checks before applying updates.
   *
   * This operation does not replace the binary file but updates related
   * metadata, and thus expects only fields modifiable at the record level—such
   * as alt_text, order, image_type, or activation status. Updates are validated
   * for compliance with business rules on allowed values, maximum image counts,
   * uniqueness of order within each image_type, and accessibility string
   * length. Full change history is logged for auditing, supporting restoration
   * or rollback if needed.
   *
   * If successful, the operation returns the updated community image record. If
   * the operation fails due to permission errors, validation issues, or
   * constraints (such as attempting to set conflicting orders), informative
   * error messages and guidance for correction are provided.
   *
   * @param connection
   * @param communityId Unique identifier of the community for which the image
   *   is being managed.
   * @param imageId Unique identifier of the community image record to be
   *   updated.
   * @param body Fields to update for the community image. Only metadata, not
   *   the actual image file, is updated.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":imageId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityImage.IUpdate,
  ): Promise<ICommunityPlatformCommunityImage> {
    try {
      return await putCommunityPlatformAdminCommunitiesCommunityIdImagesImageId(
        {
          admin,
          communityId,
          imageId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a non-banner image from a community
   * (community_platform_community_images table).
   *
   * This API endpoint enables an authorized moderator or admin to delete a
   * specific image from a community. Images in
   * 'community_platform_community_images' are used for non-banner purposes like
   * icons or backgrounds, and each is associated with a community and an
   * underlying file upload (from community_platform_file_uploads).
   *
   * Upon receiving a DELETE request with both the communityId and imageId, the
   * operation validates moderator or admin permissions before removing the
   * target image. Any file resource reference must be handled appropriately in
   * relation to other usages (such as banners, posts), with the primary focus
   * being the removal of the image's explicit record in the community's image
   * listing.
   *
   * Security is paramount; only moderators assigned to the relevant community
   * or admins can perform this operation. An error is returned if the image is
   * not found, belongs to a different community, or the requester lacks
   * permission. This operation does not remove the actual file data from
   * storage but strictly detaches the image from the community in question,
   * following the ERD and table definitions. All action outcomes are logged for
   * compliance and audit.
   *
   * @param connection
   * @param communityId Unique identifier of the community from which this image
   *   is being removed
   * @param imageId Unique identifier of the image to be removed from the
   *   community
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":imageId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminCommunitiesCommunityIdImagesImageId(
        {
          admin,
          communityId,
          imageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
