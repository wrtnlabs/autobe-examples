import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminCommunitiesCommunityIdStatusChanges } from "../../../../../providers/postCommunityPlatformAdminCommunitiesCommunityIdStatusChanges";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchCommunityPlatformAdminCommunitiesCommunityIdStatusChanges } from "../../../../../providers/patchCommunityPlatformAdminCommunitiesCommunityIdStatusChanges";
import { getCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId } from "../../../../../providers/getCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId";
import { putCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId } from "../../../../../providers/putCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId";
import { deleteCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId } from "../../../../../providers/deleteCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId";

import { ICommunityPlatformCommunityStatusChange } from "../../../../../api/structures/ICommunityPlatformCommunityStatusChange";
import { IPageICommunityPlatformCommunityStatusChange } from "../../../../../api/structures/IPageICommunityPlatformCommunityStatusChange";

@Controller("/communityPlatform/admin/communities/:communityId/statusChanges")
export class CommunityplatformAdminCommunitiesStatuschangesController {
  /**
   * Create and record a new community status change event (e.g., banned,
   * private, active) into the audit trail.
   *
   * This API endpoint enables administrators to record a new status change
   * event for a community, such as banning, suspending, or reinstating it, or
   * moving it into private or archived state. The operation updates the
   * community_platform_community_status_changes table, logging the actor
   * (administrator), targeted community, transition from prior status to the
   * resulting status, and any accompanying justification or notes for the
   * event. This ensures every significant administrative or moderation action
   * is transparently recorded.
   *
   * Strict authorization is required to avoid abuse or fraudulent changes; only
   * platform admins or, where appropriate, moderators assigned to the target
   * community should be allowed to invoke this operation. Upon execution, the
   * operation ensures all provided status values are validated against allowed
   * enumerations and that the referenced community is not soft-deleted. Errors
   * are returned on invalid community, status value, or insufficient
   * privilege.
   *
   * This operation complements the ability to retrieve and list community
   * status change events, providing a consistent audit log and compliance
   * system for reassigning roles, handling appeals, or performing forensic
   * analysis. Proper integration with notification and messaging systems is
   * encouraged to inform affected users and moderators of the change.
   *
   * @param connection
   * @param communityId Identifier for the target community whose status will be
   *   updated.
   * @param body Details required to create a new community status change (prior
   *   status, new status, actor, reason, notes).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityStatusChange.ICreate,
  ): Promise<ICommunityPlatformCommunityStatusChange> {
    try {
      return await postCommunityPlatformAdminCommunitiesCommunityIdStatusChanges(
        {
          admin,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated audit trail of all status changes for a community
   * (community_platform_community_status_changes table).
   *
   * This API endpoint allows authorized users (moderators for the community or
   * administrators) to search and retrieve paginated audit records of all
   * status changes for a given community, as recorded in the
   * 'community_platform_community_status_changes' table. Each record logs a
   * change event including the previous and new status, the admin or moderator
   * who performed the change, the rationale, any audit notes, and precise
   * timestamps.
   *
   * Clients submit a PATCH request to the endpoint with optional advanced
   * filtering and pagination parameters in the body, enabling sorting by
   * timestamp, filtering by status types (such as banned or private), or
   * querying by the actor responsible. Security enforcement ensures only users
   * with moderator or admin privileges for that community may access this data.
   * If a user without sufficient privileges attempts access, an error is
   * returned.
   *
   * Typical uses include compliance audits, moderator activity reviews, or
   * regulatory checks. This operation is critical for transparency and
   * accountability in the management of community accessibility and
   * configuration changes.
   *
   * @param connection
   * @param communityId Unique identifier of the community whose status change
   *   logs are being retrieved
   * @param body Advanced filtering, search, sorting, and pagination options for
   *   retrieving status change logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityStatusChange.IRequest,
  ): Promise<IPageICommunityPlatformCommunityStatusChange> {
    try {
      return await patchCommunityPlatformAdminCommunitiesCommunityIdStatusChanges(
        {
          admin,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific community status change event by its ID from
   * community_platform_community_status_changes.
   *
   * This operation provides detailed retrieval of a single status change event
   * for a specified community. Each record in the
   * community_platform_community_status_changes table represents a snapshot of
   * a status transition (such as from 'active' to 'banned', or from 'private'
   * to 'active'). The record includes who performed the status change—admin or
   * moderator—when the event occurred, and the reasoning and notes associated
   * with the action. If a community is banned or unbanned, made private or
   * public, or otherwise undergoes changes affecting accessibility, this entry
   * allows full insight into how, when, and why the action occurred.
   *
   * Access to this operation is generally restricted to roles with appropriate
   * permissions: users may see limited fields, while moderators and admins have
   * full audit visibility. The operation is essential for compliance reviews,
   * historical access control decisions, user appeals, and forensics in the
   * event of misconduct or errors. Business logic ensures only non-soft-deleted
   * communities and status changes are visible, and fields such as notes,
   * previous status, and new status are protected from unauthorized exposure.
   *
   * Proper error handling is implemented for invalid or nonexistent community
   * or status change IDs, and for attempts to view events of deleted/banned
   * communities (subject to role). Clients should use this API in conjunction
   * with the listing/creation endpoints for status changes to provide
   * administrators and moderators with transparent records.
   *
   * @param connection
   * @param communityId Identifier of the target community.
   * @param statusChangeId Identifier of the specific community status change to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusChangeId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("statusChangeId")
    statusChangeId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityStatusChange> {
    try {
      return await getCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId(
        {
          admin,
          communityId,
          statusChangeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update community status change entry
   * (community_platform_community_status_changes table).
   *
   * This API operation enables administrators to update the details of a single
   * community status change record. Such status changes record all transitions
   * in community state (such as from 'active' to 'banned', 'private',
   * 'archived'), including the moderator/admin responsible, timestamps, and
   * supporting reasoning. Updating may involve correcting the previous/new
   * status fields, change_reason, or notes for audit accuracy.
   *
   * Security is enforced strictly: only admin roles are permitted, and
   * attempted changes are logged for compliance. Modifications must reference
   * actual community and status change IDs in the path parameters, ensuring
   * precise targeting in the database. Underlying Prisma schema fields such as
   * previous_status, new_status, change_reason, and notes are referenced for
   * updates.
   *
   * Validation rules require that the combination of communityId and
   * statusChangeId exists, and that the request body supplies valid values
   * matching the business schema for allowed edits. Attempts to update
   * finalized or historical status changes may be rejected according to audit
   * lock or compliance flags. This operation is related to the creation and
   * querying of community status changes, but solely supports update, not
   * creation or deletion. Errors are raised if edit constraints are violated or
   * unauthorized access is attempted.
   *
   * @param connection
   * @param communityId The unique identifier (UUID) of the target community
   * @param statusChangeId The unique identifier (UUID) of the status change
   *   entry to update
   * @param body Updated data for the community status change entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":statusChangeId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("statusChangeId")
    statusChangeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityStatusChange.IUpdate,
  ): Promise<ICommunityPlatformCommunityStatusChange> {
    try {
      return await putCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId(
        {
          admin,
          communityId,
          statusChangeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a community status change entry
   * (community_platform_community_status_changes table).
   *
   * This API operation allows platform administrators to permanently delete a
   * community status change event. Status changes are audit records tracking
   * every transition in a community's status, including who executed the
   * change, previous/new status, reasons, and timestamps. Deleting such records
   * is not routine and is only allowed in exceptional circumstances (such as
   * regulatory erasure requests or clear policy compliance errors), due to the
   * nature of audit requirements.
   *
   * The deletion is enforced as a hard delete, irreversibly removing the record
   * from the database without a soft-deleted field, as the schema lacks a soft
   * deletion column. Only admin roles may invoke this operation, and all
   * actions are logged for oversight. Path parameters precisely identify both
   * the community and the specific status change record.
   *
   * Errors are returned if the record does not exist, deletion is disallowed
   * due to audit lock, or the user lacks the required role. This operation is
   * strictly for deletion and does not support recovery or undeletion. It
   * should be used sparingly and with full compliance review.
   *
   * @param connection
   * @param communityId The unique identifier (UUID) of the target community
   * @param statusChangeId The unique identifier (UUID) of the status change
   *   entry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":statusChangeId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("statusChangeId")
    statusChangeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminCommunitiesCommunityIdStatusChangesStatusChangeId(
        {
          admin,
          communityId,
          statusChangeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
