import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformAdminCommunitiesCommunityIdBanners } from "../../../../../providers/postCommunityPlatformAdminCommunitiesCommunityIdBanners";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchCommunityPlatformAdminCommunitiesCommunityIdBanners } from "../../../../../providers/patchCommunityPlatformAdminCommunitiesCommunityIdBanners";
import { putCommunityPlatformAdminCommunitiesCommunityIdBannersBannerId } from "../../../../../providers/putCommunityPlatformAdminCommunitiesCommunityIdBannersBannerId";
import { deleteCommunityPlatformAdminCommunitiesCommunityIdBannersBannerId } from "../../../../../providers/deleteCommunityPlatformAdminCommunitiesCommunityIdBannersBannerId";

import { ICommunityPlatformCommunityBanner } from "../../../../../api/structures/ICommunityPlatformCommunityBanner";
import { IPageICommunityPlatformCommunityBanner } from "../../../../../api/structures/IPageICommunityPlatformCommunityBanner";

@Controller("/communityPlatform/admin/communities/:communityId/banners")
export class CommunityplatformAdminCommunitiesBannersController {
  /**
   * Create a new banner for a community (community_platform_community_banners).
   *
   * This endpoint allows moderators or admins to upload and register a new
   * visual banner for a target community, referencing the
   * community_platform_community_banners table. The request body must specify
   * the associated file_upload_id from a previously uploaded image, and may
   * include order (for display rotation), alt_text for accessibility, and
   * active/inactive display status.
   *
   * Security is enforced such that only community moderators and platform
   * admins are allowed to manage community banners. The operation checks for
   * duplicate banners/order, ensures proper file format compliance, and
   * enforces soft deletion of replaced banners when necessary. On success, it
   * returns detailed metadata of the new banner entry, including its ID,
   * association, display metadata, and all audit fields.
   *
   * This operation is critical for community visual brand management and is
   * used alongside endpoints for listing, updating, and deleting banners. It
   * explicitly does not handle file upload (which must be completed prior in
   * the file uploads subsystem) and focuses on registering the banner with
   * proper metadata in the community context. Validation is applied as per
   * schema, and errors are returned if file references or permissions are
   * invalid.
   *
   * @param connection
   * @param communityId Unique identifier of the target community to which a new
   *   banner will be added.
   * @param body Information and configuration for the new community banner to
   *   register.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityBanner.ICreate,
  ): Promise<ICommunityPlatformCommunityBanner> {
    try {
      return await postCommunityPlatformAdminCommunitiesCommunityIdBanners({
        admin,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filterable list of banner images for a community
   * (community_platform_community_banners table).
   *
   * This API provides a mechanism to retrieve a paginated, filterable list of
   * banners linked to a specific community. It references the
   * community_platform_community_banners table, which holds banner metadata,
   * associations to communities, activation status, file references, and
   * accessibility information (such as alt text).
   *
   * The endpoint accepts communityId as a path parameter (UUID) to specify
   * which community's banners are to be listed. Additional filtering, sorting,
   * or searching parameters may be carried in the request body schema
   * (ICommunityPlatformCommunityBanner.IRequest), supporting moderation
   * workflows and community branding management.
   *
   * Only authenticated users with moderator or admin privileges for the target
   * community may utilize this operation. Returned data is paginated and
   * includes essential banner properties, file references, status
   * (active/inactive), order, and accessibility text. The result enables a web
   * or dashboard UI to review, manage, and prepare further updates or deletions
   * for banners.
   *
   * @param connection
   * @param communityId The unique identifier of the community whose banners are
   *   being retrieved.
   * @param body Filter, search, and pagination criteria to query banners for a
   *   given community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityBanner.IRequest,
  ): Promise<IPageICommunityPlatformCommunityBanner> {
    try {
      return await patchCommunityPlatformAdminCommunitiesCommunityIdBanners({
        admin,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the metadata or status of a specific community banner
   * (community_platform_community_banners).
   *
   * Updates the metadata of a banner image for a community, including changing
   * alternative text, updating the display order, and toggling its active
   * status. This operation references the community_platform_community_banners
   * schema, where each banner is linked to a community and file upload, and
   * supports updating all editable columns except the file_upload_id (which is
   * immutable after creation for audit and safety).
   *
   * Moderators and admins may use this API to adjust which banners are
   * currently visible, update their accessibility (alt_text), or reorder banner
   * appearance for branding purposes. The operation validates that the provided
   * bannerId and communityId exist and are correctly related, returning an
   * error if not. It fetches the current banner data, applies allowed updates,
   * and saves the changes if the calling user has sufficient rights (moderator
   * for the given community or admin). Changes are logged for audit.
   *
   * Attempting to update a banner for which the caller lacks permissions, for a
   * banner unrelated to the specified community, or for immutable fields will
   * result in a clear business error response. If the banner is archived
   * (soft-deleted), updates are not allowed. Related endpoints include banner
   * creation, listing, and deletion within the same community context.
   *
   * @param connection
   * @param communityId Unique identifier of the target community.
   * @param bannerId Unique identifier of the banner to update.
   * @param body Fields to update for the specific community banner (e.g.,
   *   alt_text, order, active).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":bannerId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("bannerId")
    bannerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityBanner.IUpdate,
  ): Promise<ICommunityPlatformCommunityBanner> {
    try {
      return await putCommunityPlatformAdminCommunitiesCommunityIdBannersBannerId(
        {
          admin,
          communityId,
          bannerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (archive) a specific community banner from a community
   * (community_platform_community_banners).
   *
   * Archives (soft-deletes) the designated banner image from a community,
   * ensuring that the banner is no longer displayed or returned in banner lists
   * to the UI. As defined in the community_platform_community_banners schema,
   * this operation sets the deleted_at field to the current timestamp, rather
   * than removing the record, supporting historical review, rollback, or audit
   * actions if needed.
   *
   * This endpoint asserts that the specified banner belongs to the given
   * community and that the requesting user has moderator or admin rights for
   * that community. Soft deletion retains the database record for compliance,
   * but the banner is omitted from public/community banner queries. Linked file
   * upload records are not deleted, so actual images persist and may be
   * referenced by other components or in audit flows.
   *
   * If a moderator or admin attempts to delete a banner already archived or
   * nonexistent, a clear error is returned. Related endpoints are available for
   * creating and updating banners, as well as restoring archived ones (in
   * future expansions). All deletion events are captured for audit review and
   * traceability.
   *
   * @param connection
   * @param communityId Unique identifier of the target community.
   * @param bannerId Unique identifier of the banner to archive (soft-delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bannerId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("bannerId")
    bannerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminCommunitiesCommunityIdBannersBannerId(
        {
          admin,
          communityId,
          bannerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
