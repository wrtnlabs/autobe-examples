import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformAdminProfiles } from "../../../../providers/patchCommunityPlatformAdminProfiles";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { deleteCommunityPlatformAdminProfilesProfileId } from "../../../../providers/deleteCommunityPlatformAdminProfilesProfileId";

import { IPageICommunityPlatformProfile } from "../../../../api/structures/IPageICommunityPlatformProfile";
import { ICommunityPlatformProfile } from "../../../../api/structures/ICommunityPlatformProfile";

@Controller("/communityPlatform/admin/profiles")
export class CommunityplatformAdminProfilesController {
  /**
   * Search and retrieve paginated user profiles, based on
   * community_platform_profiles.
   *
   * This API operation retrieves a filtered and paginated collection of user
   * profiles from the community_platform_profiles table, supporting discovery,
   * moderation, and analytics scenarios. Profile records include basic details
   * such as username, display name, avatar URI, public visibility flag, short
   * status, bio, and related timestamps.
   *
   * Moderators and admins can use this endpoint to search for suspicious or
   * noteworthy accounts by text, time window, or status. Regular members may
   * have restricted visibility (or none at all) depending on platform settings
   * and their own authentication state; only public profiles are returned
   * unless higher privileges are assigned. Sensitive user data such as email,
   * history, or preferences are omitted or redacted for privacy. Filtering
   * supports username, status, creation and update times, and text search
   * within bios or display names. Sorting by creation, activity, or username is
   * available to help discover new or trending users.
   *
   * Paginated results improve usability for large user bases. Typically, this
   * endpoint would be called by admin dashboards, user search modules, or
   * community moderation tools for managing and analyzing platform
   * communities.
   *
   * @param connection
   * @param body Search, filtering, and pagination criteria for selecting user
   *   profiles. Supports username, status, and bio search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformProfile.IRequest,
  ): Promise<IPageICommunityPlatformProfile> {
    try {
      return await patchCommunityPlatformAdminProfiles({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a user profile by profile ID in the community_platform_profiles
   * table.
   *
   * This operation allows for the permanent removal of a user profile from the
   * platform based on the specified profileId. Deletion can only be performed
   * by the profile owner or an administrator, enforcing strict permissions as
   * outlined in the business requirements. The profile is soft-deleted, moving
   * its record to an inactive state by setting the deleted_at timestamp. Data
   * relationships with posts, comments, and badges are maintained for audit
   * purposes, even after profile deletion, per compliance policies.
   *
   * Security concerns require that profile deletions are logged, with
   * notification provided to the affected user. Any attempt to delete a profile
   * without the correct authorization is blocked and logged for potential
   * review. Error handling includes responding to invalid or non-existent
   * profile IDs, and preventing deletion if the profile is already marked as
   * deleted.
   *
   * This operation is closely related to account closure and privacy flows. It
   * is important to ensure that all GDPR or similar compliance requirements are
   * enforced, including data retention, right to erasure, and audit logging.
   *
   * @param connection
   * @param profileId The unique identifier of the profile to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":profileId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformAdminProfilesProfileId({
        admin,
        profileId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
