import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformAdminProfilesProfileIdHistory } from "../../../../../providers/patchCommunityPlatformAdminProfilesProfileIdHistory";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IPageICommunityPlatformProfileHistory } from "../../../../../api/structures/IPageICommunityPlatformProfileHistory";
import { ICommunityPlatformProfileHistory } from "../../../../../api/structures/ICommunityPlatformProfileHistory";

@Controller("/communityPlatform/admin/profiles/:profileId/history")
export class CommunityplatformAdminProfilesHistoryController {
  /**
   * Retrieve paginated edit history of a specific user profile from
   * community_platform_profile_histories.
   *
   * This API operation retrieves a paginated list of all changes ever made to
   * the specified user profile. It references the
   * community_platform_profile_histories table, which records every edit or
   * updateâ€”such as username changes, bio modifications, avatar updates, privacy
   * toggles, and status messages. Each history item includes the changed
   * fields, value snapshots before and after the change, actor who performed
   * the change (user, system, or admin), change reason, and timestamp of edit.
   *
   * Access to profile history is restricted to the profile owner themselves or
   * platform administrators, ensuring privacy of historical profile states.
   * This enforces platform compliance with best practices around privacy and
   * transparency: members can trace all modifications made to their own
   * profile, while admins may audit histories for regulatory or abuse
   * investigations. Sensitive fields, such as email and status, are revealed
   * only if the requestor has appropriate authorization.
   *
   * The endpoint supports pagination to handle large history sets, as well as
   * advanced filtering (by date range, editing actor, or field changed) as part
   * of the request body. Expected errors include invalid profileId (404),
   * unauthorized access (403), and improper pagination/filtering (400). The
   * response returns a paginated, chronologically-ordered list of profile
   * history objects, each with full snapshot details as per the Prisma schema.
   * Related operations include retrieving the current profile state, updating
   * profile information, and reviewing audit trails for account management.
   *
   * @param connection
   * @param profileId The unique identifier of the profile whose history is
   *   being retrieved
   * @param body Criteria for searching and paginating the profile history, such
   *   as date range, editor, and fields changed
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformProfileHistory.IRequest,
  ): Promise<IPageICommunityPlatformProfileHistory> {
    try {
      return await patchCommunityPlatformAdminProfilesProfileIdHistory({
        admin,
        profileId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
