import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformMembersMemberId } from "../../../providers/getCommunityPlatformMembersMemberId";

import { ICommunityPlatformMember } from "../../../api/structures/ICommunityPlatformMember";

@Controller("/communityPlatform/members/:memberId")
export class CommunityplatformMembersController {
  /**
   * Retrieve the full account and profile details of a specific member by ID
   * from the community_platform_members table.
   *
   * Retrieves all available profile and account information for a single
   * registered member based on the provided memberId. This includes public and
   * private fields depending on the role and context of the requester.
   * Information provided consists of member email, account verification state,
   * status (e.g., active, blocked, suspended), and activity timestamps such as
   * created_at and updated_at.
   *
   * If the requester is viewing their own profile or has sufficient permissions
   * (e.g., admin), additional protected fields may be exposed in the response
   * as allowed by business rules. All sensitive authentication data, such as
   * password hashes, are strictly omitted from public output.
   *
   * This operation is directly aligned with the community_platform_members
   * table, referencing related entities such as profiles, subscriptions, posts,
   * comment histories, and karma. Proper permissions and privacy logic are
   * enforced in the business layer depending on the requester's identity.
   *
   * Error handling covers not-found situations, permission blocks, and privacy
   * restrictions, ensuring members can only view information for which they
   * have rights. Used in user profile pages and admin tools for inspecting
   * member records.
   *
   * @param connection
   * @param memberId Unique identifier (UUID) of the member whose profile
   *   information is requested.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformMember> {
    try {
      return await getCommunityPlatformMembersMemberId({
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
