import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformPostsPostIdLinks } from "../../../../providers/patchCommunityPlatformPostsPostIdLinks";
import { getCommunityPlatformPostsPostIdLinksLinkId } from "../../../../providers/getCommunityPlatformPostsPostIdLinksLinkId";

import { IPageICommunityPlatformPostLink } from "../../../../api/structures/IPageICommunityPlatformPostLink";
import { ICommunityPlatformPostLink } from "../../../../api/structures/ICommunityPlatformPostLink";

@Controller("/communityPlatform/posts/:postId/links")
export class CommunityplatformPostsLinksController {
  /**
   * Retrieve and search all links attached to a post
   * (community_platform_post_links table).
   *
   * This API operation enables clients to retrieve, filter, and paginate the
   * set of all hyperlinks attached to a specific post, using the
   * community_platform_post_links table. The postId path parameter identifies
   * the post whose associated links are to be queried. Each result provides
   * detailed information including the original URL, optional preview
   * title/description, and a preview image URI if available. This supports
   * listing, moderation, and UI rendering of post-linked content.
   *
   * Security and permissions are enforced such that only users authorized to
   * view the post (including guests for public posts and authenticated users
   * for restricted posts) can access the attached link references. The
   * operation is intended for use in post detail views, moderation dashboards,
   * or user content management screens.
   *
   * Supports rich query/body parameters for advanced filtering, like partial
   * URL search, link status, or pagination controls appropriate to the volume
   * of attached links. Returned responses are paginated and reflect only links
   * attached to the specified post. Error handling covers not-found scenarios
   * and access violations. Related operations include link creation and
   * deletion. The endpoint is for retrieval only; modification or deletion of
   * links are handled by other endpoints.
   *
   * @param connection
   * @param postId Unique identifier (UUID) of the target post. Links for this
   *   post will be retrieved.
   * @param body Request body containing filtering, sorting, and pagination
   *   parameters for retrieving post links. Examples include partial URL
   *   matches, link status, page number, or page size.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostLink.IRequest,
  ): Promise<IPageICommunityPlatformPostLink> {
    try {
      return await patchCommunityPlatformPostsPostIdLinks({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve an individual link attached to a specific post from
   * community_platform_post_links.
   *
   * This API operation allows clients to fetch detailed information about a
   * single external link that has been associated with a specific post. The
   * information includes the link's URL, optional preview metadata, and its
   * relationship to the post, leveraging the fields defined in the
   * community_platform_post_links schema. Access control is enforced to
   * restrict read access according to the visibility of the post and its parent
   * communityâ€”public posts and communities can be viewed by any user, while
   * private or restricted posts require that the requester have access rights.
   *
   * The operation checks that the supplied postId represents an existing post,
   * and the linkId references a valid link record that is associated with that
   * post. Requests where the link is not attached to the given post, or where
   * the post is not accessible, result in a clear error response. Security
   * measures ensure that information about links in unpublished or deleted
   * posts is never revealed to unauthorized users.
   *
   * This endpoint is closely related to the post retrieval endpoints, and its
   * correct functioning may require integration or pre-checks with post detail
   * APIs (such as "GET /posts/{postId}"). It plays an important role in
   * rendering link previews and ensuring a smooth user experience for content
   * involving external links. All fields returned correspond to the
   * community_platform_post_links schema. Error handling includes not-found
   * errors for missing links or posts and permission errors if the link's post
   * or its parent community is not accessible to the requester.
   *
   * @param connection
   * @param postId Unique identifier of the parent post to which the link is
   *   attached
   * @param linkId Unique identifier of the target link attached to this post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":linkId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("linkId")
    linkId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostLink> {
    try {
      return await getCommunityPlatformPostsPostIdLinksLinkId({
        postId,
        linkId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
