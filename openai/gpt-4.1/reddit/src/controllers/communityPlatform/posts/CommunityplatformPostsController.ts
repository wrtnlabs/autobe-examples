import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformPosts } from "../../../providers/patchCommunityPlatformPosts";
import { getCommunityPlatformPostsPostId } from "../../../providers/getCommunityPlatformPostsPostId";

import { IPageICommunityPlatformPost } from "../../../api/structures/IPageICommunityPlatformPost";
import { ICommunityPlatformPost } from "../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/posts")
export class CommunityplatformPostsController {
  /**
   * Search, filter, and paginate platform posts (community_platform_posts
   * table).
   *
   * This operation retrieves a paginated and filterable list of posts from the
   * community_platform_posts table, enabling rich client-side search
   * experiences for users browsing, searching, or discovering posts. Clients
   * may request filters based on content type (text, link, image), post status
   * (published, pending, removed), target community, or text queries.
   *
   * The request body (ICommunityPlatformPost.IRequest) allows specifying
   * advanced search, pagination, and sort options (e.g., hot, new, top,
   * controversial). The response (IPageICommunityPlatformPost.ISummary) returns
   * a page of post summaries, including essential fields for display and client
   * interactions. Security: Both guests and members can search and view posts,
   * but certain fields or statuses (e.g., pending or removed) may only be
   * accessible to moderators or the post creator. Permission checks must be
   * enforced to hide or redact sensitive content.
   *
   * The operation performs optimized text searching and incorporates Prisma
   * table indexes on fields such as title, creation date, and status to improve
   * performance. Error handling returns empty results or appropriate error
   * codes if no matches are found or if filters are invalid. Pagination
   * metadata is always included in the response for infinite scrolling or
   * page-by-page navigation.
   *
   * @param connection
   * @param body Search, filter, sorting, and pagination parameters for
   *   retrieving posts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformPost.IRequest,
  ): Promise<IPageICommunityPlatformPost.ISummary> {
    try {
      return await patchCommunityPlatformPosts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single post's details by ID from the community_platform_posts
   * table.
   *
   * This endpoint fetches a user's post details from the system by unique post
   * ID. Only posts that exist and are not soft-deleted or restricted will be
   * shown; otherwise, access will be denied or a not-found error returned.
   *
   * Security: Guests and authenticated users can access public posts. Posts
   * with status values indicating moderation removal or restriction (e.g.,
   * removed, hidden, mod_queued) are hidden unless the requester is a moderator
   * or the post's author. Validation ensures the post exists, is not banned or
   * deleted, and all related content (images, links) is included only if
   * attached to the post.
   *
   * Business logic: This endpoint is suitable for use in post detail pages,
   * direct post links, and user profile displays. Associated comments, votes,
   * and moderator actions are not directly returned here, but can be retrieved
   * via parallel or nested API calls. All error cases (not found, unauthorized
   * access) return succinct, actionable responses. Posts are associated with
   * communities, so community-level visibility or bans may affect access.
   *
   * @param connection
   * @param postId Unique identifier for the post to be retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await getCommunityPlatformPostsPostId({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
