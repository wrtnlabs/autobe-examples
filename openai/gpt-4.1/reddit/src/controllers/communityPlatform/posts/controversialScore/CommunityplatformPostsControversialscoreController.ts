import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformPostsPostIdControversialScore } from "../../../../providers/getCommunityPlatformPostsPostIdControversialScore";

import { ICommunityPlatformControversialScore } from "../../../../api/structures/ICommunityPlatformControversialScore";

@Controller("/communityPlatform/posts/:postId/controversialScore")
export class CommunityplatformPostsControversialscoreController {
  /**
   * Retrieve the cached controversial score for a specific post
   * (community_platform_controversial_scores).
   *
   * This API endpoint allows clients to retrieve the current controversial
   * score for a given post, identified by its unique postId. The controversial
   * score is used in sorting posts according to controversy, calculated by
   * analyzing the distribution of upvotes and downvotes, as well as engagement
   * metrics. The result is drawn from the
   * community_platform_controversial_scores table, which caches these values
   * for fast access.
   *
   * Security is enforced so that only public or authorized community posts are
   * retrievable; posts belonging to private or banned communities may not
   * expose controversial scores depending on status. The controversial score is
   * designed for consumption by end-user applications displaying post lists or
   * analytics modules.
   *
   * The underlying record is linked to the specified post via the postId path
   * parameter. Validation ensures that postId is a valid UUID; if the post is
   * not found or the score is unavailable, a clear error is returned. This
   * endpoint is typically used in conjunction with post listing or post detail
   * endpoints when clients need to sort or display information based on
   * controversy.
   *
   * Error handling includes not found (404) for missing posts or scores and
   * permission denied (403) for restricted content.
   *
   * @param connection
   * @param postId Unique identifier of the post for which to retrieve the
   *   controversial score.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformControversialScore> {
    try {
      return await getCommunityPlatformPostsPostIdControversialScore({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
