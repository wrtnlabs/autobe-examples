import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformPostsPostIdImages } from "../../../../providers/patchCommunityPlatformPostsPostIdImages";
import { getCommunityPlatformPostsPostIdImagesImageId } from "../../../../providers/getCommunityPlatformPostsPostIdImagesImageId";

import { IPageICommunityPlatformPostImage } from "../../../../api/structures/IPageICommunityPlatformPostImage";
import { ICommunityPlatformPostImage } from "../../../../api/structures/ICommunityPlatformPostImage";

@Controller("/communityPlatform/posts/:postId/images")
export class CommunityplatformPostsImagesController {
  /**
   * Retrieve the list of images attached to a specific post
   * (community_platform_post_images).
   *
   * Retrieve all images attached to a given post based on its unique
   * identifier. This operation allows users and clients to access the complete
   * set of image metadata for a post, supporting use cases such as gallery
   * displays and validating content limits.
   *
   * Access control is enforced so that only posts visible to the current user
   * will expose their images; if the post is private, restricted, or deleted,
   * appropriate error codes and messages are returned. Pagination parameters
   * allow for large posts with many images, and sorting by upload time or
   * ordering is supported for consistent rendering behavior.
   *
   * This operation cross-references the community_platform_post_images table
   * and includes relations to file uploads, including URLs, MIME types, and
   * user-attributed upload data. Error handling ensures that invalid post IDs,
   * non-existent posts, or access violations are treated with clear, actionable
   * messages. For each image, associated metadata—such as filename, order, and
   * file size—can be included in the response for rich client-side rendering.
   *
   * @param connection
   * @param postId The unique identifier of the post whose images are to be
   *   listed.
   * @param body Parameters for filtering and paginating image results for a
   *   given post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostImage.IRequest,
  ): Promise<IPageICommunityPlatformPostImage> {
    try {
      return await patchCommunityPlatformPostsPostIdImages({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get complete metadata for a specific post image
   * (community_platform_post_images).
   *
   * Fetch details for a single image within a post by specifying both the post
   * ID and the image ID. The API retrieves metadata about the image, such as
   * order, stored file link, upload information, MIME type, file size, and
   * original filename.
   *
   * Permissions are handled by confirming that the requesting user is
   * authorized to view the associated post. If access is denied or if either
   * the post or image does not exist, the API will return a suitable error
   * response. The operation supports moderation and display workflows by
   * returning all context necessary for assessment, audit, or presentation.
   *
   * This endpoint directly references the community_platform_post_images table
   * and joins to community_platform_file_uploads for detailed file data. Error
   * handling provides clear outcomes for cases such as missing post, missing
   * image, or insufficient post access rights. The detailed information
   * supports both end-user viewing and background tasks like thumbnail
   * generation or file audits.
   *
   * @param connection
   * @param postId The UUID of the post containing the image.
   * @param imageId The UUID of the image to retrieve from the specified post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":imageId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostImage> {
    try {
      return await getCommunityPlatformPostsPostIdImagesImageId({
        postId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
