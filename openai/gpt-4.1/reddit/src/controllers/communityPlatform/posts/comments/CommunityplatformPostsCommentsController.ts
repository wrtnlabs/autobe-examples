import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformPostsPostIdComments } from "../../../../providers/patchCommunityPlatformPostsPostIdComments";
import { getCommunityPlatformPostsPostIdCommentsCommentId } from "../../../../providers/getCommunityPlatformPostsPostIdCommentsCommentId";

import { IPageICommunityPlatformComment } from "../../../../api/structures/IPageICommunityPlatformComment";
import { ICommunityPlatformComment } from "../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/posts/:postId/comments")
export class CommunityplatformPostsCommentsController {
  /**
   * Search, sort, and retrieve a paginated/nested list of comments for a
   * specific post from community_platform_comments.
   *
   * Retrieve a filtered and paginated list of comments for a given post from
   * the community_platform_comments table. The operation supports advanced
   * filtering such as nesting level (thread depth), member, or timeframe;
   * sorting by recency, score, controversial, or custom ranking. It processes
   * rapid or bot-driven queries according to business rate limits.
   *
   * The operation ensures thread constraints: it displays children up to the
   * configured maximum nesting. Security and permissions are enforced per
   * community and user ban status; only published and not-moderated-removed
   * comments are returned. Members can use this operation to browse replies,
   * search content, or load additional comments on demand.
   *
   * Pagination options and sorting order are handled through the request body
   * parameters, while the response provides a paginated/structured list
   * optimized for direct UI rendering.
   *
   * @param connection
   * @param postId Target post's unique identifier (UUID).
   * @param body Filtering, search, pagination, and sort options for this post's
   *   comment retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IRequest,
  ): Promise<IPageICommunityPlatformComment.ISummary> {
    try {
      return await patchCommunityPlatformPostsPostIdComments({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the details of a specific comment on a post from
   * community_platform_comments.
   *
   * Fetch the full details of a single comment belonging to a particular post
   * using the community_platform_comments table. The commentId parameter
   * uniquely identifies the comment, ensuring only published, viewable comments
   * are retrievable by this operation.
   *
   * Authorization and comment visibility checks are applied according to the
   * viewer's role, as well as post and community status (e.g., banned, deleted,
   * hidden threads). Moderation audit logs and edit history are not included
   * but may be accessed separately as per business and privacy rules. All
   * standard edge cases—soft deleted, moderated-removed, or non-public
   * comments—are handled with appropriate error responses or visibility
   * restrictions.
   *
   * @param connection
   * @param postId Target post's unique identifier (UUID).
   * @param commentId Unique identifier for the comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await getCommunityPlatformPostsPostIdCommentsCommentId({
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
