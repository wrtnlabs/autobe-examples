import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberCommentsCommentIdVotes } from "../../../../../providers/postCommunityPlatformMemberCommentsCommentIdVotes";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putCommunityPlatformMemberCommentsCommentIdVotesVoteId } from "../../../../../providers/putCommunityPlatformMemberCommentsCommentIdVotesVoteId";
import { deleteCommunityPlatformMemberCommentsCommentIdVotesVoteId } from "../../../../../providers/deleteCommunityPlatformMemberCommentsCommentIdVotesVoteId";

import { ICommunityPlatformCommentVote } from "../../../../../api/structures/ICommunityPlatformCommentVote";

@Controller("/communityPlatform/member/comments/:commentId/votes")
export class CommunityplatformMemberCommentsVotesController {
  /**
   * Record a member's upvote or downvote on a specific comment
   * (community_platform_comment_votes).
   *
   * Create a new vote associated with a comment, ensuring idempotent
   * one-member-one-vote rules according to the business logic of the voting
   * system. The system checks if the member has an existing (active) vote and,
   * if so, may update the value instead of creating duplicates depending on the
   * application logic.
   *
   * Voting is an authenticated member-only action; guests or banned users are
   * blocked at the controller/authorization layer. Request validation enforces
   * that the vote value is strictly 1 or -1, and the commentId refers to a
   * valid, not-deleted comment for which the member has permission to vote (not
   * their own comment).
   *
   * All votes are recorded in community_platform_comment_votes, with relevant
   * auditing for anti-abuse monitoring. In case of quota violations, the
   * operation returns detailed error responses. Successful voting updates
   * mutable comment, user, and potentially community karma statistics; all
   * actions are subject to further review in case of suspected abuse.
   *
   * @param connection
   * @param commentId Unique identifier of the comment being voted on.
   * @param body Vote submission information: value must be +1 (upvote) or -1
   *   (downvote).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommentVote.ICreate,
  ): Promise<ICommunityPlatformCommentVote> {
    try {
      return await postCommunityPlatformMemberCommentsCommentIdVotes({
        member,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a member's upvote or downvote on a specific comment
   * (community_platform_comment_votes table).
   *
   * This endpoint lets an authenticated member update their previous vote on a
   * specific comment. The operation references the
   * community_platform_comment_votes table, where each vote entry is uniquely
   * identified by both the commentId (the comment being voted on) and the
   * voteId (the individual vote record).
   *
   * Members can switch their vote from upvote to downvote or vice versa by
   * providing new vote value details in the request body. All changes are
   * timestamped and impact comment ranking and author karma, per business
   * rules. Only the member who originally cast the vote can update it, and only
   * if they are not voting on their own comment. Moderators and admins may
   * override in edge cases, but typical usage is for self-initiated vote
   * editing.
   *
   * Validation enforces one active vote per comment per member. Updating a vote
   * automatically revises karma for the comment's author. The operation
   * requires authentication (role: member) and will fail if the member tries to
   * update someone else's vote, or if either the comment or vote does not exist
   * or is no longer valid (e.g., deleted).
   *
   * @param connection
   * @param commentId Unique identifier of the comment being voted on.
   * @param voteId Unique identifier of the vote record to update.
   * @param body New vote details for the comment (e.g., vote_value: 1 for
   *   upvote, -1 for downvote).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":voteId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommentVote.IUpdate,
  ): Promise<ICommunityPlatformCommentVote> {
    try {
      return await putCommunityPlatformMemberCommentsCommentIdVotesVoteId({
        member,
        commentId,
        voteId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a member's vote on a comment (community_platform_comment_votes
   * table).
   *
   * This endpoint allows an authenticated member to revoke (soft delete) their
   * vote on a specific comment, effectively removing their previous upvote or
   * downvote. The operation interacts with the community_platform_comment_votes
   * table: each vote is uniquely identified by the commentId and voteId
   * parameters. The record's deleted_at field is set to the current timestamp
   * instead of being hard-deleted, preserving vote history for audit and
   * compliance reasons.
   *
   * By revoking the vote, the member's influence is removed from the comment's
   * score and from karma calculations for the comment's author. This helps
   * provide accurate, real-time ranking while maintaining transparent audit
   * trails. Only the member who originally cast the vote may perform this
   * action. The operation will fail if the vote does not exist, has already
   * been deleted, or does not belong to the authenticated user. Moderators and
   * admins may override in exceptional moderation scenarios, but this is a
   * self-service action for regular use.
   *
   * Security is strictly enforced to prevent users from erasing other users'
   * votes. The operation requires authentication via member role. Deletion
   * triggers system recalculations of vote totals and karma. Errors or invalid
   * attempts (e.g., removing a non-existent vote) yield clear, actionable
   * messages in line with error handling standards.
   *
   * @param connection
   * @param commentId Unique identifier of the comment whose vote is being
   *   revoked.
   * @param voteId Unique identifier of the vote record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberCommentsCommentIdVotesVoteId({
        member,
        commentId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
