import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postCommunityPlatformMemberCommunities } from "../../../../providers/postCommunityPlatformMemberCommunities";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { patchCommunityPlatformMemberCommunities } from "../../../../providers/patchCommunityPlatformMemberCommunities";

import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../../api/structures/IPageICommunityPlatformCommunity";

@Controller("/communityPlatform/member/communities")
export class CommunityplatformMemberCommunitiesController {
  /**
   * Create a new community, enforcing unique naming and member creation policy,
   * via community_platform_communities.
   *
   * Allow an authenticated member to create a new community, supplying a unique
   * name, title, description, slug, and other initial configuration fields. The
   * operation will validate business rules such as name case insensitivity and
   * length, description validity, member creation quotas, and association with
   * the initiating member as the creator.
   *
   * Upon successful creation, the member becomes the initial moderator and
   * owner of the community, and all relevant fields such as creation
   * timestamps, status, and moderation links are recorded as described in the
   * community_platform_communities Prisma schema.
   *
   * Validation includes: enforcing unique name and slug, length and format
   * checks, restrictions against banned/prohibited names, and ensuring the
   * member does not exceed their creation quota (as defined by the associated
   * business rules document). If any validation fails, a clear error is
   * returned with actionable information.
   *
   * Following successful creation, clients may call further API operations to
   * manage images, banners, community rules, or assign additional moderators.
   * Related operations include updating community settings, viewing community
   * details, and deleting or archiving communities (subject to permissions and
   * soft-delete policy).
   *
   * @param connection
   * @param body Community creation information, including unique name, title,
   *   description, slug, and the creator member's identifier.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformCommunity.ICreate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await postCommunityPlatformMemberCommunities({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate the list of communities
   * (community_platform_communities table).
   *
   * Retrieve a paginated and searchable list of communities, allowing the user
   * to filter by status, search by name or title, and sort using different
   * algorithms (hot, new, top, controversial). This endpoint supports members
   * in finding new communities to join as well as moderators/admins in
   * reviewing community listings.
   *
   * Security-wise, access to public communities is typically open to all
   * authenticated users, but the underlying search and metadata returned can be
   * filtered based on authorization context and privacy constraints. Advanced
   * user roles may receive additional metadata such as moderation status or
   * hidden communities depending on platform rules.
   *
   * This endpoint operates on the community_platform_communities table,
   * leveraging fields like name, title, description, slug, status, and
   * created_at. The request body allows for specification of filtering,
   * sorting, and pagination preferences. Business logic, such as maximum
   * communities per page and allowed search filters, is enforced based on
   * platform configuration. List results are optimized for display and
   * bandwidth efficiency.
   *
   * Behavior in case of errors includes returning an empty array for no match,
   * descriptive error messages for invalid filters, and enforcing appropriate
   * rate limits to protect backend resources.
   *
   * @param connection
   * @param body Structured search, sorting, and pagination parameters for
   *   querying the community list.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformCommunity.IRequest,
  ): Promise<IPageICommunityPlatformCommunity.ISummary> {
    try {
      return await patchCommunityPlatformMemberCommunities({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
