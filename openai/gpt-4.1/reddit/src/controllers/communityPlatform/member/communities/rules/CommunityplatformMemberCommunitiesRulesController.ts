import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformMemberCommunitiesCommunityIdRules } from "../../../../../providers/patchCommunityPlatformMemberCommunitiesCommunityIdRules";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { getCommunityPlatformMemberCommunitiesCommunityIdRulesRuleId } from "../../../../../providers/getCommunityPlatformMemberCommunitiesCommunityIdRulesRuleId";

import { IPageICommunityPlatformCommunityRule } from "../../../../../api/structures/IPageICommunityPlatformCommunityRule";
import { ICommunityPlatformCommunityRule } from "../../../../../api/structures/ICommunityPlatformCommunityRule";

@Controller("/communityPlatform/member/communities/:communityId/rules")
export class CommunityplatformMemberCommunitiesRulesController {
  /**
   * Retrieve a paginated and filtered list of rules for a specific community
   * from community_platform_community_rules.
   *
   * Fetch a filtered, sortable, and paginated list of rule documents belonging
   * to a particular community. This is essential for displaying all current and
   * historical community rules, allowing users and moderators to review the
   * governance documents and comply with community-specific policies.
   *
   * The operation supports advanced search queries, filtering by version,
   * filtering by publication date, and ordering by most recent first or by
   * version number. It incorporates complete pagination metadata so UIs can
   * efficiently display scrollable lists or tables of rules. Access to
   * unpublished, draft, or previous rule versions may be restricted to
   * community moderators or administrators, while current published rules are
   * shown to all community members and guests, depending on community privacy
   * settings.
   *
   * This endpoint is related directly to the community_platform_community_rules
   * table, referencing the versioning and body fields. Error cases include
   * invalid community ID, lack of permissions, or if the community has no
   * published rules. The operation integrates with content moderation and
   * compliance workflows for maintaining community standards.
   *
   * @param connection
   * @param communityId The unique identifier of the target community whose
   *   rules are being requested.
   * @param body Filtering, pagination, and query parameters to search and list
   *   rules for this community. Includes version, published date, sorting, and
   *   pagination fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.IRequest,
  ): Promise<IPageICommunityPlatformCommunityRule> {
    try {
      return await patchCommunityPlatformMemberCommunitiesCommunityIdRules({
        member,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single rule document by ID from the
   * community_platform_community_rules table for a community.
   *
   * Fetch a specific versioned rule for a community identified by its unique
   * ruleId and communityId. This enables accurate audit, detailed display, and
   * compliance with community policies for all users with access to that rule.
   *
   * The operation accesses the community_platform_community_rules schema,
   * retrieving the rule's body, version, published timestamp, and related
   * metadata. If the rule is unpublished, deleted, or restricted, additional
   * role checks will limit access only to moderators, administrators, or the
   * creator.
   *
   * Error scenarios include invalid or non-existent ruleId, permissions errors
   * (e.g., guests may not see draft or mod-only rules), or attempts to fetch
   * rules from the wrong community context. The endpoint is often used
   * alongside paginated rule lists to support rule preview, editing, or audit
   * scenarios. Validation of input IDs and enforcing visibility depending on
   * rule status are critical aspects of the provider logic.
   *
   * @param connection
   * @param communityId The unique identifier of the community containing the
   *   rule.
   * @param ruleId The unique identifier of the rule to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":ruleId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await getCommunityPlatformMemberCommunitiesCommunityIdRulesRuleId({
        member,
        communityId,
        ruleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
