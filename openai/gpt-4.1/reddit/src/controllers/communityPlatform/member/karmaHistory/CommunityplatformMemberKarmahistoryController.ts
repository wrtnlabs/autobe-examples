import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformMemberKarmaHistory } from "../../../../providers/patchCommunityPlatformMemberKarmaHistory";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { getCommunityPlatformMemberKarmaHistoryKarmaHistoryId } from "../../../../providers/getCommunityPlatformMemberKarmaHistoryKarmaHistoryId";

import { IPageICommunityPlatformKarmaHistory } from "../../../../api/structures/IPageICommunityPlatformKarmaHistory";
import { ICommunityPlatformKarmaHistory } from "../../../../api/structures/ICommunityPlatformKarmaHistory";

@Controller("/communityPlatform/member/karmaHistory")
export class CommunityplatformMemberKarmahistoryController {
  /**
   * Retrieve a filtered, paginated history of karma events from the
   * community_platform_karma_history table.
   *
   * This API endpoint allows authenticated users to search, filter, and
   * paginate through the history of their own (or, with proper authorization,
   * others') karma-affecting events as tracked in the
   * 'community_platform_karma_history' table. Events may include post votes,
   * comment votes, moderation penalties, reward events, and system/admin
   * adjustments.
   *
   * Request parameters may specify page size, offset, event types, time ranges,
   * affected resource IDs (post, comment, community), and sort order. The
   * endpoint supports advanced queries for self-service user insights, profile
   * displays, and compliance investigation by moderators/admins.
   *
   * Security ensures only users with proper roles access data; regular users
   * see their own event histories, while moderators/admins may access histories
   * for others if they have reason. The response includes relevant event
   * metadata, joined references to posts, comments, and community context where
   * available, using summary details to avoid data overload. The standard error
   * handling covers pagination parameter errors, unauthorized access attempts,
   * and internal server issues.
   *
   * @param connection
   * @param body Search and pagination criteria for karma history retrieval,
   *   including event type, resource scope, date range, sort order, and
   *   pagination settings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformKarmaHistory.IRequest,
  ): Promise<IPageICommunityPlatformKarmaHistory> {
    try {
      return await patchCommunityPlatformMemberKarmaHistory({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific karma history record by ID from the karma history
   * table.
   *
   * This operation returns detailed information for a single karma history
   * event, such as when a user's content (post or comment) was voted on,
   * moderated, or otherwise changed their user karma.
   *
   * The API checks for existence of the record by the given karmaHistoryId
   * (UUID) and returns the entire record, including references to the member,
   * optional community, related post/comment, event type, change amount, event
   * context, and timestamps. Proper authorization is enforced so that members
   * can only see their own detailed karma history and moderators/admins can
   * audit members if needed.
   *
   * Typical usages include displaying the full breakdown of a member's karma
   * changes in their profile, supporting moderation analytics, or providing an
   * audit trail for compliance or user dispute resolution. Errors for not
   * found, unauthorized, or insufficient permission are returned according to
   * policy. This endpoint integrates directly with the
   * community_platform_karma_history table as defined in the Prisma schema.
   *
   * @param connection
   * @param karmaHistoryId Unique identifier of the target karma history record
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":karmaHistoryId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("karmaHistoryId")
    karmaHistoryId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformKarmaHistory> {
    try {
      return await getCommunityPlatformMemberKarmaHistoryKarmaHistoryId({
        member,
        karmaHistoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
