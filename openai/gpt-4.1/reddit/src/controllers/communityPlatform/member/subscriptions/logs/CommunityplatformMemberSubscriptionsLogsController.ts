import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformMemberSubscriptionsSubscriptionIdLogs } from "../../../../../providers/patchCommunityPlatformMemberSubscriptionsSubscriptionIdLogs";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { getCommunityPlatformMemberSubscriptionsSubscriptionIdLogsLogId } from "../../../../../providers/getCommunityPlatformMemberSubscriptionsSubscriptionIdLogsLogId";

import { IPageICommunityPlatformSubscriptionLog } from "../../../../../api/structures/IPageICommunityPlatformSubscriptionLog";
import { ICommunityPlatformSubscriptionLog } from "../../../../../api/structures/ICommunityPlatformSubscriptionLog";

@Controller("/communityPlatform/member/subscriptions/:subscriptionId/logs")
export class CommunityplatformMemberSubscriptionsLogsController {
  /**
   * Search and retrieve paginated subscription log events for a specific
   * subscription (community_platform_subscription_logs).
   *
   * Retrieve a paginated, filtered list of all subscription log events
   * associated with a particular subscription. This operation targets the
   * community_platform_subscription_logs table, leveraging the subscriptionId
   * (which is the parent community_platform_subscriptions primary key) to find
   * all event records (subscribe, unsubscribe, etc.) linked to that
   * subscription.
   *
   * The result enables detailed monitoring of a member's
   * subscription/unsubscription behavior within a specific community,
   * supporting sorting and search across timestamps, event_type, and metadata
   * fields. Useful for audit trails, investigating quota enforcement, or
   * providing a user's historical record of subscription interactions.
   *
   * Permission checks are performed so only the subscription owner, platform
   * admins, or moderators with necessary privileges can access this data.
   * Output is paginated for performance and security. Clients should use
   * appropriate query and pagination parameters as defined in the request DTO,
   * supporting flexible querying and review for moderation or support
   * scenarios.
   *
   * Related operations include retrieving the details of individual log events
   * or fetching the list of subscriptions. This operation is critical for
   * auditing and user account transparency.
   *
   * @param connection
   * @param subscriptionId Unique identifier (UUID) of the
   *   community_platform_subscriptions record for which to retrieve log
   *   events.
   * @param body Request body containing search, filter, and pagination criteria
   *   for subscription log event retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformSubscriptionLog.IRequest,
  ): Promise<IPageICommunityPlatformSubscriptionLog.ISummary> {
    try {
      return await patchCommunityPlatformMemberSubscriptionsSubscriptionIdLogs({
        member,
        subscriptionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific subscription log event by logId for a given
   * subscription (community_platform_subscription_logs).
   *
   * Get the full details of a particular subscription log event tied to a
   * parent subscription. This fetches all columns from the
   * community_platform_subscription_logs table for a specific logId, enforcing
   * linkage to the given subscriptionId for context and permission validation.
   *
   * This enables use cases such as reviewing the exact timestamp, event type
   * (subscribe/unsubscribe), and metadata related to an individual subscription
   * action. Security and access checks ensure that only authorized roles—the
   * subscription owner, relevant moderators, or platform admins—can access the
   * log details.
   *
   * If no event log matching both subscriptionId and logId is found, or if the
   * user is unauthorized, an appropriate error is returned. Useful for support
   * staff, admins, or users verifying their history. This operation is highly
   * granular and links closely to broader subscription management and log list
   * operations for consistency and traceability.
   *
   * @param connection
   * @param subscriptionId Unique identifier (UUID) of the parent
   *   community_platform_subscriptions record containing this log event.
   * @param logId Unique identifier (UUID) of the specific
   *   community_platform_subscription_logs event record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":logId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedParam("logId")
    logId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSubscriptionLog> {
    try {
      return await getCommunityPlatformMemberSubscriptionsSubscriptionIdLogsLogId(
        {
          member,
          subscriptionId,
          logId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
