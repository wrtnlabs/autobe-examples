import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberPostsPostIdVotes } from "../../../../../providers/postCommunityPlatformMemberPostsPostIdVotes";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putCommunityPlatformMemberPostsPostIdVotesVoteId } from "../../../../../providers/putCommunityPlatformMemberPostsPostIdVotesVoteId";
import { deleteCommunityPlatformMemberPostsPostIdVotesVoteId } from "../../../../../providers/deleteCommunityPlatformMemberPostsPostIdVotesVoteId";

import { ICommunityPlatformPostVote } from "../../../../../api/structures/ICommunityPlatformPostVote";

@Controller("/communityPlatform/member/posts/:postId/votes")
export class CommunityplatformMemberPostsVotesController {
  /**
   * Cast an upvote or downvote on a post (community_platform_post_votes).
   *
   * This operation lets a logged-in member upvote or downvote a particular post
   * identified by postId. The system enforces that the user can vote only once
   * per post, automatically updating their previous vote if it exists and
   * recalculating the post score and the user's karma accordingly.
   *
   * Security measures include rate limiting to prevent abuse, ensuring only
   * authenticated members can vote, and rejecting votes from the content's
   * author in accordance with platform rules. Additionally, the action is
   * written to audit and voting logs for compliance and anti-abuse review.
   * Error handling covers attempts by unauthorized users, duplicate or invalid
   * votes, and self-voting scenarios, providing clear error messages in such
   * cases.
   *
   * The operation is tightly linked to the community_platform_post_votes table,
   * storing postId, memberId, vote_value, and timestamps as described in schema
   * comments. Companion operations include updating or revoking a vote and
   * retrieving post vote summaries.
   *
   * @param connection
   * @param postId The unique identifier of the post to which the vote will be
   *   applied.
   * @param body Payload specifying the vote value and additional metadata for
   *   the vote action.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostVote.ICreate,
  ): Promise<ICommunityPlatformPostVote> {
    try {
      return await postCommunityPlatformMemberPostsPostIdVotes({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update or revoke a post vote (community_platform_post_votes).
   *
   * The purpose of this operation is to let a logged-in member update or revoke
   * their existing vote on a given post. Path parameters postId and voteId are
   * required to identify the specific vote. Only the member who cast the
   * original vote is allowed to perform this update, and attempts by others are
   * denied.
   *
   * Authorization ensures only members can update their votes, and role-based
   * access is enforced strictly. The business rules prevent updating a vote on
   * one's own content or making duplicate changes. On a successful request, the
   * operation updates the voting record in the community_platform_post_votes
   * table, adjust the post's score and user's karma, and records the action for
   * compliance and auditing as described in the schema comments. Errors due to
   * lack of permission, illegal updates, or voting on non-existent or deleted
   * posts will be handled with clear, actionable messages.
   *
   * @param connection
   * @param postId The unique identifier of the post associated with the vote.
   * @param voteId The unique identifier of the vote to be updated or revoked.
   * @param body Payload specifying the new vote value or an indication to
   *   revoke the vote.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":voteId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostVote.IUpdate,
  ): Promise<ICommunityPlatformPostVote> {
    try {
      return await putCommunityPlatformMemberPostsPostIdVotesVoteId({
        member,
        postId,
        voteId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a specific user's vote from a given post
   * (community_platform_post_votes).
   *
   * This API endpoint enables users to remove their explicit upvote or downvote
   * from a specific post. It is intended for situations where the user wishes
   * to retract their previous voting actionâ€”such as changing their mind or
   * correcting a mis-click.
   *
   * The operation checks that the voteId belongs to a valid vote entry for the
   * indicated postId and verifies the requesting user's authority. If the
   * requester is not the original voter, but holds a moderator or admin role
   * with the appropriate permissions within the target post's community (or at
   * the platform level), deletion is allowed for moderation or abuse response.
   *
   * Votes are soft-deleted if the schema supports it (see
   * community_platform_post_votes.deleted_at); otherwise, they are permanently
   * removed from the database. Following deletion, the system will trigger
   * recalculation of the associated post's score, update the karma for the
   * voter, and audit-log the activity for review.
   *
   * Errors are returned in the following situations: the vote is not found,
   * belongs to another user without escalation rights, or the vote is already
   * deleted. Rate-limiting is enforced to prevent abuse, particularly by
   * automated (bot) clients.
   *
   * Related business functions include the POST and PATCH vote endpoints for
   * casting or changing a vote, and analytics/sorting recalculation flows for
   * post rankings and user karma.
   *
   * @param connection
   * @param postId Unique identifier of the post on which the vote was cast
   * @param voteId Unique identifier of the vote entry to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberPostsPostIdVotesVoteId({
        member,
        postId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
