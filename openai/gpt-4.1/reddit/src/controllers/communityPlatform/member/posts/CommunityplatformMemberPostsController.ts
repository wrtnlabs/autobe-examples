import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberPosts } from "../../../../providers/postCommunityPlatformMemberPosts";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putCommunityPlatformMemberPostsPostId } from "../../../../providers/putCommunityPlatformMemberPostsPostId";
import { deleteCommunityPlatformMemberPostsPostId } from "../../../../providers/deleteCommunityPlatformMemberPostsPostId";

import { ICommunityPlatformPost } from "../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/member/posts")
export class CommunityplatformMemberPostsController {
  /**
   * Create a new post in the community_platform_posts table by an authenticated
   * member.
   *
   * Create a new post (of type text, link, or image) in a specific community.
   * The operation enforces all validation and business logic as documented:
   * unique title per community, valid content type and length, quota/rate
   * limits, and that the requesting user is an active member (email verified,
   * not banned). The resulting post is associated to the community and user;
   * moderation-required communities may set the initial status to
   * 'mod_queued'.
   *
   * Security: Membership and authentication are required; only 'member',
   * 'moderator', and 'admin' roles may use this endpoint. The API checks for
   * banned users, community access, and all content policy enforcement (banned
   * words, content type, etc.). Any validation failure returns a descriptive
   * error; otherwise, a created post record is returned including assigned ID
   * and status.
   *
   * The request body must conform to platform posting DTO conventions and refer
   * only to valid fields in the posts schema (including references to image
   * uploads or validated links). Associated post images or links are created
   * via subsidiary endpoints or as part of the post creation transaction when
   * provided in body.
   *
   * @param connection
   * @param body Fields required to create a new post, including title, content,
   *   type, and references to the target community and content attachments as
   *   appropriate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformPost.ICreate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await postCommunityPlatformMemberPosts({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing post in the community platform (community_platform_posts
   * table).
   *
   * Update a post's content, title, content type, or status using this
   * operation, referencing the 'community_platform_posts' table. The platform
   * allows the post's author to update their content only when the post is
   * within the editable time window and the user's status is active and not
   * under restriction. Moderators or administrators may also update posts in
   * communities where they hold relevant privileges. All edit operations are
   * recorded for auditing, and the previous content is snapshotted for rollback
   * and transparency using "community_platform_comment_edits" if necessary.
   *
   * The operation enforces permission checks, rate limits, and business rule
   * validation, such as ensuring the title and content respect length and
   * format constraints. The operation also validates against community-specific
   * posting guidelines where applicable. Attempts to edit posts after the
   * window expires fail with an explicit error. Error scenarios include
   * insufficient permissions, non-existent post, or violation of update
   * policies. Edits are always traceable for business compliance and review.
   *
   * All changes are subject to audit trail logging, and the operation interacts
   * with related content (e.g., images, links) as defined by related tables and
   * business flows.
   *
   * @param connection
   * @param postId Unique identifier of the post to update
   * @param body New data for updating the post fields. Only fields allowed by
   *   business rules and schema are included.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPost.IUpdate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await putCommunityPlatformMemberPostsPostId({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (delete or soft-delete) a post in the community platform
   * (community_platform_posts table).
   *
   * Permanently removes or soft-deletes a post from the system, targeting the
   * 'community_platform_posts' table. If a 'deleted_at' field is present,
   * records are soft-deleted by timestamping the field; otherwise, the record
   * is removed entirely (hard delete). Post authors may erase their own posts
   * within policy constraints (e.g., time window), while community moderators
   * or platform admins can erase any post in their scope of authority.
   *
   * All erasure actions are audited and may cascade recursively to comments,
   * votes, images, links, and moderation history related to the post, according
   * to referential integrity and business rules. Attempts to erase posts
   * outside policy constraints—such as expired window or insufficient
   * rights—result in errors with informative messages. Related entities are set
   * to deleted appropriately. This operation is secured to prevent unauthorized
   * erasure and ensures platform compliance.
   *
   * No response body is returned on success. Operation enforces all business,
   * moderation, and audit requirements.
   *
   * @param connection
   * @param postId Unique identifier of the post to erase/delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberPostsPostId({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
