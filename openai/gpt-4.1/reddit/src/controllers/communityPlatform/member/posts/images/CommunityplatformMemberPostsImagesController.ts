import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberPostsPostIdImages } from "../../../../../providers/postCommunityPlatformMemberPostsPostIdImages";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putCommunityPlatformMemberPostsPostIdImagesImageId } from "../../../../../providers/putCommunityPlatformMemberPostsPostIdImagesImageId";
import { deleteCommunityPlatformMemberPostsPostIdImagesImageId } from "../../../../../providers/deleteCommunityPlatformMemberPostsPostIdImagesImageId";

import { ICommunityPlatformPostImage } from "../../../../../api/structures/ICommunityPlatformPostImage";

@Controller("/communityPlatform/member/posts/:postId/images")
export class CommunityplatformMemberPostsImagesController {
  /**
   * Add an image to a post as an attachment (community_platform_post_images,
   * community_platform_file_uploads).
   *
   * Attach a new image to an existing post, enriching the presentation or
   * content variety within a community thread.
   *
   * The user (typically, the original post author) can add images by
   * referencing files that have been successfully uploaded to the platform. The
   * request must specify the relevant post, the pre-uploaded file as its image,
   * and define the image's order within the post (for cases with multiple
   * images). The API enforces all business rules from the database schema and
   * requirement specs, such as limiting total image count, ensuring file
   * format/size/type validity, and permission checks (only the author, mods, or
   * admins may add images to a post). File references must match IDs in the
   * file uploads table and must not already be soft-deleted. All image
   * additions are audited and may be subject to moderation approval flows
   * depending on post status.
   *
   * The underlying tables are 'community_platform_post_images' (for the
   * association) and 'community_platform_file_uploads' (for the referenced
   * file). Input must include the IDs for both the target post and the image
   * properly. Request errors are returned for permission violations,
   * non-existent or invalid file IDs, or exceeding image count per post.
   *
   * @param connection
   * @param postId Unique identifier of the target post to attach the image to.
   * @param body Information for associating an uploaded image with a post,
   *   including the file upload ID and display ordering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostImage.ICreate,
  ): Promise<ICommunityPlatformPostImage> {
    try {
      return await postCommunityPlatformMemberPostsPostIdImages({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update or reorder a post's existing image attachment
   * (community_platform_post_images).
   *
   * Update or reorder an image associated with a post. This is typically used
   * to adjust the sequence of images within a post's gallery or change the file
   * association if image replacement is allowed by future platform policies.
   *
   * This operation requires both the post and image identifiers, as the
   * association table 'community_platform_post_images' uses both as keys for
   * lookups and uniqueness constraints. Only permitted users (original author,
   * moderators, or admins) can change image details. If the operation attempts
   * to assign a duplicate image order for the same post, or references an
   * invalid or soft-deleted file/image, it will result in a detailed error. No
   * actual file upload occurs via this endpoint; only references and orderings
   * are changed.
   *
   * All updates are audited for change tracing according to platform policies
   * and backend logic. Soft-deleted images may not be updated; changes are only
   * permitted on active associations.
   *
   * @param connection
   * @param postId Unique identifier of the target post whose image entry is
   *   being updated.
   * @param imageId Unique identifier of the specific image association (not the
   *   file ID) to update.
   * @param body Information detailing the new ordering for the post image, or
   *   its new associated file if replacement is supported.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":imageId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostImage.IUpdate,
  ): Promise<ICommunityPlatformPostImage> {
    try {
      return await putCommunityPlatformMemberPostsPostIdImagesImageId({
        member,
        postId,
        imageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an image attachment from a post (community_platform_post_images
   * table).
   *
   * This API operation allows the deletion of a specific image from a post,
   * implemented on the community_platform_post_images table. Each post image
   * attachment is referenced by imageId and is tied to a parent post via
   * postId. The operation requires the user to be authenticated as the post
   * owner, moderator of the respective community, or an admin.
   *
   * The endpoint enforces permission checks so that unauthorized attempts are
   * rejected. Deletion is a hard delete (no soft delete field in the post
   * images schema), which means the attachment is permanently removed from the
   * database and the post's image gallery. However, the underlying image file
   * in community_platform_file_uploads remains unless business or file
   * management logic triggers cleanup. If the image does not belong to the
   * specified post, or the post or image does not exist, the API returns an
   * appropriate not-found error.
   *
   * This operation is typically used in post editing workflows or moderation,
   * permitting users to manage or clean up their image attachments. Admin and
   * moderator roles can use the same operation in the context of moderation or
   * content management. Error handling includes validation of ownership,
   * existence of IDs, and rejection of attempts by unauthorized or
   * unauthenticated users. Deletion actions should be logged for audit if
   * required by compliance policy.
   *
   * @param connection
   * @param postId Unique identifier (UUID) of the target post. Identifies the
   *   parent post to which the image is attached.
   * @param imageId Unique identifier (UUID) of the post image attachment to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":imageId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberPostsPostIdImagesImageId({
        member,
        postId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
