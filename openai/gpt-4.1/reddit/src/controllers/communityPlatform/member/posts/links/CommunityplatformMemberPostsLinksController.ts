import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberPostsPostIdLinks } from "../../../../../providers/postCommunityPlatformMemberPostsPostIdLinks";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putCommunityPlatformMemberPostsPostIdLinksLinkId } from "../../../../../providers/putCommunityPlatformMemberPostsPostIdLinksLinkId";
import { deleteCommunityPlatformMemberPostsPostIdLinksLinkId } from "../../../../../providers/deleteCommunityPlatformMemberPostsPostIdLinksLinkId";

import { ICommunityPlatformPostLink } from "../../../../../api/structures/ICommunityPlatformPostLink";

@Controller("/communityPlatform/member/posts/:postId/links")
export class CommunityplatformMemberPostsLinksController {
  /**
   * Attach a new link to an existing post via community_platform_post_links.
   *
   * This operation enables authenticated users to attach a new external
   * hyperlink to an existing post. The endpoint accepts full link information,
   * including the target URL and optional preview metadata, in the request body
   * structured according to the ICommunityPlatformPostLink.ICreate DTO. The
   * parent postId must reference a valid post in the system, and only eligible
   * users (typically the post author or editors) are permitted to add links.
   *
   * The link details are validated per business and technical policiesâ€”URLs
   * must conform to allowed formats, and policies may block certain domains for
   * safety reasons. If the post does not exist or is not editable, the
   * operation returns a clear error. On successful creation, it inserts a new
   * row into community_platform_post_links, relating the link to the parent
   * post and enabling rendering of link preview cards within the post
   * interface.
   *
   * This operation works in conjunction with post creation/edit workflows and
   * is reflected in post detail views as well as the list of attached links.
   * All validation rules concerning URLs, preview metadata, and post ownership
   * are enforced. Errors include forbidden, not-found, and validation-type
   * issues.
   *
   * @param connection
   * @param postId Unique identifier of the post to which the new link will be
   *   attached
   * @param body New link information to be attached to the specified post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostLink.ICreate,
  ): Promise<ICommunityPlatformPostLink> {
    try {
      return await postCommunityPlatformMemberPostsPostIdLinks({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing external link attached to a post in
   * community_platform_post_links.
   *
   * This API operation facilitates the update of an existing link attached to a
   * specific post. It operates on the community_platform_post_links schema
   * which saves external link metadata for posts in the community platform.
   *
   * When a user invokes this endpoint, the system authenticates the user as the
   * post creator or a moderator for the relevant community. The payload allows
   * changes to the URL, preview title, preview description, or preview image
   * URI. The updated data must pass URL validity checks and be verified against
   * blacklists, spam, or prohibited content policies defined at the community
   * or platform level.
   *
   * If a community or global moderation rule marks the link for review (due to
   * flagging or high edit frequency), the post will be queued for moderator
   * review. All updates are logged in the audit trail. The operation is related
   * to endpoints that create new links (POST) and fetch post details or comment
   * threads (GET). Errors are thrown for invalid input, lack of permission, or
   * prohibited changes.
   *
   * Security is enforced by requiring user authentication and
   * ownership/moderator checks. An audit of all edit operations ensures
   * compliance, and any suspicious activity may trigger additional review.
   *
   * @param connection
   * @param postId Unique identifier of the parent post to which the link is
   *   attached.
   * @param linkId Unique identifier of the link to be updated (targeting
   *   post_links row).
   * @param body New link data and preview metadata to update the post link.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":linkId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("linkId")
    linkId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostLink.IUpdate,
  ): Promise<ICommunityPlatformPostLink> {
    try {
      return await putCommunityPlatformMemberPostsPostIdLinksLinkId({
        member,
        postId,
        linkId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a post link (community_platform_post_links) for a given
   * post and link ID.
   *
   * Use this API operation to delete an existing external link from a specific
   * post. The community_platform_post_links table will be affected, with the
   * targeted link record identified by the linkId for the given post. The owner
   * of the post or a moderator assigned to the parent community may perform
   * this deletion. The system ensures that only users with proper authorization
   * may invoke this endpoint, checking content owner or moderator privileges on
   * the specified post.
   *
   * Upon deletion, the link reference is removed, and the post's associated
   * metadata is updated as needed. No soft-deletion field exists in this table
   * for the link, so the operation results in hard deletion from the database.
   * Audit logging is performed for compliance. This operation is directly
   * related to link creation (POST) and link updating (PUT). If any business or
   * moderation rules are violated (e.g., attempt to delete a required or
   * protected link), a specific error is returned.
   *
   * Error scenarios include unauthorized caller, non-existent link or post, and
   * constraint violations (such as required links per post type). Edge case
   * handling ensures that the deletion cannot break referential integrity for
   * the parent post.
   *
   * @param connection
   * @param postId Unique identifier of the parent post.
   * @param linkId Unique identifier of the post link to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":linkId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("linkId")
    linkId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberPostsPostIdLinksLinkId({
        member,
        postId,
        linkId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
