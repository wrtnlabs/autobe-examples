import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPlatformMemberMembersMemberId } from "../../../../providers/putCommunityPlatformMemberMembersMemberId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { ICommunityPlatformMember } from "../../../../api/structures/ICommunityPlatformMember";

@Controller("/communityPlatform/member/members/:memberId")
export class CommunityplatformMemberMembersController {
  /**
   * Update permitted account/profile fields for a specified member in the
   * community_platform_members table.
   *
   * Updates account-related information for an existing registered member.
   * Accepts a request body detailing changes allowed by business policy: this
   * can include email address, status, and potentially other permitted metadata
   * for a member user.
   *
   * This operation is strictly scoped to fields that are considered safe for
   * update by the authenticated user or administrators based on business rules
   * in the community_platform_members table. It never allows modification to
   * security-critical fields such as password_hash via this endpoint. Status
   * changes (e.g., blocking, reactivation) require appropriate permissions,
   * only available to admin or system flows.
   *
   * Input validation ensures emails remain unique and conform to required
   * formats, and account status transitions are respected. The operation
   * returns the full, updated account/profile entity as confirmation. Error
   * handling covers invalid transitions, unique constraint violations,
   * unauthorized update attempts, and not-found errors.
   *
   * @param connection
   * @param memberId Unique identifier (UUID) of the member whose
   *   profile/account is being updated.
   * @param body Fields allowed for update on the community_platform_members
   *   entity (e.g., email, status), per current platform policy.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformMember.IUpdate,
  ): Promise<ICommunityPlatformMember> {
    try {
      return await putCommunityPlatformMemberMembersMemberId({
        member,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
