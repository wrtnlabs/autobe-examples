import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postCommunityPlatformMemberReports } from "../../../../providers/postCommunityPlatformMemberReports";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { ICommunityPlatformReport } from "../../../../api/structures/ICommunityPlatformReport";

@Controller("/communityPlatform/member/reports")
export class CommunityplatformMemberReportsController {
  /**
   * Submit a new content report against a post or comment
   * (community_platform_reports table).
   *
   * Submit a new content abuse, spam, or policy violation report targeting
   * either a specific post or a comment. The reporting member must specify at
   * least the post or comment being reported, select a report category, and
   * provide a reason text if required for that category. The endpoint ensures
   * uniqueness constraints (only one report per user per item) and enforces
   * rate limits (e.g., 10 reports per user per 24 hour period). The report is
   * immediately set to status 'pending' and triggers downstream notification or
   * moderation queuing as required by the platform.
   *
   * On creation, all input is validated for correct references and content
   * format, checking that the member, post, or comment exist and are related,
   * that the category is approved, and that the explanation (if present)
   * conforms to guidelines. The report workflow state, moderation_result, and
   * handler fields are initially unset or nullâ€”these are populated as the
   * moderation process evolves.
   *
   * This endpoint is used by ordinary platform members and does not require
   * moderator/admin permissions. It is open to authenticated users but cannot
   * be abused by guests. If submission fails due to business/regulatory
   * constraints, the endpoint returns appropriate error codes/messages.
   *
   * @param connection
   * @param body Report submission details including reporter, target post or
   *   comment, category, and optional reason.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformReport.ICreate,
  ): Promise<ICommunityPlatformReport> {
    try {
      return await postCommunityPlatformMemberReports({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
