import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformMemberFileUploads } from "../../../../providers/postCommunityPlatformMemberFileUploads";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putCommunityPlatformMemberFileUploadsFileUploadId } from "../../../../providers/putCommunityPlatformMemberFileUploadsFileUploadId";

import { ICommunityPlatformFileUpload } from "../../../../api/structures/ICommunityPlatformFileUpload";

@Controller("/communityPlatform/member/fileUploads")
export class CommunityplatformMemberFileuploadsController {
  /**
   * Upload a new file to the platform and record its metadata in
   * community_platform_file_uploads.
   *
   * Members use this endpoint to upload one or multiple files that will later
   * be attached to posts, communities, or user profiles. When a POST request is
   * made to this endpoint, the system verifies the requester is an
   * authenticated member with the status of 'active'. The file's metadata such
   * as filename, mime type, file size, and URL are recorded, while physical
   * file storage may be handled by an external file store (the system
   * references only the storage key and URL).
   *
   * Rate limits and file-type validation are strictly enforced to prevent
   * abuse. The operation rejects files larger than platform limits or
   * unsupported types, returning a descriptive error. Uploaded files are set to
   * status 'active' and can be referenced by their unique identifier in future
   * content submissions.
   *
   * Security considerations dictate that only members with verified email and
   * appropriate status may upload. Moderators or admins can later manage or
   * delete these files for compliance. The operation is related to content
   * posting but is a prerequisite step for image posts or profile/community
   * branding updates.
   *
   * Other API operations that rely on uploaded files include endpoints for
   * creating posts with images, updating community or profile imagery, and
   * moderation of offensive content.
   *
   * @param connection
   * @param body File upload metadata including member identifier, original
   *   filename, MIME type, file size, and intended purpose. Actual file content
   *   should be uploaded to external storage, with storage key and URL recorded
   *   here.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ICommunityPlatformFileUpload.ICreate,
  ): Promise<ICommunityPlatformFileUpload> {
    try {
      return await postCommunityPlatformMemberFileUploads({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata or logical status of an existing file upload in
   * community_platform_file_uploads.
   *
   * Authenticated members, moderators, or admins use this endpoint to update
   * non-binary metadata for a previously uploaded file. Allowed updates may
   * include renaming the file, updating the status ('active', 'deleted',
   * 'archived'), or changing the associated public URL when the file is moved
   * in storage. The file upload record is uniquely identified by fileUploadId
   * (UUID).
   *
   * This operation enforces strict permission checks: a member may only update
   * their own uploads; moderators and admins may update any file within their
   * scope. Attempting to update the status to 'deleted' marks the file as
   * soft-deleted and prevents further display/association but does not
   * physically remove stored content (to preserve integrity and audit). Updated
   * file uploads retain all prior relationships to posts, comments,
   * communities, or profiles unless deleted.
   *
   * Security requirements and audit protocols are enforced at every update,
   * ensuring the action is logged with member or role details. Related APIs
   * include endpoints for deleting file associations from posts or communities
   * and for retrieving file metadata by id.
   *
   * @param connection
   * @param fileUploadId Unique identifier of the file upload to update.
   * @param body Fields to update within the file upload metadata such as
   *   filename, status, or URL. Only non-binary changes allowed; actual
   *   storage/move/removal is out-of-band.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":fileUploadId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("fileUploadId")
    fileUploadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformFileUpload.IUpdate,
  ): Promise<ICommunityPlatformFileUpload> {
    try {
      return await putCommunityPlatformMemberFileUploadsFileUploadId({
        member,
        fileUploadId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
