import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformMemberKarmaLedgersKarmaLedgerId } from "../../../../providers/getCommunityPlatformMemberKarmaLedgersKarmaLedgerId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { ICommunityPlatformKarmaLedger } from "../../../../api/structures/ICommunityPlatformKarmaLedger";

@Controller("/communityPlatform/member/karmaLedgers/:karmaLedgerId")
export class CommunityplatformMemberKarmaledgersController {
  /**
   * Retrieve a karma ledger record by id (community_platform_karma_ledgers).
   *
   * This API returns a detailed record for a member's karma (and optionally
   * community-specific karma) from the community_platform_karma_ledgers table
   * using its unique identifier. This enables user profile pages, feature
   * checks, and moderation panels to reflect current karma and feature lock
   * status. Accessible to any authenticated "member"; errors returned if id is
   * not found, deleted, or restricted.
   *
   * @param connection
   * @param karmaLedgerId The UUID of the karma ledger to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("karmaLedgerId")
    karmaLedgerId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformKarmaLedger> {
    try {
      return await getCommunityPlatformMemberKarmaLedgersKarmaLedgerId({
        member,
        karmaLedgerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
