import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformMemberProfilesProfileIdPreferences } from "../../../../../providers/getCommunityPlatformMemberProfilesProfileIdPreferences";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { putCommunityPlatformMemberProfilesProfileIdPreferences } from "../../../../../providers/putCommunityPlatformMemberProfilesProfileIdPreferences";

import { ICommunityPlatformProfilePreferences } from "../../../../../api/structures/ICommunityPlatformProfilePreferences";
import { ICommunityPlatformProfilePreference } from "../../../../../api/structures/ICommunityPlatformProfilePreference";

@Controller("/communityPlatform/member/profiles/:profileId/preferences")
export class CommunityplatformMemberProfilesPreferencesController {
  /**
   * Retrieve the profile preferences for a given user from
   * community_platform_profile_preferences.
   *
   * This GET operation returns all current preference settings for an
   * individual user profile from the community_platform_profile_preferences
   * table. Preference items include language choice, theme (e.g., light/dark
   * mode), whether email and badges are displayed, notification customization,
   * and opt-in/opt-out controls for message receipt from non-followers. This
   * assists in rendering user settings in both web and mobile interfaces, and
   * informs backend processes that respect user privacy and notification
   * choices.
   *
   * Profile preferences are only visible to the profile owner and to platform
   * administrators for support and compliance purposes. Unauthorized or public
   * access to profile preferences is strictly forbidden and results in a 403
   * error. When successful, the API returns all persisted settings according to
   * the schema, and ensures members can verify or modify their configuration as
   * needed. This endpoint is closely connected to profile update and settings
   * modification operations, enabling consistent user experience and strong
   * privacy guarantees.
   *
   * @param connection
   * @param profileId The unique identifier of the target profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformProfilePreferences> {
    try {
      return await getCommunityPlatformMemberProfilesProfileIdPreferences({
        member,
        profileId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a user profile's preferences in the
   * community_platform_profile_preferences table.
   *
   * Update the preference settings for a specific user profile. This operation
   * enables modifications on notification preferences, privacy visibility,
   * email sharing, badge display, language choice, theme, and messaging
   * permissions for the profile. It references the
   * community_platform_profile_preferences schema and ensures that only the
   * authenticated profile owner or an administrator can apply changes.
   *
   * Security is enforced so that users cannot change preferences of profiles
   * they do not own, unless they are admins. Changes are written with current
   * timestamps and an audit trail for compliance. Business rules ensure
   * validation of all inputs (such as allowed theme, language formats, and
   * opt-in/out booleans per platform policies).
   *
   * This operation supports seamless adjustment of user experience and privacy
   * for every member, addresses accessibility needs, and underpins the user's
   * right to configure profile display, notification options, and exposure to
   * platforms features. Any sensitive preference (e.g., email visibility or
   * open messaging) is validated and will be restricted according to parental
   * consent or platform age limits, if applicable.
   *
   * @param connection
   * @param profileId The unique identifier of the target user profile whose
   *   preferences are being updated.
   * @param body The updated profile preference fields for the user profile.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformProfilePreference.IUpdate,
  ): Promise<ICommunityPlatformProfilePreference> {
    try {
      return await putCommunityPlatformMemberProfilesProfileIdPreferences({
        member,
        profileId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
