import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPlatformMemberProfilesProfileId } from "../../../../providers/putCommunityPlatformMemberProfilesProfileId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { deleteCommunityPlatformMemberProfilesProfileId } from "../../../../providers/deleteCommunityPlatformMemberProfilesProfileId";

import { ICommunityPlatformProfile } from "../../../../api/structures/ICommunityPlatformProfile";

@Controller("/communityPlatform/member/profiles/:profileId")
export class CommunityplatformMemberProfilesController {
  /**
   * Update an existing profile entry in community_platform_profiles by
   * profileId.
   *
   * Allows an authenticated user to modify their own profile information,
   * including username (which must be unique and within allowed length
   * constraints), biography/about text, avatar image URI, status message, and
   * privacy setting (public or restricted). The request must pass all relevant
   * validations, such as uniqueness checks for username, maximum lengths for
   * bio/status, valid URI formats for avatar, and appropriate privacy option
   * selection.
   *
   * If an administrator or moderator calls this operation for a profile they do
   * not own, the platform must ensure the caller has the correct role and logs
   * the edit for audit and compliance as per requirements. If a member tries to
   * edit a profile they do not own, the operation is rejected with an
   * authorization error.
   *
   * If any part of the input fails business logic validation (e.g., username
   * already in use, bio too long), the operation must provide detailed error
   * information in accordance with error-handling guidelines. On successful
   * update, the operation returns the updated profile entity as defined by the
   * Prisma schema.
   *
   * @param connection
   * @param profileId Unique identifier of the target profile to update.
   * @param body New profile data (username, bio, avatar_uri, etc) to update for
   *   the specified profileId.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformProfile.IUpdate,
  ): Promise<ICommunityPlatformProfile> {
    try {
      return await putCommunityPlatformMemberProfilesProfileId({
        member,
        profileId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a user profile by profile ID in the community_platform_profiles
   * table.
   *
   * This operation allows for the permanent removal of a user profile from the
   * platform based on the specified profileId. Deletion can only be performed
   * by the profile owner or an administrator, enforcing strict permissions as
   * outlined in the business requirements. The profile is soft-deleted, moving
   * its record to an inactive state by setting the deleted_at timestamp. Data
   * relationships with posts, comments, and badges are maintained for audit
   * purposes, even after profile deletion, per compliance policies.
   *
   * Security concerns require that profile deletions are logged, with
   * notification provided to the affected user. Any attempt to delete a profile
   * without the correct authorization is blocked and logged for potential
   * review. Error handling includes responding to invalid or non-existent
   * profile IDs, and preventing deletion if the profile is already marked as
   * deleted.
   *
   * This operation is closely related to account closure and privacy flows. It
   * is important to ensure that all GDPR or similar compliance requirements are
   * enforced, including data retention, right to erasure, and audit logging.
   *
   * @param connection
   * @param profileId The unique identifier of the profile to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberProfilesProfileId({
        member,
        profileId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
