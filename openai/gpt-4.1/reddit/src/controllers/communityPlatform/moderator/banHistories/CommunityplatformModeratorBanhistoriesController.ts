import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformModeratorBanHistoriesBanHistoryId } from "../../../../providers/getCommunityPlatformModeratorBanHistoriesBanHistoryId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { postCommunityPlatformModeratorBanHistories } from "../../../../providers/postCommunityPlatformModeratorBanHistories";

import { ICommunityPlatformBanHistory } from "../../../../api/structures/ICommunityPlatformBanHistory";

@Controller("/communityPlatform/moderator/banHistories")
export class CommunityplatformModeratorBanhistoriesController {
  /**
   * Get detailed information for a specific member ban history record by
   * banHistoryId (community_platform_ban_histories).
   *
   * Retrieve and view a detailed ban history entry for a particular member,
   * moderator, or admin as recorded in the ban histories table.
   *
   * This API operation supports security-critical moderation review and is
   * accessible only to authorized administrators and, as appropriate, to
   * community-level moderators with scope for the affected ban. Path parameter
   * banHistoryId is required and must be a valid UUID matching an existing ban
   * record. The operation returns all properties of the ban including who
   * issued it, for which member, within which community (if applicable),
   * duration, type, whether the ban is active, the reason provided by the
   * moderator or admin, and references to the triggering report if the ban
   * originated from a user report.
   *
   * Data exposure must be carefully controlled: only authorized actors can
   * access ban history, and sensitive information about admin/moderator actors
   * will be displayed according to role and business rules. Error responses are
   * returned if the banHistoryId is not found or the caller lacks permission.
   *
   * This endpoint relates closely to audit and escalation workflows as bans may
   * be referenced in appeal, compliance requests, or moderation dashboards.
   *
   * @param connection
   * @param banHistoryId The unique identifier of the ban history record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":banHistoryId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("banHistoryId")
    banHistoryId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformBanHistory> {
    try {
      return await getCommunityPlatformModeratorBanHistoriesBanHistoryId({
        moderator,
        banHistoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create and record a new member ban in the moderation ban histories table
   * (community_platform_ban_histories).
   *
   * Record the issuance of a new member ban by a moderator or administrator.
   * Required information includes the banned member's ID, the moderator or
   * admin being the issuer, the target community if community-specific (else
   * null for global ban), the reason for the ban, type of ban (temporary or
   * permanent), issue and expiration times, and references to any original user
   * report.
   *
   * The input is validated for correct assignment: only authorized moderators
   * or admins can create bans, and the type, duration, and reasons are checked
   * against community and system policies. Start and end times are used to
   * enforce temporary or permanent status. Duplicate or conflicting active bans
   * are prevented.
   *
   * The operation provides an audit trail for moderation transparency and
   * compliance, with cross-references for appeals, review, or escalation. On
   * success, the complete ban history record is returned. Permission failures
   * and input validation errors are surfaced as error responses.
   *
   * @param connection
   * @param body Ban history creation data, specifying member, issuer,
   *   community, period, reason, and reference metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformBanHistory.ICreate,
  ): Promise<ICommunityPlatformBanHistory> {
    try {
      return await postCommunityPlatformModeratorBanHistories({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
