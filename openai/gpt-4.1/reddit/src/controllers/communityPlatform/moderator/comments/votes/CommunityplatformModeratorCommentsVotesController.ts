import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformModeratorCommentsCommentIdVotes } from "../../../../../providers/patchCommunityPlatformModeratorCommentsCommentIdVotes";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";
import { getCommunityPlatformModeratorCommentsCommentIdVotesVoteId } from "../../../../../providers/getCommunityPlatformModeratorCommentsCommentIdVotesVoteId";

import { IPageICommunityPlatformCommentVote } from "../../../../../api/structures/IPageICommunityPlatformCommentVote";
import { ICommunityPlatformCommentVote } from "../../../../../api/structures/ICommunityPlatformCommentVote";

@Controller("/communityPlatform/moderator/comments/:commentId/votes")
export class CommunityplatformModeratorCommentsVotesController {
  /**
   * Search and retrieve votes on a comment for moderation or audit
   * (community_platform_comment_votes).
   *
   * This API endpoint supports moderators and administrators in reviewing the
   * full set of votes cast on a given comment. It is typically used for
   * detailed analysis during moderation incident review, anti-abuse
   * investigations, or transparency audits.
   *
   * The operation receives a commentId to identify the comment of interest,
   * then applies filters, search, and pagination according to the provided
   * request body (such as by voter, vote type, or date). It responds with a
   * paginated summary of vote logs, indicating upvotes, downvotes, voter
   * identities (with user identity masking as required), and timestamps.
   *
   * Security checks restrict access to users with 'moderator' or 'admin' roles
   * for the relevant comment's community, preventing abuse or unauthorized data
   * exposure. Results are sorted and paginated per request parameters and
   * platform conventions.
   *
   * @param connection
   * @param commentId Unique identifier of the comment whose votes are to be
   *   retrieved
   * @param body Filter, search, and pagination criteria for retrieving votes on
   *   a comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommentVote.IRequest,
  ): Promise<IPageICommunityPlatformCommentVote.ISummary> {
    try {
      return await patchCommunityPlatformModeratorCommentsCommentIdVotes({
        moderator,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific vote on a comment from
   * community_platform_comment_votes.
   *
   * Fetch full details of a single vote record tied to a comment, as stored in
   * community_platform_comment_votes. This endpoint is reserved primarily for
   * audit or moderation use, since regular users do not have access to view
   * voting details of others due to privacy.
   *
   * Security for this operation is strict: only users with the 'admin' or
   * 'moderator' role, and with scope covering the affiliated community, may
   * request this data. Audit logging is strongly recommended for all queries
   * via this endpoint.
   *
   * This operation supports incident review, anti-abuse measures, and vote
   * appeals workflows. Entry data is validated against the Prisma schema to
   * ensure both IDs exist and match a unique vote. If the provided voteId does
   * not match a record for the given commentId, a not found error is returned.
   * This does not return revoked or soft-deleted votes unless specifically
   * requested by additional query parameters.
   *
   * Related operations: vote log retrieval, member voting history (for
   * self-access), comment summary statistics, and comment moderation
   * functions.
   *
   * @param connection
   * @param commentId Unique identifier of the target comment.
   * @param voteId Unique identifier of the vote on the comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":voteId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommentVote> {
    try {
      return await getCommunityPlatformModeratorCommentsCommentIdVotesVoteId({
        moderator,
        commentId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
