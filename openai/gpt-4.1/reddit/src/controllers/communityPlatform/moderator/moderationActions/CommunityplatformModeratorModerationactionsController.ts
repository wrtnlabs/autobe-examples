import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformModeratorModerationActions } from "../../../../providers/postCommunityPlatformModeratorModerationActions";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { patchCommunityPlatformModeratorModerationActions } from "../../../../providers/patchCommunityPlatformModeratorModerationActions";
import { getCommunityPlatformModeratorModerationActionsModerationActionId } from "../../../../providers/getCommunityPlatformModeratorModerationActionsModerationActionId";
import { putCommunityPlatformModeratorModerationActionsModerationActionId } from "../../../../providers/putCommunityPlatformModeratorModerationActionsModerationActionId";

import { ICommunityPlatformModerationAction } from "../../../../api/structures/ICommunityPlatformModerationAction";
import { IPageICommunityPlatformModerationAction } from "../../../../api/structures/IPageICommunityPlatformModerationAction";

@Controller("/communityPlatform/moderator/moderationActions")
export class CommunityplatformModeratorModerationactionsController {
  /**
   * Create a new moderation action record
   * (community_platform_moderation_actions).
   *
   * This API operation enables authorized moderators or platform administrators
   * to document actions taken in response to moderation needs, such as the
   * removal of posts or comments, issuing warnings or bans, or performing
   * escalations. Each moderation action includes metadata specifying the
   * actor's identity, the nature of the moderation action, links to the
   * affected content, and a reference to the related report if one exists.
   *
   * Security for this operation is critical, as only users with moderator or
   * admin privileges are permitted to perform moderation actions. Access
   * control must tightly restrict use, with every successful action recorded
   * for compliance and later review. Sensitive audit trails are maintained, and
   * inputs are validated to ensure the legitimacy and appropriateness of each
   * moderation action.
   *
   * This operation is fundamental to the moderation process, supporting the
   * enforcement of platform and community standards, user safety, and content
   * policy. Error scenarios include invalid permissions, references to
   * nonexistent reports or content, or improperly formatted action types, all
   * of which result in clear validation errors.
   *
   * @param connection
   * @param body Details of the moderation action to record, including actor,
   *   target post or comment, action type, and associated report if any.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformModerationAction.ICreate,
  ): Promise<ICommunityPlatformModerationAction> {
    try {
      return await postCommunityPlatformModeratorModerationActions({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of moderation actions from the
   * moderation log table.
   *
   * Fetch a filtered and paginated list of moderation actions performed by
   * moderators and admins as recorded in the
   * community_platform_moderation_actions table. Each action record includes
   * references to the actor (moderator or admin), action type, targeted post or
   * comment, related report (if any), a description, and the creation
   * timestamp, supporting a comprehensive moderation audit process.
   *
   * This operation is restricted to admin and moderator roles due to the
   * potentially sensitive nature of moderation actions and audit data. By
   * default, it supports advanced filtering for action_type, actor_id,
   * target_post_id, target_comment_id, report_id, date ranges, and description
   * keywords, in order to allow for effective incident review, analytics, and
   * compliance checks.
   *
   * Pagination and sorting options follow platform standards and are required
   * for large datasets. Sensitive information, such as moderator notes or
   * private user references within descriptions, is filtered or redacted
   * according to the authorization role of the requester.
   *
   * Related operations include fetching detail for a single moderation action,
   * exporting logs (admin only), and reviewing associated reports or
   * escalations. Errors are returned for insufficient permissions, invalid
   * filters, or excessive pagination requests.
   *
   * Field references, query capabilities, and privacy enforcement are strictly
   * matched to the structure and comments of the
   * community_platform_moderation_actions Prisma model.
   *
   * @param connection
   * @param body Filtering criteria and pagination/sorting parameters for
   *   moderation action search and log review.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformModerationAction.IRequest,
  ): Promise<IPageICommunityPlatformModerationAction.ISummary> {
    try {
      return await patchCommunityPlatformModeratorModerationActions({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full detail for a specific moderation action by its unique identifier.
   *
   * Retrieve complete detail for a single moderation action event from the
   * moderation log as stored in the community_platform_moderation_actions
   * table. This API allows admins or moderators to audit, review, or debug
   * specific moderation interventions, including actor identity, moderation
   * action type, affected post or comment (with IDs), any linked report,
   * descriptive notes, and the creation timestamp.
   *
   * Access to this endpoint is limited to admin and moderator roles, as the
   * data may contain sensitive references or information about moderation
   * rationale, actions on specific users, or report content. The returned
   * detail is subject to privacy controls and may redact or mask fields for
   * non-superuser moderators as per company privacy and security standards.
   *
   * Expected usage includes post-incident reviews, handling appeals, compliance
   * checks, and system audits. Related API operations include listing all
   * moderation actions with advanced filtering, exporting audit logs, and
   * reviewing escalation chains. Error responses are provided for unauthorized
   * access or if the specified action ID does not exist.
   *
   * All returned fields, error handling, and traceability requirements strictly
   * match the structure and documentation of the
   * community_platform_moderation_actions Prisma schema.
   *
   * @param connection
   * @param moderationActionId Unique identifier (UUID) of the moderation action
   *   log entry to retrieve, as stored in the
   *   community_platform_moderation_actions table.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationActionId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformModerationAction> {
    try {
      return await getCommunityPlatformModeratorModerationActionsModerationActionId(
        {
          moderator,
          moderationActionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing moderation action record
   * (community_platform_moderation_actions).
   *
   * This operation supports moderation workflows where additional details or
   * outcome updates need to be recorded for previously performed moderation
   * actions. Only authorized moderators or admins can invoke this operation.
   * Modifications may include updating the description, clarifying reasons, or
   * amending metadata, but should never overwrite the nature or subject of the
   * original intervention.
   *
   * For integrity, all updates are timestamped and associated with the updating
   * actor. Security checks ensure that only the appropriate roles may modify
   * records, and all changes are logged for subsequent compliance review.
   * Business logic enforces that only allowed fields are updatable after a
   * moderation action is logged, and changes are subject to validation against
   * platform policy.
   *
   * This endpoint is commonly paired with the moderation action creation
   * endpoint and supports full moderation lifecycles, including documentation
   * of appeals, clarifications, or policy-driven record amendments. Potential
   * errors include reference to nonexistent actions, unauthorized modification
   * attempts, or updates attempting to override protected fields.
   *
   * @param connection
   * @param moderationActionId Unique identifier of the moderation action to
   *   update.
   * @param body Updated details for the moderation action, allowing changes to
   *   description or metadata, respecting audit and policy constraints.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderationActionId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformModerationAction.IUpdate,
  ): Promise<ICommunityPlatformModerationAction> {
    try {
      return await putCommunityPlatformModeratorModerationActionsModerationActionId(
        {
          moderator,
          moderationActionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
