import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPlatformModeratorProfilesProfileIdBadgesBadgeId } from "../../../../../providers/putCommunityPlatformModeratorProfilesProfileIdBadgesBadgeId";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";
import { deleteCommunityPlatformModeratorProfilesProfileIdBadgesBadgeId } from "../../../../../providers/deleteCommunityPlatformModeratorProfilesProfileIdBadgesBadgeId";

import { ICommunityPlatformProfileBadge } from "../../../../../api/structures/ICommunityPlatformProfileBadge";

@Controller("/communityPlatform/moderator/profiles/:profileId/badges/:badgeId")
export class CommunityplatformModeratorProfilesBadgesController {
  /**
   * Update a specific badge for a user profile as defined in the
   * community_platform_profile_badges table.
   *
   * Update a badge entry for a user profile within the community platform. This
   * operation targets the community_platform_profile_badges table, which stores
   * all public and earned badges displayed on a user's profile. The badge is
   * uniquely identified within the scope of a specific profile.
   *
   * Authorization is enforced by allowing profile owners, assigned community
   * moderators (for badges granted via moderation/karma awards), and system
   * administrators to update badge details. Business logic ensures that updates
   * are limited to badge properties such as badge_name, badge_type, or
   * revocation info, and cannot reassign the badge to another profile or
   * arbitrarily alter relationships to karma awards except as permitted by
   * platform policy.
   *
   * The request body must supply a valid ICommunityPlatformProfileBadge.IUpdate
   * DTO, which is checked against all badge update validation rules: only
   * fields permitted for update are processed, with constraints on strings and
   * timestamps as per the schema. Errors, such as attempting to edit non-owned
   * or non-existent badges, return informative responses as indicated in the
   * error handling section of requirements.
   *
   * Other related flows are profile badge creation/deletion, badge award
   * events, and retrieval/display of earned badges in profile and community
   * contexts.
   *
   * @param connection
   * @param profileId Unique identifier of the target user profile whose badge
   *   is being updated.
   * @param badgeId Unique identifier of the badge assigned to the profile to be
   *   updated.
   * @param body Update details for the specified badge on the user profile.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
    @TypedParam("badgeId")
    badgeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformProfileBadge.IUpdate,
  ): Promise<ICommunityPlatformProfileBadge> {
    try {
      return await putCommunityPlatformModeratorProfilesProfileIdBadgesBadgeId({
        moderator,
        profileId,
        badgeId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (revoke/remove) a badge from a user profile in the
   * community_platform_profile_badges table.
   *
   * Remove or revoke a badge from a user's profile by its unique identifier.
   * This operation acts on the community_platform_profile_badges table, which
   * contains all badge assignments granted to user profiles, including those
   * tied to karma awards or granted by moderators. The badgeId must be a valid
   * badge currently assigned to the specified profile.
   *
   * Authorization is enforced to allow only badge owners (profile members),
   * assigned moderators with appropriate permissions, or platform
   * administrators to perform badge deletion. Business rules ensure the correct
   * badge/profile relationship, soft delete or revocation timestamping, and
   * full audit trail is maintained for each badge deletion, in line with
   * platform compliance requirements.
   *
   * Errors are returned if the profile or badge ID does not exist, if there is
   * a mismatch between the profile and badge association, or if insufficient
   * permissions are detected. This operation may trigger notifications or
   * additional compliance actions as dictated by business logic.
   *
   * Typical use cases include user-initiated badge revocation, moderator-forced
   * removal for rule violations, and admin-driven compliance cleanups.
   *
   * @param connection
   * @param profileId Unique identifier of the user profile whose badge is to be
   *   deleted.
   * @param badgeId Unique identifier of the badge being deleted from the
   *   profile.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
    @TypedParam("badgeId")
    badgeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformModeratorProfilesProfileIdBadgesBadgeId(
        {
          moderator,
          profileId,
          badgeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
