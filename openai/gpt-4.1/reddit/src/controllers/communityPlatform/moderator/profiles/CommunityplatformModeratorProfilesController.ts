import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchCommunityPlatformModeratorProfiles } from "../../../../providers/patchCommunityPlatformModeratorProfiles";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { IPageICommunityPlatformProfile } from "../../../../api/structures/IPageICommunityPlatformProfile";
import { ICommunityPlatformProfile } from "../../../../api/structures/ICommunityPlatformProfile";

@Controller("/communityPlatform/moderator/profiles")
export class CommunityplatformModeratorProfilesController {
  /**
   * Search and retrieve paginated user profiles, based on
   * community_platform_profiles.
   *
   * This API operation retrieves a filtered and paginated collection of user
   * profiles from the community_platform_profiles table, supporting discovery,
   * moderation, and analytics scenarios. Profile records include basic details
   * such as username, display name, avatar URI, public visibility flag, short
   * status, bio, and related timestamps.
   *
   * Moderators and admins can use this endpoint to search for suspicious or
   * noteworthy accounts by text, time window, or status. Regular members may
   * have restricted visibility (or none at all) depending on platform settings
   * and their own authentication state; only public profiles are returned
   * unless higher privileges are assigned. Sensitive user data such as email,
   * history, or preferences are omitted or redacted for privacy. Filtering
   * supports username, status, creation and update times, and text search
   * within bios or display names. Sorting by creation, activity, or username is
   * available to help discover new or trending users.
   *
   * Paginated results improve usability for large user bases. Typically, this
   * endpoint would be called by admin dashboards, user search modules, or
   * community moderation tools for managing and analyzing platform
   * communities.
   *
   * @param connection
   * @param body Search, filtering, and pagination criteria for selecting user
   *   profiles. Supports username, status, and bio search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformProfile.IRequest,
  ): Promise<IPageICommunityPlatformProfile> {
    try {
      return await patchCommunityPlatformModeratorProfiles({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
