import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformModeratorModerationQueues } from "../../../../providers/postCommunityPlatformModeratorModerationQueues";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { patchCommunityPlatformModeratorModerationQueues } from "../../../../providers/patchCommunityPlatformModeratorModerationQueues";
import { getCommunityPlatformModeratorModerationQueuesModerationQueueId } from "../../../../providers/getCommunityPlatformModeratorModerationQueuesModerationQueueId";
import { putCommunityPlatformModeratorModerationQueuesModerationQueueId } from "../../../../providers/putCommunityPlatformModeratorModerationQueuesModerationQueueId";
import { deleteCommunityPlatformModeratorModerationQueuesModerationQueueId } from "../../../../providers/deleteCommunityPlatformModeratorModerationQueuesModerationQueueId";

import { ICommunityPlatformModerationQueue } from "../../../../api/structures/ICommunityPlatformModerationQueue";
import { IPageICommunityPlatformModerationQueue } from "../../../../api/structures/IPageICommunityPlatformModerationQueue";

@Controller("/communityPlatform/moderator/moderationQueues")
export class CommunityplatformModeratorModerationqueuesController {
  /**
   * Create a new moderation queue entry for reported content
   * (CommunityPlatformModerationQueue).
   *
   * This operation allows a moderator (or admin) to submit a new report or
   * escalate an item to the moderation queue for a specific community. Upon
   * submission, a new queue entry is created, linking to the target community,
   * the original report, and (optionally) assigning a moderator responsible for
   * handling the report. It sets an initial workflow status (typically
   * 'pending') and can specify processing priority (e.g., normal, high).
   *
   * Moderators and administrators use this endpoint to triage and route reports
   * for efficient moderation action. Status, assigned moderator, and other
   * workflow fields can be updated after creation using the update endpoint.
   * The moderation queue supports audit, escalation, and workload balancing per
   * community. Security is enforced so only authorized moderators/admins can
   * create queue entries.
   *
   * The Prisma schema requires the community_id (referencing the target
   * community), report_id (referencing the original report), status, priority,
   * and optionally assigned_moderator_id. All relationships must use valid
   * UUIDs for referenced entities. Errors are returned if references are
   * invalid or if business logic (such as exceeding queue thresholds) is
   * violated. This operation is intended for use by moderators and admins only,
   * and is critical for abuse handling, compliance, and process transparency.
   *
   * @param connection
   * @param body Information for the new moderation queue entry: target
   *   community, report, status, priority, and optionally assigned moderator.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformModerationQueue.ICreate,
  ): Promise<ICommunityPlatformModerationQueue> {
    try {
      return await postCommunityPlatformModeratorModerationQueues({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search moderation queues for pending and ongoing content reports
   * (community_platform_moderation_queues).
   *
   * Retrieve a filtered and paginated list of moderation queues that correspond
   * to open, pending, or escalated content reports awaiting moderator or admin
   * attention. Each queue summarizes the status, referenced report, assigned
   * moderation actor (if any), target community, and workflow priority.
   *
   * This operation is fundamental for moderation dashboards, allowing efficient
   * triage and prioritization of workload. Filtering by community, assigned
   * moderator, status, and priority enables targeted review for large
   * platforms. Pagination is required for scale and usability.
   *
   * Authorization is limited to users with moderator or admin roles; regular
   * members are strictly forbidden. Moderators will only see queues in
   * communities for which they are assigned; admins may view all.
   *
   * Moderation queues reference the underlying report, community, and assigned
   * actor, linking to actions such as resolving or escalating. This endpoint
   * should be used alongside related operations for report resolution and audit
   * trail retrieval.
   *
   * Proper error handling is provided for unauthorized attempts, invalid search
   * criteria, or exceeding result page limits. All usages should observe abuse
   * prevention and avoid information leakage beyond user's permission scope.
   *
   * @param connection
   * @param body Search/filter and pagination parameters for moderation queue
   *   listing. Supports filtering by status, assigned moderator, community, and
   *   priority, as well as pagination controls.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformModerationQueue.IRequest,
  ): Promise<IPageICommunityPlatformModerationQueue.ISummary> {
    try {
      return await patchCommunityPlatformModeratorModerationQueues({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific moderation queue entry
   * (community_platform_moderation_queues).
   *
   * Fetches the full detail of a single moderation queue entry, given its
   * unique identifier. The details returned include the current status
   * (pending, in progress, resolved, escalated), associated report details,
   * assigned moderator (if any), target community, and workflow priority. Also
   * includes timestamps for creation and last update, and any reference to
   * related moderator action history.
   *
   * This endpoint is used by moderation dashboards when a moderator or admin
   * selects a queue for review, prior to taking actions such as resolve or
   * escalation. Sensitive fields (e.g., original reporter, moderation notes,
   * escalation reasons) are exposed in accordance with the permissions of the
   * authenticated user: moderators see full detail for their assigned
   * communities, admins may see all. Unauthorized or member roles are strictly
   * forbidden from accessing this resource.
   *
   * The operation expects a valid UUID for the moderationQueueId parameter,
   * performs authorization checks, and returns either the queue details or
   * appropriate error if not found or not permitted. Used in conjunction with
   * related endpoints for moderation actions and audit trails.
   *
   * @param connection
   * @param moderationQueueId Unique identifier for the moderation queue entry
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationQueueId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("moderationQueueId")
    moderationQueueId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformModerationQueue> {
    try {
      return await getCommunityPlatformModeratorModerationQueuesModerationQueueId(
        {
          moderator,
          moderationQueueId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing moderation queue entry
   * (CommunityPlatformModerationQueue).
   *
   * This endpoint allows authorized moderators or admins to update a queued
   * moderation task for a specific reported content item. Typical updates
   * include changing the queue status (e.g., from 'pending' to 'in_progress' or
   * 'resolved'), setting or updating the assigned moderator, or adjusting the
   * handling priority (e.g., for urgent content such as abuse).
   *
   * The community_platform_moderation_queues table requires that
   * moderationQueueId matches an existing queue entry, and that any referenced
   * moderator or report IDs are valid UUIDs, respecting referential integrity.
   * Business logic enforces valid status transitions, role-based permissions
   * (moderators and admins only), and prevents unauthorized updates. Attempts
   * to update non-existent or finalized (already resolved) queue entries return
   * errors. This operation is vital for tracking the resolution path of abuse
   * reports and ensuring transparent, auditable moderation workflows.
   *
   * Related business processes include notification of moderators upon new or
   * escalated assignments and audit logging of all queue status changes, as
   * referenced in the requirements analysis and the Prisma table comments.
   *
   * @param connection
   * @param moderationQueueId Unique identifier of the target moderation queue
   *   entry to update.
   * @param body Fields for updating the moderation queue: status, assigned
   *   moderator, priority, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderationQueueId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("moderationQueueId")
    moderationQueueId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformModerationQueue.IUpdate,
  ): Promise<ICommunityPlatformModerationQueue> {
    try {
      return await putCommunityPlatformModeratorModerationQueuesModerationQueueId(
        {
          moderator,
          moderationQueueId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase a moderation queue entry from the moderation queue table
   * after resolution.
   *
   * Delete a specific moderation queue entry from the system, permanently
   * removing its record from the database. This operation is used for
   * moderation cases that have been fully resolved or closed, ensuring that the
   * moderation queue remains manageable and up-to-date.
   *
   * Only users with the moderator or admin role may perform this operation, and
   * only for queues in communities they moderate (or all queues if admin).
   * Deletion attempts on active, unresolved, or escalated entries will be
   * rejected.
   *
   * Prior to deletion, all related moderation actions and audit logs should be
   * reviewed to ensure that removing the entry does not compromise compliance
   * record keeping. This action is logged for traceability, with an audit log
   * entry recording the actor, time, and details of the removal.
   *
   * @param connection
   * @param moderationQueueId Unique identifier of the target moderation queue
   *   entry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderationQueueId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("moderationQueueId")
    moderationQueueId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformModeratorModerationQueuesModerationQueueId(
        {
          moderator,
          moderationQueueId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
