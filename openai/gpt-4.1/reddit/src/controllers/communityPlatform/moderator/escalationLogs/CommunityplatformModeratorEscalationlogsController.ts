import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformModeratorEscalationLogs } from "../../../../providers/postCommunityPlatformModeratorEscalationLogs";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { patchCommunityPlatformModeratorEscalationLogs } from "../../../../providers/patchCommunityPlatformModeratorEscalationLogs";
import { getCommunityPlatformModeratorEscalationLogsEscalationLogId } from "../../../../providers/getCommunityPlatformModeratorEscalationLogsEscalationLogId";

import { ICommunityPlatformEscalationLog } from "../../../../api/structures/ICommunityPlatformEscalationLog";
import { IPageICommunityPlatformEscalationLog } from "../../../../api/structures/IPageICommunityPlatformEscalationLog";

@Controller("/communityPlatform/moderator/escalationLogs")
export class CommunityplatformModeratorEscalationlogsController {
  /**
   * Create a new escalation log entry for moderation/admin review in
   * community_platform_escalation_logs.
   *
   * Create an escalation log to elevate unresolved or special-case moderation
   * reports to administrative review. This operation records a new escalation
   * entry with details including the initiator, target report, escalation
   * reason, destination admin (if any), and initial status.
   *
   * The workflow requires precise validation: the associated report must exist
   * and the requesting user must have a legitimate reason and role to escalate.
   * The Prisma schema assures relational integrity with references to reports,
   * admins, and members. All escalations are subsequently visible to assigned
   * admins and tracked for audit purposes to ensure complete transparency of
   * the moderation process.
   *
   * Security and abuse-prevention considerations are critical; only
   * authenticated members, moderators, or admins may create an escalation, and
   * all actions are thoroughly logged. Invalid references, lack of rights, or
   * missing required information results in explicit error responses as per
   * audit and platform policy.
   *
   * @param connection
   * @param body Details required to create an escalation log entry, including
   *   reason, related report, and assigned admin (if applicable).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformEscalationLog.ICreate,
  ): Promise<ICommunityPlatformEscalationLog> {
    try {
      return await postCommunityPlatformModeratorEscalationLogs({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve and search escalation logs (admin and authorized moderators).
   *
   * This endpoint enables authorized users to search, paginate, and filter
   * escalation log records from the 'community_platform_escalation_logs' table.
   * Escalation logs record all transfers of unresolved or complex moderation
   * reports from general moderators to admin review, documenting when and why
   * escalation occurred, who initiated it, and how it was ultimately resolved.
   *
   * The operation provides robust filtering options by escalation status
   * (pending, in_review, resolved, closed), report ID, initiator, assigned
   * admin, and event time range. The response object includes both the
   * paginated list of escalation log summaries and pagination metadata (e.g.,
   * total count, current page). Authorization is restricted to users with
   * appropriate permissions—typically administrators and assigned moderators
   * with community management rights.
   *
   * Additional security considerations include preventing access to escalations
   * unrelated to the requester's scope (e.g., moderators cannot view
   * escalations outside their community assignment, and only admins see all
   * logs). Filtering may also be applied based on time period for audit queries
   * or compliance checks.
   *
   * If no logs match the given criteria or page, the response returns an empty
   * result set with appropriate pagination metadata.
   *
   * @param connection
   * @param body Search criteria and pagination options for escalation log
   *   filtering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformEscalationLog.IRequest,
  ): Promise<IPageICommunityPlatformEscalationLog.ISummary> {
    try {
      return await patchCommunityPlatformModeratorEscalationLogs({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific escalation log entry from
   * community_platform_escalation_logs by its ID.
   *
   * Retrieve the complete content of an escalation log for moderation or abuse
   * reporting workflow. This operation provides a comprehensive view of the
   * escalation process, including all status changes, participant details,
   * escalation rationale, and resulting actions as tracked in the
   * community_platform_escalation_logs table.
   *
   * Access to detailed escalation logs is restricted to assigned moderators for
   * their communities and platform administrators. Sensitive user and
   * moderation data is displayed only if the requester holds appropriate role
   * authorization, ensuring privacy and compliance with platform policy.
   *
   * The operation enforces precise access control by checking the requesting
   * user’s rights against the Prisma schema relationships for escalations,
   * members, and admins. It requires a valid escalationLogId parameter
   * formatted as a UUID and returns all information necessary for a thorough
   * audit, dispute review, or compliance investigation. Error responses are
   * provided for invalid IDs or unauthorized access attempts.
   *
   * @param connection
   * @param escalationLogId Unique identifier (UUID) of the escalation log to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":escalationLogId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("escalationLogId")
    escalationLogId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformEscalationLog> {
    try {
      return await getCommunityPlatformModeratorEscalationLogsEscalationLogId({
        moderator,
        escalationLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
