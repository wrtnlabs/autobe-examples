import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformModeratorReports } from "../../../../providers/patchCommunityPlatformModeratorReports";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { getCommunityPlatformModeratorReportsReportId } from "../../../../providers/getCommunityPlatformModeratorReportsReportId";
import { putCommunityPlatformModeratorReportsReportId } from "../../../../providers/putCommunityPlatformModeratorReportsReportId";
import { deleteCommunityPlatformModeratorReportsReportId } from "../../../../providers/deleteCommunityPlatformModeratorReportsReportId";

import { IPageICommunityPlatformReport } from "../../../../api/structures/IPageICommunityPlatformReport";
import { ICommunityPlatformReport } from "../../../../api/structures/ICommunityPlatformReport";

@Controller("/communityPlatform/moderator/reports")
export class CommunityplatformModeratorReportsController {
  /**
   * Retrieve a paginated, filtered list of submitted content reports from
   * community_platform_reports for moderation review.
   *
   * Search and retrieve reports submitted by users flagging inappropriate
   * content, via the community_platform_reports table. This operation enables
   * moderators and admins to access lists of content reports, filter them by
   * categories, workflow status, date, or specific content types (post or
   * comment), and sort by urgency, recency or severity for efficient review.
   *
   * Security is enforced so that only users with moderator or admin roles can
   * access this information, ensuring privacy and limiting exposure of
   * sensitive complaints. Business logic incorporates pagination and
   * query-based searches to allow bulk or targeted moderation workflows. The
   * response data integrates report status, moderator actions, report category
   * and reason, and associated content/user linkage as required for
   * comprehensive moderation.
   *
   * Use of this endpoint supports scalable, compliant review and tracking of
   * all report events, upholding community governance and response standards.
   * Errors include requests by unauthorized users or invalid parameters for
   * filtering or sorting queries.
   *
   * @param connection
   * @param body Search and pagination filters for querying reports.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformReport.IRequest,
  ): Promise<IPageICommunityPlatformReport.ISummary> {
    try {
      return await patchCommunityPlatformModeratorReports({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific content report
   * (community_platform_reports table).
   *
   * Retrieve full details and workflow status for a single content report, as
   * identified by reportId. This operation enables moderators, admins, or
   * authorized reviewers to observe the reporting member, the target post or
   * comment, category and reason, moderation actions taken, and workflow status
   * (pending, resolved, escalated, etc.), according to platform requirements
   * and compliance needs.
   *
   * Security is critical: Only users with appropriate moderator or
   * administrative permissions may access detailed report records, with all
   * actions audited for compliance. Sensitive details such as reporter
   * identity, free-form reasons, and moderation history are only revealed to
   * those with the necessary privileges, and may be redacted for
   * lower-privilege viewers.
   *
   * The underlying community_platform_reports table includes all necessary
   * data, joined where relevant to referenced post, comment, and moderation
   * category tables. The endpoint should handle errors gracefully if the report
   * does not exist or the user lacks permissions, logging all access for trace
   * and review.
   *
   * @param connection
   * @param reportId Unique identifier for the report to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformReport> {
    try {
      return await getCommunityPlatformModeratorReportsReportId({
        moderator,
        reportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the status, result, or assigned moderator/admin for a report
   * (community_platform_reports).
   *
   * This API endpoint allows platform moderators or administrators to update
   * the status, moderation result, or moderator assignment for a specific
   * report of inappropriate content. Common status changes include marking the
   * report as 'under_review', 'resolved', 'dismissed', or 'escalated', and
   * providing details regarding any moderator actions taken (such as content
   * removal, user warning, or ban).
   *
   * Strict authorization is enforced: only the moderator, admin, or designated
   * staff may call this endpoint. The business logic ensures that report state
   * transitions follow allowed moderation workflows as per platform
   * requirements (e.g., only escalated reports can be moved to admin review, or
   * only resolved/dismissed status may close a report). All actions are tracked
   * for audit purposes, and actors must be verifiable
   * community_platform_moderators or community_platform_admins. Related content
   * (posts/comments) and member status may be updated as a side-effect
   * depending on moderation result.
   *
   * Request body uses the ICommunityPlatformReport.IUpdate schema and must
   * include the report status, moderation_result, and identifier for the acting
   * user. Error handling details must follow platform error response standards
   * for insufficient permissions or invalid state transitions. This endpoint is
   * part of moderation/administrative workflows and should not be exposed to
   * regular end users.
   *
   * @param connection
   * @param reportId The UUID of the report to be updated.
   * @param body Information used to update the report status, moderation
   *   result, or assigned moderator/admin.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reportId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformReport.IUpdate,
  ): Promise<ICommunityPlatformReport> {
    try {
      return await putCommunityPlatformModeratorReportsReportId({
        moderator,
        reportId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific report of inappropriate content from
   * community_platform_reports.
   *
   * This API endpoint enables a moderator or administrator to permanently
   * delete a report record from the platform, removing it from the
   * community_platform_reports table and clearing any moderation workflow
   * history associated with that report. Deleting a report may be allowed only
   * for resolved, dismissed, or clearly invalid/abusive reports, in line with
   * platform audit and compliance policy.
   *
   * Appropriate authorization (moderator or admin) is strictly enforced. Any
   * action is logged with actor, timestamp, and the specific reason for
   * deletion, as required for forensic audit. The operation may fail with an
   * error if the report is not eligible for deletion under business rules
   * (e.g., if still pending review or under escalation).
   *
   * No response body is returned on success. Proper error handling must be
   * implemented to inform the user of permission or state errors. This endpoint
   * should never be accessible by regular members or guests, and is only for
   * staff-level moderation usage.
   *
   * @param connection
   * @param reportId The UUID of the report to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reportId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformModeratorReportsReportId({
        moderator,
        reportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
