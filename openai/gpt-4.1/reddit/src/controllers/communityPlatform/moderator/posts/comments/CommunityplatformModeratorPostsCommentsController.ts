import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteCommunityPlatformModeratorPostsPostIdCommentsCommentId } from "../../../../../providers/deleteCommunityPlatformModeratorPostsPostIdCommentsCommentId";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";

@Controller("/communityPlatform/moderator/posts/:postId/comments/:commentId")
export class CommunityplatformModeratorPostsCommentsController {
  /**
   * Permanently remove (soft delete) a comment from a post, restricted to
   * author, moderators, or admins as per permissions
   * (community_platform_comments).
   *
   * This DELETE operation enables end-users (authors), community moderators, or
   * admins to delete individual comments within a post. According to the Prisma
   * schema, each comment is identified by 'id' and may be nested (using
   * parent_id). Comments include a soft delete field, allowing the comment to
   * be marked as deleted rather than physically removed, supporting both user
   * privacy and retention/audit requirements.
   *
   * Authorization checks ensure that only the author, a community moderator (as
   * identified via moderator assignments), or a platform admin may perform the
   * deletion. The API must verify the acting user's role and permissions before
   * marking the comment as deleted. Soft deletion is performed by setting the
   * 'deleted_at' timestamp, hiding the comment from normal views, and
   * optionally displaying a placeholder if policy requires.
   *
   * If the deleted comment is a parent in a threaded discussion, application
   * logic must determine whether to recursively mark all child comments as
   * deleted or to orphan/reparent them at the nearest allowed level, according
   * to platform business logic. This action triggers audit logging, as required
   * for traceability and policy compliance. Deletion cascades to associated
   * votes and reports per business rules.
   *
   * Error conditions include attempts by unauthorized users, conflicts with
   * moderation policies (e.g., trying to delete an already-removed comment),
   * and deletion of non-existent comments. Related safeguards ensure proper
   * notification and fallback.
   *
   * Related operations include comment creation (POST), editing (PUT), and
   * moderation workflows for comment enforcement.
   *
   * @param connection
   * @param postId Unique identifier of the parent post containing the comment
   *   targeted for deletion.
   * @param commentId Unique identifier of the comment to be deleted within the
   *   post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformModeratorPostsPostIdCommentsCommentId(
        {
          moderator,
          postId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
