import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchCommunityPlatformModeratorMembers } from "../../../../providers/patchCommunityPlatformModeratorMembers";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { IPageICommunityPlatformMember } from "../../../../api/structures/IPageICommunityPlatformMember";
import { ICommunityPlatformMember } from "../../../../api/structures/ICommunityPlatformMember";

@Controller("/communityPlatform/moderator/members")
export class CommunityplatformModeratorMembersController {
  /**
   * Search and filter platform members (users) with pagination and detailed
   * criteria (community_platform_members).
   *
   * This operation enables administrators and authorized moderators to search
   * the list of registered members (users) of the community platform. It
   * accesses the community_platform_members table and supports advanced
   * filtering by email (partial match), registration date, last updated date,
   * and account status. Paging and sorting options ensure that large user lists
   * are manageable, with results returned as paginated summaries.
   *
   * Each result record contains the member's ID, email, current status,
   * creation and update times, and, if allowed, additional public properties.
   * Sensitive authentication details, such as the password hash, are never
   * returned. Search operations may be rate-limited and are typically used for
   * management, moderation, user analytics, audit logging, or verification
   * flows.
   *
   * Security is enforced via admin or moderator roles: only those roles can
   * retrieve the full user list or see accounts in 'blocked' or 'deleted'
   * status. Usage includes finding potentially abusive accounts, filtering
   * members by verification state, or generating audit/compliance reports.
   * Related endpoints include retrieval of individual member details (GET by
   * ID), status update (PUT), and creation or removal of users (for admin
   * systems). Errors include invalid filter criteria or access denied for
   * insufficient permissions.
   *
   * @param connection
   * @param body Filter, search, and pagination options for listing members,
   *   such as email, status, registration/updated date range, and sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: ICommunityPlatformMember.IRequest,
  ): Promise<IPageICommunityPlatformMember.ISummary> {
    try {
      return await patchCommunityPlatformModeratorMembers({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
