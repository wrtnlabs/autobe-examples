import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPlatformModeratorCommunitiesCommunityId } from "../../../../providers/putCommunityPlatformModeratorCommunitiesCommunityId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { deleteCommunityPlatformModeratorCommunitiesCommunityId } from "../../../../providers/deleteCommunityPlatformModeratorCommunitiesCommunityId";

import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/moderator/communities/:communityId")
export class CommunityplatformModeratorCommunitiesController {
  /**
   * Update and manage community properties in the
   * community_platform_communities table.
   *
   * This operation allows authorized users (community moderators or platform
   * admins) to update a community's properties, including title, description,
   * status, and URL slug, within the community_platform_communities table.
   *
   * Only users with moderator or admin roles may access this endpoint. The
   * operation strictly enforces all validation constraints, such as unique
   * name/slug, permissible status transitions (e.g., activating, suspending, or
   * banning a community), and character limits on title and description.
   * Updates to imagery or branding assets (e.g., icons, banners) are to be
   * managed via separate related endpoints, but references can be altered if
   * schema relationships exist.
   *
   * All modification events are logged with before-and-after snapshots for
   * audit and legal compliance. The endpoint implements business rules
   * regarding moderation policies, and an appropriate error message is returned
   * if validation fails (e.g., duplicate names, policy violations, or
   * restrictions due to banned/archive status).
   *
   * This operation is related to other community management APIs, including
   * creation, deletion (archival), moderator assignments, and status updates.
   * Edge cases, like concurrent updates or forbidden changes due to policy, are
   * handled according to platform error handling standards.
   *
   * @param connection
   * @param communityId Unique identifier of the community to update.
   * @param body Data for updating community properties like title, description,
   *   status, and slug.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunity.IUpdate,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await putCommunityPlatformModeratorCommunitiesCommunityId({
        moderator,
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Archive (soft delete) a community in the community_platform_communities
   * table.
   *
   * This operation allows platform administrators, and where permitted by
   * business logic, community moderators, to delete (soft archive) an existing
   * community by updating the deleted_at field in the
   * community_platform_communities table. Instead of a hard delete, the record
   * is marked as deleted for retention, recovery, and compliance purposes, as
   * required by audit policies.
   *
   * All associated posts, comments, subscriptions, and other relationships are
   * not hard-deleted, but should be marked as archived or handled according to
   * cascade or retention rules, ensuring that data is preserved for a set
   * period and can be restored if needed. Permissions are strictly checked, and
   * only users with the admin or moderator role (assigned to the target
   * community) can invoke this endpoint, provided current policy restrictions
   * are satisfied.
   *
   * Comprehensive audit logs are maintained for all community deletions. An
   * appropriate error is returned if the action violates policy or references a
   * non-existent community. This endpoint is related to community creation,
   * property update, membership management, and moderation workflows.
   *
   * @param connection
   * @param communityId Unique identifier of the community to archive (soft
   *   delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformModeratorCommunitiesCommunityId({
        moderator,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
