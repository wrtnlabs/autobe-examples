import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformModeratorCommunitiesCommunityIdStatusChanges } from "../../../../../providers/patchCommunityPlatformModeratorCommunitiesCommunityIdStatusChanges";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";

import { IPageICommunityPlatformCommunityStatusChange } from "../../../../../api/structures/IPageICommunityPlatformCommunityStatusChange";
import { ICommunityPlatformCommunityStatusChange } from "../../../../../api/structures/ICommunityPlatformCommunityStatusChange";

@Controller(
  "/communityPlatform/moderator/communities/:communityId/statusChanges",
)
export class CommunityplatformModeratorCommunitiesStatuschangesController {
  /**
   * Retrieve paginated audit trail of all status changes for a community
   * (community_platform_community_status_changes table).
   *
   * This API endpoint allows authorized users (moderators for the community or
   * administrators) to search and retrieve paginated audit records of all
   * status changes for a given community, as recorded in the
   * 'community_platform_community_status_changes' table. Each record logs a
   * change event including the previous and new status, the admin or moderator
   * who performed the change, the rationale, any audit notes, and precise
   * timestamps.
   *
   * Clients submit a PATCH request to the endpoint with optional advanced
   * filtering and pagination parameters in the body, enabling sorting by
   * timestamp, filtering by status types (such as banned or private), or
   * querying by the actor responsible. Security enforcement ensures only users
   * with moderator or admin privileges for that community may access this data.
   * If a user without sufficient privileges attempts access, an error is
   * returned.
   *
   * Typical uses include compliance audits, moderator activity reviews, or
   * regulatory checks. This operation is critical for transparency and
   * accountability in the management of community accessibility and
   * configuration changes.
   *
   * @param connection
   * @param communityId Unique identifier of the community whose status change
   *   logs are being retrieved
   * @param body Advanced filtering, search, sorting, and pagination options for
   *   retrieving status change logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityStatusChange.IRequest,
  ): Promise<IPageICommunityPlatformCommunityStatusChange> {
    try {
      return await patchCommunityPlatformModeratorCommunitiesCommunityIdStatusChanges(
        {
          moderator,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
