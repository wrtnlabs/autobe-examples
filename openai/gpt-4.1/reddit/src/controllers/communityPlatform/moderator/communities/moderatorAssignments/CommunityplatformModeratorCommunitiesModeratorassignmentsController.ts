import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignments } from "../../../../../providers/postCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignments";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";
import { patchCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignments } from "../../../../../providers/patchCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignments";
import { getCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignmentsAssignmentId } from "../../../../../providers/getCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignmentsAssignmentId";
import { putCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignmentsAssignmentId } from "../../../../../providers/putCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignmentsAssignmentId";

import { ICommunityPlatformCommunityModeratorAssignment } from "../../../../../api/structures/ICommunityPlatformCommunityModeratorAssignment";
import { IPageICommunityPlatformCommunityModeratorAssignment } from "../../../../../api/structures/IPageICommunityPlatformCommunityModeratorAssignment";

@Controller(
  "/communityPlatform/moderator/communities/:communityId/moderatorAssignments",
)
export class CommunityplatformModeratorCommunitiesModeratorassignmentsController {
  /**
   * Create a new moderator assignment record for a specific community in the
   * community_platform_community_moderator_assignments table.
   *
   * Create a new moderator assignment for a community. The operation requires
   * the caller to be an admin or a current community moderator with sufficient
   * privileges. It references the
   * community_platform_community_moderator_assignments table in the schema,
   * which tracks moderator assignments per community, and includes assignment
   * rationale and auditing information.
   *
   * The request body should provide all necessary assignment details (target
   * community, member to be assigned, role, assigner, start time, and any
   * notes). The system ensures that the member exists, is not already assigned
   * as a moderator with the same role, and is eligible for moderation duties.
   * It checks assignment quotas, avoids duplicates, and ensures compliance with
   * business rules described in requirements analysis (moderator assignment by
   * admins or owner-moderators, per audit/compliance control).
   *
   * Security controls require all assignment actions to be logged. If a
   * community is archived or does not exist, or the actor is not authorized, an
   * appropriate error is returned. The response includes the full assignment
   * entity created, for immediate use (such as interface update or audit
   * view).
   *
   * Related APIs include updating assignments, deleting moderator assignments,
   * or listing all current assignments for a community.
   *
   * @param connection
   * @param communityId Unique identifier of the target community for which
   *   moderator assignment is being created.
   * @param body Moderator assignment creation information including assigned
   *   member, role, assigner ID, and assignment timing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityModeratorAssignment.ICreate,
  ): Promise<ICommunityPlatformCommunityModeratorAssignment> {
    try {
      return await postCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignments(
        {
          moderator,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List all moderator assignments for a community
   * (community_platform_community_moderator_assignments).
   *
   * Retrieve a filtered and paginated list of all moderator assignments for a
   * specified community. Each assignment indicates a member assigned as
   * moderator, their moderator role, start/end dates, assigner, and notes. This
   * endpoint enables transparency and control for community owners and platform
   * admins to review current and past moderator staff, and to ensure proper
   * governance.
   *
   * Security and permissions: This operation is restricted to authenticated
   * users with sufficient rights within the context of the community, typically
   * community owners, assigned moderators, or admins. Data returned is limited
   * to the specified community.
   *
   * The operation directly references the
   * community_platform_community_moderator_assignments table, incorporating its
   * fields and join relations with the communities and members table. Filtering
   * may include moderator role, assignment status (active, ended), or search by
   * member. Pagination reduces result set size for efficient client handling.
   *
   * Related operations: assignment retrieval by id, creating new assignments,
   * updating existing assignments, or removing assignments. Error handling
   * includes invalid communityId, insufficient permissions, or excessive result
   * size.
   *
   * @param connection
   * @param communityId Unique identifier for the target community
   * @param body Filtering, sorting, and pagination parameters for retrieving
   *   moderator assignments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityModeratorAssignment.IRequest,
  ): Promise<IPageICommunityPlatformCommunityModeratorAssignment.ISummary> {
    try {
      return await patchCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignments(
        {
          moderator,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a moderator assignment by id
   * (community_platform_community_moderator_assignments).
   *
   * Retrieve detailed information about a specific moderator assignment within
   * a community. This information includes the assigned member, their role,
   * assignment effective dates, who assigned the role, and contextual notes for
   * the assignment or removal.
   *
   * Permissions: This endpoint is accessible to authenticated users with
   * appropriate rights within the community context (owner, moderator, or
   * admin). The system ensures the assignmentId belongs to the specified
   * community (communityId) and enforces access boundaries.
   *
   * The underlying data comes from the
   * community_platform_community_moderator_assignments table, joined as needed
   * to member and community details. Typical use cases are in moderator
   * dashboards, admin review, or audit workflows. Error handling covers
   * missing/invalid ids, mismatched community/assignment, or insufficient
   * permissions.
   *
   * @param connection
   * @param communityId Unique identifier for the target community
   * @param assignmentId Unique identifier for the moderator assignment to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":assignmentId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("assignmentId")
    assignmentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityModeratorAssignment> {
    try {
      return await getCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignmentsAssignmentId(
        {
          moderator,
          communityId,
          assignmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing moderator assignment record for a community in the
   * community_platform_community_moderator_assignments table.
   *
   * Update an existing moderator assignment for a specific community. The
   * operation requires the assigning actor to be an admin or an authorized
   * owner-moderator of the target community, in accordance with permission
   * logic. This operation references the
   * community_platform_community_moderator_assignments schema table, which
   * stores each assignment's details including assignment role, note, and
   * assignment time periods.
   *
   * The request body must contain all changes to apply, which may include
   * moderator role, start/end dates, and assignment notes or reasons. The
   * operation verifies that the target assignment and community exist, that the
   * actor is permitted to make changes, and that the changes comply with
   * business rules (no orphaning of a community without an owner, limits on
   * moderator assignments, etc.).
   *
   * The update action is logged for audit and traceability. The response
   * returns the updated assignment record. Errors can result from unauthorized
   * actors, invalid IDs, or violating assignment constraints (such as trying to
   * remove the last 'owner' of a community).
   *
   * Related APIs include assignment creation, deletion, and retrieval/listing
   * APIs for moderator assignments.
   *
   * @param connection
   * @param communityId Unique identifier of the community for which the
   *   moderator assignment is being updated.
   * @param assignmentId Unique identifier of the moderator assignment to be
   *   updated.
   * @param body Updated moderator assignment details, including new role, note,
   *   or start/end times, and assigning actor ID.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":assignmentId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("assignmentId")
    assignmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityModeratorAssignment.IUpdate,
  ): Promise<ICommunityPlatformCommunityModeratorAssignment> {
    try {
      return await putCommunityPlatformModeratorCommunitiesCommunityIdModeratorAssignmentsAssignmentId(
        {
          moderator,
          communityId,
          assignmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
