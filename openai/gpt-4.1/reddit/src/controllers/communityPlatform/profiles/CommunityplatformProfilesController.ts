import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformProfilesProfileId } from "../../../providers/getCommunityPlatformProfilesProfileId";

import { ICommunityPlatformProfile } from "../../../api/structures/ICommunityPlatformProfile";

@Controller("/communityPlatform/profiles/:profileId")
export class CommunityplatformProfilesController {
  /**
   * Retrieve detailed user profile data by profileId from
   * community_platform_profiles.
   *
   * Fetches all profile metadata for the specified profileId from the
   * community_platform_profiles table. This includes the public username
   * (unique), biography (if set), avatar URI, display email (only if the user
   * has opted-in), status message, and privacy flag determining if the profile
   * is public or restricted. The response also includes profile creation and
   * update timestamps, along with soft-deletion information if relevant for
   * compliance.
   *
   * If the requesting user is not permitted (e.g., if profile is private and
   * requester has no access), the operation should return an appropriate
   * authorization error or only anonymized/limited profile data, as dictated by
   * privacy settings. The operation must comply with the privacy and status
   * fields, returning hidden items only to profile owners or admins as
   * appropriate.
   *
   * Profiles are linked one-to-one with members; related resources (badges,
   * profile history, preferences) may be included or referenced on additional
   * API calls to keep response payloads compact. Typical use: rendering profile
   * pages for public browsing or member dashboard; should also support
   * administrative or moderation profile review with extra information as
   * allowed by role.
   *
   * @param connection
   * @param profileId Unique identifier of the target profile to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformProfile> {
    try {
      return await getCommunityPlatformProfilesProfileId({
        profileId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
