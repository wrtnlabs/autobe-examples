import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformProfilesProfileIdBadges } from "../../../../providers/patchCommunityPlatformProfilesProfileIdBadges";
import { getCommunityPlatformProfilesProfileIdBadgesBadgeId } from "../../../../providers/getCommunityPlatformProfilesProfileIdBadgesBadgeId";

import { IPageICommunityPlatformProfileBadge } from "../../../../api/structures/IPageICommunityPlatformProfileBadge";
import { ICommunityPlatformProfileBadge } from "../../../../api/structures/ICommunityPlatformProfileBadge";

@Controller("/communityPlatform/profiles/:profileId/badges")
export class CommunityplatformProfilesBadgesController {
  /**
   * Search and retrieve paginated badge summaries for a user profile in
   * community_platform_profile_badges.
   *
   * This operation returns a filtered and paginated list of badges that belong
   * to a user profile, corresponding to the profileId provided in the path. It
   * acts upon the community_platform_profile_badges table, exposing badge
   * types, names, and status for display on the user’s profile.
   *
   * The endpoint supports advanced search features, including filtering by
   * badge type, issuance status, or time period, and allows for pagination and
   * sorting based on creation or issuance timestamps. Only public data is
   * returned according to the requesting user's permission. Access is
   * controlled, and retrieving another user's badge list may be subject to
   * profile privacy and settings.
   *
   * This operation integrates with platform profile and badge award flows,
   * linking to the relevant user’s achievements and reward history. It avoids
   * exposing sensitive badge reasons or private award notes unless the viewer
   * is the profile owner or an admin. Error handling includes blocked access
   * for profiles that are private or when the viewer lacks permissions.
   *
   * @param connection
   * @param profileId The unique identifier of the user profile whose badges are
   *   being fetched.
   * @param body Filter and pagination criteria for badge retrieval on user
   *   profiles.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformProfileBadge.IRequest,
  ): Promise<IPageICommunityPlatformProfileBadge.ISummary> {
    try {
      return await patchCommunityPlatformProfilesProfileIdBadges({
        profileId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific badge assigned to a user profile
   * (community_platform_profile_badges).
   *
   * This endpoint provides a detailed view of a specific badge associated with
   * a user profile. The badge is linked through the
   * community_platform_profile_badges table, which stores references to user
   * achievements or rewards. When the client calls this API with a valid
   * profileId and badgeId, the service looks up the badge, validates ownership
   * against the target profile, and returns all metadata fields including
   * badge_type, badge_name, issued_at, revocation information (if present), and
   * any linked karma award reference.
   *
   * Access to badge details is typically unrestricted for public profiles, but
   * may require additional privacy or role checks if the user profile is marked
   * as private (is_public = false) in the community_platform_profiles table.
   * Proper error handling must be implemented if the badge is not found, is not
   * assigned to the specified profile, or access is restricted by privacy
   * policy. This endpoint is intended for profile and reputation displays, and
   * may also be used by moderation/admin views for badge management functions.
   *
   * Ownership and relationship between profile and badge are enforced by unique
   * constraints in the schema. Proper schema-level and business rule validation
   * are mandatory for accurate, compliant data retrieval.
   *
   * @param connection
   * @param profileId Unique identifier of the target user profile.
   * @param badgeId Unique identifier of the badge assigned to the profile.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":badgeId")
  public async at(
    @TypedParam("profileId")
    profileId: string & tags.Format<"uuid">,
    @TypedParam("badgeId")
    badgeId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformProfileBadge> {
    try {
      return await getCommunityPlatformProfilesProfileIdBadgesBadgeId({
        profileId,
        badgeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
