import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformCommunitiesCommunityIdImages } from "../../../../providers/patchCommunityPlatformCommunitiesCommunityIdImages";
import { getCommunityPlatformCommunitiesCommunityIdImagesImageId } from "../../../../providers/getCommunityPlatformCommunitiesCommunityIdImagesImageId";

import { IPageICommunityPlatformCommunityImage } from "../../../../api/structures/IPageICommunityPlatformCommunityImage";
import { ICommunityPlatformCommunityImage } from "../../../../api/structures/ICommunityPlatformCommunityImage";

@Controller("/communityPlatform/communities/:communityId/images")
export class CommunityplatformCommunitiesImagesController {
  /**
   * Search/filter paginated community images for a specific community
   * (community_platform_community_images).
   *
   * Retrieve a filterable and paginated list of images associated with a
   * particular community, enabling community branding asset management and user
   * display customization. Clients may specify image type (icon, background,
   * etc.), status (active/inactive), and sort order for consistent UI/UX
   * presentation.
   *
   * This endpoint validates the target community's existence and enforces
   * role-based access control (public for active images, broader for moderators
   * or admins). Filtering is performed on the
   * 'community_platform_community_images' table, joined with relevant file
   * upload data to provide actionable, display-ready information. Pagination
   * prevents overly large list payloads for high-image communities.
   *
   * Input validation enforces type and communityId constraints. Access is
   * logged for audit/compliance. Errors for missing community, or unauthorized
   * access, follow the platformâ€™s standard error format. This complements image
   * upload, detail-get, and update endpoints in the community asset APIs.
   *
   * @param connection
   * @param communityId Unique identifier of the target community for which to
   *   list images.
   * @param body Search criteria, filters, and pagination parameters for listing
   *   community images. Supports filtering by image type, activity status, and
   *   sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityImage.IRequest,
  ): Promise<IPageICommunityPlatformCommunityImage> {
    try {
      return await patchCommunityPlatformCommunitiesCommunityIdImages({
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific community image
   * (community_platform_community_images).
   *
   * Retrieve metadata for a single image associated with the specified
   * community. This includes file reference (to retrieve display URL), image
   * type (e.g., icon, background), active status, upload time, ordering for UI
   * purposes, alternative text for accessibility, and community linkage.
   *
   * This endpoint validates both the communityId and imageId correspond to
   * actual data, returning detailed error information for missing or mismatched
   * entries. The operation enforces access control: active images are public,
   * but non-public image details may require moderator or admin access, as per
   * community configuration.
   *
   * Security and privacy concerns are respected; only non-sensitive metadata is
   * exposed in public mode. This operation is used by clients fetching display
   * assets, as well as moderators reviewing or managing uploaded images.
   * Operation can be combined with image update or delete for full asset
   * lifecycle management.
   *
   * @param connection
   * @param communityId Unique identifier for the target community containing
   *   the image.
   * @param imageId Unique identifier of the image entry to fetch details for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":imageId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityImage> {
    try {
      return await getCommunityPlatformCommunitiesCommunityIdImagesImageId({
        communityId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
