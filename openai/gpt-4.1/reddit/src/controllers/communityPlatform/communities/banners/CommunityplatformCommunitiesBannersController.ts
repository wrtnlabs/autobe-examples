import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformCommunitiesCommunityIdBannersBannerId } from "../../../../providers/getCommunityPlatformCommunitiesCommunityIdBannersBannerId";

import { ICommunityPlatformCommunityBanner } from "../../../../api/structures/ICommunityPlatformCommunityBanner";

@Controller("/communityPlatform/communities/:communityId/banners/:bannerId")
export class CommunityplatformCommunitiesBannersController {
  /**
   * Retrieve detailed information about a specific community banner
   * (community_platform_community_banners).
   *
   * This endpoint provides all available metadata for the specified banner
   * image belonging to a particular community, referencing the
   * community_platform_community_banners Prisma schema table and its
   * relationships. It is designed to enable users to retrieve banner details
   * required for display on community pages or for moderation and branding
   * management interfaces.
   *
   * Security is enforced such that both general members and moderators can
   * access banner details for public or their managed communities, while admins
   * may access all banners for any community. Unauthorized users will receive
   * appropriate error messages if requesting non-public or inactive banners.
   *
   * The operation ensures that banner information returned includes its display
   * status, associated file upload (via file_upload_id), ordering (for
   * rotation/multiple banners), and alternative text for accessibility. The
   * operation does not expose any write capabilities or modifications, focusing
   * strictly on retrieval. Error handling includes record-not-found and
   * permission-denied scenarios, ensuring users cannot access banners outside
   * their access scope.
   *
   * Related operations include listing all banners for a community or updating
   * banners for community appearance management. This operation pairs with the
   * POST /communities/{communityId}/banners endpoint for creation workflows, as
   * well as moderation actions for banner rotation or removal.
   *
   * @param connection
   * @param communityId Unique identifier of the target community associated
   *   with the banner.
   * @param bannerId Unique identifier of the specific banner image to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("bannerId")
    bannerId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityBanner> {
    try {
      return await getCommunityPlatformCommunitiesCommunityIdBannersBannerId({
        communityId,
        bannerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
