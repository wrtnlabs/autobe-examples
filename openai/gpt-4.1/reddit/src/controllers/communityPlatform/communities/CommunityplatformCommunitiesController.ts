import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformCommunities } from "../../../providers/patchCommunityPlatformCommunities";
import { getCommunityPlatformCommunitiesCommunityId } from "../../../providers/getCommunityPlatformCommunitiesCommunityId";

import { IPageICommunityPlatformCommunity } from "../../../api/structures/IPageICommunityPlatformCommunity";
import { ICommunityPlatformCommunity } from "../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/communities")
export class CommunityplatformCommunitiesController {
  /**
   * Search and retrieve a paginated, filtered list of communities from the
   * platform.
   *
   * This operation enables paginated and filtered retrieval of communities from
   * the platform, supporting advanced search, filter, and sorting options as
   * defined by business requirements. Users can search by partial community
   * name, filter by status (such as active, private, or banned), and limit
   * results based on creation date or other relevant metadata. The operation is
   * used for both community discovery (public to all users) and for internal
   * management interfaces (admins, moderators) with appropriate permission
   * filters applied.
   *
   * Authorization plays a critical role, with public users limited to public
   * and discoverable communities, while authenticated users may see communities
   * they moderate or administer, including some with restricted status. The
   * response schema includes essential details such as community IDs, name,
   * title, description, status, slug, and creation timestamp, but hides
   * sensitive or restricted fields from unauthorized users. Efficient
   * implementation is necessary to support large-scale listing, with all
   * filters and sorting parameters validated per requirements and Prisma
   * schema, and invalid queries return appropriate error messages.
   *
   * This endpoint integrates closely with other API operations including
   * detailed community view (GET by ID), community post listing, community
   * creation (POST), status management (PUT), moderation assignment, and
   * subscription APIs. Errors are handled gracefully, returning user-friendly
   * messages for filter/sort parameter issues or unauthorized attempts at
   * restricted data.
   *
   * @param connection
   * @param body Search, filter, and pagination criteria for community listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformCommunity.IRequest,
  ): Promise<IPageICommunityPlatformCommunity.ISummary> {
    try {
      return await patchCommunityPlatformCommunities({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific community from the
   * community_platform_communities table.
   *
   * Retrieve detailed metadata and configuration for the specified community
   * using its unique identifier. This encompasses key community details
   * including the display title, name, description, slug, status, associated
   * creator, timestamps, and deletion status.
   *
   * Authorization for this operation is public, enabling both authenticated
   * users and guests to load community pages for engagement or browsing.
   * However, the system may enforce access control for non-public or restricted
   * communities depending on the status.
   *
   * The data for this operation corresponds to the
   * community_platform_communities Prisma DB schema, directly mapping all
   * columns for accurate platform representation. Any business logic regarding
   * soft-deleted or private communities must be handled in downstream logic,
   * but their visibility can be reflected via the status and deleted_at
   * fields.
   *
   * Related operations include listing communities for discovery, creating a
   * new community, updating existing community settings, and moderation of
   * community attributes. Failure conditions include invalid communityId,
   * non-existing communities, or restricted/archived status.
   *
   * @param connection
   * @param communityId Unique identifier of the target community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":communityId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await getCommunityPlatformCommunitiesCommunityId({
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
