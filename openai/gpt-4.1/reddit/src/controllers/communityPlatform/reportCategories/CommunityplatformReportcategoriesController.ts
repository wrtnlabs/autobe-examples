import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformReportCategories } from "../../../providers/patchCommunityPlatformReportCategories";
import { getCommunityPlatformReportCategoriesReportCategoryId } from "../../../providers/getCommunityPlatformReportCategoriesReportCategoryId";

import { IPageICommunityPlatformReportCategory } from "../../../api/structures/IPageICommunityPlatformReportCategory";
import { ICommunityPlatformReportCategory } from "../../../api/structures/ICommunityPlatformReportCategory";

@Controller("/communityPlatform/reportCategories")
export class CommunityplatformReportcategoriesController {
  /**
   * List and search report categories (community_platform_report_categories
   * table).
   *
   * Fetch a filterable, paginated list of all report categories available for
   * reporting inappropriate content. This operation uses the
   * community_platform_report_categories table and includes every category's
   * display name, permission to allow free-text explanations, and time of
   * creation and update.
   *
   * Clients can supply search criteria, pagination parameters, or sorting
   * preferences to tailor the list for display in content flagging interfaces.
   * Proper use of this endpoint ensures platform-wide compliance with reporting
   * reason policies and streamlines updates when categories are added or
   * changed.
   *
   * Authorization is not required; all authenticated users and guests may
   * retrieve the category list. This is necessary for clients to build forms
   * and validation logic matching current policy. Error handling ensures
   * graceful recovery if category data is inaccessible or if search criteria
   * are invalid.
   *
   * @param connection
   * @param body Search, filter, and pagination criteria for finding categories
   *   (optional).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformReportCategory.IRequest,
  ): Promise<IPageICommunityPlatformReportCategory> {
    try {
      return await patchCommunityPlatformReportCategories({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific report category by ID
   * (community_platform_report_categories table).
   *
   * Fetch the complete definition for a report category referenced by its
   * unique identifier. The community_platform_report_categories table defines
   * each category's name, whether free text is permitted, and associated
   * timestamps for creation and update.
   *
   * This operation is essential for validating or displaying category
   * information on user-facing report forms or in moderation/admin review
   * tools. It may be used for rule configuration, UI explanations, or for
   * checking if a reporting workflow allows user input beyond the standard
   * predefined reasons.
   *
   * The endpoint requires a valid reportCategoryId, which must be a
   * string-encoded UUID. Public access is permitted, as category definitions
   * are not confidential.
   *
   * @param connection
   * @param reportCategoryId Target report category's unique identifier (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportCategoryId")
  public async at(
    @TypedParam("reportCategoryId")
    reportCategoryId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformReportCategory> {
    try {
      return await getCommunityPlatformReportCategoriesReportCategoryId({
        reportCategoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
