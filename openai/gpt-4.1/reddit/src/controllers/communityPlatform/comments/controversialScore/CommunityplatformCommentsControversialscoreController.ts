import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformCommentsCommentIdControversialScore } from "../../../../providers/getCommunityPlatformCommentsCommentIdControversialScore";

import { ICommunityPlatformControversialScore } from "../../../../api/structures/ICommunityPlatformControversialScore";

@Controller("/communityPlatform/comments/:commentId/controversialScore")
export class CommunityplatformCommentsControversialscoreController {
  /**
   * Retrieve the cached controversial score for a specific comment
   * (community_platform_controversial_scores).
   *
   * This endpoint allows retrieval of the most recently computed controversial
   * score for a comment, given its unique commentId. The controversial score is
   * a metric indicating high engagement through polarized voting, supporting
   * sort options such as 'controversial' in UI comment sections. Data is
   * returned from the community_platform_controversial_scores table, optimized
   * for fast lookup during comment listing or analytics operations.
   *
   * The commentId parameter must reference a valid comment entity in the system
   * (UUID). Only scores for visible, permitted comments are available; comments
   * in banned, hidden, or private threads may have access restrictions. Clients
   * use this API in conjunction with comment list or detail views when showing
   * comments ranked by controversy.
   *
   * Common error scenarios include not found (404) if the comment or its
   * controversial score is missing, or forbidden (403) if the comment is not
   * visible to the requester. The API safeguards against exposing scores for
   * restricted or deleted content.
   *
   * @param connection
   * @param commentId Unique identifier of the comment for which to retrieve the
   *   controversial score.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformControversialScore> {
    try {
      return await getCommunityPlatformCommentsCommentIdControversialScore({
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
