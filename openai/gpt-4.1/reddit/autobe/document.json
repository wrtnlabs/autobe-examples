{"operations":[{"specification":"Defines the guest registration (join) process for the Reddit-like community platform. This operation allows unauthenticated users—classified under the 'guest' role, represented by the 'community_platform_guests' table—to initiate temporary pseudonymous presence for site exploration, tracking, or bridging to member registration. As described in the schema, a new guest entity is created with a session_key (typically linked to cookies, IP logs, or other ephemeral means) that may be used for anonymous browsing sessions and later upgraded if the user registers for a full member account. No authentication (login/password) is required or performed for guests; the operation strictly establishes an ephemeral tracking entity. The guest table fields are minimal: 'id', 'session_key', and 'created_at' are mandatory, with 'deleted_at' supporting erasure or log cleaning. The 'deleted_at' field enables compliance with privacy and erasure requests by pseudo-deleting records. Security is limited as guests have no identity or credentials; operations should take care not to confer any permissions reserved for members or authenticated roles. No sensitive operations are permitted and the endpoint should be public-accessible. Since the guest concept is strictly temporary and ephemeral, there is no subsequent login. The endpoint links with frontend logic to facilitate session tracking, anti-abuse measures, or surfacing anonymous participation workflows. Guests can later initiate member registration as a new separate flow—this endpoint is for session initiation only.","authorizationType":"join","description":"This endpoint is intended for new unauthenticated visitors who wish to begin exploring the platform under an anonymous session. The purpose is to transparently create an ephemeral guest entity in the 'community_platform_guests' table, with a unique 'session_key' for the tracking session. No identity is established; it is for navigation and anti-abuse traceability only.\n\nImplementation utilizes the minimal schema fields found in 'community_platform_guests': 'session_key' (for tracking), auto-generated 'id', 'created_at', and optional 'deleted_at' for respecting erasure or log rotation requests. No authentication or credential validation is performed at this stage, in accordance with the business requirements for guests.\n\nAs guests are non-authenticated by design, there is no associated login or protected operations, only anonymous browsing and metadata establishment. Guests are not permitted to post, vote, comment, or report.\n\nSecurity: The endpoint is intentionally open-access, but must not create overlapping session_keys; unique constraint is enforced for traceability and anti-abuse.\n\nThis operation is foundational for tracking site navigation, enforcing anonymous participation quotas/limits, and supporting future upgrade workflows to member accounts. Related flows: guests later registering as members is a separate operation; session tracking/expiry and cleanup can be managed via the 'deleted_at' field.","summary":"Create a new guest session (community_platform_guests table) for unauthenticated users","parameters":[],"requestBody":{"description":"Guest session initiation information for tracking and anonymous navigation (should minimally include session key, if supplied by frontend).","typeName":"ICommunityPlatformGuest.ICreate"},"responseBody":{"description":"Guest session/resource created, including generated session key and unique ID for anonymous tracking.","typeName":"ICommunityPlatformGuest.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"Refreshes and extends a guest's temporary access token/session within the Reddit-like community platform. For entities in the 'community_platform_guests' table, this operation issues a new ephemeral JWT (or updates protocol metadata) to facilitate continued session tracking or browsing. The guest model does not store long-lived credentials but uses a 'session_key' and 'id' to enable session context. This API is crucial when guests need to remain on the platform for longer periods (beyond default expiration), and allows for extension without requiring elevated permissions or member registration. Supported fields in the schema are limited, so the refresh relies on the client's session_key or guest id passed in the request body for stateless validation. Security considerations are minimal since guests hold almost no privileges and cannot perform privileged actions. The refreshed session allows continued exploration, anti-abuse tracking, and retention of navigation context. No authentication or personal identification is involved—operation must never escalate privileges, reveal member-only data, or leak personally identifying information. If the guest entity or session has been pseudo-deleted (via 'deleted_at'), the operation should treat the session as invalid or expired.","authorizationType":"refresh","description":"This endpoint provides a way for anonymous users (platform guests) to refresh their browsing session and continue using the platform without upgrading to authenticated member status. The refresh mechanism operates strictly within the constraints of the 'community_platform_guests' schema. The guest is identified using 'session_key' or 'id', both of which must remain unique and active (not pseudo-deleted).\n\nNo privileged or personal fields exist in this schema; only ephemeral and session metadata are used. The operation does not depend on credentials, but solely on valid, non-expired guest records. If the session has been revoked or guest record deleted (via 'deleted_at'), the operation must reject the request and indicate session expiration.\n\nThis operation is intended for session continuation and supports anti-abuse measures (rate limits, etc.) via the tracked guest identity. Guests cannot perform member actions (posting, voting, etc.) even with a refreshed session.\n\nThe operation is public, limited in scope, and should be strictly isolated from member authentication and data flows. Related operations: /auth/guest/join for initial session, /auth/member/join for upgrade to member, and guest session cleanup on expiry or logout.","summary":"Refresh a guest session token (community_platform_guests) to continue anonymous site usage","parameters":[],"requestBody":{"description":"Required context (session_key or id) for refreshing guest session token to maintain anonymous browsing context.","typeName":"ICommunityPlatformGuest.IRefresh"},"responseBody":{"description":"Session token/context refreshed, guest identity keys reissued for ephemeral continued access.","typeName":"ICommunityPlatformGuest.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"This operation allows unauthenticated users to create a new account (registration) in the platform as a member. The underlying Prisma schema is 'community_platform_members,' which requires 'email' (unique per user for authentication/contact), 'password_hash' (for storing the user's password after hashing), and 'email_verified' (initially false, becomes true after the user completes their verification process). 'status' (such as 'active') is also part of the schema and will be set appropriately on account creation. The operation validates that the email is unique, the password meets compliance, and creates the user record with the correct initial status. It also initiates the email verification workflow. Security is critical; only hashed passwords are accepted and stored, and the user's participation is restricted until verification completes. Other related operations are login (authenticate), refresh (token renewal), and password management endpoints. This endpoint is foundational for enabling new users to participate based on the Prisma schema for 'community_platform_members'.","authorizationType":"join","description":"This endpoint enables an unauthenticated user to register a new member account in the Reddit-like community platform. The 'community_platform_members' table is referenced, which has key fields: 'email' (must be unique and valid for identification and contact), 'password_hash' (only password hashes are stored for security), 'email_verified' (initially set to false), and 'status' (such as 'active' after verification). \n\nUpon receiving registration details, the platform will validate the email's uniqueness—enforcing a one-user-per-email policy at the DB level to block duplicates—and will require a password meeting policy. Passwords are hashed (per the 'password_hash' field; plaintext passwords are never stored or returned). The user's 'email_verified' is false after registration, preventing all member-only actions until a separate verification operation completes.\n\nPost-registration, a verification email workflow is triggered, and the created member receives a verification link. Until verified, feature access is restricted in accordance with the 'email_verified' boolean field and business requirement. The 'status' field in the schema allows for additional workflow enforcement if 'blocked' or 'pending' during specific business cases.\n\nThis registration ('join') endpoint is a prerequisite for all subsequent authentication flows (login, refresh, etc.) and is referenced by business policies for onboarding and security enforcement.\n\nRelated security endpoints include login, refresh, email verification, and password management, each using the base member schema for logic enforcement.","summary":"Register a new platform member (community_platform_members table)","parameters":[],"requestBody":{"description":"Payload for member registration (requires unique email and password hash)","typeName":"ICommunityPlatformMember.ICreate"},"responseBody":{"description":"Session authorization tokens and membership info for authenticated member after successful registration","typeName":"ICommunityPlatformMember.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/member/join","method":"post"},{"specification":"This operation allows platform members to authenticate by providing credentials and receive authorization (JWT) tokens. It uses the 'community_platform_members' schema, specifically the fields: 'email', 'password_hash' (for login logic), and 'status' (ensures member is active and not blocked). Password verification is performed by comparing the provided password to the stored 'password_hash' using secure hashing. Only verified emails (see 'email_verified' field) can successfully authenticate and receive tokens. If credentials are invalid or the account is not yet verified or blocked (per 'status'), authentication fails. After successful authentication, the operation issues JWT access/refresh tokens according to the session configuration and business policy. This endpoint is foundational for enabling authenticated member actions and is referenced by all member-secured operations.","authorizationType":"login","description":"This operation enables an existing platform member to log in by submitting their registered email and password. The 'community_platform_members' table schema is used, relying on these key fields: 'email' (to lookup user), 'password_hash' (to securely verify the supplied password against the hash), 'email_verified' (must be true for login), and 'status' (must be 'active' for session establishment). \n\nUpon receiving credentials, the operation validates the email exists, compares the provided password (after hashing) with the stored 'password_hash', and checks the member's status and verification flag. If all checks pass, the operation issues a JWT access token for immediate platform activity and a refresh token (issued as per business session rules) so clients can maintain authenticated state across sessions. \n\nIf credentials do not match, the account is unverified, or 'status' is not 'active', the login fails with appropriate error handling as per business policy (including rate limiting on repeated failures, reference 'status' field for blocks/suspensions). All tokens are generated using platform best practices. Related authentication operations include registration ('join'), token refresh, email verification, logout, and password recovery, all using the 'community_platform_members' schema for logic enforcement.","summary":"Authenticate an existing platform member and issue authorization tokens (community_platform_members table)","parameters":[],"requestBody":{"description":"Payload for member login (email and password required)","typeName":"ICommunityPlatformMember.ILogin"},"responseBody":{"description":"Session authorization tokens and membership info for authenticated member after successful login","typeName":"ICommunityPlatformMember.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/member/login","method":"post"},{"specification":"This operation renews a member's authentication tokens by securely exchanging a valid refresh token for a new set of JWT tokens. The underlying schema is 'community_platform_members', which provides user identification and session continuity via established authentication logic. The refresh process checks the validity of the provided refresh token, ensuring the related member exists, is still active (status/per schema), and session use complies with business security rules. On success, a new access token (short-lived) and a new refresh token (longer-lived) are issued for continued session management. If the refresh token is expired, revoked, or associated with a deactivated member, the operation fails and client must log in again. This endpoint does not require credentials, only a valid refresh token. It is a core part of platform security and user experience, reducing the need for frequent logins.","authorizationType":"refresh","description":"This endpoint enables authenticated platform members to renew their session tokens by presenting a valid refresh token. The operation works within the security boundaries described by the 'community_platform_members' table, referencing the member via session context, ensuring the 'status' field is 'active' and the refresh token is valid, not expired, and not revoked (if revocation logic is implemented outside the schema).\n\nIf the refresh token is valid and the member's account status is acceptable, the server issues a new JWT access token and a new refresh token, ensuring ongoing authenticated platform interaction without repeated full logins. If the operation detects a revoked/expired refresh token, or if the member is blocked or deleted, it rejects the request and requires manual re-authentication.\n\nThe refresh endpoint is central for maintaining seamless authenticated user flows, reducing friction from session expiration and increasing security. It is referenced by all client session management logic and expected to comply with session expiry, device tracking, and revocation business rules. \n\nAll session logic is governed by platform-wide security policy but fundamentally relies on the ongoing existence and status value of the 'community_platform_members' schema for enforcement.","summary":"Renew member authentication tokens using valid refresh token (community_platform_members table)","parameters":[],"requestBody":{"description":"Payload containing the refresh token for session continuation","typeName":"ICommunityPlatformMember.IRefresh"},"responseBody":{"description":"Newly issued access and refresh tokens plus member session context","typeName":"ICommunityPlatformMember.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/member/refresh","method":"post"},{"specification":"This operation allows a user to register as a moderator in the community platform. The moderator role is represented by the 'community_platform_moderators' table in the Prisma schema, which is linked directly to a member account and a community. The schema enforces unique emails and stores a password hash for authentication. Registration (join) for moderators requires the 'email', 'password_hash' (to be produced from the plaintext password), and the target community assignment. The status will typically be set to 'active' upon successful creation. Email uniqueness and relationship to the community must be validated. Account lifecycle timestamps (created_at, updated_at) will be recorded. Email verification is handled at the member layer but must be established before a moderator account is eligible for creation.","authorizationType":"join","description":"This API operation enables the creation and registration of a new moderator account on the platform, as defined by the 'community_platform_moderators' table. It requires a unique email address—which is also verified at the member layer—and a secure password. Community assignment and linkage to the corresponding 'community_platform_members' record are enforced, validating that the registering user qualifies as a member before they can become a moderator. Upon successful creation, the moderator receives an initial authorization token that allows them to access moderator-specific functions, but only within their assigned communities.\n\nImplementation enforces email uniqueness, ensures linkage to both the member and target community, and creates audit timestamps for registration and any updates. The 'password_hash' is generated server-side from the provided password using a secure hashing algorithm (e.g., bcrypt). The operation enforces business rules confirming the user was previously verified as a member.\n\nBy restricting the operation to the moderator table and required relationships, the API integrates seamlessly into the platform's role and permissions structure. After registration, moderators are granted heightened credentials and authorization to perform moderation actions within their respective communities.\n\nSecurity is ensured by validating prior member status, unique email assignment, and by securely handling password storage as specified in the schema. All sensitive operations—such as creation and update—are logged for audit purposes. Workflow ensures that no moderator account can be provisioned without first passing membership requirements, preventing unauthorized privilege escalation.\n\nRelated operations include member registration, email verification, and login. Upon successful registration, follow-up authentication and privileged session management are expected to be performed according to the platform's authorization flows.","summary":"Register a new moderator (community_platform_moderators) account and issue authorization tokens.","parameters":[],"requestBody":{"description":"Moderator registration information (email, password, community assignment).","typeName":"ICommunityPlatformModerator.IJoin"},"responseBody":{"description":"Authorization information for the newly registered moderator, including tokens and basic identity info.","typeName":"ICommunityPlatformModerator.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/moderator/join","method":"post"},{"specification":"This endpoint allows a moderator user to authenticate into the platform. According to the 'community_platform_moderators' table in the Prisma schema, moderator authentication is performed via email and password. The schema maintains a 'password_hash' field for secure password storage and a 'status' field to track activation and suspension states. The login operation will validate the provided credentials, verify the moderator's status is active (not suspended or deleted), and on success issue a pair of JWT tokens (access and refresh). The API must only permit login for moderator accounts that have an associated and verified member account and are not soft-deleted.","authorizationType":"login","description":"This operation enables a moderator to authenticate using their email and password, as referenced by the 'community_platform_moderators' table. Success requires the moderator's status to be 'active' and linked to a valid, verified member account. The supplied password is checked against the stored server-side 'password_hash'. On valid authentication, the API issues JWT access and refresh tokens, including role and permission scopes specific to the moderator's assigned communities.\n\nThe system checks for suspension, resignations, or deletions using the 'status' and 'deleted_at' fields before allowing login or session creation, denying access if any restrict the account. Accurate audit logs are mandatory for all login attempts, successful or failed, to ensure traceability and security compliance.\n\nSession management integrates with platform-wide authorization enforcement. On login, the API returns a structured authentication DTO including current moderator identity, session information, and role scope, as specified by the authentication operation pattern.\n\nSecurity measures include rate limiting, secure comparison of stored and entered passwords, and plain-language error reporting that avoids leaking sensitive account states (e.g., distinguishing between non-existent email and wrong password is not allowed in responses).\n\nRelated flows: registration (join), token refresh, and logout. The login outcome is prerequisite for any subsequent privileged moderator operations within the platform.","summary":"Authenticate an existing moderator account and issue new JWT tokens.","parameters":[],"requestBody":{"description":"Moderator login information (email and password).","typeName":"ICommunityPlatformModerator.ILogin"},"responseBody":{"description":"Authorization information for the authenticated moderator, with tokens and platform-scoped session info.","typeName":"ICommunityPlatformModerator.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/moderator/login","method":"post"},{"specification":"This operation enables a moderator to renew their access (JWT) tokens using a valid refresh token. According to the 'community_platform_moderators' schema, tokens are issued and tracked per secure authentication session. When the refresh endpoint is invoked, it checks the validity of the presented refresh token, ensures the moderator's account is still active (including checking 'deleted_at' and 'status'), and issues a new set of tokens. If the token is invalid or the moderator account is suspended/deleted, the operation fails with a generic unauthorized response.","authorizationType":"refresh","description":"This API operation issues a fresh pair of JWT tokens for a moderator user, provided that a valid, unexpired refresh token is supplied. The 'community_platform_moderators' schema stores all credentials and status flags necessary to determine the account's validity. The operation confirms both the integrity of the refresh token and that the account has not been suspended or deleted ('status', 'deleted_at'), preventing any privilege escalation or reactivation of removed users.\n\nTokens are generated based on the platform's security policy, such as including moderator's unique ID, assigned community scope, the role 'moderator', and explicit permissions in the JWT payload. This promotes precise session scoping and execution of moderator-only platform operations.\n\nSecurity practices require all refresh attempts to be logged for auditing. The endpoint must handle errors gracefully, never revealing whether failures are due to an invalid token or an account restriction (to avoid information leakage about moderator existence or status).\n\nAfter successful refresh, the returned DTO provides updated session and authorization details. This operation is related to the moderator's initial login, logout, and any privileged moderator workflow.","summary":"Refresh a moderator's JWT tokens using a valid refresh token (community_platform_moderators).","parameters":[],"requestBody":{"description":"Moderator refresh token submission for obtaining new JWT tokens.","typeName":"ICommunityPlatformModerator.IRefresh"},"responseBody":{"description":"Updated authorization info with new JWT tokens, valid for active moderator sessions.","typeName":"ICommunityPlatformModerator.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/moderator/refresh","method":"post"},{"specification":"This operation provides the registration (join) endpoint for platform-wide administrator accounts. It allows a new admin to be created with credentials and initial status. The endpoint is associated with the 'community_platform_admins' table, which requires a unique email for authentication, a password hash (stored securely, never in plaintext), and a superuser designation. Upon successful registration, the account is set to 'active' and inherits all admin-level privileges as described in the business requirements and permission matrix. Newly registered admins can later be assigned additional superuser rights or limited via status fields (e.g., suspended). The endpoint strictly enforces email uniqueness at the database level and securely manages all credential information in accordance with the authentication requirements outlined for administrator actors.","authorizationType":"join","description":"This endpoint facilitates registration of new platform administrators by creating a record in the 'community_platform_admins' table. Administrators must supply a unique email address, a secure password (hashed upon receipt), a 'superuser' Boolean flag (if the registering actor has this capability), and an initial status (typically set to 'active'). The operation relies strictly on the email, password_hash, superuser, and status columns in the table. All registration requests are thoroughly validated, and email uniqueness is enforced to prevent duplication. Upon successful registration, a JWT-based authorization response is issued that conveys the admin's access token and refresh token, as required by the platform's session and token rules. This endpoint forms the basis of the administrator onboarding and is a prerequisite for all further admin authentication flows.\n\nCredentials are never stored in plaintext; password_hash is mandatory and created via secure cryptographic hashing before storage. The endpoint will reject registration attempts with duplicate emails, or in cases where required information is missing. All registration and subsequent actions are logged for auditability through the community_platform_audit_logs table. Registration can only be performed through this endpoint; no alternative join flows for platform admins are provided.\n\nAdministrators who successfully register have platform-wide authority, but actions may still be subject to status review or role-based access checks for superuser-privileged APIs, ensuring platform security and administrative separation of duties. The JWT token payload will reflect the admin role and initial permissions per system configuration.\n\nSecurity reviews are required for all admin registration flows. Strong validation and cryptographic policies are enforced at all stages. Duplicate, weak, or compromised passwords are strictly disallowed per policy.\n\nRelated operations: admin login (authentication), admin token refresh, and status/suspension management. The join operation is the entry-point for all admin authentication flows and must be executed first.","summary":"Register a new admin in the community_platform_admins table with full authentication onboarding.","parameters":[],"requestBody":{"description":"Admin registration information for onboarding a new administrator account.","typeName":"ICommunityPlatformAdmin.ICreate"},"responseBody":{"description":"Authorized JWT token set and registered admin information.","typeName":"ICommunityPlatformAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"This operation provides the login endpoint for platform-wide administrator accounts, utilizing the 'community_platform_admins' table. It requires a unique admin email and a password to authenticate. The endpoint securely verifies the submitted credentials by hashing the incoming password and comparing it to the stored password_hash field. Only active admins (status: 'active') may successfully authenticate. The operation issues a JWT access token and a refresh token upon successful authentication, following all security and business policies for admin session management. All login attempts, successful or not, are logged via the 'community_platform_audit_logs' table for compliance and incident review.","authorizationType":"login","description":"This endpoint authenticates an existing platform administrator by verifying their credentials against the 'community_platform_admins' table. The admin must supply a valid, unique email and password. The password is hashed on receipt using secure algorithms and compared with the stored 'password_hash' from the schema. Only active accounts with 'status' set to 'active' will be permitted to log in, as specified by the status column.\n\nUpon successful authentication, the system issues a JWT access token (for immediate use) and a refresh token (for session renewal). Both tokens are embedded in a structured response object conforming to the platform's authentication requirements and session/token rules. Credentials are never exposed or stored in plaintext at any stage. Failed login attempts—including attempts with invalid passwords or for suspended/deleted accounts—are logged for audit, and repeated failed attempts may trigger account lockout as per business rules.\n\nThe login flow leverages the exact fields present in the schema: 'email', 'password_hash', 'superuser', and 'status'. Invalid or locked accounts are denied login and a generic authentication failure message is returned to prevent information disclosure. This operation is a critical part of the platform's administrator authentication suite and forms the basis of all subsequent privileged admin sessions.\n\nThe endpoint is implemented strictly to enforce administrative security, logging, and credential isolation. It is paired with admin registration and token refresh operations for a complete authentication flow.\n\nSecurity reviews and cryptographic audits are essential for this endpoint. All tokens are issued following approved JWT/token management policies. Rate limiting and brute force protections are in place for this endpoint to protect against abuse and credential stuffing attacks.\n\nRelated operations: /auth/admin/join for registration, /auth/admin/refresh for token renewal. The login must precede all authenticated admin actions.","summary":"Authenticate an admin with email and password; issue tokens if credentials match community_platform_admins table.","parameters":[],"requestBody":{"description":"Admin login credentials (email, password).","typeName":"ICommunityPlatformAdmin.ILogin"},"responseBody":{"description":"JWT token set and admin details for authenticated session.","typeName":"ICommunityPlatformAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"This operation provides refresh token functionality for administrators. Linked to the 'community_platform_admins' table, it allows an authenticated admin to exchange a valid refresh token for a new access token set. This operation is critical for session renewal without re-authentication. The endpoint securely validates the submitted refresh token against stored/issued refresh tokens. If valid and the corresponding admin account is still active, it issues a new short-lived JWT access token and a new refresh token, in conformance with the session and token rules. Security requirements dictate that all refresh token requests, success or failure, are logged for compliance and incident tracing. Only active admins may refresh tokens. All returned tokens reflect the current access rights and admin status derived from the current 'status' and 'superuser' fields in the database. If the refresh token is expired, revoked, or the corresponding admin account is inactive/suspended, the request is denied and returns an error.","authorizationType":"refresh","description":"This endpoint allows an authenticated platform administrator to renew their session by exchanging a valid refresh token for a new set of tokens. The operation checks the validity and authenticity of the provided refresh token, referencing active tokens tied to the admin in the 'community_platform_admins' table. Only admins with 'status' set to 'active' may successfully refresh their tokens. The system rejects requests using expired, revoked, or invalid refresh tokens, or for accounts marked 'suspended' or 'deleted' via the status and deleted_at columns.\n\nOn successful validation, the system returns a new JWT access token (short-lived) and a fresh refresh token (with original or truncated expiry). The tokens' payload reflects the admin's access rights, current status, and superuser setting. The refresh flow ensures that administrative session continuity stays secure and self-contained, in line with platform session/token renewal standards.\n\nAll refresh token requests—whether accepted or rejected—are logged via the 'community_platform_audit_logs' table to ensure complete traceability. Attempts to refresh using a token associated with an inactive admin account are strictly denied. Security policies ensure strong protections against refresh token misuse, theft, or replay.\n\nThis endpoint is a core element for administrative session management and is mandatory for uninterrupted admin workflows requiring extended authentication. It works together with /auth/admin/login and /auth/admin/join for a secure admin session lifecycle.","summary":"Refresh admin's JWT session tokens using a valid current refresh token (community_platform_admins table).","parameters":[],"requestBody":{"description":"Refresh token payload for admin session renewal.","typeName":"ICommunityPlatformAdmin.IRefresh"},"responseBody":{"description":"Refreshed authorized JWT set and admin info.","typeName":"ICommunityPlatformAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation searches and retrieves a paginated and filterable list of system configuration entries for the Reddit-like community platform. It calls the community_platform_system_configs table in Prisma for system-level configuration key-value pairs including feature flags, runtime settings, and platform limits. Admins can list configs, search by key or value, and paginate results to efficiently manage large numbers of configs. Filtering supports searching by partial key match and indexing on descriptions. Response includes all relevant fields for each config item.","description":"Retrieve a paginated, searchable list of all system configuration values from the community_platform_system_configs table. These configuration entries define global runtime settings used throughout the platform, such as feature switches, system thresholds, and platform-wide toggles that affect business logic without redeploying code.\n\nAccess to this endpoint is restricted to users with the \"admin\" role in accordance with platform security principles. Admins can use the request body to specify advanced filtering, full-text searching (by key, description), pagination controls (page, page size), and sorting by creation or update date. This operation is essential for backend dashboards and DevOps workflows managing platform configuration, allowing for continuous delivery of new features and agile response to incidents by toggling features on or off.\n\nInput validation logic enforces permitted filter parameters and pagination ranges. The operation will not return sensitive config values that the requester lacks permission to view. Error handling covers missing or invalid request payloads, permission issues, and internal query errors. This endpoint is to be used in conjunction with detail retrieval and config update endpoints for a full admin config management workflow.","summary":"Search and retrieve a paginated, filterable list of system configuration entries (admin only, community_platform_system_configs table)","parameters":[],"requestBody":{"description":"Filtering and pagination criteria for searching system configuration entries.","typeName":"ICommunityPlatformSystemConfig.IRequest"},"responseBody":{"description":"Paginated, filterable list of community_platform_system_configs entries matching search criteria.","typeName":"IPageICommunityPlatformSystemConfig"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityPlatform/admin/systemConfigs","method":"patch","prerequisites":[]},{"specification":"This operation retrieves the detailed information for a specific system configuration identified by its UUID (systemConfigId) from the community_platform_system_configs table. It is used to access the config key, value, description, and metadata for inspection or editing in system management flows. Restricted to admins only for security. Response includes all public details on the config setting for platform applications or dashboards.","description":"Retrieve detailed information on a single system configuration entry from the community_platform_system_configs table by specifying its systemConfigId. This operation is critical for admins seeking full details (key, value, description, timestamps) about a specific configuration parameter, typically prior to making updates or auditing changes.\n\nSecurity is enforced by restricting access to users with the \"admin\" role. The operation supports robust error handling, including 404 responses if the systemConfigId does not correspond to any existing config, and 403 if attempted by a non-admin. Input validation ensures the supplied UUID is well-formed before querying the database. This operation, used in conjunction with the configs list and update endpoints, forms part of an integrated admin system configuration dashboard or API workflow.","summary":"Retrieve detailed information on a single system configuration entry by ID (admin only, community_platform_system_configs table)","parameters":[{"name":"systemConfigId","description":"Unique identifier (UUID) of the target system configuration entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified community_platform_system_configs entry, including key, value, and metadata.","typeName":"ICommunityPlatformSystemConfig"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityPlatform/admin/systemConfigs/{systemConfigId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/systemConfigs","method":"post"},"description":"System configuration entry must be created before it can be retrieved by its ID."}]},{"specification":"This operation creates a new system-level configuration entry in the community platform, storing feature flags, limit values, or platform-wide switches. It interfaces with the community_platform_system_configs table, which allows admin users to change runtime platform settings (such as max post length, new feature activation, or system toggles) without code deployment. This table is reserved for administrators and contains no user data. Each entry includes a unique configuration key, string-encoded value, description, and timestamps. Uniqueness is enforced on the key field.","description":"Create a new configuration setting for the community platform. The operation inserts a row into the community_platform_system_configs table, establishing a key-value setting used for runtime feature toggles, thresholds, or global switches. This operation is crucial for system flexibility, allowing administrators to dynamically adjust platform behavior (including enable/disable of experimental features, setting posting or karma limits, and more) without requiring code changes or redeployment.\n\nAccess to this operation is restricted to administrative users, as it impacts platform-wide stability and feature availability. Each configuration entry must have a unique key, a string value (which can represent JSON, numbers, or booleans serialized as strings), and an explanatory description. Fields such as created_at and updated_at are handled automatically by the system. If a duplicate key is submitted, the operation must fail with a clear error message, and no data is inserted.\n\nValidation rules include mandatory key uniqueness, non-empty value, and proper descriptive text. Related operations include updating or deleting configs and querying the current system configuration map. Errors may arise from uniqueness violations, forbidden access, or invalid field formats.","summary":"Create a new system configuration entry (community_platform_system_configs table).","parameters":[],"requestBody":{"description":"Configuration parameters for the new system setting (key, value, description).","typeName":"ICommunityPlatformSystemConfig.ICreate"},"responseBody":{"description":"The created system configuration entry, including unique id, validated fields, and timestamps.","typeName":"ICommunityPlatformSystemConfig"},"authorizationRoles":["admin"],"name":"create","path":"/communityPlatform/admin/systemConfigs","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing system-level configuration entry in the community_platform_system_configs table. Administrators use this to change the value or description of a runtime system setting, such as toggling features, adjusting quantitative thresholds, or updating descriptions for audit/compliance. Updates are identified by the unique configuration record id (UUID) passed as a path parameter. Only admins are permitted to invoke this operation, as changes can have platform-wide impact.","description":"Update an existing system configuration record by providing its unique id and new configuration data. This operation allows administrative users to adjust platform feature switches, runtime values (for example, max comment depth or posting limits), or provide updated description text for auditability. The community_platform_system_configs table assures that each config entry is uniquely identified by its id, while the key remains unique per setting.\n\nSecurity and permissions are strictly enforced, allowing this update only for admin users. Incoming requests must supply a valid UUID for the configuration id and adhere to any constraints on allowed value types (string encoding for values, appropriate length/format for keys and descriptions). Any attempt to update a non-existent configuration should result in a clear, not-found error. Uniqueness is enforced for the key field across all configs, so updates cannot create duplicate keys.\n\nAutomatic handling of updated_at timestamp and auditing is performed by the system. Related operations include creation, deletion, and retrieval of configuration settings. Proper error handling covers not-found cases, uniqueness violations, and unauthorized access attempts.","summary":"Update an existing system configuration entry (community_platform_system_configs table).","parameters":[{"name":"systemConfigId","description":"Unique identifier (UUID) for the target system configuration entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Object with fields to update (key, value, description) for the configuration record.","typeName":"ICommunityPlatformSystemConfig.IUpdate"},"responseBody":{"description":"The updated system configuration record, reflecting new values and update timestamp.","typeName":"ICommunityPlatformSystemConfig"},"authorizationRoles":["admin"],"name":"update","path":"/communityPlatform/admin/systemConfigs/{systemConfigId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/systemConfigs","method":"post"},"description":"System configuration must exist before it can be updated"}]},{"specification":"This operation permanently removes a system configuration entry from the platform's configuration key-value store. It acts on the community_platform_system_configs table in the Prisma schema. Admins use this endpoint to permanently erase a configuration setting, which can affect feature flags, threshold values, or system-wide toggles. Removal is irreversible and should be logged for compliance and operational safety.","path":"/communityPlatform/admin/systemConfigs/{systemConfigId}","method":"delete","summary":"Permanently delete a system configuration key-value entry by ID (community_platform_system_configs table)","description":"This operation deletes an existing system configuration entry, identified by its unique systemConfigId, from the key-value store used for runtime settings and feature flags. Such configurations are managed under the community_platform_system_configs table and are essential for platform-wide controls.\n\nOnly users with the 'admin' role are permitted to invoke this operation, as removing or altering system settings can have a major impact on application stability and feature availability. Each deletion should be accompanied by audit logging to maintain an immutable record of critical system changes.\n\nOnce deleted, the configuration entry is completely removed from the system and cannot be recovered. Attempting to delete non-existent or protected entries should return appropriate error responses. Associated settings and toggles will revert to platform defaults or become unavailable if this config entry controlled those features.","parameters":[{"name":"systemConfigId","description":"Unique identifier (UUID) of the system configuration entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/systemConfigs","method":"post"},"description":"System configuration entry must exist before it can be permanently deleted. The POST operation creates a configuration key-value entry required for the deletion target."}]},{"specification":"This operation retrieves detailed information for a specific audit log entry in the community platform. It is associated with the community_platform_audit_logs table in the Prisma schema. Each audit log entry records critical platform events such as admin actions, configuration changes, moderation events, and user privilege escalations for compliance and forensic review. This operation is essential for administrators to investigate individual actions and trace issues on the platform.","description":"Retrieve a specific audit log record by its unique identifier from the audit log table. This log provides granular details regarding who performed an action, the type of action, the affected table, and contextual details captured at the time of the event.\n\nAudit logs are critical for compliance, security investigations, and transparency, allowing platform administrators to reconstruct event histories, policy changes, or security incidents. Each audit log may contain information such as actor type, actor ID, action type, target table, target ID, event details, and timestamps.\n\nAccess to individual audit logs should be restricted to admin users only, as log records may contain sensitive or private contextual information. Platform staff can use this endpoint to monitor activity, investigate reported issues, and maintain the integrity and security posture of the system. If a log entry does not exist or access is prohibited, the API will return a suitable error (e.g., 404 Not Found, 403 Forbidden).","summary":"Retrieve detailed information for a specific audit log entry (community_platform_audit_logs table).","parameters":[{"name":"auditLogId","description":"Unique identifier (UUID) of the audit log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specified audit log entry.","typeName":"ICommunityPlatformAuditLog"},"authorizationRoles":["admin"],"name":"at","path":"/communityPlatform/admin/auditLogs/{auditLogId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered, paginated list of all banned words or phrases currently configured in the platform. The operation works with the community_platform_banned_words table and supports searching, sorting, and filtering according to active status, keyword matching, reasons, and creation date. It is used by administrators for moderation policy management, preventing the use of prohibited language across the community platform.","description":"Search the list of banned words or phrases, filtering by keyword, enforcement status, or reason. Allows platform administrators to easily maintain, review, and audit banned terms for content moderation and policy compliance.\n\nAdministrators may use this endpoint to search for banned words by partial matches, sort the results by date of creation or update, filter by current enforcement status (active/inactive), and understand the reasoning for each banned word entry, which is essential for compliance and transparency.\n\nThe data returned includes details such as the banned word, the reason for its prohibition, enforcement status, timestamps, and, if present, a record of soft-deleted entries. Rate limiting and authorization apply; only administrative users should have access due to the policy-sensitive nature of this data. Related operations include adding, updating, or deleting banned words, which are handled by separate endpoints.","summary":"Retrieve a filtered and paginated list of all banned words (community_platform_banned_words table).","parameters":[],"requestBody":{"description":"Filter, sorting, and pagination parameters for searching banned words.","typeName":"ICommunityPlatformBannedWord.IRequest"},"responseBody":{"description":"Paginated list of banned word entries matching query and filter criteria.","typeName":"IPageICommunityPlatformBannedWord"},"authorizationRole":"admin","authorizationType":null,"path":"/communityPlatform/admin/bannedWords","method":"patch","name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information for a specific banned word from the 'community_platform_banned_words' table. It enables moderators or administrators to view the word or phrase that is currently or previously banned, including its enforcement status, rationale for banning, timestamps for creation, updates, or removal, and any related metadata marked by the moderation workflow. This is essential for audit, review, and adjustment of banned content policies across the platform.","description":"Retrieve detailed information about a particular banned word by its unique identifier. This is useful for moderation and administrative purposes where understanding the word, reasoning for its entry in the ban list, and its enforcement status (active or soft-deleted) is needed.\n\nSecurity controls restrict access to only users with administrative rights or elevated moderation roles since the banned words list governs sensitive moderation logic and policy enforcement. The endpoint provides full details, including the rationale (reason), when the ban was enacted or removed (deleted_at), and any accompanying metadata for compliance, review, or appeals.\n\nIt operates directly against the 'community_platform_banned_words' table as outlined in the Prisma schema, ensuring all returned fields correspond to that structure. Error handling covers forbidden access (insufficient permissions), non-existent identifiers (word not found), and attempts to view banned words that are not available to the caller’s role (in the case of soft-deleted entries).","summary":"Retrieve details of a specific banned word for moderation policy review (community_platform_banned_words).","parameters":[{"name":"bannedWordId","description":"Unique identifier of the banned word entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the banned word including enforcement status, reason, and audit fields.","typeName":"ICommunityPlatformBannedWord"},"authorizationRoles":["admin"],"name":"at","path":"/communityPlatform/admin/bannedWords/{bannedWordId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/bannedWords","method":"post"},"description":"A banned word must be created before its detailed information can be retrieved by ID."}]},{"specification":"This operation allows an administrator to add a new word or phrase to the banned words list in the 'community_platform_banned_words' table. By specifying the target word, rationale for banning, enforcement status, and any contextual details, it enables the implementation or immediate enforcement of content moderation policies regarding prohibited language or phrases used across the platform. The request is validated to ensure uniqueness and content guidelines.","description":"Create a new entry in the platform-wide banned words list for moderation and automated filtering. This function is vital for enabling timely response to emerging content issues, community policy changes, or new regulatory requirements that dictate the prohibition of specific terms or phrases.\n\nThe operation supports full audit logging of who enacts the ban and why, relying on Prisma schema enforcement for word uniqueness and optional reason entry. It only allows users with administrative permissions to add or activate banned words, preventing unauthorized curation of moderation policy. Validation includes word uniqueness, proper formatting, and optional rational explanation for later reference or appeal.\n\nIf the word already exists (even if soft-deleted), an error is returned specifying the conflict, and all business logic aligns with the moderation audit trail. Error scenarios cover authorization failures, validation errors, and attempts to introduce banned words that contradict platform guidelines.","summary":"Add a new banned word or phrase for platform content policy enforcement (community_platform_banned_words).","parameters":[],"requestBody":{"description":"Details of the new banned word to create, including word, enforcement status, and explanatory reason.","typeName":"ICommunityPlatformBannedWord.ICreate"},"responseBody":{"description":"The created banned word entry and its audit attributes in the banned words table.","typeName":"ICommunityPlatformBannedWord"},"authorizationRoles":["admin"],"name":"create","path":"/communityPlatform/admin/bannedWords","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing banned word entry in the community_platform_banned_words table. It allows administrators to modify the word or phrase that is prohibited platform-wide, update the enforcement status (active or inactive), and provide or modify the explanation for why the word is banned. The operation enforces unique constraints on the word and ensures audit/history tracking for all changes. Only administrative users are permitted to update banned words. The response includes the full updated banned word record, reflecting all changes including status and any update to the enforcement or rationale.","description":"Update a banned word entry for the platform's content moderation system. Banned words are used by the system to filter and prevent submission of prohibited content across posts, comments, and other user inputs. Administrators can use this endpoint to change the prohibited word or phrase, adjust its enforcement status, and alter or add rationale for why it is banned.\n\nPlatform policy requires all changes to banned words to be logged and auditable, supporting compliance with moderation transparency. Updating a banned word may include activating or deactivating the enforcement, and modifying the reason message displayed to users on violation attempts.\n\nThe operation validates uniqueness (case-insensitive) for word updates and ensures that reactivation or deactivation is immediately propagated to all moderation flows. Only users with administrative privileges are authorized to perform this operation. Changes take effect immediately across the platform. If the word is already in use as a banned word for another entry, a conflict error will be returned. All input fields must adhere to character length and format constraints as defined by the Prisma schema.","summary":"Update a platform-wide banned word entry for content moderation (community_platform_banned_words).","parameters":[{"name":"bannedWordId","description":"Unique identifier of the banned word entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated banned word information to be applied to the record.","typeName":"ICommunityPlatformBannedWords.IUpdate"},"responseBody":{"description":"The updated banned word entry reflecting all applied changes.","typeName":"ICommunityPlatformBannedWords"},"authorizationRoles":["admin"],"name":"update","path":"/communityPlatform/admin/bannedWords/{bannedWordId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/bannedWords","method":"post"},"description":"The banned word entry must be created before it can be updated."}]},{"specification":"This operation permanently removes an existing banned word entry from the community_platform_banned_words table, executing a hard-delete of the record. This action is intended for administrative users to fully revoke a previously prohibited word or phrase from the platform. Removal of a banned word immediately eliminates its enforcement in all platform moderation and content-filtering workflows. The operation is irreversible and should be performed only after necessary verification or policy updates. Only users with admin privileges are authorized for this operation. No response body is returned on success.","description":"Remove a banned word from the system's prohibited content list. Once a banned word is deleted, it is no longer enforced by moderation filters, and its usage may become permissible for all platform users in posts, comments, and any user-submitted fields.\n\nDeleting a banned word is a hard-delete operation, which means the entry is permanently removed from the database (community_platform_banned_words), erasing all historical moderation controls associated with that word or phrase. This operation is exclusively available to admin users due to the impact on community safety and moderation effectiveness.\n\nUpon completion, the system instantly ceases enforcement of the removed word across all content moderation and validation flows. If an invalid or non-existent banned word ID is specified, an error is returned. Administrators should ensure policy and moderation staff are informed of such changes. No response body is returned for a successful deletion; errors are handled per platform standard error response structure.","summary":"Permanently delete a platform-wide banned word entry (community_platform_banned_words).","parameters":[{"name":"bannedWordId","description":"Unique identifier of the banned word entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/communityPlatform/admin/bannedWords/{bannedWordId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/bannedWords","method":"post"},"description":"The banned word must exist before it can be deleted. Creating the banned word is required to generate a valid bannedWordId for deletion."}]},{"specification":"This operation retrieves a paginated and filterable list of file uploads within the platform, based on the community_platform_file_uploads table in the Prisma schema. File uploads may include images or media attached to posts, community banners, or profile avatars. The operation supports advanced search including uploader filtering, MIME type, file size, creation date, and status. Used by moderators or administrators to oversee content assets and for troubleshooting reported uploads. All fields referenced strictly match the actual Prisma schema definition for file uploads, and results are returned in a summary/list form optimized for grid or table display. Soft-deleted files can be optionally included based on input filters.","path":"/communityPlatform/admin/fileUploads","method":"patch","summary":"Search, filter, and paginate file uploads in the platform (community_platform_file_uploads)","description":"This operation allows authorized users to search, filter, and retrieve a paginated list of files that have been uploaded to the platform. File upload records may represent images, documents, attachments to posts or comments, banners, or avatars, as recorded in the community_platform_file_uploads table. Filtering can be performed by uploader member, file type (MIME), status (active, deleted, archived), date ranges, or filename.\n\nPermissions should restrict non-admin/moderator users from retrieving files they do not own or are not allowed to view. Sensitive metadata, such as storage keys or file URLs, are handled according to platform privacy policy, only surfaced if access is warranted by the user's role (such as moderator or admin). Records reflect the Prisma schema's design, including the use of soft delete via the deleted_at field, which supports both active and archived asset queries. The operation validates complex filter input and handles errors for out-of-bounds page/sort specifications.\n\nAdministrators can use this endpoint for management review, abuse investigations, or media inventory, while users may access it for reviewing their own uploads or download history. Any soft-deleted files should be explicitly labeled in the result set when returned. Related business logic for audit logging or asset cleanup can reference this operation for evidence gathering and compliance checks.","parameters":[],"requestBody":{"description":"Filter, search, sorting, and pagination options for finding file uploads","typeName":"ICommunityPlatformFileUpload.IRequest"},"responseBody":{"description":"Paginated result set containing file upload summary information","typeName":"IPageICommunityPlatformFileUpload.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"At least one file upload must exist to be retrievable or filterable through the search endpoint."}]},{"specification":"This operation retrieves the detailed metadata for a specific file upload, as described in the community_platform_file_uploads table. It is used to display all available properties for a file—such as storage key, URL, uploader, MIME type, size, status, and timestamps—for review or download links. Access controls must ensure only administrators or the uploading user can access this data for privacy and security. File download is typically provided via the returned URL property, not by direct binary transfer in this operation.","path":"/communityPlatform/admin/fileUploads/{fileUploadId}","method":"get","summary":"Retrieve metadata for a specific file upload entry (community_platform_file_uploads)","description":"This endpoint returns comprehensive metadata describing a single file upload, as stored in the community_platform_file_uploads table. The result includes uploader information, file storage and access details, MIME type, size, status, and life cycle timestamps.\n\nAuthorization rules require that only the uploading member, a moderator with asset permissions, or an administrator may view all metadata fields or file URLs. Unauthorized users are blocked from accessing sensitive storage information. The result set adheres strictly to the actual database schema fields, never exposing extraneous details, and making soft-deleted (deleted_at != null) status explicit where appropriate.\n\nTypical use cases include allowing users to manage or re-download their own uploads, admin/media audits, compliance review, or resolving moderation actions regarding uploaded files. Non-downloadable and deleted files are clearly labeled to preclude user confusion or broken links.","parameters":[{"name":"fileUploadId","description":"Unique identifier of the file upload record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed metadata for the requested file upload record","typeName":"ICommunityPlatformFileUpload"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"A file upload must exist before its metadata can be retrieved. The POST operation creates a file upload entry that provides the fileUploadId used by this GET operation."}]},{"specification":"This operation enables users to upload files (such as images for posts, community banners, or avatars) to the platform. It operates on the community_platform_file_uploads table, tracking all metadata about the uploaded file including the uploader member, file status, MIME type, original filename, storage key, and URL. Uploaded files may be used in posts, comments, community branding, or as profile images. Only authenticated members are permitted to upload files, and uploads are subject to platform-wide restrictions on file type, allowed MIME types, and file size. Upon success, a record is created linking the file to the uploading user for moderation and audit purposes. Moderators and admins may later associate uploads to communities as banners or images. There is no public write access for guests or banned users.","description":"Members use this endpoint to upload one or multiple files that will later be attached to posts, communities, or user profiles. When a POST request is made to this endpoint, the system verifies the requester is an authenticated member with the status of 'active'. The file's metadata such as filename, mime type, file size, and URL are recorded, while physical file storage may be handled by an external file store (the system references only the storage key and URL).\n\nRate limits and file-type validation are strictly enforced to prevent abuse. The operation rejects files larger than platform limits or unsupported types, returning a descriptive error. Uploaded files are set to status 'active' and can be referenced by their unique identifier in future content submissions.\n\nSecurity considerations dictate that only members with verified email and appropriate status may upload. Moderators or admins can later manage or delete these files for compliance. The operation is related to content posting but is a prerequisite step for image posts or profile/community branding updates.\n\nOther API operations that rely on uploaded files include endpoints for creating posts with images, updating community or profile imagery, and moderation of offensive content.","summary":"Upload a new file to the platform and record its metadata in community_platform_file_uploads.","parameters":[],"requestBody":{"description":"File upload metadata including member identifier, original filename, MIME type, file size, and intended purpose. Actual file content should be uploaded to external storage, with storage key and URL recorded here.","typeName":"ICommunityPlatformFileUpload.ICreate"},"responseBody":{"description":"Returns the full file upload record including identifier, storage key, URL, and metadata.","typeName":"ICommunityPlatformFileUpload"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityPlatform/member/fileUploads","method":"post","prerequisites":[]},{"specification":"This operation updates metadata for an existing file upload in the community_platform_file_uploads table. Members may update only the files they originally uploaded, and this endpoint is typically used to change information such as the original filename (e.g., to fix typos), or to mark a file's status as deleted/archived, or to update the file's metadata after a moderation action. Moderators and admins may also invoke this API to update status or remove/access files as needed for compliance or takedown requests.","description":"Authenticated members, moderators, or admins use this endpoint to update non-binary metadata for a previously uploaded file. Allowed updates may include renaming the file, updating the status ('active', 'deleted', 'archived'), or changing the associated public URL when the file is moved in storage. The file upload record is uniquely identified by fileUploadId (UUID).\n\nThis operation enforces strict permission checks: a member may only update their own uploads; moderators and admins may update any file within their scope. Attempting to update the status to 'deleted' marks the file as soft-deleted and prevents further display/association but does not physically remove stored content (to preserve integrity and audit). Updated file uploads retain all prior relationships to posts, comments, communities, or profiles unless deleted.\n\nSecurity requirements and audit protocols are enforced at every update, ensuring the action is logged with member or role details. Related APIs include endpoints for deleting file associations from posts or communities and for retrieving file metadata by id.","summary":"Update metadata or logical status of an existing file upload in community_platform_file_uploads.","parameters":[{"name":"fileUploadId","description":"Unique identifier of the file upload to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the file upload metadata such as filename, status, or URL. Only non-binary changes allowed; actual storage/move/removal is out-of-band.","typeName":"ICommunityPlatformFileUpload.IUpdate"},"responseBody":{"description":"Returns the updated file upload metadata after modification.","typeName":"ICommunityPlatformFileUpload"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityPlatform/member/fileUploads/{fileUploadId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"File upload must be created before its metadata can be updated."}]},{"specification":"This operation updates metadata for an existing file upload in the community_platform_file_uploads table. Members may update only the files they originally uploaded, and this endpoint is typically used to change information such as the original filename (e.g., to fix typos), or to mark a file's status as deleted/archived, or to update the file's metadata after a moderation action. Moderators and admins may also invoke this API to update status or remove/access files as needed for compliance or takedown requests.","description":"Authenticated members, moderators, or admins use this endpoint to update non-binary metadata for a previously uploaded file. Allowed updates may include renaming the file, updating the status ('active', 'deleted', 'archived'), or changing the associated public URL when the file is moved in storage. The file upload record is uniquely identified by fileUploadId (UUID).\n\nThis operation enforces strict permission checks: a member may only update their own uploads; moderators and admins may update any file within their scope. Attempting to update the status to 'deleted' marks the file as soft-deleted and prevents further display/association but does not physically remove stored content (to preserve integrity and audit). Updated file uploads retain all prior relationships to posts, comments, communities, or profiles unless deleted.\n\nSecurity requirements and audit protocols are enforced at every update, ensuring the action is logged with member or role details. Related APIs include endpoints for deleting file associations from posts or communities and for retrieving file metadata by id.","summary":"Update metadata or logical status of an existing file upload in community_platform_file_uploads.","parameters":[{"name":"fileUploadId","description":"Unique identifier of the file upload to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the file upload metadata such as filename, status, or URL. Only non-binary changes allowed; actual storage/move/removal is out-of-band.","typeName":"ICommunityPlatformFileUpload.IUpdate"},"responseBody":{"description":"Returns the updated file upload metadata after modification.","typeName":"ICommunityPlatformFileUpload"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/communityPlatform/moderator/fileUploads/{fileUploadId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"File upload must be created before a moderator can update its metadata."}]},{"specification":"This operation updates metadata for an existing file upload in the community_platform_file_uploads table. Members may update only the files they originally uploaded, and this endpoint is typically used to change information such as the original filename (e.g., to fix typos), or to mark a file's status as deleted/archived, or to update the file's metadata after a moderation action. Moderators and admins may also invoke this API to update status or remove/access files as needed for compliance or takedown requests.","description":"Authenticated members, moderators, or admins use this endpoint to update non-binary metadata for a previously uploaded file. Allowed updates may include renaming the file, updating the status ('active', 'deleted', 'archived'), or changing the associated public URL when the file is moved in storage. The file upload record is uniquely identified by fileUploadId (UUID).\n\nThis operation enforces strict permission checks: a member may only update their own uploads; moderators and admins may update any file within their scope. Attempting to update the status to 'deleted' marks the file as soft-deleted and prevents further display/association but does not physically remove stored content (to preserve integrity and audit). Updated file uploads retain all prior relationships to posts, comments, communities, or profiles unless deleted.\n\nSecurity requirements and audit protocols are enforced at every update, ensuring the action is logged with member or role details. Related APIs include endpoints for deleting file associations from posts or communities and for retrieving file metadata by id.","summary":"Update metadata or logical status of an existing file upload in community_platform_file_uploads.","parameters":[{"name":"fileUploadId","description":"Unique identifier of the file upload to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the file upload metadata such as filename, status, or URL. Only non-binary changes allowed; actual storage/move/removal is out-of-band.","typeName":"ICommunityPlatformFileUpload.IUpdate"},"responseBody":{"description":"Returns the updated file upload metadata after modification.","typeName":"ICommunityPlatformFileUpload"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityPlatform/admin/fileUploads/{fileUploadId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"File upload must exist before updating its metadata or status."}]},{"specification":"This operation permanently removes a file upload record from the platform database. It operates on the community_platform_file_uploads table in the Prisma schema. The record identified by the 'fileUploadId' parameter is deleted, which means its status and associated data in referencing tables must be updated as per cascade or referential integrity rules. The operation is used for file management, cleanup of orphan uploads, or admin/moderator-driven takedown of inappropriate content. Security policies ensure only authorized users (moderator/admin) may erase file upload records. Hard deletion is performed only if necessary and approved by platform policy; otherwise, a soft delete is applied by updating the 'deleted_at' field. Cascade delete may remove associated banners, images, or post image references, and this must be handled with care. Users and content that link to this file may experience broken images or media upon removal. This API is used rarely for manual moderation or system cleanup, not as part of normal end-user workflow.","description":"The purpose of this operation is to delete a file upload entry from the community_platform_file_uploads table, which tracks all files users have uploaded to the platform (e.g., profile pictures, post images, community banners/icons). The operation takes a fileUploadId as a path parameter and will remove the associated row. This includes enforcing referential integrity, meaning files used in banners, post images, or community images are also removed if they lose their reference, according to onDelete: Cascade. \n\nFile records contain metadata for file location (storage_key, url), ownership (uploaded_by_member_id), MIME type, and status (active, deleted). The field 'deleted_at' is updated to the current timestamp when a soft deletion occurs; for hard delete, the row is removed entirely. Deleting an upload is a privileged action: only a moderator or admin may erase a file. The operation ensures audit logging and may trigger further cleanups in related image or post tables.\n\nRelated operations include uploading a new file (POST), restoring (undelete) a soft-deleted file, and listing files for a user or community. Validation includes ensuring the fileUploadId exists, the user has correct role and ownership or admin rights, and that the file is not currently required for non-deletable key entities. Errors include attempting to delete files still referenced as essential in the schema (e.g., a current banner image), lack of permission, or not found (404).","summary":"Permanently erase a file upload record from the platform database (community_platform_file_uploads).","path":"/communityPlatform/admin/fileUploads/{fileUploadId}","method":"delete","parameters":[{"name":"fileUploadId","description":"Unique identifier for the file upload record to be deleted, must be UUID format.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"File upload must exist before it can be erased from the platform database."}]},{"specification":"This operation permanently removes a file upload record from the platform database. It operates on the community_platform_file_uploads table in the Prisma schema. The record identified by the 'fileUploadId' parameter is deleted, which means its status and associated data in referencing tables must be updated as per cascade or referential integrity rules. The operation is used for file management, cleanup of orphan uploads, or admin/moderator-driven takedown of inappropriate content. Security policies ensure only authorized users (moderator/admin) may erase file upload records. Hard deletion is performed only if necessary and approved by platform policy; otherwise, a soft delete is applied by updating the 'deleted_at' field. Cascade delete may remove associated banners, images, or post image references, and this must be handled with care. Users and content that link to this file may experience broken images or media upon removal. This API is used rarely for manual moderation or system cleanup, not as part of normal end-user workflow.","description":"The purpose of this operation is to delete a file upload entry from the community_platform_file_uploads table, which tracks all files users have uploaded to the platform (e.g., profile pictures, post images, community banners/icons). The operation takes a fileUploadId as a path parameter and will remove the associated row. This includes enforcing referential integrity, meaning files used in banners, post images, or community images are also removed if they lose their reference, according to onDelete: Cascade. \n\nFile records contain metadata for file location (storage_key, url), ownership (uploaded_by_member_id), MIME type, and status (active, deleted). The field 'deleted_at' is updated to the current timestamp when a soft deletion occurs; for hard delete, the row is removed entirely. Deleting an upload is a privileged action: only a moderator or admin may erase a file. The operation ensures audit logging and may trigger further cleanups in related image or post tables.\n\nRelated operations include uploading a new file (POST), restoring (undelete) a soft-deleted file, and listing files for a user or community. Validation includes ensuring the fileUploadId exists, the user has correct role and ownership or admin rights, and that the file is not currently required for non-deletable key entities. Errors include attempting to delete files still referenced as essential in the schema (e.g., a current banner image), lack of permission, or not found (404).","summary":"Permanently erase a file upload record from the platform database (community_platform_file_uploads).","path":"/communityPlatform/moderator/fileUploads/{fileUploadId}","method":"delete","parameters":[{"name":"fileUploadId","description":"Unique identifier for the file upload record to be deleted, must be UUID format.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"The file upload record must exist before it can be deleted. Creating a file upload is required to have a valid fileUploadId for deletion."}]},{"specification":"This operation searches and filters platform members (users) according to various criteria, including email, status, and registration or update timestamps. It operates on the community_platform_members table, providing paginated and sortable results for user management, audit, or moderation views. Filtering supports searching by partial email, current status (active, blocked, suspended, deleted), and date ranges for account activity. Results include essential user properties such as ID, email, status, and timestamps, but never sensitive data such as password hashes. This API is intended for admin, moderator, or platform management dashboards, and is protected by authorization. Sensitive operations, such as seeing blocked or deleted accounts, are restricted to admin roles.","description":"This operation enables administrators and authorized moderators to search the list of registered members (users) of the community platform. It accesses the community_platform_members table and supports advanced filtering by email (partial match), registration date, last updated date, and account status. Paging and sorting options ensure that large user lists are manageable, with results returned as paginated summaries.\n\nEach result record contains the member's ID, email, current status, creation and update times, and, if allowed, additional public properties. Sensitive authentication details, such as the password hash, are never returned. Search operations may be rate-limited and are typically used for management, moderation, user analytics, audit logging, or verification flows.\n\nSecurity is enforced via admin or moderator roles: only those roles can retrieve the full user list or see accounts in 'blocked' or 'deleted' status. Usage includes finding potentially abusive accounts, filtering members by verification state, or generating audit/compliance reports. Related endpoints include retrieval of individual member details (GET by ID), status update (PUT), and creation or removal of users (for admin systems). Errors include invalid filter criteria or access denied for insufficient permissions.","summary":"Search and filter platform members (users) with pagination and detailed criteria (community_platform_members).","path":"/communityPlatform/admin/members","method":"patch","parameters":[],"requestBody":{"description":"Filter, search, and pagination options for listing members, such as email, status, registration/updated date range, and sort order.","typeName":"ICommunityPlatformMember.IRequest"},"responseBody":{"description":"Paginated results containing member user summaries according to the search and filter criteria.","typeName":"IPageICommunityPlatformMember.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation searches and filters platform members (users) according to various criteria, including email, status, and registration or update timestamps. It operates on the community_platform_members table, providing paginated and sortable results for user management, audit, or moderation views. Filtering supports searching by partial email, current status (active, blocked, suspended, deleted), and date ranges for account activity. Results include essential user properties such as ID, email, status, and timestamps, but never sensitive data such as password hashes. This API is intended for admin, moderator, or platform management dashboards, and is protected by authorization. Sensitive operations, such as seeing blocked or deleted accounts, are restricted to admin roles.","description":"This operation enables administrators and authorized moderators to search the list of registered members (users) of the community platform. It accesses the community_platform_members table and supports advanced filtering by email (partial match), registration date, last updated date, and account status. Paging and sorting options ensure that large user lists are manageable, with results returned as paginated summaries.\n\nEach result record contains the member's ID, email, current status, creation and update times, and, if allowed, additional public properties. Sensitive authentication details, such as the password hash, are never returned. Search operations may be rate-limited and are typically used for management, moderation, user analytics, audit logging, or verification flows.\n\nSecurity is enforced via admin or moderator roles: only those roles can retrieve the full user list or see accounts in 'blocked' or 'deleted' status. Usage includes finding potentially abusive accounts, filtering members by verification state, or generating audit/compliance reports. Related endpoints include retrieval of individual member details (GET by ID), status update (PUT), and creation or removal of users (for admin systems). Errors include invalid filter criteria or access denied for insufficient permissions.","summary":"Search and filter platform members (users) with pagination and detailed criteria (community_platform_members).","path":"/communityPlatform/moderator/members","method":"patch","parameters":[],"requestBody":{"description":"Filter, search, and pagination options for listing members, such as email, status, registration/updated date range, and sort order.","typeName":"ICommunityPlatformMember.IRequest"},"responseBody":{"description":"Paginated results containing member user summaries according to the search and filter criteria.","typeName":"IPageICommunityPlatformMember.ISummary"},"authorizationRole":"moderator","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves the detailed profile and account information of a specific registered member, based on their unique member ID. It is based on the community_platform_members table from the Prisma schema. The operation fetches all public and account-specific fields relevant to the requesting user's role, returning user details such as email, verification state, account status, registration timestamps, and related entity references. It is used to display member profiles and verify account information for user-facing profile pages and administrative actions.","description":"Retrieves all available profile and account information for a single registered member based on the provided memberId. This includes public and private fields depending on the role and context of the requester. Information provided consists of member email, account verification state, status (e.g., active, blocked, suspended), and activity timestamps such as created_at and updated_at. \n\nIf the requester is viewing their own profile or has sufficient permissions (e.g., admin), additional protected fields may be exposed in the response as allowed by business rules. All sensitive authentication data, such as password hashes, are strictly omitted from public output.\n\nThis operation is directly aligned with the community_platform_members table, referencing related entities such as profiles, subscriptions, posts, comment histories, and karma. Proper permissions and privacy logic are enforced in the business layer depending on the requester's identity.\n\nError handling covers not-found situations, permission blocks, and privacy restrictions, ensuring members can only view information for which they have rights. Used in user profile pages and admin tools for inspecting member records.","summary":"Retrieve the full account and profile details of a specific member by ID from the community_platform_members table.","parameters":[{"name":"memberId","description":"Unique identifier (UUID) of the member whose profile information is requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed account and public profile information for the specified member as defined in ICommunityPlatformMember DTO.","typeName":"ICommunityPlatformMember"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/members/{memberId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"A member (user) must be created by registering as a community platform member before their full profile and account details can be retrieved by ID."}]},{"specification":"This operation updates the user account and profile information (email, status, or other updatable account fields) for a specific registered member, identified by memberId. The operation acts on the community_platform_members table in the Prisma schema. Current status, email, and any other applicable fields (excluding authentication-sensitive data such as password_hash) may be updated, according to platform business rules. Used for account settings, administrative actions, or profile editing features for members and admins.","description":"Updates account-related information for an existing registered member. Accepts a request body detailing changes allowed by business policy: this can include email address, status, and potentially other permitted metadata for a member user.\n\nThis operation is strictly scoped to fields that are considered safe for update by the authenticated user or administrators based on business rules in the community_platform_members table. It never allows modification to security-critical fields such as password_hash via this endpoint. Status changes (e.g., blocking, reactivation) require appropriate permissions, only available to admin or system flows.\n\nInput validation ensures emails remain unique and conform to required formats, and account status transitions are respected. The operation returns the full, updated account/profile entity as confirmation. Error handling covers invalid transitions, unique constraint violations, unauthorized update attempts, and not-found errors.","summary":"Update permitted account/profile fields for a specified member in the community_platform_members table.","parameters":[{"name":"memberId","description":"Unique identifier (UUID) of the member whose profile/account is being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed for update on the community_platform_members entity (e.g., email, status), per current platform policy.","typeName":"ICommunityPlatformMember.IUpdate"},"responseBody":{"description":"The updated member account and profile fields after applied changes, as defined by ICommunityPlatformMember DTO.","typeName":"ICommunityPlatformMember"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityPlatform/member/members/{memberId}","method":"put","prerequisites":[]},{"specification":"This operation permanently removes a member account—including all personal information and associated platform entities, such as posts, comments, and subscriptions—from the database. It is directly associated with the community_platform_members table in the Prisma schema. Upon successful execution, the record and all related data are hard deleted (no soft delete is performed, as only 'deleted_at' exists). This operation should only be accessible to platform administrators for compliance, user erasure requests, or disciplinary enforcement. The operation enforces proper authorization and ensures no residual personally identifiable information remains, per platform and regulatory policy. All references with foreign key integrity are set to cascade on delete, ensuring complete removal of linked data for audit compliance.\n\nSecurity considerations are paramount, requiring strict admin-only access and full audit logging. This operation is irreversible, and caution must be exercised to prevent accidental or unauthorized mass deletions.","description":"Delete a member account from the platform by its unique identifier. This endpoint enables administrators to perform hard deletion (irreversible removal) of a user, including all associated posts, comments, votes, and subscriptions. The operation first checks admin-level authorization, verifies that the member ID exists, and enforces all relational cascade deletions as defined in the Prisma schema. This action is critical for fulfilling account erasure and legal compliance requests.\n\nThe operation is tightly integrated with the community_platform_members table, referencing relational constraints with dependent records in the communities, posts, comments, votes, subscriptions, karma, and reports tables. As the Prisma schema supports a soft delete via 'deleted_at', but this API implements hard deletion, the operation ensures all data is unrecoverable after execution.\n\nExpected behavior includes proper audit logging of the action and notification to all affected subsystems. Error handling is implemented for non-existent IDs, insufficient permissions, and failed transactional deletes. The response is empty, indicating successful erasure or returns error details if unsuccessful.","summary":"Permanently delete (hard-delete) a member account from community_platform_members.","parameters":[{"name":"memberId","description":"The UUID of the member to be permanently deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/communityPlatform/admin/members/{memberId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of moderator assignments in the platform, supporting query parameters for community scope, member, role, status, and time ranges. It is based on the community_platform_moderators table in the Prisma schema and is accessible by admin users who require insight into overall moderation coverage, assignment history, and current or historical moderator roles. The endpoint is designed for auditing moderator activities, filling moderation gaps, or performing moderator-related operations in bulk. The response includes key moderator assignment details (such as community, member, role, status, and timestamps) optimized for administrative listing and review workflows.\n\nThe operation supports advanced searching, sorting, and pagination. Authorization is strictly controlled; only admins can view the full moderator landscape across communities. Member and standard moderator users must use restricted counterparts provided in other endpoints if applicable.","description":"Retrieve a search-filtered, paginated list of community moderator assignments from the system. This endpoint supports query parameters for filtering by assigned community, associated member, moderator role, and status, as well as sorting by assignment or update time. Designed for admin-level oversight, the operation aids in identifying current and historical moderator roles, auditing assignment changes, and managing moderator team composition across communities.\n\nSecurity and privacy are enforced so only users with 'admin' role have access to comprehensive listing. Results return basic moderator assignment information as defined in the community_platform_moderators schema, including references to community_id, member_id, moderator status, email, and assignment timestamps. This operation is intended to provide administrative visibility and support moderator management tasks, escalation preparedness, and compliance reviews.\n\nRelated API endpoints may allow filtering for a single community or member. This operation focuses on platform-wide or cross-community listing for supervisory roles. Appropriate error handling is in place for invalid filter values, insufficient permissions, or excessive query ranges. Pagination metadata is included with each response.","summary":"List, filter, and paginate moderator assignments (from community_platform_moderators).","parameters":[],"requestBody":{"description":"Advanced moderator filtering, pagination, and query parameters.","typeName":"ICommunityPlatformModerator.IRequest"},"responseBody":{"description":"Paginated list of moderator assignment summaries matching the given criteria.","typeName":"IPageICommunityPlatformModerator.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/communityPlatform/admin/moderators","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"A community must be created before a moderator assignment for a specific community can exist or be listed."},{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"A member must exist before they can be assigned as a moderator to a community; creating a post requires a member and establishes member existence."}]},{"specification":"This operation retrieves detailed information about a specific moderator assigned to a particular community on the platform. It is based on the community_platform_moderators table, which stores elevated moderation privileges for users within specific communities. The returned data includes the moderator's UUID, related member information, the community they moderate, their current status, assigned email, creation and update timestamps, and soft-deletion information if applicable. This endpoint is solely for retrieving a single moderator assignment entry, supporting user permissions, compliance audits, and platform management requirements.","description":"Retrieve the full details for a single moderator entity by its unique UUID. The moderator represents a specific assignment of moderation privileges for a member in a community. This operation allows administrative or privileged actors to query moderator assignments for compliance review, permission tracing, or interface display.\n\nModerators are tightly linked to platform members and communities. The information returned includes all assigned privileges, role status, and any pending suspension or deletion. Sensitive data such as passwords are excluded from the response object. Authorization is required for access, and the endpoint is intended for use in both admin and privileged moderation UIs, as well as support tools. If the specified moderatorId does not exist or has been deleted, an appropriate error response should be returned.\n\nSecurity and auditing: This endpoint should be accessed only by authorized roles, such as admins, or with appropriate permission checks, as moderation assignments represent sensitive access rights. All retrievals are logged for compliance purposes. Usage in business interfaces for adjusting or displaying moderator staff lists is a primary scenario.","summary":"Retrieve detailed information of a specific moderator assignment (community_platform_moderators).","parameters":[{"name":"moderatorId","description":"The unique identifier (UUID) of the moderator assignment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the moderator assignment, including member linkage and moderation privileges.","typeName":"ICommunityPlatformModerator"},"authorizationRoles":["admin"],"name":"at","path":"/communityPlatform/admin/moderators/{moderatorId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"A community must be created before any moderator assignment (and thus moderator with unique ID) can exist."},{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"A member must exist prior to being assigned as a moderator, and creating a post represents member creation and existence."}]},{"specification":"This operation updates an existing moderator assignment's details within a community. It operates on the community_platform_moderators table, enabling permitted actors (admins or system tools) to modify moderator account information, such as status (active/suspended/resigned), privileges, and update audit details. This action is critical for effective moderation team management, incident response, and permissions adjustment. All changes are logged and audited for compliance.","description":"Update the details of an existing moderator assignment record, referenced by its UUID. This operation can be used to suspend, reinstate, or alter moderator status and assignment parameters, in accordance with business policy or incident review.\n\nAllowable updates include status, email/contact (if needed), and account assignment properties. Authentication and strict permission checks are enforced; typically, only administrative staff may initiate updates. The request body must confirm to the update DTO and may trigger further audits or notifications depending on policy.\n\nThis operation is a hard update against the underlying database record in community_platform_moderators. Change actions are recorded for traceability, and workflows should handle cases where attempted updates reference non-existent or deleted moderator entries. Related interfaces may refresh the moderator assignment list upon successful update, ensuring UIs and compliance tools reflect the latest state.","summary":"Update the assignment details or status for a specific moderator entry (community_platform_moderators).","parameters":[{"name":"moderatorId","description":"The unique identifier (UUID) of the moderator assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data fields required to update the moderator assignment.","typeName":"ICommunityPlatformModerator.IUpdate"},"responseBody":{"description":"The updated moderator assignment as recorded after the change.","typeName":"ICommunityPlatformModerator"},"authorizationRoles":["admin"],"name":"update","path":"/communityPlatform/admin/moderators/{moderatorId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"post"},"description":"A moderator assignment must exist for the moderatorId before it can be updated. Use POST /communityPlatform/admin/communities/{communityId}/moderatorAssignments to create the assignment and provide a valid moderatorId for update."}]},{"specification":"This operation permanently removes a moderator record from the community_platform_moderators table. It is intended for administrative scenarios where a moderator's assignment or credentials should be revoked immediately—either as a disciplinary action, due to role expiration, or member resignation. This operation will execute a hard delete by physically removing the moderator record, as the model defines a nullable deleted_at column to support soft deletion but since this is an administrator-triggered action, the operation should remove the record permanently unless a soft-delete business rule is required elsewhere. The endpoint is strictly restricted to users with 'admin' privileges to ensure only authorized administrators can perform moderator removal. All deletions must be fully audited, and affected moderation assignments in related tables should be reviewed for integrity post-deletion. If required, post-deletion logic such as orphaned moderation queues or reassignment of community moderators must be handled in dependent business workflows. Operation is not to be exposed to nominal members or moderators themselves.","description":"This operation offers administrators the ability to permanently delete a moderator entity from the platform. The community_platform_moderators schema associates each moderator to a member, an assigned community, and other metadata used by escalation and policy enforcement. By accessing this endpoint, an administrator can revoke a moderator's control over a given community, which is useful in disciplinary scenarios, moderator retirement, or as part of community restructuring.\n\nThe operation enforces strict role-based access control: only users with the 'admin' role can execute deletions. The endpoint consumes a moderatorId as a path parameter, referencing the primary key of the moderator assignment to target. Upon successful invocation, the moderator record is removed from the database and is no longer valid for authentication, and related audit logs should record the actor, action, and targeted moderator.\n\nCare should be taken to understand cascade behaviors: removal does not automatically remove the member's basic account, nor does it reassess community-level permissions unless additional business rules specify this. All changes associated with deleting the moderator (e.g., removal from moderation queues, reports, or community assignments) must be handled by the related business workflows, ideally via post-delete hooks or batch reconciliation to preserve data integrity and traceability for compliance. System will return confirmation of deletion or error if the target identifier is not found.","summary":"Permanently delete a moderator assignment by its ID (community_platform_moderators table).","parameters":[{"name":"moderatorId","description":"Unique identifier for the moderator to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/communityPlatform/admin/moderators/{moderatorId}","method":"delete","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"post"},"description":"A moderator assignment must exist for the moderatorId before it can be deleted. Use POST /communityPlatform/admin/communities/{communityId}/moderatorAssignments to create the assignment and provide a valid moderatorId for deletion."}]},{"specification":"This operation retrieves a paginated, filterable list of all admin accounts stored in the community_platform_admins table. The endpoint supports advanced search, filtering by status, and sorting (e.g., by creation date, updated date, or admin role such as superuser). This API is essential for backoffice or platform operators to audit, monitor, and manage administrator users effectively. Common use cases include reviewing administrator activity, validating access rights, performing status audits, and supporting compliance reviews—particularly where separation of duty is required. Response will use a summary DTO format to protect sensitive fields such as password hashes while exposing operationally relevant metadata (email, superuser status, timestamps, and status fields). Access to this list is strictly limited to authenticated 'admin' users only.","description":"This operation provides a paginated and filterable index of administrator accounts from the community_platform_admins Prisma schema. Each administrator is represented by metadata such as their unique ID, email, whether they are a superuser, their account status (e.g., active, suspended, deleted), and audit timestamps. The operation is essential for performing platform-wide management, facilitating compliance monitoring, and supporting security reviews such as separation-of-duty analysis or admin credential audits.\n\nSecurity and privacy are paramount: full exposure of admin details is only available to authenticated users with the 'admin' role. Sensitive details such as password hashes are never returned. All search activity should be logged for audit traceability. The endpoint supports complex filters and sorts—for example, filtering by status or superuser state, and sorting by created_at or updated_at.\n\nThe response returns a paginated summary DTO for each admin record to enable efficient rendering and actionable insights for backoffice and operational dashboards. Should be integrated with admin role management workflows (e.g., onboarding, offboarding, role changes), and related platform auditing/monitoring flows. If a search/filter returns no results, an empty dataset with pagination metadata is returned. Robust error handling ensures forbidden access is detected and logged, with appropriate messages for unauthorized requests.","summary":"List, filter, and paginate all platform admin accounts (community_platform_admins table).","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering and sorting admin accounts.","typeName":"ICommunityPlatformAdmin.IRequest"},"responseBody":{"description":"Paginated list of admin account summaries with audit fields (excluding sensitive credentials).","typeName":"IPageICommunityPlatformAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityPlatform/admin/admins","method":"patch","prerequisites":[]},{"specification":"Retrieve the detailed information for a specific platform administrator. This operation targets the community_platform_admins table and allows authorized platform actors (admin role) to fetch full metadata about a given admin, identified by their unique UUID. Use this operation to fetch admin details for profile, audit, status, or management workflows. Output includes email, superuser status, current status, timestamps, and related audit fields. Only accessible to authenticated admin users for compliance and privacy.","path":"/communityPlatform/admin/admins/{adminId}","method":"get","summary":"Retrieve detailed information for a specific platform administrator (community_platform_admins).","description":"This operation retrieves the complete profile for a platform administrator based on the provided adminId. The adminId must match a valid UUID for an administrator in the community_platform_admins table. Returned information includes the admin's email address, superuser privilege flag, account status (such as active or suspended), and audit metadata (timestamps for creation, update, and soft deletion).\n\nSecurity for this operation is strict: only users with the admin role may access this endpoint, enabling platform staff to view or verify other admin accounts for platform management, compliance, or delegation of privileges. Sensitive information (like password hashes or MFA secrets) is not included in the response.\n\nThe response body reflects all core fields in the Prisma schema, including audit fields useful for administrative interfaces. Related sub-entities (such as logs, assignments) are not returned but may be referenced elsewhere. Error scenarios include invalid or missing adminId, unauthorized access, or non-existent records.","parameters":[{"name":"adminId","description":"Unique identifier (UUID) of the platform administrator to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full profile details for the requested administrator, as defined in ICommunityPlatformAdmin.","typeName":"ICommunityPlatformAdmin"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[]},{"specification":"Update the detailed information and status of a platform administrator. This operation is for the community_platform_admins table and allows platform superusers or authorized admins to modify administrator account metadata. Editable fields include status, superuser flag, and optionally email/password (according to policy). Used for suspending, reactivating, promoting, or changing email of admin accounts. Only accessible to superuser/admin roles under strict policy.","path":"/communityPlatform/admin/admins/{adminId}","method":"put","summary":"Update a specific platform administrator's profile/status (community_platform_admins).","description":"This operation updates the properties of a platform administrator, identified by their adminId, as stored in the community_platform_admins table. Acceptable fields for updating depend on business policies: typically, account status, superuser privileges, and email are updatable. Password_hash changes may require additional security workflows and are generally handled by dedicated credential endpoints for best practice.\n\nOnly users with admin authorization, typically superusers, may invoke this operation. All updates are subject to audit requirements: the API must maintain timestamps and provide clear history for compliance. Responses include the updated admin's complete entity details as confirmation. Attempts to update non-existent, deleted, or unauthorized admin accounts will yield appropriate errors or rejections by business logic.\n\nAll modifications must comply with account lifecycle rules, and platform policies regarding administrative privilege changes, to prevent privilege escalation or accidental lockouts. Sensitive settings and credentials must be protected according to security guidelines.","parameters":[{"name":"adminId","description":"Unique identifier (UUID) of the administrator to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the administrator (status, superuser flag, email, or other editable properties).","typeName":"ICommunityPlatformAdmin.IUpdate"},"responseBody":{"description":"The administrator profile after the update, including current status and privileges.","typeName":"ICommunityPlatformAdmin"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of communities from the database. It leverages the community_platform_communities table as defined in the Prisma schema and supports advanced query options for filtering, searching, pagination, and sorting. The search parameters can include community name, status (active, banned, etc.), time range, and more. The response contains paginated community summary entries suitable for display in lists, enabling features like search by name, sorting by creation date, title, and flexible result navigation. Security considerations ensure that non-public or banned communities are filtered according to the requesting user's permissions as defined in business requirements, with public discovery for guests but more details for authenticated members, moderators, or admins. This operation is intended for powering the community discovery, search, and feed population UIs. Edge cases are handled when communities are soft deleted or restricted, and error responses are provided for invalid parameters or unauthorized filters. It is related to other business operations for detailed community view, post listing, and subscription workflows. Pagination parameters must be respected to avoid over-loading responses.","description":"This operation enables paginated and filtered retrieval of communities from the platform, supporting advanced search, filter, and sorting options as defined by business requirements. Users can search by partial community name, filter by status (such as active, private, or banned), and limit results based on creation date or other relevant metadata. The operation is used for both community discovery (public to all users) and for internal management interfaces (admins, moderators) with appropriate permission filters applied.\n\nAuthorization plays a critical role, with public users limited to public and discoverable communities, while authenticated users may see communities they moderate or administer, including some with restricted status. The response schema includes essential details such as community IDs, name, title, description, status, slug, and creation timestamp, but hides sensitive or restricted fields from unauthorized users. Efficient implementation is necessary to support large-scale listing, with all filters and sorting parameters validated per requirements and Prisma schema, and invalid queries return appropriate error messages.\n\nThis endpoint integrates closely with other API operations including detailed community view (GET by ID), community post listing, community creation (POST), status management (PUT), moderation assignment, and subscription APIs. Errors are handled gracefully, returning user-friendly messages for filter/sort parameter issues or unauthorized attempts at restricted data.","summary":"Search and retrieve a paginated, filtered list of communities from the platform.","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for community listing.","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"Paginated list of community summaries matching the query criteria.","typeName":"IPageICommunityPlatformCommunity.ISummary"},"authorizationRoles":[],"name":"index","path":"/communityPlatform/communities","method":"patch","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of communities on the platform with support for advanced search, sorting (hot, new, top, controversial), and filtering based on status, name, or metadata. The operation works on the community_platform_communities table in the Prisma schema. It enables members, moderators, and admins to explore and discover communities using a variety of criteria, supporting personalized and global discovery flows. Each result includes summary information suitable for list displays, such as name, title, status, and key stats. Pagination and sorting enable efficient navigation across potentially large result sets.","description":"Retrieve a paginated and searchable list of communities, allowing the user to filter by status, search by name or title, and sort using different algorithms (hot, new, top, controversial). This endpoint supports members in finding new communities to join as well as moderators/admins in reviewing community listings.\n\nSecurity-wise, access to public communities is typically open to all authenticated users, but the underlying search and metadata returned can be filtered based on authorization context and privacy constraints. Advanced user roles may receive additional metadata such as moderation status or hidden communities depending on platform rules.\n\nThis endpoint operates on the community_platform_communities table, leveraging fields like name, title, description, slug, status, and created_at. The request body allows for specification of filtering, sorting, and pagination preferences. Business logic, such as maximum communities per page and allowed search filters, is enforced based on platform configuration. List results are optimized for display and bandwidth efficiency.\n\nBehavior in case of errors includes returning an empty array for no match, descriptive error messages for invalid filters, and enforcing appropriate rate limits to protect backend resources.","summary":"Search, filter, and paginate the list of communities (community_platform_communities table).","parameters":[],"requestBody":{"description":"Structured search, sorting, and pagination parameters for querying the community list.","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"Paginated and filtered list of community summary objects, matching the search and sort criteria requested.","typeName":"IPageICommunityPlatformCommunity.ISummary"},"authorizationRoles":["member"],"name":"index","path":"/communityPlatform/member/communities","method":"patch","authorizationRole":"member","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific community on the platform. It operates on the community_platform_communities table, using the provided communityId to fetch metadata such as community name, title, description, slug, status, and associated settings. This is essential for displaying the main community page, verifying community existence, and supporting various display and moderation workflows.","description":"Retrieve detailed metadata and configuration for the specified community using its unique identifier. This encompasses key community details including the display title, name, description, slug, status, associated creator, timestamps, and deletion status.\n\nAuthorization for this operation is public, enabling both authenticated users and guests to load community pages for engagement or browsing. However, the system may enforce access control for non-public or restricted communities depending on the status.\n\nThe data for this operation corresponds to the community_platform_communities Prisma DB schema, directly mapping all columns for accurate platform representation. Any business logic regarding soft-deleted or private communities must be handled in downstream logic, but their visibility can be reflected via the status and deleted_at fields.\n\nRelated operations include listing communities for discovery, creating a new community, updating existing community settings, and moderation of community attributes. Failure conditions include invalid communityId, non-existing communities, or restricted/archived status.","summary":"Retrieve detailed information for a specific community from the community_platform_communities table.","parameters":[{"name":"communityId","description":"Unique identifier of the target community.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information representing the selected community and its metadata.","typeName":"ICommunityPlatformCommunity"},"authorizationRoles":[],"name":"at","path":"/communityPlatform/communities/{communityId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"A community must be created before its detailed information can be retrieved by communityId."}]},{"specification":"This operation creates a new community within the platform, directly inserting a record into the community_platform_communities table with initial attributes. It supports unique community name enforcement, proper linking to the creator member, and captures details required for initializing a new community space (including title, description, slug, and optional image/banner setup workflows).","description":"Allow an authenticated member to create a new community, supplying a unique name, title, description, slug, and other initial configuration fields. The operation will validate business rules such as name case insensitivity and length, description validity, member creation quotas, and association with the initiating member as the creator.\n\nUpon successful creation, the member becomes the initial moderator and owner of the community, and all relevant fields such as creation timestamps, status, and moderation links are recorded as described in the community_platform_communities Prisma schema.\n\nValidation includes: enforcing unique name and slug, length and format checks, restrictions against banned/prohibited names, and ensuring the member does not exceed their creation quota (as defined by the associated business rules document). If any validation fails, a clear error is returned with actionable information.\n\nFollowing successful creation, clients may call further API operations to manage images, banners, community rules, or assign additional moderators. Related operations include updating community settings, viewing community details, and deleting or archiving communities (subject to permissions and soft-delete policy).","summary":"Create a new community, enforcing unique naming and member creation policy, via community_platform_communities.","parameters":[],"requestBody":{"description":"Community creation information, including unique name, title, description, slug, and the creator member's identifier.","typeName":"ICommunityPlatformCommunity.ICreate"},"responseBody":{"description":"The newly created community including all its metadata, associations, and initial configuration.","typeName":"ICommunityPlatformCommunity"},"authorizationRoles":["member"],"name":"create","path":"/communityPlatform/member/communities","method":"post","authorizationRole":"member","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing community's metadata and settings in the community_platform_communities table. The endpoint enables authorized users (moderators or admins) to change fields such as the title, description, status, and visual elements (icon/banner associations may be updated through related endpoints). The operation ensures that only moderators assigned to the specific community or admins can perform updates, and all changes are subject to validation constraints, including length restrictions and uniqueness for fields like name and slug. Audit trails and notifications must be maintained as required by the business and compliance rules.","description":"This operation allows authorized users (community moderators or platform admins) to update a community's properties, including title, description, status, and URL slug, within the community_platform_communities table.\n\nOnly users with moderator or admin roles may access this endpoint. The operation strictly enforces all validation constraints, such as unique name/slug, permissible status transitions (e.g., activating, suspending, or banning a community), and character limits on title and description. Updates to imagery or branding assets (e.g., icons, banners) are to be managed via separate related endpoints, but references can be altered if schema relationships exist.\n\nAll modification events are logged with before-and-after snapshots for audit and legal compliance. The endpoint implements business rules regarding moderation policies, and an appropriate error message is returned if validation fails (e.g., duplicate names, policy violations, or restrictions due to banned/archive status).\n\nThis operation is related to other community management APIs, including creation, deletion (archival), moderator assignments, and status updates. Edge cases, like concurrent updates or forbidden changes due to policy, are handled according to platform error handling standards.","summary":"Update and manage community properties in the community_platform_communities table.","parameters":[{"name":"communityId","description":"Unique identifier of the community to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating community properties like title, description, status, and slug.","typeName":"ICommunityPlatformCommunity.IUpdate"},"responseBody":{"description":"The updated community record after applying all requested changes.","typeName":"ICommunityPlatformCommunity"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityPlatform/admin/communities/{communityId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before it can be updated. The create community operation initializes the community entity referenced by communityId in the update operation."}]},{"specification":"This operation updates an existing community's metadata and settings in the community_platform_communities table. The endpoint enables authorized users (moderators or admins) to change fields such as the title, description, status, and visual elements (icon/banner associations may be updated through related endpoints). The operation ensures that only moderators assigned to the specific community or admins can perform updates, and all changes are subject to validation constraints, including length restrictions and uniqueness for fields like name and slug. Audit trails and notifications must be maintained as required by the business and compliance rules.","description":"This operation allows authorized users (community moderators or platform admins) to update a community's properties, including title, description, status, and URL slug, within the community_platform_communities table.\n\nOnly users with moderator or admin roles may access this endpoint. The operation strictly enforces all validation constraints, such as unique name/slug, permissible status transitions (e.g., activating, suspending, or banning a community), and character limits on title and description. Updates to imagery or branding assets (e.g., icons, banners) are to be managed via separate related endpoints, but references can be altered if schema relationships exist.\n\nAll modification events are logged with before-and-after snapshots for audit and legal compliance. The endpoint implements business rules regarding moderation policies, and an appropriate error message is returned if validation fails (e.g., duplicate names, policy violations, or restrictions due to banned/archive status).\n\nThis operation is related to other community management APIs, including creation, deletion (archival), moderator assignments, and status updates. Edge cases, like concurrent updates or forbidden changes due to policy, are handled according to platform error handling standards.","summary":"Update and manage community properties in the community_platform_communities table.","parameters":[{"name":"communityId","description":"Unique identifier of the community to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating community properties like title, description, status, and slug.","typeName":"ICommunityPlatformCommunity.IUpdate"},"responseBody":{"description":"The updated community record after applying all requested changes.","typeName":"ICommunityPlatformCommunity"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/communityPlatform/moderator/communities/{communityId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before it can be updated."}]},{"specification":"This operation performs a soft deletion (archival) of a community in the community_platform_communities table by setting the deleted_at timestamp. The operation is restricted to platform admins and (potentially) moderators with sufficient privileges, as per business rules. When a community is deleted, its related posts, comments, subscriptions, and all user relationships are marked as archived or handled according to the retention policy, but not permanently purged. This allows for recovery within compliance time windows and preserves historical records for moderation/audit purposes.","description":"This operation allows platform administrators, and where permitted by business logic, community moderators, to delete (soft archive) an existing community by updating the deleted_at field in the community_platform_communities table. Instead of a hard delete, the record is marked as deleted for retention, recovery, and compliance purposes, as required by audit policies.\n\nAll associated posts, comments, subscriptions, and other relationships are not hard-deleted, but should be marked as archived or handled according to cascade or retention rules, ensuring that data is preserved for a set period and can be restored if needed. Permissions are strictly checked, and only users with the admin or moderator role (assigned to the target community) can invoke this endpoint, provided current policy restrictions are satisfied.\n\nComprehensive audit logs are maintained for all community deletions. An appropriate error is returned if the action violates policy or references a non-existent community. This endpoint is related to community creation, property update, membership management, and moderation workflows.","summary":"Archive (soft delete) a community in the community_platform_communities table.","parameters":[{"name":"communityId","description":"Unique identifier of the community to archive (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/communityPlatform/admin/communities/{communityId}","method":"delete","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before it can be archived (soft deleted)."}]},{"specification":"This operation performs a soft deletion (archival) of a community in the community_platform_communities table by setting the deleted_at timestamp. The operation is restricted to platform admins and (potentially) moderators with sufficient privileges, as per business rules. When a community is deleted, its related posts, comments, subscriptions, and all user relationships are marked as archived or handled according to the retention policy, but not permanently purged. This allows for recovery within compliance time windows and preserves historical records for moderation/audit purposes.","description":"This operation allows platform administrators, and where permitted by business logic, community moderators, to delete (soft archive) an existing community by updating the deleted_at field in the community_platform_communities table. Instead of a hard delete, the record is marked as deleted for retention, recovery, and compliance purposes, as required by audit policies.\n\nAll associated posts, comments, subscriptions, and other relationships are not hard-deleted, but should be marked as archived or handled according to cascade or retention rules, ensuring that data is preserved for a set period and can be restored if needed. Permissions are strictly checked, and only users with the admin or moderator role (assigned to the target community) can invoke this endpoint, provided current policy restrictions are satisfied.\n\nComprehensive audit logs are maintained for all community deletions. An appropriate error is returned if the action violates policy or references a non-existent community. This endpoint is related to community creation, property update, membership management, and moderation workflows.","summary":"Archive (soft delete) a community in the community_platform_communities table.","parameters":[{"name":"communityId","description":"Unique identifier of the community to archive (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","path":"/communityPlatform/moderator/communities/{communityId}","method":"delete","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before it can be archived (soft-deleted)."}]},{"specification":"This operation retrieves the list of all rules associated with a specific community. The rules are defined in the community_platform_community_rules table, which stores the full text/rich content of community-specific rules, supports versioning, and enforces governance within the community. The PATCH method allows complex retrieval with search, filtering, and version targeting, which is essential when communities can have multiple rule versions or a long rule history. The response offers a paginated result of rule objects for the specified community, enabling moderators and members to audit, display, or update rules as needed.","path":"/communityPlatform/member/communities/{communityId}/rules","method":"patch","summary":"Retrieve a paginated and filtered list of rules for a specific community from community_platform_community_rules.","description":"Fetch a filtered, sortable, and paginated list of rule documents belonging to a particular community. This is essential for displaying all current and historical community rules, allowing users and moderators to review the governance documents and comply with community-specific policies.\n\nThe operation supports advanced search queries, filtering by version, filtering by publication date, and ordering by most recent first or by version number. It incorporates complete pagination metadata so UIs can efficiently display scrollable lists or tables of rules. Access to unpublished, draft, or previous rule versions may be restricted to community moderators or administrators, while current published rules are shown to all community members and guests, depending on community privacy settings.\n\nThis endpoint is related directly to the community_platform_community_rules table, referencing the versioning and body fields. Error cases include invalid community ID, lack of permissions, or if the community has no published rules. The operation integrates with content moderation and compliance workflows for maintaining community standards.","parameters":[{"name":"communityId","description":"The unique identifier of the target community whose rules are being requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and query parameters to search and list rules for this community. Includes version, published date, sorting, and pagination fields.","typeName":"ICommunityPlatformCommunityRule.IRequest"},"responseBody":{"description":"Paginated list of community rule documents matching search criteria for this community. Each item contains rule body, version, and metadata.","typeName":"IPageICommunityPlatformCommunityRule"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before its rules can be listed."}]},{"specification":"This operation retrieves a specific rule document for a community, by rule ID. The rule is stored in the community_platform_community_rules table, which maintains community governance policies, moderator instructions, and posting/content guidelines. The GET method returns the exact rule using its unique identifier, with all associated metadata and text. Audit and view permissions are enforced based on role and rule publication status.","path":"/communityPlatform/member/communities/{communityId}/rules/{ruleId}","method":"get","summary":"Retrieve a single rule document by ID from the community_platform_community_rules table for a community.","description":"Fetch a specific versioned rule for a community identified by its unique ruleId and communityId. This enables accurate audit, detailed display, and compliance with community policies for all users with access to that rule.\n\nThe operation accesses the community_platform_community_rules schema, retrieving the rule's body, version, published timestamp, and related metadata. If the rule is unpublished, deleted, or restricted, additional role checks will limit access only to moderators, administrators, or the creator.\n\nError scenarios include invalid or non-existent ruleId, permissions errors (e.g., guests may not see draft or mod-only rules), or attempts to fetch rules from the wrong community context. The endpoint is often used alongside paginated rule lists to support rule preview, editing, or audit scenarios. Validation of input IDs and enforcing visibility depending on rule status are critical aspects of the provider logic.","parameters":[{"name":"communityId","description":"The unique identifier of the community containing the rule.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"The unique identifier of the rule to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete community rule object, including body, version, publish time, and metadata.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/rules","method":"post"},"description":"A community rule must be created before it can be retrieved by ruleId in this operation."}]},{"specification":"This operation allows moderators or administrators to create a new community-specific rule document for a given community. The rule is defined for the specified community via its UUID, and contains a body of rules, versioning, and publication metadata as defined in the community_platform_community_rules table. The operation supports posting Markdown-formatted rule text up to 50,000 characters and automatically sets versioning and timestamps. Only authorized moderators or admins for the community may use this endpoint. This endpoint is critical for enabling community-specific governance, allowing differentiated posting, commenting, and moderation workflows per community.","description":"Create a new set of rules for a specific community by providing rule body content and required metadata.\n\nThis operation uses the community_platform_community_rules table in the database, which contains fields for body (the full Markdown rule text), version (integer, incremented on edits, used for audit/version control), community_id (the community to which rules apply), and timestamps for published, created, and updated dates.\n\nSecurity: Only authenticated users with moderator or admin privileges for the specified community are permitted to create new rules. The request must reference a community (by UUID), and checks should confirm the actor's authorization. If an unauthorized or unauthenticated user calls this endpoint, an error is returned.\n\nBusiness logic: Validation enforces length and formatting for the rule body, ensures no duplicate version number for the same community, and sets published and created timestamps. On creation, the rules are active for the given community until replaced by a higher version. Error handling covers invalid community references, overly long rule text, redundant version, or permission errors.\n\nRelated Operations: For updating existing rules, use the update operation on /communities/{communityId}/rules/{ruleId} with PUT. For retrieving rules, use GET endpoints not included here.\n\nEdge Cases: If moderation rules change rapidly or concurrent edits occur, the system may require last-write-wins or version increment logic. Timestamps are auto-assigned by the backend.","path":"/communityPlatform/moderator/communities/{communityId}/rules","method":"post","summary":"Create a new community-specific rules document for a given community (community_platform_community_rules).","parameters":[{"name":"communityId","description":"Unique identifier of the target community for which the rules are being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New community rules content, version, and publication metadata.","typeName":"ICommunityPlatformCommunityRule.ICreate"},"responseBody":{"description":"The newly created community rule document with all database metadata set.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community must exist before rules can be added to it."}]},{"specification":"This operation allows moderators or administrators to create a new community-specific rule document for a given community. The rule is defined for the specified community via its UUID, and contains a body of rules, versioning, and publication metadata as defined in the community_platform_community_rules table. The operation supports posting Markdown-formatted rule text up to 50,000 characters and automatically sets versioning and timestamps. Only authorized moderators or admins for the community may use this endpoint. This endpoint is critical for enabling community-specific governance, allowing differentiated posting, commenting, and moderation workflows per community.","description":"Create a new set of rules for a specific community by providing rule body content and required metadata.\n\nThis operation uses the community_platform_community_rules table in the database, which contains fields for body (the full Markdown rule text), version (integer, incremented on edits, used for audit/version control), community_id (the community to which rules apply), and timestamps for published, created, and updated dates.\n\nSecurity: Only authenticated users with moderator or admin privileges for the specified community are permitted to create new rules. The request must reference a community (by UUID), and checks should confirm the actor's authorization. If an unauthorized or unauthenticated user calls this endpoint, an error is returned.\n\nBusiness logic: Validation enforces length and formatting for the rule body, ensures no duplicate version number for the same community, and sets published and created timestamps. On creation, the rules are active for the given community until replaced by a higher version. Error handling covers invalid community references, overly long rule text, redundant version, or permission errors.\n\nRelated Operations: For updating existing rules, use the update operation on /communities/{communityId}/rules/{ruleId} with PUT. For retrieving rules, use GET endpoints not included here.\n\nEdge Cases: If moderation rules change rapidly or concurrent edits occur, the system may require last-write-wins or version increment logic. Timestamps are auto-assigned by the backend.","path":"/communityPlatform/admin/communities/{communityId}/rules","method":"post","summary":"Create a new community-specific rules document for a given community (community_platform_community_rules).","parameters":[{"name":"communityId","description":"Unique identifier of the target community for which the rules are being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New community rules content, version, and publication metadata.","typeName":"ICommunityPlatformCommunityRule.ICreate"},"responseBody":{"description":"The newly created community rule document with all database metadata set.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"A community must exist before a community-specific rules document can be created. The POST /communityPlatform/member/communities operation creates the community referenced by communityId."}]},{"specification":"This operation allows an authorized moderator or administrator to update an existing community-specific rules document. The targeted rule is identified by both the community UUID and the rule UUID. Updates can modify the body of the rules (Markdown text), increment the version, and change the publication details as supported by the community_platform_community_rules table. This operation ensures governance policies in communities stay up to date and comply with evolving standards or moderation requirements.","description":"Update an existing rules document for a given community. This operation requires both the community UUID (communityId) and the unique identifier of the rule document (ruleId).\n\nThe operation operates on the community_platform_community_rules table, which tracks community_id, body (Markdown), version, published_at, created_at, and updated_at. The system validates that only authorized moderators or administrators for the target community may update its rules. Versioning logic must ensure that edits are tracked and that the version field strictly increases with each update for auditability. Edits are reflected in the updated_at timestamp, while the published_at timestamp may also be updated if the rule is officially republished.\n\nAuthorization is strictly enforced at the endpoint: only assigned moderators or platform admins may update rules for a given community. Validation checks for version increment, Markdown length/format, and association with the correct community. Errors include permission denied, invalid or non-existent rule/community identifiers, conflicting version numbers, or text exceeding 50,000 characters.\n\nRelated Operations: To create new rules, use the POST /communities/{communityId}/rules endpoint. For removal, only permitted via archival or soft delete as determined by business needs (not covered here).\n\nConcurrency: The system must ensure that updates do not allow version regression or data loss due to simultaneous edits; the last-write or explicit version check strategy should be considered.","path":"/communityPlatform/moderator/communities/{communityId}/rules/{ruleId}","method":"put","summary":"Update an existing community rules document by community and rule ID (community_platform_community_rules).","parameters":[{"name":"communityId","description":"Unique identifier of the target community for which the rules are to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"Unique identifier of the rule document being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for rules document update, including body, version, and publication details.","typeName":"ICommunityPlatformCommunityRule.IUpdate"},"responseBody":{"description":"The updated community rules document with all metadata and history.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community must exist before its rules can be updated. The POST /communityPlatform/member/communities operation creates the community referenced by communityId."},{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/rules","method":"post"},"description":"A rule document must be created for the target community before it can be updated. The POST /communityPlatform/admin/communities/{communityId}/rules operation creates the rule document referenced by ruleId."}]},{"specification":"This operation allows an authorized moderator or administrator to update an existing community-specific rules document. The targeted rule is identified by both the community UUID and the rule UUID. Updates can modify the body of the rules (Markdown text), increment the version, and change the publication details as supported by the community_platform_community_rules table. This operation ensures governance policies in communities stay up to date and comply with evolving standards or moderation requirements.","description":"Update an existing rules document for a given community. This operation requires both the community UUID (communityId) and the unique identifier of the rule document (ruleId).\n\nThe operation operates on the community_platform_community_rules table, which tracks community_id, body (Markdown), version, published_at, created_at, and updated_at. The system validates that only authorized moderators or administrators for the target community may update its rules. Versioning logic must ensure that edits are tracked and that the version field strictly increases with each update for auditability. Edits are reflected in the updated_at timestamp, while the published_at timestamp may also be updated if the rule is officially republished.\n\nAuthorization is strictly enforced at the endpoint: only assigned moderators or platform admins may update rules for a given community. Validation checks for version increment, Markdown length/format, and association with the correct community. Errors include permission denied, invalid or non-existent rule/community identifiers, conflicting version numbers, or text exceeding 50,000 characters.\n\nRelated Operations: To create new rules, use the POST /communities/{communityId}/rules endpoint. For removal, only permitted via archival or soft delete as determined by business needs (not covered here).\n\nConcurrency: The system must ensure that updates do not allow version regression or data loss due to simultaneous edits; the last-write or explicit version check strategy should be considered.","path":"/communityPlatform/admin/communities/{communityId}/rules/{ruleId}","method":"put","summary":"Update an existing community rules document by community and rule ID (community_platform_community_rules).","parameters":[{"name":"communityId","description":"Unique identifier of the target community for which the rules are to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"Unique identifier of the rule document being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for rules document update, including body, version, and publication details.","typeName":"ICommunityPlatformCommunityRule.IUpdate"},"responseBody":{"description":"The updated community rules document with all metadata and history.","typeName":"ICommunityPlatformCommunityRule"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its rules document can be updated"},{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/rules","method":"post"},"description":"A community rule document must be created before it can be updated"}]},{"specification":"This operation permanently removes a specific rule entry from a given community. It targets the community_platform_community_rules table, which maintains community-specific governance documents, rule sets, and posting policies. This delete (erase) action is only permitted for community moderators or platform admins, as disastrous removal impacts community governance integrity. The operation expects communityId and ruleId as path parameters—both are UUIDs referencing the parent community and the targeted rule, respectively. Removal is a hard delete, not a status toggle, as there are no soft-delete fields. Deletion should be logged for transparency and audit trails per business rules.","description":"This API endpoint serves to delete a specific community rule from the platform, referencing the community_platform_community_rules table in the Prisma schema. Each rule pertains to a particular community and version, providing customized governance for posting, commenting, and moderation. \n\nTo execute this operation, the client must supply both the parent community's unique identifier (communityId) and the rule's unique identifier (ruleId) as path parameters. Both identifiers are UUIDs. Only users with appropriate moderator or admin privileges for the target community may call this endpoint; unauthorized attempts should be blocked with a clear error response.\n\nUpon successful invocation, the rule is permanently removed from the database. There are no soft delete fields on the schema, so this is a hard delete operation. Once deletion is performed, the rule cannot be recovered. All deletion actions should be recorded in the audit log for regulatory and governance transparency. This operation is typically used during moderation, restructuring, or when a community's policy has become obsolete.\n\nRelated operations include the creation and updating of rules, as well as retrieval of existing rules. In combination, these enable full lifecycle management of community governance policies.","summary":"Permanently delete a specific rule from a community (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"The unique identifier of the target community which the rule belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"The unique identifier of the rule to permanently delete from the community.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/communityPlatform/moderator/communities/{communityId}/rules/{ruleId}","method":"delete","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a rule within it can be deleted"},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/rules","method":"post"},"description":"A community rule document must be created before it can be deleted"}]},{"specification":"This operation permanently removes a specific rule entry from a given community. It targets the community_platform_community_rules table, which maintains community-specific governance documents, rule sets, and posting policies. This delete (erase) action is only permitted for community moderators or platform admins, as disastrous removal impacts community governance integrity. The operation expects communityId and ruleId as path parameters—both are UUIDs referencing the parent community and the targeted rule, respectively. Removal is a hard delete, not a status toggle, as there are no soft-delete fields. Deletion should be logged for transparency and audit trails per business rules.","description":"This API endpoint serves to delete a specific community rule from the platform, referencing the community_platform_community_rules table in the Prisma schema. Each rule pertains to a particular community and version, providing customized governance for posting, commenting, and moderation. \n\nTo execute this operation, the client must supply both the parent community's unique identifier (communityId) and the rule's unique identifier (ruleId) as path parameters. Both identifiers are UUIDs. Only users with appropriate moderator or admin privileges for the target community may call this endpoint; unauthorized attempts should be blocked with a clear error response.\n\nUpon successful invocation, the rule is permanently removed from the database. There are no soft delete fields on the schema, so this is a hard delete operation. Once deletion is performed, the rule cannot be recovered. All deletion actions should be recorded in the audit log for regulatory and governance transparency. This operation is typically used during moderation, restructuring, or when a community's policy has become obsolete.\n\nRelated operations include the creation and updating of rules, as well as retrieval of existing rules. In combination, these enable full lifecycle management of community governance policies.","summary":"Permanently delete a specific rule from a community (community_platform_community_rules table).","parameters":[{"name":"communityId","description":"The unique identifier of the target community which the rule belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"The unique identifier of the rule to permanently delete from the community.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/communityPlatform/admin/communities/{communityId}/rules/{ruleId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a rule can be created or deleted. The rule is associated with a specific community, so the community itself must be present in the system prior to managing its rules."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/rules","method":"post"},"description":"Community rule must be created before it can be deleted. The ruleId to be deleted must reference an actual rule belonging to the specified community."}]},{"specification":"This endpoint retrieves a filtered and paginated list of banner images for a specific community, supporting advanced search, sorting, and status filtering. It operates on the community_platform_community_banners table, which stores banner image metadata (links to file uploads, enabled/disabled status, alt text, and ordering) for visual branding. The operation is essential for community moderators/admins to review, find, and manage banner images associated with their communities efficiently.","description":"This API provides a mechanism to retrieve a paginated, filterable list of banners linked to a specific community. It references the community_platform_community_banners table, which holds banner metadata, associations to communities, activation status, file references, and accessibility information (such as alt text).\n\nThe endpoint accepts communityId as a path parameter (UUID) to specify which community's banners are to be listed. Additional filtering, sorting, or searching parameters may be carried in the request body schema (ICommunityPlatformCommunityBanner.IRequest), supporting moderation workflows and community branding management.\n\nOnly authenticated users with moderator or admin privileges for the target community may utilize this operation. Returned data is paginated and includes essential banner properties, file references, status (active/inactive), order, and accessibility text. The result enables a web or dashboard UI to review, manage, and prepare further updates or deletions for banners.","summary":"Retrieve a paginated, filterable list of banner images for a community (community_platform_community_banners table).","parameters":[{"name":"communityId","description":"The unique identifier of the community whose banners are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, search, and pagination criteria to query banners for a given community.","typeName":"ICommunityPlatformCommunityBanner.IRequest"},"responseBody":{"description":"Paginated result of community banner images matching the given search and filter criteria.","typeName":"IPageICommunityPlatformCommunityBanner"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/communityPlatform/moderator/communities/{communityId}/banners","method":"patch","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before it can be searched for banners. Banner images are always associated with a community, so at least one community must be present for this query to be valid."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/banners","method":"post"},"description":"Banners must be created for a community in order to be retrieved, filtered, or paginated in the banner list. This ensures the query returns meaningful results referencing actual banners."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"A file upload must exist before it can be associated as a banner image. Each banner references a previously uploaded file as its image, so searching/filtering by file_upload_id only makes sense if such uploads exist."}]},{"specification":"This endpoint retrieves a filtered and paginated list of banner images for a specific community, supporting advanced search, sorting, and status filtering. It operates on the community_platform_community_banners table, which stores banner image metadata (links to file uploads, enabled/disabled status, alt text, and ordering) for visual branding. The operation is essential for community moderators/admins to review, find, and manage banner images associated with their communities efficiently.","description":"This API provides a mechanism to retrieve a paginated, filterable list of banners linked to a specific community. It references the community_platform_community_banners table, which holds banner metadata, associations to communities, activation status, file references, and accessibility information (such as alt text).\n\nThe endpoint accepts communityId as a path parameter (UUID) to specify which community's banners are to be listed. Additional filtering, sorting, or searching parameters may be carried in the request body schema (ICommunityPlatformCommunityBanner.IRequest), supporting moderation workflows and community branding management.\n\nOnly authenticated users with moderator or admin privileges for the target community may utilize this operation. Returned data is paginated and includes essential banner properties, file references, status (active/inactive), order, and accessibility text. The result enables a web or dashboard UI to review, manage, and prepare further updates or deletions for banners.","summary":"Retrieve a paginated, filterable list of banner images for a community (community_platform_community_banners table).","parameters":[{"name":"communityId","description":"The unique identifier of the community whose banners are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, search, and pagination criteria to query banners for a given community.","typeName":"ICommunityPlatformCommunityBanner.IRequest"},"responseBody":{"description":"Paginated result of community banner images matching the given search and filter criteria.","typeName":"IPageICommunityPlatformCommunityBanner"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/communityPlatform/admin/communities/{communityId}/banners","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before its banners can be queried, as banners are always associated with a particular community."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/banners","method":"post"},"description":"At least one banner must be created for the community before it can be listed or filtered, since the operation retrieves existing banners."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"A file upload must exist before it can be referenced by a community banner, as each banner requires a file_upload_id referencing an uploaded file."}]},{"specification":"This operation retrieves detailed information about a specific community banner image for a given community. It is associated with the community_platform_community_banners table in the Prisma schema. The primary purpose of this operation is to allow users to view metadata about a banner, such as its file information, display status, and ordering within the community's visual branding assets. It supports use cases like rendering the community's banner on public pages or moderation screens. The response will include fields such as the banner's ID, community association, linked file upload, display ordering, alternative text, active status, creation and update timestamps, and soft deletion state if applicable. The endpoint is intended for both regular members (viewing) and community moderators (management), with no write permissions required for this read-only operation.","description":"This endpoint provides all available metadata for the specified banner image belonging to a particular community, referencing the community_platform_community_banners Prisma schema table and its relationships. It is designed to enable users to retrieve banner details required for display on community pages or for moderation and branding management interfaces.\n\nSecurity is enforced such that both general members and moderators can access banner details for public or their managed communities, while admins may access all banners for any community. Unauthorized users will receive appropriate error messages if requesting non-public or inactive banners.\n\nThe operation ensures that banner information returned includes its display status, associated file upload (via file_upload_id), ordering (for rotation/multiple banners), and alternative text for accessibility. The operation does not expose any write capabilities or modifications, focusing strictly on retrieval. Error handling includes record-not-found and permission-denied scenarios, ensuring users cannot access banners outside their access scope.\n\nRelated operations include listing all banners for a community or updating banners for community appearance management. This operation pairs with the POST /communities/{communityId}/banners endpoint for creation workflows, as well as moderation actions for banner rotation or removal.","summary":"Retrieve detailed information about a specific community banner (community_platform_community_banners).","parameters":[{"name":"communityId","description":"Unique identifier of the target community associated with the banner.","schema":{"type":"string","format":"uuid"}},{"name":"bannerId","description":"Unique identifier of the specific banner image to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete metadata and configuration for the requested community banner image, including file and display details.","typeName":"ICommunityPlatformCommunityBanner"},"authorizationRoles":[],"name":"at","path":"/communityPlatform/communities/{communityId}/banners/{bannerId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a specific banner can be retrieved, as banners are scoped to existing communities."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/banners","method":"post"},"description":"The target banner must be created before it can be retrieved by its ID within the community context."}]},{"specification":"This operation creates a new community banner image entry for a specific community in the community_platform_community_banners table. It is used by community moderators or administrators to add a new banner for visual branding or identity purposes. Upon request, a new banner is associated with the community and references a previously uploaded file (from community_platform_file_uploads). Banner metadata such as display status, order, alternative text, and creation timestamps are set according to the request. The operation ensures referential integrity between communities and their banners, allows only authorized moderators/admins for write access, and enforces all business rules and validation described in the schema and requirements documents.","description":"This endpoint allows moderators or admins to upload and register a new visual banner for a target community, referencing the community_platform_community_banners table. The request body must specify the associated file_upload_id from a previously uploaded image, and may include order (for display rotation), alt_text for accessibility, and active/inactive display status.\n\nSecurity is enforced such that only community moderators and platform admins are allowed to manage community banners. The operation checks for duplicate banners/order, ensures proper file format compliance, and enforces soft deletion of replaced banners when necessary. On success, it returns detailed metadata of the new banner entry, including its ID, association, display metadata, and all audit fields.\n\nThis operation is critical for community visual brand management and is used alongside endpoints for listing, updating, and deleting banners. It explicitly does not handle file upload (which must be completed prior in the file uploads subsystem) and focuses on registering the banner with proper metadata in the community context. Validation is applied as per schema, and errors are returned if file references or permissions are invalid.","summary":"Create a new banner for a community (community_platform_community_banners).","parameters":[{"name":"communityId","description":"Unique identifier of the target community to which a new banner will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information and configuration for the new community banner to register.","typeName":"ICommunityPlatformCommunityBanner.ICreate"},"responseBody":{"description":"Metadata and configuration of the successfully created community banner, including IDs and display information.","typeName":"ICommunityPlatformCommunityBanner"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/communityPlatform/moderator/communities/{communityId}/banners","method":"post","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a banner can be added to it."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"File upload must be completed and present before setting it as a community banner image."}]},{"specification":"This operation creates a new community banner image entry for a specific community in the community_platform_community_banners table. It is used by community moderators or administrators to add a new banner for visual branding or identity purposes. Upon request, a new banner is associated with the community and references a previously uploaded file (from community_platform_file_uploads). Banner metadata such as display status, order, alternative text, and creation timestamps are set according to the request. The operation ensures referential integrity between communities and their banners, allows only authorized moderators/admins for write access, and enforces all business rules and validation described in the schema and requirements documents.","description":"This endpoint allows moderators or admins to upload and register a new visual banner for a target community, referencing the community_platform_community_banners table. The request body must specify the associated file_upload_id from a previously uploaded image, and may include order (for display rotation), alt_text for accessibility, and active/inactive display status.\n\nSecurity is enforced such that only community moderators and platform admins are allowed to manage community banners. The operation checks for duplicate banners/order, ensures proper file format compliance, and enforces soft deletion of replaced banners when necessary. On success, it returns detailed metadata of the new banner entry, including its ID, association, display metadata, and all audit fields.\n\nThis operation is critical for community visual brand management and is used alongside endpoints for listing, updating, and deleting banners. It explicitly does not handle file upload (which must be completed prior in the file uploads subsystem) and focuses on registering the banner with proper metadata in the community context. Validation is applied as per schema, and errors are returned if file references or permissions are invalid.","summary":"Create a new banner for a community (community_platform_community_banners).","parameters":[{"name":"communityId","description":"Unique identifier of the target community to which a new banner will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information and configuration for the new community banner to register.","typeName":"ICommunityPlatformCommunityBanner.ICreate"},"responseBody":{"description":"Metadata and configuration of the successfully created community banner, including IDs and display information.","typeName":"ICommunityPlatformCommunityBanner"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/communityPlatform/admin/communities/{communityId}/banners","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a banner can be added to it."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"File upload must be completed and present before setting it as a community banner image."}]},{"specification":"This operation updates a specific banner image associated with a community. The banner resides in the community_platform_community_banners table, which tracks header or hero graphics for communities, referencing files via community_platform_file_uploads. Banners can be re-ordered, have alternative text changed, or be enabled/disabled (active field), but not replaced with a new file (requires a new banner record). Moderators or admins with the correct privileges on the target community may call this endpoint to modify banner metadata or status; all changes are audited in the underlying system. The operation enforces that the banner belongs to the target community and the updater has community-level moderation rights; file upload swaps should use a different endpoint. Required fields for update include bannerId, communityId, and the update payload (ICommunityPlatformCommunityBanner.IUpdate).","description":"Updates the metadata of a banner image for a community, including changing alternative text, updating the display order, and toggling its active status. This operation references the community_platform_community_banners schema, where each banner is linked to a community and file upload, and supports updating all editable columns except the file_upload_id (which is immutable after creation for audit and safety).\n\nModerators and admins may use this API to adjust which banners are currently visible, update their accessibility (alt_text), or reorder banner appearance for branding purposes. The operation validates that the provided bannerId and communityId exist and are correctly related, returning an error if not. It fetches the current banner data, applies allowed updates, and saves the changes if the calling user has sufficient rights (moderator for the given community or admin). Changes are logged for audit.\n\nAttempting to update a banner for which the caller lacks permissions, for a banner unrelated to the specified community, or for immutable fields will result in a clear business error response. If the banner is archived (soft-deleted), updates are not allowed. Related endpoints include banner creation, listing, and deletion within the same community context.","summary":"Update the metadata or status of a specific community banner (community_platform_community_banners).","path":"/communityPlatform/moderator/communities/{communityId}/banners/{bannerId}","method":"put","parameters":[{"name":"communityId","description":"Unique identifier of the target community.","schema":{"type":"string","format":"uuid"}},{"name":"bannerId","description":"Unique identifier of the banner to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specific community banner (e.g., alt_text, order, active).","typeName":"ICommunityPlatformCommunityBanner.IUpdate"},"responseBody":{"description":"The updated community banner with its new metadata and status.","typeName":"ICommunityPlatformCommunityBanner"},"authorizationType":null,"authorizationRole":"moderator","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/banners","method":"post"},"description":"A community banner must exist before its metadata (such as alt text, order, or active status) can be updated. This prerequisite ensures the banner resource is present and associated with the specified community."}]},{"specification":"This operation updates a specific banner image associated with a community. The banner resides in the community_platform_community_banners table, which tracks header or hero graphics for communities, referencing files via community_platform_file_uploads. Banners can be re-ordered, have alternative text changed, or be enabled/disabled (active field), but not replaced with a new file (requires a new banner record). Moderators or admins with the correct privileges on the target community may call this endpoint to modify banner metadata or status; all changes are audited in the underlying system. The operation enforces that the banner belongs to the target community and the updater has community-level moderation rights; file upload swaps should use a different endpoint. Required fields for update include bannerId, communityId, and the update payload (ICommunityPlatformCommunityBanner.IUpdate).","description":"Updates the metadata of a banner image for a community, including changing alternative text, updating the display order, and toggling its active status. This operation references the community_platform_community_banners schema, where each banner is linked to a community and file upload, and supports updating all editable columns except the file_upload_id (which is immutable after creation for audit and safety).\n\nModerators and admins may use this API to adjust which banners are currently visible, update their accessibility (alt_text), or reorder banner appearance for branding purposes. The operation validates that the provided bannerId and communityId exist and are correctly related, returning an error if not. It fetches the current banner data, applies allowed updates, and saves the changes if the calling user has sufficient rights (moderator for the given community or admin). Changes are logged for audit.\n\nAttempting to update a banner for which the caller lacks permissions, for a banner unrelated to the specified community, or for immutable fields will result in a clear business error response. If the banner is archived (soft-deleted), updates are not allowed. Related endpoints include banner creation, listing, and deletion within the same community context.","summary":"Update the metadata or status of a specific community banner (community_platform_community_banners).","path":"/communityPlatform/admin/communities/{communityId}/banners/{bannerId}","method":"put","parameters":[{"name":"communityId","description":"Unique identifier of the target community.","schema":{"type":"string","format":"uuid"}},{"name":"bannerId","description":"Unique identifier of the banner to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specific community banner (e.g., alt_text, order, active).","typeName":"ICommunityPlatformCommunityBanner.IUpdate"},"responseBody":{"description":"The updated community banner with its new metadata and status.","typeName":"ICommunityPlatformCommunityBanner"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/banners","method":"post"},"description":"A community banner must exist before its metadata (such as alt text, order, or active status) can be updated. This prerequisite ensures the banner resource is present and associated with the specified community."}]},{"specification":"This operation permanently archives (soft-deletes) a specific banner image from a community. It operates on the community_platform_community_banners table, which maintains all community header and branding images, referencing files stored in community_platform_file_uploads. The deletion is implemented as a soft delete (setting deleted_at), preserving historical and audit trail data for compliance. Only community moderators and platform admins have permission to archive a banner, and attempts by unauthorized users are denied. Requires both communityId and bannerId, verifying both exist and are correctly linked. All operations are logged for investigation and compliance.","description":"Archives (soft-deletes) the designated banner image from a community, ensuring that the banner is no longer displayed or returned in banner lists to the UI. As defined in the community_platform_community_banners schema, this operation sets the deleted_at field to the current timestamp, rather than removing the record, supporting historical review, rollback, or audit actions if needed.\n\nThis endpoint asserts that the specified banner belongs to the given community and that the requesting user has moderator or admin rights for that community. Soft deletion retains the database record for compliance, but the banner is omitted from public/community banner queries. Linked file upload records are not deleted, so actual images persist and may be referenced by other components or in audit flows.\n\nIf a moderator or admin attempts to delete a banner already archived or nonexistent, a clear error is returned. Related endpoints are available for creating and updating banners, as well as restoring archived ones (in future expansions). All deletion events are captured for audit review and traceability.","summary":"Soft-delete (archive) a specific community banner from a community (community_platform_community_banners).","path":"/communityPlatform/moderator/communities/{communityId}/banners/{bannerId}","method":"delete","parameters":[{"name":"communityId","description":"Unique identifier of the target community.","schema":{"type":"string","format":"uuid"}},{"name":"bannerId","description":"Unique identifier of the banner to archive (soft-delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/banners","method":"post"},"description":"Community banner must be created before it can be archived (soft-deleted) from a community"},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a banner can be archived (soft-deleted) from it"}]},{"specification":"This operation permanently archives (soft-deletes) a specific banner image from a community. It operates on the community_platform_community_banners table, which maintains all community header and branding images, referencing files stored in community_platform_file_uploads. The deletion is implemented as a soft delete (setting deleted_at), preserving historical and audit trail data for compliance. Only community moderators and platform admins have permission to archive a banner, and attempts by unauthorized users are denied. Requires both communityId and bannerId, verifying both exist and are correctly linked. All operations are logged for investigation and compliance.","description":"Archives (soft-deletes) the designated banner image from a community, ensuring that the banner is no longer displayed or returned in banner lists to the UI. As defined in the community_platform_community_banners schema, this operation sets the deleted_at field to the current timestamp, rather than removing the record, supporting historical review, rollback, or audit actions if needed.\n\nThis endpoint asserts that the specified banner belongs to the given community and that the requesting user has moderator or admin rights for that community. Soft deletion retains the database record for compliance, but the banner is omitted from public/community banner queries. Linked file upload records are not deleted, so actual images persist and may be referenced by other components or in audit flows.\n\nIf a moderator or admin attempts to delete a banner already archived or nonexistent, a clear error is returned. Related endpoints are available for creating and updating banners, as well as restoring archived ones (in future expansions). All deletion events are captured for audit review and traceability.","summary":"Soft-delete (archive) a specific community banner from a community (community_platform_community_banners).","path":"/communityPlatform/admin/communities/{communityId}/banners/{bannerId}","method":"delete","parameters":[{"name":"communityId","description":"Unique identifier of the target community.","schema":{"type":"string","format":"uuid"}},{"name":"bannerId","description":"Unique identifier of the banner to archive (soft-delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/banners","method":"post"},"description":"Community banner must be created before it can be archived (soft-deleted) from a community"},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a banner can be archived (soft-deleted) from it"}]},{"specification":"This operation retrieves a paginated and filterable list of community images belonging to a specific community. It operates on the 'community_platform_community_images' table, supporting image metadata queries for branding, icon, background, and other community visuals. The API supports pagination, sorting, and filtering image type, status, and upload time. Moderators with relevant privileges and community members (depending on community visibility) can obtain this list for community display, review, or asset management. The operation does not manipulate image data, only queries existing entries, referencing related file assets for display.","path":"/communityPlatform/communities/{communityId}/images","method":"patch","summary":"Search/filter paginated community images for a specific community (community_platform_community_images).","description":"Retrieve a filterable and paginated list of images associated with a particular community, enabling community branding asset management and user display customization. Clients may specify image type (icon, background, etc.), status (active/inactive), and sort order for consistent UI/UX presentation.\n\nThis endpoint validates the target community's existence and enforces role-based access control (public for active images, broader for moderators or admins). Filtering is performed on the 'community_platform_community_images' table, joined with relevant file upload data to provide actionable, display-ready information. Pagination prevents overly large list payloads for high-image communities.\n\nInput validation enforces type and communityId constraints. Access is logged for audit/compliance. Errors for missing community, or unauthorized access, follow the platform’s standard error format. This complements image upload, detail-get, and update endpoints in the community asset APIs.","parameters":[{"name":"communityId","description":"Unique identifier of the target community for which to list images.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filters, and pagination parameters for listing community images. Supports filtering by image type, activity status, and sort order.","typeName":"ICommunityPlatformCommunityImage.IRequest"},"responseBody":{"description":"Paginated list of community images matching the search criteria, with display and file metadata for rendering or management.","typeName":"IPageICommunityPlatformCommunityImage"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its images can be searched or listed."}]},{"specification":"This operation retrieves detailed metadata of a specific image entry within a given community, operating on the 'community_platform_community_images' table. It returns all details of the selected image, such as file upload reference, image type, display/active status, upload times, order for presentation, and associated alt text. Access is granted to any party allowed to view the community or its branding assets, supporting rendering, audit, or moderation inspection.","path":"/communityPlatform/communities/{communityId}/images/{imageId}","method":"get","summary":"Get detailed information for a specific community image (community_platform_community_images).","description":"Retrieve metadata for a single image associated with the specified community. This includes file reference (to retrieve display URL), image type (e.g., icon, background), active status, upload time, ordering for UI purposes, alternative text for accessibility, and community linkage.\n\nThis endpoint validates both the communityId and imageId correspond to actual data, returning detailed error information for missing or mismatched entries. The operation enforces access control: active images are public, but non-public image details may require moderator or admin access, as per community configuration.\n\nSecurity and privacy concerns are respected; only non-sensitive metadata is exposed in public mode. This operation is used by clients fetching display assets, as well as moderators reviewing or managing uploaded images. Operation can be combined with image update or delete for full asset lifecycle management.","parameters":[{"name":"communityId","description":"Unique identifier for the target community containing the image.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image entry to fetch details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed image metadata entry for the requested community image, including all fields and related file asset references.","typeName":"ICommunityPlatformCommunityImage"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before any image belonging to it can be retrieved."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/images","method":"post"},"description":"Community image must exist before it can be retrieved by imageId."}]},{"specification":"This operation allows authorized moderators or administrators to upload and associate an image with a specific community. The endpoint operates on the community_platform_community_images table and is integral to community branding and customization workflows as defined in the schema. Only users with appropriate community moderation or admin rights may perform this action. Images must adhere to platform and community guidelines, and are stored as file entries in the global uploads system. The operation enforces file type and size validation, image ordering logic per community, and records metadata including alt text and image type for accessibility and management purposes. Business rules and constraints (such as image count limits or moderation requirements) are enforced according to platform configuration and community policy. Audit and logging are applied to image creation events for compliance, with references to the underlying file record and member actor.","description":"This endpoint is used to create a new image entry for a designated community, supporting community branding, icons, backgrounds, or other visual assets. Upon receiving a valid image record and associated metadata, the system ensures the requesting user has sufficient privileges—typically a moderator of the target community or a platform administrator.\n\nUploaded images must already exist in the global file upload system, referenced via file_upload_id, ensuring that direct binary data transfer is handled by a separate upload flow. The image_type and order fields allow communities to manage multiple visuals and control display order, while alt_text enhances accessibility. The system applies validation based on the platform's business constraints, including permitted file types (JPEG, PNG, etc.), maximum file size, and community-specific limits on the quantity and types of images.\n\nIf the operation is successful, it returns the newly created image record with all associated properties. In case of permission failure, validation errors, or exceeding quota, appropriate error responses and business messages are returned. This operation should be used in conjunction with administrative or moderation dashboards and may integrate with future feature extensions such as image galleries or versioned branding assets.","summary":"Add an image to a community using an existing file reference as branding or a visual asset (community_platform_community_images).","parameters":[{"name":"communityId","description":"Unique identifier of the target community to which the image should be uploaded and assigned.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Metadata and association details for the community image to be created. Must include file_upload_id and type information.","typeName":"ICommunityPlatformCommunityImage.ICreate"},"responseBody":{"description":"The created community image record, including associations, ordering, alt text, and all metadata fields.","typeName":"ICommunityPlatformCommunityImage"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/communityPlatform/moderator/communities/{communityId}/images","method":"post","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before images can be assigned to it as branding or visual assets."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"File upload must be completed and the file stored in the global uploads system before it can be referenced as an image for a community."}]},{"specification":"This operation allows authorized moderators or administrators to upload and associate an image with a specific community. The endpoint operates on the community_platform_community_images table and is integral to community branding and customization workflows as defined in the schema. Only users with appropriate community moderation or admin rights may perform this action. Images must adhere to platform and community guidelines, and are stored as file entries in the global uploads system. The operation enforces file type and size validation, image ordering logic per community, and records metadata including alt text and image type for accessibility and management purposes. Business rules and constraints (such as image count limits or moderation requirements) are enforced according to platform configuration and community policy. Audit and logging are applied to image creation events for compliance, with references to the underlying file record and member actor.","description":"This endpoint is used to create a new image entry for a designated community, supporting community branding, icons, backgrounds, or other visual assets. Upon receiving a valid image record and associated metadata, the system ensures the requesting user has sufficient privileges—typically a moderator of the target community or a platform administrator.\n\nUploaded images must already exist in the global file upload system, referenced via file_upload_id, ensuring that direct binary data transfer is handled by a separate upload flow. The image_type and order fields allow communities to manage multiple visuals and control display order, while alt_text enhances accessibility. The system applies validation based on the platform's business constraints, including permitted file types (JPEG, PNG, etc.), maximum file size, and community-specific limits on the quantity and types of images.\n\nIf the operation is successful, it returns the newly created image record with all associated properties. In case of permission failure, validation errors, or exceeding quota, appropriate error responses and business messages are returned. This operation should be used in conjunction with administrative or moderation dashboards and may integrate with future feature extensions such as image galleries or versioned branding assets.","summary":"Add an image to a community using an existing file reference as branding or a visual asset (community_platform_community_images).","parameters":[{"name":"communityId","description":"Unique identifier of the target community to which the image should be uploaded and assigned.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Metadata and association details for the community image to be created. Must include file_upload_id and type information.","typeName":"ICommunityPlatformCommunityImage.ICreate"},"responseBody":{"description":"The created community image record, including associations, ordering, alt text, and all metadata fields.","typeName":"ICommunityPlatformCommunityImage"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/communityPlatform/admin/communities/{communityId}/images","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before images can be assigned to it as branding or visual assets."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"File upload must be completed and the file stored in the global uploads system before it can be referenced as an image for a community."}]},{"specification":"This operation enables authorized moderators or admins to update the metadata, display properties, or association details of an existing image record for a given community. It works on the community_platform_community_images table as defined in the Prisma schema, allowing for edits to image_type, alt text, order among community images, and activation state. The operation does not modify the underlying file itself (handled by global uploads system) but changes community-specific display and configuration details. Validation mechanisms check user permissions, apply business constraints (such as permitted image types or roles), and enforce limits on the number of active images per community and image-type. Audit logs and compliance tracking are enforced for all update operations, critical for brand consistency and moderation workflows. Only authorized moderators of the community or administrators can perform updates.","description":"This endpoint allows modification of an existing image record associated with a community, supporting scenarios such as updating alt text for accessibility, changing image order, activating/deactivating visuals, or reclassifying the image_type (icon, background, etc.). Only users with appropriate role-based permissions (moderators of the community or platform admins) may use this operation; the system enforces these authorization checks before applying updates.\n\nThis operation does not replace the binary file but updates related metadata, and thus expects only fields modifiable at the record level—such as alt_text, order, image_type, or activation status. Updates are validated for compliance with business rules on allowed values, maximum image counts, uniqueness of order within each image_type, and accessibility string length. Full change history is logged for auditing, supporting restoration or rollback if needed.\n\nIf successful, the operation returns the updated community image record. If the operation fails due to permission errors, validation issues, or constraints (such as attempting to set conflicting orders), informative error messages and guidance for correction are provided.","summary":"Update metadata or display properties of a specific community image (community_platform_community_images).","parameters":[{"name":"communityId","description":"Unique identifier of the community for which the image is being managed.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the community image record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the community image. Only metadata, not the actual image file, is updated.","typeName":"ICommunityPlatformCommunityImage.IUpdate"},"responseBody":{"description":"Updated community image record including all modified properties and current associations.","typeName":"ICommunityPlatformCommunityImage"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/communityPlatform/moderator/communities/{communityId}/images/{imageId}","method":"put","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/images","method":"post"},"description":"Community image must exist before it can be updated. This ensures the image record for the specified community is present prior to updating its metadata or display properties."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a community image can exist or be updated, since all images are associated with an existing community."}]},{"specification":"This operation enables authorized moderators or admins to update the metadata, display properties, or association details of an existing image record for a given community. It works on the community_platform_community_images table as defined in the Prisma schema, allowing for edits to image_type, alt text, order among community images, and activation state. The operation does not modify the underlying file itself (handled by global uploads system) but changes community-specific display and configuration details. Validation mechanisms check user permissions, apply business constraints (such as permitted image types or roles), and enforce limits on the number of active images per community and image-type. Audit logs and compliance tracking are enforced for all update operations, critical for brand consistency and moderation workflows. Only authorized moderators of the community or administrators can perform updates.","description":"This endpoint allows modification of an existing image record associated with a community, supporting scenarios such as updating alt text for accessibility, changing image order, activating/deactivating visuals, or reclassifying the image_type (icon, background, etc.). Only users with appropriate role-based permissions (moderators of the community or platform admins) may use this operation; the system enforces these authorization checks before applying updates.\n\nThis operation does not replace the binary file but updates related metadata, and thus expects only fields modifiable at the record level—such as alt_text, order, image_type, or activation status. Updates are validated for compliance with business rules on allowed values, maximum image counts, uniqueness of order within each image_type, and accessibility string length. Full change history is logged for auditing, supporting restoration or rollback if needed.\n\nIf successful, the operation returns the updated community image record. If the operation fails due to permission errors, validation issues, or constraints (such as attempting to set conflicting orders), informative error messages and guidance for correction are provided.","summary":"Update metadata or display properties of a specific community image (community_platform_community_images).","parameters":[{"name":"communityId","description":"Unique identifier of the community for which the image is being managed.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the community image record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the community image. Only metadata, not the actual image file, is updated.","typeName":"ICommunityPlatformCommunityImage.IUpdate"},"responseBody":{"description":"Updated community image record including all modified properties and current associations.","typeName":"ICommunityPlatformCommunityImage"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/communityPlatform/admin/communities/{communityId}/images/{imageId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/images","method":"post"},"description":"Community image must exist before it can be updated. This ensures the image record for the specified community is present prior to updating its metadata or display properties."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a community image can exist or be updated, since all images are associated with an existing community."}]},{"specification":"This operation permanently removes an image from a specific community. It directly manipulates the 'community_platform_community_images' table in the CommunityPlatform database schema, which holds non-banner images associated with a community (such as icons, backgrounds, or other general visuals). This removal operation is a hard delete, as indicated by the lack of an actual soft delete field governing API-level visibility in the schema. Only community moderators or higher have the authorization to perform this action, and on successful operation, the image is no longer associated or retrievable for the community. Any related file upload references must be managed according to business logic for file reuse or deletion.","description":"This API endpoint enables an authorized moderator or admin to delete a specific image from a community. Images in 'community_platform_community_images' are used for non-banner purposes like icons or backgrounds, and each is associated with a community and an underlying file upload (from community_platform_file_uploads). \n\nUpon receiving a DELETE request with both the communityId and imageId, the operation validates moderator or admin permissions before removing the target image. Any file resource reference must be handled appropriately in relation to other usages (such as banners, posts), with the primary focus being the removal of the image's explicit record in the community's image listing. \n\nSecurity is paramount; only moderators assigned to the relevant community or admins can perform this operation. An error is returned if the image is not found, belongs to a different community, or the requester lacks permission. This operation does not remove the actual file data from storage but strictly detaches the image from the community in question, following the ERD and table definitions. All action outcomes are logged for compliance and audit.","summary":"Permanently remove a non-banner image from a community (community_platform_community_images table).","parameters":[{"name":"communityId","description":"Unique identifier of the community from which this image is being removed","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image to be removed from the community","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/communityPlatform/moderator/communities/{communityId}/images/{imageId}","method":"delete","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its images can be managed or deleted."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/images","method":"post"},"description":"Community image must exist before it can be deleted from the community."}]},{"specification":"This operation permanently removes an image from a specific community. It directly manipulates the 'community_platform_community_images' table in the CommunityPlatform database schema, which holds non-banner images associated with a community (such as icons, backgrounds, or other general visuals). This removal operation is a hard delete, as indicated by the lack of an actual soft delete field governing API-level visibility in the schema. Only community moderators or higher have the authorization to perform this action, and on successful operation, the image is no longer associated or retrievable for the community. Any related file upload references must be managed according to business logic for file reuse or deletion.","description":"This API endpoint enables an authorized moderator or admin to delete a specific image from a community. Images in 'community_platform_community_images' are used for non-banner purposes like icons or backgrounds, and each is associated with a community and an underlying file upload (from community_platform_file_uploads). \n\nUpon receiving a DELETE request with both the communityId and imageId, the operation validates moderator or admin permissions before removing the target image. Any file resource reference must be handled appropriately in relation to other usages (such as banners, posts), with the primary focus being the removal of the image's explicit record in the community's image listing. \n\nSecurity is paramount; only moderators assigned to the relevant community or admins can perform this operation. An error is returned if the image is not found, belongs to a different community, or the requester lacks permission. This operation does not remove the actual file data from storage but strictly detaches the image from the community in question, following the ERD and table definitions. All action outcomes are logged for compliance and audit.","summary":"Permanently remove a non-banner image from a community (community_platform_community_images table).","parameters":[{"name":"communityId","description":"Unique identifier of the community from which this image is being removed","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image to be removed from the community","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/communityPlatform/admin/communities/{communityId}/images/{imageId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its images can be managed or deleted."},{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/images","method":"post"},"description":"Community image must exist before it can be deleted from the community."}]},{"specification":"Retrieve an audit log of all status changes for a specific community, supporting advanced filtering, sorting, and pagination. This operation works on the 'community_platform_community_status_changes' table, which records every change of status (such as active, suspended, banned, or archived), who performed the change, the previous and new status values, and associated metadata. Moderators of the community and admins can access these records to review compliance history and status change reasons.","description":"This API endpoint allows authorized users (moderators for the community or administrators) to search and retrieve paginated audit records of all status changes for a given community, as recorded in the 'community_platform_community_status_changes' table. Each record logs a change event including the previous and new status, the admin or moderator who performed the change, the rationale, any audit notes, and precise timestamps.\n\nClients submit a PATCH request to the endpoint with optional advanced filtering and pagination parameters in the body, enabling sorting by timestamp, filtering by status types (such as banned or private), or querying by the actor responsible. Security enforcement ensures only users with moderator or admin privileges for that community may access this data. If a user without sufficient privileges attempts access, an error is returned.\n\nTypical uses include compliance audits, moderator activity reviews, or regulatory checks. This operation is critical for transparency and accountability in the management of community accessibility and configuration changes.","summary":"Retrieve paginated audit trail of all status changes for a community (community_platform_community_status_changes table).","parameters":[{"name":"communityId","description":"Unique identifier of the community whose status change logs are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filtering, search, sorting, and pagination options for retrieving status change logs.","typeName":"ICommunityPlatformCommunityStatusChange.IRequest"},"responseBody":{"description":"Paginated list of status change audit records for the requested community.","typeName":"IPageICommunityPlatformCommunityStatusChange"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/communityPlatform/moderator/communities/{communityId}/statusChanges","method":"patch","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its status change audit logs can be queried."}]},{"specification":"Retrieve an audit log of all status changes for a specific community, supporting advanced filtering, sorting, and pagination. This operation works on the 'community_platform_community_status_changes' table, which records every change of status (such as active, suspended, banned, or archived), who performed the change, the previous and new status values, and associated metadata. Moderators of the community and admins can access these records to review compliance history and status change reasons.","description":"This API endpoint allows authorized users (moderators for the community or administrators) to search and retrieve paginated audit records of all status changes for a given community, as recorded in the 'community_platform_community_status_changes' table. Each record logs a change event including the previous and new status, the admin or moderator who performed the change, the rationale, any audit notes, and precise timestamps.\n\nClients submit a PATCH request to the endpoint with optional advanced filtering and pagination parameters in the body, enabling sorting by timestamp, filtering by status types (such as banned or private), or querying by the actor responsible. Security enforcement ensures only users with moderator or admin privileges for that community may access this data. If a user without sufficient privileges attempts access, an error is returned.\n\nTypical uses include compliance audits, moderator activity reviews, or regulatory checks. This operation is critical for transparency and accountability in the management of community accessibility and configuration changes.","summary":"Retrieve paginated audit trail of all status changes for a community (community_platform_community_status_changes table).","parameters":[{"name":"communityId","description":"Unique identifier of the community whose status change logs are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filtering, search, sorting, and pagination options for retrieving status change logs.","typeName":"ICommunityPlatformCommunityStatusChange.IRequest"},"responseBody":{"description":"Paginated list of status change audit records for the requested community.","typeName":"IPageICommunityPlatformCommunityStatusChange"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/communityPlatform/admin/communities/{communityId}/statusChanges","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its status change audit logs can be queried."}]},{"specification":"This operation retrieves a specific audit trail entry for a community's status change event, such as a transition from 'active' to 'banned' or 'private' for the targeted community. The operation reads the community_platform_community_status_changes table, which captures every moderation or administrative status transition for compliance, user transparency, and auditability. The endpoint returns all details about the relevant status change, including involved actor (admin/moderator), previous and new status, reason, and timestamps. It is critical for enabling users, moderators, and admins to review community history, ensure governance transparency, and validate dispute or appeal contexts.","description":"This operation provides detailed retrieval of a single status change event for a specified community. Each record in the community_platform_community_status_changes table represents a snapshot of a status transition (such as from 'active' to 'banned', or from 'private' to 'active'). The record includes who performed the status change—admin or moderator—when the event occurred, and the reasoning and notes associated with the action. If a community is banned or unbanned, made private or public, or otherwise undergoes changes affecting accessibility, this entry allows full insight into how, when, and why the action occurred.\n\nAccess to this operation is generally restricted to roles with appropriate permissions: users may see limited fields, while moderators and admins have full audit visibility. The operation is essential for compliance reviews, historical access control decisions, user appeals, and forensics in the event of misconduct or errors. Business logic ensures only non-soft-deleted communities and status changes are visible, and fields such as notes, previous status, and new status are protected from unauthorized exposure.\n\nProper error handling is implemented for invalid or nonexistent community or status change IDs, and for attempts to view events of deleted/banned communities (subject to role). Clients should use this API in conjunction with the listing/creation endpoints for status changes to provide administrators and moderators with transparent records.","summary":"Retrieve a specific community status change event by its ID from community_platform_community_status_changes.","parameters":[{"name":"communityId","description":"Identifier of the target community.","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Identifier of the specific community status change to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed status change event information with moderator/admin actor, previous/new status, reason, and timestamps.","typeName":"ICommunityPlatformCommunityStatusChange"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityPlatform/admin/communities/{communityId}/statusChanges/{statusChangeId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before its status change history can be retrieved"},{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/statusChanges","method":"post"},"description":"Status change history record must be created for the specific community before it can be retrieved by its ID"}]},{"specification":"This operation creates and records a new status change for the specified community, such as setting a community to 'banned', 'private', 'active', or 'archived'. It operates on the community_platform_community_status_changes table, which is critical for audit trails, governance, compliance, and user notification. This record includes the targeted community, assigned actor (admin/moderator), the previous and new status values, an optional reason/notes for the change, and the time the event was recorded. Only users with administrative privileges should be permitted to execute this operation, ensuring robust control over significant community state transitions and historic event logging.","description":"This API endpoint enables administrators to record a new status change event for a community, such as banning, suspending, or reinstating it, or moving it into private or archived state. The operation updates the community_platform_community_status_changes table, logging the actor (administrator), targeted community, transition from prior status to the resulting status, and any accompanying justification or notes for the event. This ensures every significant administrative or moderation action is transparently recorded.\n\nStrict authorization is required to avoid abuse or fraudulent changes; only platform admins or, where appropriate, moderators assigned to the target community should be allowed to invoke this operation. Upon execution, the operation ensures all provided status values are validated against allowed enumerations and that the referenced community is not soft-deleted. Errors are returned on invalid community, status value, or insufficient privilege.\n\nThis operation complements the ability to retrieve and list community status change events, providing a consistent audit log and compliance system for reassigning roles, handling appeals, or performing forensic analysis. Proper integration with notification and messaging systems is encouraged to inform affected users and moderators of the change.","summary":"Create and record a new community status change event (e.g., banned, private, active) into the audit trail.","parameters":[{"name":"communityId","description":"Identifier for the target community whose status will be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details required to create a new community status change (prior status, new status, actor, reason, notes).","typeName":"ICommunityPlatformCommunityStatusChange.ICreate"},"responseBody":{"description":"The created status change event including all audit and context information.","typeName":"ICommunityPlatformCommunityStatusChange"},"authorizationRoles":["admin"],"name":"create","path":"/communityPlatform/admin/communities/{communityId}/statusChanges","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its status can be changed or a status change audit event can be recorded"}]},{"specification":"This operation updates a specific status change event for a community in the platform. It targets the community_platform_community_status_changes table, allowing authorized administrators to modify the details of a recorded community status transition (such as prior and new statuses, change reason, or notes) for compliance correction or audit amendments. Edits may only occur for unresolved or recently created status changes as per policy.","path":"/communityPlatform/admin/communities/{communityId}/statusChanges/{statusChangeId}","method":"put","summary":"Update community status change entry (community_platform_community_status_changes table)","description":"This API operation enables administrators to update the details of a single community status change record. Such status changes record all transitions in community state (such as from 'active' to 'banned', 'private', 'archived'), including the moderator/admin responsible, timestamps, and supporting reasoning. Updating may involve correcting the previous/new status fields, change_reason, or notes for audit accuracy.\n\nSecurity is enforced strictly: only admin roles are permitted, and attempted changes are logged for compliance. Modifications must reference actual community and status change IDs in the path parameters, ensuring precise targeting in the database. Underlying Prisma schema fields such as previous_status, new_status, change_reason, and notes are referenced for updates.\n\nValidation rules require that the combination of communityId and statusChangeId exists, and that the request body supplies valid values matching the business schema for allowed edits. Attempts to update finalized or historical status changes may be rejected according to audit lock or compliance flags. This operation is related to the creation and querying of community status changes, but solely supports update, not creation or deletion. Errors are raised if edit constraints are violated or unauthorized access is attempted.","parameters":[{"name":"communityId","description":"The unique identifier (UUID) of the target community","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"The unique identifier (UUID) of the status change entry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the community status change entry","typeName":"ICommunityPlatformCommunityStatusChange.IUpdate"},"responseBody":{"description":"The updated community status change entry","typeName":"ICommunityPlatformCommunityStatusChange"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/statusChanges","method":"post"},"description":"A community status change entry must be created before it can be updated."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community must exist before creating or updating its status change entries."}]},{"specification":"This operation permanently removes a specific community status change entry from the community_platform_community_status_changes table. It is a hard delete, intended for exceptional compliance or correction scenarios only, such as inadvertent status event creation or legal erasure requests. Generally, audit status changes are immutable, so delete rights are highly restricted to admin roles with explicit authorization.","path":"/communityPlatform/admin/communities/{communityId}/statusChanges/{statusChangeId}","method":"delete","summary":"Delete a community status change entry (community_platform_community_status_changes table)","description":"This API operation allows platform administrators to permanently delete a community status change event. Status changes are audit records tracking every transition in a community's status, including who executed the change, previous/new status, reasons, and timestamps. Deleting such records is not routine and is only allowed in exceptional circumstances (such as regulatory erasure requests or clear policy compliance errors), due to the nature of audit requirements.\n\nThe deletion is enforced as a hard delete, irreversibly removing the record from the database without a soft-deleted field, as the schema lacks a soft deletion column. Only admin roles may invoke this operation, and all actions are logged for oversight. Path parameters precisely identify both the community and the specific status change record.\n\nErrors are returned if the record does not exist, deletion is disallowed due to audit lock, or the user lacks the required role. This operation is strictly for deletion and does not support recovery or undeletion. It should be used sparingly and with full compliance review.","parameters":[{"name":"communityId","description":"The unique identifier (UUID) of the target community","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"The unique identifier (UUID) of the status change entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/statusChanges","method":"post"},"description":"A community status change entry must be created before it can be deleted."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community must exist before creating or deleting its status change entries."}]},{"specification":"Retrieves the list of all moderator assignments for a specific community identified by communityId. This operation provides community administrators and system users with the ability to review all assigned moderators for a community, including their roles, owning members, assignment timelines, and any applicable notes. Pagination, filtering, and sorting are supported in the request body. The underlying model is community_platform_community_moderator_assignments and is essential for auditing, compliance, and moderator management workflows.","path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"patch","summary":"List all moderator assignments for a community (community_platform_community_moderator_assignments)","description":"Retrieve a filtered and paginated list of all moderator assignments for a specified community. Each assignment indicates a member assigned as moderator, their moderator role, start/end dates, assigner, and notes. This endpoint enables transparency and control for community owners and platform admins to review current and past moderator staff, and to ensure proper governance.\n\nSecurity and permissions: This operation is restricted to authenticated users with sufficient rights within the context of the community, typically community owners, assigned moderators, or admins. Data returned is limited to the specified community.\n\nThe operation directly references the community_platform_community_moderator_assignments table, incorporating its fields and join relations with the communities and members table. Filtering may include moderator role, assignment status (active, ended), or search by member. Pagination reduces result set size for efficient client handling.\n\nRelated operations: assignment retrieval by id, creating new assignments, updating existing assignments, or removing assignments. Error handling includes invalid communityId, insufficient permissions, or excessive result size.","parameters":[{"name":"communityId","description":"Unique identifier for the target community","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for retrieving moderator assignments","typeName":"ICommunityPlatformCommunityModeratorAssignment.IRequest"},"responseBody":{"description":"Paginated list of moderator assignment summaries for the specified community","typeName":"IPageICommunityPlatformCommunityModeratorAssignment.ISummary"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before moderator assignments can be listed, since all assignments are scoped to an existing community."}]},{"specification":"Retrieves the list of all moderator assignments for a specific community identified by communityId. This operation provides community administrators and system users with the ability to review all assigned moderators for a community, including their roles, owning members, assignment timelines, and any applicable notes. Pagination, filtering, and sorting are supported in the request body. The underlying model is community_platform_community_moderator_assignments and is essential for auditing, compliance, and moderator management workflows.","path":"/communityPlatform/moderator/communities/{communityId}/moderatorAssignments","method":"patch","summary":"List all moderator assignments for a community (community_platform_community_moderator_assignments)","description":"Retrieve a filtered and paginated list of all moderator assignments for a specified community. Each assignment indicates a member assigned as moderator, their moderator role, start/end dates, assigner, and notes. This endpoint enables transparency and control for community owners and platform admins to review current and past moderator staff, and to ensure proper governance.\n\nSecurity and permissions: This operation is restricted to authenticated users with sufficient rights within the context of the community, typically community owners, assigned moderators, or admins. Data returned is limited to the specified community.\n\nThe operation directly references the community_platform_community_moderator_assignments table, incorporating its fields and join relations with the communities and members table. Filtering may include moderator role, assignment status (active, ended), or search by member. Pagination reduces result set size for efficient client handling.\n\nRelated operations: assignment retrieval by id, creating new assignments, updating existing assignments, or removing assignments. Error handling includes invalid communityId, insufficient permissions, or excessive result size.","parameters":[{"name":"communityId","description":"Unique identifier for the target community","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for retrieving moderator assignments","typeName":"ICommunityPlatformCommunityModeratorAssignment.IRequest"},"responseBody":{"description":"Paginated list of moderator assignment summaries for the specified community","typeName":"IPageICommunityPlatformCommunityModeratorAssignment.ISummary"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before moderator assignments can be listed, since all assignments are scoped to an existing community."}]},{"specification":"Retrieves a specific moderator assignment for a community by its assignmentId within the context of the specified communityId. This operation returns detailed information about the assignment including moderator member, role, assignment period, assigner, and additional notes. It is based on the community_platform_community_moderator_assignments table and provides the necessary details for display, review, or edit flows in moderator management.","path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments/{assignmentId}","method":"get","summary":"Get details of a moderator assignment by id (community_platform_community_moderator_assignments)","description":"Retrieve detailed information about a specific moderator assignment within a community. This information includes the assigned member, their role, assignment effective dates, who assigned the role, and contextual notes for the assignment or removal.\n\nPermissions: This endpoint is accessible to authenticated users with appropriate rights within the community context (owner, moderator, or admin). The system ensures the assignmentId belongs to the specified community (communityId) and enforces access boundaries.\n\nThe underlying data comes from the community_platform_community_moderator_assignments table, joined as needed to member and community details. Typical use cases are in moderator dashboards, admin review, or audit workflows. Error handling covers missing/invalid ids, mismatched community/assignment, or insufficient permissions.","parameters":[{"name":"communityId","description":"Unique identifier for the target community","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier for the moderator assignment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator assignment information for the specified assignment","typeName":"ICommunityPlatformCommunityModeratorAssignment"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a moderator assignment can be queried by its assignmentId."},{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"post"},"description":"Moderator assignment must be created for a community before it can be retrieved via assignmentId."}]},{"specification":"Retrieves a specific moderator assignment for a community by its assignmentId within the context of the specified communityId. This operation returns detailed information about the assignment including moderator member, role, assignment period, assigner, and additional notes. It is based on the community_platform_community_moderator_assignments table and provides the necessary details for display, review, or edit flows in moderator management.","path":"/communityPlatform/moderator/communities/{communityId}/moderatorAssignments/{assignmentId}","method":"get","summary":"Get details of a moderator assignment by id (community_platform_community_moderator_assignments)","description":"Retrieve detailed information about a specific moderator assignment within a community. This information includes the assigned member, their role, assignment effective dates, who assigned the role, and contextual notes for the assignment or removal.\n\nPermissions: This endpoint is accessible to authenticated users with appropriate rights within the community context (owner, moderator, or admin). The system ensures the assignmentId belongs to the specified community (communityId) and enforces access boundaries.\n\nThe underlying data comes from the community_platform_community_moderator_assignments table, joined as needed to member and community details. Typical use cases are in moderator dashboards, admin review, or audit workflows. Error handling covers missing/invalid ids, mismatched community/assignment, or insufficient permissions.","parameters":[{"name":"communityId","description":"Unique identifier for the target community","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier for the moderator assignment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator assignment information for the specified assignment","typeName":"ICommunityPlatformCommunityModeratorAssignment"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a moderator assignment can be queried by its assignmentId."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/moderatorAssignments","method":"post"},"description":"Moderator assignment must be created for a community before it can be retrieved via assignmentId."}]},{"specification":"This operation creates a new moderator assignment for a specific community. It targets the community_platform_community_moderator_assignments table, which records assignment relations between members and communities for moderation roles. Upon creation, the assigning actor sets the member, role (owner/moderator/etc.), and assignment rationale. The operation enforces permission logic so only authorized users (admins or currently assigned moderators of the community) can assign moderators. The request input must contain the target community ID and assignment details, including the assigned member's ID, moderator role, start time, and assigning actor's ID. The system validates role uniqueness within the community, active member status, and restricts exceeding assignment quotas. If the assignment is successful, a new moderation assignment record is created, with full audit and compliance tracking.","description":"Create a new moderator assignment for a community. The operation requires the caller to be an admin or a current community moderator with sufficient privileges. It references the community_platform_community_moderator_assignments table in the schema, which tracks moderator assignments per community, and includes assignment rationale and auditing information.\n\nThe request body should provide all necessary assignment details (target community, member to be assigned, role, assigner, start time, and any notes). The system ensures that the member exists, is not already assigned as a moderator with the same role, and is eligible for moderation duties. It checks assignment quotas, avoids duplicates, and ensures compliance with business rules described in requirements analysis (moderator assignment by admins or owner-moderators, per audit/compliance control).\n\nSecurity controls require all assignment actions to be logged. If a community is archived or does not exist, or the actor is not authorized, an appropriate error is returned. The response includes the full assignment entity created, for immediate use (such as interface update or audit view).\n\nRelated APIs include updating assignments, deleting moderator assignments, or listing all current assignments for a community.","summary":"Create a new moderator assignment record for a specific community in the community_platform_community_moderator_assignments table.","parameters":[{"name":"communityId","description":"Unique identifier of the target community for which moderator assignment is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator assignment creation information including assigned member, role, assigner ID, and assignment timing.","typeName":"ICommunityPlatformCommunityModeratorAssignment.ICreate"},"responseBody":{"description":"The created moderator assignment record for the community, including IDs, role, timing, and audit detail.","typeName":"ICommunityPlatformCommunityModeratorAssignment"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before moderator assignments can be added to it."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"Member must exist and be created (by uploading a file that establishes the member) before assigning as a moderator."}]},{"specification":"This operation creates a new moderator assignment for a specific community. It targets the community_platform_community_moderator_assignments table, which records assignment relations between members and communities for moderation roles. Upon creation, the assigning actor sets the member, role (owner/moderator/etc.), and assignment rationale. The operation enforces permission logic so only authorized users (admins or currently assigned moderators of the community) can assign moderators. The request input must contain the target community ID and assignment details, including the assigned member's ID, moderator role, start time, and assigning actor's ID. The system validates role uniqueness within the community, active member status, and restricts exceeding assignment quotas. If the assignment is successful, a new moderation assignment record is created, with full audit and compliance tracking.","description":"Create a new moderator assignment for a community. The operation requires the caller to be an admin or a current community moderator with sufficient privileges. It references the community_platform_community_moderator_assignments table in the schema, which tracks moderator assignments per community, and includes assignment rationale and auditing information.\n\nThe request body should provide all necessary assignment details (target community, member to be assigned, role, assigner, start time, and any notes). The system ensures that the member exists, is not already assigned as a moderator with the same role, and is eligible for moderation duties. It checks assignment quotas, avoids duplicates, and ensures compliance with business rules described in requirements analysis (moderator assignment by admins or owner-moderators, per audit/compliance control).\n\nSecurity controls require all assignment actions to be logged. If a community is archived or does not exist, or the actor is not authorized, an appropriate error is returned. The response includes the full assignment entity created, for immediate use (such as interface update or audit view).\n\nRelated APIs include updating assignments, deleting moderator assignments, or listing all current assignments for a community.","summary":"Create a new moderator assignment record for a specific community in the community_platform_community_moderator_assignments table.","parameters":[{"name":"communityId","description":"Unique identifier of the target community for which moderator assignment is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator assignment creation information including assigned member, role, assigner ID, and assignment timing.","typeName":"ICommunityPlatformCommunityModeratorAssignment.ICreate"},"responseBody":{"description":"The created moderator assignment record for the community, including IDs, role, timing, and audit detail.","typeName":"ICommunityPlatformCommunityModeratorAssignment"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/communityPlatform/moderator/communities/{communityId}/moderatorAssignments","method":"post","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before moderator assignments can be added to it."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"Member must exist and be created (by uploading a file that establishes the member) before assigning as a moderator."}]},{"specification":"This operation updates an existing moderator assignment for a specific community assignment record. It operates on the community_platform_community_moderator_assignments table, which tracks relationships between members and communities with moderation roles. The update allows authorized users (admins or designated owner-moderators) to change the role, timing, or notes for an existing assigned moderator. The operation ensures that assignment IDs and communities match, validates update permissions, and enforces business logic such as prohibition on demoting oneself as the sole owner or exceeding the maximum number of moderators for a community. Additionally, it provides audit compliance, logs the change with the assigning actor's ID, and ensures all updated fields comply with validation rules. The response includes the full updated assignment entity reflecting all changes.","description":"Update an existing moderator assignment for a specific community. The operation requires the assigning actor to be an admin or an authorized owner-moderator of the target community, in accordance with permission logic. This operation references the community_platform_community_moderator_assignments schema table, which stores each assignment's details including assignment role, note, and assignment time periods.\n\nThe request body must contain all changes to apply, which may include moderator role, start/end dates, and assignment notes or reasons. The operation verifies that the target assignment and community exist, that the actor is permitted to make changes, and that the changes comply with business rules (no orphaning of a community without an owner, limits on moderator assignments, etc.).\n\nThe update action is logged for audit and traceability. The response returns the updated assignment record. Errors can result from unauthorized actors, invalid IDs, or violating assignment constraints (such as trying to remove the last 'owner' of a community).\n\nRelated APIs include assignment creation, deletion, and retrieval/listing APIs for moderator assignments.","summary":"Update an existing moderator assignment record for a community in the community_platform_community_moderator_assignments table.","parameters":[{"name":"communityId","description":"Unique identifier of the community for which the moderator assignment is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the moderator assignment to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated moderator assignment details, including new role, note, or start/end times, and assigning actor ID.","typeName":"ICommunityPlatformCommunityModeratorAssignment.IUpdate"},"responseBody":{"description":"The updated moderator assignment record including all assignment and audit details.","typeName":"ICommunityPlatformCommunityModeratorAssignment"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments/{assignmentId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"post"},"description":"A moderator assignment must be created before it can be updated."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community must be created before updating moderator assignments for it."}]},{"specification":"This operation updates an existing moderator assignment for a specific community assignment record. It operates on the community_platform_community_moderator_assignments table, which tracks relationships between members and communities with moderation roles. The update allows authorized users (admins or designated owner-moderators) to change the role, timing, or notes for an existing assigned moderator. The operation ensures that assignment IDs and communities match, validates update permissions, and enforces business logic such as prohibition on demoting oneself as the sole owner or exceeding the maximum number of moderators for a community. Additionally, it provides audit compliance, logs the change with the assigning actor's ID, and ensures all updated fields comply with validation rules. The response includes the full updated assignment entity reflecting all changes.","description":"Update an existing moderator assignment for a specific community. The operation requires the assigning actor to be an admin or an authorized owner-moderator of the target community, in accordance with permission logic. This operation references the community_platform_community_moderator_assignments schema table, which stores each assignment's details including assignment role, note, and assignment time periods.\n\nThe request body must contain all changes to apply, which may include moderator role, start/end dates, and assignment notes or reasons. The operation verifies that the target assignment and community exist, that the actor is permitted to make changes, and that the changes comply with business rules (no orphaning of a community without an owner, limits on moderator assignments, etc.).\n\nThe update action is logged for audit and traceability. The response returns the updated assignment record. Errors can result from unauthorized actors, invalid IDs, or violating assignment constraints (such as trying to remove the last 'owner' of a community).\n\nRelated APIs include assignment creation, deletion, and retrieval/listing APIs for moderator assignments.","summary":"Update an existing moderator assignment record for a community in the community_platform_community_moderator_assignments table.","parameters":[{"name":"communityId","description":"Unique identifier of the community for which the moderator assignment is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the moderator assignment to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated moderator assignment details, including new role, note, or start/end times, and assigning actor ID.","typeName":"ICommunityPlatformCommunityModeratorAssignment.IUpdate"},"responseBody":{"description":"The updated moderator assignment record including all assignment and audit details.","typeName":"ICommunityPlatformCommunityModeratorAssignment"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/communityPlatform/moderator/communities/{communityId}/moderatorAssignments/{assignmentId}","method":"put","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/moderatorAssignments","method":"post"},"description":"A moderator assignment must be created before it can be updated."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community must be created before updating moderator assignments for it."}]},{"specification":"This operation removes a specific moderator assignment from a targeted community. It operates on the community_platform_community_moderator_assignments table in the Prisma schema, which tracks assignments of members as moderators to communities. Removal of a moderator assignment involves updating the soft delete state or permanently deleting the moderator assignment, depending on the existence of soft delete columns. This operation is primarily used by admins and community owners to revoke moderator privileges from specific members.","description":"This endpoint is designed to allow administrative-level users to remove an existing moderator assignment and thus revoke moderation privileges from an assigned member within a specific community.\n\nRemoving a moderator assignment impacts community governance and security, so this operation should be audited and restricted. It references the community_platform_community_moderator_assignments table (which hosts the mapping between communities and assigned moderators) and deletes or marks as ended the specified assignment record. Deletion should ensure that any open moderation tasks or escalation queue items for this moderator are also reassigned or resolved as per business workflows.\n\nPermission to perform this action should be limited to platform admins or community owners/founders, and all removals must be logged for compliance and traceability. Attempting to delete a non-existent or already ended assignment should result in an idempotent response or a specific error. This is a hard delete because the deleted_at column is present in the schema.\n\nRelated operations that might be used together include listing all moderator assignments for a community or assigning a new moderator. Error handling must ensure that trying to remove an assignment that does not exist, or for which the caller lacks permission, will return a clear error.","summary":"Remove a moderator assignment from a community (community_platform_community_moderator_assignments table)","parameters":[{"name":"communityId","description":"Target community's unique identifier where the moderator assignment exists.","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the moderator assignment to be removed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments/{assignmentId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"post"},"description":"A moderator assignment must exist before it can be removed from a community. This ensures the assignment targeted for deletion exists in the system."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community must exist before a moderator assignment can be removed from it. This ensures both the target community and the relevant scope for the assignment are available."}]},{"specification":"This operation enables advanced searching, filtering, and sorting of posts within the Reddit-like community platform. It is based on the community_platform_posts table from the Prisma schema, supporting paginated retrieval and rich filtering on fields like content type, status, community, and text search. Sorting can be applied for 'hot', 'new', 'top', and 'controversial' listings based on voting and timestamp information. Pagination is recommended for large result sets.","description":"This operation retrieves a paginated and filterable list of posts from the community_platform_posts table, enabling rich client-side search experiences for users browsing, searching, or discovering posts. Clients may request filters based on content type (text, link, image), post status (published, pending, removed), target community, or text queries.\n\nThe request body (ICommunityPlatformPost.IRequest) allows specifying advanced search, pagination, and sort options (e.g., hot, new, top, controversial). The response (IPageICommunityPlatformPost.ISummary) returns a page of post summaries, including essential fields for display and client interactions. Security: Both guests and members can search and view posts, but certain fields or statuses (e.g., pending or removed) may only be accessible to moderators or the post creator. Permission checks must be enforced to hide or redact sensitive content.\n\nThe operation performs optimized text searching and incorporates Prisma table indexes on fields such as title, creation date, and status to improve performance. Error handling returns empty results or appropriate error codes if no matches are found or if filters are invalid. Pagination metadata is always included in the response for infinite scrolling or page-by-page navigation.","summary":"Search, filter, and paginate platform posts (community_platform_posts table)","parameters":[],"requestBody":{"description":"Search, filter, sorting, and pagination parameters for retrieving posts.","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries matching search criteria with pagination information.","typeName":"IPageICommunityPlatformPost.ISummary"},"authorizationRoles":[],"name":"index","path":"/communityPlatform/posts","method":"patch","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Communities must exist before posts can be searched or filtered by community. This enables the filtering of posts by valid community identifiers when using search, filter, or pagination features."}]},{"specification":"This operation retrieves the details of a single post using its unique identifier. It is based on the community_platform_posts table in the Prisma schema, which stores all top-level user-generated content within specific communities. The retrieved post includes title, content (text, link, or image metadata), author, associated community, status, timestamps, and relationships to voting and comments. This API is central for content display in feeds, user profiles, and direct linking from lists to post detail views. Only fields existing on the posts table or its direct relations may be returned, and the operation enforces role-based access (guests may view, but posts with restricted status may require authentication or moderation privileges).","path":"/communityPlatform/posts/{postId}","method":"get","summary":"Retrieve a single post's details by ID from the community_platform_posts table.","description":"This endpoint fetches a user's post details from the system by unique post ID. Only posts that exist and are not soft-deleted or restricted will be shown; otherwise, access will be denied or a not-found error returned.\n\nSecurity: Guests and authenticated users can access public posts. Posts with status values indicating moderation removal or restriction (e.g., removed, hidden, mod_queued) are hidden unless the requester is a moderator or the post's author. Validation ensures the post exists, is not banned or deleted, and all related content (images, links) is included only if attached to the post.\n\nBusiness logic: This endpoint is suitable for use in post detail pages, direct post links, and user profile displays. Associated comments, votes, and moderator actions are not directly returned here, but can be retrieved via parallel or nested API calls. All error cases (not found, unauthorized access) return succinct, actionable responses. Posts are associated with communities, so community-level visibility or bans may affect access.","parameters":[{"name":"postId","description":"Unique identifier for the post to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested post, including title, content, status, and associations to its parent community and creator.","typeName":"ICommunityPlatformPost"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before it can be retrieved by its ID."}]},{"specification":"This operation creates a new post in a target community. It writes to the community_platform_posts table, which supports posts of type text, link, or image. Creation requires a valid, authenticated user ('member' or higher), reference to an existing community, and adherence to posting constraints (title length, content limits, type validation, and rate limits). The post is associated to the creating member, and status reflects moderation flow (published or moderation queue). File/image attachments and link metadata must reference platform uploads or validated URLs. Moderator and admin users may post with additional privileges as per platform policy.","path":"/communityPlatform/member/posts","method":"post","summary":"Create a new post in the community_platform_posts table by an authenticated member.","description":"Create a new post (of type text, link, or image) in a specific community. The operation enforces all validation and business logic as documented: unique title per community, valid content type and length, quota/rate limits, and that the requesting user is an active member (email verified, not banned). The resulting post is associated to the community and user; moderation-required communities may set the initial status to 'mod_queued'.\n\nSecurity: Membership and authentication are required; only 'member', 'moderator', and 'admin' roles may use this endpoint. The API checks for banned users, community access, and all content policy enforcement (banned words, content type, etc.). Any validation failure returns a descriptive error; otherwise, a created post record is returned including assigned ID and status.\n\nThe request body must conform to platform posting DTO conventions and refer only to valid fields in the posts schema (including references to image uploads or validated links). Associated post images or links are created via subsidiary endpoints or as part of the post creation transaction when provided in body.","parameters":[],"requestBody":{"description":"Fields required to create a new post, including title, content, type, and references to the target community and content attachments as appropriate.","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"The newly created post record, including ID, timestamps, status, and community association.","typeName":"ICommunityPlatformPost"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before a post can be created within it."}]},{"specification":"This operation creates a new post in a target community. It writes to the community_platform_posts table, which supports posts of type text, link, or image. Creation requires a valid, authenticated user ('member' or higher), reference to an existing community, and adherence to posting constraints (title length, content limits, type validation, and rate limits). The post is associated to the creating member, and status reflects moderation flow (published or moderation queue). File/image attachments and link metadata must reference platform uploads or validated URLs. Moderator and admin users may post with additional privileges as per platform policy.","path":"/communityPlatform/moderator/posts","method":"post","summary":"Create a new post in the community_platform_posts table by an authenticated member.","description":"Create a new post (of type text, link, or image) in a specific community. The operation enforces all validation and business logic as documented: unique title per community, valid content type and length, quota/rate limits, and that the requesting user is an active member (email verified, not banned). The resulting post is associated to the community and user; moderation-required communities may set the initial status to 'mod_queued'.\n\nSecurity: Membership and authentication are required; only 'member', 'moderator', and 'admin' roles may use this endpoint. The API checks for banned users, community access, and all content policy enforcement (banned words, content type, etc.). Any validation failure returns a descriptive error; otherwise, a created post record is returned including assigned ID and status.\n\nThe request body must conform to platform posting DTO conventions and refer only to valid fields in the posts schema (including references to image uploads or validated links). Associated post images or links are created via subsidiary endpoints or as part of the post creation transaction when provided in body.","parameters":[],"requestBody":{"description":"Fields required to create a new post, including title, content, type, and references to the target community and content attachments as appropriate.","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"The newly created post record, including ID, timestamps, status, and community association.","typeName":"ICommunityPlatformPost"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a post can be created within it."}]},{"specification":"This operation creates a new post in a target community. It writes to the community_platform_posts table, which supports posts of type text, link, or image. Creation requires a valid, authenticated user ('member' or higher), reference to an existing community, and adherence to posting constraints (title length, content limits, type validation, and rate limits). The post is associated to the creating member, and status reflects moderation flow (published or moderation queue). File/image attachments and link metadata must reference platform uploads or validated URLs. Moderator and admin users may post with additional privileges as per platform policy.","path":"/communityPlatform/admin/posts","method":"post","summary":"Create a new post in the community_platform_posts table by an authenticated member.","description":"Create a new post (of type text, link, or image) in a specific community. The operation enforces all validation and business logic as documented: unique title per community, valid content type and length, quota/rate limits, and that the requesting user is an active member (email verified, not banned). The resulting post is associated to the community and user; moderation-required communities may set the initial status to 'mod_queued'.\n\nSecurity: Membership and authentication are required; only 'member', 'moderator', and 'admin' roles may use this endpoint. The API checks for banned users, community access, and all content policy enforcement (banned words, content type, etc.). Any validation failure returns a descriptive error; otherwise, a created post record is returned including assigned ID and status.\n\nThe request body must conform to platform posting DTO conventions and refer only to valid fields in the posts schema (including references to image uploads or validated links). Associated post images or links are created via subsidiary endpoints or as part of the post creation transaction when provided in body.","parameters":[],"requestBody":{"description":"Fields required to create a new post, including title, content, type, and references to the target community and content attachments as appropriate.","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"The newly created post record, including ID, timestamps, status, and community association.","typeName":"ICommunityPlatformPost"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a post can be created within it."}]},{"specification":"This operation updates an existing post in the community platform using the provided new data. It works on the 'community_platform_posts' table, enabling authenticated users to modify allowed fields such as title, content_body, content_type, or status of their own post (within edit window or as permitted by role). Moderators and administrators may also update posts in communities where they hold authority. All business, validation, edit-window, and permission checks are enforced during operation.","path":"/communityPlatform/member/posts/{postId}","method":"put","summary":"Update an existing post in the community platform (community_platform_posts table)","description":"Update a post's content, title, content type, or status using this operation, referencing the 'community_platform_posts' table. The platform allows the post's author to update their content only when the post is within the editable time window and the user's status is active and not under restriction. Moderators or administrators may also update posts in communities where they hold relevant privileges. All edit operations are recorded for auditing, and the previous content is snapshotted for rollback and transparency using \"community_platform_comment_edits\" if necessary.\n\nThe operation enforces permission checks, rate limits, and business rule validation, such as ensuring the title and content respect length and format constraints. The operation also validates against community-specific posting guidelines where applicable. Attempts to edit posts after the window expires fail with an explicit error. Error scenarios include insufficient permissions, non-existent post, or violation of update policies. Edits are always traceable for business compliance and review.\n\nAll changes are subject to audit trail logging, and the operation interacts with related content (e.g., images, links) as defined by related tables and business flows.","parameters":[{"name":"postId","description":"Unique identifier of the post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data for updating the post fields. Only fields allowed by business rules and schema are included.","typeName":"ICommunityPlatformPost.IUpdate"},"responseBody":{"description":"The updated post details after changes are applied and persisted, as pulled from 'community_platform_posts'.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must exist before it can be updated, so the post creation operation is required as a prerequisite."}]},{"specification":"This operation updates an existing post in the community platform using the provided new data. It works on the 'community_platform_posts' table, enabling authenticated users to modify allowed fields such as title, content_body, content_type, or status of their own post (within edit window or as permitted by role). Moderators and administrators may also update posts in communities where they hold authority. All business, validation, edit-window, and permission checks are enforced during operation.","path":"/communityPlatform/moderator/posts/{postId}","method":"put","summary":"Update an existing post in the community platform (community_platform_posts table)","description":"Update a post's content, title, content type, or status using this operation, referencing the 'community_platform_posts' table. The platform allows the post's author to update their content only when the post is within the editable time window and the user's status is active and not under restriction. Moderators or administrators may also update posts in communities where they hold relevant privileges. All edit operations are recorded for auditing, and the previous content is snapshotted for rollback and transparency using \"community_platform_comment_edits\" if necessary.\n\nThe operation enforces permission checks, rate limits, and business rule validation, such as ensuring the title and content respect length and format constraints. The operation also validates against community-specific posting guidelines where applicable. Attempts to edit posts after the window expires fail with an explicit error. Error scenarios include insufficient permissions, non-existent post, or violation of update policies. Edits are always traceable for business compliance and review.\n\nAll changes are subject to audit trail logging, and the operation interacts with related content (e.g., images, links) as defined by related tables and business flows.","parameters":[{"name":"postId","description":"Unique identifier of the post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data for updating the post fields. Only fields allowed by business rules and schema are included.","typeName":"ICommunityPlatformPost.IUpdate"},"responseBody":{"description":"The updated post details after changes are applied and persisted, as pulled from 'community_platform_posts'.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"moderator","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/posts","method":"post"},"description":"Post must exist before it can be updated by a moderator, so the post creation operation is required as a prerequisite."}]},{"specification":"This operation updates an existing post in the community platform using the provided new data. It works on the 'community_platform_posts' table, enabling authenticated users to modify allowed fields such as title, content_body, content_type, or status of their own post (within edit window or as permitted by role). Moderators and administrators may also update posts in communities where they hold authority. All business, validation, edit-window, and permission checks are enforced during operation.","path":"/communityPlatform/admin/posts/{postId}","method":"put","summary":"Update an existing post in the community platform (community_platform_posts table)","description":"Update a post's content, title, content type, or status using this operation, referencing the 'community_platform_posts' table. The platform allows the post's author to update their content only when the post is within the editable time window and the user's status is active and not under restriction. Moderators or administrators may also update posts in communities where they hold relevant privileges. All edit operations are recorded for auditing, and the previous content is snapshotted for rollback and transparency using \"community_platform_comment_edits\" if necessary.\n\nThe operation enforces permission checks, rate limits, and business rule validation, such as ensuring the title and content respect length and format constraints. The operation also validates against community-specific posting guidelines where applicable. Attempts to edit posts after the window expires fail with an explicit error. Error scenarios include insufficient permissions, non-existent post, or violation of update policies. Edits are always traceable for business compliance and review.\n\nAll changes are subject to audit trail logging, and the operation interacts with related content (e.g., images, links) as defined by related tables and business flows.","parameters":[{"name":"postId","description":"Unique identifier of the post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data for updating the post fields. Only fields allowed by business rules and schema are included.","typeName":"ICommunityPlatformPost.IUpdate"},"responseBody":{"description":"The updated post details after changes are applied and persisted, as pulled from 'community_platform_posts'.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/posts","method":"post"},"description":"Post must be created before it can be updated. This ensures the resource exists and allows the update operation to identify the correct target by postId."}]},{"specification":"This operation permanently erases a post from the platform by removing it from the 'community_platform_posts' table. If the post includes a 'deleted_at' field (as a soft-delete marker), it will be soft-deleted by setting that field. Otherwise, it is hard deleted. Only the author (within permitted window), or moderators/admins (who have sufficient rights), may erase a post. Erasure cascades to all related comments, votes, images, and links as per cascade constraints in the schema or policy.","path":"/communityPlatform/member/posts/{postId}","method":"delete","summary":"Erase (delete or soft-delete) a post in the community platform (community_platform_posts table)","description":"Permanently removes or soft-deletes a post from the system, targeting the 'community_platform_posts' table. If a 'deleted_at' field is present, records are soft-deleted by timestamping the field; otherwise, the record is removed entirely (hard delete). Post authors may erase their own posts within policy constraints (e.g., time window), while community moderators or platform admins can erase any post in their scope of authority.\n\nAll erasure actions are audited and may cascade recursively to comments, votes, images, links, and moderation history related to the post, according to referential integrity and business rules. Attempts to erase posts outside policy constraints—such as expired window or insufficient rights—result in errors with informative messages. Related entities are set to deleted appropriately. This operation is secured to prevent unauthorized erasure and ensures platform compliance.\n\nNo response body is returned on success. Operation enforces all business, moderation, and audit requirements.","parameters":[{"name":"postId","description":"Unique identifier of the post to erase/delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before it can be deleted. This guarantees the referenced resource (postId) actually exists for removal."}]},{"specification":"This operation permanently erases a post from the platform by removing it from the 'community_platform_posts' table. If the post includes a 'deleted_at' field (as a soft-delete marker), it will be soft-deleted by setting that field. Otherwise, it is hard deleted. Only the author (within permitted window), or moderators/admins (who have sufficient rights), may erase a post. Erasure cascades to all related comments, votes, images, and links as per cascade constraints in the schema or policy.","path":"/communityPlatform/moderator/posts/{postId}","method":"delete","summary":"Erase (delete or soft-delete) a post in the community platform (community_platform_posts table)","description":"Permanently removes or soft-deletes a post from the system, targeting the 'community_platform_posts' table. If a 'deleted_at' field is present, records are soft-deleted by timestamping the field; otherwise, the record is removed entirely (hard delete). Post authors may erase their own posts within policy constraints (e.g., time window), while community moderators or platform admins can erase any post in their scope of authority.\n\nAll erasure actions are audited and may cascade recursively to comments, votes, images, links, and moderation history related to the post, according to referential integrity and business rules. Attempts to erase posts outside policy constraints—such as expired window or insufficient rights—result in errors with informative messages. Related entities are set to deleted appropriately. This operation is secured to prevent unauthorized erasure and ensures platform compliance.\n\nNo response body is returned on success. Operation enforces all business, moderation, and audit requirements.","parameters":[{"name":"postId","description":"Unique identifier of the post to erase/delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/posts","method":"post"},"description":"Post must be created before it can be erased or soft-deleted."}]},{"specification":"This operation permanently erases a post from the platform by removing it from the 'community_platform_posts' table. If the post includes a 'deleted_at' field (as a soft-delete marker), it will be soft-deleted by setting that field. Otherwise, it is hard deleted. Only the author (within permitted window), or moderators/admins (who have sufficient rights), may erase a post. Erasure cascades to all related comments, votes, images, and links as per cascade constraints in the schema or policy.","path":"/communityPlatform/admin/posts/{postId}","method":"delete","summary":"Erase (delete or soft-delete) a post in the community platform (community_platform_posts table)","description":"Permanently removes or soft-deletes a post from the system, targeting the 'community_platform_posts' table. If a 'deleted_at' field is present, records are soft-deleted by timestamping the field; otherwise, the record is removed entirely (hard delete). Post authors may erase their own posts within policy constraints (e.g., time window), while community moderators or platform admins can erase any post in their scope of authority.\n\nAll erasure actions are audited and may cascade recursively to comments, votes, images, links, and moderation history related to the post, according to referential integrity and business rules. Attempts to erase posts outside policy constraints—such as expired window or insufficient rights—result in errors with informative messages. Related entities are set to deleted appropriately. This operation is secured to prevent unauthorized erasure and ensures platform compliance.\n\nNo response body is returned on success. Operation enforces all business, moderation, and audit requirements.","parameters":[{"name":"postId","description":"Unique identifier of the post to erase/delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/posts","method":"post"},"description":"Post must be created before it can be erased or soft-deleted."}]},{"specification":"This operation retrieves the images attached to a specific post, allowing for advanced filtering, sorting, and pagination. It refers to the community_platform_post_images table, which stores post-image relationships including image order and metadata. Users can search for images related to a post, filter by ordering, and sort according to requirements. The operation is critical to display all images associated with a post, which is useful for gallery views or post detail pages. The listing is enriched with image metadata and ordering, which enables front-end rendering of multi-image posts. It supports list and gallery presentation for post images, including cases with more than one image per post, and is referenced by business rules that permit up to 10 images per post.","description":"Retrieve all images attached to a given post based on its unique identifier. This operation allows users and clients to access the complete set of image metadata for a post, supporting use cases such as gallery displays and validating content limits.\n\nAccess control is enforced so that only posts visible to the current user will expose their images; if the post is private, restricted, or deleted, appropriate error codes and messages are returned. Pagination parameters allow for large posts with many images, and sorting by upload time or ordering is supported for consistent rendering behavior.\n\nThis operation cross-references the community_platform_post_images table and includes relations to file uploads, including URLs, MIME types, and user-attributed upload data. Error handling ensures that invalid post IDs, non-existent posts, or access violations are treated with clear, actionable messages. For each image, associated metadata—such as filename, order, and file size—can be included in the response for rich client-side rendering.","summary":"Retrieve the list of images attached to a specific post (community_platform_post_images).","parameters":[{"name":"postId","description":"The unique identifier of the post whose images are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for filtering and paginating image results for a given post.","typeName":"ICommunityPlatformPostImage.IRequest"},"responseBody":{"description":"Paginated image list attached to the target post, including all relevant image metadata.","typeName":"IPageICommunityPlatformPostImage"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/communityPlatform/posts/{postId}/images","method":"patch","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"A post must be created before images can be retrieved for it, as all images are attached to a post."}]},{"specification":"This operation fetches detailed information on a specific image attached to a post. It acts on the community_platform_post_images table, which maps each image to its parent post and relevant storage metadata. The endpoint is designed for use cases where a single image in a gallery or a detail view is required, allowing access to individual file metadata and references. The operation supports checking ordering, origin filename, storage information, and relations to the physical file record (community_platform_file_uploads). Essential for features such as single-image viewers, full-screen modes, or image-specific moderation actions. The operation helps validate image existence within its post context and provides detailed metadata for display, download, or audit based on file and post relations.","description":"Fetch details for a single image within a post by specifying both the post ID and the image ID. The API retrieves metadata about the image, such as order, stored file link, upload information, MIME type, file size, and original filename.\n\nPermissions are handled by confirming that the requesting user is authorized to view the associated post. If access is denied or if either the post or image does not exist, the API will return a suitable error response. The operation supports moderation and display workflows by returning all context necessary for assessment, audit, or presentation.\n\nThis endpoint directly references the community_platform_post_images table and joins to community_platform_file_uploads for detailed file data. Error handling provides clear outcomes for cases such as missing post, missing image, or insufficient post access rights. The detailed information supports both end-user viewing and background tasks like thumbnail generation or file audits.","summary":"Get complete metadata for a specific post image (community_platform_post_images).","parameters":[{"name":"postId","description":"The UUID of the post containing the image.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"The UUID of the image to retrieve from the specified post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific image attached to the post, including metadata and file references.","typeName":"ICommunityPlatformPostImage"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/posts/{postId}/images/{imageId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The referenced post must be created before its images can be individually retrieved, since images are always attached to existing posts."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/images","method":"post"},"description":"A post image entity must be created (attached to the post) before detailed metadata for a specific image (by imageId) within that post can be retrieved."}]},{"specification":"This operation allows a member to add an image to an existing post as an attachment. Each image is stored as a separate entity in the 'community_platform_post_images' table, which references both the post and the uploaded file. Access to this endpoint is restricted to the post's author or users with appropriate permissions (like moderators or admins, based on business logic). The image must first be uploaded using the platform's file upload process (referenced via the 'community_platform_file_uploads' table), and then attached to the post using this operation. Images are ordered per post to support image galleries and carousel views. This operation ensures all references and constraints are maintained, enforcing business rules on allowed image types, image count per post, and file validation. It only supports attaching approved files that already exist in the upload table, and does not directly handle raw file uploads. Moderators may use this to add images for moderation or community requirements if policy permits.","description":"Attach a new image to an existing post, enriching the presentation or content variety within a community thread.\n\nThe user (typically, the original post author) can add images by referencing files that have been successfully uploaded to the platform. The request must specify the relevant post, the pre-uploaded file as its image, and define the image's order within the post (for cases with multiple images). The API enforces all business rules from the database schema and requirement specs, such as limiting total image count, ensuring file format/size/type validity, and permission checks (only the author, mods, or admins may add images to a post). File references must match IDs in the file uploads table and must not already be soft-deleted. All image additions are audited and may be subject to moderation approval flows depending on post status.\n\nThe underlying tables are 'community_platform_post_images' (for the association) and 'community_platform_file_uploads' (for the referenced file). Input must include the IDs for both the target post and the image properly. Request errors are returned for permission violations, non-existent or invalid file IDs, or exceeding image count per post.","summary":"Add an image to a post as an attachment (community_platform_post_images, community_platform_file_uploads).","parameters":[{"name":"postId","description":"Unique identifier of the target post to attach the image to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for associating an uploaded image with a post, including the file upload ID and display ordering.","typeName":"ICommunityPlatformPostImage.ICreate"},"responseBody":{"description":"Details of the new image association for the post, including the linked file information.","typeName":"ICommunityPlatformPostImage"},"authorizationRoles":["member"],"name":"create","path":"/communityPlatform/member/posts/{postId}/images","method":"post","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before you can attach an image to it—so a post must be created first (providing postId)."},{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"The file upload must exist before it can be attached to a post as an image. This ensures that the file_upload_id you reference points to a valid, previously uploaded file."}]},{"specification":"This operation allows an authorized user (such as the post author, moderator, or admin) to update the metadata or ordering of an existing image attached to a post. It updates the row in 'community_platform_post_images', which manages the relationship between posts and images. The only fields available for update are the 'ordering' of the image or, in future expansion, replacement of the file upload reference. Access checks enforce that only those with sufficient rights can perform updates. This does not allow changing the parent post or raw image data itself, which must be done through appropriate upload or replacement APIs. This operation adheres to all constraints in the schema, such as non-duplication of image order in a post, valid ID checks, and soft delete status enforcement.","description":"Update or reorder an image associated with a post. This is typically used to adjust the sequence of images within a post's gallery or change the file association if image replacement is allowed by future platform policies.\n\nThis operation requires both the post and image identifiers, as the association table 'community_platform_post_images' uses both as keys for lookups and uniqueness constraints. Only permitted users (original author, moderators, or admins) can change image details. If the operation attempts to assign a duplicate image order for the same post, or references an invalid or soft-deleted file/image, it will result in a detailed error. No actual file upload occurs via this endpoint; only references and orderings are changed.\n\nAll updates are audited for change tracing according to platform policies and backend logic. Soft-deleted images may not be updated; changes are only permitted on active associations.","summary":"Update or reorder a post's existing image attachment (community_platform_post_images).","parameters":[{"name":"postId","description":"Unique identifier of the target post whose image entry is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the specific image association (not the file ID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information detailing the new ordering for the post image, or its new associated file if replacement is supported.","typeName":"ICommunityPlatformPostImage.IUpdate"},"responseBody":{"description":"Updated details for the post image association.","typeName":"ICommunityPlatformPostImage"},"authorizationRoles":["member"],"name":"update","path":"/communityPlatform/member/posts/{postId}/images/{imageId}","method":"put","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before its image attachments can be updated or reordered. The post is the entity that owns the images."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/images","method":"post"},"description":"The image must be attached to the post (created) before you can update or reorder it. The imageId referenced must correspond to an existing post image entity."}]},{"specification":"This operation deletes a specific image attachment from a post. It operates on the community_platform_post_images table, which manages relations between posts and their associated uploaded image files. Upon deletion, the referenced post image entry is removed, detaching the image file from the post's image gallery. Only authenticated members who are the original post authors or have sufficient privileges (such as moderators or admins) are allowed to delete an image. The image file's existence in the storage system is not guaranteed to be affected unless business logic enforces file garbage collection. The endpoint requires both the postId (to identify the parent post) and the imageId (to specify the image attachment to be deleted), both as UUIDs. If the image belongs to the post and the requester is authorized, the link will be permanently deleted from the database, and the image will no longer appear in the post view. The operation does not soft-delete unless an explicit deleted_at field is present, but in this table there is no such field, so the delete is hard/physical.","path":"/communityPlatform/member/posts/{postId}/images/{imageId}","method":"delete","summary":"Delete an image attachment from a post (community_platform_post_images table).","description":"This API operation allows the deletion of a specific image from a post, implemented on the community_platform_post_images table. Each post image attachment is referenced by imageId and is tied to a parent post via postId. The operation requires the user to be authenticated as the post owner, moderator of the respective community, or an admin.\n\nThe endpoint enforces permission checks so that unauthorized attempts are rejected. Deletion is a hard delete (no soft delete field in the post images schema), which means the attachment is permanently removed from the database and the post's image gallery. However, the underlying image file in community_platform_file_uploads remains unless business or file management logic triggers cleanup. If the image does not belong to the specified post, or the post or image does not exist, the API returns an appropriate not-found error.\n\nThis operation is typically used in post editing workflows or moderation, permitting users to manage or clean up their image attachments. Admin and moderator roles can use the same operation in the context of moderation or content management. Error handling includes validation of ownership, existence of IDs, and rejection of attempts by unauthorized or unauthenticated users. Deletion actions should be logged for audit if required by compliance policy.","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the target post. Identifies the parent post to which the image is attached.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier (UUID) of the post image attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before an image attachment can be deleted from it."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/images","method":"post"},"description":"The image attachment must exist for the specified post before it can be deleted."}]},{"specification":"This operation retrieves all hyperlink attachments related to a specified post, providing a paginated and filterable list of all external links associated with the post. It operates on the community_platform_post_links table and is used to fetch link details, such as the URL, preview title, description, and preview image, for a given post. Typical use cases include rendering all outbound links for a post, supporting moderation or preview workflows, and maintaining transparency over user-contributed links. The operation supports complex queries, sorting, and pagination for comprehensive link management. The postId is required as a path parameter and must follow the UUID format.","path":"/communityPlatform/posts/{postId}/links","method":"patch","summary":"Retrieve and search all links attached to a post (community_platform_post_links table).","description":"This API operation enables clients to retrieve, filter, and paginate the set of all hyperlinks attached to a specific post, using the community_platform_post_links table. The postId path parameter identifies the post whose associated links are to be queried. Each result provides detailed information including the original URL, optional preview title/description, and a preview image URI if available. This supports listing, moderation, and UI rendering of post-linked content.\n\nSecurity and permissions are enforced such that only users authorized to view the post (including guests for public posts and authenticated users for restricted posts) can access the attached link references. The operation is intended for use in post detail views, moderation dashboards, or user content management screens.\n\nSupports rich query/body parameters for advanced filtering, like partial URL search, link status, or pagination controls appropriate to the volume of attached links. Returned responses are paginated and reflect only links attached to the specified post. Error handling covers not-found scenarios and access violations. Related operations include link creation and deletion. The endpoint is for retrieval only; modification or deletion of links are handled by other endpoints.","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the target post. Links for this post will be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body containing filtering, sorting, and pagination parameters for retrieving post links. Examples include partial URL matches, link status, page number, or page size.","typeName":"ICommunityPlatformPostLink.IRequest"},"responseBody":{"description":"Paginated list of links attached to the post, each entry detailing the URL, preview information, and metadata. Results are paginated and may include summary and total count information.","typeName":"IPageICommunityPlatformPostLink"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must be created before its attached links can be retrieved or searched."}]},{"specification":"Retrieve a specific link associated with a post using the postId and linkId. This operation is based on the community_platform_post_links table, which stores external hyperlinks attached to link-type posts. The endpoint allows users to fetch the details and preview metadata of a particular link belonging to a post, such as the target URL, preview title, and preview image. This is essential for displaying preview cards or external content context within post details or link galleries. The operation enforces permissions and validates that both postId and linkId exist and are associated. The response includes all properties from the community_platform_post_links schema, ensuring accurate preview extraction. Edge cases such as non-existent links or mismatched ownership between post and link return appropriate errors.","description":"This API operation allows clients to fetch detailed information about a single external link that has been associated with a specific post. The information includes the link's URL, optional preview metadata, and its relationship to the post, leveraging the fields defined in the community_platform_post_links schema. Access control is enforced to restrict read access according to the visibility of the post and its parent community—public posts and communities can be viewed by any user, while private or restricted posts require that the requester have access rights.\n\nThe operation checks that the supplied postId represents an existing post, and the linkId references a valid link record that is associated with that post. Requests where the link is not attached to the given post, or where the post is not accessible, result in a clear error response. Security measures ensure that information about links in unpublished or deleted posts is never revealed to unauthorized users.\n\nThis endpoint is closely related to the post retrieval endpoints, and its correct functioning may require integration or pre-checks with post detail APIs (such as \"GET /posts/{postId}\"). It plays an important role in rendering link previews and ensuring a smooth user experience for content involving external links. All fields returned correspond to the community_platform_post_links schema. Error handling includes not-found errors for missing links or posts and permission errors if the link's post or its parent community is not accessible to the requester.","summary":"Retrieve an individual link attached to a specific post from community_platform_post_links.","parameters":[{"name":"postId","description":"Unique identifier of the parent post to which the link is attached","schema":{"type":"string","format":"uuid"}},{"name":"linkId","description":"Unique identifier of the target link attached to this post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full details of a post link, including URL, preview information, and its association with the post.","typeName":"ICommunityPlatformPostLink"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/posts/{postId}/links/{linkId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before links attached to it can be retrieved. The postId required by this operation must exist for link retrieval to succeed."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/links","method":"post"},"description":"The post link must be created and associated with the post before it can be retrieved via this operation. The linkId required here must reference an existing link record attached to the given post."}]},{"specification":"Create a new link associated with a given post. This operation creates an entry in the community_platform_post_links table, which records external hyperlink information for link-type posts. This is essential when users wish to add a reference, resource, or external article to enrich a post. The API validates the parent post's existence, confirms proper permissions (such as creator or editor rights), and ensures the link URL is well-formed and policy-compliant (e.g., not a banned or malicious site). On successful creation, the details of the new link entry, including any preview or extracted metadata, are returned. Error handling covers validation failures, post not found, or policy violations.","description":"This operation enables authenticated users to attach a new external hyperlink to an existing post. The endpoint accepts full link information, including the target URL and optional preview metadata, in the request body structured according to the ICommunityPlatformPostLink.ICreate DTO. The parent postId must reference a valid post in the system, and only eligible users (typically the post author or editors) are permitted to add links.\n\nThe link details are validated per business and technical policies—URLs must conform to allowed formats, and policies may block certain domains for safety reasons. If the post does not exist or is not editable, the operation returns a clear error. On successful creation, it inserts a new row into community_platform_post_links, relating the link to the parent post and enabling rendering of link preview cards within the post interface.\n\nThis operation works in conjunction with post creation/edit workflows and is reflected in post detail views as well as the list of attached links. All validation rules concerning URLs, preview metadata, and post ownership are enforced. Errors include forbidden, not-found, and validation-type issues.","summary":"Attach a new link to an existing post via community_platform_post_links.","parameters":[{"name":"postId","description":"Unique identifier of the post to which the new link will be attached","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New link information to be attached to the specified post","typeName":"ICommunityPlatformPostLink.ICreate"},"responseBody":{"description":"Full details of the newly created post link, including URL and preview information.","typeName":"ICommunityPlatformPostLink"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityPlatform/member/posts/{postId}/links","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The parent post must exist before a link can be created and attached to it. The postId required by this operation must reference an existing post."}]},{"specification":"This operation updates a specific external link attached to a post in the community platform. The operation targets the community_platform_post_links table, which maintains metadata for links associated with posts. The update allows modification of link attributes such as the URL, preview title, description, or image preview, enabling users to correct, enhance, or replace link details. This endpoint is critical for user-driven content curation, allowing for editorial refinement post-creation, in compliance with business rules (e.g., only post authors or authorized editors may edit). Validation rules ensure the URL is well-formed and not blacklisted, and that updates comply with platform and community-specific guidelines. All changes are subject to moderation review if triggered by a report or flagged for suspicious editing activity. Errors are returned on invalid, duplicate, or prohibited changes.\n\nThe postId and linkId path parameters precisely identify the parent post and the specific link object to update. Only the original post creator or authorized moderators are permitted to use this operation. When invoked, the system validates ownership, applies the update, and logs the action for audit. Related endpoints include creation (POST) and retrieval (GET) of post links. The operation respects moderation queue and can trigger additional review if policy demands.","description":"This API operation facilitates the update of an existing link attached to a specific post. It operates on the community_platform_post_links schema which saves external link metadata for posts in the community platform.\n\nWhen a user invokes this endpoint, the system authenticates the user as the post creator or a moderator for the relevant community. The payload allows changes to the URL, preview title, preview description, or preview image URI. The updated data must pass URL validity checks and be verified against blacklists, spam, or prohibited content policies defined at the community or platform level.\n\nIf a community or global moderation rule marks the link for review (due to flagging or high edit frequency), the post will be queued for moderator review. All updates are logged in the audit trail. The operation is related to endpoints that create new links (POST) and fetch post details or comment threads (GET). Errors are thrown for invalid input, lack of permission, or prohibited changes.\n\nSecurity is enforced by requiring user authentication and ownership/moderator checks. An audit of all edit operations ensures compliance, and any suspicious activity may trigger additional review.","summary":"Update an existing external link attached to a post in community_platform_post_links.","parameters":[{"name":"postId","description":"Unique identifier of the parent post to which the link is attached.","schema":{"type":"string","format":"uuid"}},{"name":"linkId","description":"Unique identifier of the link to be updated (targeting post_links row).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New link data and preview metadata to update the post link.","typeName":"ICommunityPlatformPostLink.IUpdate"},"responseBody":{"description":"The updated post link information after modifications are applied.","typeName":"ICommunityPlatformPostLink"},"authorizationRole":"member","authorizationType":null,"name":"update","path":"/communityPlatform/member/posts/{postId}/links/{linkId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The parent post must exist before a link can be attached or updated."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/links","method":"post"},"description":"The post link must be created before it can be updated."}]},{"specification":"This operation permanently removes a specific external link attached to a post in the community platform. It affects the community_platform_post_links table, which manages external link metadata for user-generated posts. By specifying the postId and linkId, the operation targets the correct post-link relationship for deletion. The endpoint enables post authors or authorized moderators to remove irrelevant or outdated links, enforcing platform quality and relevance standards.","description":"Use this API operation to delete an existing external link from a specific post. The community_platform_post_links table will be affected, with the targeted link record identified by the linkId for the given post. The owner of the post or a moderator assigned to the parent community may perform this deletion. The system ensures that only users with proper authorization may invoke this endpoint, checking content owner or moderator privileges on the specified post.\n\nUpon deletion, the link reference is removed, and the post's associated metadata is updated as needed. No soft-deletion field exists in this table for the link, so the operation results in hard deletion from the database. Audit logging is performed for compliance. This operation is directly related to link creation (POST) and link updating (PUT). If any business or moderation rules are violated (e.g., attempt to delete a required or protected link), a specific error is returned.\n\nError scenarios include unauthorized caller, non-existent link or post, and constraint violations (such as required links per post type). Edge case handling ensures that the deletion cannot break referential integrity for the parent post.","summary":"Permanently delete a post link (community_platform_post_links) for a given post and link ID.","parameters":[{"name":"postId","description":"Unique identifier of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"linkId","description":"Unique identifier of the post link to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","path":"/communityPlatform/member/posts/{postId}/links/{linkId}","method":"delete","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The parent post must exist before a link can be managed or deleted."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/links","method":"post"},"description":"The post link must be created before it can be deleted."}]},{"specification":"This operation retrieves a paginated, threaded list of comments for a specific post. Operating on the 'community_platform_comments' Prisma table, it supports nested replies and provides advanced filtering, sorting, and pagination. The system adheres to the business requirements for maximum nesting depth and rate limits. The listing can be filtered to show comments up to a specific depth, sort by date, score, or controversial ranking, and supports searching for content. Intended for powering the comment section under a post, it returns a hierarchy or paginated flat list of comments as appropriate for the UI.","path":"/communityPlatform/posts/{postId}/comments","method":"patch","description":"Retrieve a filtered and paginated list of comments for a given post from the community_platform_comments table. The operation supports advanced filtering such as nesting level (thread depth), member, or timeframe; sorting by recency, score, controversial, or custom ranking. It processes rapid or bot-driven queries according to business rate limits.\n\nThe operation ensures thread constraints: it displays children up to the configured maximum nesting. Security and permissions are enforced per community and user ban status; only published and not-moderated-removed comments are returned. Members can use this operation to browse replies, search content, or load additional comments on demand.\n\nPagination options and sorting order are handled through the request body parameters, while the response provides a paginated/structured list optimized for direct UI rendering.","summary":"Search, sort, and retrieve a paginated/nested list of comments for a specific post from community_platform_comments.","parameters":[{"name":"postId","description":"Target post's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, search, pagination, and sort options for this post's comment retrieval.","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated and (optionally) threaded comment list for the post, including summary information or full comment structure as required.","typeName":"IPageICommunityPlatformComment.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before its comments can be retrieved, because every comment references a post and comment retrieval makes sense only for an existing post."}]},{"specification":"This operation retrieves the details of an individual comment for a specific post from the 'community_platform_comments' table. It is designed to return the full comment body, author, creation timestamp, moderation status, and reply context (parent/child info). Implements business rules for nested comments, edit windows, moderation visibility, and membership-based viewing restrictions. It is used to show the detailed content of a comment, possibly as part of a thread or in isolation.","path":"/communityPlatform/posts/{postId}/comments/{commentId}","method":"get","description":"Fetch the full details of a single comment belonging to a particular post using the community_platform_comments table. The commentId parameter uniquely identifies the comment, ensuring only published, viewable comments are retrievable by this operation.\n\nAuthorization and comment visibility checks are applied according to the viewer's role, as well as post and community status (e.g., banned, deleted, hidden threads). Moderation audit logs and edit history are not included but may be accessed separately as per business and privacy rules. All standard edge cases—soft deleted, moderated-removed, or non-public comments—are handled with appropriate error responses or visibility restrictions.","summary":"Retrieve the details of a specific comment on a post from community_platform_comments.","parameters":[{"name":"postId","description":"Target post's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier for the comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for the specified comment, including body, author, timestamps, and thread info.","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before retrieving a comment belonging to it, as every comment is associated with a specific post and cannot exist independently."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before it can be retrieved. This operation creates a comment that is looked up by the GET endpoint."}]},{"specification":"This operation allows a verified member to add a new comment to a specific post. It interacts with the community_platform_comments Prisma table, which stores all user-created comments attached to posts, supporting threaded/nested discussions. The comment must specify a valid postId and may include a parent comment for a reply, supporting proper nesting as enforced by business rules (max depth, etc.). This endpoint enforces input validation, community access, membership/ban status, and rate limits aligned with community participation logic. Upon validation, the comment is added and initial statuses (e.g., published or queue for moderation) are handled as per community moderation settings. The response returns full details of the created comment, including nesting info and all relational metadata necessary for front-end rendering.","path":"/communityPlatform/member/posts/{postId}/comments","method":"post","summary":"Create a new comment on a specific post (community_platform_comments)","description":"This endpoint enables authenticated and verified members to submit a new comment on a post. It references the community_platform_comments Prisma model, capturing details such as the comment body, author (member), post association, optional parent comment for replies, nesting level, and moderation/publication status.\n\nInput validation occurs to enforce maximum comment length, non-empty bodies, reply depth restrictions, and content rules (including banned words, formatting, and moderation policies) as described in the Prisma schema and business requirements. Additionally, posting frequency and member/community ban state are checked. Attempting to comment beyond allowed nesting levels or while under restriction yields an appropriate error.\n\nWhen invoked, the system will link the comment to its parent post (and optionally to another comment for threading), ensure it is properly nested, set moderation and status flags (e.g., published, mod_queued), and record creation timestamps. The response will return the complete comment object as recorded in the database, ready for rendering or client confirmation.\n\nFrontend clients should display any server-supplied error messages indicating validation, permission, or moderation issues. Related endpoints provide update, delete, and retrieval actions for comments and their threads.","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the post to which the comment will be attached.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new comment as a reply to a post or to an existing comment.","typeName":"ICommunityPlatformComment.ICreate"},"responseBody":{"description":"Detailed information about the created comment, including association to the post, author, nesting level, and status.","typeName":"ICommunityPlatformComment"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before a comment can be added to it"}]},{"specification":"This operation updates an existing comment on a specified post, for actions such as editing the comment body. It references the community_platform_comments Prisma table, which records all user comments and edit histories. Only the original comment author (member) or a moderator/admin with sufficient privileges may update a comment. The update API enforces business rules on time window for editing, moderation, body length/content, and audit history tracking. The request must identify both the parent post and the specific comment. The response returns the updated comment details, including new moderation status if review is triggered.","path":"/communityPlatform/member/posts/{postId}/comments/{commentId}","method":"put","summary":"Update an existing comment in a post (community_platform_comments)","description":"This endpoint allows a verified member (original author) or an authorized moderator/admin to update a comment attached to a specific post. It acts on the community_platform_comments Prisma model, supporting comment text edits, moderation status changes, and historical edit tracking via related tables.\n\nBusiness logic enforces required validation: edited bodies must be within allowed length, pass forbidden/banned word filters, and not exceed permitted depth. If outside the author-editing time window, only moderators/admins may edit the comment, and all edits are logged for audit purposes (see comment edit history model). Unauthorized edit attempts are rejected with a clear error.\n\nThe request path requires both the unique postId and the target commentId. The request body contains the updated text content. Response returns the modified comment with all relevant status and metadata, such as timestamps, author, and moderation state. Associated endpoints are available for deleting or retrieving threaded comments in the same context.","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the post containing the comment to update.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier (UUID) of the comment to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated comment body and applicable fields for comment edit (as allowed by business rules and permission model).","typeName":"ICommunityPlatformComment.IUpdate"},"responseBody":{"description":"Detailed information about the updated comment, reflecting all applied changes, moderation state, and new timestamps.","typeName":"ICommunityPlatformComment"},"authorizationRoles":["member"],"name":"update","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before a comment can be updated"},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"Comment must be created before it can be updated"}]},{"specification":"This operation permanently removes a comment from a specific post. It targets the community_platform_comments table from the Prisma schema, using both the postId to identify the parent post and the commentId to identify the specific comment. The operation implements hard deletion, since a soft delete field (deleted_at) is present, but DELETE semantics in the API should reflect immediate user-initiated deletion. Only the comment's author, moderators of the community, or admins can perform this operation. It checks for ownership or proper permissions before execution, and ensures that all nested replies, associated votes, and related content are handled according to business logic (either deleted or marked as orphaned, as per application policy). Related audit logging must be performed as described in business rules. This API is a key part of user self-management, moderation enforcement, and content hygiene workflows.","description":"This DELETE operation enables end-users (authors), community moderators, or admins to delete individual comments within a post. According to the Prisma schema, each comment is identified by 'id' and may be nested (using parent_id). Comments include a soft delete field, allowing the comment to be marked as deleted rather than physically removed, supporting both user privacy and retention/audit requirements.\n\nAuthorization checks ensure that only the author, a community moderator (as identified via moderator assignments), or a platform admin may perform the deletion. The API must verify the acting user's role and permissions before marking the comment as deleted. Soft deletion is performed by setting the 'deleted_at' timestamp, hiding the comment from normal views, and optionally displaying a placeholder if policy requires.\n\nIf the deleted comment is a parent in a threaded discussion, application logic must determine whether to recursively mark all child comments as deleted or to orphan/reparent them at the nearest allowed level, according to platform business logic. This action triggers audit logging, as required for traceability and policy compliance. Deletion cascades to associated votes and reports per business rules.\n\nError conditions include attempts by unauthorized users, conflicts with moderation policies (e.g., trying to delete an already-removed comment), and deletion of non-existent comments. Related safeguards ensure proper notification and fallback.\n\nRelated operations include comment creation (POST), editing (PUT), and moderation workflows for comment enforcement.","summary":"Permanently remove (soft delete) a comment from a post, restricted to author, moderators, or admins as per permissions (community_platform_comments).","parameters":[{"name":"postId","description":"Unique identifier of the parent post containing the comment targeted for deletion.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to be deleted within the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","path":"/communityPlatform/member/posts/{postId}/comments/{commentId}","method":"delete","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The parent post must exist before its comments can be created or deleted."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before it can be deleted."}]},{"specification":"This operation permanently removes a comment from a specific post. It targets the community_platform_comments table from the Prisma schema, using both the postId to identify the parent post and the commentId to identify the specific comment. The operation implements hard deletion, since a soft delete field (deleted_at) is present, but DELETE semantics in the API should reflect immediate user-initiated deletion. Only the comment's author, moderators of the community, or admins can perform this operation. It checks for ownership or proper permissions before execution, and ensures that all nested replies, associated votes, and related content are handled according to business logic (either deleted or marked as orphaned, as per application policy). Related audit logging must be performed as described in business rules. This API is a key part of user self-management, moderation enforcement, and content hygiene workflows.","description":"This DELETE operation enables end-users (authors), community moderators, or admins to delete individual comments within a post. According to the Prisma schema, each comment is identified by 'id' and may be nested (using parent_id). Comments include a soft delete field, allowing the comment to be marked as deleted rather than physically removed, supporting both user privacy and retention/audit requirements.\n\nAuthorization checks ensure that only the author, a community moderator (as identified via moderator assignments), or a platform admin may perform the deletion. The API must verify the acting user's role and permissions before marking the comment as deleted. Soft deletion is performed by setting the 'deleted_at' timestamp, hiding the comment from normal views, and optionally displaying a placeholder if policy requires.\n\nIf the deleted comment is a parent in a threaded discussion, application logic must determine whether to recursively mark all child comments as deleted or to orphan/reparent them at the nearest allowed level, according to platform business logic. This action triggers audit logging, as required for traceability and policy compliance. Deletion cascades to associated votes and reports per business rules.\n\nError conditions include attempts by unauthorized users, conflicts with moderation policies (e.g., trying to delete an already-removed comment), and deletion of non-existent comments. Related safeguards ensure proper notification and fallback.\n\nRelated operations include comment creation (POST), editing (PUT), and moderation workflows for comment enforcement.","summary":"Permanently remove (soft delete) a comment from a post, restricted to author, moderators, or admins as per permissions (community_platform_comments).","parameters":[{"name":"postId","description":"Unique identifier of the parent post containing the comment targeted for deletion.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to be deleted within the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","path":"/communityPlatform/moderator/posts/{postId}/comments/{commentId}","method":"delete","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The parent post must exist before its comments can be created or deleted."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before it can be deleted."}]},{"specification":"This operation permanently removes a comment from a specific post. It targets the community_platform_comments table from the Prisma schema, using both the postId to identify the parent post and the commentId to identify the specific comment. The operation implements hard deletion, since a soft delete field (deleted_at) is present, but DELETE semantics in the API should reflect immediate user-initiated deletion. Only the comment's author, moderators of the community, or admins can perform this operation. It checks for ownership or proper permissions before execution, and ensures that all nested replies, associated votes, and related content are handled according to business logic (either deleted or marked as orphaned, as per application policy). Related audit logging must be performed as described in business rules. This API is a key part of user self-management, moderation enforcement, and content hygiene workflows.","description":"This DELETE operation enables end-users (authors), community moderators, or admins to delete individual comments within a post. According to the Prisma schema, each comment is identified by 'id' and may be nested (using parent_id). Comments include a soft delete field, allowing the comment to be marked as deleted rather than physically removed, supporting both user privacy and retention/audit requirements.\n\nAuthorization checks ensure that only the author, a community moderator (as identified via moderator assignments), or a platform admin may perform the deletion. The API must verify the acting user's role and permissions before marking the comment as deleted. Soft deletion is performed by setting the 'deleted_at' timestamp, hiding the comment from normal views, and optionally displaying a placeholder if policy requires.\n\nIf the deleted comment is a parent in a threaded discussion, application logic must determine whether to recursively mark all child comments as deleted or to orphan/reparent them at the nearest allowed level, according to platform business logic. This action triggers audit logging, as required for traceability and policy compliance. Deletion cascades to associated votes and reports per business rules.\n\nError conditions include attempts by unauthorized users, conflicts with moderation policies (e.g., trying to delete an already-removed comment), and deletion of non-existent comments. Related safeguards ensure proper notification and fallback.\n\nRelated operations include comment creation (POST), editing (PUT), and moderation workflows for comment enforcement.","summary":"Permanently remove (soft delete) a comment from a post, restricted to author, moderators, or admins as per permissions (community_platform_comments).","parameters":[{"name":"postId","description":"Unique identifier of the parent post containing the comment targeted for deletion.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to be deleted within the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","path":"/communityPlatform/admin/posts/{postId}/comments/{commentId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Parent post must exist before a comment can be deleted from it."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"Comment must exist before it can be deleted from the post."}]},{"specification":"This operation retrieves a paginated, filterable list of all community subscriptions for the current user. It targets the community_platform_subscriptions table in the Prisma schema, providing advanced query capabilities by accepting a search and filter request body. The result is a paginated collection of subscription objects showing which communities the user is currently subscribed to, relevant timestamps, and possible enrichment data for each community. The API supports searching by community name, subscription status (active/unsubscribed), creation date, and allows sorting by most recent, alphabetical, or custom business logic. This operation is essential for users managing their personal feeds, reviewing their interests, and for supporting interface elements like user dashboards or settings screens. Authorization ensures that only authenticated users can access their own subscription data.","description":"This PATCH operation allows an authenticated user to search and retrieve their list of community subscriptions with optional filters and ordering. According to the Prisma schema, the community_platform_subscriptions table tracks subscriptions via member_id and community_id, with fields for creation and deletion timestamps (soft delete). The request body accepts filter criteria such as active/inactive subscriptions, specific community IDs/names, and pagination parameters (page size, cursor, etc.).\n\nThe operation runs in the context of the authenticated user ('member' role) and only exposes their own subscription data. It supports sorting by community name, creation date, or other business-relevant keys. The response is a paginated structure listing the user's subscriptions, each including fields like subscription id, community info, created_at, and deleted_at (if unsubscribed).\n\nSecurity considerations ensure no exposure of other users' subscriptions or sensitive internal data. Additional business logic enforces maximum subscription count (as per business rules) and integrates with community status checks (e.g., handling banned or deleted communities). Error handling covers invalid filters, out-of-bounds pagination, and unauthorized access.\n\nRelated endpoints include community subscribe/unsubscribe POST/DELETE routes, and user profile summary APIs displaying subscription lists.","summary":"List and search a member's current and historical community subscriptions with advanced filtering and pagination (community_platform_subscriptions).","parameters":[],"requestBody":{"description":"Filter, search, sort, and pagination request for community subscriptions.","typeName":"ICommunityPlatformSubscription.IRequest"},"responseBody":{"description":"Paginated summary list of the member's community subscriptions matching filter criteria.","typeName":"IPageICommunityPlatformSubscription"},"authorizationRoles":["member"],"name":"index","path":"/communityPlatform/member/subscriptions","method":"patch","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Target community must exist before a member can have a subscription to it."}]},{"specification":"This operation retrieves the details of a user’s subscription to a specific community on the platform, using the community_platform_subscriptions table. It fetches information such as subscribed member ID, targeted community ID, creation date, and the deletion timestamp (if unsubscribed), allowing the user or system to confirm subscription status and metadata regarding the particular subscription record. This endpoint should be used when a client needs to view the status or details of an individual community subscription for the given subscription ID.","path":"/communityPlatform/member/subscriptions/{subscriptionId}","method":"get","summary":"Retrieve details for a specific community subscription by subscription ID in the community_platform_subscriptions table.","description":"Fetch the full details of a user's subscription to a particular community, given the subscription's unique identifier. The operation references the community_platform_subscriptions table, which links members to communities and tracks subscription status, timestamps, and soft deletion for unsubscribing.\n\nThis API can be used by authenticated users to confirm their active subscription, see when it was created, and check whether it is still active or has been deleted (unsubscribed). It returns the member ID, community ID, creation time, and deleted_at timestamp if relevant. Permission checks should ensure only the member or authorized administrators can access this subscription record.\n\nError handling includes returning a not-found error if the subscription does not exist or permission denied if an unauthorized user attempts access. Related operations include listing all subscriptions for a member or subscribing/unsubscribing to a community.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified community subscription, including member, community, creation date, and soft-deletion timestamp if unsubscribed.","typeName":"ICommunityPlatformSubscription"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"A subscription record must exist before its details can be retrieved by subscription ID."}]},{"specification":"This operation creates a new subscription record in the community_platform_subscriptions table, representing a user's request to subscribe to a specific community. It validates the user’s ability to subscribe, ensures the user is not currently banned from the target community, checks against subscription limits, and records the creation timestamp. Upon success, the operation returns the full subscription record as confirmation. This is a primary entry point for users to add a community to their personalized feed and participate in its discussions.","path":"/communityPlatform/member/subscriptions","method":"post","summary":"Subscribe the authenticated user to a community, creating a new subscription record in community_platform_subscriptions.","description":"Allows an authenticated user to subscribe to a specified community by creating a new subscription entry in the community_platform_subscriptions table. The operation enforces all business rules for subscriptions, including verifying user identity, confirming the community is valid and active, ensuring the user is not banned from the community, and confirming the user has not exceeded the maximum allowed number of subscriptions.\n\nUpon successful creation, the response includes the subscription ID, member ID, community ID, and timestamps. Requests must include the community ID to subscribe to. Only members with sufficient permissions can create new subscriptions; attempts to subscribe to banned or nonexistent communities, or when over quota, should result in appropriate error responses. Related operations include listing a member’s subscriptions and unsubscribing from a community.","parameters":[],"requestBody":{"description":"Data required to create a new community subscription, specifically the target community_id (and any additional attributes as dictated by business rules).","typeName":"ICommunityPlatformSubscription.ICreate"},"responseBody":{"description":"The newly created community subscription record, indicating the user is now subscribed to the specified community.","typeName":"ICommunityPlatformSubscription"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The target community must exist before a user can create a subscription to it."}]},{"specification":"This operation updates an existing subscription record for a member to a community within the community_platform_subscriptions table. It allows the member to modify their subscription preferences or status, such as updating notification settings or reactivating a previously unsubscribed status. Only the owner of the subscription (the member) or admins are permitted to perform this operation. The operation enforces business rules for subscription ownership, community accessibility, and validates that the subscription exists. It is used for managing personalized feed preferences and ensuring compliance with maximum community subscription quotas.","path":"/communityPlatform/member/subscriptions/{subscriptionId}","method":"put","summary":"Update a specific community subscription record (community_platform_subscriptions)","description":"This endpoint allows an authenticated member or an administrator to update their subscription details to a specific community, identified by the subscriptionId path parameter. The operation refers to the community_platform_subscriptions table and supports modifications such as reactivating a subscription or updating subscription-related settings.\n\nOnly the member who owns the subscription, or an admin, is allowed to update these records. Attempts by unauthorized users are rejected with explicit error messages. Business logic verifies that the target subscription exists, that the member is not banned from the community, and that the requested changes comply with platform policy (e.g., subscription limit).\n\nAll updates are logged for audit purposes. The request body must include any fields allowed for update, such as activation status or preferences, following the schema for ICommunityPlatformSubscription.IUpdate. Response returns the full updated subscription record as defined by ICommunityPlatformSubscription.\n\nRelated endpoints include subscribing (POST /subscriptions), deleting/unsubscribing (DELETE /subscriptions/{subscriptionId}), and listing current subscriptions for the member.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the member's subscription record","typeName":"ICommunityPlatformSubscription.IUpdate"},"responseBody":{"description":"The updated subscription information after changes are applied","typeName":"ICommunityPlatformSubscription"},"authorizationRole":"member","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"A subscription must exist before it can be updated. Use this operation to create the subscription record for the member and community before performing an update."}]},{"specification":"This operation updates an existing subscription record for a member to a community within the community_platform_subscriptions table. It allows the member to modify their subscription preferences or status, such as updating notification settings or reactivating a previously unsubscribed status. Only the owner of the subscription (the member) or admins are permitted to perform this operation. The operation enforces business rules for subscription ownership, community accessibility, and validates that the subscription exists. It is used for managing personalized feed preferences and ensuring compliance with maximum community subscription quotas.","path":"/communityPlatform/admin/subscriptions/{subscriptionId}","method":"put","summary":"Update a specific community subscription record (community_platform_subscriptions)","description":"This endpoint allows an authenticated member or an administrator to update their subscription details to a specific community, identified by the subscriptionId path parameter. The operation refers to the community_platform_subscriptions table and supports modifications such as reactivating a subscription or updating subscription-related settings.\n\nOnly the member who owns the subscription, or an admin, is allowed to update these records. Attempts by unauthorized users are rejected with explicit error messages. Business logic verifies that the target subscription exists, that the member is not banned from the community, and that the requested changes comply with platform policy (e.g., subscription limit).\n\nAll updates are logged for audit purposes. The request body must include any fields allowed for update, such as activation status or preferences, following the schema for ICommunityPlatformSubscription.IUpdate. Response returns the full updated subscription record as defined by ICommunityPlatformSubscription.\n\nRelated endpoints include subscribing (POST /subscriptions), deleting/unsubscribing (DELETE /subscriptions/{subscriptionId}), and listing current subscriptions for the member.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the member's subscription record","typeName":"ICommunityPlatformSubscription.IUpdate"},"responseBody":{"description":"The updated subscription information after changes are applied","typeName":"ICommunityPlatformSubscription"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"A subscription must exist before it can be updated. Use this operation to create the subscription record for the member and community before performing an update."}]},{"specification":"This operation removes (unsubscribes) an existing subscription record for a member to a specific community from the community_platform_subscriptions table. It is a soft deletion, marking the subscription as deleted rather than physically removing the record. Only the member owning the subscription or an admin can perform this action. This prevents members from receiving feed updates, notifications, or other subscription-based services for that community. The operation validates ownership, ensures the subscription exists and is active, and logs all unsubscribe actions for audit and analytics purposes.","path":"/communityPlatform/member/subscriptions/{subscriptionId}","method":"delete","summary":"Unsubscribe (soft delete) a member's community subscription (community_platform_subscriptions)","description":"This endpoint allows an authenticated member to unsubscribe from a community by performing a soft delete on an existing subscription record, specified by subscriptionId. The operation interacts with the community_platform_subscriptions table and updates the deleted_at field rather than removing the record, preserving historical and audit data.\n\nAccess is restricted to the subscription owner or platform admins; unauthorized attempts are blocked with a clear error response. Business logic ensures the subscription exists, is active, and that the member is not prevented from unsubscribing (e.g., due to a business restriction).\n\nThe request does not require a body and there is no response body on success. All unsubscribe events are logged and may impact personalized feeds, notifications, and analytics for both the user and the community. This endpoint is related to subscription creation (POST /subscriptions), updating (PUT /subscriptions/{subscriptionId}), and viewing current subscriptions.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to delete (unsubscribe)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"Subscription must exist before it can be unsubscribed (soft deleted) by the member."}]},{"specification":"This operation removes (unsubscribes) an existing subscription record for a member to a specific community from the community_platform_subscriptions table. It is a soft deletion, marking the subscription as deleted rather than physically removing the record. Only the member owning the subscription or an admin can perform this action. This prevents members from receiving feed updates, notifications, or other subscription-based services for that community. The operation validates ownership, ensures the subscription exists and is active, and logs all unsubscribe actions for audit and analytics purposes.","path":"/communityPlatform/admin/subscriptions/{subscriptionId}","method":"delete","summary":"Unsubscribe (soft delete) a member's community subscription (community_platform_subscriptions)","description":"This endpoint allows an authenticated member to unsubscribe from a community by performing a soft delete on an existing subscription record, specified by subscriptionId. The operation interacts with the community_platform_subscriptions table and updates the deleted_at field rather than removing the record, preserving historical and audit data.\n\nAccess is restricted to the subscription owner or platform admins; unauthorized attempts are blocked with a clear error response. Business logic ensures the subscription exists, is active, and that the member is not prevented from unsubscribing (e.g., due to a business restriction).\n\nThe request does not require a body and there is no response body on success. All unsubscribe events are logged and may impact personalized feeds, notifications, and analytics for both the user and the community. This endpoint is related to subscription creation (POST /subscriptions), updating (PUT /subscriptions/{subscriptionId}), and viewing current subscriptions.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to delete (unsubscribe)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"Subscription must exist before it can be unsubscribed (soft deleted) by the admin."}]},{"specification":"This operation retrieves a paginated and searchable list of subscription event logs for a specific community platform subscription. It operates on the community_platform_subscription_logs table, filtering logs related to the provided subscriptionId, and supports searching by log attributes such as event_type, event_at, and related metadata details. The operation can be used to audit, analyze, or review a member's subscription/unsubscription activities for audit, compliance, or user account review purposes.","description":"Retrieve a paginated, filtered list of all subscription log events associated with a particular subscription. This operation targets the community_platform_subscription_logs table, leveraging the subscriptionId (which is the parent community_platform_subscriptions primary key) to find all event records (subscribe, unsubscribe, etc.) linked to that subscription.\n\nThe result enables detailed monitoring of a member's subscription/unsubscription behavior within a specific community, supporting sorting and search across timestamps, event_type, and metadata fields. Useful for audit trails, investigating quota enforcement, or providing a user's historical record of subscription interactions.\n\nPermission checks are performed so only the subscription owner, platform admins, or moderators with necessary privileges can access this data. Output is paginated for performance and security. Clients should use appropriate query and pagination parameters as defined in the request DTO, supporting flexible querying and review for moderation or support scenarios.\n\nRelated operations include retrieving the details of individual log events or fetching the list of subscriptions. This operation is critical for auditing and user account transparency.","summary":"Search and retrieve paginated subscription log events for a specific subscription (community_platform_subscription_logs).","parameters":[{"name":"subscriptionId","description":"Unique identifier (UUID) of the community_platform_subscriptions record for which to retrieve log events.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body containing search, filter, and pagination criteria for subscription log event retrieval.","typeName":"ICommunityPlatformSubscriptionLog.IRequest"},"responseBody":{"description":"Paginated, filtered list of community_platform_subscription_logs event records related to the specified subscription with relevant summary data.","typeName":"IPageICommunityPlatformSubscriptionLog.ISummary"},"authorizationType":null,"authorizationRole":"member","path":"/communityPlatform/member/subscriptions/{subscriptionId}/logs","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"A community platform subscription must exist before any subscription log events can be queried for it."}]},{"specification":"This operation retrieves a paginated and searchable list of subscription event logs for a specific community platform subscription. It operates on the community_platform_subscription_logs table, filtering logs related to the provided subscriptionId, and supports searching by log attributes such as event_type, event_at, and related metadata details. The operation can be used to audit, analyze, or review a member's subscription/unsubscription activities for audit, compliance, or user account review purposes.","description":"Retrieve a paginated, filtered list of all subscription log events associated with a particular subscription. This operation targets the community_platform_subscription_logs table, leveraging the subscriptionId (which is the parent community_platform_subscriptions primary key) to find all event records (subscribe, unsubscribe, etc.) linked to that subscription.\n\nThe result enables detailed monitoring of a member's subscription/unsubscription behavior within a specific community, supporting sorting and search across timestamps, event_type, and metadata fields. Useful for audit trails, investigating quota enforcement, or providing a user's historical record of subscription interactions.\n\nPermission checks are performed so only the subscription owner, platform admins, or moderators with necessary privileges can access this data. Output is paginated for performance and security. Clients should use appropriate query and pagination parameters as defined in the request DTO, supporting flexible querying and review for moderation or support scenarios.\n\nRelated operations include retrieving the details of individual log events or fetching the list of subscriptions. This operation is critical for auditing and user account transparency.","summary":"Search and retrieve paginated subscription log events for a specific subscription (community_platform_subscription_logs).","parameters":[{"name":"subscriptionId","description":"Unique identifier (UUID) of the community_platform_subscriptions record for which to retrieve log events.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body containing search, filter, and pagination criteria for subscription log event retrieval.","typeName":"ICommunityPlatformSubscriptionLog.IRequest"},"responseBody":{"description":"Paginated, filtered list of community_platform_subscription_logs event records related to the specified subscription with relevant summary data.","typeName":"IPageICommunityPlatformSubscriptionLog.ISummary"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityPlatform/moderator/subscriptions/{subscriptionId}/logs","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"A community platform subscription must exist before any subscription log events can be queried for it."}]},{"specification":"This operation retrieves a paginated and searchable list of subscription event logs for a specific community platform subscription. It operates on the community_platform_subscription_logs table, filtering logs related to the provided subscriptionId, and supports searching by log attributes such as event_type, event_at, and related metadata details. The operation can be used to audit, analyze, or review a member's subscription/unsubscription activities for audit, compliance, or user account review purposes.","description":"Retrieve a paginated, filtered list of all subscription log events associated with a particular subscription. This operation targets the community_platform_subscription_logs table, leveraging the subscriptionId (which is the parent community_platform_subscriptions primary key) to find all event records (subscribe, unsubscribe, etc.) linked to that subscription.\n\nThe result enables detailed monitoring of a member's subscription/unsubscription behavior within a specific community, supporting sorting and search across timestamps, event_type, and metadata fields. Useful for audit trails, investigating quota enforcement, or providing a user's historical record of subscription interactions.\n\nPermission checks are performed so only the subscription owner, platform admins, or moderators with necessary privileges can access this data. Output is paginated for performance and security. Clients should use appropriate query and pagination parameters as defined in the request DTO, supporting flexible querying and review for moderation or support scenarios.\n\nRelated operations include retrieving the details of individual log events or fetching the list of subscriptions. This operation is critical for auditing and user account transparency.","summary":"Search and retrieve paginated subscription log events for a specific subscription (community_platform_subscription_logs).","parameters":[{"name":"subscriptionId","description":"Unique identifier (UUID) of the community_platform_subscriptions record for which to retrieve log events.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body containing search, filter, and pagination criteria for subscription log event retrieval.","typeName":"ICommunityPlatformSubscriptionLog.IRequest"},"responseBody":{"description":"Paginated, filtered list of community_platform_subscription_logs event records related to the specified subscription with relevant summary data.","typeName":"IPageICommunityPlatformSubscriptionLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/communityPlatform/admin/subscriptions/{subscriptionId}/logs","method":"patch","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"The subscription must exist before retrieving or searching its log events. Creating a subscription generates a subscriptionId, which is required to query the log events for a specific subscription."}]},{"specification":"This operation retrieves the detailed information for a specific subscription log event, identified by its logId, and scoped to a particular subscription. It operates on the community_platform_subscription_logs table, joining on both subscriptionId and logId to enforce access control and result precision. The operation is essential for audit, moderation, or support when individual event log details are required.","description":"Get the full details of a particular subscription log event tied to a parent subscription. This fetches all columns from the community_platform_subscription_logs table for a specific logId, enforcing linkage to the given subscriptionId for context and permission validation.\n\nThis enables use cases such as reviewing the exact timestamp, event type (subscribe/unsubscribe), and metadata related to an individual subscription action. Security and access checks ensure that only authorized roles—the subscription owner, relevant moderators, or platform admins—can access the log details.\n\nIf no event log matching both subscriptionId and logId is found, or if the user is unauthorized, an appropriate error is returned. Useful for support staff, admins, or users verifying their history. This operation is highly granular and links closely to broader subscription management and log list operations for consistency and traceability.","summary":"Get details of a specific subscription log event by logId for a given subscription (community_platform_subscription_logs).","parameters":[{"name":"subscriptionId","description":"Unique identifier (UUID) of the parent community_platform_subscriptions record containing this log event.","schema":{"type":"string","format":"uuid"}},{"name":"logId","description":"Unique identifier (UUID) of the specific community_platform_subscription_logs event record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the targeted community_platform_subscription_logs event related to the specified subscription and logId.","typeName":"ICommunityPlatformSubscriptionLog"},"authorizationType":null,"authorizationRole":"member","path":"/communityPlatform/member/subscriptions/{subscriptionId}/logs/{logId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"The subscription must exist before any log event can be retrieved for that subscription. The action of creating a subscription generates the subscriptionId required for subsequent log retrieval."}]},{"specification":"This operation retrieves the detailed information for a specific subscription log event, identified by its logId, and scoped to a particular subscription. It operates on the community_platform_subscription_logs table, joining on both subscriptionId and logId to enforce access control and result precision. The operation is essential for audit, moderation, or support when individual event log details are required.","description":"Get the full details of a particular subscription log event tied to a parent subscription. This fetches all columns from the community_platform_subscription_logs table for a specific logId, enforcing linkage to the given subscriptionId for context and permission validation.\n\nThis enables use cases such as reviewing the exact timestamp, event type (subscribe/unsubscribe), and metadata related to an individual subscription action. Security and access checks ensure that only authorized roles—the subscription owner, relevant moderators, or platform admins—can access the log details.\n\nIf no event log matching both subscriptionId and logId is found, or if the user is unauthorized, an appropriate error is returned. Useful for support staff, admins, or users verifying their history. This operation is highly granular and links closely to broader subscription management and log list operations for consistency and traceability.","summary":"Get details of a specific subscription log event by logId for a given subscription (community_platform_subscription_logs).","parameters":[{"name":"subscriptionId","description":"Unique identifier (UUID) of the parent community_platform_subscriptions record containing this log event.","schema":{"type":"string","format":"uuid"}},{"name":"logId","description":"Unique identifier (UUID) of the specific community_platform_subscription_logs event record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the targeted community_platform_subscription_logs event related to the specified subscription and logId.","typeName":"ICommunityPlatformSubscriptionLog"},"authorizationType":null,"authorizationRole":"moderator","path":"/communityPlatform/moderator/subscriptions/{subscriptionId}/logs/{logId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"A subscription must exist before its log event can be retrieved, because the log is associated with a specific subscription."}]},{"specification":"This operation retrieves the detailed information for a specific subscription log event, identified by its logId, and scoped to a particular subscription. It operates on the community_platform_subscription_logs table, joining on both subscriptionId and logId to enforce access control and result precision. The operation is essential for audit, moderation, or support when individual event log details are required.","description":"Get the full details of a particular subscription log event tied to a parent subscription. This fetches all columns from the community_platform_subscription_logs table for a specific logId, enforcing linkage to the given subscriptionId for context and permission validation.\n\nThis enables use cases such as reviewing the exact timestamp, event type (subscribe/unsubscribe), and metadata related to an individual subscription action. Security and access checks ensure that only authorized roles—the subscription owner, relevant moderators, or platform admins—can access the log details.\n\nIf no event log matching both subscriptionId and logId is found, or if the user is unauthorized, an appropriate error is returned. Useful for support staff, admins, or users verifying their history. This operation is highly granular and links closely to broader subscription management and log list operations for consistency and traceability.","summary":"Get details of a specific subscription log event by logId for a given subscription (community_platform_subscription_logs).","parameters":[{"name":"subscriptionId","description":"Unique identifier (UUID) of the parent community_platform_subscriptions record containing this log event.","schema":{"type":"string","format":"uuid"}},{"name":"logId","description":"Unique identifier (UUID) of the specific community_platform_subscription_logs event record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the targeted community_platform_subscription_logs event related to the specified subscription and logId.","typeName":"ICommunityPlatformSubscriptionLog"},"authorizationType":null,"authorizationRole":"admin","path":"/communityPlatform/admin/subscriptions/{subscriptionId}/logs/{logId}","method":"get","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"A subscription must exist before its log event can be retrieved, because the log is associated with a specific subscription."}]},{"specification":"This operation retrieves a paginated list of vote records for a specific post, enabling users and moderators to audit all upvote and downvote actions associated with the given post. It operates on the community_platform_post_votes table from the Prisma schema. This endpoint supports review of all voting transactions for moderation, transparency, and statistical analysis, including who voted, their direction (up or down), status, and timestamps. The operation adheres to platform-wide requirements for tracing voting activity, supporting various use cases including fraud detection, moderation review, and vote tally calculations.","description":"This API operation lets a caller retrieve all voting records applied to a single post, designated by the post's unique identifier. It provides the full transaction history for upvotes and downvotes, referencing the fields from community_platform_post_votes such as vote_value, created_at, updated_at, deleted_at, and the associated user ID.\n\nAccess control for this endpoint typically restricts listing votes to moderators (for auditing) or to the post owner for self-view; in some regulatory contexts, admin access may be required for full transparency. The Prisma schema ensures referential integrity, linking post IDs to members and making every vote traceable. Voting logs foster accountability, allowing detection of anomalous voting patterns or enforcing anti-abuse measures.\n\nReturned results are paginated and may include details such as voter ID (linked to community_platform_members), vote direction (+1 for upvote, -1 for downvote), creation and update timestamps, and soft deletion state for revoked votes. The response supports moderation UI, post audit logs, or advanced analytical dashboards. If the requested postId does not exist, is inaccessible, or if the user is unauthorized for viewing votes, the system will return appropriate error messages or an empty list.","summary":"Retrieve the paginated list of all votes cast on a specific post from the community_platform_post_votes table.","parameters":[{"name":"postId","description":"The unique identifier of the post for which votes will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for filtering, sorting, and paginating vote records for a specific post. Includes order, filters, and page specification.","typeName":"ICommunityPlatformPostVote.IRequest"},"responseBody":{"description":"Paginated list of all votes on the post, with voter information, direction, and timestamps. Includes metadata for total count and pagination controls.","typeName":"IPageICommunityPlatformPostVote"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/communityPlatform/moderator/posts/{postId}/votes","method":"patch","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"A post must exist before its votes can be retrieved; create a post to obtain the postId needed for vote listing."}]},{"specification":"This operation retrieves a paginated list of vote records for a specific post, enabling users and moderators to audit all upvote and downvote actions associated with the given post. It operates on the community_platform_post_votes table from the Prisma schema. This endpoint supports review of all voting transactions for moderation, transparency, and statistical analysis, including who voted, their direction (up or down), status, and timestamps. The operation adheres to platform-wide requirements for tracing voting activity, supporting various use cases including fraud detection, moderation review, and vote tally calculations.","description":"This API operation lets a caller retrieve all voting records applied to a single post, designated by the post's unique identifier. It provides the full transaction history for upvotes and downvotes, referencing the fields from community_platform_post_votes such as vote_value, created_at, updated_at, deleted_at, and the associated user ID.\n\nAccess control for this endpoint typically restricts listing votes to moderators (for auditing) or to the post owner for self-view; in some regulatory contexts, admin access may be required for full transparency. The Prisma schema ensures referential integrity, linking post IDs to members and making every vote traceable. Voting logs foster accountability, allowing detection of anomalous voting patterns or enforcing anti-abuse measures.\n\nReturned results are paginated and may include details such as voter ID (linked to community_platform_members), vote direction (+1 for upvote, -1 for downvote), creation and update timestamps, and soft deletion state for revoked votes. The response supports moderation UI, post audit logs, or advanced analytical dashboards. If the requested postId does not exist, is inaccessible, or if the user is unauthorized for viewing votes, the system will return appropriate error messages or an empty list.","summary":"Retrieve the paginated list of all votes cast on a specific post from the community_platform_post_votes table.","parameters":[{"name":"postId","description":"The unique identifier of the post for which votes will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for filtering, sorting, and paginating vote records for a specific post. Includes order, filters, and page specification.","typeName":"ICommunityPlatformPostVote.IRequest"},"responseBody":{"description":"Paginated list of all votes on the post, with voter information, direction, and timestamps. Includes metadata for total count and pagination controls.","typeName":"IPageICommunityPlatformPostVote"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/communityPlatform/admin/posts/{postId}/votes","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/posts","method":"post"},"description":"A post must exist before its votes can be retrieved; create a post to obtain the postId needed for vote listing."}]},{"specification":"This operation retrieves the detailed vote record for a single vote associated with a specific post, operating on the community_platform_post_votes table. The operation is intended for use cases where moderators, admins, or the vote owner require full visibility into a particular voting action, including its direction, status, timestamps, and the user who cast it.","description":"This endpoint allows callers to view detailed information for a single vote transaction on a post. The operation accepts both postId and voteId as path parameters, ensuring the vote belongs to the specified post. The response includes all key fields of a community_platform_post_votes record: vote_value (+1 or -1), referenced member ID, creation and update timestamps, and soft deletion state. This enables complete auditability and transparency into voting actions on posts.\n\nAuthorization for this endpoint is typically limited to moderators (for community audit), admins (for compliance), and the vote owner for personal review. The response readily supports moderation workflows, anti-abuse investigations, or member-facing UIs showing voting history. Error handling covers invalid IDs, non-existent records, or unauthorized access attempts, returning appropriate messages or status codes in such cases.\n\nThis operation leverages the full referential integrity of the voting records in the Prisma model and ties each vote record to both its post and casting member for fully traceable voting history.","summary":"Retrieve a single vote record for a post from the community_platform_post_votes table using postId and voteId.","parameters":[{"name":"postId","description":"The unique identifier of the post to which the vote belongs.","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"The unique identifier of the vote record for the target post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed representation of a single vote record, including direction, timestamps, voter information, and context for the specified post.","typeName":"ICommunityPlatformPostVote"},"authorizationRoles":["moderator","admin"],"name":"at","path":"/communityPlatform/moderator/posts/{postId}/votes/{voteId}","method":"get","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before its associated votes can be retrieved. Creating a post ensures there is a valid postId for accessing its votes."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/votes","method":"post"},"description":"A vote must exist on the post before it can be retrieved by its voteId. Creating a vote ensures there is a valid voteId for the retrieval operation."}]},{"specification":"This operation retrieves the detailed vote record for a single vote associated with a specific post, operating on the community_platform_post_votes table. The operation is intended for use cases where moderators, admins, or the vote owner require full visibility into a particular voting action, including its direction, status, timestamps, and the user who cast it.","description":"This endpoint allows callers to view detailed information for a single vote transaction on a post. The operation accepts both postId and voteId as path parameters, ensuring the vote belongs to the specified post. The response includes all key fields of a community_platform_post_votes record: vote_value (+1 or -1), referenced member ID, creation and update timestamps, and soft deletion state. This enables complete auditability and transparency into voting actions on posts.\n\nAuthorization for this endpoint is typically limited to moderators (for community audit), admins (for compliance), and the vote owner for personal review. The response readily supports moderation workflows, anti-abuse investigations, or member-facing UIs showing voting history. Error handling covers invalid IDs, non-existent records, or unauthorized access attempts, returning appropriate messages or status codes in such cases.\n\nThis operation leverages the full referential integrity of the voting records in the Prisma model and ties each vote record to both its post and casting member for fully traceable voting history.","summary":"Retrieve a single vote record for a post from the community_platform_post_votes table using postId and voteId.","parameters":[{"name":"postId","description":"The unique identifier of the post to which the vote belongs.","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"The unique identifier of the vote record for the target post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed representation of a single vote record, including direction, timestamps, voter information, and context for the specified post.","typeName":"ICommunityPlatformPostVote"},"authorizationRoles":["moderator","admin"],"name":"at","path":"/communityPlatform/admin/posts/{postId}/votes/{voteId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before its associated votes can be retrieved. Creating a post ensures there is a valid postId for accessing its votes."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/votes","method":"post"},"description":"A vote must exist on the post before it can be retrieved by its voteId. Creating a vote ensures there is a valid voteId for the retrieval operation."}]},{"specification":"This operation allows an authenticated user (member) to cast an upvote or downvote on a specific post. It is directly associated with the community_platform_post_votes table in the Prisma schema, which enforces that each member can only have one active vote (1 for upvote, -1 for downvote) per post. The operation requires the postId as a path parameter and expects the voting value and related info in the request body. The system will update post scores and the voter's karma instantly and record the voting action for auditing and abuse prevention, as specified in business requirements and schema definitions.","description":"This operation lets a logged-in member upvote or downvote a particular post identified by postId. The system enforces that the user can vote only once per post, automatically updating their previous vote if it exists and recalculating the post score and the user's karma accordingly.\n\nSecurity measures include rate limiting to prevent abuse, ensuring only authenticated members can vote, and rejecting votes from the content's author in accordance with platform rules. Additionally, the action is written to audit and voting logs for compliance and anti-abuse review. Error handling covers attempts by unauthorized users, duplicate or invalid votes, and self-voting scenarios, providing clear error messages in such cases.\n\nThe operation is tightly linked to the community_platform_post_votes table, storing postId, memberId, vote_value, and timestamps as described in schema comments. Companion operations include updating or revoking a vote and retrieving post vote summaries.","summary":"Cast an upvote or downvote on a post (community_platform_post_votes)","parameters":[{"name":"postId","description":"The unique identifier of the post to which the vote will be applied.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload specifying the vote value and additional metadata for the vote action.","typeName":"ICommunityPlatformPostVote.ICreate"},"responseBody":{"description":"The created vote record including its value, timestamps, and relation to the post and member.","typeName":"ICommunityPlatformPostVote"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityPlatform/member/posts/{postId}/votes","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before a vote can be cast for it"}]},{"specification":"This operation allows an authenticated user (member) to update or revoke their previous vote (upvote or downvote) on a specific post. The operation is based on the community_platform_post_votes table, which enforces a single active vote per member-post combination. Using both postId and voteId as path parameters, the user can change the vote value or remove their vote by passing a designated value (e.g., 0) in the request body. Business logic ensures only the original voter can update or revoke their own vote, and platform rules prohibit self-voting. All actions are logged for audit and anti-abuse analysis.","description":"The purpose of this operation is to let a logged-in member update or revoke their existing vote on a given post. Path parameters postId and voteId are required to identify the specific vote. Only the member who cast the original vote is allowed to perform this update, and attempts by others are denied.\n\nAuthorization ensures only members can update their votes, and role-based access is enforced strictly. The business rules prevent updating a vote on one's own content or making duplicate changes. On a successful request, the operation updates the voting record in the community_platform_post_votes table, adjust the post's score and user's karma, and records the action for compliance and auditing as described in the schema comments. Errors due to lack of permission, illegal updates, or voting on non-existent or deleted posts will be handled with clear, actionable messages.","summary":"Update or revoke a post vote (community_platform_post_votes)","parameters":[{"name":"postId","description":"The unique identifier of the post associated with the vote.","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"The unique identifier of the vote to be updated or revoked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload specifying the new vote value or an indication to revoke the vote.","typeName":"ICommunityPlatformPostVote.IUpdate"},"responseBody":{"description":"The updated vote record including its current value, timestamps, and post-member association.","typeName":"ICommunityPlatformPostVote"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityPlatform/member/posts/{postId}/votes/{voteId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must exist before a vote update or revocation can be performed"},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/votes","method":"post"},"description":"Vote must exist before it can be updated or revoked"}]},{"specification":"This operation permanently removes a vote (either upvote or downvote) from a specific post by a user. It is associated with the community_platform_post_votes table, responsible for enforcing one vote per user per post and tracking the current status of each vote. This operation must validate that the vote exists, that the requester is authorized to perform the deletion, and that the vote targeted matches the post and user relationship.\n\nSecurity checks require the authenticated requester to be the owner of the vote, or have moderator or admin roles with appropriate privileges in the target community. If moderation or admin authority is present, moderators or admins may also invoke this endpoint for moderation purposes (e.g., to correct abuse or enforce platform policies). The operation confirms that only active votes can be deleted and considers any soft-delete behavior defined in the schema. Hard delete is performed if no soft delete columns exist.\n\nIf the vote does not exist, is already deleted, or access is unauthorized, the operation returns an appropriate error. Associated business logic includes updating post scores, recalculating user karma, and adjusting relevant analytical or sorting indexes. For audit or regulatory compliance, all removal actions must be logged and linked to the relevant post, acting user, and target vote.","description":"This API endpoint enables users to remove their explicit upvote or downvote from a specific post. It is intended for situations where the user wishes to retract their previous voting action—such as changing their mind or correcting a mis-click.\n\nThe operation checks that the voteId belongs to a valid vote entry for the indicated postId and verifies the requesting user's authority. If the requester is not the original voter, but holds a moderator or admin role with the appropriate permissions within the target post's community (or at the platform level), deletion is allowed for moderation or abuse response.\n\nVotes are soft-deleted if the schema supports it (see community_platform_post_votes.deleted_at); otherwise, they are permanently removed from the database. Following deletion, the system will trigger recalculation of the associated post's score, update the karma for the voter, and audit-log the activity for review.\n\nErrors are returned in the following situations: the vote is not found, belongs to another user without escalation rights, or the vote is already deleted. Rate-limiting is enforced to prevent abuse, particularly by automated (bot) clients.\n\nRelated business functions include the POST and PATCH vote endpoints for casting or changing a vote, and analytics/sorting recalculation flows for post rankings and user karma.","summary":"Remove a specific user's vote from a given post (community_platform_post_votes)","parameters":[{"name":"postId","description":"Unique identifier of the post on which the vote was cast","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the vote entry to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"path":"/communityPlatform/member/posts/{postId}/votes/{voteId}","method":"delete","name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before its votes can be deleted. This creates the post associated with postId, which is required to validate and perform vote deletion."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/votes","method":"post"},"description":"The vote must exist before it can be deleted. This operation creates the actual vote associated with voteId for the given postId."}]},{"specification":"This operation permanently removes a vote (either upvote or downvote) from a specific post by a user. It is associated with the community_platform_post_votes table, responsible for enforcing one vote per user per post and tracking the current status of each vote. This operation must validate that the vote exists, that the requester is authorized to perform the deletion, and that the vote targeted matches the post and user relationship.\n\nSecurity checks require the authenticated requester to be the owner of the vote, or have moderator or admin roles with appropriate privileges in the target community. If moderation or admin authority is present, moderators or admins may also invoke this endpoint for moderation purposes (e.g., to correct abuse or enforce platform policies). The operation confirms that only active votes can be deleted and considers any soft-delete behavior defined in the schema. Hard delete is performed if no soft delete columns exist.\n\nIf the vote does not exist, is already deleted, or access is unauthorized, the operation returns an appropriate error. Associated business logic includes updating post scores, recalculating user karma, and adjusting relevant analytical or sorting indexes. For audit or regulatory compliance, all removal actions must be logged and linked to the relevant post, acting user, and target vote.","description":"This API endpoint enables users to remove their explicit upvote or downvote from a specific post. It is intended for situations where the user wishes to retract their previous voting action—such as changing their mind or correcting a mis-click.\n\nThe operation checks that the voteId belongs to a valid vote entry for the indicated postId and verifies the requesting user's authority. If the requester is not the original voter, but holds a moderator or admin role with the appropriate permissions within the target post's community (or at the platform level), deletion is allowed for moderation or abuse response.\n\nVotes are soft-deleted if the schema supports it (see community_platform_post_votes.deleted_at); otherwise, they are permanently removed from the database. Following deletion, the system will trigger recalculation of the associated post's score, update the karma for the voter, and audit-log the activity for review.\n\nErrors are returned in the following situations: the vote is not found, belongs to another user without escalation rights, or the vote is already deleted. Rate-limiting is enforced to prevent abuse, particularly by automated (bot) clients.\n\nRelated business functions include the POST and PATCH vote endpoints for casting or changing a vote, and analytics/sorting recalculation flows for post rankings and user karma.","summary":"Remove a specific user's vote from a given post (community_platform_post_votes)","parameters":[{"name":"postId","description":"Unique identifier of the post on which the vote was cast","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the vote entry to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"path":"/communityPlatform/moderator/posts/{postId}/votes/{voteId}","method":"delete","name":"erase","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must exist before its votes can be deleted, as deletion is tied to the post context. This creates the post for postId."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/votes","method":"post"},"description":"The vote must exist before it can be deleted. This operation creates the vote for the given postId and voteId."}]},{"specification":"This operation permanently removes a vote (either upvote or downvote) from a specific post by a user. It is associated with the community_platform_post_votes table, responsible for enforcing one vote per user per post and tracking the current status of each vote. This operation must validate that the vote exists, that the requester is authorized to perform the deletion, and that the vote targeted matches the post and user relationship.\n\nSecurity checks require the authenticated requester to be the owner of the vote, or have moderator or admin roles with appropriate privileges in the target community. If moderation or admin authority is present, moderators or admins may also invoke this endpoint for moderation purposes (e.g., to correct abuse or enforce platform policies). The operation confirms that only active votes can be deleted and considers any soft-delete behavior defined in the schema. Hard delete is performed if no soft delete columns exist.\n\nIf the vote does not exist, is already deleted, or access is unauthorized, the operation returns an appropriate error. Associated business logic includes updating post scores, recalculating user karma, and adjusting relevant analytical or sorting indexes. For audit or regulatory compliance, all removal actions must be logged and linked to the relevant post, acting user, and target vote.","description":"This API endpoint enables users to remove their explicit upvote or downvote from a specific post. It is intended for situations where the user wishes to retract their previous voting action—such as changing their mind or correcting a mis-click.\n\nThe operation checks that the voteId belongs to a valid vote entry for the indicated postId and verifies the requesting user's authority. If the requester is not the original voter, but holds a moderator or admin role with the appropriate permissions within the target post's community (or at the platform level), deletion is allowed for moderation or abuse response.\n\nVotes are soft-deleted if the schema supports it (see community_platform_post_votes.deleted_at); otherwise, they are permanently removed from the database. Following deletion, the system will trigger recalculation of the associated post's score, update the karma for the voter, and audit-log the activity for review.\n\nErrors are returned in the following situations: the vote is not found, belongs to another user without escalation rights, or the vote is already deleted. Rate-limiting is enforced to prevent abuse, particularly by automated (bot) clients.\n\nRelated business functions include the POST and PATCH vote endpoints for casting or changing a vote, and analytics/sorting recalculation flows for post rankings and user karma.","summary":"Remove a specific user's vote from a given post (community_platform_post_votes)","parameters":[{"name":"postId","description":"Unique identifier of the post on which the vote was cast","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the vote entry to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"path":"/communityPlatform/admin/posts/{postId}/votes/{voteId}","method":"delete","name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/posts","method":"post"},"description":"The post must exist before its votes can be managed or removed."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/votes","method":"post"},"description":"A post vote must be created before it can be deleted."}]},{"specification":"This operation retrieves a filtered and paginated list of all votes (upvotes or downvotes) on a specific comment, supporting advanced search and analytic queries based on the community_platform_comment_votes table. It is used for moderation review, vote audits, or analysis of engagement patterns. This operation supports querying by vote type, voter identity, date range, and sorting, as defined in the request DTO.\n\nFor privacy and security, only users with authorized roles (moderators for the comment's community, admins) are permitted access to these detailed vote logs. The operation returns summary data for each vote, and may mask or restrict user identity fields depending on role.\n\nPagination, sorting, and filtering parameters follow platform-wide patterns. Use cases include identifying voting abuse, tracking comment engagement, and supporting transparency requirements for moderation actions.","description":"This API endpoint supports moderators and administrators in reviewing the full set of votes cast on a given comment. It is typically used for detailed analysis during moderation incident review, anti-abuse investigations, or transparency audits.\n\nThe operation receives a commentId to identify the comment of interest, then applies filters, search, and pagination according to the provided request body (such as by voter, vote type, or date). It responds with a paginated summary of vote logs, indicating upvotes, downvotes, voter identities (with user identity masking as required), and timestamps.\n\nSecurity checks restrict access to users with 'moderator' or 'admin' roles for the relevant comment's community, preventing abuse or unauthorized data exposure. Results are sorted and paginated per request parameters and platform conventions.","summary":"Search and retrieve votes on a comment for moderation or audit (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose votes are to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, search, and pagination criteria for retrieving votes on a comment","typeName":"ICommunityPlatformCommentVote.IRequest"},"responseBody":{"description":"Paginated summary of votes on the specified comment matching the search criteria","typeName":"IPageICommunityPlatformCommentVote.ISummary"},"authorizationRoles":["moderator","admin"],"path":"/communityPlatform/moderator/comments/{commentId}/votes","method":"patch","name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before its votes can be retrieved or searched."},{"endpoint":{"path":"/communityPlatform/member/comments/{commentId}/votes","method":"post"},"description":"Votes on the comment must exist before performing a retrieval or search operation."}]},{"specification":"This operation retrieves a filtered and paginated list of all votes (upvotes or downvotes) on a specific comment, supporting advanced search and analytic queries based on the community_platform_comment_votes table. It is used for moderation review, vote audits, or analysis of engagement patterns. This operation supports querying by vote type, voter identity, date range, and sorting, as defined in the request DTO.\n\nFor privacy and security, only users with authorized roles (moderators for the comment's community, admins) are permitted access to these detailed vote logs. The operation returns summary data for each vote, and may mask or restrict user identity fields depending on role.\n\nPagination, sorting, and filtering parameters follow platform-wide patterns. Use cases include identifying voting abuse, tracking comment engagement, and supporting transparency requirements for moderation actions.","description":"This API endpoint supports moderators and administrators in reviewing the full set of votes cast on a given comment. It is typically used for detailed analysis during moderation incident review, anti-abuse investigations, or transparency audits.\n\nThe operation receives a commentId to identify the comment of interest, then applies filters, search, and pagination according to the provided request body (such as by voter, vote type, or date). It responds with a paginated summary of vote logs, indicating upvotes, downvotes, voter identities (with user identity masking as required), and timestamps.\n\nSecurity checks restrict access to users with 'moderator' or 'admin' roles for the relevant comment's community, preventing abuse or unauthorized data exposure. Results are sorted and paginated per request parameters and platform conventions.","summary":"Search and retrieve votes on a comment for moderation or audit (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose votes are to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, search, and pagination criteria for retrieving votes on a comment","typeName":"ICommunityPlatformCommentVote.IRequest"},"responseBody":{"description":"Paginated summary of votes on the specified comment matching the search criteria","typeName":"IPageICommunityPlatformCommentVote.ISummary"},"authorizationRoles":["moderator","admin"],"path":"/communityPlatform/admin/comments/{commentId}/votes","method":"patch","name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before its votes can be retrieved for moderation or audit. Creating a comment on a post ensures a valid commentId and postId for the operation."}]},{"specification":"This operation retrieves detailed information for a specific vote on a comment, identified by both the commentId and voteId. It accesses the community_platform_comment_votes table in the Prisma schema, which links members' votes (either upvote or downvote) to individual comments. This operation is typically used when displaying vote specifics for audit or for profile-specific actions, including the time, voter identity (member), and vote value (+1 or -1). Only authorized administrative or moderation roles may query specific vote records for compliance or review; members do not browse others' voting actions for privacy reasons.","description":"Fetch full details of a single vote record tied to a comment, as stored in community_platform_comment_votes. This endpoint is reserved primarily for audit or moderation use, since regular users do not have access to view voting details of others due to privacy.\n\nSecurity for this operation is strict: only users with the 'admin' or 'moderator' role, and with scope covering the affiliated community, may request this data. Audit logging is strongly recommended for all queries via this endpoint.\n\nThis operation supports incident review, anti-abuse measures, and vote appeals workflows. Entry data is validated against the Prisma schema to ensure both IDs exist and match a unique vote. If the provided voteId does not match a record for the given commentId, a not found error is returned. This does not return revoked or soft-deleted votes unless specifically requested by additional query parameters.\n\nRelated operations: vote log retrieval, member voting history (for self-access), comment summary statistics, and comment moderation functions.","summary":"Retrieve a specific vote on a comment from community_platform_comment_votes.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment.","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the vote on the comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific vote on the comment, including voter, value, and timestamp.","typeName":"ICommunityPlatformCommentVote"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/communityPlatform/admin/comments/{commentId}/votes/{voteId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"The comment must exist before a vote on it can be accessed. Creating a comment ensures availability of the commentId for subsequent vote retrieval."},{"endpoint":{"path":"/communityPlatform/member/comments/{commentId}/votes","method":"post"},"description":"A specific vote must exist on the comment before it can be retrieved. Creating a vote on the comment provides the voteId required for this operation."}]},{"specification":"This operation retrieves detailed information for a specific vote on a comment, identified by both the commentId and voteId. It accesses the community_platform_comment_votes table in the Prisma schema, which links members' votes (either upvote or downvote) to individual comments. This operation is typically used when displaying vote specifics for audit or for profile-specific actions, including the time, voter identity (member), and vote value (+1 or -1). Only authorized administrative or moderation roles may query specific vote records for compliance or review; members do not browse others' voting actions for privacy reasons.","description":"Fetch full details of a single vote record tied to a comment, as stored in community_platform_comment_votes. This endpoint is reserved primarily for audit or moderation use, since regular users do not have access to view voting details of others due to privacy.\n\nSecurity for this operation is strict: only users with the 'admin' or 'moderator' role, and with scope covering the affiliated community, may request this data. Audit logging is strongly recommended for all queries via this endpoint.\n\nThis operation supports incident review, anti-abuse measures, and vote appeals workflows. Entry data is validated against the Prisma schema to ensure both IDs exist and match a unique vote. If the provided voteId does not match a record for the given commentId, a not found error is returned. This does not return revoked or soft-deleted votes unless specifically requested by additional query parameters.\n\nRelated operations: vote log retrieval, member voting history (for self-access), comment summary statistics, and comment moderation functions.","summary":"Retrieve a specific vote on a comment from community_platform_comment_votes.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment.","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the vote on the comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific vote on the comment, including voter, value, and timestamp.","typeName":"ICommunityPlatformCommentVote"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/communityPlatform/moderator/comments/{commentId}/votes/{voteId}","method":"get","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/comments/{commentId}/votes","method":"post"},"description":"A comment vote record must exist before you can retrieve its detailed information by voteId; creating a vote ensures the existence of both commentId and voteId for retrieval."}]},{"specification":"This operation records a new vote (upvote or downvote) on a comment by an authenticated member. It works with the community_platform_comment_votes Prisma table, ensuring one unique vote per member per comment. The recorded vote value must be either 1 (upvote) or -1 (downvote). The operation also updates comment scores, member karma, and may trigger rate limiting, anti-abuse checks, or moderation actions as required by business rules. Members may also revoke or change their vote through separate means.","description":"Create a new vote associated with a comment, ensuring idempotent one-member-one-vote rules according to the business logic of the voting system. The system checks if the member has an existing (active) vote and, if so, may update the value instead of creating duplicates depending on the application logic.\n\nVoting is an authenticated member-only action; guests or banned users are blocked at the controller/authorization layer. Request validation enforces that the vote value is strictly 1 or -1, and the commentId refers to a valid, not-deleted comment for which the member has permission to vote (not their own comment).\n\nAll votes are recorded in community_platform_comment_votes, with relevant auditing for anti-abuse monitoring. In case of quota violations, the operation returns detailed error responses. Successful voting updates mutable comment, user, and potentially community karma statistics; all actions are subject to further review in case of suspected abuse.","summary":"Record a member's upvote or downvote on a specific comment (community_platform_comment_votes).","parameters":[{"name":"commentId","description":"Unique identifier of the comment being voted on.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote submission information: value must be +1 (upvote) or -1 (downvote).","typeName":"ICommunityPlatformCommentVote.ICreate"},"responseBody":{"description":"The stored vote object, including the value, voter, and timestamps.","typeName":"ICommunityPlatformCommentVote"},"authorizationRoles":["member"],"name":"create","path":"/communityPlatform/member/comments/{commentId}/votes","method":"post","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"A comment must exist before a vote can be cast on it; creating the comment ensures the referenced commentId is valid for voting."}]},{"specification":"This operation updates an existing upvote or downvote on a specific comment by a member. It operates on the community_platform_comment_votes table. Each vote is uniquely defined by the combination of commentId and voteId, referencing a specific vote record. The update allows a member to change their vote value (from upvote to downvote or vice versa), which is used in calculating comment score and user karma.","description":"This endpoint lets an authenticated member update their previous vote on a specific comment. The operation references the community_platform_comment_votes table, where each vote entry is uniquely identified by both the commentId (the comment being voted on) and the voteId (the individual vote record).\n\nMembers can switch their vote from upvote to downvote or vice versa by providing new vote value details in the request body. All changes are timestamped and impact comment ranking and author karma, per business rules. Only the member who originally cast the vote can update it, and only if they are not voting on their own comment. Moderators and admins may override in edge cases, but typical usage is for self-initiated vote editing.\n\nValidation enforces one active vote per comment per member. Updating a vote automatically revises karma for the comment's author. The operation requires authentication (role: member) and will fail if the member tries to update someone else's vote, or if either the comment or vote does not exist or is no longer valid (e.g., deleted).","summary":"Update a member's upvote or downvote on a specific comment (community_platform_comment_votes table).","parameters":[{"name":"commentId","description":"Unique identifier of the comment being voted on.","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the vote record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New vote details for the comment (e.g., vote_value: 1 for upvote, -1 for downvote).","typeName":"ICommunityPlatformCommentVote.IUpdate"},"responseBody":{"description":"The updated comment vote entry, including new vote value and updated timestamp.","typeName":"ICommunityPlatformCommentVote"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityPlatform/member/comments/{commentId}/votes/{voteId}","method":"put","prerequisites":[]},{"specification":"This operation removes (soft deletes) a member's upvote or downvote from a specific comment. It operates on the community_platform_comment_votes table, where each vote record is explicitly tracked with a deleted_at field for soft deletion. The operation uses commentId and voteId to identify the vote entry, removes it from active scoring, and triggers recalculation of author/user karma and comment rank as per system rules.","description":"This endpoint allows an authenticated member to revoke (soft delete) their vote on a specific comment, effectively removing their previous upvote or downvote. The operation interacts with the community_platform_comment_votes table: each vote is uniquely identified by the commentId and voteId parameters. The record's deleted_at field is set to the current timestamp instead of being hard-deleted, preserving vote history for audit and compliance reasons.\n\nBy revoking the vote, the member's influence is removed from the comment's score and from karma calculations for the comment's author. This helps provide accurate, real-time ranking while maintaining transparent audit trails. Only the member who originally cast the vote may perform this action. The operation will fail if the vote does not exist, has already been deleted, or does not belong to the authenticated user. Moderators and admins may override in exceptional moderation scenarios, but this is a self-service action for regular use.\n\nSecurity is strictly enforced to prevent users from erasing other users' votes. The operation requires authentication via member role. Deletion triggers system recalculations of vote totals and karma. Errors or invalid attempts (e.g., removing a non-existent vote) yield clear, actionable messages in line with error handling standards.","summary":"Soft delete a member's vote on a comment (community_platform_comment_votes table).","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose vote is being revoked.","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the vote record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","path":"/communityPlatform/member/comments/{commentId}/votes/{voteId}","method":"delete","prerequisites":[]},{"specification":"This operation retrieves the latest cached controversial score for a specified post. It operates on the community_platform_controversial_scores table in the Voting namespace of the Prisma schema. The controversial score quantifies the degree to which a post exhibits a high level of both upvotes and downvotes with significant engagement, supporting sort orders like 'controversial'. The endpoint is accessed by specifying the postId, which must match the primary key of the target post. This score is pre-computed and optimized for UI sorting performance and not intended for direct editing; it is referenced by feed sort features and statistics modules.","path":"/communityPlatform/posts/{postId}/controversialScore","method":"get","summary":"Retrieve the cached controversial score for a specific post (community_platform_controversial_scores).","description":"This API endpoint allows clients to retrieve the current controversial score for a given post, identified by its unique postId. The controversial score is used in sorting posts according to controversy, calculated by analyzing the distribution of upvotes and downvotes, as well as engagement metrics. The result is drawn from the community_platform_controversial_scores table, which caches these values for fast access.\n\nSecurity is enforced so that only public or authorized community posts are retrievable; posts belonging to private or banned communities may not expose controversial scores depending on status. The controversial score is designed for consumption by end-user applications displaying post lists or analytics modules.\n\nThe underlying record is linked to the specified post via the postId path parameter. Validation ensures that postId is a valid UUID; if the post is not found or the score is unavailable, a clear error is returned. This endpoint is typically used in conjunction with post listing or post detail endpoints when clients need to sort or display information based on controversy.\n\nError handling includes not found (404) for missing posts or scores and permission denied (403) for restricted content.","parameters":[{"name":"postId","description":"Unique identifier of the post for which to retrieve the controversial score.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The controversial score record for the given post, including fields like controversial_score and score_updated_at.","typeName":"ICommunityPlatformControversialScore"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"A post must exist before its controversial score can be retrieved. Creating a post ensures there is a valid postId for which a controversial score can be calculated or fetched."}]},{"specification":"This operation retrieves the cached controversial score for a specified comment. It is based on the community_platform_controversial_scores table in the Voting namespace. Designed for consumption by UI features that need to rank or display comments by their level of controversy, the endpoint accepts commentId as a path parameter and returns the current controversial score linked to that comment. This score is pre-calculated by backend ranking algorithms based on upvotes, downvotes, and engagement volume.","path":"/communityPlatform/comments/{commentId}/controversialScore","method":"get","summary":"Retrieve the cached controversial score for a specific comment (community_platform_controversial_scores).","description":"This endpoint allows retrieval of the most recently computed controversial score for a comment, given its unique commentId. The controversial score is a metric indicating high engagement through polarized voting, supporting sort options such as 'controversial' in UI comment sections. Data is returned from the community_platform_controversial_scores table, optimized for fast lookup during comment listing or analytics operations.\n\nThe commentId parameter must reference a valid comment entity in the system (UUID). Only scores for visible, permitted comments are available; comments in banned, hidden, or private threads may have access restrictions. Clients use this API in conjunction with comment list or detail views when showing comments ranked by controversy.\n\nCommon error scenarios include not found (404) if the comment or its controversial score is missing, or forbidden (403) if the comment is not visible to the requester. The API safeguards against exposing scores for restricted or deleted content.","parameters":[{"name":"commentId","description":"Unique identifier of the comment for which to retrieve the controversial score.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The controversial score record for the given comment, including fields like controversial_score and score_updated_at.","typeName":"ICommunityPlatformControversialScore"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"A post must exist before creating a comment on it. Comments are always associated to a post."},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"A comment must exist before its controversial score can be retrieved. Creating a comment ensures there is a valid commentId for which a controversial score can be calculated or fetched."}]},{"specification":"Search voting logs with advanced filtering and pagination. This operation works on the community_platform_vote_logs table. It allows administrators and moderators to perform audit, anti-abuse investigation, and compliance review by querying votes (posts and comments) along with related metadata such as voter, content, timestamps, and action outcomes. Supports searching by user, vote type (upvote/downvote), affected content, status, IP/device info, and date ranges. Filtering by both post and comment context is possible. Designed for high-throughput moderation/audit use cases.","description":"This API is designed to retrieve a paginated and filterable list of voting activity logs as stored in the community_platform_vote_logs table. Voting logs include every upvote, downvote, vote revocation, along with associated member IDs, content IDs (post or comment), device/IP information, action status (success, duplicate, revoked, error), and timestamp of the action. \n\nAccess to this API is restricted to administrators and community moderators for anti-abuse investigation, trend analysis, and audit trail compliance. Unauthorized access should be strictly blocked. The response provides full context records, which may be joined with member/post/comment details for comprehensive moderation review. Usage of this endpoint is expected during routine compliance audits and whenever suspicious or rule-breaking voting behavior is reported or detected.\n\nFiltering options should include member ID, vote type (post/comment), action status, date/time windows, affected content, and optionally device/IP fields for forensics. Results are paginated for efficiency, supporting cursor or offset-based pagination as needed, with total record count included. This endpoint may be heavily rate-limited and carefully logged for regulatory/trust & safety reasons.","summary":"Search voting logs for auditing and moderation, based on community_platform_vote_logs.","parameters":[],"requestBody":{"description":"Search, filter, and pagination input for vote logs. Includes filters for member, content, vote type/value, action, and time window.","typeName":"ICommunityPlatformVoteLog.IRequest"},"responseBody":{"description":"Paginated voting logs and moderation/audit details matching search criteria.","typeName":"IPageICommunityPlatformVoteLog"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityPlatform/admin/voteLogs","method":"patch","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"A member file upload must exist if any voting log relates to uploaded images or files as part of post or comment content. File uploads are often referenced in community post or comment voting contexts, so the presence of file uploads is necessary for associated voting logs."}]},{"specification":"Search voting logs with advanced filtering and pagination. This operation works on the community_platform_vote_logs table. It allows administrators and moderators to perform audit, anti-abuse investigation, and compliance review by querying votes (posts and comments) along with related metadata such as voter, content, timestamps, and action outcomes. Supports searching by user, vote type (upvote/downvote), affected content, status, IP/device info, and date ranges. Filtering by both post and comment context is possible. Designed for high-throughput moderation/audit use cases.","description":"This API is designed to retrieve a paginated and filterable list of voting activity logs as stored in the community_platform_vote_logs table. Voting logs include every upvote, downvote, vote revocation, along with associated member IDs, content IDs (post or comment), device/IP information, action status (success, duplicate, revoked, error), and timestamp of the action. \n\nAccess to this API is restricted to administrators and community moderators for anti-abuse investigation, trend analysis, and audit trail compliance. Unauthorized access should be strictly blocked. The response provides full context records, which may be joined with member/post/comment details for comprehensive moderation review. Usage of this endpoint is expected during routine compliance audits and whenever suspicious or rule-breaking voting behavior is reported or detected.\n\nFiltering options should include member ID, vote type (post/comment), action status, date/time windows, affected content, and optionally device/IP fields for forensics. Results are paginated for efficiency, supporting cursor or offset-based pagination as needed, with total record count included. This endpoint may be heavily rate-limited and carefully logged for regulatory/trust & safety reasons.","summary":"Search voting logs for auditing and moderation, based on community_platform_vote_logs.","parameters":[],"requestBody":{"description":"Search, filter, and pagination input for vote logs. Includes filters for member, content, vote type/value, action, and time window.","typeName":"ICommunityPlatformVoteLog.IRequest"},"responseBody":{"description":"Paginated voting logs and moderation/audit details matching search criteria.","typeName":"IPageICommunityPlatformVoteLog"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/communityPlatform/moderator/voteLogs","method":"patch","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/fileUploads","method":"post"},"description":"A member file upload must exist if any voting log relates to uploaded images or files as part of post or comment content. File uploads are often referenced in community post or comment voting contexts, so the presence of file uploads is necessary for associated voting logs."}]},{"specification":"Retrieve a paginated and searchable list of user profiles for discovery, moderation, or user analytics purposes. This operation utilizes the community_platform_profiles table, providing both full and partial profile details for matching users, subject to privacy and access permissions. It supports searching by username, display name, status, creation date, public/private setting, or bio contents. Results can be filtered and ordered according to the querying user's role and organizational needs.","description":"This API operation retrieves a filtered and paginated collection of user profiles from the community_platform_profiles table, supporting discovery, moderation, and analytics scenarios. Profile records include basic details such as username, display name, avatar URI, public visibility flag, short status, bio, and related timestamps. \n\nModerators and admins can use this endpoint to search for suspicious or noteworthy accounts by text, time window, or status. Regular members may have restricted visibility (or none at all) depending on platform settings and their own authentication state; only public profiles are returned unless higher privileges are assigned. Sensitive user data such as email, history, or preferences are omitted or redacted for privacy. Filtering supports username, status, creation and update times, and text search within bios or display names. Sorting by creation, activity, or username is available to help discover new or trending users.\n\nPaginated results improve usability for large user bases. Typically, this endpoint would be called by admin dashboards, user search modules, or community moderation tools for managing and analyzing platform communities.","summary":"Search and retrieve paginated user profiles, based on community_platform_profiles.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination criteria for selecting user profiles. Supports username, status, and bio search.","typeName":"ICommunityPlatformProfile.IRequest"},"responseBody":{"description":"Paginated profile list with basic fields and privacy filtering, matching search filters.","typeName":"IPageICommunityPlatformProfile"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityPlatform/admin/profiles","method":"patch","prerequisites":[]},{"specification":"Retrieve a paginated and searchable list of user profiles for discovery, moderation, or user analytics purposes. This operation utilizes the community_platform_profiles table, providing both full and partial profile details for matching users, subject to privacy and access permissions. It supports searching by username, display name, status, creation date, public/private setting, or bio contents. Results can be filtered and ordered according to the querying user's role and organizational needs.","description":"This API operation retrieves a filtered and paginated collection of user profiles from the community_platform_profiles table, supporting discovery, moderation, and analytics scenarios. Profile records include basic details such as username, display name, avatar URI, public visibility flag, short status, bio, and related timestamps. \n\nModerators and admins can use this endpoint to search for suspicious or noteworthy accounts by text, time window, or status. Regular members may have restricted visibility (or none at all) depending on platform settings and their own authentication state; only public profiles are returned unless higher privileges are assigned. Sensitive user data such as email, history, or preferences are omitted or redacted for privacy. Filtering supports username, status, creation and update times, and text search within bios or display names. Sorting by creation, activity, or username is available to help discover new or trending users.\n\nPaginated results improve usability for large user bases. Typically, this endpoint would be called by admin dashboards, user search modules, or community moderation tools for managing and analyzing platform communities.","summary":"Search and retrieve paginated user profiles, based on community_platform_profiles.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination criteria for selecting user profiles. Supports username, status, and bio search.","typeName":"ICommunityPlatformProfile.IRequest"},"responseBody":{"description":"Paginated profile list with basic fields and privacy filtering, matching search filters.","typeName":"IPageICommunityPlatformProfile"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/communityPlatform/moderator/profiles","method":"patch","prerequisites":[]},{"specification":"This operation retrieves detailed profile information for a specific user profile on the platform. It operates on the community_platform_profiles table, which stores user profile metadata such as username, bio, avatar URI, display email (if user opts in), status message, and timestamps. The operation fetches all fields for the designated profileId, allowing clients to display public or self-profile data based on viewer permissions. Relationships from the Prisma schema ensure retrieval of the associated member, badges, preferences, and profile history as permitted by privacy settings.","description":"Fetches all profile metadata for the specified profileId from the community_platform_profiles table. This includes the public username (unique), biography (if set), avatar URI, display email (only if the user has opted-in), status message, and privacy flag determining if the profile is public or restricted. The response also includes profile creation and update timestamps, along with soft-deletion information if relevant for compliance.\n\nIf the requesting user is not permitted (e.g., if profile is private and requester has no access), the operation should return an appropriate authorization error or only anonymized/limited profile data, as dictated by privacy settings. The operation must comply with the privacy and status fields, returning hidden items only to profile owners or admins as appropriate.\n\nProfiles are linked one-to-one with members; related resources (badges, profile history, preferences) may be included or referenced on additional API calls to keep response payloads compact. Typical use: rendering profile pages for public browsing or member dashboard; should also support administrative or moderation profile review with extra information as allowed by role.","summary":"Retrieve detailed user profile data by profileId from community_platform_profiles.","parameters":[{"name":"profileId","description":"Unique identifier of the target profile to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed profile information matching the specified profileId.","typeName":"ICommunityPlatformProfile"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/profiles/{profileId}","method":"get","prerequisites":[]},{"specification":"This operation updates an existing user profile entry in the community_platform_profiles table, enabling members to change their publicly visible username, biography, avatar URI, display email, status message, or privacy flag (is_public). The operation supports profile edits by the owner and allows administrators or moderators with sufficient privileges to modify profile data for moderation or compliance reasons. It performs necessary validations such as username uniqueness, input length, and allowed field values based on business logic and privacy policies.","description":"Allows an authenticated user to modify their own profile information, including username (which must be unique and within allowed length constraints), biography/about text, avatar image URI, status message, and privacy setting (public or restricted). The request must pass all relevant validations, such as uniqueness checks for username, maximum lengths for bio/status, valid URI formats for avatar, and appropriate privacy option selection.\n\nIf an administrator or moderator calls this operation for a profile they do not own, the platform must ensure the caller has the correct role and logs the edit for audit and compliance as per requirements. If a member tries to edit a profile they do not own, the operation is rejected with an authorization error.\n\nIf any part of the input fails business logic validation (e.g., username already in use, bio too long), the operation must provide detailed error information in accordance with error-handling guidelines. On successful update, the operation returns the updated profile entity as defined by the Prisma schema.","summary":"Update an existing profile entry in community_platform_profiles by profileId.","parameters":[{"name":"profileId","description":"Unique identifier of the target profile to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New profile data (username, bio, avatar_uri, etc) to update for the specified profileId.","typeName":"ICommunityPlatformProfile.IUpdate"},"responseBody":{"description":"The updated profile entity after modification.","typeName":"ICommunityPlatformProfile"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/communityPlatform/member/profiles/{profileId}","method":"put","prerequisites":[]},{"specification":"This operation permanently removes a user profile from the community platform. The operation targets the community_platform_profiles table, ensuring that the profile and its related data are deleted from the platform. Profile deletion is restricted to the profile owner or an administrator and must adhere to audit and compliance requirements. Related information in other tables, such as posts, comments, and badges, may be retained or removed according to platform policy. Soft deletion is supported via the deleted_at field in the schema.","path":"/communityPlatform/member/profiles/{profileId}","method":"delete","summary":"Delete a user profile by profile ID in the community_platform_profiles table.","description":"This operation allows for the permanent removal of a user profile from the platform based on the specified profileId. Deletion can only be performed by the profile owner or an administrator, enforcing strict permissions as outlined in the business requirements. The profile is soft-deleted, moving its record to an inactive state by setting the deleted_at timestamp. Data relationships with posts, comments, and badges are maintained for audit purposes, even after profile deletion, per compliance policies.\n\nSecurity concerns require that profile deletions are logged, with notification provided to the affected user. Any attempt to delete a profile without the correct authorization is blocked and logged for potential review. Error handling includes responding to invalid or non-existent profile IDs, and preventing deletion if the profile is already marked as deleted.\n\nThis operation is closely related to account closure and privacy flows. It is important to ensure that all GDPR or similar compliance requirements are enforced, including data retention, right to erasure, and audit logging.","parameters":[{"name":"profileId","description":"The unique identifier of the profile to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"Assign a new badge to a user profile before being able to delete the profile, to test dependency scenarios."}]},{"specification":"This operation permanently removes a user profile from the community platform. The operation targets the community_platform_profiles table, ensuring that the profile and its related data are deleted from the platform. Profile deletion is restricted to the profile owner or an administrator and must adhere to audit and compliance requirements. Related information in other tables, such as posts, comments, and badges, may be retained or removed according to platform policy. Soft deletion is supported via the deleted_at field in the schema.","path":"/communityPlatform/admin/profiles/{profileId}","method":"delete","summary":"Delete a user profile by profile ID in the community_platform_profiles table.","description":"This operation allows for the permanent removal of a user profile from the platform based on the specified profileId. Deletion can only be performed by the profile owner or an administrator, enforcing strict permissions as outlined in the business requirements. The profile is soft-deleted, moving its record to an inactive state by setting the deleted_at timestamp. Data relationships with posts, comments, and badges are maintained for audit purposes, even after profile deletion, per compliance policies.\n\nSecurity concerns require that profile deletions are logged, with notification provided to the affected user. Any attempt to delete a profile without the correct authorization is blocked and logged for potential review. Error handling includes responding to invalid or non-existent profile IDs, and preventing deletion if the profile is already marked as deleted.\n\nThis operation is closely related to account closure and privacy flows. It is important to ensure that all GDPR or similar compliance requirements are enforced, including data retention, right to erasure, and audit logging.","parameters":[{"name":"profileId","description":"The unique identifier of the profile to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"Assign a new badge to a user profile before being able to delete the profile, to test dependency scenarios."}]},{"specification":"This operation retrieves a paginated list of badges associated with a specific user profile. It is based on the community_platform_profile_badges table, providing summary information on all badges earned by the user. The operation is essential for supporting user profile displays and community recognition features. Supports searching, filtering, and pagination based on business rules.","path":"/communityPlatform/profiles/{profileId}/badges","method":"patch","summary":"Search and retrieve paginated badge summaries for a user profile in community_platform_profile_badges.","description":"This operation returns a filtered and paginated list of badges that belong to a user profile, corresponding to the profileId provided in the path. It acts upon the community_platform_profile_badges table, exposing badge types, names, and status for display on the user’s profile.\n\nThe endpoint supports advanced search features, including filtering by badge type, issuance status, or time period, and allows for pagination and sorting based on creation or issuance timestamps. Only public data is returned according to the requesting user's permission. Access is controlled, and retrieving another user's badge list may be subject to profile privacy and settings.\n\nThis operation integrates with platform profile and badge award flows, linking to the relevant user’s achievements and reward history. It avoids exposing sensitive badge reasons or private award notes unless the viewer is the profile owner or an admin. Error handling includes blocked access for profiles that are private or when the viewer lacks permissions.","parameters":[{"name":"profileId","description":"The unique identifier of the user profile whose badges are being fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination criteria for badge retrieval on user profiles.","typeName":"ICommunityPlatformProfileBadge.IRequest"},"responseBody":{"description":"Paginated list of badge summary information linked to the specified profile.","typeName":"IPageICommunityPlatformProfileBadge.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"Profile badge must exist before it can be listed or filtered for the user profile (a badge assignment is needed to appear in this collection)."}]},{"specification":"This operation retrieves detailed information about a specific badge that has been assigned to a user's profile. It operates on the community_platform_profile_badges table, which records badges granted to users for achievements or status display. The system ensures badgeId and profileId both uniquely identify the target badge within a user profile context, returning all presentable fields, status, and metadata including badge type, name, issue and revocation status, issuer, and links to potential karma awards. This is essential for user profile display, for showing badge collections on public or internal user pages, and supports compliance with business logic regarding badge display and privacy as stored in the profile schema.","description":"This endpoint provides a detailed view of a specific badge associated with a user profile. The badge is linked through the community_platform_profile_badges table, which stores references to user achievements or rewards. When the client calls this API with a valid profileId and badgeId, the service looks up the badge, validates ownership against the target profile, and returns all metadata fields including badge_type, badge_name, issued_at, revocation information (if present), and any linked karma award reference.\n\nAccess to badge details is typically unrestricted for public profiles, but may require additional privacy or role checks if the user profile is marked as private (is_public = false) in the community_platform_profiles table. Proper error handling must be implemented if the badge is not found, is not assigned to the specified profile, or access is restricted by privacy policy. This endpoint is intended for profile and reputation displays, and may also be used by moderation/admin views for badge management functions.\n\nOwnership and relationship between profile and badge are enforced by unique constraints in the schema. Proper schema-level and business rule validation are mandatory for accurate, compliant data retrieval.","summary":"Retrieve details of a specific badge assigned to a user profile (community_platform_profile_badges).","parameters":[{"name":"profileId","description":"Unique identifier of the target user profile.","schema":{"type":"string","format":"uuid"}},{"name":"badgeId","description":"Unique identifier of the badge assigned to the profile.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Information and metadata for the specified badge as assigned to the user profile.","typeName":"ICommunityPlatformProfileBadge"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/profiles/{profileId}/badges/{badgeId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"Profile badge must exist before badge detail can be retrieved for this user profile (the badge must first be assigned)."}]},{"specification":"This operation assigns a new badge to a specified user profile, recording the badge details, type, issuance, and linking it to possible karma awards. It operates on the community_platform_profile_badges table, which manages badge assignments and their relationship to user profiles. This operation is critical for reward/recognition systems on the platform, allowing admins, moderators, or in some cases automated business logic to grant visible badges to users for achievements or special status. It enforces that badge names and types comply with allowed values, tracks issued_at and actor/issuer, and ensures uniqueness within profile context.","description":"This endpoint enables the creation of a new badge assignment within a user profile, supporting platform workflows such as awarding achievements, recognizing notable user actions, or moderator/admin manual grants. The request body must provide all required fields for badge assignment, including community_platform_profile_id (target profile), badge_type, badge_name, issued_at timestamp, optional issuer (actor), and karma award reference if the badge is tied to karma achievements. The system validates that the profile exists and is eligible for badge assignment, ensures the badge is not duplicated within the profile, and enforces all business rules around allowed badge types and uniqueness constraints.\n\nAuthorization for this operation is typically restricted to platform admins, designated moderators, or other elevated roles—with validation as defined by the business logic and permission matrix in the requirements. Failure scenarios include attempts to grant badges to non-existent profiles, use of prohibited or duplicate badge types, or business rule violations such as revoked assignment rights.\n\nAll side effects—such as audit logs, notification triggers, or karma updates—are managed outside this API and handled by internal logic or event subscribers. The response returns the newly created badge assignment with all metadata for immediate client and user interface use.","summary":"Assign a new badge to a user profile (community_platform_profile_badges).","parameters":[{"name":"profileId","description":"Unique identifier of the target user profile.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for assigning a new badge to the user profile, including type, name, and other required metadata.","typeName":"ICommunityPlatformProfileBadge.ICreate"},"responseBody":{"description":"Details of the badge assignment as created under the user profile.","typeName":"ICommunityPlatformProfileBadge"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post","prerequisites":[]},{"specification":"This operation updates an existing badge record for a user profile. It can be used by the profile owner, moderators, or administrators to change details about a specific badge (such as badge type, name, or status). The operation acts on the community_platform_profile_badges table, which holds assigned badges for user profiles and includes relationships to possible karma awards. The operation requires both the profile and badge identifiers, and expects a well-formed badge update payload conforming to platform rules and constraints.\n\nThis update action supports business requirements for profile badge management, including adjusting badge attributes, revoking badges, or correcting badge details. Changes are tracked with timestamps and can trigger notifications or audits based on the platform's policies. The operation enforces role-based authorization: profile owners can update their visible badges, while admins can update badges platform-wide, and moderators have permissions as defined by their assignments.\n\nValidation includes checking that the badge being updated actually belongs to the specified profile, and only allowed fields can be modified. Any attempt to update a badge not owned by the profile, or that fails platform badge policies, yields an appropriate error. The operation supports rollback/history as implemented in the backend, referencing profile/badge modification audit trails. Related operations include creating badges, revoking badges, and fetching all badges for a profile.","path":"/communityPlatform/member/profiles/{profileId}/badges/{badgeId}","method":"put","summary":"Update a specific badge for a user profile as defined in the community_platform_profile_badges table.","description":"Update a badge entry for a user profile within the community platform. This operation targets the community_platform_profile_badges table, which stores all public and earned badges displayed on a user's profile. The badge is uniquely identified within the scope of a specific profile.\n\nAuthorization is enforced by allowing profile owners, assigned community moderators (for badges granted via moderation/karma awards), and system administrators to update badge details. Business logic ensures that updates are limited to badge properties such as badge_name, badge_type, or revocation info, and cannot reassign the badge to another profile or arbitrarily alter relationships to karma awards except as permitted by platform policy.\n\nThe request body must supply a valid ICommunityPlatformProfileBadge.IUpdate DTO, which is checked against all badge update validation rules: only fields permitted for update are processed, with constraints on strings and timestamps as per the schema. Errors, such as attempting to edit non-owned or non-existent badges, return informative responses as indicated in the error handling section of requirements.\n\nOther related flows are profile badge creation/deletion, badge award events, and retrieval/display of earned badges in profile and community contexts.","parameters":[{"name":"profileId","description":"Unique identifier of the target user profile whose badge is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"badgeId","description":"Unique identifier of the badge assigned to the profile to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update details for the specified badge on the user profile.","typeName":"ICommunityPlatformProfileBadge.IUpdate"},"responseBody":{"description":"Updated badge information for the user profile.","typeName":"ICommunityPlatformProfileBadge"},"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[]},{"specification":"This operation updates an existing badge record for a user profile. It can be used by the profile owner, moderators, or administrators to change details about a specific badge (such as badge type, name, or status). The operation acts on the community_platform_profile_badges table, which holds assigned badges for user profiles and includes relationships to possible karma awards. The operation requires both the profile and badge identifiers, and expects a well-formed badge update payload conforming to platform rules and constraints.\n\nThis update action supports business requirements for profile badge management, including adjusting badge attributes, revoking badges, or correcting badge details. Changes are tracked with timestamps and can trigger notifications or audits based on the platform's policies. The operation enforces role-based authorization: profile owners can update their visible badges, while admins can update badges platform-wide, and moderators have permissions as defined by their assignments.\n\nValidation includes checking that the badge being updated actually belongs to the specified profile, and only allowed fields can be modified. Any attempt to update a badge not owned by the profile, or that fails platform badge policies, yields an appropriate error. The operation supports rollback/history as implemented in the backend, referencing profile/badge modification audit trails. Related operations include creating badges, revoking badges, and fetching all badges for a profile.","path":"/communityPlatform/moderator/profiles/{profileId}/badges/{badgeId}","method":"put","summary":"Update a specific badge for a user profile as defined in the community_platform_profile_badges table.","description":"Update a badge entry for a user profile within the community platform. This operation targets the community_platform_profile_badges table, which stores all public and earned badges displayed on a user's profile. The badge is uniquely identified within the scope of a specific profile.\n\nAuthorization is enforced by allowing profile owners, assigned community moderators (for badges granted via moderation/karma awards), and system administrators to update badge details. Business logic ensures that updates are limited to badge properties such as badge_name, badge_type, or revocation info, and cannot reassign the badge to another profile or arbitrarily alter relationships to karma awards except as permitted by platform policy.\n\nThe request body must supply a valid ICommunityPlatformProfileBadge.IUpdate DTO, which is checked against all badge update validation rules: only fields permitted for update are processed, with constraints on strings and timestamps as per the schema. Errors, such as attempting to edit non-owned or non-existent badges, return informative responses as indicated in the error handling section of requirements.\n\nOther related flows are profile badge creation/deletion, badge award events, and retrieval/display of earned badges in profile and community contexts.","parameters":[{"name":"profileId","description":"Unique identifier of the target user profile whose badge is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"badgeId","description":"Unique identifier of the badge assigned to the profile to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update details for the specified badge on the user profile.","typeName":"ICommunityPlatformProfileBadge.IUpdate"},"responseBody":{"description":"Updated badge information for the user profile.","typeName":"ICommunityPlatformProfileBadge"},"authorizationType":null,"authorizationRole":"moderator","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"Profile badge must exist before it can be updated; create the badge for the target profile first."}]},{"specification":"This operation updates an existing badge record for a user profile. It can be used by the profile owner, moderators, or administrators to change details about a specific badge (such as badge type, name, or status). The operation acts on the community_platform_profile_badges table, which holds assigned badges for user profiles and includes relationships to possible karma awards. The operation requires both the profile and badge identifiers, and expects a well-formed badge update payload conforming to platform rules and constraints.\n\nThis update action supports business requirements for profile badge management, including adjusting badge attributes, revoking badges, or correcting badge details. Changes are tracked with timestamps and can trigger notifications or audits based on the platform's policies. The operation enforces role-based authorization: profile owners can update their visible badges, while admins can update badges platform-wide, and moderators have permissions as defined by their assignments.\n\nValidation includes checking that the badge being updated actually belongs to the specified profile, and only allowed fields can be modified. Any attempt to update a badge not owned by the profile, or that fails platform badge policies, yields an appropriate error. The operation supports rollback/history as implemented in the backend, referencing profile/badge modification audit trails. Related operations include creating badges, revoking badges, and fetching all badges for a profile.","path":"/communityPlatform/admin/profiles/{profileId}/badges/{badgeId}","method":"put","summary":"Update a specific badge for a user profile as defined in the community_platform_profile_badges table.","description":"Update a badge entry for a user profile within the community platform. This operation targets the community_platform_profile_badges table, which stores all public and earned badges displayed on a user's profile. The badge is uniquely identified within the scope of a specific profile.\n\nAuthorization is enforced by allowing profile owners, assigned community moderators (for badges granted via moderation/karma awards), and system administrators to update badge details. Business logic ensures that updates are limited to badge properties such as badge_name, badge_type, or revocation info, and cannot reassign the badge to another profile or arbitrarily alter relationships to karma awards except as permitted by platform policy.\n\nThe request body must supply a valid ICommunityPlatformProfileBadge.IUpdate DTO, which is checked against all badge update validation rules: only fields permitted for update are processed, with constraints on strings and timestamps as per the schema. Errors, such as attempting to edit non-owned or non-existent badges, return informative responses as indicated in the error handling section of requirements.\n\nOther related flows are profile badge creation/deletion, badge award events, and retrieval/display of earned badges in profile and community contexts.","parameters":[{"name":"profileId","description":"Unique identifier of the target user profile whose badge is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"badgeId","description":"Unique identifier of the badge assigned to the profile to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update details for the specified badge on the user profile.","typeName":"ICommunityPlatformProfileBadge.IUpdate"},"responseBody":{"description":"Updated badge information for the user profile.","typeName":"ICommunityPlatformProfileBadge"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"Profile badge must exist before it can be updated; create the badge for the target profile first."}]},{"specification":"This operation deletes (revokes or removes) a badge from a user's profile. It targets the community_platform_profile_badges table, which stores all badge records linked to profiles and possible karma awards. The operation expects the unique identifiers for both the target profile and the badge to ensure the correct entity is being revoked. It strictly enforces business and platform rules around badge deletion: only the badge owner (profile member), authorized moderators, or system administrators may perform a removal.\n\nRemoval typically sets a soft-delete or revocation state without permanently erasing records, to preserve auditability and compliance. The response is empty if the removal succeeds, with errors reported for attempts to delete non-existent, non-owned, or protected badges. This operation is often used in moderation, user-initiated revocation, or system workflows for stripping badges due to policy violations, as specified in the requirements.\n\nThe implementation ensures referential integrity and logs changes to audit history. Related operations include badge creation, badge update/edit, and listing all badges assigned to profiles, with expected integration points for profile completeness and achievement systems.","path":"/communityPlatform/member/profiles/{profileId}/badges/{badgeId}","method":"delete","summary":"Delete (revoke/remove) a badge from a user profile in the community_platform_profile_badges table.","description":"Remove or revoke a badge from a user's profile by its unique identifier. This operation acts on the community_platform_profile_badges table, which contains all badge assignments granted to user profiles, including those tied to karma awards or granted by moderators. The badgeId must be a valid badge currently assigned to the specified profile.\n\nAuthorization is enforced to allow only badge owners (profile members), assigned moderators with appropriate permissions, or platform administrators to perform badge deletion. Business rules ensure the correct badge/profile relationship, soft delete or revocation timestamping, and full audit trail is maintained for each badge deletion, in line with platform compliance requirements.\n\nErrors are returned if the profile or badge ID does not exist, if there is a mismatch between the profile and badge association, or if insufficient permissions are detected. This operation may trigger notifications or additional compliance actions as dictated by business logic.\n\nTypical use cases include user-initiated badge revocation, moderator-forced removal for rule violations, and admin-driven compliance cleanups.","parameters":[{"name":"profileId","description":"Unique identifier of the user profile whose badge is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"badgeId","description":"Unique identifier of the badge being deleted from the profile.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"The target badge must exist on the user's profile before it can be revoked or deleted. This operation creates the badge assignment record that is then referenced and can be deleted by this operation."}]},{"specification":"This operation deletes (revokes or removes) a badge from a user's profile. It targets the community_platform_profile_badges table, which stores all badge records linked to profiles and possible karma awards. The operation expects the unique identifiers for both the target profile and the badge to ensure the correct entity is being revoked. It strictly enforces business and platform rules around badge deletion: only the badge owner (profile member), authorized moderators, or system administrators may perform a removal.\n\nRemoval typically sets a soft-delete or revocation state without permanently erasing records, to preserve auditability and compliance. The response is empty if the removal succeeds, with errors reported for attempts to delete non-existent, non-owned, or protected badges. This operation is often used in moderation, user-initiated revocation, or system workflows for stripping badges due to policy violations, as specified in the requirements.\n\nThe implementation ensures referential integrity and logs changes to audit history. Related operations include badge creation, badge update/edit, and listing all badges assigned to profiles, with expected integration points for profile completeness and achievement systems.","path":"/communityPlatform/moderator/profiles/{profileId}/badges/{badgeId}","method":"delete","summary":"Delete (revoke/remove) a badge from a user profile in the community_platform_profile_badges table.","description":"Remove or revoke a badge from a user's profile by its unique identifier. This operation acts on the community_platform_profile_badges table, which contains all badge assignments granted to user profiles, including those tied to karma awards or granted by moderators. The badgeId must be a valid badge currently assigned to the specified profile.\n\nAuthorization is enforced to allow only badge owners (profile members), assigned moderators with appropriate permissions, or platform administrators to perform badge deletion. Business rules ensure the correct badge/profile relationship, soft delete or revocation timestamping, and full audit trail is maintained for each badge deletion, in line with platform compliance requirements.\n\nErrors are returned if the profile or badge ID does not exist, if there is a mismatch between the profile and badge association, or if insufficient permissions are detected. This operation may trigger notifications or additional compliance actions as dictated by business logic.\n\nTypical use cases include user-initiated badge revocation, moderator-forced removal for rule violations, and admin-driven compliance cleanups.","parameters":[{"name":"profileId","description":"Unique identifier of the user profile whose badge is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"badgeId","description":"Unique identifier of the badge being deleted from the profile.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"The target badge must exist on the user's profile before it can be revoked or deleted. This operation creates the badge assignment record that is then referenced and can be deleted by this operation."}]},{"specification":"This operation deletes (revokes or removes) a badge from a user's profile. It targets the community_platform_profile_badges table, which stores all badge records linked to profiles and possible karma awards. The operation expects the unique identifiers for both the target profile and the badge to ensure the correct entity is being revoked. It strictly enforces business and platform rules around badge deletion: only the badge owner (profile member), authorized moderators, or system administrators may perform a removal.\n\nRemoval typically sets a soft-delete or revocation state without permanently erasing records, to preserve auditability and compliance. The response is empty if the removal succeeds, with errors reported for attempts to delete non-existent, non-owned, or protected badges. This operation is often used in moderation, user-initiated revocation, or system workflows for stripping badges due to policy violations, as specified in the requirements.\n\nThe implementation ensures referential integrity and logs changes to audit history. Related operations include badge creation, badge update/edit, and listing all badges assigned to profiles, with expected integration points for profile completeness and achievement systems.","path":"/communityPlatform/admin/profiles/{profileId}/badges/{badgeId}","method":"delete","summary":"Delete (revoke/remove) a badge from a user profile in the community_platform_profile_badges table.","description":"Remove or revoke a badge from a user's profile by its unique identifier. This operation acts on the community_platform_profile_badges table, which contains all badge assignments granted to user profiles, including those tied to karma awards or granted by moderators. The badgeId must be a valid badge currently assigned to the specified profile.\n\nAuthorization is enforced to allow only badge owners (profile members), assigned moderators with appropriate permissions, or platform administrators to perform badge deletion. Business rules ensure the correct badge/profile relationship, soft delete or revocation timestamping, and full audit trail is maintained for each badge deletion, in line with platform compliance requirements.\n\nErrors are returned if the profile or badge ID does not exist, if there is a mismatch between the profile and badge association, or if insufficient permissions are detected. This operation may trigger notifications or additional compliance actions as dictated by business logic.\n\nTypical use cases include user-initiated badge revocation, moderator-forced removal for rule violations, and admin-driven compliance cleanups.","parameters":[{"name":"profileId","description":"Unique identifier of the user profile whose badge is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"badgeId","description":"Unique identifier of the badge being deleted from the profile.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"The badge must exist on the user's profile before it can be deleted. Creating the badge is necessary for this deletion operation."}]},{"specification":"This operation retrieves the entire edit history for a given user profile. It is associated with the community_platform_profile_histories table in the Prisma schema, which stores historical snapshots of user profile changes for audit, rollback, and compliance purposes. It enables clients to view all recorded changes (such as username, bio, avatar, privacy settings) made to a profile, ordered by change date. This is a critical feature for user transparency and GDPR/data retention legal compliance. It supports pagination and filtering by change type or date, ensuring efficient and focused audit capabilities for user profiles.","description":"This API operation retrieves a paginated list of all changes ever made to the specified user profile. It references the community_platform_profile_histories table, which records every edit or update—such as username changes, bio modifications, avatar updates, privacy toggles, and status messages. Each history item includes the changed fields, value snapshots before and after the change, actor who performed the change (user, system, or admin), change reason, and timestamp of edit.\n\nAccess to profile history is restricted to the profile owner themselves or platform administrators, ensuring privacy of historical profile states. This enforces platform compliance with best practices around privacy and transparency: members can trace all modifications made to their own profile, while admins may audit histories for regulatory or abuse investigations. Sensitive fields, such as email and status, are revealed only if the requestor has appropriate authorization.\n\nThe endpoint supports pagination to handle large history sets, as well as advanced filtering (by date range, editing actor, or field changed) as part of the request body. Expected errors include invalid profileId (404), unauthorized access (403), and improper pagination/filtering (400). The response returns a paginated, chronologically-ordered list of profile history objects, each with full snapshot details as per the Prisma schema. Related operations include retrieving the current profile state, updating profile information, and reviewing audit trails for account management.","path":"/communityPlatform/member/profiles/{profileId}/history","method":"patch","summary":"Retrieve paginated edit history of a specific user profile from community_platform_profile_histories","parameters":[{"name":"profileId","description":"The unique identifier of the profile whose history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for searching and paginating the profile history, such as date range, editor, and fields changed","typeName":"ICommunityPlatformProfileHistory.IRequest"},"responseBody":{"description":"Paginated list of historical profile change snapshots with full audit detail","typeName":"IPageICommunityPlatformProfileHistory"},"authorizationType":null,"authorizationRole":"member","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"Creating a badge for a profile ensures there is history data to retrieve, since profile edits are a prerequisite for retrieving any profile history."}]},{"specification":"This operation retrieves the entire edit history for a given user profile. It is associated with the community_platform_profile_histories table in the Prisma schema, which stores historical snapshots of user profile changes for audit, rollback, and compliance purposes. It enables clients to view all recorded changes (such as username, bio, avatar, privacy settings) made to a profile, ordered by change date. This is a critical feature for user transparency and GDPR/data retention legal compliance. It supports pagination and filtering by change type or date, ensuring efficient and focused audit capabilities for user profiles.","description":"This API operation retrieves a paginated list of all changes ever made to the specified user profile. It references the community_platform_profile_histories table, which records every edit or update—such as username changes, bio modifications, avatar updates, privacy toggles, and status messages. Each history item includes the changed fields, value snapshots before and after the change, actor who performed the change (user, system, or admin), change reason, and timestamp of edit.\n\nAccess to profile history is restricted to the profile owner themselves or platform administrators, ensuring privacy of historical profile states. This enforces platform compliance with best practices around privacy and transparency: members can trace all modifications made to their own profile, while admins may audit histories for regulatory or abuse investigations. Sensitive fields, such as email and status, are revealed only if the requestor has appropriate authorization.\n\nThe endpoint supports pagination to handle large history sets, as well as advanced filtering (by date range, editing actor, or field changed) as part of the request body. Expected errors include invalid profileId (404), unauthorized access (403), and improper pagination/filtering (400). The response returns a paginated, chronologically-ordered list of profile history objects, each with full snapshot details as per the Prisma schema. Related operations include retrieving the current profile state, updating profile information, and reviewing audit trails for account management.","path":"/communityPlatform/admin/profiles/{profileId}/history","method":"patch","summary":"Retrieve paginated edit history of a specific user profile from community_platform_profile_histories","parameters":[{"name":"profileId","description":"The unique identifier of the profile whose history is being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for searching and paginating the profile history, such as date range, editor, and fields changed","typeName":"ICommunityPlatformProfileHistory.IRequest"},"responseBody":{"description":"Paginated list of historical profile change snapshots with full audit detail","typeName":"IPageICommunityPlatformProfileHistory"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"User profile must exist before its edit history can be retrieved; creating a profile badge assignment as a POST operation will ensure the profile is present for audit and compliance."}]},{"specification":"This operation retrieves the current preference settings for a user's profile by profile ID. It fetches data from the community_platform_profile_preferences table in the Prisma schema, which stores language, theme, notification, privacy, badge, and messaging settings. It is intended for both displaying the profile preferences UI and for background services, respecting visibility and access rules. Only the profile owner or a platform admin can read profile preferences for privacy and compliance reasons.","description":"This GET operation returns all current preference settings for an individual user profile from the community_platform_profile_preferences table. Preference items include language choice, theme (e.g., light/dark mode), whether email and badges are displayed, notification customization, and opt-in/opt-out controls for message receipt from non-followers. This assists in rendering user settings in both web and mobile interfaces, and informs backend processes that respect user privacy and notification choices.\n\nProfile preferences are only visible to the profile owner and to platform administrators for support and compliance purposes. Unauthorized or public access to profile preferences is strictly forbidden and results in a 403 error. When successful, the API returns all persisted settings according to the schema, and ensures members can verify or modify their configuration as needed. This endpoint is closely connected to profile update and settings modification operations, enabling consistent user experience and strong privacy guarantees.","path":"/communityPlatform/member/profiles/{profileId}/preferences","method":"get","summary":"Retrieve the profile preferences for a given user from community_platform_profile_preferences","parameters":[{"name":"profileId","description":"The unique identifier of the target profile","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All current settings and privacy-related preferences for the user profile","typeName":"ICommunityPlatformProfilePreferences"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"User profile must be created before any preferences for the profile can be fetched; assigning a badge to the profile ensures that a valid profile exists with an ID."}]},{"specification":"This operation retrieves the current preference settings for a user's profile by profile ID. It fetches data from the community_platform_profile_preferences table in the Prisma schema, which stores language, theme, notification, privacy, badge, and messaging settings. It is intended for both displaying the profile preferences UI and for background services, respecting visibility and access rules. Only the profile owner or a platform admin can read profile preferences for privacy and compliance reasons.","description":"This GET operation returns all current preference settings for an individual user profile from the community_platform_profile_preferences table. Preference items include language choice, theme (e.g., light/dark mode), whether email and badges are displayed, notification customization, and opt-in/opt-out controls for message receipt from non-followers. This assists in rendering user settings in both web and mobile interfaces, and informs backend processes that respect user privacy and notification choices.\n\nProfile preferences are only visible to the profile owner and to platform administrators for support and compliance purposes. Unauthorized or public access to profile preferences is strictly forbidden and results in a 403 error. When successful, the API returns all persisted settings according to the schema, and ensures members can verify or modify their configuration as needed. This endpoint is closely connected to profile update and settings modification operations, enabling consistent user experience and strong privacy guarantees.","path":"/communityPlatform/admin/profiles/{profileId}/preferences","method":"get","summary":"Retrieve the profile preferences for a given user from community_platform_profile_preferences","parameters":[{"name":"profileId","description":"The unique identifier of the target profile","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All current settings and privacy-related preferences for the user profile","typeName":"ICommunityPlatformProfilePreferences"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"User profile must exist and be created before retrieving its preferences. Since profileId is required, the creation of a user profile badge implies the existence of the profile, serving as the prerequisite for this operation."}]},{"specification":"This operation updates the profile preferences for a specific user profile in the platform. It operates on the community_platform_profile_preferences table, allowing users to change their notification, appearance, privacy, and message preferences as defined in the schema. Only the owner of the profile or an admin can update these settings, and all changes are tracked with update timestamps for audit purposes. The update process requires the profileId and applies the modifications via a well-defined DTO schema.","description":"Update the preference settings for a specific user profile. This operation enables modifications on notification preferences, privacy visibility, email sharing, badge display, language choice, theme, and messaging permissions for the profile. It references the community_platform_profile_preferences schema and ensures that only the authenticated profile owner or an administrator can apply changes.\n\nSecurity is enforced so that users cannot change preferences of profiles they do not own, unless they are admins. Changes are written with current timestamps and an audit trail for compliance. Business rules ensure validation of all inputs (such as allowed theme, language formats, and opt-in/out booleans per platform policies).\n\nThis operation supports seamless adjustment of user experience and privacy for every member, addresses accessibility needs, and underpins the user's right to configure profile display, notification options, and exposure to platforms features. Any sensitive preference (e.g., email visibility or open messaging) is validated and will be restricted according to parental consent or platform age limits, if applicable.","summary":"Update a user profile's preferences in the community_platform_profile_preferences table.","parameters":[{"name":"profileId","description":"The unique identifier of the target user profile whose preferences are being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated profile preference fields for the user profile.","typeName":"ICommunityPlatformProfilePreference.IUpdate"},"responseBody":{"description":"The fully updated user profile preference object after modification.","typeName":"ICommunityPlatformProfilePreference"},"authorizationRoles":["member","admin"],"name":"update","path":"/communityPlatform/member/profiles/{profileId}/preferences","method":"put","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"User profile must exist and be created before updating its preferences. Since profileId is required for updating preferences, the creation of a user profile badge implies the existence of the profile, serving as the prerequisite for this operation."}]},{"specification":"This operation updates the profile preferences for a specific user profile in the platform. It operates on the community_platform_profile_preferences table, allowing users to change their notification, appearance, privacy, and message preferences as defined in the schema. Only the owner of the profile or an admin can update these settings, and all changes are tracked with update timestamps for audit purposes. The update process requires the profileId and applies the modifications via a well-defined DTO schema.","description":"Update the preference settings for a specific user profile. This operation enables modifications on notification preferences, privacy visibility, email sharing, badge display, language choice, theme, and messaging permissions for the profile. It references the community_platform_profile_preferences schema and ensures that only the authenticated profile owner or an administrator can apply changes.\n\nSecurity is enforced so that users cannot change preferences of profiles they do not own, unless they are admins. Changes are written with current timestamps and an audit trail for compliance. Business rules ensure validation of all inputs (such as allowed theme, language formats, and opt-in/out booleans per platform policies).\n\nThis operation supports seamless adjustment of user experience and privacy for every member, addresses accessibility needs, and underpins the user's right to configure profile display, notification options, and exposure to platforms features. Any sensitive preference (e.g., email visibility or open messaging) is validated and will be restricted according to parental consent or platform age limits, if applicable.","summary":"Update a user profile's preferences in the community_platform_profile_preferences table.","parameters":[{"name":"profileId","description":"The unique identifier of the target user profile whose preferences are being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated profile preference fields for the user profile.","typeName":"ICommunityPlatformProfilePreference.IUpdate"},"responseBody":{"description":"The fully updated user profile preference object after modification.","typeName":"ICommunityPlatformProfilePreference"},"authorizationRoles":["member","admin"],"name":"update","path":"/communityPlatform/admin/profiles/{profileId}/preferences","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/profiles/{profileId}/badges","method":"post"},"description":"User profile must exist before their preferences can be updated."}]},{"specification":"This operation retrieves a paginated, filterable list of reports submitted by users for inappropriate content (such as posts or comments). It operates on the community_platform_reports table and is intended for use by moderators or administrators for review and resolution workflows. The results include report status, category, timestamps, and relevant content and user references. Supporting advanced queries, it allows searching, sorting, and filtering of reports to facilitate community safety, abuse reviews, and moderator efficiency.","description":"Search and retrieve reports submitted by users flagging inappropriate content, via the community_platform_reports table. This operation enables moderators and admins to access lists of content reports, filter them by categories, workflow status, date, or specific content types (post or comment), and sort by urgency, recency or severity for efficient review.\n\nSecurity is enforced so that only users with moderator or admin roles can access this information, ensuring privacy and limiting exposure of sensitive complaints. Business logic incorporates pagination and query-based searches to allow bulk or targeted moderation workflows. The response data integrates report status, moderator actions, report category and reason, and associated content/user linkage as required for comprehensive moderation.\n\nUse of this endpoint supports scalable, compliant review and tracking of all report events, upholding community governance and response standards. Errors include requests by unauthorized users or invalid parameters for filtering or sorting queries.","summary":"Retrieve a paginated, filtered list of submitted content reports from community_platform_reports for moderation review.","parameters":[],"requestBody":{"description":"Search and pagination filters for querying reports.","typeName":"ICommunityPlatformReport.IRequest"},"responseBody":{"description":"Paginated results containing summaries of content report events ready for review and action.","typeName":"IPageICommunityPlatformReport.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/communityPlatform/moderator/reports","method":"patch","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist in the system before it can be searched or listed by moderators for review."}]},{"specification":"This operation retrieves a paginated, filterable list of reports submitted by users for inappropriate content (such as posts or comments). It operates on the community_platform_reports table and is intended for use by moderators or administrators for review and resolution workflows. The results include report status, category, timestamps, and relevant content and user references. Supporting advanced queries, it allows searching, sorting, and filtering of reports to facilitate community safety, abuse reviews, and moderator efficiency.","description":"Search and retrieve reports submitted by users flagging inappropriate content, via the community_platform_reports table. This operation enables moderators and admins to access lists of content reports, filter them by categories, workflow status, date, or specific content types (post or comment), and sort by urgency, recency or severity for efficient review.\n\nSecurity is enforced so that only users with moderator or admin roles can access this information, ensuring privacy and limiting exposure of sensitive complaints. Business logic incorporates pagination and query-based searches to allow bulk or targeted moderation workflows. The response data integrates report status, moderator actions, report category and reason, and associated content/user linkage as required for comprehensive moderation.\n\nUse of this endpoint supports scalable, compliant review and tracking of all report events, upholding community governance and response standards. Errors include requests by unauthorized users or invalid parameters for filtering or sorting queries.","summary":"Retrieve a paginated, filtered list of submitted content reports from community_platform_reports for moderation review.","parameters":[],"requestBody":{"description":"Search and pagination filters for querying reports.","typeName":"ICommunityPlatformReport.IRequest"},"responseBody":{"description":"Paginated results containing summaries of content report events ready for review and action.","typeName":"IPageICommunityPlatformReport.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/communityPlatform/admin/reports","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"At least one content report must exist to be retrieved or filtered in the moderation review list."}]},{"specification":"This operation retrieves detailed information about a specific content report filed by a platform member. It operates on the community_platform_reports table, which stores reports against posts or comments, including category, status, moderation actions, and all workflow information. This endpoint is essential for moderation, abuse review, and compliance, and includes relationships to the reporting member, the reported post or comment, and relevant moderation or escalation records. Only authorized roles with moderation or administrative permissions may access potentially sensitive report information, including the full audit trail, moderation result, and free-form reason text if provided. Report access is subject to community-level and platform-wide policy controls. This endpoint should ensure careful permission checks, logging, and should redact or withhold personally identifiable information where not allowed by policy.","description":"Retrieve full details and workflow status for a single content report, as identified by reportId. This operation enables moderators, admins, or authorized reviewers to observe the reporting member, the target post or comment, category and reason, moderation actions taken, and workflow status (pending, resolved, escalated, etc.), according to platform requirements and compliance needs.\n\nSecurity is critical: Only users with appropriate moderator or administrative permissions may access detailed report records, with all actions audited for compliance. Sensitive details such as reporter identity, free-form reasons, and moderation history are only revealed to those with the necessary privileges, and may be redacted for lower-privilege viewers.\n\nThe underlying community_platform_reports table includes all necessary data, joined where relevant to referenced post, comment, and moderation category tables. The endpoint should handle errors gracefully if the report does not exist or the user lacks permissions, logging all access for trace and review.","summary":"Retrieve detailed information for a specific content report (community_platform_reports table).","parameters":[{"name":"reportId","description":"Unique identifier for the report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full report details, including status, category, content references, moderator action, and audit information.","typeName":"ICommunityPlatformReport"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/communityPlatform/moderator/reports/{reportId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A content report must exist before its detailed information can be accessed for moderation review."}]},{"specification":"This operation retrieves detailed information about a specific content report filed by a platform member. It operates on the community_platform_reports table, which stores reports against posts or comments, including category, status, moderation actions, and all workflow information. This endpoint is essential for moderation, abuse review, and compliance, and includes relationships to the reporting member, the reported post or comment, and relevant moderation or escalation records. Only authorized roles with moderation or administrative permissions may access potentially sensitive report information, including the full audit trail, moderation result, and free-form reason text if provided. Report access is subject to community-level and platform-wide policy controls. This endpoint should ensure careful permission checks, logging, and should redact or withhold personally identifiable information where not allowed by policy.","description":"Retrieve full details and workflow status for a single content report, as identified by reportId. This operation enables moderators, admins, or authorized reviewers to observe the reporting member, the target post or comment, category and reason, moderation actions taken, and workflow status (pending, resolved, escalated, etc.), according to platform requirements and compliance needs.\n\nSecurity is critical: Only users with appropriate moderator or administrative permissions may access detailed report records, with all actions audited for compliance. Sensitive details such as reporter identity, free-form reasons, and moderation history are only revealed to those with the necessary privileges, and may be redacted for lower-privilege viewers.\n\nThe underlying community_platform_reports table includes all necessary data, joined where relevant to referenced post, comment, and moderation category tables. The endpoint should handle errors gracefully if the report does not exist or the user lacks permissions, logging all access for trace and review.","summary":"Retrieve detailed information for a specific content report (community_platform_reports table).","parameters":[{"name":"reportId","description":"Unique identifier for the report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full report details, including status, category, content references, moderator action, and audit information.","typeName":"ICommunityPlatformReport"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityPlatform/admin/reports/{reportId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"The report must be created before its details can be retrieved."}]},{"specification":"This operation creates a new report entry in the community_platform_reports table, representing a user-submitted complaint against either a post or a comment. It requires the reporting member's identity, the referenced post or comment, the chosen report category, and optionally, a free-form explanation if permitted by the category. This is a core abuse reporting endpoint, intended for normal platform members to flag problematic content for moderation review. Upon submission, the system records the report as 'pending' and triggers notification workflows for the relevant moderators or admins. All fields are checked for content policy constraints and validated, ensuring that only one report per user per content item is allowed by business rules. Misuse and rate limiting are enforced at the system level. Upon success, a confirmation and the submitted report details are returned. Moderation, audit, and escalation workflows follow from this record.","description":"Submit a new content abuse, spam, or policy violation report targeting either a specific post or a comment. The reporting member must specify at least the post or comment being reported, select a report category, and provide a reason text if required for that category. The endpoint ensures uniqueness constraints (only one report per user per item) and enforces rate limits (e.g., 10 reports per user per 24 hour period). The report is immediately set to status 'pending' and triggers downstream notification or moderation queuing as required by the platform.\n\nOn creation, all input is validated for correct references and content format, checking that the member, post, or comment exist and are related, that the category is approved, and that the explanation (if present) conforms to guidelines. The report workflow state, moderation_result, and handler fields are initially unset or null—these are populated as the moderation process evolves.\n\nThis endpoint is used by ordinary platform members and does not require moderator/admin permissions. It is open to authenticated users but cannot be abused by guests. If submission fails due to business/regulatory constraints, the endpoint returns appropriate error codes/messages.","summary":"Submit a new content report against a post or comment (community_platform_reports table).","parameters":[],"requestBody":{"description":"Report submission details including reporter, target post or comment, category, and optional reason.","typeName":"ICommunityPlatformReport.ICreate"},"responseBody":{"description":"The newly created report object with all initial details and workflow status.","typeName":"ICommunityPlatformReport"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/communityPlatform/member/reports","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/reportCategories","method":"post"},"description":"Report category must exist before a content report can be created."}]},{"specification":"This operation updates the status or moderation outcome for a reported content item (post or comment) in the Reddit-like community platform. It operates on the community_platform_reports table in the Prisma schema, allowing authorized moderators or admins to resolve, escalate, or otherwise act on a specific content report. The operation expects a request body describing the new status, moderation result, and responsible user. Only proper actors (moderator, admin) can execute this operation; audit logs and content state must be kept consistent.","path":"/communityPlatform/moderator/reports/{reportId}","method":"put","summary":"Update the status, result, or assigned moderator/admin for a report (community_platform_reports).","description":"This API endpoint allows platform moderators or administrators to update the status, moderation result, or moderator assignment for a specific report of inappropriate content. Common status changes include marking the report as 'under_review', 'resolved', 'dismissed', or 'escalated', and providing details regarding any moderator actions taken (such as content removal, user warning, or ban).\n\nStrict authorization is enforced: only the moderator, admin, or designated staff may call this endpoint. The business logic ensures that report state transitions follow allowed moderation workflows as per platform requirements (e.g., only escalated reports can be moved to admin review, or only resolved/dismissed status may close a report). All actions are tracked for audit purposes, and actors must be verifiable community_platform_moderators or community_platform_admins. Related content (posts/comments) and member status may be updated as a side-effect depending on moderation result.\n\nRequest body uses the ICommunityPlatformReport.IUpdate schema and must include the report status, moderation_result, and identifier for the acting user. Error handling details must follow platform error response standards for insufficient permissions or invalid state transitions. This endpoint is part of moderation/administrative workflows and should not be exposed to regular end users.","parameters":[{"name":"reportId","description":"The UUID of the report to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information used to update the report status, moderation result, or assigned moderator/admin.","typeName":"ICommunityPlatformReport.IUpdate"},"responseBody":{"description":"The updated report information reflecting new status, moderation result, and assigned moderator/admin.","typeName":"ICommunityPlatformReport"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before it can be updated or resolved by a moderator or admin. Creating a report ensures there is a valid reported content item identified by reportId."}]},{"specification":"This operation updates the status or moderation outcome for a reported content item (post or comment) in the Reddit-like community platform. It operates on the community_platform_reports table in the Prisma schema, allowing authorized moderators or admins to resolve, escalate, or otherwise act on a specific content report. The operation expects a request body describing the new status, moderation result, and responsible user. Only proper actors (moderator, admin) can execute this operation; audit logs and content state must be kept consistent.","path":"/communityPlatform/admin/reports/{reportId}","method":"put","summary":"Update the status, result, or assigned moderator/admin for a report (community_platform_reports).","description":"This API endpoint allows platform moderators or administrators to update the status, moderation result, or moderator assignment for a specific report of inappropriate content. Common status changes include marking the report as 'under_review', 'resolved', 'dismissed', or 'escalated', and providing details regarding any moderator actions taken (such as content removal, user warning, or ban).\n\nStrict authorization is enforced: only the moderator, admin, or designated staff may call this endpoint. The business logic ensures that report state transitions follow allowed moderation workflows as per platform requirements (e.g., only escalated reports can be moved to admin review, or only resolved/dismissed status may close a report). All actions are tracked for audit purposes, and actors must be verifiable community_platform_moderators or community_platform_admins. Related content (posts/comments) and member status may be updated as a side-effect depending on moderation result.\n\nRequest body uses the ICommunityPlatformReport.IUpdate schema and must include the report status, moderation_result, and identifier for the acting user. Error handling details must follow platform error response standards for insufficient permissions or invalid state transitions. This endpoint is part of moderation/administrative workflows and should not be exposed to regular end users.","parameters":[{"name":"reportId","description":"The UUID of the report to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information used to update the report status, moderation result, or assigned moderator/admin.","typeName":"ICommunityPlatformReport.IUpdate"},"responseBody":{"description":"The updated report information reflecting new status, moderation result, and assigned moderator/admin.","typeName":"ICommunityPlatformReport"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before it can be updated or resolved by a moderator or admin. Creating a report ensures there is a valid reported content item identified by reportId."}]},{"specification":"This operation permanently erases a report of inappropriate content (post or comment) from the community_platform_reports table in the subreddit platform. Only authorized staff (moderator or admin) may perform this operation, intended for moderator-use-only workflows such as the removal of clearly erroneous or duplicate reports. The report and associated moderation workflow are deleted from the system. Audit compliance requires all deletes to be tracked appropriately.","path":"/communityPlatform/moderator/reports/{reportId}","method":"delete","summary":"Delete a specific report of inappropriate content from community_platform_reports.","description":"This API endpoint enables a moderator or administrator to permanently delete a report record from the platform, removing it from the community_platform_reports table and clearing any moderation workflow history associated with that report. Deleting a report may be allowed only for resolved, dismissed, or clearly invalid/abusive reports, in line with platform audit and compliance policy.\n\nAppropriate authorization (moderator or admin) is strictly enforced. Any action is logged with actor, timestamp, and the specific reason for deletion, as required for forensic audit. The operation may fail with an error if the report is not eligible for deletion under business rules (e.g., if still pending review or under escalation).\n\nNo response body is returned on success. Proper error handling must be implemented to inform the user of permission or state errors. This endpoint should never be accessible by regular members or guests, and is only for staff-level moderation usage.","parameters":[{"name":"reportId","description":"The UUID of the report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before it can be deleted. The report is created using this operation and subsequently referenced by reportId for deletion."}]},{"specification":"This operation permanently erases a report of inappropriate content (post or comment) from the community_platform_reports table in the subreddit platform. Only authorized staff (moderator or admin) may perform this operation, intended for moderator-use-only workflows such as the removal of clearly erroneous or duplicate reports. The report and associated moderation workflow are deleted from the system. Audit compliance requires all deletes to be tracked appropriately.","path":"/communityPlatform/admin/reports/{reportId}","method":"delete","summary":"Delete a specific report of inappropriate content from community_platform_reports.","description":"This API endpoint enables a moderator or administrator to permanently delete a report record from the platform, removing it from the community_platform_reports table and clearing any moderation workflow history associated with that report. Deleting a report may be allowed only for resolved, dismissed, or clearly invalid/abusive reports, in line with platform audit and compliance policy.\n\nAppropriate authorization (moderator or admin) is strictly enforced. Any action is logged with actor, timestamp, and the specific reason for deletion, as required for forensic audit. The operation may fail with an error if the report is not eligible for deletion under business rules (e.g., if still pending review or under escalation).\n\nNo response body is returned on success. Proper error handling must be implemented to inform the user of permission or state errors. This endpoint should never be accessible by regular members or guests, and is only for staff-level moderation usage.","parameters":[{"name":"reportId","description":"The UUID of the report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before it can be deleted. The report is created using this operation and subsequently referenced by reportId for deletion."}]},{"specification":"This operation provides a paginated and filterable overview of moderation queues within the platform, corresponding to community reports that require moderator or admin review. Moderation queues track unresolved, escalated, and pending reports, helping moderation staff triage work, prioritize urgent cases, and monitor community safety in real time. The data source is the community_platform_moderation_queues table as defined in the Prisma schema.\n\nThe endpoint supports advanced filtering based on queue status, assigned moderator, community, and priority, as well as sorting (e.g., newest, oldest, priority order). Pagination is provided for workload management and efficiency. Authorization is strictly enforced; only users with moderator or admin roles may access this sensitive information, with results scoped by role (moderators see their assigned queues; admins may see all).\n\nValidation ensures only permitted filtering and sorting options are accepted, and attempts to enumerate or escalate outside assigned communities are rejected. Client tools should use this to power moderation dashboards and analytics. Related endpoints allow details retrieval per queue and resolving actions, which should be chained appropriately in UI workflows.\n\nSensitive information such as reporter identity, report details, and community roles must be returned according to least privilege principles. Error handling includes unauthorized access, invalid query parameters, and page out-of-bounds handling.","path":"/communityPlatform/moderator/moderationQueues","method":"patch","summary":"List and search moderation queues for pending and ongoing content reports (community_platform_moderation_queues).","description":"Retrieve a filtered and paginated list of moderation queues that correspond to open, pending, or escalated content reports awaiting moderator or admin attention. Each queue summarizes the status, referenced report, assigned moderation actor (if any), target community, and workflow priority.\n\nThis operation is fundamental for moderation dashboards, allowing efficient triage and prioritization of workload. Filtering by community, assigned moderator, status, and priority enables targeted review for large platforms. Pagination is required for scale and usability.\n\nAuthorization is limited to users with moderator or admin roles; regular members are strictly forbidden. Moderators will only see queues in communities for which they are assigned; admins may view all.\n\nModeration queues reference the underlying report, community, and assigned actor, linking to actions such as resolving or escalating. This endpoint should be used alongside related operations for report resolution and audit trail retrieval.\n\nProper error handling is provided for unauthorized attempts, invalid search criteria, or exceeding result page limits. All usages should observe abuse prevention and avoid information leakage beyond user's permission scope.","parameters":[],"requestBody":{"description":"Search/filter and pagination parameters for moderation queue listing. Supports filtering by status, assigned moderator, community, and priority, as well as pagination controls.","typeName":"ICommunityPlatformModerationQueue.IRequest"},"responseBody":{"description":"Paginated list of moderation queue summaries matching filter and search criteria.","typeName":"IPageICommunityPlatformModerationQueue.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before moderation queues can be associated with it."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/moderatorAssignments","method":"post"},"description":"Moderator assignment must exist to enable assigning a moderator to the moderation queue."}]},{"specification":"This operation provides a paginated and filterable overview of moderation queues within the platform, corresponding to community reports that require moderator or admin review. Moderation queues track unresolved, escalated, and pending reports, helping moderation staff triage work, prioritize urgent cases, and monitor community safety in real time. The data source is the community_platform_moderation_queues table as defined in the Prisma schema.\n\nThe endpoint supports advanced filtering based on queue status, assigned moderator, community, and priority, as well as sorting (e.g., newest, oldest, priority order). Pagination is provided for workload management and efficiency. Authorization is strictly enforced; only users with moderator or admin roles may access this sensitive information, with results scoped by role (moderators see their assigned queues; admins may see all).\n\nValidation ensures only permitted filtering and sorting options are accepted, and attempts to enumerate or escalate outside assigned communities are rejected. Client tools should use this to power moderation dashboards and analytics. Related endpoints allow details retrieval per queue and resolving actions, which should be chained appropriately in UI workflows.\n\nSensitive information such as reporter identity, report details, and community roles must be returned according to least privilege principles. Error handling includes unauthorized access, invalid query parameters, and page out-of-bounds handling.","path":"/communityPlatform/admin/moderationQueues","method":"patch","summary":"List and search moderation queues for pending and ongoing content reports (community_platform_moderation_queues).","description":"Retrieve a filtered and paginated list of moderation queues that correspond to open, pending, or escalated content reports awaiting moderator or admin attention. Each queue summarizes the status, referenced report, assigned moderation actor (if any), target community, and workflow priority.\n\nThis operation is fundamental for moderation dashboards, allowing efficient triage and prioritization of workload. Filtering by community, assigned moderator, status, and priority enables targeted review for large platforms. Pagination is required for scale and usability.\n\nAuthorization is limited to users with moderator or admin roles; regular members are strictly forbidden. Moderators will only see queues in communities for which they are assigned; admins may view all.\n\nModeration queues reference the underlying report, community, and assigned actor, linking to actions such as resolving or escalating. This endpoint should be used alongside related operations for report resolution and audit trail retrieval.\n\nProper error handling is provided for unauthorized attempts, invalid search criteria, or exceeding result page limits. All usages should observe abuse prevention and avoid information leakage beyond user's permission scope.","parameters":[],"requestBody":{"description":"Search/filter and pagination parameters for moderation queue listing. Supports filtering by status, assigned moderator, community, and priority, as well as pagination controls.","typeName":"ICommunityPlatformModerationQueue.IRequest"},"responseBody":{"description":"Paginated list of moderation queue summaries matching filter and search criteria.","typeName":"IPageICommunityPlatformModerationQueue.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before moderation queues can be associated with it."},{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"post"},"description":"Moderator assignment must exist to enable assigning a moderator to the moderation queue."}]},{"specification":"This operation retrieves detailed information for a specific moderation queue entry, identified by its unique moderationQueueId. It exposes all relevant details, including status, assigned moderator, linked report, priority, and associated community, based on the community_platform_moderation_queues table in the Prisma schema. This operation is essential for the workflow of moderators and admins reviewing or resolving content reports.","path":"/communityPlatform/moderator/moderationQueues/{moderationQueueId}","method":"get","summary":"Retrieve detailed information for a specific moderation queue entry (community_platform_moderation_queues).","description":"Fetches the full detail of a single moderation queue entry, given its unique identifier. The details returned include the current status (pending, in progress, resolved, escalated), associated report details, assigned moderator (if any), target community, and workflow priority. Also includes timestamps for creation and last update, and any reference to related moderator action history.\n\nThis endpoint is used by moderation dashboards when a moderator or admin selects a queue for review, prior to taking actions such as resolve or escalation. Sensitive fields (e.g., original reporter, moderation notes, escalation reasons) are exposed in accordance with the permissions of the authenticated user: moderators see full detail for their assigned communities, admins may see all. Unauthorized or member roles are strictly forbidden from accessing this resource.\n\nThe operation expects a valid UUID for the moderationQueueId parameter, performs authorization checks, and returns either the queue details or appropriate error if not found or not permitted. Used in conjunction with related endpoints for moderation actions and audit trails.","parameters":[{"name":"moderationQueueId","description":"Unique identifier for the moderation queue entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation queue entry, including status, report reference, assigned moderator, and priority data.","typeName":"ICommunityPlatformModerationQueue"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/moderationQueues","method":"post"},"description":"A moderation queue entry must be created before its details can be retrieved by moderationQueueId."}]},{"specification":"This operation retrieves detailed information for a specific moderation queue entry, identified by its unique moderationQueueId. It exposes all relevant details, including status, assigned moderator, linked report, priority, and associated community, based on the community_platform_moderation_queues table in the Prisma schema. This operation is essential for the workflow of moderators and admins reviewing or resolving content reports.","path":"/communityPlatform/admin/moderationQueues/{moderationQueueId}","method":"get","summary":"Retrieve detailed information for a specific moderation queue entry (community_platform_moderation_queues).","description":"Fetches the full detail of a single moderation queue entry, given its unique identifier. The details returned include the current status (pending, in progress, resolved, escalated), associated report details, assigned moderator (if any), target community, and workflow priority. Also includes timestamps for creation and last update, and any reference to related moderator action history.\n\nThis endpoint is used by moderation dashboards when a moderator or admin selects a queue for review, prior to taking actions such as resolve or escalation. Sensitive fields (e.g., original reporter, moderation notes, escalation reasons) are exposed in accordance with the permissions of the authenticated user: moderators see full detail for their assigned communities, admins may see all. Unauthorized or member roles are strictly forbidden from accessing this resource.\n\nThe operation expects a valid UUID for the moderationQueueId parameter, performs authorization checks, and returns either the queue details or appropriate error if not found or not permitted. Used in conjunction with related endpoints for moderation actions and audit trails.","parameters":[{"name":"moderationQueueId","description":"Unique identifier for the moderation queue entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation queue entry, including status, report reference, assigned moderator, and priority data.","typeName":"ICommunityPlatformModerationQueue"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/moderationQueues","method":"post"},"description":"A moderation queue entry must be created before its details can be retrieved by moderationQueueId."}]},{"specification":"This operation creates a new entry in the moderation work queue for a reported content item, such as a post or comment, within the Reddit-like community platform. It corresponds to the community_platform_moderation_queues table in the Prisma schema. The moderation queue is a key part of community safety, helping to assign active reports to moderators for review and resolution with support for workflow tracking, priority, status, and community association. Reports assigned through this endpoint can later be updated or resolved, following the business rules for moderation context and assignment.","path":"/communityPlatform/moderator/moderationQueues","method":"post","summary":"Create a new moderation queue entry for reported content (CommunityPlatformModerationQueue)","description":"This operation allows a moderator (or admin) to submit a new report or escalate an item to the moderation queue for a specific community. Upon submission, a new queue entry is created, linking to the target community, the original report, and (optionally) assigning a moderator responsible for handling the report. It sets an initial workflow status (typically 'pending') and can specify processing priority (e.g., normal, high).\n\nModerators and administrators use this endpoint to triage and route reports for efficient moderation action. Status, assigned moderator, and other workflow fields can be updated after creation using the update endpoint. The moderation queue supports audit, escalation, and workload balancing per community. Security is enforced so only authorized moderators/admins can create queue entries.\n\nThe Prisma schema requires the community_id (referencing the target community), report_id (referencing the original report), status, priority, and optionally assigned_moderator_id. All relationships must use valid UUIDs for referenced entities. Errors are returned if references are invalid or if business logic (such as exceeding queue thresholds) is violated. This operation is intended for use by moderators and admins only, and is critical for abuse handling, compliance, and process transparency.","parameters":[],"requestBody":{"description":"Information for the new moderation queue entry: target community, report, status, priority, and optionally assigned moderator.","typeName":"ICommunityPlatformModerationQueue.ICreate"},"responseBody":{"description":"The created moderation queue entry with status, report, community, assignment info, and timestamps.","typeName":"ICommunityPlatformModerationQueue"},"authorizationType":null,"authorizationRole":"moderator","name":"create","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"A community must exist before it can be referenced in creating a moderation queue entry. The queue requires a valid community_id."},{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before it can be assigned to the moderation queue. The queue requires a valid report_id referencing an existing report."},{"endpoint":{"path":"/communityPlatform/moderator/communities/{communityId}/moderatorAssignments","method":"post"},"description":"A moderator assignment must exist before a specific moderator can be assigned to a queue entry. If assigned_moderator_id is set, it must reference an existing moderator for that community."}]},{"specification":"This operation creates a new entry in the moderation work queue for a reported content item, such as a post or comment, within the Reddit-like community platform. It corresponds to the community_platform_moderation_queues table in the Prisma schema. The moderation queue is a key part of community safety, helping to assign active reports to moderators for review and resolution with support for workflow tracking, priority, status, and community association. Reports assigned through this endpoint can later be updated or resolved, following the business rules for moderation context and assignment.","path":"/communityPlatform/admin/moderationQueues","method":"post","summary":"Create a new moderation queue entry for reported content (CommunityPlatformModerationQueue)","description":"This operation allows a moderator (or admin) to submit a new report or escalate an item to the moderation queue for a specific community. Upon submission, a new queue entry is created, linking to the target community, the original report, and (optionally) assigning a moderator responsible for handling the report. It sets an initial workflow status (typically 'pending') and can specify processing priority (e.g., normal, high).\n\nModerators and administrators use this endpoint to triage and route reports for efficient moderation action. Status, assigned moderator, and other workflow fields can be updated after creation using the update endpoint. The moderation queue supports audit, escalation, and workload balancing per community. Security is enforced so only authorized moderators/admins can create queue entries.\n\nThe Prisma schema requires the community_id (referencing the target community), report_id (referencing the original report), status, priority, and optionally assigned_moderator_id. All relationships must use valid UUIDs for referenced entities. Errors are returned if references are invalid or if business logic (such as exceeding queue thresholds) is violated. This operation is intended for use by moderators and admins only, and is critical for abuse handling, compliance, and process transparency.","parameters":[],"requestBody":{"description":"Information for the new moderation queue entry: target community, report, status, priority, and optionally assigned moderator.","typeName":"ICommunityPlatformModerationQueue.ICreate"},"responseBody":{"description":"The created moderation queue entry with status, report, community, assignment info, and timestamps.","typeName":"ICommunityPlatformModerationQueue"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"A community must exist before it can be referenced in creating a moderation queue entry. The queue requires a valid community_id."},{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before it can be assigned to the moderation queue. The queue requires a valid report_id referencing an existing report."},{"endpoint":{"path":"/communityPlatform/admin/communities/{communityId}/moderatorAssignments","method":"post"},"description":"A moderator assignment must exist before a specific moderator can be assigned to a queue entry. If assigned_moderator_id is set, it must reference an existing moderator for that community."}]},{"specification":"This operation updates an existing moderation queue entry in the community_platform_moderation_queues table. It allows modification of status, priority, and assignment, supporting the review, resolution, or escalation of reported content. The operation is used by authorized moderators and admins to advance the moderation workflow for a given report in a specific community.","path":"/communityPlatform/moderator/moderationQueues/{moderationQueueId}","method":"put","summary":"Update an existing moderation queue entry (CommunityPlatformModerationQueue)","description":"This endpoint allows authorized moderators or admins to update a queued moderation task for a specific reported content item. Typical updates include changing the queue status (e.g., from 'pending' to 'in_progress' or 'resolved'), setting or updating the assigned moderator, or adjusting the handling priority (e.g., for urgent content such as abuse).\n\nThe community_platform_moderation_queues table requires that moderationQueueId matches an existing queue entry, and that any referenced moderator or report IDs are valid UUIDs, respecting referential integrity. Business logic enforces valid status transitions, role-based permissions (moderators and admins only), and prevents unauthorized updates. Attempts to update non-existent or finalized (already resolved) queue entries return errors. This operation is vital for tracking the resolution path of abuse reports and ensuring transparent, auditable moderation workflows.\n\nRelated business processes include notification of moderators upon new or escalated assignments and audit logging of all queue status changes, as referenced in the requirements analysis and the Prisma table comments.","parameters":[{"name":"moderationQueueId","description":"Unique identifier of the target moderation queue entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the moderation queue: status, assigned moderator, priority, etc.","typeName":"ICommunityPlatformModerationQueue.IUpdate"},"responseBody":{"description":"The updated moderation queue entry with status, assignment, and workflow fields.","typeName":"ICommunityPlatformModerationQueue"},"authorizationType":null,"authorizationRole":"moderator","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/moderationQueues","method":"post"},"description":"A moderation queue entry must exist before it can be updated, so a POST operation creating the queue is required as a prerequisite."}]},{"specification":"This operation updates an existing moderation queue entry in the community_platform_moderation_queues table. It allows modification of status, priority, and assignment, supporting the review, resolution, or escalation of reported content. The operation is used by authorized moderators and admins to advance the moderation workflow for a given report in a specific community.","path":"/communityPlatform/admin/moderationQueues/{moderationQueueId}","method":"put","summary":"Update an existing moderation queue entry (CommunityPlatformModerationQueue)","description":"This endpoint allows authorized moderators or admins to update a queued moderation task for a specific reported content item. Typical updates include changing the queue status (e.g., from 'pending' to 'in_progress' or 'resolved'), setting or updating the assigned moderator, or adjusting the handling priority (e.g., for urgent content such as abuse).\n\nThe community_platform_moderation_queues table requires that moderationQueueId matches an existing queue entry, and that any referenced moderator or report IDs are valid UUIDs, respecting referential integrity. Business logic enforces valid status transitions, role-based permissions (moderators and admins only), and prevents unauthorized updates. Attempts to update non-existent or finalized (already resolved) queue entries return errors. This operation is vital for tracking the resolution path of abuse reports and ensuring transparent, auditable moderation workflows.\n\nRelated business processes include notification of moderators upon new or escalated assignments and audit logging of all queue status changes, as referenced in the requirements analysis and the Prisma table comments.","parameters":[{"name":"moderationQueueId","description":"Unique identifier of the target moderation queue entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the moderation queue: status, assigned moderator, priority, etc.","typeName":"ICommunityPlatformModerationQueue.IUpdate"},"responseBody":{"description":"The updated moderation queue entry with status, assignment, and workflow fields.","typeName":"ICommunityPlatformModerationQueue"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/moderationQueues","method":"post"},"description":"A moderation queue entry must exist before it can be updated, so a POST operation creating the queue is required as a prerequisite."}]},{"specification":"This operation allows an authorized moderator or admin to permanently remove a specific entry from the community_platform_moderation_queues table. The moderation queue tracks open content reports, their workflow status, and moderation assignment for each community. Deleting a moderation queue entry eliminates the association between an open moderation case and the queue, which is usually reserved for resolved or mistakenly created cases. Deletion is only permitted for resolved or closed moderation queue entries, not for active ones, in order to preserve workflow integrity and audit compliance.","description":"Delete a specific moderation queue entry from the system, permanently removing its record from the database. This operation is used for moderation cases that have been fully resolved or closed, ensuring that the moderation queue remains manageable and up-to-date.\n\nOnly users with the moderator or admin role may perform this operation, and only for queues in communities they moderate (or all queues if admin). Deletion attempts on active, unresolved, or escalated entries will be rejected.\n\nPrior to deletion, all related moderation actions and audit logs should be reviewed to ensure that removing the entry does not compromise compliance record keeping. This action is logged for traceability, with an audit log entry recording the actor, time, and details of the removal.","summary":"Permanently erase a moderation queue entry from the moderation queue table after resolution.","parameters":[{"name":"moderationQueueId","description":"Unique identifier of the target moderation queue entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/communityPlatform/moderator/moderationQueues/{moderationQueueId}","method":"delete","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/moderationQueues","method":"post"},"description":"A moderation queue entry must be created before it can be permanently erased. This ensures the moderationQueueId exists for deletion."}]},{"specification":"This operation allows an authorized moderator or admin to permanently remove a specific entry from the community_platform_moderation_queues table. The moderation queue tracks open content reports, their workflow status, and moderation assignment for each community. Deleting a moderation queue entry eliminates the association between an open moderation case and the queue, which is usually reserved for resolved or mistakenly created cases. Deletion is only permitted for resolved or closed moderation queue entries, not for active ones, in order to preserve workflow integrity and audit compliance.","description":"Delete a specific moderation queue entry from the system, permanently removing its record from the database. This operation is used for moderation cases that have been fully resolved or closed, ensuring that the moderation queue remains manageable and up-to-date.\n\nOnly users with the moderator or admin role may perform this operation, and only for queues in communities they moderate (or all queues if admin). Deletion attempts on active, unresolved, or escalated entries will be rejected.\n\nPrior to deletion, all related moderation actions and audit logs should be reviewed to ensure that removing the entry does not compromise compliance record keeping. This action is logged for traceability, with an audit log entry recording the actor, time, and details of the removal.","summary":"Permanently erase a moderation queue entry from the moderation queue table after resolution.","parameters":[{"name":"moderationQueueId","description":"Unique identifier of the target moderation queue entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/communityPlatform/admin/moderationQueues/{moderationQueueId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/moderationQueues","method":"post"},"description":"A moderation queue entry must be created before it can be permanently erased. This ensures the moderationQueueId exists for deletion."}]},{"specification":"This operation retrieves the details of a specific ban history record for a member, moderator, or admin, based on the provided banHistoryId. It is associated with the community_platform_ban_histories table in the Prisma schema. Ban history represents the details of a ban event including the banned member, the issuing actor (moderator/admin), targeted community (or global), reason, ban type (temporary or permanent), ban duration, activation status, and audit timestamps. The operation is typically used by administrators and moderators to review the context, reasons, and current status of bans for audit, review, appeal, or compliance purposes.","description":"Retrieve and view a detailed ban history entry for a particular member, moderator, or admin as recorded in the ban histories table.\n\nThis API operation supports security-critical moderation review and is accessible only to authorized administrators and, as appropriate, to community-level moderators with scope for the affected ban. Path parameter banHistoryId is required and must be a valid UUID matching an existing ban record. The operation returns all properties of the ban including who issued it, for which member, within which community (if applicable), duration, type, whether the ban is active, the reason provided by the moderator or admin, and references to the triggering report if the ban originated from a user report.\n\nData exposure must be carefully controlled: only authorized actors can access ban history, and sensitive information about admin/moderator actors will be displayed according to role and business rules. Error responses are returned if the banHistoryId is not found or the caller lacks permission.\n\nThis endpoint relates closely to audit and escalation workflows as bans may be referenced in appeal, compliance requests, or moderation dashboards.","summary":"Get detailed information for a specific member ban history record by banHistoryId (community_platform_ban_histories).","parameters":[{"name":"banHistoryId","description":"The unique identifier of the ban history record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full ban history object including member, issuer, community, ban reason, type, period, and activity state.","typeName":"ICommunityPlatformBanHistory"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/communityPlatform/admin/banHistories/{banHistoryId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/banHistories","method":"post"},"description":"Ban history record must be created before it can be retrieved by ID."}]},{"specification":"This operation retrieves the details of a specific ban history record for a member, moderator, or admin, based on the provided banHistoryId. It is associated with the community_platform_ban_histories table in the Prisma schema. Ban history represents the details of a ban event including the banned member, the issuing actor (moderator/admin), targeted community (or global), reason, ban type (temporary or permanent), ban duration, activation status, and audit timestamps. The operation is typically used by administrators and moderators to review the context, reasons, and current status of bans for audit, review, appeal, or compliance purposes.","description":"Retrieve and view a detailed ban history entry for a particular member, moderator, or admin as recorded in the ban histories table.\n\nThis API operation supports security-critical moderation review and is accessible only to authorized administrators and, as appropriate, to community-level moderators with scope for the affected ban. Path parameter banHistoryId is required and must be a valid UUID matching an existing ban record. The operation returns all properties of the ban including who issued it, for which member, within which community (if applicable), duration, type, whether the ban is active, the reason provided by the moderator or admin, and references to the triggering report if the ban originated from a user report.\n\nData exposure must be carefully controlled: only authorized actors can access ban history, and sensitive information about admin/moderator actors will be displayed according to role and business rules. Error responses are returned if the banHistoryId is not found or the caller lacks permission.\n\nThis endpoint relates closely to audit and escalation workflows as bans may be referenced in appeal, compliance requests, or moderation dashboards.","summary":"Get detailed information for a specific member ban history record by banHistoryId (community_platform_ban_histories).","parameters":[{"name":"banHistoryId","description":"The unique identifier of the ban history record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full ban history object including member, issuer, community, ban reason, type, period, and activity state.","typeName":"ICommunityPlatformBanHistory"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/communityPlatform/moderator/banHistories/{banHistoryId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/banHistories","method":"post"},"description":"Ban history record must be created before it can be retrieved by ID."}]},{"specification":"This operation creates a new ban history record in the community_platform_ban_histories table, recording the issuance of a temporary or permanent ban on a member by a moderator or admin. The request body must include all details required to record the ban: banned member's ID, the actor who issued the ban (moderator/admin), targeted community (nullable for platform-wide bans), type and reason for ban, period (start/end for temporaries), activation status, and any relevant references (such as triggering report, if the ban originated from a report). The operation checks that the actor has correct permissions and that entries do not violate ban policies. Soft deletion and duration tracking are included per the schema. All changes are audit-logged. This endpoint is essential for compliance, appeals, and precise management/control of moderation powers.","description":"Record the issuance of a new member ban by a moderator or administrator. Required information includes the banned member's ID, the moderator or admin being the issuer, the target community if community-specific (else null for global ban), the reason for the ban, type of ban (temporary or permanent), issue and expiration times, and references to any original user report.\n\nThe input is validated for correct assignment: only authorized moderators or admins can create bans, and the type, duration, and reasons are checked against community and system policies. Start and end times are used to enforce temporary or permanent status. Duplicate or conflicting active bans are prevented.\n\nThe operation provides an audit trail for moderation transparency and compliance, with cross-references for appeals, review, or escalation. On success, the complete ban history record is returned. Permission failures and input validation errors are surfaced as error responses.","summary":"Create and record a new member ban in the moderation ban histories table (community_platform_ban_histories).","parameters":[],"requestBody":{"description":"Ban history creation data, specifying member, issuer, community, period, reason, and reference metadata.","typeName":"ICommunityPlatformBanHistory.ICreate"},"responseBody":{"description":"Full ban history record, including all fields and effective dates, after successful creation.","typeName":"ICommunityPlatformBanHistory"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityPlatform/admin/banHistories","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"The banned member must exist before a ban history can be recorded. Creating a subscription requires a member (platform user) and consequently results in member creation; use this as the prerequisite for the banned_member_id."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The target community must exist before a ban can be associated with it. Community creation provides the community_id needed."},{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"If the ban is due to a specific report, that report must already exist. This operation provides the triggering_report_id if relevant."}]},{"specification":"This operation creates a new ban history record in the community_platform_ban_histories table, recording the issuance of a temporary or permanent ban on a member by a moderator or admin. The request body must include all details required to record the ban: banned member's ID, the actor who issued the ban (moderator/admin), targeted community (nullable for platform-wide bans), type and reason for ban, period (start/end for temporaries), activation status, and any relevant references (such as triggering report, if the ban originated from a report). The operation checks that the actor has correct permissions and that entries do not violate ban policies. Soft deletion and duration tracking are included per the schema. All changes are audit-logged. This endpoint is essential for compliance, appeals, and precise management/control of moderation powers.","description":"Record the issuance of a new member ban by a moderator or administrator. Required information includes the banned member's ID, the moderator or admin being the issuer, the target community if community-specific (else null for global ban), the reason for the ban, type of ban (temporary or permanent), issue and expiration times, and references to any original user report.\n\nThe input is validated for correct assignment: only authorized moderators or admins can create bans, and the type, duration, and reasons are checked against community and system policies. Start and end times are used to enforce temporary or permanent status. Duplicate or conflicting active bans are prevented.\n\nThe operation provides an audit trail for moderation transparency and compliance, with cross-references for appeals, review, or escalation. On success, the complete ban history record is returned. Permission failures and input validation errors are surfaced as error responses.","summary":"Create and record a new member ban in the moderation ban histories table (community_platform_ban_histories).","parameters":[],"requestBody":{"description":"Ban history creation data, specifying member, issuer, community, period, reason, and reference metadata.","typeName":"ICommunityPlatformBanHistory.ICreate"},"responseBody":{"description":"Full ban history record, including all fields and effective dates, after successful creation.","typeName":"ICommunityPlatformBanHistory"},"authorizationType":null,"authorizationRole":"moderator","name":"create","path":"/communityPlatform/moderator/banHistories","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"The banned member must exist before a ban history can be recorded. Creating a subscription results in member creation; use this as the prerequisite for the banned_member_id."},{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The target community must exist in the system before associating a ban with it. Community creation is a prerequisite for community_id."},{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"If the ban is triggered by a report, the report must already exist in the database. This operation provides the triggering_report_id if necessary."}]},{"specification":"This operation updates an existing ban history record for a member, representing the outcome of a moderation or admin action such as temporary or permanent ban. It acts on the community_platform_ban_histories table, updating fields related to the ban's context (e.g., new reason, status, end time) as determined by workflow. This supports compliance with user appeal processes, updating ban periods, or documenting ban upgrades/downgrades. Only admins or the original moderation authority should have permission to access this endpoint for sensitive audit integrity. All changes are fully auditable for forensic review.","description":"Update an existing ban history record for a member in the community platform.\n\nThis operation allows a platform administrator or entitled moderator to edit a ban record, such as changing its reason, duration, status (active/inactive), or associating it with a specific report or community. Edits may be required for handling appeal outcomes, revising ban periods (e.g., converting a temporary ban to permanent or vice versa), correcting errors, or adding clarifying notes. The system must ensure only authorized actors make such changes, and all changes should be preserved for compliance and future review.\n\nThe operation directly references the community_platform_ban_histories table as per the Prisma schema, updating all modifiable columns. Care must be taken not to erase critical audit trails—edits should be justified and additional audit logs should be recorded. Proper validation ensures that updates adhere to business rules, such as allowed ban_type values and permissible state transitions. If an update would violate integrity (e.g., ending a ban in the past when still marked active), the system should block the change and return a clear error.\n\nThis endpoint is closely related to system compliance, legal retention, and appeal workflows. Other endpoints, such as viewing ban histories or the underlying user's profile, may be referenced by clients before or after calling this endpoint.","summary":"Update an existing member ban history record (community_platform_ban_histories).","parameters":[{"name":"banHistoryId","description":"Unique identifier of the ban history entry to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the ban history record for a member (status, reason, period, action details).","typeName":"ICommunityPlatformBanHistory.IUpdate"},"responseBody":{"description":"Updated ban history record including all detail fields after the change.","typeName":"ICommunityPlatformBanHistory"},"authorizationRoles":["admin"],"name":"update","path":"/communityPlatform/admin/banHistories/{banHistoryId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation permanently erases (hard deletes) an existing ban history record from the system database. It operates on the community_platform_ban_histories table, physically removing the record associated with the given banHistoryId. This is reserved for rare cases such as compliance with data erasure requests or confirmed wrongful bans, and should only be accessible to admins with appropriate audit requirements fulfilled before deletion. Normal business workflow typically does NOT permit deletion of ban history for audit and compliance purposes.","description":"Permanently delete a ban history entry from the community platform system.\n\nThis operation is reserved strictly for platform administrators and addresses extraordinary circumstances such as legal data removal requests, proven wrongful moderation actions, or compliance with privacy regulations (e.g., GDPR). By design, this is a hard delete: the row is fully removed from community_platform_ban_histories based on the given banHistoryId, and cannot be restored. Because ban histories serve a critical role in platform integrity and moderation accountability, this operation should require additional checks before completion, such as explicit confirmation, logging the action in a secondary audit trail, and potentially requiring multi-admin approval. System implementers are expected to guard this API carefully.\n\nCare must be taken to ensure related audit and history records are either handled per policy (cascaded deletes or manual cleanup) or preserved where legally required. If the record does not exist, or deletion is not permitted by the current retention or compliance policy, the system should respond with a clear error.\n\nUse this endpoint in rare, exceptional business workflows only, and document every use.","summary":"Permanently erase (hard delete) a ban history record (community_platform_ban_histories) by id.","parameters":[{"name":"banHistoryId","description":"Unique identifier of the ban history entry to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/communityPlatform/admin/banHistories/{banHistoryId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated and filtered list of all moderation actions performed on the platform. It is based on the community_platform_moderation_actions table, which logs every moderator or admin action (such as remove_post, remove_comment, pin, warn_user, ban_user, escalate, dismiss, edit_content, and others) for compliance and analytics. The query supports advanced search criteria such as filtering by action type, actor, target (post or comment), related report, description keywords, and time ranges. The operation is primarily intended for admins and moderators auditing moderation workflows, investigating incidents, or generating compliance/statistical reports. It exposes sufficient filtering, pagination, and sorting to allow efficient browsing of potentially large audit trails while protecting sensitive data according to user roles.","path":"/communityPlatform/admin/moderationActions","method":"patch","summary":"Retrieve a filtered, paginated list of moderation actions from the moderation log table.","description":"Fetch a filtered and paginated list of moderation actions performed by moderators and admins as recorded in the community_platform_moderation_actions table. Each action record includes references to the actor (moderator or admin), action type, targeted post or comment, related report (if any), a description, and the creation timestamp, supporting a comprehensive moderation audit process.\n\nThis operation is restricted to admin and moderator roles due to the potentially sensitive nature of moderation actions and audit data. By default, it supports advanced filtering for action_type, actor_id, target_post_id, target_comment_id, report_id, date ranges, and description keywords, in order to allow for effective incident review, analytics, and compliance checks.\n\nPagination and sorting options follow platform standards and are required for large datasets. Sensitive information, such as moderator notes or private user references within descriptions, is filtered or redacted according to the authorization role of the requester.\n\nRelated operations include fetching detail for a single moderation action, exporting logs (admin only), and reviewing associated reports or escalations. Errors are returned for insufficient permissions, invalid filters, or excessive pagination requests.\n\nField references, query capabilities, and privacy enforcement are strictly matched to the structure and comments of the community_platform_moderation_actions Prisma model.","parameters":[],"requestBody":{"description":"Filtering criteria and pagination/sorting parameters for moderation action search and log review.","typeName":"ICommunityPlatformModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation action log summaries matching search criteria, each entry containing actor, action type, target associations, and timestamp.","typeName":"IPageICommunityPlatformModerationAction.ISummary"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated and filtered list of all moderation actions performed on the platform. It is based on the community_platform_moderation_actions table, which logs every moderator or admin action (such as remove_post, remove_comment, pin, warn_user, ban_user, escalate, dismiss, edit_content, and others) for compliance and analytics. The query supports advanced search criteria such as filtering by action type, actor, target (post or comment), related report, description keywords, and time ranges. The operation is primarily intended for admins and moderators auditing moderation workflows, investigating incidents, or generating compliance/statistical reports. It exposes sufficient filtering, pagination, and sorting to allow efficient browsing of potentially large audit trails while protecting sensitive data according to user roles.","path":"/communityPlatform/moderator/moderationActions","method":"patch","summary":"Retrieve a filtered, paginated list of moderation actions from the moderation log table.","description":"Fetch a filtered and paginated list of moderation actions performed by moderators and admins as recorded in the community_platform_moderation_actions table. Each action record includes references to the actor (moderator or admin), action type, targeted post or comment, related report (if any), a description, and the creation timestamp, supporting a comprehensive moderation audit process.\n\nThis operation is restricted to admin and moderator roles due to the potentially sensitive nature of moderation actions and audit data. By default, it supports advanced filtering for action_type, actor_id, target_post_id, target_comment_id, report_id, date ranges, and description keywords, in order to allow for effective incident review, analytics, and compliance checks.\n\nPagination and sorting options follow platform standards and are required for large datasets. Sensitive information, such as moderator notes or private user references within descriptions, is filtered or redacted according to the authorization role of the requester.\n\nRelated operations include fetching detail for a single moderation action, exporting logs (admin only), and reviewing associated reports or escalations. Errors are returned for insufficient permissions, invalid filters, or excessive pagination requests.\n\nField references, query capabilities, and privacy enforcement are strictly matched to the structure and comments of the community_platform_moderation_actions Prisma model.","parameters":[],"requestBody":{"description":"Filtering criteria and pagination/sorting parameters for moderation action search and log review.","typeName":"ICommunityPlatformModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation action log summaries matching search criteria, each entry containing actor, action type, target associations, and timestamp.","typeName":"IPageICommunityPlatformModerationAction.ISummary"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the full details of a single moderation action using its unique identifier from the community_platform_moderation_actions table. This table stores granular audit logs for each moderation event, including the actor (moderator or admin), action type (remove_post, remove_comment, warn_user, etc.), the affected post or comment, associated report (if any), description, and a precise timestamp. The endpoint is critical for audit, compliance, or incident investigation workflows, and access is generally restricted to admin and moderator roles. Detail access ensures traceability for all role-driven content moderation decisions with accurate context. The returned record will include all core attributes as well as descriptive references to the acting user and targets, subject to masking or redaction policies based on role and sensitivity.","path":"/communityPlatform/admin/moderationActions/{moderationActionId}","method":"get","summary":"Get full detail for a specific moderation action by its unique identifier.","description":"Retrieve complete detail for a single moderation action event from the moderation log as stored in the community_platform_moderation_actions table. This API allows admins or moderators to audit, review, or debug specific moderation interventions, including actor identity, moderation action type, affected post or comment (with IDs), any linked report, descriptive notes, and the creation timestamp.\n\nAccess to this endpoint is limited to admin and moderator roles, as the data may contain sensitive references or information about moderation rationale, actions on specific users, or report content. The returned detail is subject to privacy controls and may redact or mask fields for non-superuser moderators as per company privacy and security standards.\n\nExpected usage includes post-incident reviews, handling appeals, compliance checks, and system audits. Related API operations include listing all moderation actions with advanced filtering, exporting audit logs, and reviewing escalation chains. Error responses are provided for unauthorized access or if the specified action ID does not exist.\n\nAll returned fields, error handling, and traceability requirements strictly match the structure and documentation of the community_platform_moderation_actions Prisma schema.","parameters":[{"name":"moderationActionId","description":"Unique identifier (UUID) of the moderation action log entry to retrieve, as stored in the community_platform_moderation_actions table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed log and audit information about the requested moderation action, including actor, action type, targets, description, and timestamp.","typeName":"ICommunityPlatformModerationAction"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/moderationActions","method":"post"},"description":"A moderation action must be created before its full details can be retrieved by ID."}]},{"specification":"This operation retrieves the full details of a single moderation action using its unique identifier from the community_platform_moderation_actions table. This table stores granular audit logs for each moderation event, including the actor (moderator or admin), action type (remove_post, remove_comment, warn_user, etc.), the affected post or comment, associated report (if any), description, and a precise timestamp. The endpoint is critical for audit, compliance, or incident investigation workflows, and access is generally restricted to admin and moderator roles. Detail access ensures traceability for all role-driven content moderation decisions with accurate context. The returned record will include all core attributes as well as descriptive references to the acting user and targets, subject to masking or redaction policies based on role and sensitivity.","path":"/communityPlatform/moderator/moderationActions/{moderationActionId}","method":"get","summary":"Get full detail for a specific moderation action by its unique identifier.","description":"Retrieve complete detail for a single moderation action event from the moderation log as stored in the community_platform_moderation_actions table. This API allows admins or moderators to audit, review, or debug specific moderation interventions, including actor identity, moderation action type, affected post or comment (with IDs), any linked report, descriptive notes, and the creation timestamp.\n\nAccess to this endpoint is limited to admin and moderator roles, as the data may contain sensitive references or information about moderation rationale, actions on specific users, or report content. The returned detail is subject to privacy controls and may redact or mask fields for non-superuser moderators as per company privacy and security standards.\n\nExpected usage includes post-incident reviews, handling appeals, compliance checks, and system audits. Related API operations include listing all moderation actions with advanced filtering, exporting audit logs, and reviewing escalation chains. Error responses are provided for unauthorized access or if the specified action ID does not exist.\n\nAll returned fields, error handling, and traceability requirements strictly match the structure and documentation of the community_platform_moderation_actions Prisma schema.","parameters":[{"name":"moderationActionId","description":"Unique identifier (UUID) of the moderation action log entry to retrieve, as stored in the community_platform_moderation_actions table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed log and audit information about the requested moderation action, including actor, action type, targets, description, and timestamp.","typeName":"ICommunityPlatformModerationAction"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/moderationActions","method":"post"},"description":"A moderation action must be created before its full details can be retrieved by ID."}]},{"specification":"This operation allows a moderator or administrator to record a moderation action performed on a reported post, comment, or member within the platform. The operation creates a new moderation action entry in the community_platform_moderation_actions table, capturing the actor, action type (such as remove_post, remove_comment, pin, warn_user, ban_user, escalate, dismiss, edit_content, or other), the associated report, and the affected post or comment if applicable. This supports full auditability and traceability of all moderation interventions, aligning with the requirements for transparent and compliant moderation workflows.","description":"This API operation enables authorized moderators or platform administrators to document actions taken in response to moderation needs, such as the removal of posts or comments, issuing warnings or bans, or performing escalations. Each moderation action includes metadata specifying the actor's identity, the nature of the moderation action, links to the affected content, and a reference to the related report if one exists.\n\nSecurity for this operation is critical, as only users with moderator or admin privileges are permitted to perform moderation actions. Access control must tightly restrict use, with every successful action recorded for compliance and later review. Sensitive audit trails are maintained, and inputs are validated to ensure the legitimacy and appropriateness of each moderation action.\n\nThis operation is fundamental to the moderation process, supporting the enforcement of platform and community standards, user safety, and content policy. Error scenarios include invalid permissions, references to nonexistent reports or content, or improperly formatted action types, all of which result in clear validation errors.","summary":"Create a new moderation action record (community_platform_moderation_actions).","parameters":[],"requestBody":{"description":"Details of the moderation action to record, including actor, target post or comment, action type, and associated report if any.","typeName":"ICommunityPlatformModerationAction.ICreate"},"responseBody":{"description":"The created moderation action record, including references to the actor, content, report, and action type.","typeName":"ICommunityPlatformModerationAction"},"authorizationType":null,"authorizationRole":"moderator","name":"create","path":"/communityPlatform/moderator/moderationActions","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"A post must exist before referencing it as a target in a moderation action, such as remove_post, pin, or escalate."},{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before referencing it as the associated report in a moderation action (e.g., for escalate, dismiss, or moderation review)."}]},{"specification":"This operation allows a moderator or administrator to record a moderation action performed on a reported post, comment, or member within the platform. The operation creates a new moderation action entry in the community_platform_moderation_actions table, capturing the actor, action type (such as remove_post, remove_comment, pin, warn_user, ban_user, escalate, dismiss, edit_content, or other), the associated report, and the affected post or comment if applicable. This supports full auditability and traceability of all moderation interventions, aligning with the requirements for transparent and compliant moderation workflows.","description":"This API operation enables authorized moderators or platform administrators to document actions taken in response to moderation needs, such as the removal of posts or comments, issuing warnings or bans, or performing escalations. Each moderation action includes metadata specifying the actor's identity, the nature of the moderation action, links to the affected content, and a reference to the related report if one exists.\n\nSecurity for this operation is critical, as only users with moderator or admin privileges are permitted to perform moderation actions. Access control must tightly restrict use, with every successful action recorded for compliance and later review. Sensitive audit trails are maintained, and inputs are validated to ensure the legitimacy and appropriateness of each moderation action.\n\nThis operation is fundamental to the moderation process, supporting the enforcement of platform and community standards, user safety, and content policy. Error scenarios include invalid permissions, references to nonexistent reports or content, or improperly formatted action types, all of which result in clear validation errors.","summary":"Create a new moderation action record (community_platform_moderation_actions).","parameters":[],"requestBody":{"description":"Details of the moderation action to record, including actor, target post or comment, action type, and associated report if any.","typeName":"ICommunityPlatformModerationAction.ICreate"},"responseBody":{"description":"The created moderation action record, including references to the actor, content, report, and action type.","typeName":"ICommunityPlatformModerationAction"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityPlatform/admin/moderationActions","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"A post must exist before referencing it as a target in a moderation action, such as remove_post, pin, or escalate."},{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before referencing it as the associated report in a moderation action (e.g., for escalate, dismiss, or moderation review)."}]},{"specification":"This operation allows a moderator or administrator to update an existing moderation action record in the community_platform_moderation_actions table. It is used for correcting, adding details to, or marking the outcome of previously logged moderation interventions. The update is strictly controlled to preserve audit trail integrity and may be limited to fields like the action description or status, rather than retroactively altering original moderation decisions.","description":"This operation supports moderation workflows where additional details or outcome updates need to be recorded for previously performed moderation actions. Only authorized moderators or admins can invoke this operation. Modifications may include updating the description, clarifying reasons, or amending metadata, but should never overwrite the nature or subject of the original intervention.\n\nFor integrity, all updates are timestamped and associated with the updating actor. Security checks ensure that only the appropriate roles may modify records, and all changes are logged for subsequent compliance review. Business logic enforces that only allowed fields are updatable after a moderation action is logged, and changes are subject to validation against platform policy.\n\nThis endpoint is commonly paired with the moderation action creation endpoint and supports full moderation lifecycles, including documentation of appeals, clarifications, or policy-driven record amendments. Potential errors include reference to nonexistent actions, unauthorized modification attempts, or updates attempting to override protected fields.","summary":"Update an existing moderation action record (community_platform_moderation_actions).","parameters":[{"name":"moderationActionId","description":"Unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated details for the moderation action, allowing changes to description or metadata, respecting audit and policy constraints.","typeName":"ICommunityPlatformModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action record after allowed modifications.","typeName":"ICommunityPlatformModerationAction"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/communityPlatform/moderator/moderationActions/{moderationActionId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/moderationActions","method":"post"},"description":"The moderation action must be created before it can be updated. This ensures the action exists and can be amended, clarified, or supplemented with outcome details as part of moderation lifecycle workflows."}]},{"specification":"This operation allows a moderator or administrator to update an existing moderation action record in the community_platform_moderation_actions table. It is used for correcting, adding details to, or marking the outcome of previously logged moderation interventions. The update is strictly controlled to preserve audit trail integrity and may be limited to fields like the action description or status, rather than retroactively altering original moderation decisions.","description":"This operation supports moderation workflows where additional details or outcome updates need to be recorded for previously performed moderation actions. Only authorized moderators or admins can invoke this operation. Modifications may include updating the description, clarifying reasons, or amending metadata, but should never overwrite the nature or subject of the original intervention.\n\nFor integrity, all updates are timestamped and associated with the updating actor. Security checks ensure that only the appropriate roles may modify records, and all changes are logged for subsequent compliance review. Business logic enforces that only allowed fields are updatable after a moderation action is logged, and changes are subject to validation against platform policy.\n\nThis endpoint is commonly paired with the moderation action creation endpoint and supports full moderation lifecycles, including documentation of appeals, clarifications, or policy-driven record amendments. Potential errors include reference to nonexistent actions, unauthorized modification attempts, or updates attempting to override protected fields.","summary":"Update an existing moderation action record (community_platform_moderation_actions).","parameters":[{"name":"moderationActionId","description":"Unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated details for the moderation action, allowing changes to description or metadata, respecting audit and policy constraints.","typeName":"ICommunityPlatformModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action record after allowed modifications.","typeName":"ICommunityPlatformModerationAction"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityPlatform/admin/moderationActions/{moderationActionId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/moderationActions","method":"post"},"description":"The moderation action must be created before it can be updated. This ensures the action exists in the audit trail and can be amended, clarified, or have its description/status updated as part of the administrative moderation action lifecycle."}]},{"specification":"This operation performs a hard deletion of a specific moderation action record from the community platform. It works on the 'community_platform_moderation_actions' table, which stores individual moderation actions taken on posts or comments within the platform. Deletion of a moderation action is an administrative task, typically performed to correct logs or remove erroneous entries. This action is irreversible—once a moderation action is deleted, its information is permanently removed from the audit log and cannot be recovered. This operation should be strictly limited to system administrators to preserve audit integrity and ensure accurate compliance records.","description":"This endpoint is responsible for permanently deleting a specified moderation action from the 'community_platform_moderation_actions' table. Moderation actions record essential audit data each time a moderator or admin takes action (such as removing a post or comment, warning a user, or escalating content) on the platform. By deleting the record, all information about the action—such as who performed it, the target content, the associated reason, and timestamps—is erased from the system.\n\nDue to the sensitive nature of this operation and its impact on the integrity of platform audit trails, it must only be accessible by administrators. Appropriate permission checks are required to ensure that only users with the 'admin' role can invoke this operation. As there is no soft-delete field present in the schema, the action constitutes a full hard delete. Administrators should exercise caution, as all details of the moderation action, including its relationship to moderation, reporting, or escalation workflows, will be lost.\n\nError scenarios include attempting to delete a moderation action that does not exist or one already removed, in which case the system should return an appropriate error message indicating the absence of the record. All delete attempts must be logged for compliance purposes, including unsuccessful ones.","summary":"Permanently delete a moderation action (admin only) from the moderation_actions table.","parameters":[{"name":"moderationActionId","description":"Unique identifier of the moderation action to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/communityPlatform/admin/moderationActions/{moderationActionId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/moderationActions","method":"post"},"description":"A moderation action must exist before it can be deleted; ensure the target moderation action is created first."}]},{"specification":"This operation retrieves a paginated, filterable list of escalation logs from the 'community_platform_escalation_logs' table. Escalation logs capture the full audit trail of moderation workflow escalations (e.g., reports escalated from moderator to admin review, unresolved disputes, or conflict-of-interest handoffs). Each log may detail the reason for escalation, its status, the initiator, the destination admin (if any), timestamps, and resolution outcomes. This endpoint supports advanced querying for admins and authorized moderators to enable filtering by community, report, initiator, escalation status, resolution summary, or time period.","description":"This endpoint enables authorized users to search, paginate, and filter escalation log records from the 'community_platform_escalation_logs' table. Escalation logs record all transfers of unresolved or complex moderation reports from general moderators to admin review, documenting when and why escalation occurred, who initiated it, and how it was ultimately resolved.\n\nThe operation provides robust filtering options by escalation status (pending, in_review, resolved, closed), report ID, initiator, assigned admin, and event time range. The response object includes both the paginated list of escalation log summaries and pagination metadata (e.g., total count, current page). Authorization is restricted to users with appropriate permissions—typically administrators and assigned moderators with community management rights.\n\nAdditional security considerations include preventing access to escalations unrelated to the requester's scope (e.g., moderators cannot view escalations outside their community assignment, and only admins see all logs). Filtering may also be applied based on time period for audit queries or compliance checks.\n\nIf no logs match the given criteria or page, the response returns an empty result set with appropriate pagination metadata.","summary":"Retrieve and search escalation logs (admin and authorized moderators).","parameters":[],"requestBody":{"description":"Search criteria and pagination options for escalation log filtering.","typeName":"ICommunityPlatformEscalationLog.IRequest"},"responseBody":{"description":"Paginated list of escalation log summaries matching query conditions.","typeName":"IPageICommunityPlatformEscalationLog.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityPlatform/admin/escalationLogs","method":"patch","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/escalationLogs","method":"post"},"description":"At least one escalation log must exist to retrieve or search escalation log records; ensure that a log entry is created first."}]},{"specification":"This operation retrieves a paginated, filterable list of escalation logs from the 'community_platform_escalation_logs' table. Escalation logs capture the full audit trail of moderation workflow escalations (e.g., reports escalated from moderator to admin review, unresolved disputes, or conflict-of-interest handoffs). Each log may detail the reason for escalation, its status, the initiator, the destination admin (if any), timestamps, and resolution outcomes. This endpoint supports advanced querying for admins and authorized moderators to enable filtering by community, report, initiator, escalation status, resolution summary, or time period.","description":"This endpoint enables authorized users to search, paginate, and filter escalation log records from the 'community_platform_escalation_logs' table. Escalation logs record all transfers of unresolved or complex moderation reports from general moderators to admin review, documenting when and why escalation occurred, who initiated it, and how it was ultimately resolved.\n\nThe operation provides robust filtering options by escalation status (pending, in_review, resolved, closed), report ID, initiator, assigned admin, and event time range. The response object includes both the paginated list of escalation log summaries and pagination metadata (e.g., total count, current page). Authorization is restricted to users with appropriate permissions—typically administrators and assigned moderators with community management rights.\n\nAdditional security considerations include preventing access to escalations unrelated to the requester's scope (e.g., moderators cannot view escalations outside their community assignment, and only admins see all logs). Filtering may also be applied based on time period for audit queries or compliance checks.\n\nIf no logs match the given criteria or page, the response returns an empty result set with appropriate pagination metadata.","summary":"Retrieve and search escalation logs (admin and authorized moderators).","parameters":[],"requestBody":{"description":"Search criteria and pagination options for escalation log filtering.","typeName":"ICommunityPlatformEscalationLog.IRequest"},"responseBody":{"description":"Paginated list of escalation log summaries matching query conditions.","typeName":"IPageICommunityPlatformEscalationLog.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/communityPlatform/moderator/escalationLogs","method":"patch","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"A report must exist before it can be escalated and appear in escalation logs, as escalation logs are captured based on escalations of existing moderation reports."}]},{"specification":"This operation retrieves detailed information about a specific escalation log entry in the moderation and abuse reporting workflow. It is associated with the community_platform_escalation_logs table in the Prisma schema. The operation allows authorized users to view the full escalation record, including escalation reason, status, resolution summary, associated report, involved users (initiator, admin, moderator), and timestamps. This is vital for audit trails, compliance, and post-moderation review processes. Viewing escalation logs is a critical part of transparency and accountability in community moderation and administration.","description":"Retrieve the complete content of an escalation log for moderation or abuse reporting workflow. This operation provides a comprehensive view of the escalation process, including all status changes, participant details, escalation rationale, and resulting actions as tracked in the community_platform_escalation_logs table.\n\nAccess to detailed escalation logs is restricted to assigned moderators for their communities and platform administrators. Sensitive user and moderation data is displayed only if the requester holds appropriate role authorization, ensuring privacy and compliance with platform policy.\n\nThe operation enforces precise access control by checking the requesting user’s rights against the Prisma schema relationships for escalations, members, and admins. It requires a valid escalationLogId parameter formatted as a UUID and returns all information necessary for a thorough audit, dispute review, or compliance investigation. Error responses are provided for invalid IDs or unauthorized access attempts.","summary":"Retrieve a specific escalation log entry from community_platform_escalation_logs by its ID.","parameters":[{"name":"escalationLogId","description":"Unique identifier (UUID) of the escalation log to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified escalation log entry.","typeName":"ICommunityPlatformEscalationLog"},"authorizationRoles":["moderator","admin"],"name":"at","path":"/communityPlatform/moderator/escalationLogs/{escalationLogId}","method":"get","authorizationRole":"moderator","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/escalationLogs","method":"post"},"description":"An escalation log entry must be created before it can be retrieved by its ID, as reading details requires the underlying escalation log to exist."}]},{"specification":"This operation retrieves detailed information about a specific escalation log entry in the moderation and abuse reporting workflow. It is associated with the community_platform_escalation_logs table in the Prisma schema. The operation allows authorized users to view the full escalation record, including escalation reason, status, resolution summary, associated report, involved users (initiator, admin, moderator), and timestamps. This is vital for audit trails, compliance, and post-moderation review processes. Viewing escalation logs is a critical part of transparency and accountability in community moderation and administration.","description":"Retrieve the complete content of an escalation log for moderation or abuse reporting workflow. This operation provides a comprehensive view of the escalation process, including all status changes, participant details, escalation rationale, and resulting actions as tracked in the community_platform_escalation_logs table.\n\nAccess to detailed escalation logs is restricted to assigned moderators for their communities and platform administrators. Sensitive user and moderation data is displayed only if the requester holds appropriate role authorization, ensuring privacy and compliance with platform policy.\n\nThe operation enforces precise access control by checking the requesting user’s rights against the Prisma schema relationships for escalations, members, and admins. It requires a valid escalationLogId parameter formatted as a UUID and returns all information necessary for a thorough audit, dispute review, or compliance investigation. Error responses are provided for invalid IDs or unauthorized access attempts.","summary":"Retrieve a specific escalation log entry from community_platform_escalation_logs by its ID.","parameters":[{"name":"escalationLogId","description":"Unique identifier (UUID) of the escalation log to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified escalation log entry.","typeName":"ICommunityPlatformEscalationLog"},"authorizationRoles":["moderator","admin"],"name":"at","path":"/communityPlatform/admin/escalationLogs/{escalationLogId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/escalationLogs","method":"post"},"description":"The escalation log entry must be created before it can be retrieved by its ID."}]},{"specification":"This operation creates a new escalation log entry in the platform's moderation system, enabling authorized members or moderators to escalate unresolved or ambiguous moderation cases to platform administrators. It corresponds to the community_platform_escalation_logs table in the Prisma schema. The operation validates input such as escalation reason, involved report ID, and optionally destination admin, ensuring references to valid content and actors. Upon creation, a new log is recorded for audit and compliance, which is then used for subsequent reviews and decision making. Only members with proper standing, moderators, or admins can initiate new escalations.","description":"Create an escalation log to elevate unresolved or special-case moderation reports to administrative review. This operation records a new escalation entry with details including the initiator, target report, escalation reason, destination admin (if any), and initial status.\n\nThe workflow requires precise validation: the associated report must exist and the requesting user must have a legitimate reason and role to escalate. The Prisma schema assures relational integrity with references to reports, admins, and members. All escalations are subsequently visible to assigned admins and tracked for audit purposes to ensure complete transparency of the moderation process.\n\nSecurity and abuse-prevention considerations are critical; only authenticated members, moderators, or admins may create an escalation, and all actions are thoroughly logged. Invalid references, lack of rights, or missing required information results in explicit error responses as per audit and platform policy.","summary":"Create a new escalation log entry for moderation/admin review in community_platform_escalation_logs.","parameters":[],"requestBody":{"description":"Details required to create an escalation log entry, including reason, related report, and assigned admin (if applicable).","typeName":"ICommunityPlatformEscalationLog.ICreate"},"responseBody":{"description":"The created escalation log entry with full detail.","typeName":"ICommunityPlatformEscalationLog"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/communityPlatform/moderator/escalationLogs","method":"post","authorizationRole":"moderator","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new escalation log entry in the platform's moderation system, enabling authorized members or moderators to escalate unresolved or ambiguous moderation cases to platform administrators. It corresponds to the community_platform_escalation_logs table in the Prisma schema. The operation validates input such as escalation reason, involved report ID, and optionally destination admin, ensuring references to valid content and actors. Upon creation, a new log is recorded for audit and compliance, which is then used for subsequent reviews and decision making. Only members with proper standing, moderators, or admins can initiate new escalations.","description":"Create an escalation log to elevate unresolved or special-case moderation reports to administrative review. This operation records a new escalation entry with details including the initiator, target report, escalation reason, destination admin (if any), and initial status.\n\nThe workflow requires precise validation: the associated report must exist and the requesting user must have a legitimate reason and role to escalate. The Prisma schema assures relational integrity with references to reports, admins, and members. All escalations are subsequently visible to assigned admins and tracked for audit purposes to ensure complete transparency of the moderation process.\n\nSecurity and abuse-prevention considerations are critical; only authenticated members, moderators, or admins may create an escalation, and all actions are thoroughly logged. Invalid references, lack of rights, or missing required information results in explicit error responses as per audit and platform policy.","summary":"Create a new escalation log entry for moderation/admin review in community_platform_escalation_logs.","parameters":[],"requestBody":{"description":"Details required to create an escalation log entry, including reason, related report, and assigned admin (if applicable).","typeName":"ICommunityPlatformEscalationLog.ICreate"},"responseBody":{"description":"The created escalation log entry with full detail.","typeName":"ICommunityPlatformEscalationLog"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/communityPlatform/admin/escalationLogs","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/reports","method":"post"},"description":"Report must exist before it can be escalated to an admin as an escalation log."}]},{"specification":"This operation allows a platform admin to update details of a specific escalation log entry in the moderation workflow. It is associated with the community_platform_escalation_logs table, which records instances of report escalations from moderators to admins for unresolved or complex moderation cases. The update may involve changing the escalation status, reason, resolution summary, or assigned administrator, all of which are critical for handling complaints and disputes on the platform accurately and transparently. Only admins can perform this action, due to the sensitive nature of escalated content and platform compliance requirements. The operation requires the escalation log ID as a path parameter and expects a full or partial EscalationLog update as defined by the platform's DTO schema.\n\nUpdates to escalation logs are logged for audit purposes in compliance with moderation traceability policies. The system ensures that only legitimate state changes, such as resolving, closing, or reassigning an escalation log, are permitted through this endpoint. Validators must confirm the ID's existence, the user's admin privileges, and that the escalation log is currently active before performing any updates.\n\nThis endpoint is commonly used together with the GET operation for escalation logs by ID, and may be relied upon by moderation dashboards or administrative resolution tools. Error handling must account for not found IDs, insufficient privileges, and invalid status transitions.","path":"/communityPlatform/admin/escalationLogs/{escalationLogId}","method":"put","summary":"Update a specific escalation log entry for moderation escalation (Admin only, community_platform_escalation_logs).","description":"Updates the details of a platform escalation log entry, as recorded in the community_platform_escalation_logs table. Escalation logs capture instances where a moderator or member has escalated a report or incident for admin-level attention, due to complexity, conflict of interest, or time limits.\n\nThis operation enforces that only admin-level users may perform updates, in compliance with moderation and audit policy. Updates may include changing the workflow status, assignment, escalation reason, or the resolution summary. Activity is logged for compliance, traceability, and transparency around all admin-involved moderation workflows.\n\nValidators must ensure the target escalation log exists, the admin has authority, and the status transitions are compliant with business rules (e.g., 'in_review' can transition to 'resolved' or 'closed'). Invalid transitions or unauthorized attempts trigger explicit errors. This endpoint is intended for use by moderation dashboards and compliance teams to handle high-importance content safety incidents.","parameters":[{"name":"escalationLogId","description":"Unique identifier of the escalation log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the escalation log, conforming to escalation log update DTO.","typeName":"ICommunityPlatformEscalationLog.IUpdate"},"responseBody":{"description":"The updated escalation log entry with full details.","typeName":"ICommunityPlatformEscalationLog"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/escalationLogs","method":"post"},"description":"Escalation log must be created before it can be updated for status, admin assignment, or resolution summary."}]},{"specification":"This operation allows a platform admin to permanently remove an escalation log entry from the system, as recorded in the community_platform_escalation_logs table. Escalation logs document incidents where reports or moderation issues have been escalated to admin level for resolution. Deletion of escalation logs is restricted for audit and compliance purposes, and only admins can perform this operation. The operation requires the escalation log ID as a path parameter. This represents a hard delete operation (record is removed from the system and cannot be recovered), and is only allowed when such deletion does not violate audit retention policies.","path":"/communityPlatform/admin/escalationLogs/{escalationLogId}","method":"delete","summary":"Permanently remove a specific escalation log entry (Admin only, community_platform_escalation_logs).","description":"Permanently deletes an escalation log entry from the escalation workflow in the community_platform_escalation_logs table. Used only by platform admins for purposes such as removal of erroneous escalations, privacy requests, or exceptional compliance reviews, this operation should be disabled if audit retention is required by policy. The deletion is a hard delete, as the escalation logs table does not feature a soft delete column, and once removed the information cannot be recovered.\n\nAccess checks ensure only admins may delete escalation logs. Attempted deletions against non-existent or protected escalation logs return explicit errors. This operation must be used deliberately, as it removes all trace of the record from the escalation workflow and the moderation review process.","parameters":[{"name":"escalationLogId","description":"Unique identifier of the escalation log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/escalationLogs","method":"post"},"description":"Escalation log entry must exist in order to be deleted. Creating an escalation log entry ensures that the specified escalationLogId references a valid log for deletion."}]},{"specification":"This operation retrieves a paginated and filterable list of available report categories defined in the platform. The endpoint supports use cases where clients need to display the selectable report reasons when users wish to flag content (such as posts or comments) as inappropriate. It is directly based on the community_platform_report_categories table in the Prisma schema. The operation enables searching, sorting, and pagination over category names and provides metadata such as whether each category allows free-text explanations. This endpoint is fundamental for the reporting UI and ensures that only valid, up-to-date categories are shown to users.","path":"/communityPlatform/reportCategories","method":"patch","summary":"List and search report categories (community_platform_report_categories table).","description":"Fetch a filterable, paginated list of all report categories available for reporting inappropriate content. This operation uses the community_platform_report_categories table and includes every category's display name, permission to allow free-text explanations, and time of creation and update.\n\nClients can supply search criteria, pagination parameters, or sorting preferences to tailor the list for display in content flagging interfaces. Proper use of this endpoint ensures platform-wide compliance with reporting reason policies and streamlines updates when categories are added or changed.\n\nAuthorization is not required; all authenticated users and guests may retrieve the category list. This is necessary for clients to build forms and validation logic matching current policy. Error handling ensures graceful recovery if category data is inaccessible or if search criteria are invalid.","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for finding categories (optional).","typeName":"ICommunityPlatformReportCategory.IRequest"},"responseBody":{"description":"Paginated list of report categories with metadata for reporting workflows.","typeName":"IPageICommunityPlatformReportCategory"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/reportCategories","method":"post"},"description":"At least one report category must exist in order to list or search report categories. Creating a report category ensures there is data for this endpoint to retrieve."}]},{"specification":"This operation retrieves detailed information on a single report category by its unique identifier. It is based on the community_platform_report_categories table in the Prisma schema. This API is used when a client or admin panel needs to show or validate a specific reporting reason, perhaps to display guidance or validation for user-generated reports. The result includes human-readable name, whether free-text detail is allowed, and all relevant metadata. Use this endpoint to inspect category definition or to populate data entry forms according to policy.","path":"/communityPlatform/reportCategories/{reportCategoryId}","method":"get","summary":"Retrieve a specific report category by ID (community_platform_report_categories table).","description":"Fetch the complete definition for a report category referenced by its unique identifier. The community_platform_report_categories table defines each category's name, whether free text is permitted, and associated timestamps for creation and update.\n\nThis operation is essential for validating or displaying category information on user-facing report forms or in moderation/admin review tools. It may be used for rule configuration, UI explanations, or for checking if a reporting workflow allows user input beyond the standard predefined reasons.\n\nThe endpoint requires a valid reportCategoryId, which must be a string-encoded UUID. Public access is permitted, as category definitions are not confidential.","parameters":[{"name":"reportCategoryId","description":"Target report category's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested report category for reporting UI and validation.","typeName":"ICommunityPlatformReportCategory"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/reportCategories","method":"post"},"description":"Report category must exist before it can be retrieved by its ID."}]},{"specification":"This operation creates a new report category for the content moderation and reporting system. It operates on the community_platform_report_categories table in the Prisma schema. This allows administrators to define reasons such as spam, abuse, harassment, or off-topic content, which members can use when reporting posts or comments. The operation accepts the category name and an indicator if free-text reasons are allowed for this category. Only administrators are allowed to create report categories to maintain a controlled taxonomy for moderation and analytics workflows.","description":"This API endpoint enables platform administrators to add a new standardized report category used in content flagging throughout the platform. The report category will be presented as an explicit reason in user-facing reporting dialogs, supporting both compliance and analytics around moderation flows.\n\nPermission to access this API is strictly limited to admin users, as the maintenance of report categories is a critical moderation configuration action. Use cases include adding categories for new types of abuse, evolving legal requirements, or platform policy updates.\n\nAll category names must be unique and human-readable, with the option to permit or require users filing reports to submit additional descriptive text (when allow_free_text is true). Category creation is logged for audit and compliance purposes.\n\nExpected error conditions include attempts to create duplicate categories or using disallowed category names. Resolved errors should provide actionable information to the administrator regarding the naming or input violation.","summary":"Create a new report category for content moderation/reporting (community_platform_report_categories).","parameters":[],"requestBody":{"description":"Data for the new report category, including unique name and free-text allowance.","typeName":"ICommunityPlatformReportCategory.ICreate"},"responseBody":{"description":"The newly created report category with all configured fields.","typeName":"ICommunityPlatformReportCategory"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityPlatform/admin/reportCategories","method":"post","prerequisites":[]},{"specification":"This operation allows administrators to update an existing report category in the community_platform_report_categories table. Modifications could include changing the display name or toggling whether users can provide free-text explanations when reporting content for this category. Only an administrator has the privilege to update report categories, as category governance is central to consistent moderation and analytics.","description":"This endpoint grants admin users the ability to update the properties of a report category. Updating categories is sometimes necessary to reflect evolving moderation practices, new regulatory demands, or improved reporting clarity for users. \n\nThe core attributes updatable via this endpoint are the unique name and the boolean flag permitting or requiring free-text details for reports in this category. All changes are verified against schema requirements—names must remain unique and meaningful, and structural changes should not compromise any report referencing this category.\n\nChanges are rigorously audited. Attempting to update with a duplicate name or unauthorized modifications will return descriptive errors. This flow ensures platform-wide moderation consistency and the adaptability of reporting infrastructure.","summary":"Update an existing report category (community_platform_report_categories).","parameters":[{"name":"reportCategoryId","description":"Unique identifier of the report category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the report category (e.g., new name or allow_free_text).","typeName":"ICommunityPlatformReportCategory.IUpdate"},"responseBody":{"description":"The updated report category, reflecting all applied changes.","typeName":"ICommunityPlatformReportCategory"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityPlatform/admin/reportCategories/{reportCategoryId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/reportCategories","method":"post"},"description":"Report category must exist before it can be updated."}]},{"specification":"This operation performs a hard deletion of a report category from the platform. It interacts with the community_platform_report_categories table, which stores canonical categories for reporting inappropriate content (e.g., spam, abuse, off-topic) as referenced by user content reports. Deletion will permanently remove the report category and disallow its use in future reports, but does not affect historical records where the category has already been used in reports. Only admins are allowed to delete report categories, as this operation has platform-wide impact and could affect moderation workflows.\n\nThe operation must ensure that the provided reportCategoryId exists and is not currently referenced by an active moderation workflow or report in progress. Attempting to delete a non-existent or in-use category should yield an appropriate error response, and no cascading deletions of reports are performed—historical data preservation is enforced.\n\nThis endpoint should be applied rarely, with audit logs or traceability required for legal and compliance review. It is typically paired with index and create/report category management APIs that allow admins to safely manage report reasons.","description":"Delete a specific report category from the set of platform-supported reporting reasons. This is a permanent removal—the report category is no longer available for selection when users file content reports. The operation ensures data integrity by disallowing deletion if the category is in use by unresolved or active reports, avoiding accidental orphaning of moderation workflows or untraceable report references.\n\nOnly users with the admin role can execute this deletion. Adequate safeguards must be in place to prevent the removal of report categories which might impact in-use moderation or abuse workflows. The system should provide clear error feedback if deletion is denied due to referential integrity checks or if the category does not exist.\n\nThis endpoint works in conjunction with index, creation, or update operations on report categories, and is vital for platform policy evolution or refinement of moderation terminology. All actions must be recorded in the audit logs for compliance and accountability at the administrative level.","summary":"Delete a report category (community_platform_report_categories table) by ID","parameters":[{"name":"reportCategoryId","description":"Unique identifier of the report category to permanently remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/communityPlatform/admin/reportCategories/{reportCategoryId}","method":"delete","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/reportCategories","method":"post"},"description":"Report category must exist before it can be deleted."}]},{"specification":"This operation retrieves a filtered, paginated list of current karma ledger records for platform members. It operates on the community_platform_karma_ledgers table, which holds per-member (and optionally per-community) current karma values, gating information, and the business state of the member's karma. The endpoint allows searching by member ID, community, currentKarma thresholds, and other filtering criteria needed to support admin or user-facing dashboards, moderation tooling, and user profile displays.\n\nThis endpoint enables platform operators or authorized users to view and analyze the karma standing of members for permission checks or feature gating enforcement, as outlined in business rules. The returned data supports pagination, sorting, and flexible querying, and will typically be used alongside profile and member search endpoints to contextualize user engagement. Only admins should have unrestricted access; members should only view their own or public karma records.","description":"Retrieve a paginated, filterable list of karma ledgers representing the current karma state for members across the platform and per community. Use advanced query capabilities to filter on member ID, community, and currentKarma ranges. This operation provides supporting information for profile pages, admin dashboards, and feature access audits.\n\nThe operation returns a paginated result set, enabling large-scale analysis as well as individual lookups. Security must restrict broad access to admin roles or, where applicable, allow members to view only their own records. The endpoint is not intended for bulk mutation of karma but serves as a read access point for score analysis, moderation, or feature gating based on business rules.\n\nThe response object must follow the paginated response standard, using summary DTOs relevant to karma ledgers, and must avoid exposing sensitive or irrelevant member data. Integrate with index or search endpoints for members as appropriate for context and drilldown capabilities.","summary":"Search, filter, and paginate karma ledgers (community_platform_karma_ledgers)","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for karma ledger retrieval","typeName":"ICommunityPlatformKarmaLedger.IRequest"},"responseBody":{"description":"Paginated, filtered list of current karma ledger records with summary info.","typeName":"IPageICommunityPlatformKarmaLedger.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/communityPlatform/admin/karmaLedgers","method":"patch","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaLedgers","method":"post"},"description":"At least one karma ledger record must exist to perform a search or filter operation; creating a record ensures there is data for index operations."}]},{"specification":"Retrieves a specific karma ledger entry for a platform member or within a specific community. Operates on the community_platform_karma_ledgers table, aggregating the current karma for members globally or per-community. Used to check feature gates, display profile status, or enforce restrictions based on karma. Requires a valid ledger id (UUID).","path":"/communityPlatform/member/karmaLedgers/{karmaLedgerId}","method":"get","summary":"Retrieve a karma ledger record by id (community_platform_karma_ledgers)","description":"This API returns a detailed record for a member's karma (and optionally community-specific karma) from the community_platform_karma_ledgers table using its unique identifier. This enables user profile pages, feature checks, and moderation panels to reflect current karma and feature lock status. Accessible to any authenticated \"member\"; errors returned if id is not found, deleted, or restricted.","parameters":[{"name":"karmaLedgerId","description":"The UUID of the karma ledger to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed karma ledger entry and metadata","typeName":"ICommunityPlatformKarmaLedger"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaLedgers","method":"post"},"description":"A karma ledger must be created before it can be retrieved by its ID."}]},{"specification":"Creates a new karma ledger entry for a member, optionally scoped to a community. Only valid for admin-level service logic or audit/bootstrapping flows, never general user calls. Operates on the community_platform_karma_ledgers table, which tracks point balances and feature locks for members. Enforces uniqueness of (member_id, community_id).","path":"/communityPlatform/admin/karmaLedgers","method":"post","summary":"Create a karma ledger entry for a member (optionally per-community) via community_platform_karma_ledgers","description":"Creates a new karma ledger record, initializing point balances (current_karma field) for a member either platform-wide or scoped to a given community. Reserved for 'admin' operations, not general users. Request requires member_id, may specify a community_id, with constraints enforced. Fails if entry exists for member/community pair. Successful response returns the new ledger entry.","parameters":[],"requestBody":{"description":"Creation details: member UUID, optional community UUID, business context for new ledger","typeName":"ICommunityPlatformKarmaLedger.ICreate"},"responseBody":{"description":"The newly created karma ledger record","typeName":"ICommunityPlatformKarmaLedger"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before creating a karma ledger entry scoped to a community. This ensures the provided community_id is valid and references an existing community resource."}]},{"specification":"This operation allows updating an existing karma ledger record for a platform member, optionally scoped to a community. It enables administrators to modify the member's current karma balance, update lockout reasons that gate feature access, or adjust audit timestamps. This is a privileged operation intended for enforcing platform rules, correcting errors, or unblocking users who hit karma barriers. All modifications are subject to strict logging and audit trails for compliance and abuse prevention. The operation targets the community_platform_karma_ledgers Prisma table, which uniquely tracks each member's current karma and gating reason per community or globally.","description":"Update a specific karma ledger entry for a member, either globally or for a specific community, allowing changes to the current_karma value, feature_lock_reason, or associated timestamps.\n\nThe primary business use cases include administrator-initiated corrections for karma miscalculation, granting exceptions, or enforcing disciplinary adjustments outside of standard voting workflows. Only high-privilege roles (e.g., admin) should be permitted to modify a user's karma via this endpoint, as improper changes could affect important access controls or platform integrity.\n\nThis operation interfaces with the community_platform_karma_ledgers table as described in the Prisma schema. Each record ties a member's ID to either a global or per-community karma context, with 'current_karma' and a possible 'feature_lock_reason'.\n\nAll updates must be fully validated: negative karma is possible (per policy), but setting values should respect business policies (not allow uncontrolled inflation/deflation unless intended). Each update should be logged via the community_platform_audit_logs table for traceability.\n\nError handling considerations include invalid ledger IDs, updates to non-existent or deleted ledgers, or attempts to overwrite with disallowed values per policy.","summary":"Update an existing karma ledger entry for a member or community (community_platform_karma_ledgers table)","parameters":[{"name":"karmaLedgerId","description":"Unique identifier of the karma ledger record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the given karma ledger (current_karma, reason, timestamps, etc.).","typeName":"ICommunityPlatformKarmaLedger.IUpdate"},"responseBody":{"description":"The updated karma ledger entry including member/community association, current_karma, feature lock reason, and audit timestamps.","typeName":"ICommunityPlatformKarmaLedger"},"authorizationRoles":["admin"],"name":"update","path":"/communityPlatform/admin/karmaLedgers/{karmaLedgerId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaLedgers","method":"post"},"description":"A karma ledger record must exist before it can be updated. Use this operation to create the karma ledger for the member or community before attempting to update it."}]},{"specification":"This operation permanently deletes a karma ledger record for a member, either globally or for a specific community. It interacts with the community_platform_karma_ledgers table in the Prisma schema, which maintains the current karma score and any gating reasons for member accounts. As there is no soft delete field in the schema, the operation performs a hard delete, removing the record entirely from the database. This action is irreversible and can only be performed by high-privilege roles such as admin, as it directly impacts user access and platform business rules.","description":"Delete a specific karma ledger entry for a user, either globally or for a community, from the community_platform_karma_ledgers table.\n\nPermanently removing a ledger disables associated feature or policy gating checks for that member in the relevant context. This operation is typically used for manual correction in rare circumstances or as part of account purging processes. Only admins should be allowed to perform hard deletions due to the risk of breaking business logic that depends on karma for feature gating or permission controls.\n\nThis is a hard delete according to the Prisma schema—no soft delete or recovery mechanism exists. Once removed, all information about the current_karma and feature lock reason is lost, with the change ideally logged in system audit logs for compliance.\n\nHandling of invalid IDs, non-existent targets, or already-purged ledgers should return proper error messages. The action should be auditable by referencing an associated log entry in admin workflows.","summary":"Permanently remove (hard delete) a karma ledger from the community_platform_karma_ledgers table by ID.","parameters":[{"name":"karmaLedgerId","description":"Unique identifier of the target karma ledger to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/communityPlatform/admin/karmaLedgers/{karmaLedgerId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaLedgers","method":"post"},"description":"Karma ledger must be created before it can be deleted. The delete operation requires a valid karmaLedgerId, which can only be obtained by creating a karma ledger first."}]},{"specification":"This operation allows searching and retrieving a paginated list of karma penalty records associated with platform members. Operates on the community_platform_karma_penalties table. Enables advanced filtering and querying of penalties by member, community, type, status, or timeframe as needed for moderation views, account management, or analytical reporting. Returns paginated results to support large datasets and list navigation. Intended for administrative or moderator review of karma penalty enforcement and history across users and communities.","path":"/communityPlatform/admin/karmaPenalties","method":"patch","summary":"Search and retrieve a paginated list of karma penalties (community_platform_karma_penalties)","description":"Retrieve a filtered, paginated list of karma penalties assigned to platform members. This operation supports advanced filtering on penalty type, status, member, community, or time range, making it suitable for reviewing moderation actions, account restrictions, or penalty analytics.\n\nSecurity considerations: This endpoint is intended for administrative or moderation use due to sensitive enforcement data. Access should be permitted only to roles responsible for user sanctions and moderation policy. Data returned is restricted to authorized actors and must adhere to privacy and audit guidelines.\n\nThis operation interacts directly with the community_platform_karma_penalties table, providing all penalty fields, relations to members and communities, and relevant metadata for each penalty record. It supports pagination, sorting, and search. Potential dependencies include user/member lookup APIs for context enrichment. Error handling covers invalid filters, permission denial, and data access violations.","parameters":[],"requestBody":{"description":"Criteria, filters, pagination, and sorting options for listing karma penalties.","typeName":"ICommunityPlatformKarmaPenalty.IRequest"},"responseBody":{"description":"Paginated list of karma penalty summary records matching the query.","typeName":"IPageICommunityPlatformKarmaPenalty.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaPenalties","method":"post"},"description":"Karma penalty must be created before it can be searched or listed. The index operation requires existing karma penalties to return in the results, which are created through the POST operation."}]},{"specification":"This operation allows searching and retrieving a paginated list of karma penalty records associated with platform members. Operates on the community_platform_karma_penalties table. Enables advanced filtering and querying of penalties by member, community, type, status, or timeframe as needed for moderation views, account management, or analytical reporting. Returns paginated results to support large datasets and list navigation. Intended for administrative or moderator review of karma penalty enforcement and history across users and communities.","path":"/communityPlatform/moderator/karmaPenalties","method":"patch","summary":"Search and retrieve a paginated list of karma penalties (community_platform_karma_penalties)","description":"Retrieve a filtered, paginated list of karma penalties assigned to platform members. This operation supports advanced filtering on penalty type, status, member, community, or time range, making it suitable for reviewing moderation actions, account restrictions, or penalty analytics.\n\nSecurity considerations: This endpoint is intended for administrative or moderation use due to sensitive enforcement data. Access should be permitted only to roles responsible for user sanctions and moderation policy. Data returned is restricted to authorized actors and must adhere to privacy and audit guidelines.\n\nThis operation interacts directly with the community_platform_karma_penalties table, providing all penalty fields, relations to members and communities, and relevant metadata for each penalty record. It supports pagination, sorting, and search. Potential dependencies include user/member lookup APIs for context enrichment. Error handling covers invalid filters, permission denial, and data access violations.","parameters":[],"requestBody":{"description":"Criteria, filters, pagination, and sorting options for listing karma penalties.","typeName":"ICommunityPlatformKarmaPenalty.IRequest"},"responseBody":{"description":"Paginated list of karma penalty summary records matching the query.","typeName":"IPageICommunityPlatformKarmaPenalty.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaPenalties","method":"post"},"description":"Karma penalty records must exist before they can be searched or paginated. Penalties are created via this operation."}]},{"specification":"This operation retrieves the complete detail of a single karma penalty record by its unique identifier. It accesses the community_platform_karma_penalties table to fetch all fields including member, community (if any), penalty type, value, reason, status, and timeframes. Used for moderation UIs, audit logs, or detailed penalty review. Ensures only appropriate roles with permission may view sensitive sanction information.","path":"/communityPlatform/admin/karmaPenalties/{karmaPenaltyId}","method":"get","summary":"Retrieve details of a specific karma penalty (community_platform_karma_penalties) by ID","description":"Fetch detailed information for a specific karma penalty assigned to a platform member. Returns all penalty attributes, including references to the associated member, optional community context, penalty type (deduction, suspension, etc.), status, value, reason, time span, and soft deletion flag if applicable.\n\nThis operation is designed for use by administrators and moderators who require access to enforcement details for audit, user account interventions, or appeals. Unauthorized users are denied access due to the privacy and sensitivity of sanction information. Related APIs may include member lookups or community reference endpoints for context.\n\nError handling includes not found (invalid or revoked ID), permission denial, and attempt to access penalties outside the user's moderation scope.","parameters":[{"name":"karmaPenaltyId","description":"Unique identifier of the target karma penalty record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed data for the requested karma penalty record.","typeName":"ICommunityPlatformKarmaPenalty"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaPenalties","method":"post"},"description":"A specific karma penalty must be created before its detailed information can be retrieved by ID."}]},{"specification":"This operation retrieves the complete detail of a single karma penalty record by its unique identifier. It accesses the community_platform_karma_penalties table to fetch all fields including member, community (if any), penalty type, value, reason, status, and timeframes. Used for moderation UIs, audit logs, or detailed penalty review. Ensures only appropriate roles with permission may view sensitive sanction information.","path":"/communityPlatform/moderator/karmaPenalties/{karmaPenaltyId}","method":"get","summary":"Retrieve details of a specific karma penalty (community_platform_karma_penalties) by ID","description":"Fetch detailed information for a specific karma penalty assigned to a platform member. Returns all penalty attributes, including references to the associated member, optional community context, penalty type (deduction, suspension, etc.), status, value, reason, time span, and soft deletion flag if applicable.\n\nThis operation is designed for use by administrators and moderators who require access to enforcement details for audit, user account interventions, or appeals. Unauthorized users are denied access due to the privacy and sensitivity of sanction information. Related APIs may include member lookups or community reference endpoints for context.\n\nError handling includes not found (invalid or revoked ID), permission denial, and attempt to access penalties outside the user's moderation scope.","parameters":[{"name":"karmaPenaltyId","description":"Unique identifier of the target karma penalty record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed data for the requested karma penalty record.","typeName":"ICommunityPlatformKarmaPenalty"},"authorizationType":null,"authorizationRole":"moderator","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaPenalties","method":"post"},"description":"A karma penalty must be created before its details can be retrieved by ID."}]},{"specification":"This operation allows privileged actors (platform admins or authorized moderators) to assign a karma penalty to a member for rule violations or moderation events. It directly creates a new record in the 'community_platform_karma_penalties' table of the Prisma schema, tracking deductions, suspensions, or negative consequences to a user's karma either platform-wide or in a specific community. This API enforces business logic regarding penalty types, records the amount, affected user, scope, and penalty reason, and timestamps application. Such penalties can lead to loss of posting privileges or other engagement restrictions as dictated by current business rules. No direct end-user access; only called as part of moderation, appeals, or rule-enforcement flows.","description":"Use this API to impose a karma penalty on a user. Moderators and admins may call this endpoint after reviewing violations, confirmed abuse, or as part of escalation. All penalty types (deduction, suspension, etc.) must comply with bounds set by platform policy. The penalty is applied immediately, and the affected user's karma will be updated per the business logic and referenced in their profile and permissions-checks. All penalty assignments are logged for audit and compliance visibility.\n\nOnly members with appropriate role and valid authentication may call this API, typically from the moderation console, not by ordinary users. Attempts to create penalties exceeding allowed limits or with invalid parameters will result in clear error messages with reason codes. Related endpoints include the karma ledger for current state and penalties/query for user history.","summary":"Create a karma penalty for a member (admin/moderator only, community_platform_karma_penalties table)","parameters":[],"requestBody":{"description":"Karma penalty creation payload conforming to required fields (member, penalty type, value, reason, optional community scope)","typeName":"ICommunityPlatformKarmaPenalty.ICreate"},"responseBody":{"description":"The newly created karma penalty record, as persisted in the database","typeName":"ICommunityPlatformKarmaPenalty"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/communityPlatform/admin/karmaPenalties","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The target community must exist before assigning a karma penalty scoped to that community."}]},{"specification":"This operation allows privileged actors (platform admins or authorized moderators) to assign a karma penalty to a member for rule violations or moderation events. It directly creates a new record in the 'community_platform_karma_penalties' table of the Prisma schema, tracking deductions, suspensions, or negative consequences to a user's karma either platform-wide or in a specific community. This API enforces business logic regarding penalty types, records the amount, affected user, scope, and penalty reason, and timestamps application. Such penalties can lead to loss of posting privileges or other engagement restrictions as dictated by current business rules. No direct end-user access; only called as part of moderation, appeals, or rule-enforcement flows.","description":"Use this API to impose a karma penalty on a user. Moderators and admins may call this endpoint after reviewing violations, confirmed abuse, or as part of escalation. All penalty types (deduction, suspension, etc.) must comply with bounds set by platform policy. The penalty is applied immediately, and the affected user's karma will be updated per the business logic and referenced in their profile and permissions-checks. All penalty assignments are logged for audit and compliance visibility.\n\nOnly members with appropriate role and valid authentication may call this API, typically from the moderation console, not by ordinary users. Attempts to create penalties exceeding allowed limits or with invalid parameters will result in clear error messages with reason codes. Related endpoints include the karma ledger for current state and penalties/query for user history.","summary":"Create a karma penalty for a member (admin/moderator only, community_platform_karma_penalties table)","parameters":[],"requestBody":{"description":"Karma penalty creation payload conforming to required fields (member, penalty type, value, reason, optional community scope)","typeName":"ICommunityPlatformKarmaPenalty.ICreate"},"responseBody":{"description":"The newly created karma penalty record, as persisted in the database","typeName":"ICommunityPlatformKarmaPenalty"},"authorizationType":null,"authorizationRole":"moderator","name":"create","path":"/communityPlatform/moderator/karmaPenalties","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/subscriptions","method":"post"},"description":"Member must exist (as penalty target) before a penalty can be assigned. Creating a subscription requires the member to be created, and a member_id is then available for reference in assigning the penalty."}]},{"specification":"This operation updates an existing karma penalty record from the 'community_platform_karma_penalties' table. Used by authorized actors (admin or moderator) to modify details such as penalty status, extension/expiration, or correct a penalty entry after review or appeal. Enforces business logic on which fields may be updated and maintains strict auditability for all changes. Only actors with appropriate authorization should access this endpoint. Modifications may impact user restrictions, permissions, or feature gating depending on the resultant penalty state.","description":"This endpoint enables a privileged user to update an existing karma penalty imposed on a member. Typical use cases include completing a manual review, reactivating, expiring, or revoking a penalty, or correcting errors from prior entries. All updates are strictly validated—certain fields such as penalty status, penalty value, and expiration can be changed under policy. The operation logs the change for compliance and notifies affected users as prescribed by the business flow.\n\nOnly users with proper administrative or moderation role may call this. Errors due to unauthorized access, transition to invalid penalty states, or attempts to edit immutable fields will be met with informative error responses recorded in the audit log. Related operations include penalty history and ledger queries.","summary":"Update an existing karma penalty by ID (admin/moderator only, community_platform_karma_penalties table)","parameters":[{"name":"karmaPenaltyId","description":"Unique identifier for the karma penalty record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the karma penalty (fields allowed by business policy)","typeName":"ICommunityPlatformKarmaPenalty.IUpdate"},"responseBody":{"description":"The updated karma penalty record after modification","typeName":"ICommunityPlatformKarmaPenalty"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/communityPlatform/admin/karmaPenalties/{karmaPenaltyId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/karmaPenalties","method":"post"},"description":"A karma penalty record must exist before it can be updated via this endpoint. The POST operation creates the initial penalty for a member; only then can PUT be used to modify it."}]},{"specification":"This operation updates an existing karma penalty record from the 'community_platform_karma_penalties' table. Used by authorized actors (admin or moderator) to modify details such as penalty status, extension/expiration, or correct a penalty entry after review or appeal. Enforces business logic on which fields may be updated and maintains strict auditability for all changes. Only actors with appropriate authorization should access this endpoint. Modifications may impact user restrictions, permissions, or feature gating depending on the resultant penalty state.","description":"This endpoint enables a privileged user to update an existing karma penalty imposed on a member. Typical use cases include completing a manual review, reactivating, expiring, or revoking a penalty, or correcting errors from prior entries. All updates are strictly validated—certain fields such as penalty status, penalty value, and expiration can be changed under policy. The operation logs the change for compliance and notifies affected users as prescribed by the business flow.\n\nOnly users with proper administrative or moderation role may call this. Errors due to unauthorized access, transition to invalid penalty states, or attempts to edit immutable fields will be met with informative error responses recorded in the audit log. Related operations include penalty history and ledger queries.","summary":"Update an existing karma penalty by ID (admin/moderator only, community_platform_karma_penalties table)","parameters":[{"name":"karmaPenaltyId","description":"Unique identifier for the karma penalty record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the karma penalty (fields allowed by business policy)","typeName":"ICommunityPlatformKarmaPenalty.IUpdate"},"responseBody":{"description":"The updated karma penalty record after modification","typeName":"ICommunityPlatformKarmaPenalty"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/communityPlatform/moderator/karmaPenalties/{karmaPenaltyId}","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/karmaPenalties","method":"post"},"description":"A karma penalty must exist before it can be updated by ID. This POST operation creates the karma penalty record in the community_platform_karma_penalties table, which is required prior to using this update endpoint."}]},{"specification":"This operation retrieves a paginated, filterable history of karma-affecting events (such as upvotes, downvotes, penalties, and rewards) for users in the community platform. It uses search and filter criteria as request body and returns structured history results sourced from the community_platform_karma_history table, optionally joined to posts, comments, and communities. The purpose is to support user profile displays, audit reviews, or for users and administrators to review karma flows and justifications for reward/penalty. The system supports sorting by event time, type, affected community, etc. Access is restricted to authenticated members and above.","description":"This API endpoint allows authenticated users to search, filter, and paginate through the history of their own (or, with proper authorization, others') karma-affecting events as tracked in the 'community_platform_karma_history' table. Events may include post votes, comment votes, moderation penalties, reward events, and system/admin adjustments. \n\nRequest parameters may specify page size, offset, event types, time ranges, affected resource IDs (post, comment, community), and sort order. The endpoint supports advanced queries for self-service user insights, profile displays, and compliance investigation by moderators/admins. \n\nSecurity ensures only users with proper roles access data; regular users see their own event histories, while moderators/admins may access histories for others if they have reason. The response includes relevant event metadata, joined references to posts, comments, and community context where available, using summary details to avoid data overload. The standard error handling covers pagination parameter errors, unauthorized access attempts, and internal server issues.","summary":"Retrieve a filtered, paginated history of karma events from the community_platform_karma_history table.","parameters":[],"requestBody":{"description":"Search and pagination criteria for karma history retrieval, including event type, resource scope, date range, sort order, and pagination settings.","typeName":"ICommunityPlatformKarmaHistory.IRequest"},"responseBody":{"description":"Paginated list of karma-affecting events, including event details and references to affected posts/comments/communities, suitable for user profile display and auditing.","typeName":"IPageICommunityPlatformKarmaHistory"},"authorizationType":null,"authorizationRole":"member","name":"index","path":"/communityPlatform/member/karmaHistory","method":"patch","prerequisites":[{"endpoint":{"path":"/communityPlatform/moderator/karmaPenalties","method":"post"},"description":"A karma penalty must be created (using the moderator privilege POST operation) before any penalty-related events will appear in a user's karma history. This ensures that penalty records are available to be listed in history queries."}]},{"specification":"This operation permanently removes a specific karma penalty record identified by its unique ID from the community_platform_karma_penalties table. This deletion is irreversible and is used for administrative correction or policy-based removal when a penalty was assigned in error or is no longer applicable. Standard users cannot access this operation. Only platform admins or assigned moderators with appropriate permissions may perform this action. The operation directly targets the 'id' field in the karma penalties table, and upon successful completion, the penalty is erased from the system, affecting the penalty history and feature lock status of the associated user.","description":"This API endpoint enables authorized administrative actors to permanently delete a karma penalty entry from the system. The primary use case is to remove penalties that were incorrectly imposed or should be lifted ahead of automatic expiration. The operation directly references the 'community_platform_karma_penalties' table, with 'id' serving as the unique identifier for deletion. \n\nSecurity restrictions are strictly enforced: only users with 'admin' or designated 'moderator' roles can invoke this endpoint. A full audit log of the action should be maintained separately for compliance. No soft-delete or reversible behavior is provided, as 'deleted_at' is for logical deletion and here actual removal is intended per admin/moderator intent. \n\nCare must be taken to ensure the referenced penalty still exists and has not previously been deleted or revoked. The system should handle and communicate errors such as 'penalty not found' or 'already deleted.' No request or response body is returned aside from standard success/error signaling.","summary":"Permanently remove a karma penalty from the community_platform_karma_penalties table by ID.","parameters":[{"name":"karmaPenaltyId","description":"Unique identifier of the karma penalty to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/communityPlatform/admin/karmaPenalties/{karmaPenaltyId}","method":"delete","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaPenalties","method":"post"},"description":"Karma penalty must exist before it can be deleted; a penalty must first be created using the POST operation before its permanent removal is possible."}]},{"specification":"This operation retrieves the details of a specific karma history record for a user. It is based on the 'community_platform_karma_history' Prisma table, which records every karma-affecting event (such as upvotes, downvotes, moderation penalties, or awards) with references to the affected member, community (optional), post, or comment as well as event type, change amount, event context, and time. This endpoint enables users and moderators to trace the precise karma event for auditing, transparency, and debugging purposes. It supports profile pages, community moderation analytics, and member audit histories.","path":"/communityPlatform/member/karmaHistory/{karmaHistoryId}","method":"get","summary":"Retrieve a specific karma history record by ID from the karma history table.","description":"This operation returns detailed information for a single karma history event, such as when a user's content (post or comment) was voted on, moderated, or otherwise changed their user karma.\n\nThe API checks for existence of the record by the given karmaHistoryId (UUID) and returns the entire record, including references to the member, optional community, related post/comment, event type, change amount, event context, and timestamps. Proper authorization is enforced so that members can only see their own detailed karma history and moderators/admins can audit members if needed.\n\nTypical usages include displaying the full breakdown of a member's karma changes in their profile, supporting moderation analytics, or providing an audit trail for compliance or user dispute resolution. Errors for not found, unauthorized, or insufficient permission are returned according to policy. This endpoint integrates directly with the community_platform_karma_history table as defined in the Prisma schema.","parameters":[{"name":"karmaHistoryId","description":"Unique identifier of the target karma history record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the requested karma history record.","typeName":"ICommunityPlatformKarmaHistory"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaAwards","method":"post"},"description":"A karma history record for a member can reference karma awards. To retrieve a specific karma history by ID, at least one award event must exist; thus, a karma award event must be created first for history retrieval testing."},{"endpoint":{"path":"/communityPlatform/admin/karmaPenalties","method":"post"},"description":"A karma history entry may be generated from penalties (deductions, suspensions, etc.) being applied. Thus, creating a karma penalty for a member ensures a corresponding karma history event can be retrieved by its ID."}]},{"specification":"This operation retrieves a filtered, paginated list of karma threshold records. It uses the 'community_platform_karma_thresholds' Prisma table, which governs minimum karma values for unlocking or restricting features at the platform or community level. This search endpoint allows admins to search for thresholds by type (e.g., post creation, subscription), by community, or other fields, and returns all matching thresholds with pagination.","path":"/communityPlatform/admin/karmaThresholds","method":"patch","summary":"Search and retrieve paginated karma threshold definitions.","description":"This operation enables admins to search the list of karma thresholds, which control gating/unlocking of features based on user community or global karma scores. Supported filters may include threshold type (such as 'post_creation', 'comment_voting'), target community, or global thresholds. Pagination and sorting parameters are included in the request body for efficient querying of potentially large datasets.\n\nThis operation interacts with the community_platform_karma_thresholds table as described in the Prisma schema documentation. It is used to configure and audit platform or community rules regarding karma-gated features. Errors are handled for invalid queries or access by unauthorized roles. Only platform administrators are permitted to perform this operation, protecting the integrity of feature gating.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination criteria for karma thresholds search.","typeName":"ICommunityPlatformKarmaThreshold.IRequest"},"responseBody":{"description":"Paginated list of karma threshold definitions matching the provided criteria.","typeName":"IPageICommunityPlatformKarmaThreshold"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist before searching for karma thresholds scoped to that community."}]},{"specification":"This operation retrieves detailed information about a specific community karma threshold configuration, as defined in the community_platform_karma_thresholds table. It is used to obtain the required karma settings for key business features (such as posting, voting, or subscriptions) at the platform or community level. This API accepts a unique karmaThresholdId and returns all configuration data, including threshold types, values, feature lock reasons, and related community context if set.","description":"Retrieve the details of a single karma threshold configuration for the platform or a specific community. This operation provides full information about the threshold requirement, such as the threshold type (e.g., post_creation, comment_voting), required karma value, and optional feature lock reason for feature gating. \n\nThe API is used by frontend and backend services to enforce permissions or display feature requirements to users. Only authorized roles with access to platform settings or moderation features can access this information if the threshold is configured as private. The karma threshold belongs to the community_platform_karma_thresholds table, using a UUID identifier for lookup.\n\nIf the requested karmaThresholdId does not exist or is not accessible by the current user role, the operation will return an appropriate error. No sensitive or internal data is exposed; response contains only public-meaningful configuration details. This operation is often coupled with update or creation endpoints for administrative or moderation workflows.","summary":"Get details of a specific community karma threshold configuration (community_platform_karma_thresholds)","parameters":[{"name":"karmaThresholdId","description":"The unique identifier (UUID) of the target karma threshold configuration","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested karma threshold configuration, including threshold type, value, feature lock reason, and optional community context","typeName":"ICommunityPlatformKarmaThresholds"},"authorizationRoles":["admin"],"name":"at","path":"/communityPlatform/admin/karmaThresholds/{karmaThresholdId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaThresholds","method":"post"},"description":"Karma threshold must be created before retrieving its details."}]},{"specification":"This operation creates a new karma threshold configuration for the platform or for a specific community, as defined in the community_platform_karma_thresholds table. Administrators use this API to set rules for feature gating, such as the minimum required karma to post, vote, or subscribe. The request requires data including threshold type, threshold value, related community (or platform-wide), and optional feature lock reason. The response returns the full created configuration object.","description":"Create a new karma threshold setting to control feature access on the platform or within a community. This API is utilized by administrators or platform operators to set the minimum karma required to perform key actions (e.g., post creation, voting, or unlocking features) by specifying threshold_type, threshold_value, community ID (if applicable), and any additional lock reason.\n\nUpon successful creation, the operation stores the record in the community_platform_karma_thresholds table and returns the newly created object. Incoming requests are validated for duplicates (unique threshold types per community), reasonable karma values, and valid associations to existing communities. Access is restricted to platform administrators, and audit logs are generated for compliance.\n\nErrors may be returned if validation, uniqueness, or referencing constraints are violated, such as attempting to set multiple thresholds of the same type for a community or specifying a non-existent community. Related API operations include updating or deleting threshold configurations as feature policies change.","summary":"Create a new karma threshold configuration (community_platform_karma_thresholds)","parameters":[],"requestBody":{"description":"Information needed to create a new karma threshold, including required karma value, feature type, lock reason, and (optional) target community","typeName":"ICommunityPlatformKarmaThresholds.ICreate"},"responseBody":{"description":"The newly created karma threshold configuration entry, including all threshold details and references.","typeName":"ICommunityPlatformKarmaThresholds"},"authorizationRoles":["admin"],"name":"create","path":"/communityPlatform/admin/karmaThresholds","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a karma threshold can be set for it. A threshold with a non-null community_platform_community_id requires the referenced community to exist in the system."}]},{"specification":"This operation updates a karma threshold entry in the community_platform_karma_thresholds table. It requires the karmaThresholdId path parameter, which must be a UUID corresponding to the primary key of the target row. The operation is used by administrators to modify existing karma thresholds, such as updating the required points, threshold type (e.g., post creation, voting), or feature lock reason, either globally or scoped to a community. The request body must follow the ICommunityPlatformKarmaThreshold.IUpdate schema, containing only fields that can be changed by an admin. The updated entry is returned in the response, providing administrators with confirmation of the new values. This operation is crucial for enforcing business logic related to feature access, karma gating, and policy adjustments, ensuring the platform can dynamically manage user permissions and progression systems in response to community needs and policy changes. Strict validation is required to avoid threshold conflicts and to ensure that changes meet system-wide business rules.","description":"Update an existing karma threshold by its unique identifier. The karma_platform_karma_thresholds table manages configurable thresholds for karma-based restrictions, such as limitations on posting, voting, or community actions.\n\nThis operation is restricted to admin users, who have the authority to modify thresholds that impact platform permissions. Appropriate validation should ensure updated threshold values are within allowed business constraints, do not create duplicate entries within the same scope (global or community), and that required fields are present. The system must reject updates that would violate platform policy or create inconsistencies.\n\nUpon successful update, the complete threshold entry is returned for client validation and audit purposes. Error handling must provide informative feedback for any rejected update attempts, specifying constraint violations or business rule failures encountered.","summary":"Update a karma threshold entry in the community_platform_karma_thresholds table by its ID.","parameters":[{"name":"karmaThresholdId","description":"Unique identifier of the karma threshold setting to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The set of fields to update on the specified karma threshold.","typeName":"ICommunityPlatformKarmaThreshold.IUpdate"},"responseBody":{"description":"The updated karma threshold entry.","typeName":"ICommunityPlatformKarmaThreshold"},"authorizationRole":"admin","authorizationType":null,"path":"/communityPlatform/admin/karmaThresholds/{karmaThresholdId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaThresholds","method":"post"},"description":"A karma threshold configuration must exist before it can be updated. Use this operation to create the karma threshold before attempting to update it."}]},{"specification":"This operation deletes a karma threshold entry from the community_platform_karma_thresholds table by its unique ID. The karmaThresholdId parameter is used to identify the specific threshold to be deleted. Deletion is a hard delete as there is no soft delete field (e.g., deleted_at) in this model schema, permanently removing the record from the database. Only admin-level users may perform this operation. It is usually used for policy changes where specific karma restrictions are removed or need redefinition. The operation has no request or response body and must handle errors if the specified threshold does not exist or if the operation would cause business-rule violations (e.g., deleting a critical system rule).","description":"Permanently remove an existing karma threshold configuration from the database by its unique ID. The community_platform_karma_thresholds table stores minimum karma requirements for actions such as posting or subscribing.\n\nThis operation supports platform reconfiguration and policy evolution, allowing the removal of obsolete or unnecessary feature gates. Admin-only access ensures proper auditing and authority. There is no soft-delete for this table, so once deleted, the record and its associated settings are unrecoverable.\n\nCare should be taken to ensure that deletion does not cause users to bypass necessary restrictions or break downstream business logic; potentially critical rules should be confirmed prior to deletion. Error handling must cover cases where the target threshold does not exist or is already deleted, with clear, non-ambiguous error responses.","summary":"Delete a karma threshold entry from the community_platform_karma_thresholds table by its unique ID (hard delete).","parameters":[{"name":"karmaThresholdId","description":"Unique identifier of the karma threshold setting to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"path":"/communityPlatform/admin/karmaThresholds/{karmaThresholdId}","method":"delete","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaThresholds","method":"post"},"description":"Karma threshold must exist before it can be deleted; the creation operation inserts the record being targeted by this delete."}]},{"specification":"This operation retrieves a paginated list of karma award records for users across the platform. It operates on the community_platform_karma_awards table of the Prisma schema, supporting advanced filtering, sorting, and pagination. Filtering may include criteria such as member ID, community ID, award type, event time range, and support for searching award descriptions. The endpoint is key to powering admin overviews, user profile listing of badges, and analytics dashboards for karma achievements.","description":"Retrieve a filtered and paginated listing of karma awards (reward events/badges) granted to users, providing advanced query capabilities for platform operators or for displaying award lists in user profiles.\n\nThe operation is applicable for administrative or analytic purposes and allows searching by member, specific community, award type, description, and event time. It is used to display badges or trophies in user profiles, or to track global and community-specific reward trends.\n\nSecurity is restricted to administrative roles; regular users do not have access to the full award list in bulk. Care must be taken not to expose private data, such as linkage to hidden communities, without proper authorization.\n\nThis operation integrates with the community_platform_karma_awards table, returning paginated records in a summary view. It supports response limits, sorting by event_time or award_type, and should handle error cases such as malformed query filters or permission violations appropriately.","summary":"Search and retrieve a paginated list of user karma awards","parameters":[],"requestBody":{"description":"Search and filter parameters for querying karma awards, including pagination, member/community targeting, and award type filters.","typeName":"ICommunityPlatformKarmaAward.IRequest"},"responseBody":{"description":"A paginated list of karma award summary results matching the search and filter criteria.","typeName":"IPageICommunityPlatformKarmaAward.ISummary"},"authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaAwards","method":"post"},"description":"At least one karma award entry must exist in the database to appear when searching or listing awards."}],"path":"/communityPlatform/admin/karmaAwards","method":"patch","name":"index"},{"specification":"This operation retrieves the full details of a single karma award by its unique identifier. It operates on the community_platform_karma_awards table in the Prisma schema. It is primarily used by administrators or for displaying details of a badge or reward in analytic dashboards or user profile pages. This endpoint allows viewing the complete context for a specific karma award, including who received it, for what action, in which community, and the associated metadata.","description":"Retrieve all available fields for a single karma award (badge/reward event), including member, optional community, award type, award reason, and timestamps.\n\nThis operation is accessible only to admins for audit or analytic purposes, or in context where displaying the full details is appropriate (such as in a user's own profile view if the caller is authorized). It is crucial for compliance, dispute resolution, or for rendering historical achievements in a user summary page.\n\nParameter validation ensures that only valid, existing IDs are accepted; error handling must distinguish between not found (nonexistent ID) and unauthorized access (role or ownership invalid). Responses include all public and administrative fields for the given award.\n\nThe Prisma entity is community_platform_karma_awards, and the endpoint returns the record mapped to ICommunityPlatformKarmaAward; sensitive or internal fields are omitted if not relevant to the current user context.","summary":"Retrieve full detail for a single user karma award by ID","parameters":[{"name":"karmaAwardId","description":"Unique identifier of the karma award record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail object for the requested karma award record, or an error if not found or unauthorized.","typeName":"ICommunityPlatformKarmaAward"},"authorizationType":null,"authorizationRole":"admin","prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaAwards","method":"post"},"description":"A karma award must be created by this operation before its full detail can be retrieved by ID."}],"path":"/communityPlatform/admin/karmaAwards/{karmaAwardId}","method":"get","name":"at"},{"specification":"This operation creates a new karma award record for a member in the community platform. It targets the community_platform_karma_awards table, which captures individual awards or badges given to members based on their karma achievements. This operation is critical for the platform's badge and achievement system: it enables the recognition of user contributions and milestones with explicitly tracked and system-auditable award events. Each award associates a member, an optional community, the award type, a reason/description, and the event timestamp.\n\nThe creation of a karma award is a privileged operation, typically reserved for administrative flows or automated feature triggers (such as reaching a karma threshold). Award creation events should be logged and are not meant for self-service or end-user-initiated flows.\n\nSecurity considerations: Only users with admin or trusted automation roles should access this API. It should validate the referenced member and (when specified) community, ensure the award_type matches configured achievement types, and event_time is correctly formatted. Any reason field should be short and sanitized.\n\nThis operation interacts directly with the community_platform_karma_awards Prisma schema, ensuring all business rules for badge/award issuance are enforced. Dependent on clear mappings between UI/admin workflows and the award type system.","path":"/communityPlatform/admin/karmaAwards","method":"post","summary":"Create a new karma award record for a member (community_platform_karma_awards table)","description":"Create a new karma award for a member. This operation inserts a new record into the community_platform_karma_awards table, which tracks platform and community-specific recognition (e.g., badges or awards) for user achievements.\n\nAuthorized actors for this operation include admins or trusted automation, since it affects the display of official achievements and is subject to strict business and audit rules. The operation accepts all required fields (member, optional community, award type, reason/description, and event time). The backend must validate that the member exists and optionally check that a valid community is referenced for community-specific awards.\n\nSuccessful creation returns the full karma award record. If required validation fails (e.g., member not found, invalid award_type, or improper permissions), the operation should return detailed, actionable error messages and log the event for audit compliance.\n\nThis API complements member achievement flows and may trigger UI updates in user profiles or award notifications. Related operations include editing/updating awards or viewing accumulative karma summaries by member/community.","parameters":[],"requestBody":{"description":"Information required to create a new karma award (member, optional community, award_type, event time, optional reason)","typeName":"ICommunityPlatformKarmaAward.ICreate"},"responseBody":{"description":"The newly created karma award record with all associated details as defined in the Prisma schema.","typeName":"ICommunityPlatformKarmaAward"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing karma award, identified by its unique karmaAwardId, within the community_platform_karma_awards table. The target entity represents a historical award or badge issued to a member for karma achievements, optionally scoped to a community. Updates may include adjusting the award reason, changing community association, updating the type or description, or marking the award as revoked.\n\nAward updates are privileged operations allowed for admins or authorized automation. Typical use cases include revoking an award, correcting assignment errors, or updating descriptive text for clarity and compliance.\n\nSecurity and validation: This operation validates that the karmaAwardId exists and belongs to a legit member. Updates must not retroactively issue new awards or alter core audit history. Revocation or information updates should be logged. This aligns with business logic for badge/achievement management and compliance requirements.\n\nBased on the Prisma community_platform_karma_awards schema, this endpoint ensures the platform's achievement records stay accurate, traceable, and auditable.","path":"/communityPlatform/admin/karmaAwards/{karmaAwardId}","method":"put","summary":"Update an existing karma award by its ID (community_platform_karma_awards table)","description":"Update an existing karma award record using its unique ID. This operation modifies a record in the community_platform_karma_awards table, which logs badges/awards assigned based on karma or achievements.\n\nIt accepts the karmaAwardId as a path parameter and an update body specifying the award's revised fields. Typical business flows supported include administrative corrections, revocation of awards for compliance or policy breaches, and updates to contextual descriptions or reasons.\n\nThe operation must authorize only admin-level roles, validate that the referenced award exists, and ensure that updates are consistent with organization policies. Changes are logged for audit. Related APIs include award creation and achievement feed endpoints for user profiles. If the record does not exist or validation fails, a descriptive failure message should be returned.\n\nThis operation works directly with the community_platform_karma_awards Prisma schema; only legitimate, schema-defined fields may be updated.","parameters":[{"name":"karmaAwardId","description":"Unique identifier of the karma award to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the karma award record (e.g., reason, type, community, event time, revocation info)","typeName":"ICommunityPlatformKarmaAward.IUpdate"},"responseBody":{"description":"The updated karma award record as defined by Prisma schema, with all revised fields and attributes.","typeName":"ICommunityPlatformKarmaAward"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaAwards","method":"post"},"description":"A karma award must exist before it can be updated. This prerequisite ensures the target award record is present in the database and any referenced community_platform_community_id is valid through the award creation operation."}]},{"specification":"This operation permanently removes a karma award record from the community platform. It operates on the community_platform_karma_awards table in the Prisma schema, which records awards (badges, achievements) granted to users based on karma-accrued milestones. Deleting a karma award is a hard delete operation, since the schema does not indicate any soft deletion field for the award itself, and this action should be performed with caution by an administrator to reflect removal of the award from both audit and user profile perspectives. Related badges and profile displays should be updated accordingly after deletion.\n\nKarma awards represent significant recognitions for user behavior, such as reaching certain karma thresholds or participating in important events. Administrators may need to delete an award if it was issued in error, associated with fraudulent activity, or in response to compliance requirements. Careful review and confirmation should be performed before invoking this operation.\n\nSecurity and Permissions: Only admin users (with appropriate authorization) are allowed to perform this operation, as deleting an award can impact user standing, profile records, and may have legal or compliance implications.\n\nThis endpoint expects the unique identifier (UUID) of the target karma award in the path. If the award does not exist, an error will be returned. Upon successful execution, the award record is deleted permanently.\n\nOther related endpoints include creation of karma awards, retrieval of user awards for profile display, and administrative reversal of awards. Hard deletion here ensures that the entry is completely removed from the database and user recognition systems.","description":"Invoking this operation will permanently delete a karma award from the community platform. The target of the operation is the community_platform_karma_awards table within the database. The operation is only available to admin users due to its impact on user reputations and system auditing.\n\nThe purpose is to allow administrators to remove awards that were granted in error, are subject to compliance or moderation actions, or must be rescinded for other business reasons. The operation checks for the existence of the specified award and, if found, hard-deletes it—eliminating it from all user profiles, badge displays, and relevant analytics calculations. The operation does not support soft deletion, in alignment with the database schema which lacks a deleted_at or similar field for karma awards.\n\nThis operation is designed for rare, exceptional cases where an award's presence is deemed inappropriate or incorrect. Use of this endpoint should be carefully logged and subject to peer review to prevent accidental or malicious deletions. Attempts to delete a non-existent award will result in an error response indicating that the award was not found.\n\nAdministrators must be aware that this operation's effect is irreversible. After deletion, the karma award is removed from all associated user profiles and cannot be restored. If auditability is necessary, external audit logging should supplement this operation, as the primary database record will no longer exist.","summary":"Permanently delete a karma award (community_platform_karma_awards) by ID (admin only)","parameters":[{"name":"karmaAwardId","description":"Unique identifier (UUID) of the karma award to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/communityPlatform/admin/karmaAwards/{karmaAwardId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/admin/karmaAwards","method":"post"},"description":"A karma award must exist before it can be deleted. This prerequisite confirms the target award record, identified by karmaAwardId, is present prior to hard deletion."}]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users can browse public communities, view posts and comments, search for communities and posts, and register for a new account. They cannot post, comment, vote, or report content.","kind":"guest"},{"name":"member","description":"Authenticated users can create and manage communities they found, post text/links/images in communities, upvote/downvote posts and comments, comment on posts with nested replies, subscribe/unsubscribe to communities, view and edit their profile, and report inappropriate content. Members accumulate karma based on their activities.","kind":"member"},{"name":"moderator","description":"Special members assigned as moderators to specific communities. They can remove or pin posts/comments, review and act on reported content, ban users from their managed communities, and set posting rules. Moderators have heightened permissions only within the communities they manage.","kind":"member"},{"name":"admin","description":"Platform administrators with system-wide permissions. They can manage users and communities across the platform, assign moderators, resolve escalated reports, operate global bans, and update platform-wide settings and content policy.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageICommunityPlatformSystemConfig":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSystemConfig"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformBannedWord":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformBannedWord"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformFileUpload.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformFileUpload.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformModerator.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformModerator.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityRule":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityRule"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityBanner":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityBanner"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityImage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityImage"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityStatusChange":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityStatusChange"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityModeratorAssignment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityModeratorAssignment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPostImage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPostImage"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPostLink":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPostLink"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformSubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSubscription"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformSubscriptionLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSubscriptionLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPostVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPostVote"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommentVote.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommentVote.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformVoteLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformVoteLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformProfile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformProfile"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformProfileBadge.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformProfileBadge.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformProfileHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformProfileHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformReport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformReport.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformModerationQueue.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformModerationQueue.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformModerationAction.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformModerationAction.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformEscalationLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformEscalationLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformReportCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformReportCategory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformKarmaLedger.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformKarmaLedger.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformKarmaPenalty.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformKarmaPenalty.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformKarmaHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformKarmaHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformKarmaThreshold":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformKarmaThreshold"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformKarmaAward.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformKarmaAward.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ICommunityPlatformGuest.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_guests","description":"DTO for creating a new guest session in the Reddit-like community platform.\n\nThis type represents the request for creating an ephemeral guest presence. The key field is 'session_key'. It supports optional provision by the front-end and is enforced to be unique in the database. Other properties (such as 'created_at' and 'deleted_at') are not accepted in user input as they are managed automatically by the system. Security: This DTO never accepts personal or sensitive data and strictly creates a minimal tracking artifact for user sessions.\n\nFields must directly correspond to the columns in the 'community_platform_guests' Prisma model for writing new records during guest session initialization.","properties":{"session_key":{"type":"string","description":"Anonymous session or tracking key, for attribution or moderation referencing. Opaque, session-tied. Not globally unique. Possibly device- or IP-bound. Used for ephemeral tracking only."}},"required":["session_key"]},"ICommunityPlatformGuest.IAuthorized":{"type":"object","description":"Response DTO for guest session creation or refresh authorization.\n\nThis object encapsulates a successfully established guest session context, including the system-assigned UUID 'id', the active 'session_key', and the session creation time. If the guest has been pseudo-deleted, 'deleted_at' is set. This is NOT a login token nor a privileged principal—authorization is strictly limited to anonymous navigation and tracking. Sensitive or personal info is never present.\n\nAll fields are mapped directly from the 'community_platform_guests' schema and must always be included in the response, aligning with business rules that require explicit session representation and audit traceability.","properties":{"id":{"type":"string","format":"uuid","description":"System-assigned unique identifier for this guest session (UUID)."},"session_key":{"type":"string","description":"Anonymous session or tracking key, for ephemeral user session identification and audit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when guest record/session was first established (ISO 8601, UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating if this guest session was pseudo-deleted/erased (null if active, string if deleted; ISO 8601, UTC)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","session_key","created_at","deleted_at","token"]},"ICommunityPlatformGuest.IRefresh":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the guest session. This is the primary key for the 'community_platform_guests' table and is required for refresh operations if session_key is not provided. Must be a well-formed UUID as per RFC 4122.\n\nExample: 'd4b0689e-62c5-4057-aa32-8d5080d59f64'"},"session_key":{"type":"string","description":"The anonymous session or tracking key (opaque string) for this guest user. Tied typically to a device, cookie, or session storage. Required if 'id' is not present, but may be provided for convenience. Must be unique if present and allow platform traceability for anti-abuse or audit purposes.\n\nExample: 'guest-session-1697654321-abcd1234efgh5678'"}},"required":["session_key"],"description":"DTO for requesting a guest session refresh in the Reddit-like community platform.\n\nThis schema is used by unauthenticated (guest) users when they need to refresh or extend their access session for anonymous browsing. Either 'session_key' or 'id' must be provided, with 'session_key' preferred for stateless validation flows. The 'id' field is a UUID corresponding to the primary key of the 'community_platform_guests' record.\n\nThis structure ensures that guest sessions are uniquely identified and can be securely refreshed or expired as necessary. No sensitive or authentication-related information is included, reflecting guests' limited privileges.\n\nReferences: 'community_platform_guests' table in Prisma schema.","x-autobe-prisma-schema":"community_platform_guests"},"ICommunityPlatformMember.ICreate":{"type":"object","description":"Create DTO for registering a new platform member (Reddit-like registration).\n\nDefines the structure for incoming registration data necessary to create a row in the 'community_platform_members' table. This type captures the requirements for user-supplied registration, fully compliant with business logic and Prisma schema commentary:\n\n- 'email': Must be unique, case-insensitive, and formatted as a valid email address. Used for authentication, contact, and identity verification.\n- 'password': The raw, plain-text password supplied by the user. The backend must hash this using bcrypt or a comparable algorithm before storing it into the password_hash column. No plain text may be stored or logged in plaintext. Must meet minimum and maximum length and policy constraints (not enforced here but in service logic).\n\nOther fields from the schema such as 'email_verified', 'status', 'created_at', and 'updated_at' are system/populated and must NOT be supplied by the client or API consumer. Actor identity (member, guest, session) is not accepted via the API and comes from security context/middleware. No acceptance of 'id', 'deleted_at', or role/escalation fields is allowed.\n\nReferences: 'community_platform_members' table in Prisma schema.\n\nOnly the required properties are exposed. All platform registration/authorization related logic references this type in the OpenAPI spec.","properties":{"email":{"type":"string","format":"email","description":"The unique user email for authentication and platform communications. Must be unique across the platform, normalized for case, and validated per standard email RFC rules. This is the user's principal identity for login and identification.\n\nExamples:\n- 'alice@example.com'\n- 'bob.smith@corporate.co'\n\nConstraints: Must be present, unique (enforced in DB), not null, and conform to length and formatting policies."},"password":{"type":"string","description":"The user's plain-text password as provided during registration. This field is required ONLY during initial account creation and must NOT be stored or persisted in cleartext. The backend will hash this into 'password_hash' (bcrypt, Argon2, or similar) before writing to the database.\n\nExamples:\n- 'P@ssw0rd123!'\n- 'Qwerty!2024'\n\nConstraints: Frontend/backend will enforce minimum length, complexity, and restriction rules. Forbidden in logs, API responses, or later reads. Immediately discarded after use for credential hashing."}},"required":["email","password"],"x-autobe-prisma-schema":"community_platform_members"},"ICommunityPlatformMember.IAuthorized":{"type":"object","x-autobe-prisma-schema":"community_platform_members","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member (matches the id column of community_platform_members)."},"email":{"type":"string","format":"email","description":"Email address of the member. This value is unique and corresponds to the login credential."},"email_verified":{"type":"boolean","description":"Whether the member has completed email verification. Participation in most platform actions is restricted if false."},"status":{"type":"string","description":"Membership status, such as 'active', 'blocked', 'suspended', etc. This field determines current account accessibility and permissions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when user account was registered.\n\n@see community_platform_members.created_at column comment."},"updated_at":{"type":"string","format":"date-time","description":"Last time account metadata was updated (profile or auth details).\n\n@see community_platform_members.updated_at column comment."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft-deletion timestamp for ban/erasure or self-removal.\n\n@see community_platform_members.deleted_at column comment."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","email_verified","status","created_at","updated_at","token"],"description":"Authorization response for a registered member, including identity, session tokens (JWT), and key profile properties.\n\nReturned after successful join, login, or token refresh. Sensitive fields such as password hashes are intentionally omitted for security. Membership status and email verification are surfaced for downstream authorization logic.\n\nMaps to the community_platform_members table schema and security policy requirements."},"ICommunityPlatformMember.ILogin":{"type":"object","x-autobe-prisma-schema":"community_platform_members","properties":{"email":{"type":"string","format":"email","description":"Unique email address registered for the member. Used for authentication and must comply with email structure."},"password":{"type":"string","minLength":8,"maxLength":72,"description":"Plain-text password for login. Must meet platform security policy (length, complexity) and will be compared securely to the bcrypt hash stored in the password_hash column. The actual hash is not sent by clients."}},"required":["email","password"],"description":"Payload for authenticating a member login. Requires email and plain-text password.\n\nNever transmits password hashes; only a valid, direct plaintext credential is permissible and will be securely handled. Used for login and issuing of member session tokens.\n\nThe email property must match a valid, registered member; password is checked against the stored hash per the community_platform_members schema. All logic follows strong security and error-handling requirements."},"ICommunityPlatformMember.IRefresh":{"type":"object","properties":{},"required":[],"description":"Request schema for the refresh action on the Community Platform Member entity.\n\nThis object represents a refresh request for an authenticated member, typically used to exchange a valid refresh token for a new set of JWT session tokens. As defined by business workflows, no properties are included here for schema-level compliance—authentication context such as the refresh token is expected to be included via headers or cookies, not in the request body object itself.\n\nThis schema is used strictly as a method marker for POST /auth/member/refresh and does not require or permit any properties. See authentication token exchange logic for underlying field handling.\n\nReferenced in: Platform Authentication API, Member Session Management."},"ICommunityPlatformModerator.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the moderator. Must be unique among all moderators and match the email used for membership registration. Used for authentication and notifications."},"password":{"type":"string","format":"password","description":"Plain text password which will be securely hashed before storage in the system. Used for moderator authentication. Plain text password is never stored in the database."},"community_id":{"type":"string","format":"uuid","description":"UUID of the community to which the moderator will be assigned. Must reference an existing community where this member will serve as a moderator."}},"required":["email","password","community_id"],"description":"Data Transfer Object for moderator registration (join) workflow on the Community Platform.\n\nThis object is used in the API that allows a new moderator to be created. Required fields include:\n- 'email': Moderator's unique email address, used for authentication (format: email).\n- 'password': The moderator's chosen password (plain text, format: password; the server hashes it).\n- 'community_id': UUID of the community where moderator is assigned.\n\nThis object must comply with business validation: referenced member account must already exist and be verified for the given email, and the community must be valid before moderator assignment is accepted. This schema is directly mapped to onboarding operations for community moderator roles."},"ICommunityPlatformModerator.IAuthorized":{"type":"object","x-autobe-prisma-schema":"community_platform_moderators","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated moderator. Matches 'id' from the community_platform_moderators table."},"member_id":{"type":"string","format":"uuid","description":"Related member entity acting as basis for authentication and core participation. References community_platform_members.id."},"community_id":{"type":"string","format":"uuid","description":"UUID of the community the moderator is assigned to. Used to scope moderator permissions."},"email":{"type":"string","description":"Moderator's email address, as used for authentication in the 'community_platform_moderators' table."},"status":{"type":"string","description":"Account status for the moderator (e.g., 'active', 'suspended', 'resigned'). Comes from the 'status' field in the moderator table."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator account was created, as stored in 'created_at' column."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this moderator account, from 'updated_at' column."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, timestamp when the moderator assignment was ended (soft deleted, resigned, or role removed)."},{"type":"null"}],"description":"Timestamp marking soft deletion; null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","member_id","community_id","email","status","created_at","updated_at","token"],"description":"Authorization response containing JWT token and moderator account metadata.\n\nReturned after successful moderator authentication (login, join, or refresh). The object reflects the current authenticated session and exposes the moderator's basic metadata and permissions context.\n\nSensitive fields (such as password_hash) are never exposed in this DTO."},"ICommunityPlatformModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Moderator login email. Must be matched against the unique 'email' in the moderator table."},"password":{"type":"string","description":"Plain-text password for authentication. Never stored or exposed except in transit for login. Must be validated and hashed securely before storage or session issue."}},"required":["email","password"],"description":"Moderator login request. Submit email and plain-text password to authenticate and request authorization tokens. Email is case-insensitive and must refer to an existing moderator account; password must be valid according to platform policy."},"ICommunityPlatformModerator.IRefresh":{"type":"object","properties":{},"required":[],"description":"Schema for refreshing a moderator's session token.\n\nThis DTO is used in the moderator authentication flow to request a new JWT/refresh token. It does not require any properties in the POST body, as the refresh token is typically supplied via HTTP-only cookie or Authorization header. Empty object indicates no input requirement."},"ICommunityPlatformAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The unique email address for the new admin. This must not be already in use by any other admin or authentication actor in the system. Used for login and notification purposes. Required."},"password":{"type":"string","description":"The initial plaintext password to be set for the new admin. The backend will hash this before storing. Plaintext must meet system complexity requirements (min length, complexity per NFRs) and is not persisted in this DTO -- only used for transmission over TLS. Required."},"superuser":{"type":"boolean","description":"If true, grants this admin full superuser privileges to the platform (highest authority). Recommended to set to false unless this is a primary ops/admin onboarding scenario. Optional, default is false if omitted."}},"required":["email","password"],"description":"Schema to create a new platform administrator in the community system.\n\nThis DTO is intended for the /auth/admin/join POST operation, where a unique email address and password are required. Superuser privileges can optionally be granted. Input is validated for uniqueness, password strength, and proper admin onboarding flows. The password will be securely hashed by the backend; never store plaintext passwords. Security rules and audit logs apply to all creations."},"ICommunityPlatformAdmin.IAuthorized":{"type":"object","description":"Authorization response for a platform admin in the Reddit-like community platform. This schema is returned after successful login, join (registration), or token refresh for a platform-wide admin, and includes the admin's unique identifier and a JWT-based authorization token.\n\nThis type directly maps to the 'community_platform_admins' Prisma model and is geared for secured authentication flows in system administration APIs.\n\nThe 'id' field is the UUID of the admin record in 'community_platform_admins'. The 'token' must reference the standardized 'IAuthorizationToken' type (which is expected to exist as a reusable component in the API spec), representing the JWT access/refresh token structure for admin authentication. This schema provides the minimum payload for initiating secured admin sessions and enforcing role-based permissions.\n\nUse this type strictly for sensitive authentication responses. Never include or expose password hashes, email credentials, or administrative secrets in responses of this type.\n\nAll operations issuing this response must be tightly audited and comply with system security policies. Use in conjunction with ICommunityPlatformAdmin.ILogin for login request/response and in refresh flows for session extension.\n\n- Prisma model: community_platform_admins\n- Required for: POST /auth/admin/login, POST /auth/admin/join, POST /auth/admin/refresh, and any admin-auth session/refresh responses.","x-autobe-prisma-schema":"community_platform_admins","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the platform admin as defined in the Prisma model 'community_platform_admins'. UUID v4 format."},"email":{"type":"string","format":"email","description":"Admin email for authentication and contact (must be unique).\n\nMain login credential and unique identifier for admin authentication workflows. Must be an official business/admin-controlled address and must NOT be reused among other actors (members/moderators). Emails are case-insensitive and subject to platform-specific domain restrictions.\n\nCorresponds to the 'email' column in the community_platform_admins table."},"superuser":{"type":"boolean","description":"Whether admin possesses unrestricted/emergency privileges.\n\nUsed for distinction between regular and super admins. Superusers bypass certain access restrictions for emergency and disaster recovery flows, subject to audit. Superuser status is always required for executing system-wide critical actions (e.g., platform reconfiguration, recovery, or irreversible data manipulation).","examples":{"v0":true,"v1":false}},"status":{"type":"string","description":"Account status indicator (e.g., active, suspended, deleted).\n\nDetermines access and login capability for this admin. If not 'active', login and platform operations are denied. Valid values include 'active', 'suspended', 'deleted'. Business rules enforce single active status at a time.\n\nCorresponds to the 'status' column in the community_platform_admins table.","examples":{"v0":"active","v1":"suspended","v2":"deleted"}},"created_at":{"type":"string","format":"date-time","description":"Timestamp of admin account creation in ISO 8601.\n\nRecords when the admin was first registered, critical for audit and lifecycle tracking. Required for compliance documentation and role/authority validation during investigations. Maps to 'created_at' column."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the latest account modification (profile, status).\n\nTracks the most recent update to the admin account, including any status, email or role changes. Audit and history workflows rely on this date for compliance and forensic purposes. Maps to 'updated_at' column."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion or account revocation timestamp, null unless deleted.\n\nIndicates if the admin account has been logically removed (soft deleted) for audit, compliance, or self-removal flows. Null if still active or only suspended. Not available for reactivation unless permitted by retention policy. Maps to 'deleted_at' column."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","superuser","status","created_at","updated_at","token"]},"ICommunityPlatformAdmin.ILogin":{"type":"object","description":"Request schema for platform administrator login in the Reddit-like community platform. Used in POST /auth/admin/login to authenticate a platform admin using credentials. Credentials are validated against the 'community_platform_admins' table in the Prisma schema.\n\n- 'email': Required. The unique email address of the admin attempting to log in. Must match the stored record in 'community_platform_admins'.\n- 'password': Required. The admin's password, supplied in plain text and not pre-hashed. The backend is responsible for securely hashing/validating this password. Never expose this in response bodies.\n\nDo not include any additional authentication details or administrative secrets. Used only for login.\n\n- Prisma model: community_platform_admins\n- Required for: POST /auth/admin/login request body.","x-autobe-prisma-schema":"community_platform_admins","properties":{"email":{"type":"string","format":"email","description":"Unique email address of the platform admin attempting to log in. Must conform to email RFC format and match a stored record in 'community_platform_admins'."},"password":{"type":"string","description":"Plain text password for the platform admin. Sent by the client for backend-side hashing/verification. Never echo this field in API responses. Backend must securely handle this and never log or expose plain text passwords."}},"required":["email","password"]},"ICommunityPlatformAdmin.IRefresh":{"type":"object","properties":{},"required":[],"description":"Request schema for refreshing an admin's authentication/session. This object is intentionally empty, as the refresh action relies on external context (such as cookies or headers containing the refresh token) and does not require a JSON body. No properties are accepted or required. This DTO is used to maintain OpenAPI compatibility and type consistency within the refresh endpoint for platform admins."},"ICommunityPlatformSystemConfig.IRequest":{"type":"object","properties":{"key":{"type":"string","description":"Optional filter parameter to search system configuration entries by their exact or partial configuration key. Used to restrict search results to configs with matching key values. Case-insensitive; partial matches permitted. If omitted, no filter is applied."},"description":{"type":"string","description":"Optional filter to search across configuration entry descriptions. Enables full-text search for descriptive content or usage rationale. Case-insensitive search with support for substring match. If unspecified, the filter is not applied."},"page":{"type":"integer","description":"The page number to retrieve for paginated system configuration index results. Used to support client-side navigation of large config result sets. Defaults to first page (1) if not provided.","minimum":1},"limit":{"type":"integer","description":"Maximum number of results to return per page. Supports pagination and load management in admin UI interfaces. If omitted, a default platform page size will be used (commonly 20 or 50). Must be positive."},"sort":{"type":"string","description":"Result sort order for configuration entries. Acceptable values: 'created_at', 'updated_at', 'key'. Determines which property to order the results by. Direction (asc/desc) may be specified in an extended sorting parameter or by prefix convention if so implemented in the business logic."},"status":{"type":"string","description":"(Optional) Filter to include configs with a particular business-defined status, such as 'active', 'archived', or other status used in system settings. If provided, limits the result set to configs currently matching the supplied status value."}},"required":[],"description":"Request body for searching, filtering, and paginating the list of platform system configuration entries. Supports filter by configuration key, description, and paginated result retrieval for admin configuration management and dashboard listing. All filter and pagination fields are optional; omitted fields will result in comprehensive or default listing behavior."},"ICommunityPlatformSystemConfig":{"type":"object","x-autobe-prisma-schema":"community_platform_system_configs","description":"Represents a single system-level configuration entry for the platform. Each configuration entry is uniquely identifiable by its ID and key, and is used to store system feature flags, thresholds, and runtime toggles that can alter platform behavior without code redeployment. Records the key, value (string-encoded but may represent any type), description, and creation/update timestamps for tracking operational history and compliance. This schema is directly mapped to the 'community_platform_system_configs' table in the database and is managed by platform administrators only. Used to power backend dashboards, operational management, and DevOps feature switches. Audit-compliant and indexed for fast search by key or description. All fields are enforced at the database level for integrity and operational safety.\n\nParagraphs:\n1. System configuration entries are essential for platform runtime adaptation, supporting live toggling of experimental features, setting platform-wide thresholds, or adjusting feature flags without pushing new code. Each entry must have a unique key and string value, and descriptive metadata for traceability.\n2. Administrators can add, update, or remove system configuration entries as necessary, and changes are tracked using the created and updated timestamp fields for audit and debugging purposes.\n3. This configuration interface is intentionally separated from user-facing or business logic tables to encapsulate pure operational parameters and is rarely accessed in normal end-user workflows. Only privileged admin users have access to create, modify, or query these entries.","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the configuration entry."},"key":{"type":"string","description":"Unique string key for the system configuration setting (e.g., 'max_post_length', 'enable_new_feature'). Must be unique across all configs."},"value":{"type":"string","description":"Configurable value for the setting, encoded as a string. Can represent a number, boolean, JSON, or any string value, according to consuming system logic."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Explanation of the configuration key's purpose. Optional, may provide human-readable context or administrative notes."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this config entry was created (ISO 8601 format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this config entry was last updated (ISO 8601 format)."}},"required":["id","key","value","created_at","updated_at"]},"ICommunityPlatformSystemConfig.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_system_configs","description":"Data Transfer Object for creating a new entry in the system configuration store ('community_platform_system_configs'). Used by platform administrators to define and add new system-wide parameter entries such as feature flags, operational thresholds, or system toggles without code changes. The schema enforces that a key (unique string) and value (string-encoded) are provided, with optional description text to clarify business or technical purpose. On creation, timestamps and unique identifiers are assigned systemically. This interface prevents unauthorized alteration of system parameters, ensuring operational safety and traceable configuration evolution.\n\nParagraphs:\n1. The creation DTO includes the configuration key, value, and optional description, in accordance with the integrity constraints of the system configuration table. Key uniqueness is enforced at the database layer.\n2. The 'value' is always a string but may hold complex, serialized data (JSON object/string, booleans, numbers) depending on usage context; it is the responsibility of config consumers to parse as required.","properties":{"key":{"type":"string","description":"Unique string key for the configuration entry. Must not duplicate existing config keys."},"value":{"type":"string","description":"The value to assign to the configuration entry, encoded as a string (but can represent numbers, booleans, or JSON)."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional, human-readable description of this configuration entry's business or technical intent."}},"required":["key","value"]},"ICommunityPlatformSystemConfig.IUpdate":{"type":"object","description":"Update DTO for system configuration values in the Reddit-like community platform. Used for updating feature flags, thresholds, and other platform-wide settings at runtime without code deployment. All fields must exist in the Prisma 'community_platform_system_configs' table. The type is used for partial (PATCH) or full (PUT) updates by admins. Only updatable fields are permitted. Reference the original table for allowed columns.","x-autobe-prisma-schema":"community_platform_system_configs","properties":{"key":{"type":"string","description":"Unique identifier for the configuration setting. Used as a key in the key-value store. Must be unique and URL-safe. Changing this may affect platform components relying on the key."},"value":{"type":"string","description":"Configurable value for the setting. String-encoded and may represent JSON, integer, boolean, etc. Subject to business validation at the service layer."},"description":{"oneOf":[{"type":"string","description":"Explanation of the configuration key's purpose and scope. Used for moderation, auditability, and reasoning about the config purpose. Optional field for human-readable context."},{"type":"null"}],"description":"Explanation of the configuration key's purpose and scope. Used for moderation, auditability, and reasoning about the config purpose. Optional field for human-readable context."}},"required":["key","value"]},"ICommunityPlatformAuditLog":{"type":"object","description":"Audit log entry for system/platform actions in the Reddit-like community platform. This schema matches the 'community_platform_audit_logs' table and is used in admin workflows, forensic review, compliance, and event tracing. It includes all fields required for a complete audit record of who did what, when, to which resource, and the granularity required for post-incident or compliance reporting. All fields reflect exact columns in the DB table.","x-autobe-prisma-schema":"community_platform_audit_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this audit log entry."},"actor_type":{"type":"string","description":"The type of actor involved (e.g., 'member', 'moderator', 'admin', 'system_job'). Indicates the privilege context of the action."},"actor_id":{"type":"string","format":"uuid","description":"UUID of the actor who performed the action. Matches the corresponding system actor in their respective tables. All-zeroes (000...0) for system_jobs."},"action_type":{"type":"string","description":"High-level action performed. Examples: 'create', 'update', 'delete', 'config_change', 'user_ban', 'login', 'moderation_action'. Used for filtering in dashboards."},"target_table":{"type":"string","description":"Name of the target table affected by the action (e.g., 'community_platform_posts', 'community_platform_comments'). Used for resource tracking."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the affected entity (row) in the target table. Nullable if the action is not row-specific (i.e., batch or system-wide)."},{"type":"null"}],"description":"UUID of the affected entity (row) in the target table. Nullable if the action is not row-specific (i.e., batch or system-wide)."},"details":{"oneOf":[{"type":"string","description":"Structured (JSON or text) event details about this audit log entry. Can be used for replay or extended debugging. Optional field; often null for simple actions."},{"type":"null"}],"description":"Structured (JSON or text) event details about this audit log entry. Can be used for replay or extended debugging. Optional field; often null for simple actions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when this audit log entry was created."}},"required":["id","actor_type","actor_id","action_type","target_table","created_at"]},"ICommunityPlatformBannedWord.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Optional; if provided, must be positive integer."},"limit":{"type":"integer","description":"Maximum number of items per page for pagination. Optional; if provided, must be positive integer."},"search":{"type":"string","description":"Optional search string for filtering banned words by substring match."},"active":{"type":"boolean","description":"If present, restrict results to only currently active (true) or inactive (false) banned words."},"createdFrom":{"type":"string","format":"date-time","description":"Filters results to those created at or after this ISO 8601 date-time. Optional."},"createdTo":{"type":"string","format":"date-time","description":"Filters results to those created at or before this ISO 8601 date-time. Optional."},"sort":{"oneOf":[{"const":"word","description":"Field to sort results by. Allowed values: 'word', 'created_at', 'updated_at'."},{"const":"created_at","description":"Field to sort results by. Allowed values: 'word', 'created_at', 'updated_at'."},{"const":"updated_at","description":"Field to sort results by. Allowed values: 'word', 'created_at', 'updated_at'."}],"description":"Field to sort results by. Allowed values: 'word', 'created_at', 'updated_at'."},"order":{"oneOf":[{"const":"asc","description":"Sort order for the field specified in 'sort'. Allowed values: 'asc', 'desc'."},{"const":"desc","description":"Sort order for the field specified in 'sort'. Allowed values: 'asc', 'desc'."}],"description":"Sort order for the field specified in 'sort'. Allowed values: 'asc', 'desc'."}},"required":[],"description":"Request DTO for searching, filtering, and paginating banned words in the moderation policy system. Supports filtering by keyword, enforcement status, creation dates, search string, and pagination controls."},"ICommunityPlatformBannedWord":{"type":"object","x-autobe-prisma-schema":"community_platform_banned_words","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this banned word entry."},"word":{"type":"string","description":"Word or phrase that is platform-wide prohibited. Must be unique."},"reason":{"type":"string","description":"Explanation for this ban reason. Documents purpose for moderators, admins, or compliance. Optional."},"active":{"type":"boolean","description":"Whether this word is currently actively enforced. True for active bans; false otherwise."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when entry was added to the ban list. ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when entry was last modified, for audit/compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft deletion. Null if active; ISO 8601 otherwise."},{"type":"null"}],"description":"Timestamp for soft deletion. Null if active; ISO 8601 otherwise."}},"required":["id","word","active","created_at","updated_at"],"description":"Schema representing a platform-wide banned word or phrase, used in content policy enforcement. Tracks ban rationale, enforcement status, timestamps, and optional soft deletion. Reflects the structure and comments of the community_platform_banned_words table in Prisma schema."},"ICommunityPlatformBannedWord.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_banned_words","properties":{"word":{"type":"string","description":"Word or phrase that is to be banned across the platform. This property represents the exact text string, which must be unique (case-insensitive) within all banned word entries. Typical uses include profanities, hate speech, and prohibited phrases per platform content policy. Enforced by moderators and automated content review.\n\nField size and formatting must comply with platform rules, usually with maximum lengths (e.g., 255 chars) and normalization for whitespace or special characters. Examples: 'spoiler', 'scam', 'hateword'. Platform logic will also check for duplicates and rejected forms."},"reason":{"oneOf":[{"type":"string","description":"Optional text explaining the rationale for banning this word/phrase. May provide additional moderation context, a policy excerpt, or link to community guidelines. Useful for audit and appeals; not always displayed to end-users.\n\nIf omitted, the rationale for banning should be self-evident or defined in platform/global moderation rules. Example: 'Violates hate speech policy; flagged for regulatory compliance.'"},{"type":"null"}],"description":"Optional text explaining the rationale for banning this word/phrase. May provide additional moderation context, a policy excerpt, or link to community guidelines. Useful for audit and appeals; not always displayed to end-users.\n\nIf omitted, the rationale for banning should be self-evident or defined in platform/global moderation rules. Example: 'Violates hate speech policy; flagged for regulatory compliance.'"},"active":{"type":"boolean","description":"Specifies whether this banned word is currently enforced (true) or not (false). Set to true to immediately begin filtering content for this word, or false to add/edit the entry but not enforce yet (e.g., for staged rule updates or temporary suspensions).\n\nEnforcement logic will check this flag before blocking or flagging associated user-submitted content. For most new bans, this should be true unless deliberate delay is required."}},"required":["word","active"],"description":"DTO body for creating (adding) a new banned word/phrase in the platform's banned word list. This component strictly corresponds to the creation of records in the 'community_platform_banned_words' table. It should include the banned word (must be unique across all entries), an optional reason (can be null), and whether the ban is active (enforced upon creation). Security and auditability are critical: only platform administrators or authorized moderators should be permitted to call this DTO, and all fields are audited.","examples":{"v0":{"word":"spoiler","reason":"Prevents revealing critical narrative information; community request.","active":true}}},"ICommunityPlatformBannedWords.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_banned_words","properties":{"word":{"type":"string","description":"The updated word or phrase to be banned across the platform. Must remain unique among active banned words (case-insensitive). Can be used to correct spelling, update banned phrase, or change format to reflect enforcement rules. If omitted, the current DB value is retained.\n\nChanging the word may have broad moderation effects; take caution and review for existing conflicts before updating. Only used if the banned word or phrase itself is to be changed. Example update: correct 'spoilling' to 'spoiling'."},"reason":{"oneOf":[{"type":"string","description":"New moderation reason or explanation for why the word is banned. May be updated to provide additional policy, compliance rationale, or historical context for the ban. Can be set to null to remove any prior reason text.\n\nThis field is optional and can remain unchanged if omitted. Typical use is policy updates, clarification, or adoption of new reporting requirements."},{"type":"null"}],"description":"New moderation reason or explanation for why the word is banned. May be updated to provide additional policy, compliance rationale, or historical context for the ban. Can be set to null to remove any prior reason text.\n\nThis field is optional and can remain unchanged if omitted. Typical use is policy updates, clarification, or adoption of new reporting requirements."},"active":{"type":"boolean","description":"Specifies whether this banned word/phrase is to be actively enforced (true), deactivated (false), or remain unchanged (if omitted). Set to false to temporarily allow the word, or true to resume enforcement. Used by admins when pausing or reinstating bans as business needs evolve.\n\nCaution: toggling enforcement can impact moderation, user experience, and platform compliance. Record changes must be logged for later audit."}},"required":[],"description":"DTO body for updating an existing banned word/phrase record in the platform's banned word list (table: 'community_platform_banned_words'). Allows changing the banned word/phrase, the justification description, and enforcement status (active/inactive). Properties are optional and only updated if included. Field uniqueness, business policy constraints, and moderation workflow must be respected. Only platform administrators or trusted moderation staff should call this DTO, and all updates are auditable."},"ICommunityPlatformBannedWords":{"type":"object","x-autobe-prisma-schema":"community_platform_banned_words","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nThe unique identifier for each banned word. It is a string in UUID format to ensure global uniqueness and enable precise referencing.\n\nThis is the primary key as defined in the Prisma schema."},"word":{"type":"string","description":"Word or phrase that is prohibited platform-wide.\n\nThis string field holds the actual word or phrase that is banned across the community platform. It is unique and case-insensitive, reflecting both moderation policy and audit needs.\n\nMatches the Prisma schema's unique constraint."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Explanation for why this word/phrase is banned (nullable).\n\nProvides moderation context, justification, or reference for why this banned word is included. This is optional and can be helpful in review/audit or appeals. As per the Prisma schema, this field can be null."},"active":{"type":"boolean","description":"Whether this banned word is currently enforced.\n\nThis boolean indicates whether the word/phrase is actively being filtered or whether it has been suspended or legacy'd. Used in moderation UIs and for applying current policy."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this word was added to the ban list.\n\nThis is an ISO8601 timestamp, helping with audit, compliance review, and chronological tracing of policy changes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this word entry was last updated.\n\nReflects when the ban or rationale was most recently reviewed, changed, or reactivated. Essential for tracking and audit of platform safety measures."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking a soft deletion from the ban list (nullable).\n\nWhen set, this indicates the word was removed from enforcement but retained for audit/logging. Supports data retention and policy evolution requirements. Matches the Prisma schema's optional field."}},"required":["id","word","active","created_at","updated_at"],"description":"Platform-wide banned word entry as defined by the community_platform_banned_words Prisma model.\n\nRepresents a forbidden word or phrase, the policy rationale, and the enforcement/audit metadata associated. Used by moderation tools, automatic filtering engines, and admin dashboards. Tracks both active and legacy bans, including historical auditability."},"ICommunityPlatformFileUpload.IRequest":{"type":"object","properties":{"uploaded_by_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the uploader (member). Filter to file uploads performed by a specific member, typically for user self-service or moderation review.\n\nThis supports UUIDs for precise member tracking."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status of the file (e.g., 'active', 'deleted', 'archived').\n\nFilter file uploads according to logical status. This field matches the value in the file upload record, enabling quick search by active or removed content."},"mime_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"MIME type filter for files (e.g., 'image/png').\n\nUse to find uploads of specific types, such as images for posts or banners (e.g., 'image/jpeg', 'image/png')."},"original_filename":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by original filename (supports partial match or exact).\n\nThis assists in finding uploads based on user-supplied filename, useful for user asset management or moderation workflows."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound timestamp for file upload creation date filter (inclusive, ISO8601).\n\nUsed to filter results from a specific start date. Allows for date-based log review or period-specific analytics."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound timestamp for file upload creation date filter (inclusive, ISO8601).\n\nUse to restrict search to uploads created before or at this timestamp. Paired with created_at_from for date range searches."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (1-based). Specify to select the results page to return. Defaults to 1 if undefined.\n\nAligns with OpenAPI/DTO pagination standards."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Count per page (pagination limit). Maximum items to return per page. Standard default (e.g., 20 or 50) may be set by system policy and is recommended to prevent performance abuse."}},"required":[],"description":"Filter, search, sorting, and pagination parameters for finding file uploads (community_platform_file_uploads). Used by moderation/admin review dashboards or user file management UIs. All properties are optional and can be combined for tailored search and navigation."},"ICommunityPlatformFileUpload":{"type":"object","x-autobe-prisma-schema":"community_platform_file_uploads","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier of the file upload. Corresponds to the 'id' column in the database. Uniquely identifies this file resource."},"uploaded_by_member_id":{"type":"string","format":"uuid","description":"The UUID of the member who performed the upload, referencing 'community_platform_members.id'. Used for ownership, permission checks, and audit."},"original_filename":{"type":"string","description":"Original name of the file as supplied by the uploading user. Used for display and context."},"storage_key":{"type":"string","description":"Unique reference to the storage backend (e.g. S3 key, GCS path). Used for internal or integration-level file retrieval. Must be unique across all files."},"mime_type":{"type":"string","description":"MIME type for the file (e.g., 'image/png', 'application/pdf'). Used for validation, preview, and display."},"file_size_bytes":{"type":"integer","description":"Size of the file in bytes. Used for quota management, previews, and download statistics."},"url":{"type":"string","maxLength":80000,"description":"Public (or signed) URL where the file can be accessed for download or preview. Used in UI and API responses for asset delivery. Must be unique across all files."},"status":{"type":"string","description":"Current lifecycle status for the upload (e.g. 'active', 'deleted', 'archived'). Used to drive file visibility and cleanup workflows."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the file upload record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when file metadata was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp that indicates soft deletion; if present, file is archived or inaccessible but retained for audit. Null if file is still active."}},"required":["id","uploaded_by_member_id","original_filename","storage_key","mime_type","file_size_bytes","url","status","created_at","updated_at"],"description":"File upload record representing an asset uploaded via the platform (such as a user image, post image, community banner/icon, etc.), as stored in 'community_platform_file_uploads'.\n\nIncludes all file metadata required for rendering, permission auditing, asset cleanup, and business rule enforcement. This entity links to members (ownership), communities, posts, or profile use cases via foreign keys. Sensitive and internal-only fields remain omitted, but enough data is present for moderation and display workflows. Follows all relational and audit conventions as specified in the Prisma and requirements analysis.\n\nEvery property in this schema directly matches a field in the corresponding Prisma table, and is thoroughly documented to help frontend/backend engineers, auditors, and business analysts."},"ICommunityPlatformFileUpload.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_file_uploads","properties":{"uploaded_by_member_id":{"type":"string","format":"uuid","description":"UUID of the platform member performing the upload, references 'community_platform_members.id'. Required for audit and permissions."},"original_filename":{"type":"string","description":"The filename as provided by the user's device upon upload. Used for display and disambiguation."},"storage_key":{"type":"string","description":"Unique key or reference for the file in the storage backend (S3 path, blob identifier, etc). Must be unique for file retrieval and management."},"mime_type":{"type":"string","description":"MIME type of the file (e.g., 'image/png', 'application/pdf'). Controls preview and is used for validation."},"file_size_bytes":{"type":"integer","description":"Exact size of the uploaded file in bytes. Used for limits, quota calculation, and cleanup."},"url":{"type":"string","maxLength":80000,"description":"Full public or signed URL for accessing the file. UI and clients use this for rendering or download. Must be unique and correspond to the uploaded file."},"status":{"type":"string","description":"Status for the new upload (e.g., 'active', 'pending', 'archived'). Controls initial visibility on the platform."}},"required":["uploaded_by_member_id","original_filename","storage_key","mime_type","file_size_bytes","url","status"],"description":"The payload required to initiate a file upload record in the platform database (community_platform_file_uploads), used in the API's file upload operation. Fields match the underlying schema and represent all file metadata required at creation.\n\nThe record links to the uploading member, specifies display name, storage pointer, MIME type, size, and URL for access. Status controls business workflow (active upon upload or staged for moderation). Timestamp fields are system-generated and omitted from client request on create.\n\nCareful business validation must check file size, storage_key uniqueness, and proper status assignment. Designed with global file management, moderation, and privacy in mind, matching requirements and ERD design."},"ICommunityPlatformFileUpload.IUpdate":{"type":"object","properties":{"original_filename":{"type":"string","description":"Original filename as submitted by user. Used primarily for user-facing identification, auditing, or display in upload dialogs and content associations. Example: \"screenshot-2024-09-11.png\". This property allows the user to correct typos/labels for existing files, but should never affect underlying file storage or URL references."},"status":{"type":"string","description":"Current logical status of the file record. Must match a recognized system status: typically one of 'active', 'deleted', 'archived', etc., as used in file upload management workflows. Changing to 'deleted' marks a soft delete (the file is hidden from content lists but persists for audit); 'archived' is for long-term retention; 'active' means available for use. Only allowed values should be accepted—enforce via business constraints."},"url":{"type":"string","description":"Public or signed URL for retrieving this file. May be changed if the underlying file is moved or re-keyed in storage. Maximum platform limit: 80,000 characters. Only URLs following approved file storage policies should be set here. Used for dynamic file source migration or storage optimizations (e.g., CDN cache update)."}},"description":"Update fields for a file upload record in community_platform_file_uploads. This is strictly for metadata—not for binary uploads. Fields allowed for update are: original_filename (for correcting user-facing names or typos), status (to soft-delete/archive/activate), and url (to remap storage endpoints if object is moved). All changes must be audit logged and authenticated. Updates to file_size_bytes, mime_type, or storage_key are not possible via this endpoint. Only the member who uploaded the file, assigned community moderators, or admins may invoke updates depending on business rule.","x-autobe-prisma-schema":"community_platform_file_uploads","required":[]},"ICommunityPlatformMember.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Search filter for partial email matching. Used to filter user list by user's email address. Accepts both exact and partial matches. Typically case-insensitive. Example: 'john@company.com', 'admin', 'gmail'. Not required."},"status":{"type":"string","description":"Status filter for users (e.g., 'active', 'blocked', 'suspended', 'deleted'). Matches the values in the community_platform_members.status column. Used to limit search to specific account states. Optional."},"createdAtFrom":{"type":"string","format":"date-time","description":"Lower bound for registration date search. Filters for users who registered on or after this timestamp. Must be in ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ). Optional."},"createdAtTo":{"type":"string","format":"date-time","description":"Upper bound for registration date search. Filters for users who registered on or before this timestamp. Must be in ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ). Optional."},"updatedAtFrom":{"type":"string","format":"date-time","description":"Lower bound for last update date. Filters for users whose account information was updated on or after this timestamp. Useful for audit or change tracking. ISO 8601. Optional."},"updatedAtTo":{"type":"string","format":"date-time","description":"Upper bound for last update date. Filters for users whose account info was updated on or before this timestamp. ISO 8601. Optional."},"sortBy":{"type":"string","description":"Field name used to sort the search results. Typically one of: 'created_at', 'updated_at', or 'email'. Optional. Must match valid columns in the Prisma schema. Use with order."},"order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' (ascending) or 'desc' (descending). Used with sortBy to define sort direction. Optional. Default typically 'desc' for recency-based sorts."},{"const":"desc","description":"Sort order: 'asc' (ascending) or 'desc' (descending). Used with sortBy to define sort direction. Optional. Default typically 'desc' for recency-based sorts."}],"description":"Sort order: 'asc' (ascending) or 'desc' (descending). Used with sortBy to define sort direction. Optional. Default typically 'desc' for recency-based sorts."},"page":{"type":"integer","description":"Page number for pagination (1-based index). Optional. Defaults to 1 if omitted. Used in conjunction with limit to define paginated window."},"limit":{"type":"integer","description":"Number of records per page for pagination. Controls the page size of list results. Optional; default and maximum limits are enforced at API/business logic level. Maximum typical: 100."}},"description":"Input schema for searching/filtering/paginating community_platform_members (users). Includes options for searching by partial email, filtering by status or registration/update timestamps, field-based sorting, and standard pagination controls. All properties are optional and may be supplied in any combination. Required fields (such as page, limit) are validated in context depending on business rule. This DTO never exposes sensitive authentication info and only supports filters mapped to columns in the prisma schema.","x-autobe-prisma-schema":"community_platform_members","required":[]},"ICommunityPlatformMember":{"type":"object","x-autobe-prisma-schema":"community_platform_members","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the platform member, assigned as a UUID. Referenced by all related member properties and business logic tables.\n\n@see community_platform_members schema comment."},"email":{"type":"string","description":"Unique user email for authentication, required to be unique per member. Used for login and contact.\n\n@see community_platform_members.email column comment."},"email_verified":{"type":"boolean","description":"Whether email has been confirmed via platform verification flow. Cannot post/comment/vote unless true.\n\n@see community_platform_members.email_verified column comment."},"status":{"type":"string","description":"Current member status: 'active', 'blocked', 'suspended', etc. Used for permission enforcement and ban handling.\n\n@see community_platform_members.status column comment."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when user account was registered.\n\n@see community_platform_members.created_at column comment."},"updated_at":{"type":"string","format":"date-time","description":"Last time account metadata was updated (profile or auth details).\n\n@see community_platform_members.updated_at column comment."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft-deletion timestamp for ban/erasure or self-removal.\n\n@see community_platform_members.deleted_at column comment."}},"required":["id","email","email_verified","status","created_at","updated_at"],"description":"A registered, verified user of the Reddit-like community platform. Represents all primary business flows for members, including content creation, voting, commenting, subscribing, and reporting. Email is unique and used for authentication. Excludes sensitive properties like password_hash. Only includes fields existing in the community_platform_members Prisma schema. Timestamp and status fields are present only if found in the schema.\n\nReference to Prisma schema: community_platform_members table documentation."},"ICommunityPlatformMember.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_members","properties":{"email":{"type":"string","description":"Unique user email for authentication, required to be unique per member. Used for login and contact.\n\n@see community_platform_members.email column comment."},"status":{"type":"string","description":"Current member status: 'active', 'blocked', 'suspended', etc. Used for permission enforcement and ban handling.\n\n@see community_platform_members.status column comment."}},"required":[],"description":"DTO for updating member profile/account fields. Only email and status are mutable by update operations per business and database policy. Does NOT allow updating password_hash or system-managed timestamps here. Partial update pattern, all fields optional.\n\nReference: community_platform_members Prisma table comment and security checklist."},"ICommunityPlatformModerator.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Starts from 1 for the first page. Optional. Used to paginate through large lists of moderator assignments or moderator accounts."},"limit":{"type":"integer","description":"Maximum number of moderator records to return per page. Optional. Controls page size for pagination. Typically defaults to a reasonable value like 20-100."},"status":{"type":"string","description":"Filter for moderator account status (e.g., 'active', 'suspended', 'resigned'). Optional. Only returns moderators whose status matches the given value, if supplied."},"community_id":{"type":"string","format":"uuid","description":"Filter for moderators assigned to a given community, by community id (UUID). Optional."},"member_id":{"type":"string","format":"uuid","description":"Filter for moderators matching a given platform member id (UUID). Optional."},"email":{"type":"string","format":"email","description":"Filter for moderator accounts matching a given email address (may support partial match or full match depending on business logic). Optional."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field by which to sort search results. Optional. 'created_at' sorts by creation timestamp, 'updated_at' sorts by last update timestamp."},{"const":"updated_at","description":"Field by which to sort search results. Optional. 'created_at' sorts by creation timestamp, 'updated_at' sorts by last update timestamp."}],"description":"Field by which to sort search results. Optional. 'created_at' sorts by creation timestamp, 'updated_at' sorts by last update timestamp."},"order":{"oneOf":[{"const":"asc","description":"Sort order for the sort_by field. Optional. 'asc' for ascending, 'desc' for descending sort."},{"const":"desc","description":"Sort order for the sort_by field. Optional. 'asc' for ascending, 'desc' for descending sort."}],"description":"Sort order for the sort_by field. Optional. 'asc' for ascending, 'desc' for descending sort."}},"description":"Request/Query DTO for searching, filtering, and paginating community platform moderators (community_platform_moderators). All fields are optional unless required by application. Supports paging, sorting, and filtering by various moderator record fields. Reference: Prisma model 'community_platform_moderators'.","required":[]},"ICommunityPlatformModerator":{"type":"object","x-autobe-prisma-schema":"community_platform_moderators","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for moderator account/assignment."},"member_id":{"type":"string","format":"uuid","description":"Related member entity acting as basis for authentication and core participation. References community_platform_members.id."},"community_id":{"type":"string","format":"uuid","description":"Community this moderator assignment applies to. References community_platform_communities.id."},"email":{"type":"string","format":"email","description":"Moderator's email address (used for authentication/notification). Must be unique among all moderator assignments. Must match related member's email."},"status":{"type":"string","description":"Moderator account status: 'active', 'suspended', 'resigned', etc. Used for permission enforcement and incident response."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for moderator account assignment/creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last update to the assignment or moderator record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, timestamp when the moderator assignment was ended (soft deleted, resigned, or role removed)."},{"type":"null"}],"description":"Timestamp marking soft deletion; null if active."}},"required":["id","member_id","community_id","email","status","created_at","updated_at"],"description":"Detailed metadata for a community moderator account assignment. Maps to the 'community_platform_moderators' Prisma model, which tracks a member's assignment as a moderator within a particular community (by community_id). Includes authentication and permission fields, relationship to member and community, unique email, account status, and audit timestamps, plus a soft-delete marker. Password hash is NOT included for security; always omit. This schema is used for responses and management interfaces, and should reference only actual Prisma columns unless computed fields are required by the API business logic (in which case, these must be separately documented)."},"ICommunityPlatformModerator.IUpdate":{"type":"object","description":"Update payload for a moderator account in the Reddit-like community platform. This corresponds to the `community_platform_moderators` Prisma model, enabling updates to moderator-specific properties including account status, notification email, and other editable account attributes, while disallowing immutable fields such as the unique identifier, member_id, password hash, and creation timestamps.\n\nAll updates must comply with platform role management, audit, and moderation assignment rules. Typical fields for update include:\n\n- status: String; current state such as `active`, `suspended`, or `resigned` (immutably tracked in the database for compliance and moderation process enforcement). Only allowed status transitions per moderation policy.\n- email: String; must remain unique among moderators and be used for authentication and notification. Updatable by admin or platform operator only.\n- deleted_at: Nullable DateTime; may be set to indicate soft deletion of the moderator role/assignment when it is removed or resigned. Not set by moderator directly but by platform operator through privileged workflow.\n\nOther fields such as assigned communities, privileges, or assignment dates cannot be updated using this DTO and are managed by separate moderator assignment endpoints.\n\nAll update operations are strictly permission-controlled, audited, and may be subject to further workflow triggers (such as revoking moderator access or sending verification notifications). Any attempt to update restricted or non-existent fields will result in validation error.\n\nBusiness context: The update DTO is used predominantly by admin interfaces, platform-wide role management flows, and in edge cases, automated migration or audit tooling, but not by moderators themselves for self-service. All changes are subject to audit and platform traceability.","x-autobe-prisma-schema":"community_platform_moderators","properties":{"email":{"type":"string","description":"Moderator's authentication and notification email. Must remain unique. Only updatable when changing authentication address or on admin request. Platform operator only; not user-editable in self-service flow."},"status":{"type":"string","description":"Moderator's account status. Acceptable values include `active`, `suspended`, `resigned`, and potentially others depending on business extension. Controls authentication, dashboard access, and workflow participation. Immutable except via admin-initiated update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp used for soft-deletion or to mark the moderator as resigned/removed. Managed by admin. If set, the moderator credential is decommissioned in platform workflows. Nullable."}},"required":[]},"ICommunityPlatformAdmin.IRequest":{"type":"object","description":"Filter and pagination struct for searching and listing administrator accounts on the Reddit-like platform. Used for admin dashboards, analytics, compliance tasks, and administrator management interfaces. No required properties; all fields are optional filters. All string properties support partial match (ILIKE or trgm search when possible in backend). Must strictly match schema fields from `community_platform_admins`.\n\n- email: filter by unique admin email substring or exact email.\n- status: filter by admin's account status (`active`, `suspended`, etc.)\n- superuser: filter for accounts with or without superuser capability.\n- created_at_from, created_at_to: filters by platform admin creation date, using inclusive lower/upper bounds (ISO date string, e.g. `2025-01-01T00:00:00Z`).\n- updated_at_from, updated_at_to: similar for last metadata update.\n- page: which page of paginated result (default 1). Must be positive integer.\n- limit: size of page (default 100, max 500 for large admin tables).\n- sort_by: which field to sort the returned admins (e.g. `created_at`, `updated_at`, `email`)\n- sort_dir: `asc` or `desc` (default: `desc`, most recent first).\n\nIf a filter is not specified, it is ignored.\n","properties":{"email":{"type":"string","description":"Admin email; partial or full match for search."},"status":{"type":"string","description":"Admin status filter (e.g., 'active', 'suspended')."},"superuser":{"type":"boolean","description":"Filter by superuser privilege (true/false)."},"created_at_from":{"type":"string","format":"date-time","description":"Inclusive lower bound for admin account creation date/time."},"created_at_to":{"type":"string","format":"date-time","description":"Inclusive upper bound for admin account creation date/time."},"updated_at_from":{"type":"string","format":"date-time","description":"Inclusive lower bound for admin account last update timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Inclusive upper bound for admin account last update timestamp."},"page":{"type":"integer","minimum":1,"description":"Result page number for pagination (default: 1)."},"limit":{"type":"integer","minimum":1,"maximum":500,"description":"Result page size limit (default: 100, max: 500)."},"sort_by":{"type":"string","description":"Which field to sort by—must be a valid column in the admin table, such as 'created_at', 'updated_at', or 'email'."},"sort_dir":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending, 'desc' for descending (default: 'desc')."},{"const":"desc","description":"Sort direction: 'asc' for ascending, 'desc' for descending (default: 'desc')."}],"description":"Sort direction: 'asc' for ascending, 'desc' for descending (default: 'desc')."}},"required":[]},"ICommunityPlatformAdmin":{"type":"object","description":"Platform administrator entity.\n\nRepresents a platform-level administrator account with the highest privileges in the system. Admins can manage users, configure global platform settings, assign moderator roles, perform system-wide moderation, and access sensitive audit logs. The model enforces unique email addresses and contains authentication, status, and audit fields. Critical for ensuring platform security, disaster recovery, and regulatory compliance. Each admin is uniquely distinguishable from members and moderators, and their activity is thoroughly tracked.\n\nBased on the 'community_platform_admins' table in the Prisma schema. This includes email, password hash (not exposed in response DTOs), superuser boolean, account status, audit timestamps, and soft-deletion support.\n\nDirectly referenced in administrative flows: onboarding, login, refresh, status changes, audit/event logging, and moderator management. Sensitive authentication details (e.g., password_hash) must never be present or exposed in API responses.\n\nFor more information, see the Community Platform Requirements Analysis, non-functional requirements, and user roles documentation.","x-autobe-prisma-schema":"community_platform_admins","properties":{"id":{"type":"string","format":"uuid","description":"Admin unique identifier in UUID format.\n\nPrimary key for the admin entity. Used for identity verification, traceability in logs, and as a foreign key across audit and moderation tables. Required for referencing this administrator in all role and permission granting/approval operations.\n\nCorresponds to the 'id' column in the community_platform_admins table."},"email":{"type":"string","format":"email","description":"Admin email for authentication and contact (must be unique).\n\nMain login credential and unique identifier for admin authentication workflows. Must be an official business/admin-controlled address and must NOT be reused among other actors (members/moderators). Emails are case-insensitive and subject to platform-specific domain restrictions.\n\nCorresponds to the 'email' column in the community_platform_admins table."},"superuser":{"type":"boolean","description":"Whether admin possesses unrestricted/emergency privileges.\n\nUsed for distinction between regular and super admins. Superusers bypass certain access restrictions for emergency and disaster recovery flows, subject to audit. Superuser status is always required for executing system-wide critical actions (e.g., platform reconfiguration, recovery, or irreversible data manipulation).","examples":{"v0":true,"v1":false}},"status":{"type":"string","description":"Account status indicator (e.g., active, suspended, deleted).\n\nDetermines access and login capability for this admin. If not 'active', login and platform operations are denied. Valid values include 'active', 'suspended', 'deleted'. Business rules enforce single active status at a time.\n\nCorresponds to the 'status' column in the community_platform_admins table.","examples":{"v0":"active","v1":"suspended","v2":"deleted"}},"created_at":{"type":"string","format":"date-time","description":"Timestamp of admin account creation in ISO 8601.\n\nRecords when the admin was first registered, critical for audit and lifecycle tracking. Required for compliance documentation and role/authority validation during investigations. Maps to 'created_at' column."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the latest account modification (profile, status).\n\nTracks the most recent update to the admin account, including any status, email or role changes. Audit and history workflows rely on this date for compliance and forensic purposes. Maps to 'updated_at' column."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion or account revocation timestamp, null unless deleted.\n\nIndicates if the admin account has been logically removed (soft deleted) for audit, compliance, or self-removal flows. Null if still active or only suspended. Not available for reactivation unless permitted by retention policy. Maps to 'deleted_at' column."}},"required":["id","email","superuser","status","created_at","updated_at"],"examples":{"v0":{"id":"b1e1f7c7-83cf-4db2-9226-7a35d2cd1234","email":"admin@example.com","superuser":true,"status":"active","created_at":"2025-01-15T13:00:00Z","updated_at":"2025-03-10T09:00:00Z","deleted_at":null}}},"ICommunityPlatformAdmin.IUpdate":{"type":"object","description":"DTO for updating a platform admin account.\n\nPermits an administrator or superuser to manage configuration and lifecycle fields for another platform admin. Reflects business constraints for updating status, superuser flag, or email. Used in privileged admin management APIs for status changes, email corrections, or superuser assignment/removal. Sensitive authentication changes (like password hash) are NOT permitted here; those must use dedicated flows.\n\nAligns directly to updatable fields in the 'community_platform_admins' Prisma model: email, superuser, and status. Immutable columns such as 'id', 'created_at', and 'deleted_at' MUST NOT be altered through this DTO.\n\nAudit requirements: All changes are logged for compliance and review. No direct exposure of authentication secrets (e.g., password_hash). Partial updates permitted; at least one property must be provided per call.","x-autobe-prisma-schema":"community_platform_admins","properties":{"email":{"type":"string","format":"email","description":"(Optional) Update email for this admin. Must be unique and official.\n\nWhen present, supersedes prior email, subject to validation and business rules. Platform consistency and audit policies enforced."},"superuser":{"type":"boolean","description":"(Optional) Assign or remove superuser/emergency privilege.\n\nSuperuser status enables or disables ability to perform unrestricted system actions. Platform-specific policy may restrict who can assign/remove this flag.","examples":{"v0":true,"v1":false}},"status":{"type":"string","description":"(Optional) Set account status ('active', 'suspended', 'deleted').\n\nControls login and platform operation access. Update triggers audit recording and may affect access to critical systems.","examples":{"v0":"active","v1":"suspended","v2":"deleted"}}},"required":[]},"ICommunityPlatformCommunity.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"The result page number (starting from 1). Used for client-side pagination.","minimum":1},"limit":{"type":"integer","description":"The number of results per page. Constrained by platform limits and business policy. Typical defaults: 20-50.","minimum":1},"search":{"type":"string","description":"Search keyword or filter string for partial matching of community name, title, or description. Applies text search with casing/partial options per implementation."},"status":{"type":"string","description":"Filter communities by current status (e.g., 'active', 'banned', 'private', etc.). Only statuses defined by platform policy are recognized."},"sort":{"oneOf":[{"const":"hot","description":"Sort key to order the result set. Common values: 'hot' (default), 'new', 'top', 'controversial', or property names like 'created_at'."},{"const":"new","description":"Sort key to order the result set. Common values: 'hot' (default), 'new', 'top', 'controversial', or property names like 'created_at'."},{"const":"top","description":"Sort key to order the result set. Common values: 'hot' (default), 'new', 'top', 'controversial', or property names like 'created_at'."},{"const":"controversial","description":"Sort key to order the result set. Common values: 'hot' (default), 'new', 'top', 'controversial', or property names like 'created_at'."}],"description":"Sort key to order the result set. Common values: 'hot' (default), 'new', 'top', 'controversial', or property names like 'created_at'."},"order":{"oneOf":[{"const":"asc","description":"Sort direction ('asc' or 'desc'). Applies to the chosen sort key. Default per platform conventions."},{"const":"desc","description":"Sort direction ('asc' or 'desc'). Applies to the chosen sort key. Default per platform conventions."}],"description":"Sort direction ('asc' or 'desc'). Applies to the chosen sort key. Default per platform conventions."}},"description":"Request DTO for searching, filtering, sorting, and paginating the list of communities. Allows advanced queries such as partial text match, filter by status, and dynamic sort options suitable for discovery, management, or moderation scenarios.","required":[],"x-autobe-prisma-schema":"community_platform_communities"},"ICommunityPlatformCommunity":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key; unique identifier for the community."},"creator_member_id":{"type":"string","format":"uuid","description":"Creator's member UUID; references the initial owner and moderator."},"name":{"type":"string","description":"Unique community identifier (URL/display name, case-insensitive, 3-100 characters)."},"title":{"type":"string","description":"Community display title (3-100 characters)."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed community description or info (optional, supports Markdown, 10-10000 characters)."},"slug":{"type":"string","description":"URL-safe slug for public linking and navigation. Unique, case-insensitive."},"status":{"type":"string","description":"Current community status (e.g., 'active', 'private', 'banned', 'archived'). Label drives accessibility, moderation, search visibility, and content policy."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the community was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last setting or metadata update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of soft deletion/archival; null if active."}},"required":["id","creator_member_id","name","title","slug","status","created_at","updated_at"],"description":"Complete core entity for a community/subreddit. Represents the principal 'hub' object for organizing content, membership, moderation, and all community-scoped features on the platform. Maps exactly to the community_platform_communities table, using strictly the fields defined in the Prisma schema. Deletion is soft by 'deleted_at' field. Extensions are allowed only as per view or response context—not in DB-mapped types. Properties are documented and constrained to platform policy and creation/editor flows. Parent for all community management operations, UI detail panels, search result listings, and community feed integration.","x-autobe-prisma-schema":"community_platform_communities"},"ICommunityPlatformCommunity.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_communities","properties":{"name":{"type":"string","description":"Unique community identifier (display and URL). Case-insensitive. 3-100 characters.\nRefer to the 'name' column of the community_platform_communities table in the Prisma schema.\nMust be a string between 3 and 100 characters, unique among all communities. Used for both community display and RESTful linking."},"title":{"type":"string","description":"Community's display title. 3-100 characters, shown in listings/headers.\nMaps to the 'title' column in community_platform_communities.\nThis is the main display string, and must be within 3-100 characters."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed community description. 10-10000 characters. Markdown allowed.\nCorresponds to the description column in community_platform_communities.\nCan be omitted or set to null, but if provided, must be 10 to 10000 characters, markdown supported."},"slug":{"type":"string","description":"URL-safe slug, unique. Used for pretty URLs and direct linking.\nField: slug in community_platform_communities. Must be non-empty, unique, URL-safe string."}},"required":["name","title","slug"],"description":"DTO for creating a new community entity. Mirrors the community_platform_communities table in Prisma, referencing the required fields 'name', 'title', 'slug', and optionally 'description'.\nIntended for member role (not guests), with additional business constraints enforced on length, uniqueness, and format.\nDoes NOT include creator_member_id (derived from auth context), status (set by system), or timestamp fields (auto-generated)."},"ICommunityPlatformCommunity.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_communities","properties":{"title":{"type":"string","description":"Community's display title. 3-100 characters.\nDisplay title for listings or headers. Optional during update; if present, must be within allowed length."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed community description. 10-10000 characters, markdown allowed. Optional for update; can be null to clear description or string to replace."},"slug":{"type":"string","description":"URL-safe unique slug for community. If updating, must remain unique and URL-safe."},"status":{"type":"string","description":"Current status (e.g., active, private, banned, archived). Allowed transitions determined by business rules."}},"required":[],"description":"DTO for updating fields on an existing community entity, mapped to the community_platform_communities Prisma schema.\nAll fields are optional (Partial<T> style), and may include 'title', 'description', 'slug', and optionally 'status' (admin-only). Id, creator/owner references, and timestamp fields are intentionally excluded in accordance with Prisma model and business rules.\nThis type is permissive for PATCH/PUT-style update flows."},"ICommunityPlatformCommunityRule.IRequest":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"Unique identifier of the parent community for which to list or filter rules. Required context for all listings."},"version":{"type":"integer","description":"Version number of the community rules to filter for, if provided. Optional; when omitted, returns all versions."},"search":{"type":"string","description":"Full-text search query for rule body content. Enables searching by text or keywords."},"published_at_from":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for filtering rules by published_at timestamp. Useful for time-based version audit."},"published_at_to":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for filtering rules by published_at timestamp."},"sort_by":{"oneOf":[{"const":"version","description":"Field by which the results are sorted. Allowed values: version, created_at, updated_at, published_at."},{"const":"created_at","description":"Field by which the results are sorted. Allowed values: version, created_at, updated_at, published_at."},{"const":"updated_at","description":"Field by which the results are sorted. Allowed values: version, created_at, updated_at, published_at."},{"const":"published_at","description":"Field by which the results are sorted. Allowed values: version, created_at, updated_at, published_at."}],"description":"Field by which the results are sorted. Allowed values: version, created_at, updated_at, published_at."},"order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort order: 'asc' for ascending, 'desc' for descending."}],"description":"Sort order: 'asc' for ascending, 'desc' for descending."},"page":{"type":"integer","description":"Page number for pagination (starting from 1)."},"limit":{"type":"integer","description":"Maximum number of rule results per page."}},"required":["community_id"],"description":"Filtering, search, and pagination parameters for listing or finding rules belonging to a specific community. Use community_id as required context, and supply sorting, search, or version control as needed for UI filtering or mod/admin review. All filters are optional except community_id."},"ICommunityPlatformCommunityRule":{"type":"object","x-autobe-prisma-schema":"community_platform_community_rules","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the community rule entry. Primary key for referencing this rule entry in the database and API."},"community_id":{"type":"string","format":"uuid","description":"Foreign key referencing the parent community (community_platform_communities.id). Identifies which community this rule applies to."},"body":{"type":"string","description":"Full text or Markdown-formatted content of the rule document. The source-of-truth for posting, commenting, and moderation governance in the community. Length: up to 50,000 characters."},"version":{"type":"integer","description":"Integer version number for the rule set. Increments with each update. Used for audit, version control, and rollback workflows."},"published_at":{"type":"string","format":"date-time","description":"Timestamp when this rule version became official or published. Used for audit, rollback, and user notification."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the rule entry was created in the database. Supports audit trails."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to this rule entry."}},"required":["id","community_id","body","version","published_at","created_at","updated_at"],"description":"A single versioned community rule set. Contains the authoritative governance document (body), versioning for audit, and timestamps for lifecycle tracking. Used by members, moderators, and admins to enforce community-specific behavior."},"ICommunityPlatformCommunityRule.ICreate":{"type":"object","properties":{"body":{"type":"string","description":"The full text or rich content of the community rule. Markdown is supported and should not exceed 50,000 characters.\n\nThis field represents the actual rule content and will be enforced as the governance policy within the target community. Required for creation and must adhere to content guidelines and formatting rules described in requirements."},"version":{"type":"integer","description":"Version number for the community rule. Should increment on every rule update.\n\nUsed for audit, rollback, and policy tracking purposes. Required for new rules; must be unique per community."},"published_at":{"type":"string","format":"date-time","description":"The official publication date/time of this rule version. Used for establishing when the rule becomes effective and for audit versioning.\n\nShould be an ISO 8601 timestamp."}},"required":["body","version","published_at"],"description":"DTO schema for creating a new community-specific rules document. Used by community moderators or admins to define posting, commenting, and moderation policies.\n\nThis type matches the fields from the community_platform_community_rules Prisma table necessary to provision a new rule version. Descriptions provide guidance on content length, audit policies, and formatting."},"ICommunityPlatformCommunityRule.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Editable full text or Markdown rule document for the community.\n\nUse this field to update rule wording, formatting, or content in line with changing community policies. Updates must respect overall character limits."},"version":{"type":"integer","description":"The next integer version number for the rule document.\n\nMust be strictly monotonically increasing; required for audit trails and version rollback."},"published_at":{"type":"string","format":"date-time","description":"Timestamp for latest publication of this version of the rule.\n\nRequired to signal the effective date/time for versioned policy. Must be an ISO 8601 string."}},"required":["body","version","published_at"],"description":"DTO for updating an existing community rule document. Includes current body, version, and publication time fields. All updates are subject to versioning, character limit, and audit compliance as enforced by the platform's requirements and Prisma schema (community_platform_community_rules table).\n\nTypically used as a payload in PUT methods for rules update endpoints; enforces new version and publication time per edit."},"ICommunityPlatformCommunityBanner.IRequest":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"UUID of the community this banner request is for. Used to scope search/filter operations. If omitted, results filter against all communities the actor can access."},"active":{"type":"boolean","description":"Filter for active or inactive banners. Set true to find only enabled banners, false for archived/disabled banners."},"order":{"type":"integer","description":"Order/index filter for banners. Used to retrieve banners of a specific order/priority for community display rotation.","minimum":1},"file_upload_id":{"type":"string","format":"uuid","description":"UUID reference to the file upload for the banner. Used to find banners referencing a specific upload record."},"created_at_from":{"type":"string","format":"date-time","description":"Filter range: earliest created_at timestamp to include (ISO 8601 string)."},"created_at_to":{"type":"string","format":"date-time","description":"Filter range: latest created_at timestamp to include (ISO 8601 string)."},"updated_at_from":{"type":"string","format":"date-time","description":"Filter range: earliest updated_at timestamp to include (ISO 8601 string)."},"updated_at_to":{"type":"string","format":"date-time","description":"Filter range: latest updated_at timestamp to include (ISO 8601 string)."},"alt_text":{"type":"string","description":"Partial or full search term to match alt text (accessibility) for banners."},"include_deleted":{"type":"boolean","description":"When true, include soft-deleted (archived) banner images in search results. Default is false."},"page":{"type":"integer","description":"Pagination: page number for result set. Default is 1.","minimum":1},"limit":{"type":"integer","description":"Pagination: number of records per page. Platform maximum enforced.","minimum":1}},"required":[],"description":"Request DTO for searching, filtering, and paginating community banner images. Used by moderation/admin UIs to find banners for a given community by status, order, file, or metadata. Supports advanced queries and permissions enforcement. All parameters are optional and can be combined."},"ICommunityPlatformCommunityBanner":{"type":"object","x-autobe-prisma-schema":"community_platform_community_banners","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier of the community banner."},"community_id":{"type":"string","format":"uuid","description":"References the community this banner belongs to. Points to community_platform_communities.id."},"file_upload_id":{"type":"string","format":"uuid","description":"Pointer to the actual uploaded file record. Refers to community_platform_file_uploads.id, where the image location and metadata is stored."},"order":{"type":"integer","description":"Order/index for banners used in rotation for a community, e.g. for hero banner carousels. Lower numbers have higher precedence. Can be null for single banners."},"alt_text":{"type":"string","description":"Accessibility alt text for the image, up to 250 characters. Nullable."},"active":{"type":"boolean","description":"Whether this banner is currently enabled/displayed on front end for the community."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when banner was created/uploaded (ISO 8601 string)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to the banner metadata."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for archiving or rotation. Null if the banner is active."}},"required":["id","community_id","file_upload_id","active","created_at","updated_at"],"description":"Full DTO for a community banner image as defined in community_platform_community_banners Prisma schema. Captures metadata such as community association, file reference, order (for display rotation), accessibility alt text, enabled state, created/updated timestamps, and soft deletion for archiving. File upload reference must be resolved for actual image content. All fields and constraints match the Prisma schema. Used for both detail and list endpoints."},"ICommunityPlatformCommunityBanner.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_community_banners","properties":{"file_upload_id":{"type":"string","format":"uuid","description":"UUID of the file record referencing the uploaded banner image, as stored in the `community_platform_file_uploads` table. This is used to associate the banner entry with an already-uploaded image asset.\n\nThe field is required and must point to a valid existing file upload."},"order":{"type":"integer","description":"Display order or index for this banner in relation to other banners used in the same community.\n\nOptional. Used to control the sequence of banners if multiple are present. Lower numbers may correspond to higher-priority banners. Null/unspecified values may default to the back of the order list."},"alt_text":{"type":"string","maxLength":250,"description":"Alternative text for accessibility purposes. May be displayed to screen readers or as fallback if the image does not load. Optional and maximum length is 250 characters."},"active":{"type":"boolean","description":"Whether this banner is currently enabled and displayed for the community. Set to true for immediate display, or false to add the banner without making it active.\n\nUsed by moderation or admin UI for managing banner visibility and image rotation."}},"required":["file_upload_id","active"],"description":"Request object used to create a new banner image for a community. This schema links a previously uploaded image to a community as a banner, optionally specifying display order and accessibility metadata. All attributes must comply with the business logic enforced by the system, including required active flag, image file reference, and optional ordering/alt text. Field constraints and relationships map to the `community_platform_community_banners` schema, supporting compliance and accessibility policies.\n\nSecurity: Only moderators or admins for the relevant community may create banners. Permissions and image file validity must be enforced by the application. Creation times and primary keys are system-generated."},"ICommunityPlatformCommunityBanner.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_community_banners","properties":{"order":{"type":"integer","description":"Display order or index for this banner relative to others for the community. Changing this updates banner sequencing in rotation or carousel display. Optional; only provided if the order needs to be changed."},"alt_text":{"type":"string","maxLength":250,"description":"Alternative text for the banner image (for accessibility or display fallback). May be edited by moderators or admins and is limited to 250 characters. Optional; supply new alt_text or omit to leave unchanged."},"active":{"type":"boolean","description":"Flag to toggle whether this banner is publicly visible in the community. Set to true to activate, or false to hide the banner from users. Optional; omitting this leaves the activation status unchanged."}},"required":[],"description":"Update object for an existing community banner, as defined in the `community_platform_community_banners` table. Fields here may be provided selectively for partial updates. The request is typically used to update the display order, alternative accessibility text, or activation status of a banner image. Only the existing banner's metadata is changed – not the image file itself. Field values correspond to those defined in the Prisma schema and support moderator/admin workflows for managing community branding assets."},"ICommunityPlatformCommunityImage.IRequest":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the community to which to filter images."},"image_type":{"type":"string","description":"Type of image to filter results (e.g. 'icon', 'background', etc.). Additional context can be derived from platform conventions regarding community visuals."},"active":{"type":"boolean","description":"Boolean flag to filter only currently displayed community images."},"order":{"type":"integer","description":"Order/priority for filtering or sorting the display of community images of the same type (if required)."},"created_after":{"type":"string","format":"date-time","description":"If present, returns only community images created after this ISO 8601 date-time."},"created_before":{"type":"string","format":"date-time","description":"If present, returns only community images created before this ISO 8601 date-time."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field to sort results by; supports created_at timestamp or order for presentation."},{"const":"order","description":"Field to sort results by; supports created_at timestamp or order for presentation."}],"description":"Field to sort results by; supports created_at timestamp or order for presentation."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order direction: ascending or descending."},{"const":"desc","description":"Sort order direction: ascending or descending."}],"description":"Sort order direction: ascending or descending."},"page":{"type":"integer","description":"Page number for paginated results. Starts at 1."},"limit":{"type":"integer","description":"Maximum number of results per page for pagination."}},"required":[],"description":"Request schema for searching/filtering community images associated with a community. Supports type filtering, sorting, status filtering, and pagination for visual asset management."},"ICommunityPlatformCommunityImage":{"type":"object","x-autobe-prisma-schema":"community_platform_community_images","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for this community image, matching the 'id' field in the community_platform_community_images table. Immutable once set."},"community_id":{"type":"string","format":"uuid","description":"UUID of the community this image belongs to, linking to community_platform_communities.id. Needed for context and referential integrity."},"file_upload_id":{"type":"string","format":"uuid","description":"UUID referencing the actual storage record for this image in community_platform_file_uploads.id."},"image_type":{"type":"string","description":"Type of image (e.g., 'icon', 'background', etc.). Used for display logic and filtering."},"order":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Order/priority for multiple images of the same type. If set, must be a unique non-negative integer for a given community/image_type combination."},"alt_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Accessibility text describing the image. Optional; may be null or up to 250 characters."},"active":{"type":"boolean","description":"Indicates if this image is currently displayed/used for its community. True for main image, false for archived/legacy images."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this image was created/added to the community, using ISO string format. Immutable."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the most recent metadata change to this community image (not the file)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete/archival timestamp. If set (not null), image is not active."}},"required":["id","community_id","file_upload_id","image_type","active","created_at","updated_at"],"description":"Community image object (non-banner) tied to a community. Directly models a row from community_platform_community_images. Contains all metadata describing its file upload, image purpose, and display status. Used for community branding/identity and asset management. Field documentation is derived from Prisma schema comments and business rules."},"ICommunityPlatformCommunityImage.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_community_images","properties":{"file_upload_id":{"type":"string","format":"uuid","description":"Pointer to uploaded file. Reference to the unique id in community_platform_file_uploads. This field is required and links the image entity to an uploaded file."},"image_type":{"type":"string","description":"Type of image (e.g., 'icon', 'background'). This field is used for filtering community images and must match the business-controlled enum of available image types. See community branding requirements for allowed types."},"order":{"type":"integer","description":"Order/priority for multiple images of the same type, if needed. Used to determine display sequence among images of identical image_type for a community. Optional."},"alt_text":{"type":"string","maxLength":250,"description":"Accessibility alt text for the image (0-250 chars). Should be provided for improved accessibility, but is optional."},"active":{"type":"boolean","description":"Whether this image is currently displayed for the community. Used to control active/inactive states for rotation or display management."}},"required":["file_upload_id","image_type","active"],"description":"DTO for creating a community image, representing branding, icon, or background visuals. Maps directly to the community_platform_community_images table. Enforces file reference, image type, order, alt text, and activation status. Only fields defined in Prisma schema are present.","examples":{"v0":{"file_upload_id":"9d6b91ed-c622-41a7-920b-c4a6b4545ec1","image_type":"icon","order":1,"alt_text":"Community logo.","active":true}}},"ICommunityPlatformCommunityImage.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_community_images","properties":{"image_type":{"type":"string","description":"Type of image (e.g., 'icon', 'background'). Updates image's classification for branding. Must match acceptable business types."},"order":{"type":"integer","description":"Order/priority for images of the same type. Used to reconfigure display sequence."},"alt_text":{"type":"string","maxLength":250,"description":"Accessibility alt text for image. Updates alt text for improved accessibility; optional."},"active":{"type":"boolean","description":"Indicates if the image is set as currently displayed/active for the community."}},"required":[],"description":"DTO for updating fields of an existing community image, such as type, order, alt_text, and display activation state. Only modifiable fields per the schema may be present. All updates are validated by business logic and system permissions.","examples":{"v0":{"order":2,"alt_text":"Updated accessibility text.","active":false}}},"ICommunityPlatformCommunityStatusChange.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for paginated results (1-based index). Returned pages contain a fixed number of results as per platform policy. Optional; defaults to 1 if omitted."},"limit":{"type":"integer","description":"Number of status change entries per page. Useful for controlling pagination performance in large communities. Typical values: 10, 20, 50. Optional; default set by system config."},"status":{"type":"string","description":"Filter by new_status or previous_status value. Only results with this status (either before or after the change) will be included. Useful for reviewing all 'banned', 'private', or 'active' transitions. Optional."},"performed_by_id":{"type":"string","format":"uuid","description":"UUID (string) of the moderator or admin who performed the status change. Use to filter audit trail by actor."},"from":{"type":"string","format":"date-time","description":"ISO 8601 formatted date-time string representing the start of the query window (inclusive). Only status changes created_at after this are returned. Optional."},"to":{"type":"string","format":"date-time","description":"ISO 8601 formatted date-time string representing the end of the query window (inclusive). Only status changes created_at before this are returned. Optional."},"sort":{"oneOf":[{"const":"created_at","description":"Sort order for results. Valid values: 'created_at' (default, descending), 'previous_status', 'new_status'. Allow sorting primarily by date or status code. Optional."},{"const":"previous_status","description":"Sort order for results. Valid values: 'created_at' (default, descending), 'previous_status', 'new_status'. Allow sorting primarily by date or status code. Optional."},{"const":"new_status","description":"Sort order for results. Valid values: 'created_at' (default, descending), 'previous_status', 'new_status'. Allow sorting primarily by date or status code. Optional."}],"description":"Sort order for results. Valid values: 'created_at' (default, descending), 'previous_status', 'new_status'. Allow sorting primarily by date or status code. Optional."},"order":{"oneOf":[{"const":"asc","description":"Ascending ('asc') or descending ('desc') sort on the sort property. Default: 'desc' (most recent first). Optional."},{"const":"desc","description":"Ascending ('asc') or descending ('desc') sort on the sort property. Default: 'desc' (most recent first). Optional."}],"description":"Ascending ('asc') or descending ('desc') sort on the sort property. Default: 'desc' (most recent first). Optional."}},"required":[],"description":"Filtering and pagination parameters for searching the community_platform_community_status_changes audit log. Allows querying by actor, status, date range, and custom sort order for audit and compliance workflows."},"ICommunityPlatformCommunityStatusChange":{"type":"object","x-autobe-prisma-schema":"community_platform_community_status_changes","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the community status change record, referencing community_platform_community_status_changes.id in the database."},"community_id":{"type":"string","format":"uuid","description":"ID of the community affected by this status transition, matching community_platform_communities.id."},"performed_by_id":{"type":"string","format":"uuid","description":"ID of the admin or moderator who performed the status change, referencing platform actor tables."},"previous_status":{"type":"string","description":"String code for the old status of the community (e.g., 'active', 'private')."},"new_status":{"type":"string","description":"String code for the new status after this change (e.g., 'banned', 'archived')."},"change_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short explanation or code for why this status change occurred (e.g., 'policy_violation', 'user request'), nullable if no extra reason given."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional context or notes about the status change, for audit/compliance (free-form, optional)."},"created_at":{"type":"string","format":"date-time","description":"ISO timestamp of when the status change was made and recorded; required for compliance/audit."}},"required":["id","community_id","performed_by_id","previous_status","new_status","created_at"],"description":"Audit record and snapshot of a single status change event for a community. Models an entry in community_platform_community_status_changes, capturing state transitions, responsible actors, and context. Essential for compliance, audit, and moderator history. Field documentation derives from the Prisma schema and requirements analysis."},"ICommunityPlatformCommunityStatusChange.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_community_status_changes","properties":{"previous_status":{"type":"string","description":"The previous status of the community before the change (e.g., 'active', 'suspended', 'private').\n\nThis field records the state of the community immediately prior to the status change event. It is essential for audit trails and understanding the context of the change. The value must match a valid status as recognized by the business logic and should be consistent with the statuses defined for communities. Refer to the Prisma schema for enumerated or accepted values.\n\nExample: 'active', 'banned', 'private', 'archived'."},"new_status":{"type":"string","description":"The new status of the community after the change (e.g., 'banned', 'private', 'active').\n\nThis property indicates the resulting state of the community following this status change event. It is critical for enforcement of community access policies and historical review. Must be a valid status per platform rules and business requirements described in the Prisma schema.\n\nExample: 'banned', 'private', 'active', 'archived'."},"change_reason":{"type":"string","description":"A brief, human-readable reason or code for the status change event.\n\nOptional field used to provide context for why the status change occurred. This may include references to policy, violations, user requests, or system triggers. Limited to short explanatory text. This field supports compliance, user appeals, and moderator communication flows.\n\nExample: 'Rule violation', 'DMCA takedown', 'User request', 'Automated system policy'."},"notes":{"type":"string","description":"Optional additional notes, free-form comments or justification for moderators or admins. Typically used for internal audit, transparency, or investigator annotation.\n\nBusiness rules recommend using this field for secondary explanations, escalation details, or operational metadata. May be left empty if not needed.\n\nExample: 'Member banned for repeated policy infractions and subsequent appeal failure.'"},"performed_by_id":{"type":"string","format":"uuid","description":"The UUID of the moderator or admin who performed this status change action.\n\nThis field associates the status change action with the responsible actor for audit trail and compliance. Must reference a valid admin or moderator as defined in the system. The value is required to demonstrate authorized workflow and support future transparency and appeal processes.\n\nExample: '395fd7ba-80af-4722-b4c6-d265d2d4238d'."}},"required":["previous_status","new_status","performed_by_id"],"description":"Schema component for creating a new community status change event in the audit trail system (community_platform_community_status_changes).\n\nThis object defines all required and optional fields for recording a new event when a community's status changes (ban, unban, private, suspend, etc.). It establishes a historical record for compliance, audit, and workflow review. Refer to Prisma schema for field constraints and enumeration values."},"ICommunityPlatformCommunityStatusChange.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_community_status_changes","properties":{"previous_status":{"type":"string","description":"If specified, changes the recorded previous status value for this community status change record. Use only for audit correction or appeals."},"new_status":{"type":"string","description":"If specified, changes the target status for this historical record. Permitted only if business/audit workflow allows adjustment post-event. Use with clear compliance justification."},"change_reason":{"type":"string","description":"Updates or rewrites the reason for this status change for audit and compliance clarity. Use only per platform workflow - e.g., verified appeals or admin correction."},"notes":{"type":"string","description":"Amends or adds additional internal/explanatory notes for this audit entry."}},"required":[],"description":"Schema component for updating or amending an existing community status change audit record in the system (community_platform_community_status_changes).\n\nPermits corrections or additions to documentation for audit, compliance, or transparency. Field updatability is governed by business policy. All modifications must be fully auditable with justification."},"ICommunityPlatformCommunityModeratorAssignment.IRequest":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the community to search moderator assignments for."},"member_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the member being searched or filtered."},"role":{"type":"string","description":"Moderator role to filter by (e.g., 'owner', 'moderator', 'trial_mod')."},"assigned_by_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the admin or moderator who assigned this moderator role. Used as a filter."},"status":{"type":"string","description":"Current status to filter assigned moderator records (e.g., 'active', 'ended')."},"start_at_from":{"type":"string","format":"date-time","description":"ISO 8601 timestamp to filter assignments whose start_at is after this value."},"start_at_to":{"type":"string","format":"date-time","description":"ISO 8601 timestamp to filter assignments whose start_at is before this value."},"end_at_from":{"type":"string","format":"date-time","description":"ISO 8601 timestamp to filter assignments with end_at after this value; useful for finding ended assignments in a window."},"end_at_to":{"type":"string","format":"date-time","description":"ISO 8601 timestamp to filter assignments with end_at before this value."},"note":{"type":"string","description":"Partial or full search within the assignment note for keyword-based search."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Page number to retrieve (pagination)."},"limit":{"type":"integer","format":"uint32","minimum":1,"maximum":100,"description":"Number of records per result page (pagination)."},"order_by":{"type":"string","description":"Column name to sort results by, such as 'created_at', 'updated_at', 'start_at', or 'end_at'."},"order_dir":{"oneOf":[{"const":"asc","description":"Sort direction: ascending or descending."},{"const":"desc","description":"Sort direction: ascending or descending."}],"description":"Sort direction: ascending or descending."}},"required":[],"description":"Request DTO for searching/filtering moderator assignments in the community_platform_community_moderator_assignments table.\n\nAll properties are optional filters for advanced search and pagination. No property is strictly required; filters may be combined. Pagination is enforced through page and limit. If not provided, system defaults are applied.\n\nSee detail in associated community and moderation assignment management flows."},"ICommunityPlatformCommunityModeratorAssignment":{"type":"object","x-autobe-prisma-schema":"community_platform_community_moderator_assignments","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the moderator assignment (UUID)."},"community_id":{"type":"string","format":"uuid","description":"Community for which moderation is assigned (UUID reference to community_platform_communities.id)."},"member_id":{"type":"string","format":"uuid","description":"Assigned member (UUID reference to community_platform_members.id)."},"role":{"type":"string","description":"Moderator role (e.g., owner, moderator, trial_mod, etc.). Defines permissions and hierarchy within the community."},"assigned_by_id":{"type":"string","format":"uuid","description":"Admin/moderator who assigned this moderator role (UUID). For audit and permission tracking."},"start_at":{"type":"string","format":"date-time","description":"Assignment start time. ISO 8601 UTC timestamp for when this moderator role took effect."},"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"Assignment end time (ISO 8601 UTC timestamp). If null, indicates assignment is still active."},{"type":"null"}],"description":"Assignment end time (timestamp or null). If null, this assignment is still active."},"note":{"oneOf":[{"type":"string","description":"Short text note for assignment/removal. For business or audit context. Optional."},{"type":"null"}],"description":"Short note for this assignment. May include reason, context, or removal comment. Optional."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (UTC, ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Last update to this record (UTC, ISO 8601)."}},"required":["id","community_id","member_id","role","assigned_by_id","start_at","created_at","updated_at"],"description":"Moderator assignment record linking a platform member to a specific community and moderator role. Corresponds directly to a row in community_platform_community_moderator_assignments.\n\nIncludes assignment period, assigned role, assignment/removal context, and audit fields for tracking. Nullable end_at or note fields indicate open-ended or completed/terminated assignments.\n\nUsed for displaying moderator teams, assignment audit, and role-based permission logic per community.\n\nAll properties map directly to columns in the referenced Prisma model.\n"},"ICommunityPlatformCommunityModeratorAssignment.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_community_moderator_assignments","properties":{"member_id":{"type":"string","format":"uuid","description":"The unique identifier of the platform member being assigned the moderator role to a specific community. Must reference an existing member in the 'community_platform_members' table."},"role":{"type":"string","description":"The moderator role assigned for the community (e.g., 'owner', 'moderator', 'trial_mod', etc.). Role definitions determine the level of permission and hierarchy. String value must match business logic constraints."},"start_at":{"type":"string","format":"date-time","description":"Assignment start time for the moderator role, in ISO 8601 format with timezone. Used for audit and activation logic."},"note":{"oneOf":[{"type":"string","description":"Optional short reason or note for assignment/removal. Supplies justification or explanation for the action. Nullable field with a maximum reasonable length (e.g., 500 characters)."},{"type":"null"}],"description":"Optional short reason or note for assignment/removal. Supplies justification or explanation for the action. Nullable field with a maximum reasonable length (e.g., 500 characters)."}},"required":["member_id","role","start_at"],"description":"DTO representing creation information for assigning a platform member as a moderator of a specific community. Maps directly to the 'community_platform_community_moderator_assignments' Prisma schema table. Used for assignment creation, onboarding of moderators, and management workflows by admins. All critical business rules for relationships, permission levels, and audit logging enforced. The assigning actor ID is provided by authentication context/service, not by client. Note that assignment is to a community context, but the community_id is inferred from route or path context, NOT included directly. Includes audit and relationship fields. Does not permit inclusion of fields managed by the system (e.g., created_at, updated_at) or immutable/permanent fields not set at creation."},"ICommunityPlatformCommunityModeratorAssignment.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_community_moderator_assignments","properties":{"role":{"type":"string","description":"Updates the moderator role for the assignment (e.g., promoting from 'trial_mod' to 'moderator', or changing to 'owner'). String value must follow platform business rules for allowed roles."},"end_at":{"type":"string","format":"date-time","description":"If assignment ends (due to removal, resignation, etc.), this field specifies the time the assignment ended. Nullable: set for concluded assignments only, otherwise omitted."},"note":{"type":"string","description":"Optional note or reason for modifying the assignment or for removal. May document rationale for audit or compliance tracking. Nullable field."}},"required":[],"description":"DTO representing permitted updatable fields for an existing moderator assignment in a community. Maps directly to the updatable columns in 'community_platform_community_moderator_assignments' (excluding audit and system-managed fields such as created_at, updated_at, and primary key ids). Used in updating assignments for role change, truncating/modifying end date, or attaching justification notes. Must follow permission policy for who may update. All properties optional and validate business logic/rule compliance. Does not permit modification of assignment relationships (e.g., cannot change assigned member or community for existing record)."},"ICommunityPlatformPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination (minimum 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Records per page (max 100, default 20)."},"sort_by":{"oneOf":[{"const":"hot","description":"Sorting logic for result: 'hot', 'new', 'top', 'controversial', or fall back to 'created_at'."},{"const":"new","description":"Sorting logic for result: 'hot', 'new', 'top', 'controversial', or fall back to 'created_at'."},{"const":"top","description":"Sorting logic for result: 'hot', 'new', 'top', 'controversial', or fall back to 'created_at'."},{"const":"controversial","description":"Sorting logic for result: 'hot', 'new', 'top', 'controversial', or fall back to 'created_at'."},{"const":"created_at","description":"Sorting logic for result: 'hot', 'new', 'top', 'controversial', or fall back to 'created_at'."}],"description":"Sorting logic for result: 'hot', 'new', 'top', 'controversial', or fall back to 'created_at'."},"search":{"type":"string","description":"Full-text search (on post title, body for text, URL for links)."},"community_platform_community_id":{"type":"string","format":"uuid","description":"Filter to a single community's posts."},"content_type":{"oneOf":[{"const":"text","description":"Optional content type to filter results."},{"const":"link","description":"Optional content type to filter results."},{"const":"image","description":"Optional content type to filter results."}],"description":"Optional content type to filter results."},"status":{"type":"string","description":"Optional status field to filter: published, pending, removed, mod_queued, etc."}},"required":[],"description":"Request DTO for advanced search, pagination, and filter of posts using business rules from requirement analysis. Limits access to client-allowed filters and supports only existing fields. No direct user_id filters. Client may use search, filters, and sorting to specify post query use cases for feeds and exploration experiences."},"ICommunityPlatformPost":{"type":"object","x-autobe-prisma-schema":"community_platform_posts","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post (Primary Key)."},"community_platform_member_id":{"type":"string","format":"uuid","description":"The unique identifier of the creating member; references community_platform_members.id."},"community_platform_community_id":{"type":"string","format":"uuid","description":"The unique identifier of the community this post belongs to. References community_platform_communities.id."},"title":{"type":"string","description":"Post title. Maximum 300 characters. Used in search and display."},"content_body":{"type":"string","description":"Optional text body for text posts. Up to 40,000 characters. Null for link/image posts."},"content_type":{"type":"string","description":"Indicates the type of post: 'text', 'link', or 'image'. Use to select proper rendering and content validation."},"status":{"type":"string","description":"Moderation or publication status. E.g. 'published', 'pending', 'removed', 'mod_queued'. Business rules apply."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of when the post was created."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp representing the last time the post was updated."},"deleted_at":{"type":"string","format":"date-time","description":"Soft delete timestamp; null if active, else ISO8601 when deleted. Used for archival/retention flows."}},"required":["id","community_platform_member_id","community_platform_community_id","title","content_type","status","created_at","updated_at"],"description":"Full schema representing a post entity from community_platform_posts.\n\nIncludes all direct table columns, excluding seldom-exposed sensitive content, with field-matching names for implementation. 'deleted_at' is nullable; only present if soft-deleted.\n\nFor responses, includes all non-sensitive fields per security guidelines. For creation, certain fields (id, created_at, updated_at) are system-managed and may not be set by client. For search/list summary, most fields may be required."},"ICommunityPlatformPost.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_posts","properties":{"community_platform_community_id":{"type":"string","format":"uuid","description":"Target community's unique identifier. This is a required reference to the community in which the post is being created. Must match an existing community's id from the community_platform_communities table."},"title":{"type":"string","maxLength":300,"description":"Post title. This is a required, non-empty string used as the main identifying text. Limited to 300 characters, used for indexing and search, and must pass format and banned word filters per business rules."},"content_body":{"oneOf":[{"type":"string","maxLength":40000,"description":"The body of the post (for text posts); optional for link/image types. Limited to 40,000 characters, and subject to content validation, banned word filters, and business rules."},{"type":"null"}],"description":"Optional text content body for text posts. May be omitted or set to null when not applicable (e.g., for link or image posts)."},"content_type":{"oneOf":[{"const":"text","description":"Indicates the type of post ('text', 'link', or 'image'). Must be one of the specified enum values. Used to control creation logic and validate required fields."},{"const":"link","description":"Indicates the type of post ('text', 'link', or 'image'). Must be one of the specified enum values. Used to control creation logic and validate required fields."},{"const":"image","description":"Indicates the type of post ('text', 'link', or 'image'). Must be one of the specified enum values. Used to control creation logic and validate required fields."}],"description":"Indicates the type of post ('text', 'link', or 'image'). Must be one of the specified enum values. Used to control creation logic and validate required fields."},"status":{"type":"string","description":"Moderation or publication status for workflow (e.g., 'pending', 'published', 'removed', 'hidden', 'mod_queued'). The initial status is system/business policy dependent."}},"required":["community_platform_community_id","title","content_type"],"description":"Create DTO for a new community post, representing user-generated content within a specific community. Excludes identity fields (id, author/member id), timestamps, and system fields, which are set by the backend. Fulfills all business constraints for initial post creation. Must reference only fields that exist in community_platform_posts. Many other fields and relationships are system-managed."},"ICommunityPlatformPost.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_posts","properties":{"title":{"type":"string","maxLength":300,"description":"Optional new post title. Limited to 300 characters, must pass content policy and banned word filters."},"content_body":{"oneOf":[{"type":"string","maxLength":40000,"description":"Updated body for text posts. Optional and may be null for link/image. Max 40,000 chars, subject to content rules."},{"type":"null"}],"description":"Updated text content for text posts; nullable for other types per business rules."},"content_type":{"oneOf":[{"const":"text","description":"If updating, must be one of: 'text', 'link', 'image'. Controls validation and enforceable only if post was not yet published."},{"const":"link","description":"If updating, must be one of: 'text', 'link', 'image'. Controls validation and enforceable only if post was not yet published."},{"const":"image","description":"If updating, must be one of: 'text', 'link', 'image'. Controls validation and enforceable only if post was not yet published."}],"description":"If updating, must be one of: 'text', 'link', 'image'. Controls validation and enforceable only if post was not yet published."},"status":{"type":"string","description":"Optional update to moderation/publication status. E.g., 'published', 'pending', 'removed', per policy."}},"required":[],"description":"Update DTO for community_platform_posts. All fields optional, supporting partial updates for editing, moderation, or post status changes. Forbidden to update author/member/community references, id, or timestamps. Applies all business and integrity constraints for partial updates. No system-managed fields allowed. Only fields that exist on community_platform_posts."},"ICommunityPlatformPostImage.IRequest":{"type":"object","properties":{"postId":{"type":"string","format":"uuid","description":"The unique identifier of the post for which post images should be queried. Required when filtering or searching images attached to a single post."},"ordering":{"type":"integer","description":"Optional. Filter by specific image ordering within the post, if known (e.g., return only images with ordering=1)."}},"required":["postId"],"description":"Request structure for searching, filtering, or paginating images attached to a specific post. Supports filtering on postId and ordering, and is used as the body of image search/list endpoints for post galleries or details. Only defined properties may be included."},"ICommunityPlatformPostImage":{"type":"object","x-autobe-prisma-schema":"community_platform_post_images","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this post image association. Each image attached to a post has a unique UUID."},"community_platform_post_id":{"type":"string","format":"uuid","description":"References the parent post's unique identifier, indicating which post this image is attached to."},"community_platform_file_upload_id":{"type":"string","format":"uuid","description":"References the file upload id from the global file upload table. Indicates which file (image asset) is attached to the post as an image."},"ordering":{"type":"integer","description":"Order of the image within the post's gallery (1 to N). Determines display sequence for multi-image posts."}},"required":["id","community_platform_post_id","community_platform_file_upload_id","ordering"],"description":"Represents an image attached to a post in the community platform. This maps to a row in the community_platform_post_images table. Each image is linked to its parent post, has a file upload reference for the image asset, and is ordered within the post's image sequence. All property names and types follow the Prisma schema definition exactly. No additional or missing properties are allowed."},"ICommunityPlatformPostImage.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_post_images","properties":{"community_platform_post_id":{"type":"string","format":"uuid","description":"Unique identifier for the parent post to which this image is attached. This must be the UUID of an existing row in the community_platform_posts table. Required to associate the image with a post upon creation.\n\nBased on the database schema, this field provides referential integrity and ensures that images cannot exist without parent posts. Use cases include creating image galleries for posts and associating each image as part of the ordered sequence attached to a post."},"community_platform_file_upload_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the file upload associated with this post image. Must reference a valid entry in the community_platform_file_uploads table (image previously uploaded). This field is necessary to properly reference, display, and audit files used as post attachments.\n\nReferential integrity ensures that the post image always points to a valid stored file. Only files that have been successfully uploaded can be referenced; uploading a new file is a separate API call handled by the file upload subsystem."},"ordering":{"type":"integer","description":"The display order for this image within its parent post (gallery or image list). This integer value determines the sequence in which images are presented to users and must be unique per post. First image should be 1, with higher numbers used for subsequent images.\n\nOrder enforcement enables gallery/carousel display logic, and helps users control which image appears as the primary or cover image. API logic should reject duplicate ordering for the same post and should enforce minimum (1) and maximum (per business rule) constraints. See requirements for overall image count per post."}},"required":["community_platform_post_id","community_platform_file_upload_id","ordering"],"description":"Payload schema for creating a new image relationship to a post within the platform. This schema is used to associate a previously uploaded image (from the file upload subsystem) as an attachment to a specific post, enforcing gallery ordering and referential integrity.\n\nEach instance creates a row in the community_platform_post_images table, linking the post and the uploaded file, and specifying the image's display order among those attached to the post. Used by content creation and editing workflows, particularly when users wish to attach, reorder, or manage post images.\n\nAll required properties are strictly defined by the underlying Prisma database schema for the community_platform_post_images table. Only valid, pre-uploaded files may be referenced, and post IDs must point to existing posts."},"ICommunityPlatformPostImage.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_post_images","properties":{"ordering":{"type":"integer","description":"The new display order for this attached image within its parent post's image gallery. This field must be specified when updating image order to change the sequence in which the image appears among others attached to the same post.\n\nBusiness logic in the update handler will enforce uniqueness of ordering per post, and will reject duplicate or out-of-range values. Valid orderings start at 1 and may go up to the platform or community-configured maximum. Changing this field allows users to reorder images for display purposes."}},"required":["ordering"],"description":"Schema for updating metadata of an existing post image relationship, as recorded in the community_platform_post_images table. Only the 'ordering' field is updatable according to the platform's business logic and audit requirements; the parent post and file upload associations are fixed at creation.\n\nUsed in workflows where post image order needs to be changed (for example, reordering gallery images or promoting an image to be the cover). Input must pass uniqueness and range validations; the update will be rejected if a duplicate or invalid ordering is provided. All changes should be tracked for audit and compliance."},"ICommunityPlatformPostLink.IRequest":{"type":"object","properties":{"postId":{"type":"string","format":"uuid","description":"Unique identifier of the parent post this link query is associated with. Used for link context but may be omitted for global queries by admin UI.\n\nMust conform to UUID v4 standard. Required when filtering for links attached to a specific post."},"url":{"type":"string","description":"Partial or complete URL to search/filter for links attached to posts. Uses substring match for broad searches, or exact match for direct lookup.\n\nIf used, will perform case-insensitive sub-string search on URLs."},"preview_title":{"type":"string","description":"Preview or title text to search for in associated post links. Allows partial text matches for broad search functionality."},"preview_description":{"type":"string","description":"Allows searching post links for a given substring within their preview description, facilitating targeted moderation or curation."},"sort_by":{"oneOf":[{"const":"created_at","description":"Indicates the field by which results should be sorted. Must be one of: 'created_at', 'ordering', 'preview_title'."},{"const":"ordering","description":"Indicates the field by which results should be sorted. Must be one of: 'created_at', 'ordering', 'preview_title'."},{"const":"preview_title","description":"Indicates the field by which results should be sorted. Must be one of: 'created_at', 'ordering', 'preview_title'."}],"description":"Indicates the field by which results should be sorted. Must be one of: 'created_at', 'ordering', 'preview_title'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction for compatible sort_by fields. Accepts 'asc'|'desc'. If omitted, platform default is used (typically descending)."},{"const":"desc","description":"Sort direction for compatible sort_by fields. Accepts 'asc'|'desc'. If omitted, platform default is used (typically descending)."}],"description":"Sort direction for compatible sort_by fields. Accepts 'asc'|'desc'. If omitted, platform default is used (typically descending)."},"page":{"type":"integer","minimum":1,"description":"Page number (1-based). Used for paginated results when listing a large number of links. If omitted, defaults to 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results to return per page (max 100). Default is platform configuration, commonly 20."}},"required":[],"description":"Filter/search/pagination DTO for querying post links. Each property is optional but filtering by 'postId' is typical for listing links on a specific post. \n\nAllows advanced search by URL, title, or preview metadata, plus flexible sorting. Used for PATCH /communityPlatform/posts/{postId}/links and similar endpoints."},"ICommunityPlatformPostLink":{"type":"object","x-autobe-prisma-schema":"community_platform_post_links","description":"Represents a single link attached to a post. Contains URL, preview metadata, link order, and ID references to the parent post and file asset as required. This DTO is aligned to the community_platform_post_links Prisma DB schema and used for link representation in post detail responses.\n\nReturned from endpoints like GET /communityPlatform/posts/{postId}/links/{linkId} and in link collections for content presentation and moderation. All fields correspond directly to the underlying database schema.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this link attachment record. Maps to JP primary key 'id' field for community_platform_post_links.\n\nRequired by all detail and update operations."},"community_platform_post_id":{"type":"string","format":"uuid","description":"The UUID of the parent post to which this link is attached. Must reference an existing post entity."},"url":{"type":"string","description":"Absolute or protocol-relative URL for the linked resource. This field must contain a valid, well-formed URL as per standard URL syntax. Example: 'https://example.com/path'."},"preview_title":{"type":"string","description":"Title/label rendered in link preview cards for this URL. May be populated by link scraping or manual assignment. Optional."},"preview_description":{"type":"string","description":"Optional short description or preview text for the attached link. Used in rendering content summary cards."},"preview_image_uri":{"type":"string","description":"URL (usually absolute or proxied) for the preview image or favicon associated with this link. Must be a well-formed URI or null."},"ordering":{"type":"integer","description":"The order/navigation index for this link among multiple attached links in the same post (1-based integer; may be used to display as a sequence in post body)."}},"required":["id","community_platform_post_id","url"]},"ICommunityPlatformPostLink.ICreate":{"type":"object","properties":{"url":{"type":"string","format":"uri","description":"Validated external link URL (must be well-formed, non-empty, and subject to platform policy). This field is required for creating a new link on a post and must be a valid, policy-compliant URI."},"preview_title":{"type":"string","description":"Optional preview title extracted from the target URL. If available, this can be set by automated link parsing or by the user. Nullable if preview not available."},"preview_description":{"type":"string","description":"Optional preview description extracted from the target URL. This field is nullable and is not required if a description is not resolved from the link."},"preview_image_uri":{"type":"string","format":"uri","description":"Optional preview image or favicon URI extracted from the target URL. This may be shown in previews if available and must be a valid URI if provided. Nullable if not resolved."}},"required":["url"],"description":"Schema for creating a new link association with a post. This schema is used when an authenticated user attaches an external URL (as a link-type post or as an additional link to a post) to enrich platform content. Extracted previews are optional. All properties must comply with field-level comments from the underlying Prisma schema for post links.","x-autobe-prisma-schema":"community_platform_post_links"},"ICommunityPlatformPostLink.IUpdate":{"type":"object","properties":{"url":{"type":"string","format":"uri","description":"If updating the link's target, this must be set to a new valid, policy-compliant URL. Otherwise, omit or set to null to keep unchanged."},"preview_title":{"type":"string","description":"Optional updated preview title for the link (if available or re-parsed). Nullable if not updating."},"preview_description":{"type":"string","description":"Optional updated or corrected preview description for the link. Nullable if not updating."},"preview_image_uri":{"type":"string","format":"uri","description":"Optional preview image/favico URI from the target URL. Nullable if not updating or not applicable."}},"required":[],"description":"Schema for updating an existing link associated with a post. Permits updates to the displayed link URL or its preview data. Fields not included in the body remain unchanged. Follows the field definitions and types from the Prisma community_platform_post_links table. No required fields; any present field will be updated.","x-autobe-prisma-schema":"community_platform_post_links"},"ICommunityPlatformComment.IRequest":{"type":"object","x-autobe-prisma-schema":"community_platform_comments","properties":{"page":{"type":"integer","description":"Page number for paginated results. Must be a positive integer. Used to skip to a specific comment page.","minimum":1},"limit":{"type":"integer","description":"Maximum number of comments to return per page. The default may be set by business logic and is recommended to be between 10 and 100. Used for pagination controls."},"sort_by":{"type":"string","description":"Field or algorithm to sort comments by. Acceptable values include 'new' (latest first), 'top' (by score), 'controversial' (by controversial score), 'old' (oldest first), or custom algorithms if supported by business logic."},"order":{"type":"string","description":"Sort order for comments. Should be 'asc' for ascending or 'desc' for descending. The field may be ignored if sort_by specifies a custom algorithm."},"nesting_level":{"type":"integer","description":"Limit search results to comments up to the specified nesting (thread) depth. Root comments are level 1; replies are incrementally deeper. Optional and typically used when rendering collapsed or flattened comment views.","minimum":1,"maximum":10},"parent_id":{"type":"string","format":"uuid","description":"If specified, will filter to only comments that are direct replies to a specific parent comment, by UUID. Used for loading thread slices."},"status":{"type":"string","description":"Filter comments by their current status. Business logic will restrict to values such as 'published', 'deleted', 'mod_queued', 'removed', 'hidden', etc."},"member_id":{"type":"string","format":"uuid","description":"Optionally filter comments to those authored by a specific member, using UUID from the members table. Used for profile comment views or moderator/member filtering."},"date_from":{"type":"string","format":"date-time","description":"Filter for comments created at or after this ISO 8601 timestamp. Used for search range."},"date_to":{"type":"string","format":"date-time","description":"Filter for comments created at or before this ISO 8601 timestamp. Used for search range."},"search":{"type":"string","description":"Full text search within comment bodies. Performs a substring or text-indexed search across body content."}},"required":[],"description":"Comment search/filter/pagination request DTO for community_platform_comments.\n\nAllows searching or listing comments for a post, user, or thread, with advanced filtering (nesting_level, status, membership, etc.), pagination controls, and full-text search support. Retrieved fields must only reference actual columns present in the comments table, and sort/nest filtering behavior must comply with business rules for thread depth and sorting algorithms. Used in post comment lists, profile views, moderator tools, and search UI."},"ICommunityPlatformComment":{"type":"object","x-autobe-prisma-schema":"community_platform_comments","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the comment. Uniquely identifies this comment row in the community_platform_comments table."},"community_platform_post_id":{"type":"string","format":"uuid","description":"The ID of the post to which this comment was attached, referencing community_platform_posts.id."},"community_platform_member_id":{"type":"string","format":"uuid","description":"The ID of the member who authored this comment, referencing community_platform_members.id."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional. If present, the ID of the parent comment for nested replies. Root comments have parent_id null. Enables threaded/nested comment structure, referencing community_platform_comments.id."},"body":{"type":"string","description":"Main textual content of the comment. Markdown may be supported. Maximum length and validation governed by business rules (<= 10,000 characters)."},"nesting_level":{"type":"integer","description":"Depth of this comment in the nested thread tree. Root comments: 1. Child comments: incremented by parent's nesting_level. Limited per business rules/max system config. Used for render optimization and depth enforcement."},"status":{"type":"string","description":"Current moderation or publication status of this comment. Typical values: 'published', 'deleted', 'mod_queued', 'removed', 'hidden', etc. Used to control visibility, moderation, and workflow."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the comment was originally created. Always in UTC and stored in ISO 8601 format. Used for sorting, filtering, and audit/replay."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent substantive update to this comment. In UTC ISO 8601 format. Enables tracking of edits, histories, and audit/replay."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable. If present, soft delete marker indicating when this comment was disabled, orphaned, or removed from public views. Not present (null) for active comments. Used for audit and compliance."}},"required":["id","community_platform_post_id","community_platform_member_id","body","nesting_level","status","created_at","updated_at"],"description":"Represents a single threaded/nested comment attached to a post on the community platform. Fields and relationships strictly follow the community_platform_comments Prisma schema; does not include denormalized or calculated values. Includes threading (parent_id), author reference, content, moderation/publication status, audit timestamps, and soft-deletion markers where supported by the schema. Intended for use in comment retrieval (detail and lists), thread rendering, moderation actions, profile comment listings, and audit trails."},"ICommunityPlatformComment.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_comments","properties":{"community_platform_post_id":{"type":"string","format":"uuid","description":"The unique identifier of the target post to which this comment will be attached. Must match an existing record in the community_platform_posts table. Represents the parent post's foreign key."},"body":{"type":"string","description":"The comment body text. Required and must not be empty or only whitespace. Maximum allowed length is 10,000 characters. Subject to platform and community moderation/content policy for formatting, banned words, and length constraints."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The unique identifier of the parent comment if this is a reply (nested comment). Nullable for top-level comments. Used for threading/nesting structure and moderated to a maximum depth per business rules."}},"required":["community_platform_post_id","body"],"description":"Data required to create a new comment entity within a post.\n\nCorresponds to the community_platform_comments table. Used for member-initiated comment creation on posts, with support for optional nested replies using parent_id. Validates all input according to maximum lengths, text, moderation/content policy, and ensures correct linkage to parent post/comment. The field parent_id may be null (for root comments) or a valid UUID for a parent comment. This DTO is used as request body for comment creation endpoints and respects all business and schema constraints."},"ICommunityPlatformComment.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_comments","properties":{"body":{"type":"string","description":"Updated body text for the comment (max 10,000 characters, required for edit). May not be empty or only whitespace. Subject to all content, banned word, and formatting validation rules upon update."}},"description":"Partial update data for editing an existing comment in the community_platform_comments table.\n\nUsed as request body for comment update operations, typically to change an existing comment's body. Only the author (within allowed edit window) and authorized moderators/admins may perform updates. Only includes fields that the platform permits to be changed by the API; currently restricted to body text. Payload is validated for length, non-empty content, and content policies. This DTO is utilized for comment editing flows, including member and moderation workflows. All schema and business rules are enforced on update.","required":["body"]},"ICommunityPlatformSubscription.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"The UUID of the member whose subscriptions to filter. If null or omitted, returns the subscriptions for the authenticated member only. Used for admin or support scenarios."},"community_id":{"type":"string","format":"uuid","description":"Optional unique identifier to filter subscriptions to a specific community."},"status":{"type":"string","description":"Filter by the active/deleted status. Use 'active' for current subscriptions, 'deleted' for unsubscribed history. If omitted, returns all."},"created_at_min":{"type":"string","format":"date-time","description":"Return only subscriptions created on or after this timestamp. ISO 8601, for date range filtering."},"created_at_max":{"type":"string","format":"date-time","description":"Return only subscriptions created on or before this timestamp. ISO 8601."},"deleted_at_min":{"type":"string","format":"date-time","description":"Filter: only show subscriptions deleted (unsubscribed) at or after this time. Allows querying for recent unsubscribes."},"deleted_at_max":{"type":"string","format":"date-time","description":"Filter: only show subscriptions deleted at or before this time."},"search":{"type":"string","description":"Free-text search across community name or member display info. Used for filtering by partial matches or advanced search capabilities."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort key for ordering results. Choose from 'created_at', 'deleted_at', or 'community_name'."},{"const":"deleted_at","description":"Sort key for ordering results. Choose from 'created_at', 'deleted_at', or 'community_name'."},{"const":"community_name","description":"Sort key for ordering results. Choose from 'created_at', 'deleted_at', or 'community_name'."}],"description":"Sort key for ordering results. Choose from 'created_at', 'deleted_at', or 'community_name'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order: ascending ('asc') or descending ('desc')."},{"const":"desc","description":"Sort order: ascending ('asc') or descending ('desc')."}],"description":"Sort order: ascending ('asc') or descending ('desc')."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Defaults to 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records to return per page. Defaults to 20, max 100."}},"required":[],"description":"Filtering and pagination criteria for searching community subscriptions. Allows filtering by user, community, status, time range, and advanced sorting for listing or dashboard usage. Intended to support both simple and advanced queries on the subscriptions table."},"ICommunityPlatformSubscription":{"type":"object","x-autobe-prisma-schema":"community_platform_subscriptions","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this subscription record, assigned at creation."},"member_id":{"type":"string","format":"uuid","description":"UUID referencing the subscribed member (community_platform_members.id)."},"community_id":{"type":"string","format":"uuid","description":"UUID referencing the target community (community_platform_communities.id)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this subscription was established. ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user unsubscribed (soft deleted). Null when subscription is active. Used to distinguish between current and previous subscriptions."}},"required":["id","member_id","community_id","created_at"],"description":"Represents a single subscription of a member to a community. Contains foreign key references for member and community, timestamps for tracking when the subscription was started or ended (for unsubscribed history), and supports both active and deleted (unsubscribed) states for analytics and listing user subscriptions. Used in member dashboard and subscription management flows."},"ICommunityPlatformSubscription.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_subscriptions","properties":{"community_id":{"type":"string","format":"uuid","description":"The UUID of the community to subscribe to. Must reference an existing community. Required for creating a new community subscription."}},"required":["community_id"],"description":"DTO for creation of a new community subscription association. Used in POST /communityPlatform/member/subscriptions. Only requires the target community_id; all member information is derived from the current authenticated user context."},"ICommunityPlatformSubscription.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_subscriptions","properties":{"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Date/time (ISO 8601) marking when the user unsubscribed from the community. Set this to a timestamp string to deactivate the subscription (unsubscribe), or to null to reactivate a previously deleted subscription. Only field mutable on update; other fields are not intended for client update."},{"type":"null","description":"Set to null to reactivate a previously unsubscribed subscription."}],"description":"Indicates the logical deletion (unsubscription) time. If set to timestamp, subscription is ended; if null, the subscription is active."}},"required":[],"description":"DTO for updating a user's community subscription record. Used in PUT/PATCH /communityPlatform/member/subscriptions/{subscriptionId} or relevant admin flows. Only 'deleted_at' field is permitted for update, to support soft-delete/reactivation. No other fields can be set by clients."},"ICommunityPlatformSubscriptionLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Should be a positive integer.","minimum":1},"limit":{"type":"integer","description":"Maximum number of items per page for pagination. Set reasonable limits according to API default/max. (e.g., 10, 20, 50).","minimum":1},"event_type":{"type":"string","description":"Filter logs by event type (e.g., 'subscribe', 'unsubscribe', etc.)."},"start_date":{"type":"string","format":"date-time","description":"Start date for filtering logs by event timestamp (inclusive). ISO 8601 string."},"end_date":{"type":"string","format":"date-time","description":"End date for filtering logs by event timestamp (inclusive). ISO 8601 string."},"sort_by":{"oneOf":[{"const":"event_at","description":"Field to sort logs by. Acceptable values: 'event_at', 'event_type'."},{"const":"event_type","description":"Field to sort logs by. Acceptable values: 'event_at', 'event_type'."}],"description":"Field to sort logs by. Acceptable values: 'event_at', 'event_type'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for the results (ascending or descending)."},{"const":"desc","description":"Sort order for the results (ascending or descending)."}],"description":"Sort order for the results (ascending or descending)."},"metadata_query":{"type":"string","description":"Optional query to match metadata content (if searching within event metadata JSON/text blobs)."}},"required":[],"description":"Request body schema for searching/filtering subscription log events in community_platform_subscription_logs. Supports pagination (page, limit), filtering by event_type, date range (start_date, end_date), sorting, and advanced metadata queries.\n\nThis DTO can be used for PATCH requests to member/mod/admin subscription log listing endpoints."},"ICommunityPlatformSubscriptionLog":{"type":"object","x-autobe-prisma-schema":"community_platform_subscription_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier (UUID) for this subscription log entry."},"member_id":{"type":"string","format":"uuid","description":"Reference to the member (community_platform_members.id) performing the subscribe/unsubscribe event."},"community_id":{"type":"string","format":"uuid","description":"Reference to the community (community_platform_communities.id) associated with the subscription event."},"event_type":{"type":"string","description":"Describes event type: 'subscribe', 'unsubscribe', or future event types. Must be interpreted according to business logic, enum values possible: subscribe/unsubscribe."},"event_at":{"type":"string","format":"date-time","description":"Timestamp when the subscription log event occurred (ISO 8601 string, UTC with timezone)."},"metadata":{"type":"string","description":"Optional JSON-structured metadata for analytic/audit use. Stores additional event context. May be null."}},"required":["id","member_id","community_id","event_type","event_at"],"description":"Represents a single subscription log event in community_platform_subscription_logs. Each record logs a subscribe/unsubscribe (or other) event by a member to/of a community, with event type, actor, timing, and optional analytics metadata.\n\nThis DTO is used both for listing logs and for returning detail on a single log record."},"ICommunityPlatformPostVote.IRequest":{"type":"object","properties":{"community_platform_post_id":{"type":"string","format":"uuid","description":"The unique identifier of the target post for which to search, filter, or paginate vote records. Corresponds to community_platform_posts.id. This is used when scoping query results to a single post."},"community_platform_member_id":{"type":"string","format":"uuid","description":"The unique identifier of the member who cast the vote. Optional filter for showing only votes from a specific user. Corresponds to community_platform_members.id."},"vote_value":{"type":"integer","description":"Vote value filter: +1 for upvotes, -1 for downvotes. Optional input to restrict search to upvotes, downvotes, or both."},"status":{"type":"string","description":"Optional filter for vote status: e.g., 'active' (default), 'revoked', or system-defined archival statuses if present in the application logic."},"created_from":{"type":"string","format":"date-time","description":"Show votes created on or after this ISO8601 timestamp (inclusive). Optional filter. Used for date-range paging/analytics."},"created_to":{"type":"string","format":"date-time","description":"Show votes created on or before this ISO8601 timestamp (inclusive). Optional filter. Used for date-range paging/analytics."},"updated_from":{"type":"string","format":"date-time","description":"Show votes updated on or after this ISO8601 timestamp (inclusive). Optional filter for analytics or audit."},"updated_to":{"type":"string","format":"date-time","description":"Show votes updated on or before this ISO8601 timestamp (inclusive). Optional filter for analytics or audit."},"deleted":{"type":"boolean","description":"If true, also include soft deleted (revoked) votes in results. Default false. Optional."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field by which to sort the results. Allowed values: 'created_at', 'updated_at'. Optional."},{"const":"updated_at","description":"Field by which to sort the results. Allowed values: 'created_at', 'updated_at'. Optional."}],"description":"Field by which to sort the results. Allowed values: 'created_at', 'updated_at'. Optional."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order, ascending or descending. Allowed values: 'asc', 'desc'. Optional."},{"const":"desc","description":"Sort order, ascending or descending. Allowed values: 'asc', 'desc'. Optional."}],"description":"Sort order, ascending or descending. Allowed values: 'asc', 'desc'. Optional."},"page":{"type":"integer","minimum":1,"description":"Result page number, for pagination. Default: 1. Optional."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum records per page, for pagination. Default: 20. Optional. Enforced maximum is 100."}},"required":["community_platform_post_id"],"description":"Filtering and pagination criteria for searching platform post votes (community_platform_post_votes table). Permits advanced querying for upvotes/downvotes, member-based filtering, status auditing, and time-based analytics for moderation, admin, and reporting UI. All properties must correspond to allowed columns and indexes in the schema."},"ICommunityPlatformPostVote":{"type":"object","x-autobe-prisma-schema":"community_platform_post_votes","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for this post vote record. Corresponds to community_platform_post_votes.id."},"community_platform_post_id":{"type":"string","format":"uuid","description":"Foreign key referencing the post being voted on. Points to community_platform_posts.id. Used to associate this vote with a specific post."},"community_platform_member_id":{"type":"string","format":"uuid","description":"Foreign key referencing the member who cast the vote. Points to community_platform_members.id. Used to track which member performed this voting action."},"vote_value":{"oneOf":[{"const":-1,"description":"Vote value: +1 for upvote, -1 for downvote. Required. No other values permitted. Enforced via enum in application logic."},{"const":1,"description":"Vote value: +1 for upvote, -1 for downvote. Required. No other values permitted. Enforced via enum in application logic."}],"description":"Vote value: +1 for upvote, -1 for downvote. Required. No other values permitted. Enforced via enum in application logic."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote action was created. ISO8601 format. Required."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the latest update to the vote (e.g., if value changed, revoked, or other mutation). ISO8601 format. Required."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete field. If non-null, this vote is considered revoked/archived and should not count for tallies or participatory calculations. Null when active."}},"required":["id","community_platform_post_id","community_platform_member_id","vote_value","created_at","updated_at"],"description":"A single post vote record as stored in the community_platform_post_votes table. Captures who voted, on which post, what value, and when the action occurred. Enforces business logic of one vote per member per post, and distinguishes between upvotes (+1) and downvotes (-1). Soft deletes handled by deleted_at field."},"ICommunityPlatformPostVote.ICreate":{"type":"object","properties":{"vote_value":{"type":"integer","description":"Vote value for the post, indicating upvote (+1) or downvote (-1).\n\nAcceptable values are only 1 (for upvote) or -1 (for downvote). Must match precise values, no deviation allowed.\n\nUsed by authenticated members to create new vote records for a specified post. Vote ownership, rate limits, and policy are enforced at the application layer. Votes from post authors themselves are not permitted."}},"required":["vote_value"],"description":"DTO for casting a new vote (upvote or downvote) on a post, matching the community_platform_post_votes schema.\n\nOnly includes vote value; post association is set by the endpoint context. Used by members to submit upvotes/downvotes, enforcing policy for vote uniqueness and content ownership."},"ICommunityPlatformPostVote.IUpdate":{"type":"object","properties":{"vote_value":{"type":"integer","description":"Updated vote value for the post. Should be +1 to indicate an upvote, -1 for a downvote, or 0 if revoking a previous vote.\n\nOnly the values 1, -1, or 0 are permitted. This value is strictly required when updating a vote."}},"required":["vote_value"],"description":"DTO for updating or revoking an existing post vote, referencing the community_platform_post_votes schema.\n\nTypically used when a member wants to change their previous vote for a post, or remove (revoke) their vote entirely. Member identity and post context are managed by endpoint context and authentication."},"ICommunityPlatformCommentVote.IRequest":{"type":"object","properties":{"postId":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the post containing the target comment. Used for scoping the comment voting operation to a specific post context and for validation of comment-post relationship."},"commentId":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the comment being voted on. This is mandatory and is the target for the upvote or downvote action. Must correspond to an active, not-deleted comment that belongs to the specified post."},"vote_value":{"oneOf":[{"const":1,"description":"Indicates the vote value. Must be either 1 (upvote) or -1 (downvote). Zero (0) is reserved for revoking or nullifying a previous vote, and is not used when creating a new vote. The value is validated and is required for creating or changing a vote status on a comment."},{"const":-1,"description":"Indicates the vote value. Must be either 1 (upvote) or -1 (downvote). Zero (0) is reserved for revoking or nullifying a previous vote, and is not used when creating a new vote. The value is validated and is required for creating or changing a vote status on a comment."}],"description":"Indicates the vote value. Must be either 1 (upvote) or -1 (downvote). Zero (0) is reserved for revoking or nullifying a previous vote, and is not used when creating a new vote. The value is validated and is required for creating or changing a vote status on a comment."}},"required":["postId","commentId","vote_value"],"description":"Request body for searching, filtering, and paginating votes associated with a comment. Includes reference to the post and comment, and specifies the intended vote action (upvote or downvote). Used by member actors to register or update their vote on a comment."},"ICommunityPlatformCommentVote":{"type":"object","x-autobe-prisma-schema":"community_platform_comment_votes","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the comment vote record. Serves as the unique identifier for audit, retrieval, update, and deletion operations. Must be UUID formatted and is system-generated on creation."},"community_platform_comment_id":{"type":"string","format":"uuid","description":"The UUID of the comment being voted on. References the primary key of the associated comment in community_platform_comments. Links the vote record to the target comment for enforcement of single-vote-per-user-per-comment business rules."},"community_platform_member_id":{"type":"string","format":"uuid","description":"The UUID of the platform member (user) who cast this vote. References community_platform_members.id. Used for identifying vote ownership and enforcing that each user may only have one vote per comment."},"vote_value":{"oneOf":[{"const":1,"description":"Specifies the direction of the vote: +1 for upvote, -1 for downvote. This property must adhere to the allowed enum and cannot be values other than 1 or -1. Represents the core voting signal for scoring and controversy calculations. Zero is not stored in this schema, only +1 or -1."},{"const":-1,"description":"Specifies the direction of the vote: +1 for upvote, -1 for downvote. This property must adhere to the allowed enum and cannot be values other than 1 or -1. Represents the core voting signal for scoring and controversy calculations. Zero is not stored in this schema, only +1 or -1."}],"description":"Specifies the direction of the vote: +1 for upvote, -1 for downvote. This property must adhere to the allowed enum and cannot be values other than 1 or -1. Represents the core voting signal for scoring and controversy calculations. Zero is not stored in this schema, only +1 or -1."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this vote was originally submitted by the member. Used for chronological ordering and audit. Recorded automatically on creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the vote was last updated or changed (e.g., if changed from upvote to downvote). Allows audit tracking and history. Recorded automatically on update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp (nullable). When present, indicates the vote has been revoked/deleted and is no longer included in scoring or active calculations. A value of null means the vote is active. Nullability enforces system compliance with soft-delete retention and audit policies."}},"required":["id","community_platform_comment_id","community_platform_member_id","vote_value","created_at","updated_at"],"description":"Represents a single upvote or downvote event by a member on a specific comment. Each record is unique per member and comment combination, enforcing one vote per user per comment. Used for tracking, scoring, audit, and anti-abuse moderation for the Reddit-like threaded commenting system."},"ICommunityPlatformCommentVote.ICreate":{"type":"object","properties":{"vote_value":{"type":"integer","description":"The value of the vote. This must be either '1' (for upvote) or '-1' (for downvote).\n\nBusiness rules:\n- Allowed values: 1 (upvote), -1 (downvote)\n- Users may NOT vote on their own comments.\n- Members may update their existing vote on this comment, if one exists.\n- Vote must be performed by an authenticated member in good standing (not banned).\n- All votes are subject to rate limiting and may be subject to community-specific rules.\n- Attempts to vote beyond allowed limits or on non-existent comments will be rejected."},"comment_id":{"type":"string","format":"uuid","description":"The unique identifier of the comment being voted on.\n- Must be a valid UUID referencing an existing row in community_platform_comments.\n- The comment must not be deleted (deleted_at must be null).\n- The comment must be visible and accessible to the voting member per business rules.\n- Only one vote is permitted per member per comment, enforced at the business logic layer."}},"required":["vote_value","comment_id"],"description":"DTO for submitting a new vote (upvote or downvote) on a comment. The member is determined via authentication context and is not supplied in the body."},"ICommunityPlatformCommentVote.IUpdate":{"type":"object","properties":{"vote_value":{"type":"integer","description":"The new value of the vote to record for this member/comment pairing.\n\nAllowed values:\n- 1: Represents an upvote\n- -1: Represents a downvote\n- 0 (optional, not always supported): Represents a vote revocation\n\nBusiness rules:\n- If omitted, the operation may be interpreted as a vote removal (i.e., revocation).\n- Only the member who originally cast the vote can update their own vote.\n- Members may change their vote from upvote to downvote or vice versa, or remove the vote entirely.\n- Community and platform rate limits are enforced for updates.\n- Vote value MUST be in the allowed set; any other value is rejected.\n- Attempts to update votes for deleted/non-existent comments will be rejected."}},"required":["vote_value"],"description":"DTO for updating (changing) an existing vote record for a comment. Only the member who cast the vote may update it. Used to toggle upvote/downvote or revoke the vote."},"ICommunityPlatformControversialScore":{"type":"object","x-autobe-prisma-schema":"community_platform_controversial_scores","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the controversial score record. Corresponds to the primary key of the community_platform_controversial_scores table in Prisma. Used for precise reference and update tracking.\n\nThis value is globally unique within the system and must be a string formatted as a UUID."},"community_platform_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Primary key of the associated post (if this controversial score refers to a post). This is nullable; when not present, the controversial score may refer to a comment.\n\nShould be set to the relevant post ID from the community_platform_posts table, or null if this record is for a comment."},"community_platform_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Primary key of the associated comment (if applicable). This is a nullable field and is used only if the controversial score is for a comment rather than a post.\n\nRefer to community_platform_comments.id or leave null for post-related scores."},"controversial_score":{"type":"number","format":"double","description":"Precomputed controversial score for real-time sorting and ranking purposes. This is typically a floating-point number calculated by backend algorithms based on patterns of upvotes and downvotes, and other engagement metrics.\n\nBusiness logic determines the score's calculation. Higher or specific value ranges indicate greater controversy and engagement."},"score_updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this controversial score, in ISO 8601 date-time format. Indicates when the score was most recently recalculated. Useful for cache freshness and UI update triggers."}},"required":["id","controversial_score","score_updated_at"],"description":"Represents the cached controversial score for a single post or comment. Used to efficiently support 'controversial' sort orders in the Reddit-like community platform, and to identify highly-debated, high-engagement content.\n\nAligns with the community_platform_controversial_scores Prisma model. Contains references to either a post or comment, the calculated controversial score, and the timestamp when the score was last updated. Used for analytics, sorting, and moderation interfaces."},"ICommunityPlatformVoteLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Must be a positive integer. Indicates the current result page; used for paginated voting log queries.","minimum":1},"limit":{"type":"integer","description":"Number of records per page. Must be a positive integer (usually limited by backend policy). Controls page size for search results. Default platform value often used if unspecified.","minimum":1},"sort_by":{"oneOf":[{"const":"created_at","description":"Defines which property to sort voting logs by. Allowed values are 'created_at' (sort by time of log creation), 'vote_type' (separates post/comment votes), and 'vote_value' (up/down). Used for result ordering, typically in analytics and moderation interfaces."},{"const":"vote_type","description":"Defines which property to sort voting logs by. Allowed values are 'created_at' (sort by time of log creation), 'vote_type' (separates post/comment votes), and 'vote_value' (up/down). Used for result ordering, typically in analytics and moderation interfaces."},{"const":"vote_value","description":"Defines which property to sort voting logs by. Allowed values are 'created_at' (sort by time of log creation), 'vote_type' (separates post/comment votes), and 'vote_value' (up/down). Used for result ordering, typically in analytics and moderation interfaces."}],"description":"Defines which property to sort voting logs by. Allowed values are 'created_at' (sort by time of log creation), 'vote_type' (separates post/comment votes), and 'vote_value' (up/down). Used for result ordering, typically in analytics and moderation interfaces."},"order":{"oneOf":[{"const":"asc","description":"Direction of sorting: 'asc' for ascending, 'desc' for descending. Used in conjunction with 'sort_by' to control ordering of search result lists."},{"const":"desc","description":"Direction of sorting: 'asc' for ascending, 'desc' for descending. Used in conjunction with 'sort_by' to control ordering of search result lists."}],"description":"Direction of sorting: 'asc' for ascending, 'desc' for descending. Used in conjunction with 'sort_by' to control ordering of search result lists."},"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member whose voting logs are being queried. Allows filtering logs to a specific user. Refer to community_platform_members.id for actual lookup."},"content_type":{"oneOf":[{"const":"post","description":"Type of content associated with log search. Allows filtering logs by whether the vote was on a post or comment. Only allowed values are 'post' or 'comment'."},{"const":"comment","description":"Type of content associated with log search. Allows filtering logs by whether the vote was on a post or comment. Only allowed values are 'post' or 'comment'."}],"description":"Type of content associated with log search. Allows filtering logs by whether the vote was on a post or comment. Only allowed values are 'post' or 'comment'."},"content_id":{"type":"string","format":"uuid","description":"ID of the specific post or comment for which voting logs are being retrieved, depending on content_type. Allows focused investigation or audit of single content items."},"vote_value":{"oneOf":[{"const":1,"description":"Value of the vote operation. Allowed values: 1 for upvote, -1 for downvote, 0 for revoked/removed. Useful for filtering for positive, negative, or revoked vote events. Must match enum exactly."},{"const":-1,"description":"Value of the vote operation. Allowed values: 1 for upvote, -1 for downvote, 0 for revoked/removed. Useful for filtering for positive, negative, or revoked vote events. Must match enum exactly."},{"const":0,"description":"Value of the vote operation. Allowed values: 1 for upvote, -1 for downvote, 0 for revoked/removed. Useful for filtering for positive, negative, or revoked vote events. Must match enum exactly."}],"description":"Value of the vote operation. Allowed values: 1 for upvote, -1 for downvote, 0 for revoked/removed. Useful for filtering for positive, negative, or revoked vote events. Must match enum exactly."},"action_status":{"oneOf":[{"const":"success","description":"Search by action status category. Allowed values correspond to the result of the voting operation: 'success' (vote recorded), 'duplicate' (attempted duplicate), 'revoked' (vote removed), or 'error' (problem)."},{"const":"duplicate","description":"Search by action status category. Allowed values correspond to the result of the voting operation: 'success' (vote recorded), 'duplicate' (attempted duplicate), 'revoked' (vote removed), or 'error' (problem)."},{"const":"revoked","description":"Search by action status category. Allowed values correspond to the result of the voting operation: 'success' (vote recorded), 'duplicate' (attempted duplicate), 'revoked' (vote removed), or 'error' (problem)."},{"const":"error","description":"Search by action status category. Allowed values correspond to the result of the voting operation: 'success' (vote recorded), 'duplicate' (attempted duplicate), 'revoked' (vote removed), or 'error' (problem)."}],"description":"Search by action status category. Allowed values correspond to the result of the voting operation: 'success' (vote recorded), 'duplicate' (attempted duplicate), 'revoked' (vote removed), or 'error' (problem)."},"ip_fingerprint":{"type":"string","description":"Optional search filter by anonymized or hashed IP/device fingerprint for anti-abuse or forensics. Used by admins to correlate suspicious or automated activity."},"user_agent":{"type":"string","description":"Optional filter by user agent string as logged. Allows for device/browser-specific query filtering."},"created_after":{"type":"string","format":"date-time","description":"Include only voting logs created after this timestamp. ISO 8601 date-time format. Used for temporal drill down or incident investigation."},"created_before":{"type":"string","format":"date-time","description":"Include only voting logs created before this timestamp. ISO 8601 date-time format. Allows bounding search results within a specific incident or time window."}},"required":[],"description":"Criteria for advanced search, filtering, and pagination of the community_platform_vote_logs voting log table for moderation, audit, and forensics. This DTO supports admin/moderator dashboards and analytics tools for querying vote activity. All fields are optional - apply filters as needed.\n\nFields support restricting results by page, sort, member, type, affected content, value, action status, device info, and time window."},"ICommunityPlatformProfile.IRequest":{"type":"object","properties":{"profileId":{"type":"string","format":"uuid","description":"The unique identifier of the target profile to search/filter."},"username":{"type":"string","description":"A case-insensitive filter for the username (unique display handle). Supports partial text search via platform search index."},"bio":{"type":"string","description":"Full-text search on biography/about text of user profile (partial match, supports advanced queries per platform spec)."},"statusMessage":{"type":"string","description":"Short user status filter for matching on current status (e.g. 'on vacation')."},"isPublic":{"type":"boolean","description":"Filter by public visibility (true = public profile, false = restricted/private)."},"createdAfter":{"type":"string","format":"date-time","description":"Filter for profiles created after this timestamp (ISO 8601 UTC, inclusive)."},"createdBefore":{"type":"string","format":"date-time","description":"Filter for profiles created before this timestamp (ISO 8601 UTC, inclusive)."},"updatedAfter":{"type":"string","format":"date-time","description":"Filter for profiles updated after this timestamp (ISO 8601 UTC, inclusive)."},"updatedBefore":{"type":"string","format":"date-time","description":"Filter for profiles updated before this timestamp (ISO 8601 UTC, inclusive)."},"sortBy":{"oneOf":[{"const":"created_at","description":"Field by which to sort results. Allowed values: 'created_at', 'updated_at', 'username'."},{"const":"updated_at","description":"Field by which to sort results. Allowed values: 'created_at', 'updated_at', 'username'."},{"const":"username","description":"Field by which to sort results. Allowed values: 'created_at', 'updated_at', 'username'."}],"description":"Field by which to sort results. Allowed values: 'created_at', 'updated_at', 'username'."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort order direction. Allowed values are 'asc' or 'desc'."},{"const":"desc","description":"Sort order direction. Allowed values are 'asc' or 'desc'."}],"description":"Sort order direction. Allowed values are 'asc' or 'desc'."},"page":{"type":"integer","minimum":1,"description":"Result page number (1-based index). Default is 1 if omitted."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results per page. Maximum 100, defaults to 20 if omitted."}},"required":[],"description":"Request DTO for advanced profile search/listing. Supports exact, partial, and full-text filtering for platform user profiles. All fields are optional and may be combined for complex queries."},"ICommunityPlatformProfile":{"type":"object","x-autobe-prisma-schema":"community_platform_profiles","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for this profile entity, primary key."},"community_platform_member_id":{"type":"string","format":"uuid","description":"UUID of the member to whom this profile belongs. Links the profile to the account holder."},"username":{"type":"string","description":"The user's display handle. Publicly visible and unique per platform. Must be 3-32 characters, case-insensitive, and conform to platform username policy."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile biography, displayed on profile page. May be null or omitted for new users. Markdown supported. Length 0-1000 characters."},"avatar_uri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Public URI to a profile picture/avatar. May be null/omitted for users without a custom avatar."},"display_email":{"oneOf":[{"type":"string","format":"email"},{"type":"null"}],"description":"Optional public email displayed on the user's profile, if the user opts in. May be null for privacy."},"status_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user-curated status (such as 'On vacation'). Shown on profile if present. Max 100 characters."},"is_public":{"type":"boolean","description":"Determines whether the profile is publicly visible or restricted by privacy settings. True = public, false = private/restricted."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the profile was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the profile was last updated (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion flag. If set, the profile has been deleted/revoked but retained for audit purposes (ISO 8601 UTC or null if active)."}},"required":["id","community_platform_member_id","username","is_public","created_at","updated_at"],"description":"Full user profile record for the Reddit-like platform. Directly corresponds to the community_platform_profiles table. Includes all member-editable public fields and privacy status. Foreign keys to member account and references to profile assets are represented. All properties are thoroughly documented to support profile displays, privacy controls, and compliance/audit workflows."},"ICommunityPlatformProfile.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_profiles","properties":{"username":{"type":"string","description":"The unique username displayed for the user profile. Must be unique across the platform and is required to meet platform constraints for length and special characters. This property is referenced directly from the 'username' field in community_platform_profiles. Used for user display, mentions, and search indexing."},"bio":{"oneOf":[{"type":"string","description":"User's biography as shown in the profile page. Can be omitted or set to null for users who haven't set an introduction. Optional multi-paragraph free-text; supports up to the maximum allowed by the Prisma schema."},{"type":"null"}],"description":"User's bio section. Markdown allowed. Optional."},"avatar_uri":{"oneOf":[{"type":"string","description":"Public URL to the user's avatar image or profile picture. May be set to null or omitted if no image is configured. Must be a valid URI if present."},{"type":"null"}],"description":"URL for avatar/profile image. Optional."},"display_email":{"oneOf":[{"type":"string","description":"The email address displayed publicly on the user's profile, if the user has opted in. Optional; redacted for privacy unless the user explicitly permits. Must be a valid email if set."},{"type":"null"}],"description":"Public-facing email, optional and privacy-controlled."},"status_message":{"oneOf":[{"type":"string","description":"Short custom status, such as 'On vacation' or 'Working remotely', set in the user profile for display and activity context. Optional and may be set to null."},{"type":"null"}],"description":"A short status message for the user's profile."},"is_public":{"type":"boolean","description":"Flag indicating if the user's profile is publicly visible. Updates privacy status for the account. Members can toggle this for self-profile only."}},"required":[],"description":"Data Transfer Object (DTO) for updating a user's profile in the Reddit-like community platform. Includes all modifiable fields from community_platform_profiles Prisma model. All fields are optional and updatable independently. This schema is strictly limited to fields present in the underlying Prisma schema, especially as regards usernames, bio text, avatar images, and privacy control. This DTO should not include any authentication, ID, timestamps, or system fields such as created_at or deleted_at. Updates are allowed only for the authenticated user (self) or administrators/moderators with the requisite privileges. Nullable fields accept explicit null for clearing content; otherwise, do not send a property to leave it unchanged.\n\nFollows security principle: never update system-managed fields or change ownership. References the Prisma schema for property validation, format, and constraints."},"ICommunityPlatformProfileBadge.IRequest":{"type":"object","properties":{"profileId":{"type":"string","format":"uuid","description":"Filter: Only fetch badges for this profile UUID. Used to query badge list for specific user profile. It is a required parameter in API endpoints that are profile-specific, but optional for system-wide badge searches."},"badge_type":{"type":"string","description":"Filter badges by badge type (for example: 'gold', 'anniversary', 'community-contributor'). Allows searching for badges of a given category for analytics, filtering, or moderation purposes. Mapped to the 'badge_type' column in Prisma schema."},"badge_name":{"type":"string","description":"Filter badges by their display name, such as 'Reddit Gold', 'Top Commenter'. Supports text search in badge name. Useful for UI search and moderation dashboards."},"issued_at_from":{"type":"string","format":"date-time","description":"Inclusive filter: fetch only badges issued from this ISO 8601 date-time (UTC) onwards. Useful for analytics, recent badge awards, or auditing. Expects full RFC 3339 date-time string."},"issued_at_to":{"type":"string","format":"date-time","description":"Inclusive filter: fetch only badges issued up to this ISO 8601 date-time (UTC). Used for bounded range queries or for reviewing badges within a certain period."},"revoked":{"type":"boolean","description":"Filter badges by active (not revoked) or revoked status. Useful for systems that display current vs. past badges."},"sort_by":{"type":"string","description":"Field name to sort by (for example: 'issued_at', 'badge_type'). Used for ordering query results, supports sorting by issuance time or badge category."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction for query results. Only valid values are 'asc' (ascending) or 'desc' (descending)."},{"const":"desc","description":"Sort order direction for query results. Only valid values are 'asc' (ascending) or 'desc' (descending)."}],"description":"Sort order direction for query results. Only valid values are 'asc' (ascending) or 'desc' (descending)."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated badge search results. Starts at 1. Required for pagination-enabled queries."},"limit":{"type":"integer","minimum":1,"description":"Maximum number of badge records to return per page. Used for server-side pagination."}},"required":[],"description":"Request DTO for querying a paginated and filterable list of badges assigned to a user profile in the community_platform_profile_badges schema. Supports filters on recipient profile ID, type and name of badge, issuance date range, revoked/active status, sorting, and pagination. This DTO is used in endpoints that enable searching or listing badge records for analytics, profile UI, or moderation review – with all properties tracking their corresponding columns in the Prisma schema. All properties are optional to allow broad or fine-tuned filters. All queries using this DTO should support flexible filtering – for example, a moderator may want to see all 'gold' badges awarded in the last month, or a member could query their own visible badge list.\n\nPagination and sorting properties ('page', 'limit', 'sort_by', 'order') are provided to support efficient server/client-side navigation of potentially large result sets. Date filtering is performed using ISO 8601 strings, and UUIDs guarantee referential integrity for profile lookups."},"ICommunityPlatformProfileBadge":{"type":"object","x-autobe-prisma-schema":"community_platform_profile_badges","description":"Profile badge entity representing a reward, achievement, or status assigned to a user profile. This type is tightly linked to the platform's badge and achievement system, as defined in the community_platform_profile_badges Prisma model. Each badge can be related to a karma award, has detailed issuance metadata, and can optionally be revoked. This schema is essential for profile displays, recognition features, compliance, and audit workflows. Directly reflects all fields of the Prisma model--NEVER add or omit properties. All fields and their business context are described below.\n\n- Each badge belongs to a profile (community_platform_profile_id) and can optionally relate to a community_platform_karma_award.\n- Badges are categorized by badge_type and badge_name, have full audit timestamps, and record both assignment and possible revocation (with reasons).\n- This entity is created/managed through badge award, moderation, and self-service profile flows, always matching the Prisma schema.\n\nCAUTION: Do NOT expose hidden or soft-deleted entries to unauthorized roles. NEVER include or exclude any property not present in the schema.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the badge assignment. Primary key in the badge table. Always present and auto-generated."},"community_platform_profile_id":{"type":"string","format":"uuid","description":"Foreign key referencing the profile this badge is assigned to. Required. Always references a profile id."},"community_platform_karma_award_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) Reference to the karma award definition, if badge is granted as a result of karma achievement. Nullable. Links to community_platform_karma_awards.id or is null for non-karma badges."},"badge_type":{"type":"string","description":"Type or category of badge, such as 'gold', 'anniversary', or custom category. Categorizes badge for display and analytics. Required, string."},"badge_name":{"type":"string","description":"Human-readable display name of the badge assigned. Required. Used for badge display in user profile and achievement summaries."},"issued_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this badge was assigned to the profile. Required. Set automatically at badge grant time."},"issuer":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Username/admin name/system or automation that issued the badge. Useful for audit and transparency. Nullable in schema."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Timestamp indicating when the badge was revoked. Null if the badge is currently active. If set, badge should be considered revoked/inactive but retained for audit."},"revoke_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Short reason for badge revocation. Set by admin/moderator or system, if applicable. Nullable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when badge record was created in the system. For audit/history, required."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update of this badge record (could be status change, revocation, etc). Required."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion/recovery timestamp. If set, the badge is logically deleted or hidden except for compliance or audit review. Null if active."}},"required":["id","community_platform_profile_id","badge_type","badge_name","issued_at","created_at","updated_at"],"$comment":"Never add properties not in the schema. All descriptions reference the Prisma model."},"ICommunityPlatformProfileBadge.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_profile_badges","description":"Request body schema for creating a new profile badge assignment. Used in badge reward workflows, admin badge assignment, or system-driven achievement grants. ONLY includes those properties that can be set at creation time and match columns from community_platform_profile_badges with non-generated, non-audit, or required input fields. NEVER include id, created_at, or updated_at - these are set by the system.\n\nBusiness rules:\n- Profile id is required. A reference to the profile that will receive the badge.\n- Karma award id is optional (nullable), set if badge is awarded due to a karma achievement. For non-karma badges, leave this as null or omit.\n- badge_type and badge_name are mandatory.\n- issued_at is usually set to current timestamp, but can be specified for backdating/admin workflows.\n- issuer is optional for automation, required for admin/manual assignment.\n- Optional fields (revoked_at, revoke_reason, deleted_at) should be omitted or set null at creation.\n- All input must conform strictly to the types and business context described.\n\nAll property definitions are by reference to the Prisma schema.","properties":{"community_platform_profile_id":{"type":"string","format":"uuid","description":"Profile id (required) - recipient of the badge. Must reference a valid profile from the system."},"community_platform_karma_award_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) Foreign key to karma award if badge is tied to a specific karma achievement. Can be null."},"badge_type":{"type":"string","description":"Badge category/type (e.g. 'gold', 'legendary', admin custom value). Required."},"badge_name":{"type":"string","description":"Human-readable name of the badge for profile display (e.g. 'Founder', 'Champion'). Required field."},"issued_at":{"type":"string","format":"date-time","description":"Timestamp of issuance (optional). Can be assigned for explicit backdated/admin badge issuance, but will default to current time if omitted."},"issuer":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Identity (username/admin/system) of the badge issuer. For audit and display. Nullable."}},"required":["community_platform_profile_id","badge_type","badge_name"],"$comment":"Do not include id, created_at, updated_at, revoked_at, revoke_reason, or deleted_at at creation - these are handled by the backend or are post-creation events."},"ICommunityPlatformProfileBadge.IUpdate":{"type":"object","description":"Update data structure for a badge record associated with a member profile. Used for revocation, annotation, or display updates by owners, moderators, or admins. All properties must match those specified in the Prisma model community_platform_profile_badges. Updating includes modifying badge_name, badge_type, revocation info, or issuer details. Do not include properties not found on the actual Prisma model.","x-autobe-prisma-schema":"community_platform_profile_badges","properties":{"badge_type":{"type":"string","description":"Type/category of badge (e.g., 'gold', 'anniversary', 'community-contributor'). Must match platform/business badge taxonomy."},"badge_name":{"type":"string","description":"Display name of badge as awarded."},"issued_at":{"type":"string","format":"date-time","description":"RFC3339 timestamp for when badge was issued."},"issuer":{"oneOf":[{"type":"string","description":"Optional identifier or description of badge issuer (username, admin name, or system)."},{"type":"null"}],"description":"Optional identifier or description of badge issuer (username, admin name, or system)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When badge was revoked (if applicable; else null)."},"revoke_reason":{"oneOf":[{"type":"string","description":"If revoked, brief reason for revocation."},{"type":"null"}],"description":"If revoked, brief reason for revocation."}},"required":[]},"ICommunityPlatformProfileHistory.IRequest":{"type":"object","description":"Paginated search and filter input for retrieving user profile edit/update history from community_platform_profile_histories. Enables slicing by edit/change time, changed_by_actor, fields changed, audit status, etc. Used for account transparency, profile rollback, or admin audit trails.\n\nInclude only properties defined on the model. Add pagination, filtering, and ordering controls as relevant.","properties":{"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination; 1-based."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Number of history records per page."},"changed_by_actor":{"oneOf":[{"type":"string","description":"Filter by user/admin/system actor responsible for profile change."},{"type":"null"}],"description":"Filter by user/admin/system actor responsible for profile change."},"date_range_start":{"oneOf":[{"type":"string","format":"date-time","description":"RFC3339 timestamp, start of change window."},{"type":"null"}],"description":"RFC3339 timestamp, start of change window."},"date_range_end":{"oneOf":[{"type":"string","format":"date-time","description":"RFC3339 timestamp, end of change window."},{"type":"null"}],"description":"RFC3339 timestamp, end of change window."},"field_changed":{"oneOf":[{"type":"string","description":"Filter history records to only those where this field was changed (e.g. 'username', 'bio', 'avatar_uri')."},{"type":"null"}],"description":"Filter history records to only those where this field was changed (e.g. 'username', 'bio', 'avatar_uri')."},"sort":{"oneOf":[{"const":"changed_at","description":"Sort order for results."},{"const":"username","description":"Sort order for results."},{"const":"bio","description":"Sort order for results."},{"const":"avatar_uri","description":"Sort order for results."}],"description":"Sort order for results."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: ascending or descending."},{"const":"desc","description":"Sort direction: ascending or descending."}],"description":"Sort direction: ascending or descending."}},"required":[]},"ICommunityPlatformProfilePreferences":{"type":"object","description":"User profile preference settings for the Reddit-like community platform. Represents a user's personal profile configuration, including appearance options, privacy, notification, and messaging preferences. This object models all profile preference fields found on the member profile preference screen, respecting privacy and business logic for notification/appearance/email/badge visibility per platform requirements. Follows the Prisma model 'community_platform_profile_preferences' and includes 1-to-1 linkage with the owning profile. Used for both profile display and self-service API calls for updating preferences.\n\nPrimary use cases include:\n- Displaying saved user settings on profile UI\n- Applying user-selected options for notifications, theme, and language\n- Enabling or disabling badge/email display, non-follower messaging, and notification customizations\n- Compliance with user opt-outs/opt-ins and accessibility/appearance preferences\n\nNot all fields are required; only 'id' and 'community_platform_profile_id' (links to profile) are always present. Settings may default as per platform constants in case of null. All timestamps are in ISO8601 (UTC).\n\nField mapping, types, and semantics follow directly from Prisma schema for strong interface compliance.","x-autobe-prisma-schema":"community_platform_profile_preferences","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this profile preference entry. Always a valid UUID, auto-assigned by the database system. Used as the main reference and for linking preference records to user profiles."},"community_platform_profile_id":{"type":"string","format":"uuid","description":"Reference to the user profile this preference set belongs to (see community_platform_profiles.id). Determines the owner/member for these settings. 1:1 relationship."},"language":{"oneOf":[{"type":"string","description":"User's preferred language for platform or profile UI. ISO 639-1 code (e.g., 'en', 'ko'). May be null if not set."},{"type":"null"}],"description":"User's language preference (ISO 639-1), as used for displaying the platform and notifications. If null or empty, defaults to platform language settings or browser locale."},"theme":{"oneOf":[{"type":"string","description":"Preferred visual theme ('light', 'dark', or other theme key). May be null if user has not chosen a theme."},{"type":"null"}],"description":"Preferred UI appearance theme. Expected values include 'light', 'dark', or other documented theme keys. If null, defaults to application standard."},"show_email":{"type":"boolean","description":"Boolean flag for whether to show display_email (from profile) on public profile page. User-settable privacy option. If false, the display_email is private; if true, public."},"show_badges":{"type":"boolean","description":"Boolean flag—if true, earned profile badges are visible to the public; if false, only visible to the member/admin. User-controlled."},"allow_messages_from_nonfollowers":{"type":"boolean","description":"If true, the user permits incoming private messages from anyone, not just followed/subscribed users. Used in platform messaging flows to respect privacy/spam prevention."},"notification_settings":{"oneOf":[{"type":"string","description":"Serialized string (often JSON or another format) encoding the user's notification preferences—alert types, frequency, etc. null if no preferences set."},{"type":"null"}],"description":"Serialized preferences for notifications. Structure and contents defined per platform, usually stores a JSON document. Null or omitted means platform default notifications apply."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for creation of this preference record, in ISO8601 UTC.\n\nExample: '2025-01-01T12:00:00Z'"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last modification of the preference record, in ISO8601 UTC. Always updated on any edit."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft deletion of preferences, or null if still active. ISO8601 UTC, set when the user or admin deletes preferences."},{"type":"null"}],"description":"Soft deletion timestamp for this preference record (null if active). Used for GDPR/eu privacy compliance."}},"required":["id","community_platform_profile_id","show_email","show_badges","allow_messages_from_nonfollowers","created_at","updated_at"],"$comment":"Generated for ICommunityPlatformProfilePreferences DTO based on actual Prisma schema. All properties correspond to database-backed fields, documented for API/platform implementers."},"ICommunityPlatformProfilePreference.IUpdate":{"type":"object","description":"DTO for updating the user's profile preferences/settings. Used as request body for PUT/PATCH operations on the profile preference resource, targeted by the owning profile's ID. Client may specify any subset of fields for update; all are optional. Setting a value to null will reset that field to platform default.\n\nThis DTO closely maps to 'community_platform_profile_preferences' Prisma model, but used for partial updates of existing settings, supporting all business rules regarding accessibility, privacy, notification, and interface customization. Validation logic applies for allowed values (languages, themes, etc).","x-autobe-prisma-schema":"community_platform_profile_preferences","properties":{"language":{"oneOf":[{"type":"string","description":"New preferred language for UI/notifications (e.g., 'en', 'ko'). Pass null to reset to platform default."},{"type":"null"}],"description":"New value for user's language selection. Must be valid ISO 639-1 code. Null resets to global default."},"theme":{"oneOf":[{"type":"string","description":"Theme value ('light', 'dark', or platform-specific theme key). Null disables personal theme."},{"type":"null"}],"description":"New preferred UI theme. Must be an allowed theme value or null to reset."},"show_email":{"type":"boolean","description":"Whether to show email address publicly on the profile. Set true/false per the user's privacy choice."},"show_badges":{"type":"boolean","description":"Whether earned badges are shown to public viewers outside of member/admin profile views."},"allow_messages_from_nonfollowers":{"type":"boolean","description":"Allow or block incoming DMs from users the member is not following/subscribed to."},"notification_settings":{"oneOf":[{"type":"string","description":"Serialized user notification preferences (stringified JSON or other platform format). Null resets to system default."},{"type":"null"}],"description":"Serialized notification preferences. Use null to clear or reset all notification customizations."}},"required":[],"$comment":"Generated for request DTO for updating profile preferences. All fields are optional; only those supplied are updated in DB."},"ICommunityPlatformProfilePreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for this profile preference record.\n@db.Uuid"},"community_platform_profile_id":{"type":"string","format":"uuid","description":"Reference to associated user profile (community_platform_profiles.id). Indicates the profile to which these preferences belong."},"language":{"oneOf":[{"type":"string","description":"User’s preferred language setting for the platform or profile display. String, nullable."},{"type":"null"}],"description":"User’s preferred language setting for the platform or profile display. String, nullable."},"theme":{"oneOf":[{"type":"string","description":"Preferred visual theme (e.g., 'light', 'dark'). String, nullable."},{"type":"null"}],"description":"Preferred visual theme (e.g., 'light', 'dark'). String, nullable."},"show_email":{"type":"boolean","description":"Whether to show display email (see profile) on public profile page. Boolean."},"show_badges":{"type":"boolean","description":"Whether to show earned badges to the public. Boolean."},"allow_messages_from_nonfollowers":{"type":"boolean","description":"Whether the user permits incoming messages from people they don’t follow/subscriptions. Boolean."},"notification_settings":{"oneOf":[{"type":"string","description":"Serialized (JSON or similar) notification settings—a flexible preferences blob for alerts, messaging, and platform info. String, nullable."},{"type":"null"}],"description":"Serialized (JSON or similar) notification settings—a flexible preferences blob for alerts, messaging, and platform info. String, nullable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for preference record creation. DateTime (ISO 8601, RFC 3339)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last preference modification. DateTime (ISO 8601, RFC 3339)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion or recovery of preferences. DateTime (ISO 8601, RFC 3339). Nullable."}},"required":["id","community_platform_profile_id","show_email","show_badges","allow_messages_from_nonfollowers","created_at","updated_at"],"description":"Stores user-configurable preferences related to their profile, appearance, privacy settings, notification controls, and messaging policies. Each record is uniquely associated with a user profile (community_platform_profiles), and contains language and theme preferences, opt-ins for email/badge visibility, notification settings, and message reception controls. Used for customizing user profile experiences and respecting privacy and accessibility choices on the Reddit-like community platform. Soft deletion via deleted_at is supported for privacy/erasure policies.\n\nBased on the Prisma schema: community_platform_profile_preferences.\n\n@namespace Profiles\n@author AutoBE - https://github.com/wrtnlabs/autobe","x-autobe-prisma-schema":"community_platform_profile_preferences"},"ICommunityPlatformReport.IRequest":{"type":"object","properties":{"status":{"type":"string","description":"Status of reports to filter by. E.g., 'pending','resolved','escalated'. Optional."},"category":{"type":"string","description":"Report category (join to report_categories table if needed). Filter for reports of a specific category. Optional."},"reporting_member_id":{"type":"string","format":"uuid","description":"ID of member submitting the report. To filter by reporter. Optional."},"target_type":{"oneOf":[{"const":"post","description":"Type of content being reported. Enum: 'post', 'comment'. Optional."},{"const":"comment","description":"Type of content being reported. Enum: 'post', 'comment'. Optional."}],"description":"Type of content being reported. Enum: 'post', 'comment'. Optional."},"post_id":{"type":"string","format":"uuid","description":"Reported post ID if applicable. Optional."},"comment_id":{"type":"string","format":"uuid","description":"Reported comment ID, if applicable. Optional."},"moderated_by_id":{"type":"string","format":"uuid","description":"ID of moderator/admin handling the report. Optional."},"created_at_from":{"type":"string","format":"date-time","description":"ISO date-time filter for earliest report submission date. Optional."},"created_at_to":{"type":"string","format":"date-time","description":"ISO date-time filter for most recent report submission date. Optional."},"search":{"type":"string","description":"Free-text search, applies to reason or details fields. Optional."},"sort":{"oneOf":[{"const":"created_at","description":"Sort order: e.g., by 'created_at', 'status', or 'category'. Optional."},{"const":"status","description":"Sort order: e.g., by 'created_at', 'status', or 'category'. Optional."},{"const":"category","description":"Sort order: e.g., by 'created_at', 'status', or 'category'. Optional."}],"description":"Sort order: e.g., by 'created_at', 'status', or 'category'. Optional."},"order":{"oneOf":[{"const":"asc","description":"Sort direction. Enum: 'asc', 'desc'. Optional."},{"const":"desc","description":"Sort direction. Enum: 'asc', 'desc'. Optional."}],"description":"Sort direction. Enum: 'asc', 'desc'. Optional."},"page":{"type":"integer","description":"Page number for pagination. Optional."},"limit":{"type":"integer","description":"Page size/limit for pagination. Optional."}},"required":[],"description":"Parameters for filtering, searching, sorting, and paginating report entities (community_platform_reports table) when searching for content reports (e.g., for moderation review screens in the Reddit-like community platform). Includes options for filtering by status, category, content/post/comment, reporter, handler, creation dates, free text, sorting, and paging. All properties are optional to allow flexible advanced search combinations."},"ICommunityPlatformReport":{"type":"object","x-autobe-prisma-schema":"community_platform_reports","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this report, as primary key. Maps directly to `community_platform_reports.id`."},"reporting_member_id":{"type":"string","format":"uuid","description":"The UUID of the member who filed this report. Required and set via authentication context NOT user input. Prisma: `reporting_member_id`."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The post ID being reported, if the report targets a post. Nullable. Prisma: `post_id`."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The comment ID being reported, if the report targets a comment. Nullable. Prisma: `comment_id`."},"report_category_id":{"type":"string","format":"uuid","description":"Category for this report, referencing the predefined report category table (e.g., spam, abuse, harassment, NSFW, etc). Required. Prisma: `report_category_id`."},"reason_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free form explanation given by reporter; required if category allows or mandates it. Prisma: `reason_text`."},"status":{"type":"string","description":"Workflow status for this report. Valid values: pending, under_review, resolved, escalated, dismissed. Prisma: `status`."},"moderation_result":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Result of moderation review or action taken, such as 'removed', 'no_action', 'banned', etc. Nullable until reviewed. Prisma: `moderation_result`."},"moderated_by_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The moderator/admin (UUID) who handled this report. Nullable until resolved. Prisma: `moderated_by_id`."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the report was submitted. Prisma: `created_at`."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for when the report was last updated (status or result changes). Prisma: `updated_at`."}},"required":["id","reporting_member_id","report_category_id","status","created_at","updated_at"],"description":"Represents a single content report submitted by a member, as stored in `community_platform_reports` table. Includes content references (post_id, comment_id), reporting actor, report category, reason/explanation, workflow status, moderation result, moderator, and audit timestamps. Used in moderation review, compliance, and abuse tracking."},"ICommunityPlatformReport.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_reports","properties":{"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The post ID being reported, if the report is about a post. Only one of post_id or comment_id should be provided."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The comment ID being reported, if the report is about a comment. Only one of post_id or comment_id should be provided."},"report_category_id":{"type":"string","format":"uuid","description":"Category/reason ID why content is being reported. Must reference a valid entry from report categories table."},"reason_text":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-form explanation for the report. Required only if category allows/mandates extra input."}},"required":["report_category_id"],"description":"Payload for a member to file a content report. The user must supply a report_category_id. Exactly one of post_id or comment_id should be provided; reason_text is included if category allows/mandates it. Reporting member is inferred from authentication context, not from body input."},"ICommunityPlatformReport.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Workflow status of the content report (e.g., pending, under_review, resolved, escalated, dismissed).\n\nThis field updates the stage of the moderation process as the report is triaged, escalated, resolved, or closed by staff moderation. Must reflect only valid, meaningful workflow states defined by business policy."},"moderation_result":{"type":"string","description":"Result action taken by moderator/admin upon resolving this report: e.g., removed, warning, no_action, banned, escalated, dismissed, or other recognized moderation outcome.\n\nThis field documents the outcome/status that is the direct result of handling the user report, aligned with moderation and compliance flows."},"moderated_by_id":{"type":"string","format":"uuid","description":"UUID of the moderator/admin who handled and resolved the report. This references the 'community_platform_admins' or 'community_platform_moderators' as the actor who took final action on the report. Used for auditability, compliance review, transparency, and user notification.\n\nMust be a valid UUID referencing the resolving actor."}},"required":["status","moderation_result","moderated_by_id"],"description":"Update payload for moderating and resolving content reports. Applies to the moderation workflow; changes the status and resolution as managed by admins/moderators. Matches business rules for audit trail, status lifecycle, and staff intervention. Does not allow requester, post, or comment references to be altered by mutation."},"ICommunityPlatformModerationQueue.IRequest":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"Filter queues to a specific community using its UUID. Enables moderators/admins to search and manage only moderation workload for the designated community. References the primary key from the 'community_platform_communities' table."},"assigned_moderator_id":{"type":"string","format":"uuid","description":"Filter/moderation queues to those currently assigned to a specific moderator actor (by UUID). Supports personalized queue listing for assigned moderators, workload review, and staffing dashboards. Value is moderator UUID from 'community_platform_moderators'."},"status":{"type":"string","description":"Queue status filter. Possible values: pending, in_progress, resolved, escalated, or any additional platform-defined states for moderation workflow. Used to retrieve only queues in a particular state or to filter dashboard workload."},"priority":{"type":"string","description":"Workflow priority filter, e.g., low, normal, high, urgent. Enables staff to query or triage only those queues requiring specific urgency escalation or order. Matches 'priority' field in 'community_platform_moderation_queues'."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Default is 1 (first page). Used with limit and sort for result set navigation."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Result page size for pagination (default/maximum determined by API policy; typical maximum 100). Defines number of queue records returned per page."},"sort":{"type":"string","description":"Sort field for moderation queue records (e.g., created_at, priority, status). Used to order queue search results per admin/moderator UI workflows."},"order":{"oneOf":[{"const":"asc","description":"Sort order for result set sorting. Only 'asc' (ascending) or 'desc' (descending) permitted. Used in conjunction with sort key."},{"const":"desc","description":"Sort order for result set sorting. Only 'asc' (ascending) or 'desc' (descending) permitted. Used in conjunction with sort key."}],"description":"Sort order for result set sorting. Only 'asc' (ascending) or 'desc' (descending) permitted. Used in conjunction with sort key."}},"required":[],"description":"Request DTO for searching, filtering, and paginating moderation queue entries. Used by staff to retrieve subsets of moderation workload, filter by assignee, community, priority, status, and paginate efficiently. Should only reference fields present in 'community_platform_moderation_queues' and match them directly. All properties are optional except for query operational constraints (pagination, sort)."},"ICommunityPlatformModerationQueue":{"type":"object","x-autobe-prisma-schema":"community_platform_moderation_queues","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the moderation queue entry. Corresponds to the primary key in the community_platform_moderation_queues table. Used to reference this queue item in update, detail, or audit APIs."},"community_id":{"type":"string","format":"uuid","description":"UUID of the community this moderation queue relates to. Foreign key to community_platform_communities.id. Used to scope moderation workflow to a specific community."},"report_id":{"type":"string","format":"uuid","description":"UUID of the report this moderation queue entry is assigned for. Foreign key to community_platform_reports.id, recording the content report at the root of this queue case."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID for the moderator assigned to handle this queue item, if assigned. Foreign key to community_platform_moderators.id. Null if unassigned or triaged to a group."},"status":{"type":"string","description":"Workflow status of the moderation queue record. Controlled vocabulary, typical values: 'pending', 'in_progress', 'resolved', 'escalated'. Drives sorting, prioritization, and UI presentation."},"priority":{"type":"string","description":"Priority marker for triage and sorting. Example values: 'low', 'normal', 'high', 'urgent'. Used to surface critical cases or incidents."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this moderation queue entry was created (ISO 8601). Records the instant it entered queue workflow for tracking and SLA management."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this moderation queue entry was last updated (ISO 8601). Used for calculating time in queue, activity audits, and detecting workflow staleness."}},"required":["id","community_id","report_id","status","priority","created_at","updated_at"],"description":"A moderation queue entry representing an open or ongoing moderation workflow for a specific community report.\n\nEach instance is tied to a single community and content report (typically a post or comment flagged for review), and may be assigned to a specific moderator for handling. Status and priority fields drive automated or manual triage and presentation in moderation dashboards. This object supports compliance, workload distribution, and transparency/audit requirements for scalable safety processes. See community_platform_moderation_queues table documentation for implementation details."},"ICommunityPlatformModerationQueue.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_moderation_queues","properties":{"community_id":{"type":"string","format":"uuid","description":"UUID of the community to enqueue moderation for. Must reference a valid row in community_platform_communities."},"report_id":{"type":"string","format":"uuid","description":"UUID of the report to assign to moderation queue. Must reference a valid row in community_platform_reports."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID for assigning an individual moderator at time of queue entry creation (nullable). Must reference a row in community_platform_moderators, or null for system-assigned/unassigned items."},"status":{"type":"string","description":"Initial status of the moderation queue entry. Recommended values: 'pending', 'in_progress', 'escalated'. Used to control workflow and queue assignment logic."},"priority":{"type":"string","description":"Triaging priority for the moderation case, such as 'normal', 'high', or 'urgent'. Enables rapid routing of critical reports or compliance deadlines."}},"required":["community_id","report_id","status","priority"],"description":"Request body schema for creating a new entry in the moderation queue (community_platform_moderation_queues).\n\nSupplied by a moderator or admin when submitting a new content report for manual review, or by the platform in auto-triage scenarios. Must reference both a valid community and content report. Fields allow establishing assignment, initial status, and priority for scalable queueing and moderation case management."},"ICommunityPlatformModerationQueue.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_moderation_queues","properties":{"status":{"type":"string","description":"Workflow status of the moderation queue entry (e.g., 'pending', 'in_progress', 'resolved', 'escalated').\n\nChanging this value moves the queue through moderation workflow steps. Must match accepted business states. Typically, only allows transitions as governed by business rules and moderator/admin role permissions."},"assigned_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator assigned to review this moderation queue entry.\n\nIf absent, queue remains unassigned. Used for explicit moderation hand-offs and assignment during review triage. Must match a valid community_platform_moderators id for the relevant community."},"priority":{"type":"string","description":"Workflow priority level for the entry (e.g., 'low', 'normal', 'high', 'urgent').\n\nAllows moderation queues to be ordered and processed by importance, with emergency or highly urgent items being surfaced immediately. Should only accept allowed enum values per platform guidelines."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the entry.\n\nSet automatically on every change or edit; not generally written by the client, but included for completeness."}},"required":[],"description":"Update DTO for moderation queue entries representing work items for moderation workflows.\n\nFields may include updating the queue status (workflow step), assigning a moderator, and changing triage priority. Typically, the update also triggers an updated_at timestamp. Platform security restricts which roles may assign, edit, or resolve moderation queue records and which status transitions are allowed. All changes are logged for compliance. Only a subset of fields may be permitted for certain role levels (e.g., only admins can close or re-assign certain entries)."},"ICommunityPlatformBanHistory":{"type":"object","x-autobe-prisma-schema":"community_platform_ban_histories","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for this ban history entry.\n\nSystem-assigned; unique per ban event."},"banned_member_id":{"type":"string","format":"uuid","description":"UUID of the member who was banned, referencing community_platform_members.id.\n\nEvery ban has exactly one target member."},"issued_by_id":{"type":"string","format":"uuid","description":"UUID of the admin or moderator issuing the ban. Points to either community_platform_admins.id or community_platform_moderators.id as appropriate.\n\nDetermines authority and audit origin."},"community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the community where this ban is enforced, or null for a global/platform-wide ban.\n\nIf set, scope is limited to this community. Otherwise, ban applies system-wide."},"triggering_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the ban was originated by a user report, this is the UUID of that community_platform_reports entry; null for manual or admin-only bans.\n\nUsed for traceability and escalation context."},"reason":{"type":"string","description":"Human-friendly reason for the ban as entered by the moderator or admin. Free text, max 10,000 chars.\n\nSubject to audit and user transparency in appeals workflows."},"ban_type":{"type":"string","description":"Type of ban: 'temporary' (for limited-time bans) or 'permanent'. Only allowed business enum values.\n\nDetermines logic for expiration and feature lock management."},"ban_start_at":{"type":"string","format":"date-time","description":"Timestamp for when the ban starts.\n\nMay be backdated if applied retroactively, or set to current time for immediate bans."},"ban_end_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If the ban is temporary, this is the date/time it expires; otherwise, null for permanent bans.\n\nTime zone: UTC."},"is_active":{"type":"boolean","description":"Whether this ban is currently enforced for the specified user and context.\n\nSet to false for expired, ended, or revoked bans; true if presently enforced."},"created_at":{"type":"string","format":"date-time","description":"Ban record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this ban history entry was last edited/modified.\n\nAuditable field for compliance tracking."}},"required":["banned_member_id","issued_by_id","reason","ban_type","ban_start_at","is_active","created_at","updated_at"],"description":"Represents a single ban (temporary or permanent) as issued against a member, typically as a consequence of moderation workflow or policy enforcement.\n\nIncludes references to the banned member, the actor who issued the ban (admin or moderator), the community affected (if applicable), the triggering report (if present), and all relevant timestamps (creation, start, end, updates). Contains human-readable reason for the ban, ban type, status, and full audit details. This object is crucial for review, appeals flows, and compliance/audit traceability. May be soft-deleted per system policy. All permission checks on ban enforcement and recurrence are centralized on this entity."},"ICommunityPlatformBanHistory.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_ban_histories","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"The ID of the banned member. References the primary key in the community_platform_members table. This field is required and critical for identifying who the ban is applied to."},"issued_by_id":{"type":"string","format":"uuid","description":"ID of the moderator or admin issuing the ban. References the corresponding user in the community_platform_admins or community_platform_moderators table. Required for traceability and audit purposes."},"community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the target community. If this is a platform-wide (global) ban, this may be null. Otherwise, references the community_platform_communities table."},"triggering_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the report that triggered this ban, if applicable. Nullable. References community_platform_reports."},"reason":{"type":"string","description":"Human-readable explanation entered by the moderator/admin for why the ban was applied. Required for compliance and audit. Should clearly link to rule or behavioral violation."},"ban_type":{"type":"string","description":"Type of ban. Typically either 'temporary' or 'permanent'. Enum values are enforced by business logic."},"ban_start_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the ban starts. Must be in ISO8601 date-time format."},"ban_end_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for when a temporary ban ends. If the ban is permanent, this should be null."},"is_active":{"type":"boolean","description":"Indicates if the ban is currently active (true) or has ended/revoked (false)."}},"required":["banned_member_id","issued_by_id","reason","ban_type","ban_start_at","is_active"],"description":"DTO for creating a new ban history record in community_platform_ban_histories. Records all audit, relationship, and compliance fields needed by business requirements. See Prisma model for field constraints and business logic."},"ICommunityPlatformBanHistory.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_ban_histories","properties":{"ban_end_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp to update when a ban ends (for temporary bans). Null if still permanent or active."},"reason":{"type":"string","description":"Updated reason for the ban, may be changed after appeals, forward review, or admin correction."},"ban_type":{"type":"string","description":"Update or correction to ban type. Enum values defined by business rules."},"is_active":{"type":"boolean","description":"Whether the ban is still in force (true) or has been lifted (false)."},"penalty_status":{"type":"string","description":"Current penalty status: e.g., 'active', 'expired', or 'revoked'. Optional, for business tracking."}},"required":[],"description":"DTO for updating an existing ban history record in community_platform_ban_histories. Supports partial updates: only the supplied fields are changed. Fields correspond to Prisma schema for business rule compliance."},"ICommunityPlatformModerationAction.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator or admin actor performing or requesting search/filter. Used for log scoping or actor-based filtering, but typically set by server/context not by client input."},"community_id":{"type":"string","format":"uuid","description":"Optional filter to moderation actions within a particular community. If present, restricts action listing to that community's scope."},"action_type":{"type":"string","description":"Type of moderation action. May be used as a filter for search/index: e.g., 'remove_post', 'remove_comment', 'warn_user', 'ban_user', 'escalate', 'dismiss', 'pin', 'edit_content', etc. Exact values may be system-defined or business-specified."},"target_post_id":{"type":"string","format":"uuid","description":"Optional filter for actions against a specific post. Mutually exclusive with target_comment_id in many search scenarios."},"target_comment_id":{"type":"string","format":"uuid","description":"Optional filter for actions against a specific comment. Mutually exclusive with target_post_id in many search scenarios."},"report_id":{"type":"string","format":"uuid","description":"Optional filter for moderation actions related to a specific report or escalation."},"description_query":{"type":"string","description":"Optional text search for filtering actions with a matching description or moderator note. May support partial matches or trigram full-text search depending on backend implementation."},"start_time":{"type":"string","format":"date-time","description":"Optional UTC timestamp for filtering actions performed after a certain point in time (inclusive). Format: 'YYYY-MM-DDTHH:mm:ss.sssZ'."},"end_time":{"type":"string","format":"date-time","description":"Optional UTC timestamp for filtering actions performed before a certain point in time (inclusive). Format: 'YYYY-MM-DDTHH:mm:ss.sssZ'."},"sort_by":{"type":"string","description":"Field for sorting moderation actions. Typical values: 'created_at', 'action_type', 'actor_id'. May support descending/ascending via sort_order, or via field value (e.g., '-created_at')."},"sort_order":{"oneOf":[{"const":"asc","description":"Order for sorting (ascending or descending). Applied to sort_by field."},{"const":"desc","description":"Order for sorting (ascending or descending). Applied to sort_by field."}],"description":"Order for sorting (ascending or descending). Applied to sort_by field."},"page":{"type":"integer","minimum":1,"description":"Requested page number for paginated results. Defaults to 1 if not specified."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum results per page for pagination; upper bound determined by business rules."}},"required":[],"description":"Filtering and search criteria for retrieving a paginated list of moderation actions from the community_platform_moderation_actions table. Used by admin and moderator interfaces to support bulk review and audit of moderation interventions across the platform, individual communities, or for a specific user or content item. Fields should strictly match filter and sort options supported by the backend, and only include properties existing in the schema or documented in feature requirements."},"ICommunityPlatformModerationAction":{"type":"object","x-autobe-prisma-schema":"community_platform_moderation_actions","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the moderation action record, auto-generated by the system."},"actor_id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator or admin who performed this action. References admin or moderator user in the corresponding actor tables."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post affected by this moderation action, if any. Nullable if the action does not relate to a post."},{"type":"null"}],"description":"ID of the post affected by this moderation action, if any. Nullable if the action does not relate to a post."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the comment affected by this moderation action, if any. Nullable if the action does not relate to a comment."},{"type":"null"}],"description":"ID of the comment affected by this moderation action, if any. Nullable if the action does not relate to a comment."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the content report triggering this moderation action, if any. Nullable if not applicable (e.g., action is manual, not from a report)."},{"type":"null"}],"description":"ID of the content report triggering this moderation action, if any. Nullable if not applicable (e.g., action is manual, not from a report)."},"action_type":{"type":"string","description":"Type of moderation action performed. System-defined values such as 'remove_post', 'remove_comment', 'warn_user', 'ban_user', 'escalate', 'dismiss', 'edit_content', 'pin', etc. See business and ERD documentation for full allowed values. This field represents the business operation classification."},"description":{"oneOf":[{"type":"string","description":"Optional free-form text describing the details or context of the moderation action (e.g., reason for removal or escalation, moderator notes, or audit context). Useful for compliance, transparency, and user notification purposes."},{"type":"null"}],"description":"Optional free-form text describing the details or context of the moderation action (e.g., reason for removal or escalation, moderator notes, or audit context). Useful for compliance, transparency, and user notification purposes."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, RFC 3339) when this moderation action was logged/performed."}},"required":["id","actor_id","action_type","created_at"],"description":"A full record of a moderation action performed on platform content or users. Records the critical details for audit, compliance, and moderator analytics purposes. Each action is linked to the acting user (moderator/admin), an optional related post or comment, related report, specific business action, an optional descriptive note, and a precise action timestamp. Only fields defined in the Prisma schema for moderation actions are included (see schema for full description and relationships)."},"ICommunityPlatformModerationAction.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"The UUID of the moderator or admin performing the moderation action. This property links the action to its responsible actor, as required by the Prisma schema."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The UUID of the post affected by the moderation action, if applicable. Set to null if action targets a comment or user ban, not a post."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The UUID of the comment affected by the moderation action, if applicable. Null if not targeting a comment."},"report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The UUID of the community_platform_reports record associated with this moderation action, if applicable. Null for direct actions not originating from a report."},"action_type":{"type":"string","description":"Type of moderation action. Typical values include: 'remove_post', 'remove_comment', 'pin', 'warn_user', 'ban_user', 'escalate', 'dismiss', 'edit_content', 'other'. This field drives workflow, audit classification, and analytics."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-form (optional) text describing the details or context for the moderation action. Used to capture moderator notes, reasons, or explanations. (nullable)"}},"required":["actor_id","action_type"],"description":"DTO for creating a new moderation action record in the moderation audit log. Corresponds to the community_platform_moderation_actions table. Recognizes all referential integrity and business policy rules, ensures robust tracking and compliance for content safety workflows. This object is tightly aligned to the business requirements for moderator action logging and platform transparency. All foreign key UUIDs must reference valid entities, and nullable fields support the various moderation contexts (e.g., post, comment, ban, escalation or report-based actions). \n\nIncludes only properties that actually exist on the Prisma moderation_actions table—absolutely no invented or non-schema fields. Audit-aware, security-aligned, and fully annotated for OpenAPI integration.","x-autobe-prisma-schema":"community_platform_moderation_actions"},"ICommunityPlatformModerationAction.IUpdate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"The UUID of the moderator/admin performing the update to this moderation action. Used for audit tracking of record changes."},"action_type":{"type":"string","description":"Type of moderation action. This field can only be updated as permitted by business rules, e.g., for correction or if action type was entered incorrectly."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the post affected by this moderation action, if changing post association (rare in practice)."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the comment affected by the action, if updating association. Nullable."},"report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the related report, if re-linking this action to a different or corrected report. Nullable."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated or revised description text providing additional context or correction to the moderation action audit record. Nullable."}},"required":[],"description":"DTO for updating an existing moderation action record. Mirrors only properties present in the community_platform_moderation_actions table that may be safely updated by moderators/admins—never introduces non-schema fields. All updates are subject to business rules (e.g., which fields are mutable), and audit tracks changes including the actor and edit timestamps. This type ensures full schema compliance, traceability, and OpenAPI integration with business-aligned documentation. \n\nNo properties are required since updates are partial by intent (Patch semantics), but all fields must exist in the source schema.\n","x-autobe-prisma-schema":"community_platform_moderation_actions"},"ICommunityPlatformEscalationLog.IRequest":{"type":"object","properties":{"initiator_id":{"type":"string","format":"uuid","description":"Filter by initiator's member, moderator, or admin ID. Only include escalation logs initiated by this actor."},"destination_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optionally filter to escalation logs assigned or routed to this admin ID (typically where pending admin review or assignment occurred)."},"report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optionally filter by a specific moderated report involved in the escalation, by UUID. Used in incident audit or report-specific queries."},"status":{"type":"string","description":"Filter by escalation workflow status. Allowed values: 'pending', 'in_review', 'resolved', 'closed'. Multiple statuses may be allowed in extended queries."},"date_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start of date range for filtering escalation logs. ISO 8601 string (inclusive); format: yyyy-MM-ddTHH:mm:ssZ"},"date_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End of date range for filtering escalation logs. ISO 8601 string (inclusive); format: yyyy-MM-ddTHH:mm:ssZ"},"sort_by":{"type":"string","description":"Field to sort escalation results by. Allowed: 'created_at', 'updated_at', 'status', 'event_time'. Default: 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction. Allowed: 'asc' or 'desc'. Default: 'desc'."},{"const":"desc","description":"Sort direction. Allowed: 'asc' or 'desc'. Default: 'desc'."}],"description":"Sort direction. Allowed: 'asc' or 'desc'. Default: 'desc'."},"page":{"type":"integer","minimum":1,"description":"Result page number for pagination. Defaults to 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of records per page. Defaults and caps as per platform pagination rules."}},"required":[],"description":"Filtering, searching, and pagination parameters for escalation log listing and search. Supports advanced audit, incident, and compliance queries. Every field is optional for broad queries; supply any combination."},"ICommunityPlatformEscalationLog":{"type":"object","x-autobe-prisma-schema":"community_platform_escalation_logs","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) of this escalation log entry. Unique, immutable identifier of log record."},"initiator_id":{"type":"string","format":"uuid","description":"The member, moderator, or admin who initiated the escalation. Referenced from community_platform_members.id or related actor table."},"destination_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Platform admin assigned to this escalation, if applicable. References community_platform_admins.id. Nullable if unassigned or yet to escalate."},"report_id":{"type":"string","format":"uuid","description":"The underlying moderation report (community_platform_reports.id) at the root of this escalation event."},"escalation_reason":{"type":"string","description":"A free-text or coded reason for escalation, entered by the initiator or the system at the time of event. Used for audit, compliance, or dispute review."},"status":{"type":"string","description":"Current escalation workflow status. Allowed: 'pending', 'in_review', 'resolved', 'closed'. 'pending': Unreviewed; 'in_review': actively being processed; 'resolved': completed; 'closed': finalized for compliance/archive."},"resolution_summary":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text summary (nullable) of how this escalation was resolved. Populated by admin or moderator completing the workflow."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this escalation log was created. ISO 8601 / RFC 3339 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this escalation log (status change, assignment, summary edit, etc.), supporting audit and compliance requirements."}},"required":["id","initiator_id","report_id","escalation_reason","status","created_at","updated_at"],"description":"A single platform escalation log entry. Records details on who escalated, for what reason, the workflow, assignments, review/resolution summary, and timing. Used for compliance, audit, conflict investigation, and appeal review. Aligns to Prisma model: community_platform_escalation_logs."},"ICommunityPlatformEscalationLog.ICreate":{"type":"object","properties":{"initiator_id":{"type":"string","format":"uuid","description":"Unique identifier of the member or moderator/admin who initiates the escalation. Must reference a valid platform actor."},"report_id":{"type":"string","format":"uuid","description":"Unique identifier of the report being escalated. Required reference to the reported post or comment triggering this escalation."},"escalation_reason":{"type":"string","description":"Free-form explanation provided by the initiator justifying why escalation is necessary. May include context such as ambiguity, conflict of interest, unresolved moderation, or severity of violation. Recommended max length: 500 characters."},"destination_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Unique identifier of the admin assigned to receive this escalation, if known at creation time. May be omitted or set to null if reassignment is expected later."},{"type":"null"}],"description":"Unique identifier of the admin assigned to receive this escalation, if known at creation time. May be omitted or set to null if reassignment is expected later."},"status":{"oneOf":[{"const":"pending","description":"Initial status of the escalation event in the workflow. Typical values: 'pending' (default), 'in_review' (admin assigned), 'resolved', 'closed'. Platform may restrict allowed status enum values."},{"const":"in_review","description":"Initial status of the escalation event in the workflow. Typical values: 'pending' (default), 'in_review' (admin assigned), 'resolved', 'closed'. Platform may restrict allowed status enum values."},{"const":"resolved","description":"Initial status of the escalation event in the workflow. Typical values: 'pending' (default), 'in_review' (admin assigned), 'resolved', 'closed'. Platform may restrict allowed status enum values."},{"const":"closed","description":"Initial status of the escalation event in the workflow. Typical values: 'pending' (default), 'in_review' (admin assigned), 'resolved', 'closed'. Platform may restrict allowed status enum values."}],"description":"Initial status of the escalation event in the workflow. Typical values: 'pending' (default), 'in_review' (admin assigned), 'resolved', 'closed'. Platform may restrict allowed status enum values."},"resolution_summary":{"oneOf":[{"type":"string","description":"Text description of the outcome/resolution. Optional at creation; provided when finalizing or recording review outcome."},{"type":"null"}],"description":"Text description of the outcome/resolution. Optional at creation; provided when finalizing or recording review outcome."}},"required":["initiator_id","report_id","escalation_reason","status"],"description":"Payload for creating a new escalation log record in the moderation and abuse workflow. Must include identification for the initiator, the triggering report, a description of why escalation is necessary, and initial status. Optional assignment to an admin and outcome summary may be included as context or when known."},"ICommunityPlatformEscalationLog.IUpdate":{"type":"object","properties":{"destination_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update or assign the admin responsible for resolving this escalation. May be set to null if reassigned or unassigned."},{"type":"null"}],"description":"Update or assign the admin responsible for resolving this escalation. May be set to null if reassigned or unassigned."},"status":{"oneOf":[{"const":"pending","description":"Update the workflow status for this escalation event. Allowed values are typically: 'pending', 'in_review', 'resolved', 'closed'."},{"const":"in_review","description":"Update the workflow status for this escalation event. Allowed values are typically: 'pending', 'in_review', 'resolved', 'closed'."},{"const":"resolved","description":"Update the workflow status for this escalation event. Allowed values are typically: 'pending', 'in_review', 'resolved', 'closed'."},{"const":"closed","description":"Update the workflow status for this escalation event. Allowed values are typically: 'pending', 'in_review', 'resolved', 'closed'."}],"description":"Update the workflow status for this escalation event. Allowed values are typically: 'pending', 'in_review', 'resolved', 'closed'."},"resolution_summary":{"oneOf":[{"type":"string","description":"Supply or update the resolution summary text—describing the final decision, rationale, or closing note for the escalation. May be set to null for clearing the field."},{"type":"null"}],"description":"Supply or update the resolution summary text—describing the final decision, rationale, or closing note for the escalation. May be set to null for clearing the field."}},"required":["status"],"description":"Payload to update a moderation escalation entry in the escalation log. Allows changing workflow status, assigning a destination admin, or supplying resolution summary. Follows strict audit and permission controls."},"ICommunityPlatformReportCategory.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page of search results to return. Used for paginated queries, with default platform limit.","minimum":1},"limit":{"type":"integer","description":"Number of records per page. Used for pagination in search/list endpoints, subject to platform maximums.","minimum":1},"search":{"type":"string","description":"Keyword to search for in category names, allowing partial matching for user-friendly discovery."},"sortBy":{"oneOf":[{"const":"name","description":"Field to sort results by. Typical choices include 'name', 'created_at', 'updated_at'."},{"const":"created_at","description":"Field to sort results by. Typical choices include 'name', 'created_at', 'updated_at'."},{"const":"updated_at","description":"Field to sort results by. Typical choices include 'name', 'created_at', 'updated_at'."}],"description":"Field to sort results by. Typical choices include 'name', 'created_at', 'updated_at'."},"order":{"oneOf":[{"const":"asc","description":"Direction to sort results. Can be 'asc' (ascending) or 'desc' (descending)."},{"const":"desc","description":"Direction to sort results. Can be 'asc' (ascending) or 'desc' (descending)."}],"description":"Direction to sort results. Can be 'asc' (ascending) or 'desc' (descending)."}},"required":[],"description":"Search and filter criteria for retrieving report categories. Enables platform to list report reasons for user-facing reporting and admin configuration. Includes pagination, search, and sorting parameters. Used in PATCH /communityPlatform/reportCategories endpoint. Optional fields enable flexible UI and management workflows."},"ICommunityPlatformReportCategory":{"type":"object","x-autobe-prisma-schema":"community_platform_report_categories","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the report category."},"name":{"type":"string","description":"Unique human-readable name of the report category (e.g., 'spam', 'harassment', 'abuse')."},"allow_free_text":{"type":"boolean","description":"Whether reporters are permitted (or required) to include a free-text description in addition to the category. True indicates an explanatory field is shown at report time."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this report category was created. ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this report category was last updated. ISO 8601 format."}},"required":["id","name","allow_free_text","created_at","updated_at"],"description":"Represents a single report category option used in content reporting on the platform. Used for user-facing reporting flows and in admin/moderation configuration. Fields include unique ID, display name, whether free-text is allowed, and audit timestamps. Based on the 'community_platform_report_categories' table in Prisma schema."},"ICommunityPlatformReportCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique, human-readable name of the report category (e.g., 'spam', 'harassment'). This value must be unique and descriptive, and is used as the display label in the report UI and moderation workflows. See schema column: name."},"allow_free_text":{"type":"boolean","description":"Indicates whether reporters are permitted (or required) to provide free-text details for reports in this category. If true, the reporting UI will expose an additional input for users to add clarification or context. Directly maps to the schema's allow_free_text column."}},"required":["name","allow_free_text"],"description":"DTO for creating a new report category for the content reporting system (community_platform_report_categories table).\n\nThis type allows admins to add or configure a new reason for users to report content. Properties include a unique category name and whether this category should prompt for additional free-text input when users select it for a report. Unique constraint on name is enforced at the DB level."},"ICommunityPlatformReportCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"(Optional) Unique, human-readable name of the report category. Only set this property if the category name should be changed. The value must remain unique and descriptive per business rules. Corresponds to the schema: name."},"allow_free_text":{"type":"boolean","description":"(Optional) Whether free-text explanations are allowed or required for this report category. When true, the platform enables a free-form detail box for users selecting this reason for reporting. Corresponds to the schema: allow_free_text."}},"required":[],"description":"DTO for updating an existing report category (community_platform_report_categories table).\n\nAllows admins to modify properties of an existing category, including the display name (subject to unique constraint) and the allow_free_text permission. Include only those fields needing updates in the PATCH or PUT request body -- all properties are optional for update types."},"ICommunityPlatformKarmaLedger.IRequest":{"type":"object","properties":{"community_platform_member_id":{"type":"string","format":"uuid","description":"The UUID of the member whose karma ledger records are to be retrieved. Optional if searching by broader criteria."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) The UUID of the community to filter ledgers by a specific community context. Null or omitted means platform-wide/global search."},"min_karma":{"type":"integer","description":"Optional minimum boundary for current karma value for range filtering."},"max_karma":{"type":"integer","description":"Optional maximum boundary for current karma value for range filtering."},"feature_lock_reason":{"type":"string","description":"Optional filter for ledgers having a specific business reason for current feature lock (string match)."},"status":{"type":"string","description":"Optional filter for active vs deleted ledgers (e.g., 'active', 'deleted', etc.)"},"sort_by":{"type":"string","description":"Optional field specifying the key to sort by (e.g., 'created_at', 'updated_at', 'current_karma')."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction (ascending or descending)"},{"const":"desc","description":"Sort order direction (ascending or descending)"}],"description":"Sort order direction (ascending or descending)"},"page":{"type":"integer","description":"Optional page number for pagination. Starts at 1."},"limit":{"type":"integer","description":"Max results per page for pagination control (default/maximum depends on platform policy, e.g., 50, 100, etc.)"},"cursor":{"type":"string","description":"Optional cursor (opaque string or uuid) for cursor-based paging; mutually exclusive with page/limit."}},"required":[],"description":"Search/filter and pagination parameters for karma ledger retrieval. Used by admins to search for karma ledgers by member, community, status, range, and for paging through results. Maps to fields in the community_platform_karma_ledgers table. Contains only properties present in the schema or matching filter needs. Filtering by 'deleted_at' is done via status where needed, since hard-delete is possible."},"ICommunityPlatformKarmaLedger":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_ledgers","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique UUID for the ledger record."},"community_platform_member_id":{"type":"string","format":"uuid","description":"Belonged member's UUID. References community_platform_members.id."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced community UUID (nullable for platform-wide/global karma). References community_platform_communities.id."},"current_karma":{"type":"integer","description":"Current karma value for the member (may be negative; server-enforced min if needed)."},"feature_lock_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Nullable) Optional human/business-readable reason for feature gating (e.g., why user can't post)."},"updated_at":{"type":"string","format":"date-time","description":"Last time the ledger was updated (ISO 8601 standard format, always present)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (ISO 8601 standard format)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; indicates deleted status if non-null. Null if active."}},"required":["id","community_platform_member_id","current_karma","updated_at","created_at"],"description":"A current karma ledger record for a member, scoped globally or to a specific community. Derived from the community_platform_karma_ledgers table in the Prisma schema. Contains only explicitly defined properties. Timestamps use ISO 8601 format."},"ICommunityPlatformKarmaLedger.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_ledgers","properties":{"community_platform_member_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the member for whom the karma ledger is created. This field references the primary key 'id' in the 'community_platform_members' table. It is required to establish the owner of the karma ledger, either for platform-wide or community-specific tracking."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) The unique identifier (UUID) of the community to which this karma ledger applies. If null, the karma ledger is platform-wide; if provided, it references the 'id' in 'community_platform_communities'."},"current_karma":{"type":"integer","description":"The initial karma points value to set for the member in this ledger. Must be an integer and can be positive, zero, or negative according to platform policy."},"feature_lock_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) The reason for gating features for this member due to the state of their karma. Used to indicate manual lockout, special gating, or other admin-enforced restriction. Provide null if no lock is present."}},"required":["community_platform_member_id","current_karma"],"description":"Request body for creating a new karma ledger entry. This DTO enables administrators to create a member karma tracking record, optionally scoped to a specific community or platform-wide. It must specify the member, initial karma value, and may include a community and a gating reason. All fields correspond to columns in the community_platform_karma_ledgers table."},"ICommunityPlatformKarmaLedger.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_ledgers","properties":{"current_karma":{"type":"integer","description":"The updated karma value for this ledger entry. Must be an integer. Can be negative per business rule. This is used by administrators when correcting or adjusting a member's points manually."},"feature_lock_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) A reason for feature lockout or null if no lock is to be set. Allows administrators to gate feature access or to document a manual restriction reason. Set to null to remove an existing lock reason."}},"required":[],"description":"Request body for updating (patching) an existing karma ledger record. This DTO enables administrators to adjust the member's current karma value and/or the 'feature_lock_reason'. All fields correspond to mutable columns in the community_platform_karma_ledgers table. Only fields included in the request will be updated."},"ICommunityPlatformKarmaPenalty.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"The unique identifier of the member whose penalty records are being requested or filtered. Used to scope the search to a specific platform user."},"community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The unique identifier of the target community to which the penalty is scoped. If provided, restricts the search to penalties only within this community context; if null, penalties may be global or unscoped."},"penalty_type":{"type":"string","description":"The type of penalty such as deduction or suspension. Used as a filter to restrict results to penalties of a particular category."},"penalty_status":{"type":"string","description":"Filter for the penalty status (e.g., 'active', 'expired', 'revoked'). Allows searching for currently active, expired, or manually revoked penalties."},"applied_from":{"type":"string","format":"date-time","description":"ISO 8601 timestamp; if specified, only returns penalties applied after this date. Used for time-range or audit filtering."},"applied_to":{"type":"string","format":"date-time","description":"ISO 8601 timestamp; only penalties applied before this date are returned. Used for narrowing results to a date window."},"page":{"type":"integer","description":"Page number for pagination. Used in conjunction with limit to page results."},"limit":{"type":"integer","description":"The number of penalty records to return per page. Used to control pagination size."},"sort_by":{"type":"string","description":"The property by which to order penalty records, e.g. 'applied_at', 'penalty_value'."},"sort_direction":{"oneOf":[{"const":"asc","description":"The direction of result sorting: ascending (asc) or descending (desc)."},{"const":"desc","description":"The direction of result sorting: ascending (asc) or descending (desc)."}],"description":"The direction of result sorting: ascending (asc) or descending (desc)."}},"description":"Request body for filtering and paginated searching of karma penalties in the community_platform_karma_penalties table. Each property corresponds to a valid query/filter parameter. This DTO is used in admin or moderator workflows for listing, reviewing, and auditing penalties across members and communities. All properties are optional except for pagination; combined filters allow for targeted audits and enforcement checks.","required":[]},"ICommunityPlatformKarmaPenalty":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_penalties","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. The unique UUID identifier for this karma penalty record."},"community_platform_member_id":{"type":"string","format":"uuid","description":"Reference to the penalized member's ID in community_platform_members. Indicates who is subject to the penalty."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the affected community (if any); nullable for global penalties. If set, penalty applies only in this community."},"penalty_type":{"type":"string","description":"Type of penalty action, e.g. 'deduction', 'suspension'. This value conveys the punishment mechanism; constrained by business logic."},"penalty_value":{"type":"integer","description":"The numeric value of the penalty—negative for deductions, positive as duration for suspensions (if applicable). Interpreted by penalty_type."},"penalty_reason":{"type":"string","description":"Human-readable explanation for why the penalty was applied. Entered by the moderator or admin issuing the penalty."},"penalty_status":{"type":"string","description":"Current status of the penalty: 'active', 'expired', 'revoked', etc. Drives enforcement/compliance logic."},"applied_at":{"type":"string","format":"date-time","description":"Timestamp when the penalty was originally applied."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable. If penalty expires, timestamp for expiration; otherwise null for permanent penalties."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for penalty record creation."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for logical deletion (soft delete) of this penalty. Null if still active."}},"required":["id","community_platform_member_id","penalty_type","penalty_value","penalty_reason","penalty_status","applied_at","created_at"],"description":"Represents a single karma penalty applied to a member for rules violations or moderation actions. Fields include member, (optional) community, type, status, value (amount/duration), reason, and application/expiration timestamps. Based on the community_platform_karma_penalties schema. Used for audit, enforcement, or analytics to trace sanctions and feature gating for users. Business logic constrains type, value, and status validity. Does not include sensitive profile/member details beyond penalized party."},"ICommunityPlatformKarmaPenalty.ICreate":{"type":"object","properties":{"community_platform_member_id":{"type":"string","format":"uuid","description":"ID of the member subject to the penalty. References {@link community_platform_members.id}.\n\nThis field is required and ensures penalty tracking is always associated with a valid user account. Used as a foreign key for relational integrity with user/member tables.\n\nMust be a valid, existing member UUID."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the targeted community if the penalty is community-specific. Nullable for global penalty.\n\nReferences {@link community_platform_communities.id}."},{"type":"null"}],"description":"Optional. Specify the community if the penalty is community-scoped. Set to null for global platform-wide penalty."},"penalty_type":{"type":"string","description":"Type of penalty. Allowed (per business logic): 'deduction', 'suspension', etc.\n\nUsed to apply different business rules or restrictions."},"penalty_value":{"type":"integer","description":"Numeric value for the penalty. Negative for deduction, duration if suspension. Typically enforced via business rules. E.g. -10 for deduction, 7 for 7-day suspension."},"penalty_reason":{"type":"string","description":"Detailed human-readable reason for the penalty. Required. This should give clear context for audit, user notification, or compliance review."},"penalty_status":{"type":"string","description":"Current penalty status. Allowed values: 'active', 'expired', 'revoked'. Sets how penalty is enforced in platform logic.\n\nStatus must be managed according to business transitions (e.g., active to expired when end time is reached)."},"applied_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp for when the penalty is applied/starts. Used for audit and real-time logic."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"If applicable, the timestamp when the penalty expires (for temporary penalties). Null for permanent penalties."},{"type":"null"}],"description":"Timestamp for when penalty ends/auto-expires. Null for permanent penalties."}},"required":["community_platform_member_id","penalty_type","penalty_value","penalty_reason","penalty_status","applied_at"],"description":"Create DTO for a karma penalty record in community_platform_karma_penalties.\n\nThis type is used to create a new penalty entry assigning a deduction or restriction to a platform member, optionally scoped to a community. It captures all business-required fields for penalty creation and aligns with the schema. Referenced members and communities are validated for existence and permissions prior to creation.\n\nStatus and timestamps determine enforcement windows and permanence. All business rules and relationships must be respected for policy compliance.","x-autobe-prisma-schema":"community_platform_karma_penalties"},"ICommunityPlatformKarmaPenalty.IUpdate":{"type":"object","properties":{"penalty_type":{"type":"string","description":"(Optional) Update the type of penalty if allowed by business logic."},"penalty_value":{"type":"integer","description":"(Optional) Update the penalty value—for corrections or adjustment after review."},"penalty_reason":{"type":"string","description":"(Optional) Update the reason for the penalty—e.g., additional context, correction, or appeal resolution.\n\nShould reflect accurate reasoning for compliance and audit trails."},"penalty_status":{"type":"string","description":"(Optional) Update the status—valid statuses per business logic: 'active', 'expired', 'revoked'. Used for appeal, manual expiry, or reinstatement workflows."},"applied_at":{"type":"string","format":"date-time","description":"(Optional) Change the application timestamp. Used in correction workflows or upon reactivation of a penalty."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"If updating the expiry—for setting, extending, or canceling a scheduled end date."},{"type":"null"}],"description":"(Optional) Modify the penalty's expiration time. Null for indefinite/never expires."}},"required":[],"description":"Update DTO for an existing karma penalty record in community_platform_karma_penalties.\n\nAll fields are optional; only supplied fields are changed. Used for resolving appeals, correcting penalty data, enforcing early expiry or status transitions (e.g., revocation or reinstatement).\n\nBusiness rules may restrict which fields can be updated based on current status or timing in the workflow. Every update is subject to audit and compliance review for traceability.","x-autobe-prisma-schema":"community_platform_karma_penalties"},"ICommunityPlatformKarmaHistory.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter: The UUID of the member whose karma history is to be listed. Effective for user profile audit scenarios or self-profile access. Must match a valid member id if provided."},"community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter: The UUID of the community for which to restrict karma events. Use null for platform-wide/global karma history."},"event_type":{"type":"string","description":"Filter: Type of event(s) to include (e.g., 'upvote', 'downvote', 'moderation_penalty', 'admin_adjustment'). May support comma-separated or repeated values."},"after":{"type":"string","format":"date-time","description":"Optional lower bound for event_time (inclusive); only karma events on or after this timestamp are included."},"before":{"type":"string","format":"date-time","description":"Optional upper bound for event_time (exclusive); only karma events strictly before this timestamp are included."},"sort":{"oneOf":[{"const":"event_time-desc","description":"Sort order for result. Defaults to descending (most recent first)."},{"const":"event_time-asc","description":"Sort order for result. Defaults to descending (most recent first)."}],"description":"Sort order for result. Defaults to descending (most recent first)."},"page":{"type":"integer","minimum":1,"description":"Pagination: Page number, starting from 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: Number of records per page. Policy may restrict max page size."}},"required":[],"description":"Request object for searching and filtering paginated member karma history events. Enables dashboard/profile views, analytics, or export. All filters are optional for maximum reach-down control, but page/limit are usually included for UI queries."},"ICommunityPlatformKarmaHistory":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_history","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. The unique UUID for this karma history record."},"community_platform_member_id":{"type":"string","format":"uuid","description":"Foreign key. The UUID of the member affected by this karma event."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional foreign key. UUID of the related community—if karma scope is community-limited. Null for global/platform events."},"community_platform_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional foreign key. UUID of the related post if this event is post-scoped (e.g., for votes/upvotes/downvotes on posts)."},"community_platform_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional foreign key. UUID of the related comment if this event is comment-scoped (e.g., for votes/upvotes/downvotes on comments)."},"event_type":{"type":"string","description":"Type of karma event. Examples: 'upvote', 'downvote', 'moderation_penalty', 'admin_adjustment'. Used for business logic and filtering."},"change_amount":{"type":"integer","description":"The signed integer delta of karma for this event (positive or negative)."},"event_context":{"type":"string","description":"Short string that provides additional context for the event: 'voting', 'system', 'moderation', or other free-form categories used for business analytics."},"event_time":{"type":"string","format":"date-time","description":"Timestamp for when this event was registered (ISO 8601); may match created_at but allows future expansion."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this record was created in the system. May match event_time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion. Timestamp if the record was logically deleted; otherwise null."}},"required":["id","community_platform_member_id","event_type","change_amount","event_context","event_time","created_at"],"description":"Karma history record capturing the full detail of a single karma-affecting event for a member. References member, optional community, post, and/or comment, and provides all context needed for analytic, audit, or profile breakdown views. Descriptions are rooted in Prisma schema for 'community_platform_karma_history'."},"ICommunityPlatformKarmaThreshold.IRequest":{"type":"object","properties":{"community_platform_community_id":{"type":"string","format":"uuid","description":"Nullable UUID referencing the specific community the karma threshold applies to. If omitted or null, applies platform-wide. Used for filtering or targeting searches within a particular community's karma restrictions."},"threshold_type":{"type":"string","description":"Business key for the type of karma threshold (e.g., 'post_creation', 'comment_voting', 'subscription_unlock'). Used for filtering searches by type or feature gating logic."},"page":{"type":"integer","description":"Page number for paginated results. Optional."},"limit":{"type":"integer","description":"Maximum number of results per page in paginated responses. Optional."},"sort":{"type":"string","description":"Sort specification (e.g., 'created_at', 'threshold_value', ascending/descending). Optional."}},"required":[],"description":"Search, filter, and pagination criteria for karma thresholds. This DTO enables administrators to query the list of karma threshold settings using filters for community, type, and custom sort orders, supporting management and configuration of feature gating rules."},"ICommunityPlatformKarmaThresholds":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_thresholds","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this karma threshold entry in the system. Used for reference and update operations."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Nullable. References the community_platform_communities.id if the threshold is scoped to a specific community, or null if the threshold applies platform-wide."},"threshold_type":{"type":"string","description":"Business type/key for the threshold (e.g. 'post_creation', 'comment_voting', 'subscription_unlock'). Determines which feature this threshold governs. This property matches values in feature gating logic."},"threshold_value":{"type":"integer","description":"Required karma value that must be attained to unlock the gated feature or action represented by threshold_type. Negative values may be supported for penalty logic. Must be an integer."},"feature_lock_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable reason or system code explaining the gating logic. Used in UIs or business logic to display why a feature is locked for the user below this threshold."},"created_at":{"type":"string","format":"date-time","description":"Row creation timestamp, in ISO 8601 format with timezone. Used for audit, ordering, and analytics."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp, marking when this threshold was removed/deactivated if not currently active. Null when actively enforced."}},"required":["id","threshold_type","threshold_value","created_at"],"description":"Karma threshold configuration for platform or community-based gating. This entity defines a minimum required karma for a particular action (e.g., posting, voting), enables enforcement of feature access, and may restrict or unlock features for users globally or within a specific community scope. Contains full details for audit and configuration UIs. Directly corresponds to the community_platform_karma_thresholds table."},"ICommunityPlatformKarmaThresholds.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_thresholds","properties":{"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Nullable. Community to which threshold applies. References community_platform_communities.id. If null, threshold applies platform-wide. Used for community-specific gating."},"threshold_type":{"type":"string","description":"Business type/key for the threshold (e.g. 'post_creation', 'comment_voting', 'subscription_unlock'). Uniquely identifies the feature or business process governed by this threshold."},"threshold_value":{"type":"integer","description":"Required karma value for this threshold. Must be an integer, may be negative or positive depending on business rules. Used to restrict/enable feature access."},"feature_lock_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for gating associated with this threshold (human-readable, optional). E.g., explanation to show users about karma block. Optional field."}},"required":["threshold_type","threshold_value"],"description":"Schema for creating a new karma threshold configuration for the platform or a community, as defined in the community_platform_karma_thresholds Prisma table. Used by admins to gate features based on karma. Optional community_platform_community_id specifies if the threshold is global or community-specific."},"ICommunityPlatformKarmaThreshold.IUpdate":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_thresholds","properties":{"threshold_type":{"type":"string","description":"Business type/key for the threshold (e.g. 'post_creation', 'comment_voting', 'subscription_unlock'). Uniquely identifies the feature or business process governed by this threshold. Only updatable by admin."},"threshold_value":{"type":"integer","description":"Required karma value for this threshold. Must be an integer. Used to restrict/enable feature access. Only updatable by admin."},"feature_lock_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for gating associated with this threshold (human-readable, optional). E.g., explanation to show users about karma block. Optional field, updatable by admin."}},"required":[],"description":"Schema for updating fields of an existing karma threshold record in community_platform_karma_thresholds. Used by admins to edit feature gating configuration. Optional fields."},"ICommunityPlatformKarmaThreshold":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nThe unique identifier for the karma threshold record. Globally unique UUID referencing this configuration row in the community_platform_karma_thresholds table."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional. Community to which threshold applies.\n\nIf present, the threshold applies to the specified community (referencing community_platform_communities.id).\nIf null, the threshold is global for the entire platform.\nSet to null for platform-wide thresholds or specify a UUID for community-specific gating."},"threshold_type":{"type":"string","description":"Business type/key for the threshold (e.g. 'post_creation', 'comment_voting', 'subscription_unlock').\n\nDefines what feature, permission, or gate this threshold enforces. The feature type must align with platform rules and should be unique per community."},"threshold_value":{"type":"integer","description":"The required karma value for this threshold.\n\nThe integer number of points needed to unlock or pass the gate for the feature type specified in threshold_type."},"feature_lock_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business reason for feature lockout if karma is below threshold.\n\nHuman-readable rationale explaining why the threshold exists or what restriction is enforced when the user is locked out."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the karma threshold entry was created."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for retention/deprecation tracking. Null means active; if set, this karma threshold is no longer enforced."}},"required":["id","threshold_type","threshold_value","created_at"],"description":"Karma threshold configuration entity.\n\nRepresents a rule requiring a certain amount of karma for feature unlocks, permissions, or content gating at the platform or community level. Used for business logic such as requiring minimum karma before posting, voting, or subscribing. Each row applies globally unless community_platform_community_id is set, in which case it is scoped to a specific community. Thresholds are referenced in feature access logic, permission checks, and analytics. Tied directly to the community_platform_karma_thresholds Prisma model.\n\nSee also: 'feature_lock_reason' gives user-facing feedback; 'threshold_type' describes feature being gated. Enforced by privilege and content gating flows. All date fields are in ISO8601 UTC format."},"ICommunityPlatformKarmaAward.IRequest":{"type":"object","properties":{"member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter. Retrieve awards for a specific member only (referencing community_platform_members.id).\n\nIf omitted or null, results are not filtered by member."},"community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter. Retrieve awards for a specific community.\n\nIf omitted or null, returns awards globally or from all communities."},"award_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter. Type or key of the award (e.g., 'gold', 'founder', 'legendary').\n\nIf set, restricts results to this award type. If null/omitted, accepts all types."},"event_time_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter. Lower bound (inclusive) for award event time. UTC ISO8601."},"event_time_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter. Upper bound (inclusive) for award event time. UTC ISO8601."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional. The page number to retrieve in paginated results (1-based).\nIf omitted/null, defaults to 1."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional. The number of records to return per page in paginated results.\nIf omitted/null, the system may use a platform default or maximum."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional. Sort field. Possible values: 'event_time', 'award_type', etc.\nIf omitted/null, defaults to 'event_time' descending."},"sort_direction":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional. 'asc' or 'desc'. Defaults to 'desc'."}},"required":[],"description":"Query request object for searching karma award events.\n\nThis DTO is used in PATCH (search/filter/index) operations on karma awards to support paginated, filtered, and sorted listing in admin dashboards, analytics, or profile achievement displays. Each field corresponds to a filter or sort/pagination parameter supported by the karma award index/search API. All filters are optional; omitting them yields unfiltered/global results.\n\nWhere relevant, all IDs are UUID strings referencing corresponding entities in the platform. Sorting and pagination properties control result navigation and ordering. Supports large-scale queries for analytics/reporting as well as targeted achievement lookup for individual users."},"ICommunityPlatformKarmaAward":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_awards","description":"Represents a historical award or badge granted to a member for achievement on the platform or within a specific community.\n\nEach karma award records the recipient member, optional community association, award type (e.g., gold, founder, legendary), reason for award, and event timestamp. Intended for analytics, profile badges, moderation recognition, or administrative rewards. Fields map directly to the community_platform_karma_awards table in Prisma.\n\nBusiness rules require proper validation of referenced member/community, regulated award types, reasonable event times, and concise, safe descriptions. Communications regarding awards (notifications, profile display) utilize this model as a canonical reference.\n\nKarma awards are typically visible on user profiles and may inform permissions or member reputation flows. This structure supports compliance with audit and recognition policies. All fields are strictly required unless otherwise indicated by the schema.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key; the unique identifier for the karma award event as stored in the database. This UUID is used for direct record retrieval, referencing, and audit."},"community_platform_member_id":{"type":"string","format":"uuid","description":"Foreign key referencing the member who received the award. Maps to the unique member id in community_platform_members. Required for proper association and display."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional foreign key to the community in which this award was earned. Null for global or platform-level awards, otherwise references community_platform_communities.id. Used for community-specific recognition flows."},"award_type":{"type":"string","description":"Short key or descriptor for the award type (e.g., 'gold', 'founder', 'legendary'). Can be used for badge icons or business logic gating. The value is regulated by award type business rules."},"award_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable description or rationale for conferring the award, such as 'Top contributor of the month'. Used for tooltips, notifications, or context display. May be null if system-awarded."},"event_time":{"type":"string","format":"date-time","description":"Timestamp at which the award event occurred, recorded in ISO8601 format with time zone. Provides context for when the user earned the achievement."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this award record was inserted into the database. Used for audit and analytics."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete field; timestamp indicating when this award was revoked, null if active. Enables historical views or compliance reporting."}},"required":["id","community_platform_member_id","award_type","event_time","created_at"]},"ICommunityPlatformKarmaAward.ICreate":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_awards","description":"Payload for creating a new karma award assigned to a member, optionally scoped to a community. Used by administrative or automated reward logic.\n\nFields mirror those in ICommunityPlatformKarmaAward, omitting ID and audit fields (which are assigned by the backend). All references (member_id, optional community_id) must be validated for existence and award_type should follow platform-defined keys. Reason is optional, and event_time supports either current or backdated award creation (ISO8601).","properties":{"community_platform_member_id":{"type":"string","format":"uuid","description":"UUID for the member receiving this award (community_platform_members.id). Required and validated at creation."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Nullable UUID pointing to the community in which the award was earned (community_platform_communities.id). Null indicates a platform-wide achievement."},"award_type":{"type":"string","description":"Short key or descriptor for the award type to be assigned (e.g., 'gold', 'top_contributor'). Must conform to business-regulated award types."},"award_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable explanation of why the award is issued (optional). Used for display, tooltips, or compliance logs."},"event_time":{"type":"string","format":"date-time","description":"Timestamp for when this award was earned or is considered effective. Should be ISO8601 and is typically set to the moment of creation unless a historical backfill is required."}},"required":["community_platform_member_id","award_type","event_time"]},"ICommunityPlatformKarmaAward.IUpdate":{"type":"object","properties":{"award_reason":{"type":"string","description":"Short human-readable description of why the award was granted.\n\nUpdate this to provide a new or corrected description when modifying the award record."},"award_type":{"type":"string","description":"Type or key of the award (e.g. 'gold', 'founder', 'legendary').\n\nAllows updating the classification or categorization of an already-issued award if a reclassification is necessary."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Nullable. Community in which the award was accrued (for community-specific badges). Reference to {@link community_platform_communities.id}. If omitted or set to null, award is considered platform-wide."},"event_time":{"type":"string","format":"date-time","description":"Time when the award was granted. If updating this field, ensure to use an appropriate ISO 8601 timestamp reflective of the award date."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When the award was revoked (if ever). Null otherwise. Update to current date-time string to revoke, or null to un-revoke."}},"required":[],"description":"Update object for a Karma Award (Badge/Reward event).\n\nEnables administrators to modify the human-readable award reason, type, revocation status, associated community, or the event timestamp, as defined by the karma award record for compliance, appeal resolution, or correcting data. See the original business and schema comments for permitted flows. All fields are optional—only supplied fields will be updated."},"ICommunityPlatformFileUpload.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nAuto-generated unique identifier for the file upload record."},"uploaded_by_member_id":{"type":"string","format":"uuid","description":"Uploader's member ID (@link community_platform_members.id).\n\nReferences the user who uploaded the file. Required for audit and access logic."},"original_filename":{"type":"string","description":"Original filename as submitted by user. Provides client context for display/audit. String field."},"mime_type":{"type":"string","description":"File's MIME type (e.g., 'image/png'). Used for filtering and validation. String field."},"file_size_bytes":{"type":"integer","description":"File size in bytes. Indicates the binary payload size; used for quota enforcement & UI display."},"url":{"type":"string","maxLength":80000,"description":"Public or signed URL for retrieving this file. Large varchar field stores the pointer to download/preview; may be signed or public."},"status":{"type":"string","description":"File status string: typically values like 'active', 'deleted', 'archived'.\n\nUsed to determine display and availability."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of file upload creation. ISO 8601 date-time string representing when the upload was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the file metadata."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp. Null if file is active."}},"required":["id","uploaded_by_member_id","original_filename","mime_type","file_size_bytes","url","status","created_at","updated_at"],"description":"Summary DTO for platform file uploads for grid/list operations.\n\nContains all key fields needed for overview lists, asset management, or moderation UIs. Reflects the schema definition of a file uploaded via the platform (e.g., images, avatars, banners, attachments). See community_platform_file_uploads for column details. Some fields like deleted_at may be null. Used for summarized API responses or admin grid listings."},"ICommunityPlatformMember.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_members","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the member in UUID format, as defined in the Prisma schema. This ID is used as the primary key for identifying platform users throughout the system. Used for referencing user across posts, comments, subscriptions, and moderation actions.\n\nID values are system-generated and never modifiable by users."},"email":{"type":"string","format":"email","description":"Unique email address of the member, as enforced by the Prisma schema. Used for login authentication, communication, and notifications. This email must be unique per user and is a key contact field. Display or update of the email address is restricted by role and privacy settings. Emails are never exposed to other users except as allowed by configuration or explicit privacy options.\n\nEmail uniqueness is strictly enforced at the database level, and format is validated upon creation and mutation."},"email_verified":{"type":"boolean","description":"Indicates whether the member has completed the email verification process. If false, user cannot participate in member-only platform actions, including posting, commenting, or voting.\n\nThe platform requires email verification as a prerequisite for participation to ensure user authenticity and compliance with business and regulatory policies."},"status":{"type":"string","description":"Current status of the member account, as defined in Prisma: examples include 'active', 'blocked', 'suspended', or other platform-defined states. The status directly controls account-enabled features and may be used for rate limiting, blocking, or audit tracking. Only admins or system workflows may change status. The status is indexed for backend query efficiency.\n\nA non-'active' status restricts or denies platform access, in accordance with business logic for bans, discipline, or account closure."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was first created. Set by the backend and never modifiable. Used for user journey analytics, account age calculations, and audit trails.\n\nAll member creation events are logged for audit and compliance review."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for account metadata, including profile edits, status changes, or verification events. Automatically set on any mutation and used in audit/compliance reports."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, this timestamp marks when the account was soft-deleted by the user or an admin. Null if the account is active. Soft-deleted accounts are considered inactive for all practical purposes, but data may be retained for audit, abuse, or compliance scenarios."},{"type":"null"}],"description":"Timestamp indicating soft deletion of the member account, or null if active. Used for compliance, audit retention, and recovery flows."}},"required":["id","email","email_verified","status","created_at","updated_at"],"description":"Summary object for a platform member, for use in search listings or relationship references. This DTO provides key identifying and status fields of a member, referencing the 'community_platform_members' table in the Prisma schema. Does not include sensitive authentication data or full profile details.\n\nUsed for admin and moderator listings, search results, and as a lightweight reference in relationships to comments, posts, or moderation tables. Contains only public and role-relevant identifying fields. Forbids password or authentication secret exposure."},"ICommunityPlatformModerator.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_moderators","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the community_platform_moderators record in UUID format. This ID is used as the primary key for the moderator assignment in the system. Not to be confused with the underlying member id."},"member_id":{"type":"string","format":"uuid","description":"Foreign key reference to the member record (community_platform_members.id) who owns this moderator assignment. Used for tying moderator-specific privileges back to member credentials and for ensuring only one active moderator per member per community.\n\nCritical for enforcing unique moderator assignments and permissions scoping within a community."},"community_id":{"type":"string","format":"uuid","description":"Foreign key reference to the target community (community_platform_communities.id) in which the moderator is active. Moderation privileges are scoped per community and this field strictly ties assignments to each community context."},"email":{"type":"string","format":"email","description":"Email address for the moderator, which must match the associated member email and be unique. Used for authentication and notification. Not public-facing."},"status":{"type":"string","description":"Moderator account status, such as 'active', 'suspended', or 'resigned'. Determines moderation powers within assigned communities and is used for compliance and permissions checks.\n\nThis field is enforced by business rules for role management and incident response."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this moderator assignment was created. Useful for auditing and workflow tracking. Set automatically by the backend."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the moderator record. Indicates when assignment details, permissions, or status were last changed."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp recording soft deletion or end of moderation assignment. Set at the time of resignation, removal, or role demotion."},{"type":"null"}],"description":"Indicates whether the moderator assignment has been soft deleted, removed, or resigned. Null if the record is active."}},"required":["id","member_id","community_id","email","status","created_at","updated_at"],"description":"Summary record for community moderator assignments as defined in the 'community_platform_moderators' table in the Prisma schema. This summary DTO provides key fields for listing, searching, and referencing moderator assignments in admin and moderation tools.\n\nExcludes privilege escalation details and confidential authentication material. Used in dashboards, member-moderator linking, and compliance audit workflows. Tied strictly to one community and one member per assignment, reflecting permissions logic and unique assignment enforcement at the DB level."},"ICommunityPlatformAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the administrator account.\n\nThis value is globally unique and is the primary key of the admin entity in the database."},"email":{"type":"string","format":"email","description":"Administrator's email address. Used for login and contact. Must be unique across all admin accounts."},"superuser":{"type":"boolean","description":"Indicates whether this admin has superuser/ultimate permissions across the platform.\n\nSuperuser admins can override platform-level controls and are permitted all admin-restricted actions. Non-superuser admins have more restricted rights and may be limited for compliance and audit separation of duties."},"status":{"type":"string","description":"Current status of the admin account. Typical values include 'active', 'suspended', or 'deleted'. Determines accessibility and participation in privileged workflows."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the admin account was created.\n\nThis is recorded in UTC and is not editable."},"updated_at":{"type":"string","format":"date-time","description":"The most recent time the admin's record was updated, such as status change or credential update.\n\nAlways in UTC. Used for audit and compliance tracking."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion, indicating when this admin was deactivated or scheduled for erasure.\n\nNull if active."}},"required":["id","email","superuser","status","created_at","updated_at"],"description":"Summary DTO for platform administrator users.\n\nIncludes basic information for listing or summary display of admin accounts.\n\nReferences the core admin fields: ID, email, superuser flag, status, and core audit timestamps for high-level compliance and account management."},"ICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the community (subreddit).\n\nThis is the primary key for cross-entity linkages and all business operations involving this community."},"name":{"type":"string","description":"The globally unique community name, as used in URLs and discovery. Must be case-insensitive and between 3-100 characters as enforced by business logic."},"title":{"type":"string","description":"Display title for the community, used in headers and search. Must be 3-100 characters."},"slug":{"type":"string","description":"Slug for SEO-friendly URLs, must be unique and safely used in paths. Usually a normalized version of the community name."},"status":{"type":"string","description":"Current operational status of the community, e.g., 'active', 'private', 'banned', 'archived'. Drives UI visibility and access."},"created_at":{"type":"string","format":"date-time","description":"Community creation timestamp, set by the platform when initially registered by its creator. UTC only."},"updated_at":{"type":"string","format":"date-time","description":"Last updated time for the community's settings, metadata, or moderation status. Used for synchronization and feedback to admins/moderators."}},"required":["id","name","title","slug","status","created_at","updated_at"],"description":"Summary DTO for communities (subreddits).\n\nThis presents high-level information for community listings/searches: unique id, name, SEO slug, operational status, and timestamps. These properties support feed listings, discovery/search, and basic moderation displays."},"ICommunityPlatformCommunityModeratorAssignment.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_community_moderator_assignments","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator assignment record.\n\nCorresponds to the 'id' column in community_platform_community_moderator_assignments. Used as the primary key for referencing this assignment from the API and for audit purposes."},"community_id":{"type":"string","format":"uuid","description":"Unique identifier of the community the moderation assignment is for.\n\nReferences the 'community_id' in community_platform_community_moderator_assignments table. This indicates which community this assignment applies to."},"member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who is assigned as a moderator.\n\nCorresponds to the 'member_id' in community_platform_community_moderator_assignments."},"role":{"type":"string","description":"Moderator role type assigned for this community (owner, moderator, trial_mod, etc.).\n\nRepresents the level or nature of moderation privileges and is used to determine scope within the community for this assignment. Derived from the 'role' field in community_platform_community_moderator_assignments."},"assigned_by_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the admin/moderator who assigned this moderation role.\n\nReferences 'assigned_by_id'. Critical for audit trails and role delegation review."},"start_at":{"type":"string","format":"date-time","description":"Timestamp representing when this moderator assignment started.\n\nDirectly from the 'start_at' column in the corresponding table. Used for tracking moderator tenure."},"end_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If set, represents when this moderator assignment ended (due to removal, resignation, or role change). Otherwise, null for active assignments.\n\nMapped from 'end_at' in the schema. Used to discern current vs. historical assignments."},"note":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short note providing reason or context for the assignment or its removal/resignation.\n\nOptional as in 'note' column, can contain additional information about assignment changes or related events."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the assignment record was created.\n\nMatches 'created_at' in the database and is used for record-keeping and timeline audit."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to this moderator assignment record.\n\nPulled from 'updated_at' column in the associated table."}},"required":["id","community_id","member_id","role","assigned_by_id","start_at","created_at","updated_at"],"description":"Summary view of a community moderator assignment for listings or administrative review.\n\nRepresents a minimal, efficient version of the community_platform_community_moderator_assignments entity, focusing on the core identifying fields, role metadata, and assignment timing. Used primarily in paginated list results, filter queries, and management dashboards where detailed profile or audit fields are not required. Follows the structure defined by the Prisma model's main columns, omitting navigation properties and heavy join data. This summary enables quick assessments of current and past moderation coverage, assignment validity, and compliance with community governance rules. Refer to the Prisma schema's comments for in-depth documentation per column. All properties present in this summary exist on the original table and are required for reconstruction of moderator listings and assignment workflows. Nullability for fields like 'end_at' and 'note' matches their nullable types in the table to allow for flexible, audit-friendly status tracking.\n\nSee also: https://github.com/wrtnlabs/autobe"},"ICommunityPlatformPost.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_posts","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the post.\n\nCorresponds to the 'id' column in community_platform_posts and is used as the reference key."},"community_platform_member_id":{"type":"string","format":"uuid","description":"UUID of the member who created the post.\n\nFrom the 'community_platform_member_id' column, this field is vital for author attribution and permission checks."},"community_platform_community_id":{"type":"string","format":"uuid","description":"UUID of the community the post belongs to.\n\nFrom 'community_platform_community_id', this field allows filtering and browsing by community context."},"title":{"type":"string","description":"Title of the post.\n\nDirectly from the 'title' column; maximum of 300 characters as per business validation. Used for display and full-text search."},"content_type":{"type":"string","description":"Type of post content, e.g., 'text', 'link', or 'image'.\n\nMapped from the 'content_type' column. Used to determine downstream rendering, validation, and workflow for post attachments."},"status":{"type":"string","description":"Publication/moderation status of the post (e.g., 'published', 'pending', 'removed', 'mod_queued').\n\nField 'status' defines whether the post is visible, queued for moderation, or hidden from standard views."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was created.\n\nMatches 'created_at' in the Prisma schema. Supports sorting by recency and audit trails."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the post was last substantively updated.\n\nTaken from 'updated_at'; useful for determining post freshness or recency of edits."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if set, otherwise null for active posts.\n\nMapped from 'deleted_at'. Indicates whether the post is active or archived/removed in the backend."}},"required":["id","community_platform_member_id","community_platform_community_id","title","content_type","status","created_at","updated_at"],"description":"Summary DTO representing minimal information about a post for efficient list display, search, and index operations.\n\nAggregates only the essential identifying, status, and metadata fields necessary for rendering post previews, leaderboards, and search results across the platform. Maps to the main columns of the community_platform_posts entity and omits heavy/nested content such as full bodies, complex relations, and linked attachments. Fields like 'deleted_at' are included as nullable for admin/mod coordination and to distinguish soft-deleted/archived entries. All type definitions match the database schema to ensure operational integrity and allow programmatic construction of optimized feed responses in sorted, filtered, or paginated lists."},"ICommunityPlatformComment.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_comments","description":"Summary DTO for a comment in the Reddit-like community platform, suitable for list and thread display. Based on the community_platform_comments Prisma schema. This type provides key information for rendering a list of comments under a post, thread, or profile, while omitting large body text and moderation workflow fields. This summary enables efficient comment lists, including relationship, context, and status references, without full nested detail. It is referenced by paginated comment list endpoints and should always include business-critical context for display components.\n\nThis schema is tightly aligned with business rules for thread rendering and profile history, and provides the minimal essential information needed for comment previews, pagination, and sorting in comment lists. All property descriptions are derived from the Prisma schema and business documentation.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment. Corresponds to the 'id' column in community_platform_comments. Required for lookup and thread construction."},"community_platform_post_id":{"type":"string","format":"uuid","description":"Identifier of the post to which this comment is attached. Used to link comments to their parent post context. Sourced from Prisma 'community_platform_post_id'."},"community_platform_member_id":{"type":"string","format":"uuid","description":"Identifier of the comment's author (member). Used for display and profile references. Sourced from Prisma 'community_platform_member_id'."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the immediate parent comment (if this is a reply). Enables threaded/nested comment UI rendering. Sourced from Prisma 'parent_id'. May be null if this comment is a root-level reply."},"nesting_level":{"type":"integer","description":"The current depth in the comment thread (root=1, limited per system config and business rules). Used for proper indenting and reply-limiting. Matches 'nesting_level' column in Prisma."},"status":{"type":"string","description":"Moderation/publication status of the comment (e.g., published, deleted, hidden, mod_queued, removed). Used for controlling display/UI. Derived from Prisma 'status' column."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was originally created. Allows for ordering and display of time annotations. Derived from 'created_at' column."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update or edit to the comment. Required for edit history, real-time updates, or 'edited' display. From 'updated_at'."}},"required":["id","community_platform_post_id","community_platform_member_id","nesting_level","status","created_at","updated_at"]},"ICommunityPlatformSubscriptionLog.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_subscription_logs","description":"Summary DTO representing a single subscription log event for a community platform member. Based on the community_platform_subscription_logs Prisma schema. Intended for use in paginated subscription event search views, user audit logs, or analytics dashboards for subscription/unsubscription event review. These summaries support filtering by event_type, time, and allow efficient display without exposing verbose event metadata.\n\nThis schema enables event timeline construction for users and admins wishing to view the sequence of subscription actions, including subscribe/unsubscribe workflow review. Each summary is directly mapped from a database record, ensuring all audit trail and analytic requirements are met.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the subscription log entry. Sourced from the primary key 'id' in community_platform_subscription_logs."},"member_id":{"type":"string","format":"uuid","description":"ID of the member whose subscription event this log covers. From 'member_id' column."},"community_id":{"type":"string","format":"uuid","description":"ID of the community impacted by this event. From 'community_id' column in Prisma."},"event_type":{"type":"string","description":"Describes the type of event: 'subscribe', 'unsubscribe', or other platform-defined values. Sourced from 'event_type' in Prisma and business requirement."},"event_at":{"type":"string","format":"date-time","description":"Timestamp of when the subscription or unsubscription occurred. Prisma column: 'event_at'."}},"required":["id","member_id","community_id","event_type","event_at"]},"ICommunityPlatformCommentVote.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_comment_votes","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment vote."},"community_platform_comment_id":{"type":"string","format":"uuid","description":"Unique identifier for the voted comment."},"community_platform_member_id":{"type":"string","format":"uuid","description":"Member who voted on the comment."},"vote_value":{"type":"integer","description":"Vote value (1 for upvote, -1 for downvote)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment vote was added."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last status update for this vote."}},"required":["id","community_platform_comment_id","community_platform_member_id","vote_value","created_at","updated_at"],"description":"Summary DTO for voting action on a comment. Used for paginated list display in IPageICommunityPlatformCommentVote.ISummary.\n\nFields included per summary conventions and from the community_platform_comment_votes table. No sensitive fields (such as internal system traces, revocation status, or user IP) are exposed in the summary variant."},"ICommunityPlatformVoteLog":{"type":"object","x-autobe-prisma-schema":"community_platform_vote_logs","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the vote log entry."},"community_platform_member_id":{"type":"string","format":"uuid","description":"Member whose action this vote log entry refers to."},"community_platform_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Post being voted on (if relevant). Nullable for comment votes."},"community_platform_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Comment being voted on (if relevant). Nullable for post votes."},"vote_type":{"type":"string","description":"\"post\" or \"comment\"—type of the vote action logged."},"vote_value":{"type":"integer","description":"Action performed: upvote (1), downvote (-1), or zero (0) for revocation."},"ip_fingerprint":{"oneOf":[{"type":"string","description":"Optional anonymized IP address or device fingerprint for abuse or anti-bot analysis."},{"type":"null"}],"description":"Optional anonymized IP address or device fingerprint for abuse or anti-bot analysis."},"user_agent":{"oneOf":[{"type":"string","description":"Optional user agent string for device/user analysis."},{"type":"null"}],"description":"Optional user agent string for device/user analysis."},"action_status":{"type":"string","description":"Result of attempted voting action (e.g., \"success\", \"duplicate\", \"revoked\", \"error\")."},"action_message":{"oneOf":[{"type":"string","description":"Human-readable message for the audit log, describing action outcome or error."},{"type":"null"}],"description":"Human-readable message for the audit log, describing action outcome or error."},"created_at":{"type":"string","format":"date-time","description":"Time this action was logged."}},"required":["id","community_platform_member_id","vote_type","vote_value","action_status","created_at"],"description":"Voting log record for post or comment actions. Contains auditing information for upvotes, downvotes, and revocations by platform members. Referenced from vote log page listings.\n\nAll fields mapped from the community_platform_vote_logs Prisma schema."},"ICommunityPlatformProfileBadge.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_profile_badges","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the profile badge.\n\nReferences PK column from community_platform_profile_badges. This value is used for badge management and API operations."},"community_platform_profile_id":{"type":"string","format":"uuid","description":"The ID of the profile that owns this badge.\n\nReferences FK column from community_platform_profile_badges. Allows linkage to community_platform_profiles."},"badge_type":{"type":"string","description":"Type or category of badge (e.g. 'gold', 'anniversary', 'community-contributor').\n\nClassification of the badge for display and analytics. Must follow platform badge taxonomy."},"badge_name":{"type":"string","description":"Display name of the badge. Human-readable string used in profile displays, achievements, and notifications."},"issued_at":{"type":"string","format":"date-time","description":"Timestamp for when the badge was granted to the user. Used for sorting, qualification, and timeline rendering."},"issuer":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) User, moderator, admin, or system that issued the badge. Display for audit and compliance if available."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Time badge was revoked, if removed. Null if active."},"revoke_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Reason the badge was revoked, if any."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the badge assignment record for historical/audit retention."}},"required":["id","community_platform_profile_id","badge_type","badge_name","issued_at"],"description":"Summary view of a badge earned by a user profile. Used for paginated profile badge listings or management dialogs.\n\nReferences the community_platform_profile_badges table. Includes all display and audit metadata relevant to summary context, but omits badge award linkage details."},"ICommunityPlatformProfileHistory":{"type":"object","x-autobe-prisma-schema":"community_platform_profile_histories","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the profile history record.\n\nPrimary key of community_platform_profile_histories. Used for audit, rollback, and change tracking."},"community_platform_profile_id":{"type":"string","format":"uuid","description":"Reference to the profile (FK) associated with this history event.\n\nAllows access to the related community_platform_profiles entity for context."},"username":{"type":"string","description":"Snapshot of display name (username) at time of the change. Used to track renames or display name changes for audit/compliance."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Snapshot of user biography/about at the time of change.\n\nMay be null if not set by user in this revision."},"avatar_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Snapshot of profile image/avatar URI as of the recorded change.\n\nNull if not set."},"display_email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Snapshot of visible display email at time of update.\n\nMay be null for privacy or unset."},"status_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Snapshot of user status (short mood/message) at time of change.\n\nMay be null if not present."},"is_public":{"type":"boolean","description":"User's privacy/visibility flag snapshot at the time of history event. Indicates if the profile was public (true) or private (false) for this revision."},"changed_by_actor":{"type":"string","description":"Username, admin label, or system for the actor causing this user profile history record.\n\nCritical for accountability in audit and rollback scenarios."},"change_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Reason for the change if provided (e.g., user request, moderation, system update). Explains context or event cause."},"changed_at":{"type":"string","format":"date-time","description":"When this change occurred and the snapshot was written. Used for timeline audits and rollback."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when profile history record was created (may be same as changed_at)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for profile history record. Indicates logical removal for GDPR/audit compliance."}},"required":["id","community_platform_profile_id","username","is_public","changed_by_actor","changed_at","created_at"],"description":"A full snapshot of user profile state at the time of a change (username, bio, status, privacy). Used for audit, rollback, and transparency per business requirements.\n\nBased on community_platform_profile_histories table. Essential for reviewing user-initiated or admin-driven modifications and enabling data retention policies."},"ICommunityPlatformReport.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_reports","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the content report as assigned in the community_platform_reports table. This value is essential for performing reference lookups, updates, and audit operations within moderation workflows."},"reporting_member_id":{"type":"string","format":"uuid","description":"The unique identifier of the member who submitted the report. Enables audit trail and compliance visibility. Pseudonymized for privacy."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"References the reported post (if the report targets a post). Nullable; will be null if the report targets a comment instead."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"References the reported comment if applicable (nullable). Only one of post_id or comment_id will be set for a given report."},"report_category_id":{"type":"string","format":"uuid","description":"Unique identifier for the report category, referencing moderation and policy reasons such as spam, abuse, or off-topic. Used to route, display, and audit the reason for reporting as linked to community_platform_report_categories."},"status":{"type":"string","description":"Current workflow status for the report. Typical values: pending, under_review, resolved, escalated, dismissed. Used to drive moderation flows and dashboard sorting."},"moderation_result":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Outcome/action taken by the moderator (optional, nullable). E.g., removed, warning, no_action, banned, escalated. Null if not reviewed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the report was originally filed, in RFC3339/ISO 8601 format. Used for audit, dashboard filters, and compliance timelines."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update or transition in the report's moderation workflow. Used for monitoring, sorting, and queue ordering."}},"required":["id","reporting_member_id","report_category_id","status","created_at","updated_at"],"description":"Summary representation of a user-submitted content report for moderation dashboards, abuse triage, or audit listing. This DTO surfaces the most essential fields of a report — identifiers, reason/category, status, and audit timestamps — while omitting sensitive fields or full free-form reasons. Mapped directly to the community_platform_reports schema for rapid moderation filtering, sorting, and decision making. Intended for array/list usage, not for full detail view.\n\nThis summary type enables effective moderators and admins to triage, sort, or batch-select reports for further action without loading heavy relational or audit trail detail. Only one of post_id or comment_id is set for any given report.\n\nReferences the moderation result as available but leaves free-form rationale and in-depth workflow for the detail DTO. Provides quick compliance view and operational oversight over the abuse/report pipeline."},"ICommunityPlatformModerationQueue.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_moderation_queues","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderation queue entry as stored in community_platform_moderation_queues. This is a stable ID for referencing moderation queue actions and audit trails."},"community_id":{"type":"string","format":"uuid","description":"Unique identifier of the target community for this moderation workflow, syncing with moderation assignment and dashboard scoping."},"report_id":{"type":"string","format":"uuid","description":"References the report triggering this moderation event. Links to a record in community_platform_reports, indicating what content is being processed."},"assigned_moderator_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Current moderator responsible for handling this queue entry, if assigned. Null if unassigned or in the general pool. Links to community_platform_moderators."},"status":{"type":"string","description":"Workflow state of the moderation queue entry. Enum: pending, in_progress, resolved, escalated. Used for triage, dashboard filtering, and operational flows."},"priority":{"type":"string","description":"Queue priority for sorting urgent tasks in moderation dashboards. Typical values: low, normal, high, urgent."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of queue entry creation (when the report was assigned or escalated). Used for aging reports and SLAs."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last workflow action on this moderation queue entry. Drives sorting by activity recency and resolution tracking."}},"required":["id","community_id","report_id","status","priority","created_at","updated_at"],"description":"Summary representation of a moderation queue entry in the community platform. Used for efficient display and management of open or in-progress abuse, spam, or dispute reports. This type surfaces only the identifiers, state, priority, and assignment fields, enabling dashboards to sort and filter open cases and assign moderation resources. Directly reflects the structure of the community_platform_moderation_queues table, joining essential foreign keys and workflow states for rapid triage.\n\nThis summary is used in moderation listings, workload dashboards, and admin oversight reports. Timestamps and priority fields support SLA and queue analytics; assignment and status are essential for case routing, load balancing, and handoff logic. Fields are subsetted to avoid excessive detail, aligning with batch processing flows and moderation team handoffs."},"ICommunityPlatformModerationAction.ISummary":{"type":"object","description":"Summary of a moderation action record from the community_platform_moderation_actions table. Provides a concise overview including action type, affected content, and timestamps for audit and list display. Does not contain full detail or sensitive notes. Actor IDs are omitted for non-privileged consumption.","x-autobe-prisma-schema":"community_platform_moderation_actions","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this moderation action (primary key of the moderation_actions table)."},"action_type":{"type":"string","description":"Type of moderation action (e.g., remove_post, warn_user, escalate)."},"target_post_id":{"type":"string","format":"uuid","description":"ID of targeted post (nullable if action is on a comment or ban)."},"target_comment_id":{"type":"string","format":"uuid","description":"ID of targeted comment (nullable if action is on a post or user)."},"report_id":{"type":"string","format":"uuid","description":"Reference to associated report (if any), nullable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action was recorded."}},"required":["id","action_type","created_at"]},"ICommunityPlatformEscalationLog.ISummary":{"type":"object","description":"Summary of an escalation log record from the community_platform_escalation_logs table. Shows essential details for queue/list display and audit: who originated the escalation, associated report, status, and timestamps. It omits sensitive fields, full workflow history, or moderator notes.","x-autobe-prisma-schema":"community_platform_escalation_logs","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the escalation log entry (primary key)."},"initiator_id":{"type":"string","format":"uuid","description":"UUID of the member or moderator who initiated the escalation."},"destination_admin_id":{"type":"string","format":"uuid","description":"UUID of the admin assigned to this escalation (nullable if not yet assigned)."},"report_id":{"type":"string","format":"uuid","description":"Reference to associated report triggering the escalation."},"escalation_reason":{"type":"string","description":"Free-form reason for why this escalation was created."},"status":{"type":"string","description":"Current status of the escalation (e.g., pending, in_review, resolved, closed)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of escalation log creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to this log."}},"required":["id","initiator_id","report_id","escalation_reason","status","created_at"]},"ICommunityPlatformKarmaLedger.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_ledgers","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the karma ledger entry.\n\nCorresponds to the 'id' field in the Prisma community_platform_karma_ledgers table. Used for referencing and managing specific ledger records throughout the platform."},"community_platform_member_id":{"type":"string","format":"uuid","description":"The member's unique identifier whom this karma ledger refers to.\n\nReferences 'community_platform_members.id'. Indicates which user this karma ledger affects, directly connecting to member profile, account, and engagement records."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The unique identifier of the scoped community for this karma ledger, or null for global platform karma.\n\nReferences 'community_platform_communities.id'. When null, this ledger applies globally to the member; when UUID, represents per-community karma management for advanced feature gating."},"current_karma":{"type":"integer","description":"The user's current karma value for this ledger (can be negative).\n\nHolds the live karma tally as of the latest voting or moderation adjustment, reflecting both positive and negative engagement. Directly restricts and enables karma-gated features per policy."},"feature_lock_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"If present, a textual reason why this karma ledger enforces a gating lockout (e.g., feature locked due to negative karma).\n\nExplains why certain features may be restricted for this member (such as inability to post or subscribe due to low karma) as defined by business policy."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp representing the last time the karma ledger entry was updated.\n\nUsed for cache invalidation and UI refreshes; updates after each karma modification event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of initial creation for this karma ledger entry.\n\nSupports auditing and compliance, representing when the entry was first started."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft-deleting the karma ledger, or null when active.\n\nSoft-delete support for compliance, allowing ledger records to be hidden or archived on user ban or account erasure. 'Null' when active; date-time when soft-deleted."}},"required":["id","community_platform_member_id","current_karma","updated_at","created_at"],"description":"Summary object of a karma ledger record for a member and optionally a community, used for paginated or indexed listings.\n\nReferences the 'community_platform_karma_ledgers' schema. Provides key information on a member's current karma, feature gating reason, and lifecycle timestamps. Used in lists, management dashboards, and feed gating checks."},"ICommunityPlatformKarmaPenalty.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_penalties","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the karma penalty record.\n\nReferences 'id' from the Prisma community_platform_karma_penalties table. Used for reliable referencing, detail lookups, and audit correction."},"community_platform_member_id":{"type":"string","format":"uuid","description":"ID of the member who received this penalty.\n\nCorresponds to 'community_platform_members.id' and supports both user restriction workflows and profile penalty displays."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional ID of the community where the penalty was applied or null for global/platform-wide penalties.\n\nUsed in community-scoped moderation and policy enforcement to distinguish between global and local penalties."},"penalty_type":{"type":"string","description":"Business type or category of penalty (e.g., 'deduction', 'suspension').\n\nReferenced in policy, enforcement, and compliance flows. Free-form string controlled by business enums. Example: 'suspension', 'deduction', 'temporary_lock'."},"penalty_value":{"type":"integer","description":"Numeric value of the penalty. Negative for deduction, positive for karma awards, or integer (duration) for some penalty types.\n\nRepresents the scale of the penalty in platform units (e.g., karma points removed or number of days suspended as per penalty_type)."},"penalty_reason":{"type":"string","description":"Human-readable reason for assigning this penalty.\n\nUsed in user notices, moderator dashboards, and audit logs to clarify why the penalty was assigned. Typically provided by the moderator or admin assigning the penalty."},"penalty_status":{"type":"string","description":"The status of this penalty ('active', 'expired', 'revoked' etc).\n\nBusiness enums that dictate if the penalty is still in effect, has been lifted, or was removed following an appeal."},"applied_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the penalty was applied.\n\nTracks when the penalty began. Used for analytics, appeal windows, and duration calculations."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"When the penalty expires or ends. Null for permanent penalties.\n\nTemporary penalties (such as time-based suspensions) will be set; permanent bans/deductions leave this as null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for record creation for compliance and audit.\n\nMay match 'applied_at' in most use cases; represents DB row initialization."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion of this penalty. Null for active/visible entries.\n\nSoft-deletes support transparency and regulatory retention."}},"required":["id","community_platform_member_id","penalty_type","penalty_value","penalty_reason","penalty_status","applied_at","created_at"],"description":"Summary object for a karma penalty, used in paginated listings.\n\nReferences the 'community_platform_karma_penalties' schema. Surface-level details for audit, member penalty dashboard, and profile restriction views. Includes key identifiers, status, reason, and business-relevant dates."},"ICommunityPlatformKarmaAward.ISummary":{"type":"object","x-autobe-prisma-schema":"community_platform_karma_awards","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the karma award record.\n\nThis value is a UUID primary key in the Prisma community_platform_karma_awards table. Used for referencing awards, database operations, and auditing badge-related actions."},"community_platform_member_id":{"type":"string","format":"uuid","description":"The platform member receiving this award.\n\nForeign key reference to community_platform_members.id. Identifies the user who earned this badge/award event. Used for assignment, retrieval, and analytic linkage."},"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Community in which this award is applicable (nullable).\n\nWhen set, references community_platform_communities.id, indicating the badge was earned in a specific community context. If null, the award is platform-wide. Essential for community-scoped achievement or status awards."},"award_type":{"type":"string","description":"Short label classifying the badge/award type, e.g., 'gold', 'founder', 'legendary'.\n\nUsed for badge display, grouping award statistics, and mapping UI icons. The set of allowed award_types is defined by platform business policy."},"award_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short description or justification for why the award was granted.\n\nHuman-created, limited-length strings explaining the event, e.g., 'Top contributor for October', 'Voted most helpful by peers'. Used in profile rendering or analytics. May be null if award_type alone suffices."},"event_time":{"type":"string","format":"date-time","description":"ISO8601 timestamp when the award was officially granted.\n\nIndicates when the user achieved the threshold, badge was issued, or similar event occurred."}},"required":["id","community_platform_member_id","award_type","event_time"],"description":"Summary view of a karma award or badge assigned to a platform member for achievements or milestone events.\n\nThis DTO is designed for award lists, feeds, or profile badge overviews. It includes the essential identifying and descriptive fields—award type, reasons, community (if scoped), and timestamps—used in profile displays and admin analytics.\n\nData is sourced directly from the Prisma community_platform_karma_awards table. Fields reflect the business logic of achievement tracking, milestone recognition, and per-community or global awards. Sensitive system metadata (such as deleted_at) is omitted for list/summary presentation."}}}}