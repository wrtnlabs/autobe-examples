{"operations":[{"specification":"This operation handles new user registration for the minimal Todo List application. It creates a new user record in the todo_list_users table, requiring a unique email and a password (stored securely as password_hash), as defined in the Prisma schema. The application enforces email uniqueness and secure password storage via hashing. Upon successful registration, the response includes authentication tokens for authorized API use. Account creation records the created_at and updated_at timestamps, with last_login remaining null until the first login. Only email and password fields are required for registration; extraneous data is not accepted. If the email is already in use, the endpoint returns a duplication error. This endpoint is public and does not require prior authentication. It is the entry point for all user access to Todo features, as all other interactions require a registered and authenticated user. Registration must meet email uniqueness and password policy constraints. Related operations include login (for authentication) and refresh (for token renewal).","authorizationType":"join","description":"This endpoint registers a new user in the todo_list_users table by accepting an email and password. The Prisma schema ensures email is unique, and password_hash is used to securely store the credential. Upon creation, created_at and updated_at are stamped with the current time. last_login remains null. Registration is mandatory for all further Todo operations, as the application does not support guest or admin roles. Security is enforced by hashing the password and checking for duplicate emails. Only core authentication fields are supported; no extra user data is accepted. The endpoint is public and does not require authentication. Error handling includes clear feedback on email duplication and password requirements. Related authentication endpoints are provided for login and token refresh.","summary":"Register new user in todo_list_users (user role) and return authentication tokens.","parameters":[],"requestBody":{"description":"Email and password for user registration (used to create todo_list_users entry).","typeName":"ITodoListUser.IJoin"},"responseBody":{"description":"Authentication tokens and user information after registration.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"This operation authenticates an existing user in the todo_list_users table using their email and password. Successful authentication requires finding a user with the provided email and matching the password to the stored password_hash using secure comparison. Upon login, the user's last_login field is updated to the current timestamp for audit purposes. If the credentials are invalid, the endpoint returns a generic error message (not indicating which field was incorrect, for security). On success, the user is issued JWT-based access and refresh tokens, with token payload scoped to the assigned user identity. This operation is a public authorization endpoint (no prior authentication required), and all further business operations require token authentication obtained here. It is rate-limited and logs authentication events as per schema capabilities. Related operations are join (for registration) and refresh (for token renewal).","authorizationType":"login","description":"Authenticates a user by verifying email against a record in todo_list_users and matching password using password_hash. Updates last_login to timestamp of successful authentication. Only users with valid credentials can access the system; failed attempts return generic errors to avoid credential enumeration. Tokens issued allow access to CRUD Todo operations. Email and password are the only accepted inputs. Security and auditing rely on accurate maintenance of last_login and secure credential comparison. Account must have been created via join. Related endpoint: refresh for token renewal.","summary":"Authenticate user in todo_list_users (user role) and return authentication tokens.","parameters":[],"requestBody":{"description":"User email and password for login authentication.","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authentication tokens and user identity after successful login.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"This operation provides JWT access token renewal for authenticated users of the todo_list_users table. A valid refresh token must be supplied (in accordance with security policy). The application verifies the refresh token corresponds to a valid user, and then issues a new set of tokens without requiring re-authentication with credentials. If the refresh token is invalid or expired, the system denies the operation. Refresh tokens are valid for up to 30 days and are securely managed per the authentication requirements. This endpoint supports seamless, secure session continuation, as outlined in the business requirements. last_login is not updated on token refresh, only on login. This is a public endpoint that only requires the refresh token. Related operations are join (register) and login (authenticate). All underlying user identification and security validation reference todo_list_users schema.","authorizationType":"refresh","description":"Renews access/refresh tokens for authenticated user by validating the provided refresh token. Maps to todo_list_users, but only accepts a valid refresh token for an active user session. Does not change last_login (which is only updated on login). All further application actions require an active, valid token issued via this endpoint or login. Security policy limits refresh token lifetime and scope. Error handling is strict for expired or invalid tokens. Related endpoints: join, login. No other data required except the refresh token.","summary":"Refresh JWT tokens for authenticated user in todo_list_users (user role).","parameters":[],"requestBody":{"description":"Refresh token to renew user session.","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"Newly issued authentication tokens for continued session.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"This operation provides authenticated users with a filtered and paginated list of their own Todo items. It operates on the todo_list_todos table and supports advanced searching, filtering by completion status, and sorting by creation or completion time, but always within the constraint that only the requesting user's Todos are accessible. The endpoint allows for minimal list options, with default ordering by most recently created. Search parameters such as completion status and optional text search on title and description are supported for a streamlined experience aligned with business requirements.","path":"/todoList/user/todos","method":"patch","summary":"Search and retrieve a paginated list of the authenticated user's Todo items.","description":"This operation enables an authenticated user to retrieve a filtered and paginated list of their Todo items from the system. The API allows searching by completion status (completed/incomplete/all), keyword filtering on the title and description, and supports ordering by creation date in descending order by default. The business logic strictly ensures that only Todos owned by the current user are included in the result, even if additional filter parameters are provided.\n\nPagination parameters such as page number and size control the volume of results returned. Search and filtering operate only within the authenticated user's dataset; attempts to access other users' Todos are blocked at the business logic layer. The response contains summary details for each Todo, including its id, title, description (if any), completed status, and timestamps for creation, last update, and completed time where relevant.\n\nSecurity is enforced by requiring a valid user token, and all business logic prevents enumeration or disclosure of other users' data. Error scenarios include authentication failure (session/token missing or expired), invalid pagination/filter parameters, and unexpected server errors.\n\nClients should use this endpoint to present Todo lists, filtered views, or search within the user's own tasks. Deeper details can be retrieved using the single-Todo endpoint if required.","parameters":[],"requestBody":{"description":"Search criteria including optional completion status, text keyword, and pagination options for filtering the user's Todos.","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of the authenticated user's Todo summary objects matching filter criteria.","typeName":"IPageITodoListTodo.ISummary"},"authorizationRoles":["user"],"name":"index","authorizationRole":"user","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information about a single Todo item belonging to the authenticated user. It operates on the todo_list_todos table and returns all available fields from the Todo, including title, optional description, completion status, and associated timestamps (creation, updated, completed). The endpoint strictly enforces user ownership; only the creator of the Todo can access its details. The response enables clients to load complete details of a specific Todo for display or further actions (such as update or delete).","path":"/todoList/user/todos/{todoId}","method":"get","summary":"Retrieve the full details of a single Todo item owned by the authenticated user.","description":"This operation returns comprehensive details about a specified Todo item, but only if it is owned by the requesting (authenticated) user. The endpoint is designed for use cases where a client application needs to present all attributes of a selected Todo, including id, title, optional description, completion status, timestamps for creation, last update, and completion (if applicable).\n\nAuthorization is strictly enforced: if the Todo does not exist or is not owned by the user, the operation returns a not-found or access denied error (without confirming the existence of others' Todos). This ensures privacy and data isolation in line with both business rules and security best practices. No modification occurs with this request. All fields correspond exactly to the todo_list_todos Prisma table definition, assuring that code and documentation stay in sync.\n\nClients should use this operation when a user wishes to view all attributes of a Todo, such as on a detail page or before editing. Error handling includes authentication failure, nonexistent or non-owned resource, and generic internal errors.","parameters":[{"name":"todoId","description":"Unique identifier of the Todo item to retrieve. Must refer to a Todo belonging to the authenticated user.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the Todo item if found and owned by the requesting user.","typeName":"ITodoListTodo"},"authorizationRoles":["user"],"name":"at","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"A Todo must be created before it can be retrieved by its unique ID."}]},{"specification":"This operation creates a new Todo item for the authenticated user. It works on the todo_list_todos table from the Prisma schema and allows users to provide a concise title (1-100 characters), an optional description (up to 500 characters), and automatically sets completion to false and timestamps to now. The operation strictly associates the Todo with the requesting user (ownership enforced by the backend using the user identity from the session/context). No system-generated fields such as deletion auditing are managed, and only essential fields defined in the Prisma schema (title, description, completed, created_at, etc.) are included.","description":"Allows an authenticated user to create a new Todo item to track a personal task. The title is required and must be meaningful, ranging from 1 to 100 characters; a description is optional but, if provided, cannot exceed 500 characters. When a Todo is created, the system sets the completion status to false and fills in current \"created_at\" and \"updated_at\" timestamps. The created Todo is associated with the requesting user for future ownership validation.\n\nSecurity checks require the user to be authenticated. The system uses the active user session for ownership linkage (todo_list_user_id). The backend enforces data validation as per the schema: empty or whitespace-only titles or overlength fields are not permitted. Description is optional but must respect the character limit when supplied.\n\nAll fields not present in the Prisma schema (such as deleted_at, restored_at, etc.) are intentionally excluded; only the essential minimal fields (title, description, created_at, user-owned) are included. In case of validation failures or attempted creation without proper authentication, the system returns an error response without exposing internal details.","summary":"Create a new Todo item owned by the authenticated user (todo_list_todos table).","parameters":[],"requestBody":{"description":"Information for creating a new Todo item, including title (mandatory), optional description (up to 500 chars); completion is set to false by default; all other fields default to system.","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"The complete Todo item with all persisted schema fields after creation, including owner, timestamps, and completion status.","typeName":"ITodoListTodo"},"authorizationType":null,"authorizationRole":"user","path":"/todoList/user/todos","method":"post","name":"create","prerequisites":[]},{"specification":"This operation updates an existing Todo item for the authenticated user, as identified by the Todo's unique id. Operates on the todo_list_todos table in the Prisma schema. Users can update the title (1-100 characters), optional description (up to 500 characters), and completion status (boolean). The updated_at timestamp will be set to the current time. Ownership and existence are enforced: only the owner can update the Todo. Fields not found in the schema are not accessible or modifiable.","description":"Allows the authenticated user to update the properties of an existing Todo item that they own. The user provides a new title (mandatory, 1-100 chars), an optional description (up to 500 chars), and/or a new completion status (boolean). The request is only validated and performed if the Todo exists and belongs to the requesting user. Upon successful update, the updated_at timestamp is refreshed to current time, and the completion state (and completed_at timestamp) is modified according to the change.\n\nAll inputs are strictly validated: title cannot be empty or exceed the character limit; description is optional but must respect the 500 character restriction; completed must be boolean. Attempting to modify a Todo not owned by the user, or not in the database, results in a not found or forbidden error (no information about other users' data is leaked). Only the fields defined in the todo_list_todos schema are updatable; no hidden or system fields are present or updatable.\n\nOnly authenticated users can call this operation. No batch or cross-user updates are supported. Any field provided must satisfy minimal field constraints. Error messages are business-contextual and avoid leaking privileged information.","summary":"Update an existing Todo item, verifying ownership and field validation (todo_list_todos table).","parameters":[{"name":"todoId","description":"Unique identifier (UUID) of the Todo item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in an owned Todo item: must include new title (1-100 chars), optional description (up to 500 chars), and/or completion status; updated_at is system-set.","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"The full, updated Todo item resource reflecting all current schema fields after the change.","typeName":"ITodoListTodo"},"authorizationType":null,"authorizationRole":"user","path":"/todoList/user/todos/{todoId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"A Todo item must exist before it can be updated. Creating the Todo ensures that the referenced todoId belongs to the authenticated user and has all required fields initialized."}]},{"specification":"This operation permanently deletes a specific Todo item identified by its unique ID from the todo_list_todos table. It enforces strict ownership, allowing only the authenticated user who owns the Todo to perform this action. This ensures compliance with the application's business rules and data lifecycle policies, as described in both the functional requirements and the Prisma schema.\n\nThe Todo deletion process validates that the Todo exists and is owned by the requesting user, preventing access to or deletion of Todos belonging to other users. The operation does not perform a soft delete; the record is removed completely from the database without retention.\n\nThis endpoint is directly associated with the todo_list_todos table. Security is enforced by requiring user authentication and verifying Todo ownership before deletion. No request body is needed, and a successful operation returns no data. If the Todo ID does not exist or does not belong to the user, a standard 'not found or forbidden' response will be returned, protecting user privacy.\n\nRelated operations include creation (POST /todos), retrieval (GET/PATCH /todos), and update (PUT /todos/{todoId}) endpoints. All other manipulations of Todo items are governed by their respective endpoints, while this operation is solely responsible for permanent removal. This operation ensures that user data is only accessible and modifiable by its rightful owner, and no batch deletions are permitted as per business constraints.","description":"Permanently delete a specific Todo item from the system, ensuring that only the authenticated owner can remove their own Todo. The operation begins by confirming the user's authentication status and validating that the Todo exists and is owned by the requester.\n\nIn compliance with the Prisma schema, each Todo is identified by a UUID, and deletion is allowed only if the requesting user's ID matches the todo_list_user_id foreign key of the target record. No soft-deletion or archival is performed; the Todo is removed from the database entirely.\n\nError handling is strict—if the Todo does not exist, or if ownership validation fails, the operation returns a not-found response to avoid leaking any information about other users' Todos. The endpoint does not accept a request body, nor does it return a data payload on success. Operation is idempotent: repeated deletion requests for the same nonexistent Todo will always return the same error message.\n\nSecurity is enforced by requiring the \"user\" role. Appropriate audit logging for data deletion should be considered at the service provider layer, in accordance with non-functional requirements and business rules.","summary":"Permanently delete a Todo item from the user's list (todo_list_todos table).","parameters":[{"name":"todoId","description":"The unique identifier of the Todo item to be deleted (UUID format)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","name":"erase","path":"/todoList/user/todos/{todoId}","method":"delete","prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"Todo item must be created before it can be deleted; ensures the Todo with the specified ID exists for the authenticated user."}]}],"components":{"authorization":[{"name":"user","description":"A registered user who can authenticate via API and manage their own Todo items, including creating, viewing, updating, and deleting their own tasks. Cannot access other users’ Todos or admin functions.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListUser.IJoin":{"type":"object","x-autobe-prisma-schema":"todo_list_users","properties":{"email":{"type":"string","format":"email","description":"Unique user email address for registration and login. Must be in valid email format. This field is required and serves as a unique identifier in the minimal Todo List application. Email uniqueness is enforced as per the business rules and Prisma schema constraints.\n\nReference: Prisma todo_list_users.email column. Email is never exposed or used for any purpose other than authentication and account recovery."},"password":{"type":"string","minLength":8,"maxLength":72,"description":"Plain text password supplied for user registration. Must be between 8 and 72 characters for both security and technical compliance, even though only the hash is stored in the database. This field is used for login and never persisted in plain form. Password complexity (minimum length) is enforced by business rules.\n\nReference: Only a password_hash is stored in Prisma schema (column: password_hash), but plain password is required during registration and login. The application handles hashing before storage. Always treat as confidential input."}},"required":["email","password"],"description":"User registration DTO for minimal Todo List. Used as the request body in the /auth/user/join endpoint. Includes only the minimum required authentication fields—email and password. Extraneous fields are ignored. Upon submission, email is checked for uniqueness and password is securely hashed before storage.\n\nThis type directly corresponds to user registration use cases and enforces business constraints from the requirements analysis and Prisma schema for todo_list_users."},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the registered user in the todo_list_users table. Returned after successful authentication or registration. Used as primary key for associating Todos and session information.\n\nReference: Prisma todo_list_users.id column, which serves as the user's identity throughout the application."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response DTO returned after user registration, login, or token refresh. Contains both the unique user ID (corresponding to todo_list_users.id in the Prisma schema) and the issued authentication tokens for secure session use. All operations after authentication require this token.\n\nFulfills minimal business and security requirements for session/auth response as described in the requirements documentation and schema definitions."},"ITodoListUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for login.\n\nRequired for authentication and serves as the unique identifier within the system. Must comply with RFC 5322 specifications for email format. Enforced uniqueness in the underlying database by the todo_list_users table, preventing duplicate accounts."},"password":{"type":"string","minLength":8,"maxLength":72,"description":"User's secret password in plain text (for login only, never stored directly).\n\nRequired for login; will be hashed before comparison to the password_hash field. Password must meet minimum length constraints and is subject to password policy checks. Not returned in responses or logs for security reasons."}},"required":["email","password"],"description":"Login request payload for authenticating a user in the Todo List application.\n\nContains both user email (unique identifier) and plain text password (never hashed).\n\nThis schema reflects core authentication logic for the login endpoint referencing the todo_list_users Prisma model. Entry is required to begin any authenticated session. Both fields undergo validation and strict type enforcement."},"ITodoListUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token value issued upon previous authentication, used to obtain new JWT access/refresh tokens.\n\nMust be presented as an opaque token string issued by the backend and managed securely on the client. Token is validated by the system and, if valid and unexpired, a new access/refresh token pair is granted. Required for token renewal workflows. Never stored in plain text on the server side."}},"required":["refresh_token"],"description":"Refresh token request body for obtaining a new access token in the Todo List application.\n\nThis schema is required for session extension via the /auth/user/refresh endpoint and is validated against issued refresh tokens. Only a valid, non-expired refresh_token will result in new JWT credentials."},"ITodoListTodo.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Current page number for Todo list pagination. Must be a positive integer (1-based). Allows clients to request a specific page of results. Default is usually 1 if not provided."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of Todo items per page for paginated listing. Must be between 1 and 100. Controls result volume to avoid overwhelming clients or saturating system resources. Default is typically 20-50 if not provided."},"completed":{"type":"boolean","description":"Optional filter to only return Todos that are completed (true) or not completed (false). If omitted, returns all Todos regardless of completion status."},"search":{"type":"string","maxLength":100,"description":"Optional case-insensitive search string to match against the title or description of the Todo. Allows quick keyword filtering. Search is performed only within the user's own Todos. Maximum 100 characters; longer values are truncated or rejected."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sorting field for Todo list. Acceptable values: 'created_at' (default, newest first), or 'completed_at' (when filtering by completion). Determines primary order of results."},{"const":"completed_at","description":"Sorting field for Todo list. Acceptable values: 'created_at' (default, newest first), or 'completed_at' (when filtering by completion). Determines primary order of results."}],"description":"Sorting field for Todo list. Acceptable values: 'created_at' (default, newest first), or 'completed_at' (when filtering by completion). Determines primary order of results."},"order":{"oneOf":[{"const":"asc","description":"Sort direction for Todo list. Use 'desc' for descending order (newest first) or 'asc' for ascending order. Default is 'desc'."},{"const":"desc","description":"Sort direction for Todo list. Use 'desc' for descending order (newest first) or 'asc' for ascending order. Default is 'desc'."}],"description":"Sort direction for Todo list. Use 'desc' for descending order (newest first) or 'asc' for ascending order. Default is 'desc'."}},"required":[],"description":"Search and filter criteria for listing the authenticated user's Todo items. All filtering is performed only within the list of Todos owned by the authenticated user. Supports pagination, completion status filtering, keyword search, and result sorting. No external or global Todo data is accessible."},"ITodoListTodo":{"type":"object","x-autobe-prisma-schema":"todo_list_todos","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for this Todo item. Assigned as a UUID string upon creation in the database. Required for unique identification and client operations referencing this Todo."},"todo_list_user_id":{"type":"string","format":"uuid","description":"The owner's user ID (foreign key), referencing the todo_list_users.id field. Restricts Todo item to its creator. Set by backend according to the authenticated user context and not modifiable via API."},"title":{"type":"string","minLength":1,"maxLength":100,"description":"Concise summary/title of the task. Required; must be 1-100 UTF-8 characters. Cannot be empty, blank, or whitespace-only. Business logic enforces this constraint at every create/update operation."},"description":{"oneOf":[{"type":"string","maxLength":500,"description":"Optional further details of the task (may be empty). Maximum 500 characters. Null or omitted if not provided; always validated for max length on create/update."},{"type":"null"}],"description":"Optional detailed description of the Todo item, or null if not provided. Maximum 500 characters. Never required."},"completed":{"type":"boolean","description":"Task completion status. false if incomplete, true if complete. All Todos are created with this value as false by default (system-enforced). May be toggled by user at any time."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of Todo creation, in ISO8601 date-time format with timezone. Assigned by backend at creation and never updated."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last modification of this Todo (including completion toggle, title update, or description change). Updated automatically on every change."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the Todo was marked complete, in ISO8601 date-time format with timezone, or null if not completed. Automatically set when completed status flips to true, cleared when set back to false."}},"required":["id","todo_list_user_id","title","completed","created_at","updated_at"],"description":"Represents a single task/todo owned by a user. Each record contains its unique ID, creator (user) ID, title, optional description, completion state, timestamps for creation, update, and potential completion. All access, updates, and deletions are scoped to the owning user and enforced by business logic and schema constraints. No external references or system-generated fields (such as 'deleted_at') are present in this schema."},"ITodoListTodo.ICreate":{"type":"object","x-autobe-prisma-schema":"todo_list_todos","properties":{"title":{"type":"string","minLength":1,"maxLength":100,"description":"Concise summary of the task. Required. Must be between 1 and 100 characters. This field is validated for non-empty, meaningful content as described in the Business Rules. Upon creation, a Todo's title provides its primary identification. Directly corresponds to the 'title' column in the prisma schema for todo_list_todos."},"description":{"oneOf":[{"type":"string","maxLength":500},{"type":"null"}],"description":"Optional detailed description of the task, up to 500 characters. Can be null if not provided. Used to capture additional details about the Todo, but not required. Directly corresponds to the 'description' column in the prisma schema for todo_list_todos."}},"required":["title"],"description":"Create DTO for a Todo item. This schema defines the information required to register a new task in the Todo list system.\n\n- Only the fields present in the Prisma model are accepted.\n- 'title': required, validated as a non-empty string with maximum length enforcement.\n- 'description': optional, up to 500 characters, or omitted/null. Client should omit or send null if not used.\n- Ownership, status, and audit/timestamp fields are set by the system, not the client.\n\nThis schema corresponds to the Prisma table 'todo_list_todos', and is utilized in POST operations for creating new Todo items for an authenticated user."},"ITodoListTodo.IUpdate":{"type":"object","x-autobe-prisma-schema":"todo_list_todos","properties":{"title":{"type":"string","minLength":1,"maxLength":100,"description":"Updated concise summary of the task. If provided, must be between 1 and 100 characters; validated for content and length as in creation. This field is optional in update. Directly references the 'title' column in todo_list_todos."},"description":{"oneOf":[{"type":"string","maxLength":500},{"type":"null"}],"description":"Optional new description of the task. If provided, must not exceed 500 characters. Can be null to remove the description. Optional in updates. Directly maps to 'description' in todo_list_todos."},"completed":{"type":"boolean","description":"Updated completion status for the Todo item. If provided, must be a boolean value. Indicates whether the Todo is marked as done. Business rule: only the owner can toggle this status. Prisma column: 'completed'."}},"required":[],"description":"Update DTO for a Todo item. This interface is used for PATCH/PUT requests for an existing Todo belonging to the authenticated user.\n\n- All fields optional; if provided, must satisfy business validation (title: 1-100 chars, description: up to 500 chars, completed: boolean).\n- Fields not present in request are left unchanged.\n- Ownership, id, audit, and timestamps are not changeable via this DTO.\n\nDirectly references the corresponding Prisma schema 'todo_list_todos'. This type should be used in all update (PUT/PATCH) operations for a user's existing Todos."},"ITodoListTodo.ISummary":{"type":"object","x-autobe-prisma-schema":"todo_list_todos","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the Todo item. This field is the primary key in the todo_list_todos Prisma table. It allows for precise referencing, updating, and deletion of Todo records. The value is automatically generated as a UUID when the Todo is created and should never be modified by the client.\n\nBusiness context: Enables consistent, unambiguous identification of each Todo resource for authenticated users."},"title":{"type":"string","maxLength":100,"minLength":1,"description":"The concise summary or name of the Todo. As per the business requirements and Prisma schema, the title is required, must contain at least 1 character and no more than 100. It cannot be empty or whitespace. Used for quick identification and list display of Todos.\n\nValidation: Ensures all created and updated records meet length and non-empty constraints as mandated by business rules. The application must enforce UTF-8 string compliance."},"description":{"oneOf":[{"type":"string","maxLength":500,"description":"Optional extended details for the Todo item, up to 500 characters. This property is nullable and might not be provided. It is not required for basic Todo creation or update, but if supplied, must not exceed the maximum length constraint defined in the Prisma schema.\n\nIf null or omitted, the Todo appears as having no additional notes or comments."},{"type":"null"}],"description":"Optional extended details for the Todo item, up to 500 characters. This property is nullable and might not be provided. It is not required for basic Todo creation or update, but if supplied, must not exceed the maximum length constraint defined in the Prisma schema.\n\nIf null or omitted, the Todo appears as having no additional notes or comments."},"completed":{"type":"boolean","description":"Indicates whether the Todo has been marked complete by the user. A value of true means the task has been finished, while false means it is still active/incomplete. As defined in the Prisma schema, the default value is false upon creation, and can only be toggled by the Todo owner.\n\nBusiness rule: This is a strictly boolean field, never nullable, and is used for filtering, searching, and statistics functions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the Todo was initially created. This uses the ISO 8601 date-time format with timezone as defined by the Prisma schema. It is set by the system when the record is inserted and is never modified thereafter.\n\nPurpose: Used for list ordering (most recent first) and for audit/history features."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to this Todo record, including title/description changes or completion status toggles. Populated and maintained by the system, never by client. ISO 8601 format with timezone.\n\nSupports auditability and enables clients to refresh/update only changed items."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of when the Todo was completed, according to the Prisma schema (nullable field). If the item is incomplete, this should be null. If completed, this records the moment status switched to complete.\n\nDisplayed to the user where a completed/archived date is relevant."},{"type":"null"}],"description":"Timestamp of when the Todo was completed, according to the Prisma schema (nullable field). If the item is incomplete, this should be null. If completed, this records the moment status switched to complete.\n\nDisplayed to the user where a completed/archived date is relevant."}},"required":["id","title","completed","created_at","updated_at"],"description":"Minimal summary object for a Todo item, strictly conforming to the todo_list_todos Prisma model. Optimized for list views and search results. Contains only essential fields for UI display and action, omitting large or sensitive fields.\n\nIncludes id (UUID), title (required), optional description, completion status (boolean), and audit timestamps (created_at, updated_at, completed_at). All fields and business rules reference the todo_list_todos schema and application validation requirements.\n\nBusiness context: Serves as a safe, fast-to-render representation of a Todo for authenticated users' own data only."}}}}