import { tags } from "typia";

/**
 * Represents a single task/todo owned by a user. Each record contains its
 * unique ID, creator (user) ID, title, optional description, completion state,
 * timestamps for creation, update, and potential completion. All access,
 * updates, and deletions are scoped to the owning user and enforced by business
 * logic and schema constraints. No external references or system-generated
 * fields (such as 'deleted_at') are present in this schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodo = {
  /**
   * Primary key identifier for this Todo item. Assigned as a UUID string upon
   * creation in the database. Required for unique identification and client
   * operations referencing this Todo.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The owner's user ID (foreign key), referencing the todo_list_users.id
   * field. Restricts Todo item to its creator. Set by backend according to
   * the authenticated user context and not modifiable via API.
   */
  todo_list_user_id: string & tags.Format<"uuid">;

  /**
   * Concise summary/title of the task. Required; must be 1-100 UTF-8
   * characters. Cannot be empty, blank, or whitespace-only. Business logic
   * enforces this constraint at every create/update operation.
   */
  title: string & tags.MinLength<1> & tags.MaxLength<100>;

  /**
   * Optional detailed description of the Todo item, or null if not provided.
   * Maximum 500 characters. Never required.
   */
  description?: (string & tags.MaxLength<500>) | null | undefined;

  /**
   * Task completion status. false if incomplete, true if complete. All Todos
   * are created with this value as false by default (system-enforced). May be
   * toggled by user at any time.
   */
  completed: boolean;

  /**
   * Timestamp of Todo creation, in ISO8601 date-time format with timezone.
   * Assigned by backend at creation and never updated.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last modification of this Todo (including completion
   * toggle, title update, or description change). Updated automatically on
   * every change.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the Todo was marked complete, in ISO8601 date-time format
   * with timezone, or null if not completed. Automatically set when completed
   * status flips to true, cleared when set back to false.
   */
  completed_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListTodo {
  /**
   * Search and filter criteria for listing the authenticated user's Todo
   * items. All filtering is performed only within the list of Todos owned by
   * the authenticated user. Supports pagination, completion status filtering,
   * keyword search, and result sorting. No external or global Todo data is
   * accessible.
   */
  export type IRequest = {
    /**
     * Current page number for Todo list pagination. Must be a positive
     * integer (1-based). Allows clients to request a specific page of
     * results. Default is usually 1 if not provided.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of Todo items per page for paginated listing. Must be between
     * 1 and 100. Controls result volume to avoid overwhelming clients or
     * saturating system resources. Default is typically 20-50 if not
     * provided.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Optional filter to only return Todos that are completed (true) or not
     * completed (false). If omitted, returns all Todos regardless of
     * completion status.
     */
    completed?: boolean | undefined;

    /**
     * Optional case-insensitive search string to match against the title or
     * description of the Todo. Allows quick keyword filtering. Search is
     * performed only within the user's own Todos. Maximum 100 characters;
     * longer values are truncated or rejected.
     */
    search?: (string & tags.MaxLength<100>) | undefined;

    /**
     * Sorting field for Todo list. Acceptable values: 'created_at'
     * (default, newest first), or 'completed_at' (when filtering by
     * completion). Determines primary order of results.
     */
    sort_by?: "created_at" | "completed_at" | undefined;

    /**
     * Sort direction for Todo list. Use 'desc' for descending order (newest
     * first) or 'asc' for ascending order. Default is 'desc'.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Create DTO for a Todo item. This schema defines the information required
   * to register a new task in the Todo list system.
   *
   * - Only the fields present in the Prisma model are accepted.
   * - 'title': required, validated as a non-empty string with maximum length
   *   enforcement.
   * - 'description': optional, up to 500 characters, or omitted/null. Client
   *   should omit or send null if not used.
   * - Ownership, status, and audit/timestamp fields are set by the system, not
   *   the client.
   *
   * This schema corresponds to the Prisma table 'todo_list_todos', and is
   * utilized in POST operations for creating new Todo items for an
   * authenticated user.
   */
  export type ICreate = {
    /**
     * Concise summary of the task. Required. Must be between 1 and 100
     * characters. This field is validated for non-empty, meaningful content
     * as described in the Business Rules. Upon creation, a Todo's title
     * provides its primary identification. Directly corresponds to the
     * 'title' column in the prisma schema for todo_list_todos.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<100>;

    /**
     * Optional detailed description of the task, up to 500 characters. Can
     * be null if not provided. Used to capture additional details about the
     * Todo, but not required. Directly corresponds to the 'description'
     * column in the prisma schema for todo_list_todos.
     */
    description?: (string & tags.MaxLength<500>) | null | undefined;
  };

  /**
   * Update DTO for a Todo item. This interface is used for PATCH/PUT requests
   * for an existing Todo belonging to the authenticated user.
   *
   * - All fields optional; if provided, must satisfy business validation
   *   (title: 1-100 chars, description: up to 500 chars, completed:
   *   boolean).
   * - Fields not present in request are left unchanged.
   * - Ownership, id, audit, and timestamps are not changeable via this DTO.
   *
   * Directly references the corresponding Prisma schema 'todo_list_todos'.
   * This type should be used in all update (PUT/PATCH) operations for a
   * user's existing Todos.
   */
  export type IUpdate = {
    /**
     * Updated concise summary of the task. If provided, must be between 1
     * and 100 characters; validated for content and length as in creation.
     * This field is optional in update. Directly references the 'title'
     * column in todo_list_todos.
     */
    title?: (string & tags.MinLength<1> & tags.MaxLength<100>) | undefined;

    /**
     * Optional new description of the task. If provided, must not exceed
     * 500 characters. Can be null to remove the description. Optional in
     * updates. Directly maps to 'description' in todo_list_todos.
     */
    description?: (string & tags.MaxLength<500>) | null | undefined;

    /**
     * Updated completion status for the Todo item. If provided, must be a
     * boolean value. Indicates whether the Todo is marked as done. Business
     * rule: only the owner can toggle this status. Prisma column:
     * 'completed'.
     */
    completed?: boolean | undefined;
  };

  /**
   * Minimal summary object for a Todo item, strictly conforming to the
   * todo_list_todos Prisma model. Optimized for list views and search
   * results. Contains only essential fields for UI display and action,
   * omitting large or sensitive fields.
   *
   * Includes id (UUID), title (required), optional description, completion
   * status (boolean), and audit timestamps (created_at, updated_at,
   * completed_at). All fields and business rules reference the
   * todo_list_todos schema and application validation requirements.
   *
   * Business context: Serves as a safe, fast-to-render representation of a
   * Todo for authenticated users' own data only.
   */
  export type ISummary = {
    /**
     * Unique identifier for the Todo item. This field is the primary key in
     * the todo_list_todos Prisma table. It allows for precise referencing,
     * updating, and deletion of Todo records. The value is automatically
     * generated as a UUID when the Todo is created and should never be
     * modified by the client.
     *
     * Business context: Enables consistent, unambiguous identification of
     * each Todo resource for authenticated users.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The concise summary or name of the Todo. As per the business
     * requirements and Prisma schema, the title is required, must contain
     * at least 1 character and no more than 100. It cannot be empty or
     * whitespace. Used for quick identification and list display of Todos.
     *
     * Validation: Ensures all created and updated records meet length and
     * non-empty constraints as mandated by business rules. The application
     * must enforce UTF-8 string compliance.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<100>;

    /**
     * Optional extended details for the Todo item, up to 500 characters.
     * This property is nullable and might not be provided. It is not
     * required for basic Todo creation or update, but if supplied, must not
     * exceed the maximum length constraint defined in the Prisma schema.
     *
     * If null or omitted, the Todo appears as having no additional notes or
     * comments.
     */
    description?: (string & tags.MaxLength<500>) | null | undefined;

    /**
     * Indicates whether the Todo has been marked complete by the user. A
     * value of true means the task has been finished, while false means it
     * is still active/incomplete. As defined in the Prisma schema, the
     * default value is false upon creation, and can only be toggled by the
     * Todo owner.
     *
     * Business rule: This is a strictly boolean field, never nullable, and
     * is used for filtering, searching, and statistics functions.
     */
    completed: boolean;

    /**
     * Timestamp for when the Todo was initially created. This uses the ISO
     * 8601 date-time format with timezone as defined by the Prisma schema.
     * It is set by the system when the record is inserted and is never
     * modified thereafter.
     *
     * Purpose: Used for list ordering (most recent first) and for
     * audit/history features.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the most recent update to this Todo record, including
     * title/description changes or completion status toggles. Populated and
     * maintained by the system, never by client. ISO 8601 format with
     * timezone.
     *
     * Supports auditability and enables clients to refresh/update only
     * changed items.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of when the Todo was completed, according to the Prisma
     * schema (nullable field). If the item is incomplete, this should be
     * null. If completed, this records the moment status switched to
     * complete.
     *
     * Displayed to the user where a completed/archived date is relevant.
     */
    completed_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
