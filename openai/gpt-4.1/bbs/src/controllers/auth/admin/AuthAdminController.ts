import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { IDiscussionBoardAdmin } from "../../../api/structures/IDiscussionBoardAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Registers a new discussion board admin in the discussion_board_admins table
   * and issues JWT tokens (IDiscussionBoardAdmin.IAuthorized).
   *
   * The purpose of this API is to allow the creation of new administrator
   * accounts for the discussion board, providing privileged access for future
   * administration and moderation. It writes to the discussion_board_admins
   * Prisma DB table, requiring unique email, username, and securely hashed
   * password (password_hash), while setting email_verified to false until after
   * email verification workflow. The operation also sets
   * registration_completed_at, created_at, and updated_at according to
   * onboarding and audit requirements. Security is critical: only permitted
   * fields are exposed and returned; the password must be hashed before saving;
   * duplicate emails/usernames are prevented and properly handled by unique
   * constraints. Upon successful completion, the system issues JWT tokens
   * encapsulated in the IDiscussionBoardAdmin.IAuthorized DTO, containing
   * access and refresh tokens as well as minimal admin profile data for session
   * management. This operation works in concert with login and refresh
   * operations, and requires email verification before an admin may sign in
   * fully. Error handling covers duplicate entries, weak passwords, or
   * validation issues, as defined in schema and requirements. Do not expose
   * sensitive password details in responses.
   *
   * @param connection
   * @param body Information required for admin registration: email, username,
   *   password (to be hashed), etc. Follows schema:
   *   IDiscussionBoardAdmin.ICreate.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IDiscussionBoardAdmin.ICreate,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticates a discussion board admin and issues access/refresh JWT tokens
   * (IDiscussionBoardAdmin.IAuthorized).
   *
   * This API operation allows a registered administrator to log in to the
   * discussion board by verifying their email and password. It reads from the
   * discussion_board_admins table, ensuring that credentials match the unique
   * email and the securely stored password_hash, and that email_verified is
   * true and deleted_at is NULL. On success, it generates JWT tokens
   * encapsulated in the IDiscussionBoardAdmin.IAuthorized DTO for session
   * management, conforming to security best practices as described in the
   * schema. Login attempts for non-existent accounts, unverified email
   * addresses, or incorrect credentials are safely rejected and loggable for
   * audit and failed login tracking. This operation is essential to the admin
   * authentication workflow and closely tied to registration and token refresh
   * endpoints. No sensitive password data is ever returned.
   *
   * @param connection
   * @param body Admin login credentials: email and password (to be hashed and
   *   checked). Follows schema: IDiscussionBoardAdmin.ILogin.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IDiscussionBoardAdmin.ILogin,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refreshes JWT access/refresh tokens for an authenticated admin
   * (IDiscussionBoardAdmin.IAuthorized).
   *
   * This API operation allows a previously authenticated admin to refresh their
   * JWT session tokens without re-entering a password, provided they have a
   * valid refresh token. It validates the supplied refresh token against
   * current admin records in discussion_board_admins (deleted_at must be NULL,
   * account not soft-deleted), and issues new tokens conforming to security and
   * business policy (30-minute access token/30-day refresh window). Result is a
   * new IDiscussionBoardAdmin.IAuthorized DTO for continued access. Failed or
   * expired refresh tokens result in error responses; all refresh actions are
   * logged for audit. Integrates with join and login flows in the overall
   * authentication tree.
   *
   * @param connection
   * @param body Payload containing necessary refresh token or relevant
   *   information. Follows schema: IDiscussionBoardAdmin.IRefresh.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IDiscussionBoardAdmin.IRefresh,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
