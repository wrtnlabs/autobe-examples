import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthGuestJoin } from "../../../providers/postAuthGuestJoin";
import { postAuthGuestRefresh } from "../../../providers/postAuthGuestRefresh";

import { IDiscussionBoardGuest } from "../../../api/structures/IDiscussionBoardGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Register a temporary guest session for unauthenticated user
   * (discussion_board_guests table).
   *
   * This endpoint allows a new guest session to be created by provisioning an
   * entry in the discussion_board_guests table. The primary purpose is to track
   * anonymous session or device activity with no credential requirement.
   *
   * Implementation leverages the anonymous_token field for device/session
   * distinction and stores only minimal, non-personal session identifiers. The
   * endpoint does not require or accept a password or PII. Unique
   * anonymous_token constraint is enforced at the database layer.
   *
   * Guest sessions are used for browser/device analytics, A/B testing, or
   * future personalization but do not enable posting or replying. If the
   * anonymous_token already exists and is not soft-deleted, the session may be
   * resumed without creating a duplicate.
   *
   * Security is basic: rate limits or abuse detection may restrict excessive
   * calls.
   *
   * Related operation: /auth/guest/refresh extends the validity of the guest
   * session token for longer tracking. Post and reply operations are forbidden
   * for this role.
   *
   * @param connection
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(): Promise<IDiscussionBoardGuest.IAuthorized> {
    try {
      return await postAuthGuestJoin();
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh a guest session using the anonymous_token (discussion_board_guests
   * table).
   *
   * Refreshes a guest session using their anonymous_token
   * (discussion_board_guests). This extends active session validity or updates
   * analytics for guests browsing the board without authentication.
   *
   * Under the hood, the endpoint updates the updated_at timestamp and may
   * rotate the anonymous_token if desired for privacy. No credential management
   * or PII is associated with this operation.
   *
   * Guest refresh is crucial for session continuity on the discussion board and
   * enables enhanced analytics, personalization, and future engagement
   * opportunities for guests (without posting ability).
   *
   * Security is ensured by checking that the anonymous_token exists and has not
   * been soft-deleted (deleted_at null). If validation fails, the session is
   * denied extension.
   *
   * Related: Used in parallel with /auth/guest/join; not related to member or
   * admin authentication. Logout simply consists of discarding the
   * anonymous_token client-side.
   *
   * If soft-deletion is performed in the future, the same anonymous_token
   * cannot be re-activated; a new session must be created via join.
   *
   * @param connection
   * @param body Guest session refresh payload; must include previously issued
   *   anonymous_token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IDiscussionBoardGuest.IRefresh,
  ): Promise<IDiscussionBoardGuest.IAuthorized> {
    try {
      return await postAuthGuestRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
