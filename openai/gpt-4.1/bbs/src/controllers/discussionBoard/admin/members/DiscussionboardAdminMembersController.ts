import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardAdminMembers } from "../../../../providers/patchDiscussionBoardAdminMembers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getDiscussionBoardAdminMembersMemberId } from "../../../../providers/getDiscussionBoardAdminMembersMemberId";
import { putDiscussionBoardAdminMembersMemberId } from "../../../../providers/putDiscussionBoardAdminMembersMemberId";
import { deleteDiscussionBoardAdminMembersMemberId } from "../../../../providers/deleteDiscussionBoardAdminMembersMemberId";

import { IPageIDiscussionBoardMember } from "../../../../api/structures/IPageIDiscussionBoardMember";
import { IDiscussionBoardMember } from "../../../../api/structures/IDiscussionBoardMember";

@Controller("/discussionBoard/admin/members")
export class DiscussionboardAdminMembersController {
  /**
   * Search and retrieve a filtered, paginated list of discussion board members
   * (admins only) from the 'discussion_board_members' table.
   *
   * Retrieve a paginated and optionally filtered list of registered members
   * from the discussion board. This operation enables searching by criteria
   * such as email address, username, registration date, and verification
   * status. It also supports pagination and sorting to handle large datasets
   * efficiently.
   *
   * Administrators typically use this operation for user management and
   * oversight, but it can also provide member browsing features if needed for
   * the forum UI. Filtering is enforced according to available search fields as
   * defined on the 'discussion_board_members' table: 'email', 'username',
   * 'email_verified', and 'registration_completed_at'. Results are paginated to
   * prevent excessive load and improve usability.
   *
   * Only admins are authorized to list all members, as regular users should not
   * have access to private member data except their own. Any filtering or
   * search parameters must align with the data fields actually present in the
   * schema. If no matches are found, an empty result set is returned. Errors in
   * search criteria yield detailed validation messages to promote correct
   * usage.
   *
   * @param connection
   * @param body Search, filter, pagination, and sorting parameters for finding
   *   discussion board members.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardMember.IRequest,
  ): Promise<IPageIDiscussionBoardMember.ISummary> {
    try {
      return await patchDiscussionBoardAdminMembers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed profile information of a specific discussion board member
   * by unique ID (admins only) from the 'discussion_board_members' table.
   *
   * Fetch the complete details of a single registered member using their
   * system-assigned unique ID. This operation is suitable for administrative
   * use cases, such as managing accounts or troubleshooting user issues, and
   * not for public member listings.
   *
   * The 'memberId' path parameter directly matches the 'id' column of the
   * 'discussion_board_members' table and must be provided as a UUID string. The
   * operation returns all columns except sensitive authentication fields (e.g.,
   * password_hash), following business privacy rules. It can be used in
   * conjunction with the member list/index operation for deeper member
   * inspection.
   *
   * Only administrators may use this endpoint; regular users are not permitted
   * to view the profile details of other accounts. If the supplied memberId
   * does not match any record, an error with a clear message is returned. Any
   * soft-deleted member is either excluded or clearly indicated based on
   * implementation.
   *
   * @param connection
   * @param memberId Unique identifier of the discussion board member to
   *   retrieve (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":memberId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardMember> {
    try {
      return await getDiscussionBoardAdminMembersMemberId({
        admin,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing discussion board member (discussion_board_members table)
   * record by memberId.
   *
   * This API allows a discussion board member or an admin to update a member's
   * details. The primary use case is for users to update their own profile
   * information or for admins to update any member's account for management
   * purposes. The operation enforces email and username uniqueness, following
   * the database index constraints. Email changes require subsequent
   * verification, and password changes must use a hashed representation, not
   * plain text. The operation validates all input fields according to business
   * rules: emails must be valid and unique, usernames must not clash with
   * existing users, and passwords must meet established length and complexity
   * rules. The system will reject attempts to set inappropriate values or to
   * update with information that would violate business logic.
   *
   * Security considerations dictate that only the owning member (authenticated
   * via session/JWT) or an administrator may update a member account. Attempts
   * by other members or guests will result in an appropriate authorization
   * failure message. Updated_at is always set to the present time on any
   * update, enabling audit tracing. Soft-deleted accounts (where deleted_at is
   * set) cannot be updated and return an error if attempted.
   *
   * If a member's email is updated, their email_verified status will be reset,
   * and a new verification process must be completed. Admins may update all
   * non-credential fields directly but must handle credential resets according
   * to policy. Invalid updates—such as duplicate email/username or a prohibited
   * password—result in clear error messages with actionable guidance. This
   * endpoint helps members maintain control of their personal information while
   * ensuring system integrity.
   *
   * @param connection
   * @param memberId Unique identifier for the discussion board member to be
   *   updated.
   * @param body Fields required to update an existing member account, following
   *   business rules for uniqueness, non-emptiness, and hashed password
   *   requirements.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":memberId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardMember.IUpdate,
  ): Promise<IDiscussionBoardMember> {
    try {
      return await putDiscussionBoardAdminMembersMemberId({
        admin,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (soft delete) a discussion board member (discussion_board_members
   * table) account by setting deleted_at, identified by memberId.
   *
   * This API allows a member or admin to delete a discussion board member
   * account using a unique memberId. Instead of a hard delete, it marks the
   * account's deleted_at field with the current timestamp (soft delete),
   * supporting future recovery and audit requirements. Deleting an account
   * disables further logins for that member, prevents any authoring of topics
   * or replies, and removes access to personal account settings. Posts and
   * replies authored by the member remain visible unless additional moderation
   * policies require anonymization or removal. Authorization checks ensure that
   * only the member themselves, authenticated via session/JWT, or an admin may
   * perform this deletion. The operation cannot be performed on already
   * soft-deleted accounts and will return an error if attempted. This design
   * preserves discussion continuity and ensures that system audit trails
   * reflect all account changes as mandated by business and compliance rules.
   *
   * Security is enforced by verifying the requesting user's identity and role.
   * Members can only delete their own accounts, while admins can delete any
   * member's account. Attempts to delete another member's account by non-admins
   * will fail with an explicit permission denied message. Deleted accounts are
   * non-recoverable without administrative intervention. If an account is
   * already marked as deleted, a clear error is returned. There is no response
   * body for this operation; success is indicated via standard HTTP status.
   *
   * @param connection
   * @param memberId Unique identifier for the discussion board member to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":memberId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardAdminMembersMemberId({
        admin,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
