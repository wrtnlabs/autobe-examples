import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardAdminAdmins } from "../../../../providers/patchDiscussionBoardAdminAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getDiscussionBoardAdminAdminsAdminId } from "../../../../providers/getDiscussionBoardAdminAdminsAdminId";
import { putDiscussionBoardAdminAdminsAdminId } from "../../../../providers/putDiscussionBoardAdminAdminsAdminId";
import { deleteDiscussionBoardAdminAdminsAdminId } from "../../../../providers/deleteDiscussionBoardAdminAdminsAdminId";

import { IPageIDiscussionBoardAdmin } from "../../../../api/structures/IPageIDiscussionBoardAdmin";
import { IDiscussionBoardAdmin } from "../../../../api/structures/IDiscussionBoardAdmin";
import { IDiscussionBoardAdmins } from "../../../../api/structures/IDiscussionBoardAdmins";

@Controller("/discussionBoard/admin/admins")
export class DiscussionboardAdminAdminsController {
  /**
   * Search and retrieve a filtered, paginated list of discussion board
   * administrators (discussion_board_admins table).
   *
   * Retrieves a paginated and filtered list of administrator accounts
   * (discussion_board_admins) to support management and oversight of privileged
   * users.
   *
   * Administrators are special accounts with elevated rights (user management,
   * system moderation), and can login and perform privileged functions beyond
   * normal members. Each admin has a unique email, username, hashed password,
   * and verification status, along with timestamps for registration, last
   * update, and possible soft-deletion.
   *
   * Security and permissions: This operation must only be accessible to
   * currently authenticated admins, as it exposes privileged account data. The
   * response omits sensitive password hashes and only includes fields necessary
   * for admin oversight.
   *
   * Flexible filtering and sorting allows admins to quickly locate accounts by
   * specific criteria such as creation date or email. Error handling covers
   * invalid parameters or unauthorized attempts, preventing exposure of
   * sensitive admin data. Responses include pagination metadata for
   * user-friendly UI navigation.
   *
   * This operation is part of the core admin management flow and is typically
   * used together with detail retrieval (GET /admins/{adminId}), creation,
   * modification, and soft/hard deletion APIs for administrative accounts.
   *
   * @param connection
   * @param body Criteria for searching administrators, including filters and
   *   pagination settings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardAdmin.IRequest,
  ): Promise<IPageIDiscussionBoardAdmin.ISummary> {
    try {
      return await patchDiscussionBoardAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific administrator account
   * (discussion_board_admins table) by adminId.
   *
   * Fetches all public and administrative metadata for a specified
   * administrator account (discussion_board_admins) identified by adminId.
   *
   * Admins have unique email addresses, usernames, password hashes (not
   * returned), verification statuses, and timestamps for creation, registration
   * completion, and possible soft-deletion. This detailed view supports
   * auditing, profile inspection, or administrative action tracing.
   *
   * Only admins are allowed to execute this operation due to the sensitivity of
   * account data. Security considerations include ensuring the adminId
   * parameter is validated as a UUID, verifying permissions, and safely
   * omitting confidential fields such as password hashes in the response.
   *
   * This operation is critical for managing privileged accounts in the
   * discussion board, facilitating review, edit, or (if supported) deletion and
   * recovery functionality. Errors such as invalid adminId or missing records
   * return appropriate error responses, ensuring data security.
   *
   * @param connection
   * @param adminId Unique identifier of the administrator account to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardAdmin> {
    try {
      return await getDiscussionBoardAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an administrator profile in the discussion board
   * (discussion_board_admins table).
   *
   * This API endpoint enables administrators to update the profile information
   * for a specific admin account in the discussion board.
   *
   * The operation directly maps to the discussion_board_admins table, allowing
   * privileged modification of admin information such as email address, display
   * username, password hash (securely hashed), and verification/completion
   * status. Each update is recorded with audit-relevant timestamps for
   * compliance and traceability.
   *
   * Security and validation are critical. Only authenticated admin users can
   * access this endpoint; attempts to access by non-admins are explicitly
   * denied. Input fields must be validated: email and username are unique and
   * required, password_hash must be securely processed before storage, and
   * changes to verification fields must be business-authorized. Input and field
   * constraints must match those specified in the schema, with clear validation
   * errors communicated to the user for any invalid update requests.
   *
   * If either email or username is already in use by another admin, the
   * operation should return a descriptive conflict error. For password changes,
   * strong password policies and secure hashing are enforced outside this API
   * but must be consistently documented as system requirements. All successful
   * updates are timestamped, and the updated admin profile is returned in the
   * response.
   *
   * @param connection
   * @param adminId Unique identifier of the admin account to update.
   * @param body Fields to update in the admin profile (email, username,
   *   password hash, and verification status) following required schema
   *   constraints.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAdmins.IUpdate,
  ): Promise<IDiscussionBoardAdmins> {
    try {
      return await putDiscussionBoardAdminAdminsAdminId({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an administrator account (discussion_board_admins table) for
   * privileged admin user lifecycle management.
   *
   * This API endpoint allows an admin user to perform a soft delete (set the
   * deleted_at timestamp) on an administrator account, as defined in the
   * discussion_board_admins Prisma schema table.
   *
   * The targeted adminId must correspond to an existing, active admin record;
   * otherwise, the system returns a not found error. Soft-deletion preserves
   * the integrity of audit trails and historical administrative actions, in
   * line with compliance requirements.
   *
   * Only users authenticated with the admin role are allowed to access this
   * endpoint. Authorization must be verified before processing, with all
   * unauthorized or insufficient privilege attempts receiving a clear, secure
   * denial response.
   *
   * Once soft-deleted, the admin account is excluded from standard admin
   * operations and authentication but can be restored or audited by super-admin
   * workflows if such are implemented in the future. This operation never
   * permanently erases records or their associated system activity.
   *
   * @param connection
   * @param adminId Unique identifier of the admin account to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
