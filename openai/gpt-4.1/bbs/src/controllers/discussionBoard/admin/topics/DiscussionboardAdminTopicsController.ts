import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardAdminTopics } from "../../../../providers/postDiscussionBoardAdminTopics";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putDiscussionBoardAdminTopicsTopicId } from "../../../../providers/putDiscussionBoardAdminTopicsTopicId";
import { deleteDiscussionBoardAdminTopicsTopicId } from "../../../../providers/deleteDiscussionBoardAdminTopicsTopicId";

import { IDiscussionBoardTopic } from "../../../../api/structures/IDiscussionBoardTopic";

@Controller("/discussionBoard/admin/topics")
export class DiscussionboardAdminTopicsController {
  /**
   * Create a new discussion topic (discussion_board_topics table).
   *
   * This API operation enables members or admins to create a new discussion
   * topic, serving as the primary means of starting conversations or debates on
   * economic and political issues. The topic consists of a subject (between 5
   * and 120 characters) and body/content (between 10 and 4000 characters).
   * Either the member or admin author's identifier is required, and the system
   * enforces that only one author type can be assigned per topic. Validation
   * rules, such as duplicate prevention, rate limiting, and banned content
   * checks, are performed according to business policies.
   *
   * After successful creation, the topic becomes immediately visible to all
   * users (guests, members, admins), appearing at the top of topic listings
   * sorted by recency. Rate limits are enforced to prevent spam (e.g., 5 topics
   * per user per hour). Guests attempting to use this endpoint will be denied.
   * Input sanitation and error handling ensure safe creation and clear user
   * feedback on validation failures. This operation is directly linked to the
   * 'discussion_board_topics' entity and maintains relationships to the
   * author's member or admin record as per schema.
   *
   * @param connection
   * @param body New discussion topic information: subject, content, and author
   *   identification (as member or admin).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardTopic.ICreate,
  ): Promise<IDiscussionBoardTopic> {
    try {
      return await postDiscussionBoardAdminTopics({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing discussion topic (discussion_board_topics table).
   *
   * This API operation enables a member, admin, or the original author to
   * update the subject (title) and/or content (body) of an existing discussion
   * topic. The operation references the 'discussion_board_topics' database
   * table and requires the topic's unique identifier (topicId) as a path
   * parameter. Updates are validated to ensure subject and content meet length
   * constraints (subject: 5-120 characters, content: 10-4000 characters), do
   * not violate duplication/business rules, and have no prohibited content.
   * Ownership checks ensure only the topic's author or an admin can edit the
   * topic; other users receive a permission error.
   *
   * Upon successful update, the system saves the current timestamp as the new
   * 'updated_at' value, maintaining full edit history compliance. The response
   * includes the latest state of the topic. Input sanitation and validation are
   * strictly enforced. Attempted edits by guests or unauthorized users are
   * denied with an appropriate error message.
   *
   * @param connection
   * @param topicId Unique identifier of the topic to update
   * @param body Fields to update in the topic (subject/content); must comply
   *   with length and content rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":topicId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardTopic.IUpdate,
  ): Promise<IDiscussionBoardTopic> {
    try {
      return await putDiscussionBoardAdminTopicsTopicId({
        admin,
        topicId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a discussion topic and all its replies from the
   * discussion_board_topics table.
   *
   * This operation provides the capability to permanently delete a discussion
   * topic from the system database. According to the Prisma schema, the
   * operation directly manipulates the discussion_board_topics table, using the
   * unique topic ID (UUID) for precise identification. It is designed to
   * enforce access control, validating whether the requesting user is either
   * the original author (member or admin) or possesses admin privileges.
   *
   * Upon invocation, the system checks the requester's authorization based on
   * login status and account role. Members and admins can erase topics they
   * authored; admins may also remove any topic for moderation or compliance.
   *
   * The hard delete cascades to all linked discussion_board_replies via the
   * Prisma relation, ensuring no orphaned replies are left. The operation is
   * essential for user-requested removals, legal compliance, or
   * post-moderation. No soft-delete field is present, thus the action is not
   * reversible. Associated business rules—such as handling reply deletion and
   * audit logging—must be enforced in implementation logic.
   *
   * Error handling must be robust: attempts to delete non-owned or
   * already-removed topics should return a clear permission denied or not found
   * error, with explanatory messages to the client while not leaking sensitive
   * details.
   *
   * @param connection
   * @param topicId Unique identifier (UUID) of the topic to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":topicId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardAdminTopicsTopicId({
        admin,
        topicId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
