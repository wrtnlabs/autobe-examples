import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postDiscussionBoardAdminTopicsTopicIdReplies } from "../../../../../providers/postDiscussionBoardAdminTopicsTopicIdReplies";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putDiscussionBoardAdminTopicsTopicIdRepliesReplyId } from "../../../../../providers/putDiscussionBoardAdminTopicsTopicIdRepliesReplyId";
import { deleteDiscussionBoardAdminTopicsTopicIdRepliesReplyId } from "../../../../../providers/deleteDiscussionBoardAdminTopicsTopicIdRepliesReplyId";

import { IDiscussionBoardReply } from "../../../../../api/structures/IDiscussionBoardReply";

@Controller("/discussionBoard/admin/topics/:topicId/replies")
export class DiscussionboardAdminTopicsRepliesController {
  /**
   * Create a new reply to a topic (discussion_board_replies table).
   *
   * Allow logged-in members or admins to post a reply to a given topic. The
   * parent topic is identified by topicId and must exist. The endpoint receives
   * content for the reply and, on passing validation (body length, business
   * rules), creates the new reply in association with the correct author.
   *
   * The operation verifies the authentication status and role of the user.
   * Guests are not allowed to use this endpoint; action is denied with an
   * appropriate authentication-required message if a guest attempts access.
   * Business validation rejects submissions violating spam, duplicate, or
   * prohibited content policies. If the reply is successfully created, it is
   * immediately available for other users to view in the topic thread. The
   * response includes the reply's content, author, associated topic, and
   * timestamps.
   *
   * Edge cases, such as replying to a non-existent or closed topic, result in
   * error responses. Input validation failures return actionable error messages
   * stating the problem. Reply rate-limiting is also enforced per business
   * constraints.
   *
   * @param connection
   * @param topicId Unique identifier of the topic to which the reply will be
   *   posted.
   * @param body Content and minimal information required to create a reply to a
   *   topic. Must meet business validation rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardReply.ICreate,
  ): Promise<IDiscussionBoardReply> {
    try {
      return await postDiscussionBoardAdminTopicsTopicIdReplies({
        admin,
        topicId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update reply content in a topic (discussion_board_replies table).
   *
   * Update an existing reply belonging to a topic on the discussion board. This
   * allows authenticated members or admins to edit reply content as long as
   * they are the original author (or have admin privilege). The reply is
   * identified by both the topicId (for topic context) and replyId (for reply
   * selection). Only content editing is permitted; authorship and topic linkage
   * remain unchanged.
   *
   * Security considerations require checks that prevent users from editing
   * others' replies unless the user is an admin. All updates are tracked by
   * updating the updated_at timestamp and optionally recording moderation
   * activity. Content validation enforces minimum and maximum character lengths
   * and business rules concerning language moderation or prohibited content.
   *
   * In the context of business logic, this operation is tightly coupled with
   * the reply and topic relationship and interacts with the audit trail for
   * compliance. Any error in authorization (e.g., non-author updating) or
   * missing path parameter will result in a clear error. Related APIs include
   * reply creation and deletion endpoints, which also use the same identifiers
   * in path parameters.
   *
   * Proper error handling ensures that only valid, authenticated users can
   * update replies and prevents accidental or malicious content alteration. All
   * changes are immediately reflected to all users viewing the topic discussion
   * thread.
   *
   * @param connection
   * @param topicId Unique identifier of the topic to which the reply belongs
   * @param replyId Unique identifier of the reply to be updated within the
   *   specified topic
   * @param body Fields for updating the reply content
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":replyId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardReply.IUpdate,
  ): Promise<IDiscussionBoardReply> {
    try {
      return await putDiscussionBoardAdminTopicsTopicIdRepliesReplyId({
        admin,
        topicId,
        replyId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a reply from a topic (discussion_board_replies table).
   *
   * Permanently remove an existing reply from the specified topic, identified
   * by both topicId and replyId. Only authenticated users who authored the
   * reply or are admins may perform this operation. Hard deletion is performed
   * as the reply table lacks a soft delete (deleted_at) field; once removed,
   * the reply cannot be recovered.
   *
   * Access control is enforced: members may delete their own replies, admins
   * may delete any reply. All deletions are auditable for compliance. Deletion
   * does not affect parent topics but immediately removes the reply from all
   * discourse views.
   *
   * Attempting to delete a reply without proper authorization, with
   * missing/invalid parameters, or targeting a non-existent reply will result
   * in an error explaining the reason. Related endpoints allow reply creation
   * and editing, but only this operation handles full removal of reply data
   * from the database.
   *
   * @param connection
   * @param topicId Unique identifier of the topic to which the reply belongs
   * @param replyId Unique identifier of the reply to be deleted within the
   *   specified topic
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":replyId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteDiscussionBoardAdminTopicsTopicIdRepliesReplyId({
        admin,
        topicId,
        replyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
