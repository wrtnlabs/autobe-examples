import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardTopicsTopicIdReplies } from "../../../../providers/patchDiscussionBoardTopicsTopicIdReplies";
import { getDiscussionBoardTopicsTopicIdRepliesReplyId } from "../../../../providers/getDiscussionBoardTopicsTopicIdRepliesReplyId";

import { IPageIDiscussionBoardReply } from "../../../../api/structures/IPageIDiscussionBoardReply";
import { IDiscussionBoardReply } from "../../../../api/structures/IDiscussionBoardReply";

@Controller("/discussionBoard/topics/:topicId/replies")
export class DiscussionboardTopicsRepliesController {
  /**
   * Get a paginated, searchable list of replies for a specific topic from the
   * discussion_board_replies table.
   *
   * This operation fetches a paginated, optionally filtered and sorted list of
   * replies for a specific topic. Operating on the discussion_board_replies
   * table, it uses the parent topic's UUID to scope the search, with advanced
   * query capabilities specified in the request body using the
   * IDiscussionBoardReply.IRequest schema. Guests, members, and admins can read
   * all replies.
   *
   * Search criteria might include filtering by author (member or admin),
   * keyword match in content, creation time window, and sorting by date, as
   * enabled by the schema. Results are returned as a paginated structure
   * leveraging the IPageIDiscussionBoardReply.ISummary response type, providing
   * summary details suitable for high-throughput browsing scenarios.
   *
   * Access is intentionally open (empty authorizationRoles array), reflecting
   * business rules that public discussion visibility is a core feature. Error
   * handling covers non-existent topics, empty result sets (returning an empty
   * list), and invalid query parameters. The operation is designed for
   * integration in browsing, search, and topic detail views, ensuring
   * inclusivity and performance across all user roles.
   *
   * @param connection
   * @param topicId Unique identifier (UUID) of the parent discussion topic for
   *   which to retrieve replies.
   * @param body Search, filter, sort, and pagination criteria for listing
   *   replies to a given topic.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardReply.IRequest,
  ): Promise<IPageIDiscussionBoardReply.ISummary> {
    try {
      return await patchDiscussionBoardTopicsTopicIdReplies({
        topicId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific reply to a topic (discussion_board_replies
   * table).
   *
   * Fetch and display a single reply belonging to a specific topic on the
   * discussion board. All users, including guests, can access this endpoint to
   * view the content, author, and timestamps for the reply.
   *
   * The reply is identified by both the parent topicId and the replyId. The
   * operation ensures that the reply exists, belongs to the specified topic,
   * and is not soft-deleted. If the reply does not exist or is not associated
   * with the given topic, the operation returns an error indicating not found.
   * All author information returned is limited to display names or
   * pseudonymized identifiers per privacy rules.
   *
   * This read-only endpoint supports transparent access for community members
   * and visitors, and helps power deep-linking to particular replies for
   * reference or shareability. Error responses are handled gracefully, with
   * user-friendly messages for not-found or deleted resources. This is a
   * high-traffic endpoint within transparent public discussion access.
   *
   * @param connection
   * @param topicId Unique identifier of the parent topic the reply belongs to.
   * @param replyId Unique identifier of the reply to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":replyId")
  public async at(
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardReply> {
    try {
      return await getDiscussionBoardTopicsTopicIdRepliesReplyId({
        topicId,
        replyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
