import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchDiscussionBoardTopics } from "../../../providers/patchDiscussionBoardTopics";
import { getDiscussionBoardTopicsTopicId } from "../../../providers/getDiscussionBoardTopicsTopicId";

import { IPageIDiscussionBoardTopic } from "../../../api/structures/IPageIDiscussionBoardTopic";
import { IDiscussionBoardTopic } from "../../../api/structures/IDiscussionBoardTopic";

@Controller("/discussionBoard/topics")
export class DiscussionboardTopicsController {
  /**
   * Search and retrieve a paginated list of discussion board topics
   * (discussion_board_topics table) for browsing or keyword search.
   *
   * Retrieve a list of discussion topics from the discussion_board_topics
   * table, supporting keyword search, sorting by date or relevance, and
   * pagination. Users can search by topic subject, content, or author, and the
   * returned data includes essential fields for rapid browsing and search
   * interface display.
   *
   * The operation is available to all user roles, including guests, without
   * requiring authentication. Sensitive user information is filtered out,
   * exposing only display names, topic subjects, timestamps, and summary
   * content. Pagination strategies prevent loading delays when many topics
   * exist, while robust indexing in the underlying schema ensures search
   * performance.
   *
   * Validation addresses search query length, pagination limits, and boundary
   * conditions such as out-of-range page numbers. If no topics match the
   * search, the response clearly indicates no results. Security checks ensure
   * only public data is returned, and all inputs are sanitized to prevent abuse
   * or injection.
   *
   * This endpoint supports seamless integration with public discussion landing
   * pages, search interfaces, and infinite-scroll browsing. It has no
   * dependencies on other API operations, requiring only optional search/query
   * parameters in the request body.
   *
   * @param connection
   * @param body Request parameters for searching, filtering, and paginating the
   *   discussion topics list.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IDiscussionBoardTopic.IRequest,
  ): Promise<IPageIDiscussionBoardTopic.ISummary> {
    try {
      return await patchDiscussionBoardTopics({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full information and replies for a specific discussion board topic
   * (discussion_board_topics table) by topicId.
   *
   * Fetch full details of a specific topic by its unique topicId from the
   * discussion_board_topics table, including subject, content, author display
   * name, timestamps, and all public replies. Each reply includes the reply
   * content, reply author (member or admin), and respective timestamps,
   * supporting fluid engagement and reading for both guests and authenticated
   * users.
   *
   * The endpoint enforces strict parameter validation, ensuring a valid UUID
   * topicId is provided. If the topic does not exist, has been deleted, or the
   * id is invalid, the operation returns a clear not found error. Replies are
   * always presented in ascending chronological order to match discussion
   * thread reading conventions.
   *
   * All roles (guests, members, admins) may access this endpoint without
   * authentication. Sensitive author information (such as emails) is never
   * disclosed; only safe display data is included. This endpoint is integral to
   * the topic view page and reply workflows, and it has no dependency on prior
   * endpoint calls beyond needing a valid topicId.
   *
   * @param connection
   * @param topicId Unique identifier for the target topic to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":topicId")
  public async at(
    @TypedParam("topicId")
    topicId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardTopic> {
    try {
      return await getDiscussionBoardTopicsTopicId({
        topicId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
