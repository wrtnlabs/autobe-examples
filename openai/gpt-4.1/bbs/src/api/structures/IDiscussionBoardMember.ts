import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Detailed member (user) entity in the discussion board system as represented
 * in the discussion_board_members table.
 *
 * Includes identity (id, username, email), verification status, registration
 * and update timestamps, and nullable soft-delete marker as present in the
 * underlying database.
 *
 * Sensitive authentication credentials (such as password_hash) are
 * intentionally omitted for security and business compliance. This object is
 * used for admin control panels, member profile review, and serves as a
 * canonical user reference throughout the discussion board platform.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardMember = {
  /**
   * Primary system identifier for this member account (UUID string).
   *
   * Unique across the entire user table and employed as the default entity
   * reference in relationships (topic authorship, replies, etc.) Ensures
   * global referential integrity.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Member's unique business email address, used for both login and
   * communication.
   *
   * Must be a valid, deliverable email address, validated through
   * registration and verification flows. Only one active member may share any
   * given email.
   */
  email: string & tags.Format<"email">;

  /**
   * Public display username for this member, used in posts and visible in all
   * discussion topics and replies.
   *
   * Must be unique, satisfy naming requirements (e.g., length, content), and
   * is required at signup. Helps users distinguish between participants
   * without exposing private information.
   */
  username: string;

  /**
   * Indicates whether this member's email has been fully verified via
   * out-of-band confirmation workflow.
   *
   * Remains false until the member responds to the system-generated
   * verification process (usually via link sent to email). Controls access to
   * posting and replying features.
   */
  email_verified: boolean;

  /**
   * Timestamp of completed registration including successful email
   * verification.
   *
   * Initial value is set when user registration and verification flow is
   * finished, establishing membership in the system for audit, search, or
   * reporting applications.
   */
  registration_completed_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this member record was initially created in the system.
   *
   * Reflects database insert moment, enabling audit trails, reporting, and
   * sort/order logic.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of most recent update to this member record.
   *
   * Set whenever the user performs a profile or credential update, supporting
   * audit and business reporting operations.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Nullable. Timestamp of soft deletion for member. Supports
   * audit/compliance controls and enables recoverability.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardMember {
  /**
   * Schema for member account registration request. Used during user signup
   * to collect email, username, and plain password. All fields are required
   * according to business policy defined in the requirements and must satisfy
   * uniqueness and validity constraints as enforced by the
   * discussion_board_members table.
   */
  export type ICreate = {
    /**
     * Member's unique business email address for account registration and
     * login, as stored in the 'discussion_board_members' table. Required
     * for verification and communication. Must adhere to unique
     * constraint.
     */
    email: string & tags.Format<"email">;

    /**
     * Display name selected by the member for use throughout the system.
     * Must be unique, non-empty, and used for identifying user actions on
     * topics and replies.
     */
    username: string;

    /**
     * The plain-text password submitted during user registration (never
     * stored directly). The system hashes this value and saves only the
     * result in the 'password_hash' field. Must meet minimum length and
     * complexity business policy but is not persisted in this raw state.
     */
    password: string & tags.Format<"password">;
  };

  /**
   * Schema for a successful member authentication or registration response,
   * containing the member's unique id and an authorization token. Used upon
   * successful account registration or login for session establishment.
   * Mirrors the pattern described in the requirements for authenticated
   * operations.
   */
  export type IAuthorized = {
    /**
     * The unique identifier of the member, corresponding to the 'id' field
     * in the 'discussion_board_members' table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Member's unique business email address, used for both login and
     * communication.
     *
     * Must be a valid, deliverable email address, validated through
     * registration and verification flows. Only one active member may share
     * any given email.
     */
    email: string & tags.Format<"email">;

    /**
     * Public display username for this member, used in posts and visible in
     * all discussion topics and replies.
     *
     * Must be unique, satisfy naming requirements (e.g., length, content),
     * and is required at signup. Helps users distinguish between
     * participants without exposing private information.
     */
    username: string;

    /**
     * Indicates whether this member's email has been fully verified via
     * out-of-band confirmation workflow.
     *
     * Remains false until the member responds to the system-generated
     * verification process (usually via link sent to email). Controls
     * access to posting and replying features.
     */
    email_verified: boolean;

    /**
     * Timestamp of completed registration including successful email
     * verification.
     *
     * Initial value is set when user registration and verification flow is
     * finished, establishing membership in the system for audit, search, or
     * reporting applications.
     */
    registration_completed_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when this member record was initially created in the
     * system.
     *
     * Reflects database insert moment, enabling audit trails, reporting,
     * and sort/order logic.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of most recent update to this member record.
     *
     * Set whenever the user performs a profile or credential update,
     * supporting audit and business reporting operations.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Nullable. Timestamp of soft deletion for member. Supports
     * audit/compliance controls and enables recoverability.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body schema for logging in as a discussion board member. Contains
   * the required credentials as defined in the business authentication rules:
   * email (must be unique and verified) and password (minimum eight
   * characters, checked via hashing). This type is used only as input for the
   * /auth/member/login operation and never returned in any response. All
   * fields must match the underlying 'discussion_board_members' Prisma model
   * regarding allowable values.
   */
  export type ILogin = {
    /**
     * The member's unique email address for login authentication on the
     * discussion board system. Must be a valid email and corresponds to the
     * email field in the 'discussion_board_members' Prisma table.
     */
    email: string & tags.Format<"email">;

    /**
     * The plain text password entered by the user for authentication. This
     * will be checked via secure hashing against the stored password_hash.
     * Do not return this field in any response. Business logic: Minimum 8
     * characters as per password policy.
     */
    password: string & tags.MinLength<8>;
  };

  /**
   * Request body schema for refreshing an authenticated member's access
   * token. Only the existing valid refresh_token, retrieved from a previous
   * /auth/member/login or /auth/member/join operation, should be included.
   * Used for session continuation and must align with token management
   * business logic. No user credential information is sent in this payload.
   */
  export type IRefresh = {
    /**
     * The JWT refresh token issued to the authenticated member during a
     * prior successful authentication. This token is required to renew the
     * member's access session. It must be valid, unexpired, and provided
     * exactly as received from the prior authorization response. Failure to
     * provide a valid token will result in refresh denial.
     */
    refresh_token: string;
  };

  /**
   * Query parameters for searching, filtering, sorting, and paginating
   * discussion board member (user) accounts.
   *
   * Allows filtering on key attributes (email, username, verification status,
   * registration period), fuzzy search, paging, and order-of-results for
   * administrative or system listing of user records.
   *
   * Supported filters correspond strictly to existing columns in the
   * discussion_board_members table according to the schema and business
   * constraints.
   */
  export type IRequest = {
    /**
     * Page number for paginated listing of member records.
     *
     * Must be a positive integer (minimum 1) for paginated access to the
     * member dataset. Default is 1 if omitted. Used for server-side paging
     * controls. Does not support zero or negative values.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of member records per page in the paginated response.
     *
     * Limits the quantity of records returned in each paginated member
     * listing request to prevent excessive result sets. Defaults to a
     * system-determined value (such as 20 or 50) if omitted. Must be within
     * the allowed min/max for the business policy.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * A keyword or phrase for fuzzy searching member records by email or
     * username.
     *
     * Supports full-text or partial string matching within the member
     * directory, as permitted by business rules. Input string is sanitized
     * and may support case-insensitive, partial, or combined matching
     * features.
     */
    search?: string | undefined;

    /**
     * Exact email address filter for finding specific member accounts.
     *
     * Returns only members whose registered email matches the input. Must
     * conform to standard email patterning as accepted in member
     * registration. Useful for administrative lookups.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Exact username filter for searching by user login/display names.
     *
     * Filters member records whose unique usernames exactly match the
     * requested value. Username values must be unique system-wide, per
     * schema constraint.
     */
    username?: string | undefined;

    /**
     * Filters results to only those members whose 'email_verified' flag
     * matches the requested value.
     *
     * Used to distinguish between verified vs. unverified member accounts,
     * supporting business onboarding and eligibility logic.
     */
    email_verified?: boolean | undefined;

    /**
     * Upper-bound filter for registration completed timestamp.
     *
     * Returns only member records whose registration_completed_at is before
     * or at the specified ISO8601 datetime. Enables time-windowed queries
     * for business reporting or user management.
     */
    registration_completed_before?:
      | (string & tags.Format<"date-time">)
      | undefined;

    /**
     * Lower-bound filter for registration completed timestamp.
     *
     * Returns only member records whose registration_completed_at is after
     * the specified ISO8601 datetime. Supports querying accounts completed
     * in a specific window.
     */
    registration_completed_after?:
      | (string & tags.Format<"date-time">)
      | undefined;

    /**
     * Sorts member result set by the selected sortable field.
     *
     * Only these four fields are allowed for ordering, reflecting business
     * rules and indexed columns. Default is 'created_at' if omitted.
     */
    sort_by?:
      | "created_at"
      | "registration_completed_at"
      | "username"
      | "email"
      | undefined;

    /**
     * Sort order direction for sorted listing of member results.
     *
     * Accepts only 'asc' (ascending) or 'desc' (descending). Default may be
     * system or endpoint-specific.
     */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Partial update object for discussion_board_members, supporting update of
   * email and username for member administration. No system-managed,
   * immutable, or computed fields can be directly set by normal users (id,
   * created_at, updated_at, deleted_at excluded). Most fields are optional,
   * and only provided fields will be modified. Uniqueness and validation
   * rules for email and username are enforced at the database layer. When
   * email is changed, verification/enrollment policies apply.
   *
   * Reference: discussion_board_members table in schema. All properties must
   * have a direct mapping to schema fields. System timestamps are
   * server-managed and usually excluded from direct update, but are included
   * here for completeness and admin maintenance.
   */
  export type IUpdate = {
    /**
     * Updated email address for the member. Must be unique within the
     * members table.
     *
     * When a new value is provided, the system will reset email_verified to
     * false and require email verification before enabling posting
     * privileges. See discussion_board_members.email in the schema.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Updated display username for the member. Must be unique. Used for
     * display and mention within the forum. If changed, must be unique per
     * discussion_board_members.username constraint.
     */
    username?: string | undefined;

    /**
     * Indicates if the member's email is verified. Should only be changed
     * by the verification completion process. Direct manipulation is not
     * usually allowed on update endpoints.
     */
    email_verified?: boolean | undefined;

    /**
     * Timestamp when email verification and onboarding is complete.
     * Typically set by the system, not updatable via API, but included for
     * completeness.
     */
    registration_completed_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Summary DTO for discussion board members, derived from the
   * 'discussion_board_members' Prisma model and intended for use in list,
   * search, or lightweight display scenarios where full member detail is
   * unnecessary.
   *
   * Contains only safe, public-facing fields for minimal exposure (e.g., for
   * admin list queries, public member references). Does not include sensitive
   * authentication info (such as password_hash), personally identifiable
   * information (except email when appropriate), or audit/compliance details.
   * Use in paginated results or overview lists where privacy must be balanced
   * with membership visibility.
   *
   * The required ID field enables unique reference; username is for display;
   * email may be included if business rules allow. All fields must exist in
   * the Prisma schema and should not introduce phantom or computed fields
   * that aren't supported by the schema.
   */
  export type ISummary = {
    /**
     * Unique identifier of the member as stored in the
     * 'discussion_board_members' table. Used for selection, reference, and
     * association throughout the system. Maps to the 'id' primary key in
     * Prisma.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Member's display name as shown in all public and admin interfaces,
     * which must be unique within the system. Subject to business naming
     * policies and provided at registration; used for attribution of posts
     * and replies. Maps to 'username' field in Prisma.
     */
    username: string;

    /**
     * (Optional, when exposed) The member's unique email address, as stored
     * in the 'email' field. Used for admin search or display, but not
     * commonly revealed to the public. Subject to privacy
     * rules/restrictions; when present, must match registration email.
     */
    email?: string | undefined;
  };
}
