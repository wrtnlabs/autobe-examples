import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrator account data for the economic/political discussion board
 * system.
 *
 * Contains all public and administrative metadata for a given admin account as
 * sourced directly from the discussion_board_admins Prisma schema. Sensitive
 * fields such as password hashes are omitted per security best practices. This
 * type is referenced for profile displays, management, and audit views of admin
 * entities in the API.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAdmin = {
  /**
   * Primary key for the administrator account.
   *
   * This value is the universally unique identifier (UUID) for this admin as
   * assigned by the database. It is mandatory for all references and
   * operations involving administrator entities. Extracted from the 'id'
   * column in the discussion_board_admins table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Email address of the administrator.
   *
   * The email is used for login authentication and admin-related
   * communication. It must be unique among all admins and is validated for
   * business/organizational domains and correctness during registration.
   * Corresponds to the 'email' column in the discussion_board_admins Prisma
   * table.
   */
  email: string & tags.Format<"email">;

  /**
   * Display username for the administrator.
   *
   * The username is selected by the admin for visibility in audit logs, admin
   * events, and management actions. Uniqueness is enforced at the database
   * level. Maps directly to the 'username' field in discussion_board_admins.
   */
  username: string;

  /**
   * Indicates email verification status for the administrator.
   *
   * True if the admin has completed email confirmation; false if registration
   * or update has not yet been verified. Must be checked before login/session
   * activation. Data comes from the 'email_verified' Prisma column.
   */
  email_verified: boolean;

  /**
   * Timestamp indicating when the admin completed registration and email
   * verification.
   *
   * This ISO-8601 UTC timestamp records when onboarding was finalized for the
   * admin. Used for auditing and analytics. Maps to
   * 'registration_completed_at' in the schema.
   */
  registration_completed_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for initial admin account creation.
   *
   * Records when the admin was first onboarded to the system. Provided in UTC
   * ISO-8601 format from 'created_at' in the admin schema.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for latest update to the admin record.
   *
   * Indicates when any admin profile or security-related field was most
   * recently changed. Populated from the 'updated_at' field in the database.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating when the admin account was soft-deleted, if at all.
   *
   * Null if the account is active. If set, the admin is disabled and excluded
   * from all access and management workflows, preserving audit history and
   * access logs. Sourced from the 'deleted_at' column.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussionBoardAdmin {
  /**
   * Payload for registering a new discussion_board_admins entity. Admins
   * provide their email address, a unique display username, and a plain text
   * password (which is hashed and stored internally as password_hash).
   * Passwords are validated for complexity and never stored in plain text.
   *
   * Email and username uniqueness are strictly enforced. Only authorized
   * registration routes may use this structure, and response handling must
   * ensure that passwords and hashes are never leaked beyond secure,
   * backend-controlled logic. The admin account remains inactive until email
   * verification is complete. This DTO is used exclusively for account
   * creation and MAY NOT be reused for admin updates.
   */
  export type ICreate = {
    /**
     * Unique email address chosen for administrator login to the discussion
     * board system. This must be a valid business or admin-relevant
     * contact, as enforced by upstream validation logic. Email addresses
     * are required to be unique among all administrator accounts (see the
     * unique constraint in the discussion_board_admins Prisma schema).
     * Email verification workflow is required before the account is
     * considered fully active. Must follow email format and is subject to
     * anti-abuse business rules.
     *
     * This field is not permitted to be used by members or guests, and
     * responses containing email should only return information relevant to
     * the authenticated admin. Never expose this field in public context or
     * to unauthorized users.
     */
    email: string & tags.Format<"email">;

    /**
     * Display name selected by the admin during registration. This field is
     * used for identification in admin-generated events, profile displays,
     * and auditing. Usernames are required to be unique system-wide
     * (enforced by a unique constraint in the discussion_board_admins
     * Prisma schema) and must conform to platform-defined content and
     * length constraints.
     *
     * Business rules may prohibit certain reserved or offensive terms in
     * usernames and enforce minimum/maximum length. Username is intended
     * for internal visibility and privileged operations, not for public
     * display outside privileged contexts.
     */
    username: string;

    /**
     * Plain text password provided by the admin for secure authentication.
     * This value is never stored or returned in any API response; it is
     * supplied at registration, then securely hashed before storage
     * (resulting in 'password_hash' in the discussion_board_admins table).
     * The password must meet minimum length and complexity requirements
     * (e.g., at least 8 characters, include both letters and numbers).
     *
     * This property is required only at creation, not for profile edits or
     * updates. Never accept 'password_hash' from the client; backend
     * processes handle hashing using approved cryptographic functions. This
     * field is not returned in responses and must be transmitted over a
     * secure transport (TLS/SSL) to mitigate risk.
     */
    password: string & tags.Format<"password">;
  };

  /**
   * Authorization and session details for an administrative account following
   * successful authentication (registration, login, or refresh). This DTO
   * contains secure tokens for ongoing requests as well as basic profile
   * information (email, username, id) corresponding to the
   * discussion_board_admins record.
   *
   * All operations returning this structure must comply with privacy and
   * token handling business rules, as described in system and security
   * requirements. Never include password or hash fields in this DTO.
   */
  export type IAuthorized = {
    /**
     * Unique identifier for the administrator in the
     * discussion_board_admins table. Used for all admin lookup, session
     * tracking, and audit trails.
     *
     * This value is assigned at account creation and is system-wide unique.
     * It appears in authentication payloads and is necessary for all
     * subsequent privileged operations.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Email address of the authenticated administrator. Used for session
     * context, account management, and notification. Do not expose in
     * front-end public contexts beyond what is allowed for privileged admin
     * workflows.
     */
    email: string & tags.Format<"email">;

    /**
     * Display name of the administrator for authenticated context and
     * management. Used in privileged UI and audit trail interfaces.
     */
    username: string;

    /**
     * Indicates email verification status for the administrator.
     *
     * True if the admin has completed email confirmation; false if
     * registration or update has not yet been verified. Must be checked
     * before login/session activation. Data comes from the 'email_verified'
     * Prisma column.
     */
    email_verified: boolean;

    /**
     * Timestamp indicating when the admin completed registration and email
     * verification.
     *
     * This ISO-8601 UTC timestamp records when onboarding was finalized for
     * the admin. Used for auditing and analytics. Maps to
     * 'registration_completed_at' in the schema.
     */
    registration_completed_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for initial admin account creation.
     *
     * Records when the admin was first onboarded to the system. Provided in
     * UTC ISO-8601 format from 'created_at' in the admin schema.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for latest update to the admin record.
     *
     * Indicates when any admin profile or security-related field was most
     * recently changed. Populated from the 'updated_at' field in the
     * database.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating when the admin account was soft-deleted, if at
     * all.
     *
     * Null if the account is active. If set, the admin is disabled and
     * excluded from all access and management workflows, preserving audit
     * history and access logs. Sourced from the 'deleted_at' column.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Admin login request for the economic/political discussion board.
   *
   * This type represents the payload for admin authentication and login. It
   * contains only the minimal set of fields required for credential
   * verification: email and password. Email is a unique, verified identifier
   * for administrator accounts; password must be provided in plain text and
   * is hashed in the backend prior to credential checking. No additional data
   * is accepted during login. All fields are essential for performing
   * authentication, and any omission results in validation failure. This type
   * aligns with security and business requirements for administrator access
   * controls. Used in /auth/admin/login endpoint.
   */
  export type ILogin = {
    /**
     * Email address used for admin authentication. This is a unique
     * business email as per system requirements. It must be a valid and
     * registered address for the administrator account. Case-insensitive
     * matching is used. Referenced from the discussion_board_admins table,
     * 'email' column.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password used for login authentication. This will never be
     * stored in cleartext: the backend application hashes this value and
     * compares it against the password_hash field in the
     * discussion_board_admins table. Must comply with business password
     * requirements and strong password policy.
     */
    password: string;
  };

  /**
   * Admin session refresh request for the economic/political discussion
   * board.
   *
   * This type represents the payload for renewing administrator
   * authentication. Admins must provide their previously issued JWT refresh
   * token in order to obtain new session tokens. No additional fields or
   * credentials are required; only the exact refresh token string is
   * accepted. This ensures passwordless session extension and adheres to
   * established security controls for administrator privilege renewal. Used
   * in /auth/admin/refresh endpoint.
   */
  export type IRefresh = {
    /**
     * A JWT refresh token issued during a prior successful admin
     * authentication. Required for session renewal; must not be expired,
     * revoked, or malformed. This field must be provided exactly as set in
     * the previous IDiscussionBoardAdmin.IAuthorized response. Used for
     * extending the admin's login session in strict compliance with
     * business and security requirements.
     */
    refreshToken: string;
  };

  /**
   * Search and filter parameters for admin user accounts in
   * discussion_board_admins. Includes filters by email, username,
   * verification status, registration/confirmation timestamps.
   *
   * Pagination and sorting supported by page/limit and sort_by/sort_order
   * properties. All filters reference actual columns in the Prisma model and
   * support full-table admin management as required for administrative
   * business operations.
   *
   * Reference: discussion_board_admins schema. Only properties that directly
   * map to table columns or generally accepted query practices are included.
   */
  export type IRequest = {
    /**
     * Admin email address (exact or partial match for search). Can be used
     * to filter records to specific admin accounts within the
     * discussion_board_admins table.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Display username for admin account. Used for searching or filtering
     * administrator records.
     */
    username?: string | undefined;

    /**
     * Optional filter on email verification status. When set to true or
     * false, restricts results to only those with matching status.
     */
    email_verified?: boolean | undefined;

    /**
     * Optional search parameter: limit results to administrators
     * registered/verified after this timestamp.
     */
    registration_completed_at_start?:
      | (string & tags.Format<"date-time">)
      | undefined;

    /**
     * Optional search parameter: limit results to administrators
     * registered/verified before this timestamp.
     */
    registration_completed_at_end?:
      | (string & tags.Format<"date-time">)
      | undefined;

    /**
     * Requested results page number for pagination, starting at 1. Defaults
     * to the first page if not specified.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of administrator records to return per page, for capped
     * pagination. Maximum and default values depend on server
     * configuration.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sorting criteria for returned admin records. One of: email, username,
     * registration_completed_at, created_at.
     */
    sort_by?:
      | "email"
      | "username"
      | "registration_completed_at"
      | "created_at"
      | undefined;

    /**
     * Sorting direction for the query results; 'asc' for ascending, 'desc'
     * for descending.
     */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Summary information for a discussion board administrator, suitable for
   * administrative listings and fast lookup screens.
   *
   * Includes all non-sensitive, identifying metadata required for role
   * management, audit, and general oversight. Sensitive fields such as
   * password hashes and session tokens are excluded by design. This summary
   * directly references the 'discussion_board_admins' Prisma table and is
   * used in paginated admin listing responses, search, and internal
   * management UIs. Designed for efficiency and clarity in administrator
   * directories and management consoles.
   */
  export type ISummary = {
    /**
     * Unique identifier for the administrator account. Primary Key as per
     * the Prisma 'discussion_board_admins' model.
     *
     * Used for reference, administration, and audit tracking throughout the
     * system. Always a UUID string, generated on creation and never altered
     * after onboarding.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique business email address for administrator login and system
     * communication. Corresponds to the 'email' field in the Prisma schema,
     * and must be unique among admin accounts.
     *
     * Used both for contact and as the primary login credential. Actual
     * value is hidden from public endpoints, but available within admin
     * summaries for privileged management purposes.
     */
    email: string;

    /**
     * Display name chosen by admin, unique within the system. Used for
     * identifying admin actions, audit records, and all profile
     * references.
     *
     * Enforced by the 'username' unique constraint in the database. Names
     * are used both for authentication context and visible administrative
     * actions.
     */
    username: string;

    /**
     * Indicates whether the administrator's email address has been
     * successfully verified through the registration/confirmation flow.
     * Maps to the 'email_verified' boolean in the 'discussion_board_admins'
     * schema.
     *
     * Only verified accounts are enabled for login and privileged actions.
     * Admin onboarding is incomplete until this is true.
     */
    email_verified: boolean;

    /**
     * Timestamp (ISO 8601, UTC) when the administrator account has been
     * fully registered and verified. Sourced from the
     * 'registration_completed_at' field in the schema.
     *
     * Used for onboarding analytics, compliance, and as a milestone for
     * admin activation. Not set until verification workflow completes.
     */
    registration_completed_at: string & tags.Format<"date-time">;
  };
}
