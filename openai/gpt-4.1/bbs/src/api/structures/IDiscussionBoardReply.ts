import { tags } from "typia";

/**
 * Reply entity for the discussion board system, representing an individual post
 * within a topic thread.
 *
 * Each reply must belong to a valid topic (topic_id), be authored by a member
 * or admin (author_member_id or author_admin_id), and include validated
 * content. All replies support timestamps for creation and last update in
 * strict adherence to the discussion_board_replies Prisma model. Foreign key
 * references to member or admin authors enable audit trails and support future
 * moderation or compliance policies. No sensitive information such as password
 * hashes is ever included. Descriptions and field requirements directly reflect
 * the annotated Prisma schema, with all constraints enforced. Replies are
 * read-only for guests and may only be posted or edited by authenticated
 * members or admins. The object is the main communication primitive for
 * threaded conversations on the platform.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardReply = {
  /**
   * Primary key for the reply entity, uniquely identifying this reply record
   * in the system.
   *
   * Generated as a UUID according to the discussion_board_replies Prisma
   * table. Used throughout the discussion board system to reference replies,
   * enforce uniqueness, and support relational integrity. Not user-supplied
   * and always present.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the discussion_board_topics table, indicating
   * which topic this reply belongs to.
   *
   * Mandatory for every reply. A reply cannot exist without linking to a
   * valid topic. This ensures conversation threads remain attached to their
   * respective parent topics. Maps to the topic's primary key. Cannot be
   * updated after creation.
   */
  topic_id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the member author of the reply, when applicable.
   * Must be either a valid UUID of an existing member or null if the author
   * is an admin. Exactly one of author_member_id or author_admin_id is
   * non-null.
   */
  author_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Foreign key referencing the admin author of the reply, when applicable.
   * Must be either a valid UUID of an existing admin or null if the author is
   * a member. Exactly one of author_member_id or author_admin_id is
   * non-null.
   */
  author_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Main body/content of the reply. Text contributed by the member or admin
   * to the discussion thread, supporting business policies on safe and
   * effective communication.
   *
   * Length constraints: minimum 3 characters, maximum 2000 characters.
   * Subject to business validation for language, banned content, and
   * permitted character sets. Must not be empty or consist solely of
   * whitespace.
   */
  content: string & tags.MinLength<3> & tags.MaxLength<2000>;

  /**
   * Timestamp indicating when the reply was created. Populated automatically
   * by the system at creation time.
   *
   * Reflects the original posting time and is used for chronological ordering
   * of replies within a topic. Immutable after creation, matches the Prisma
   * schema 'created_at' column.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for the most recent update to the reply. Updated automatically
   * by the system whenever the reply's content is edited.
   *
   * Used for audit trail, consistency, and business validation purposes.
   * Matches the Prisma schema 'updated_at' column.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardReply {
  /**
   * Query and filter parameters for retrieving a paginated list of replies
   * attached to a discussion board topic.
   *
   * This schema supports pagination, searching, and sorting for replies as
   * part of the topic's threaded discussion. Primarily used in requests to
   * endpoints that list replies for a particular topic, this type allows
   * specifying the page, limit, order, date/time filters, as well as search
   * keywords within reply content. All fields are optional and may be used
   * flexibly to enable efficient browsing or targeted discovery in
   * long-running discussion threads.
   *
   * @author AutoBE
   * @prisma discussion_board_replies
   */
  export type IRequest = {
    /**
     * Page number for pagination (1-based index). Defaults to first page if
     * not specified.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of replies per page. Defaults to system standard
     * (e.g., 20), and cannot exceed 100.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Field to sort replies by: either 'created_at' (default, newest first)
     * or 'updated_at'.
     */
    sort?: "created_at" | "updated_at" | undefined;

    /**
     * Ordering direction: 'asc' for ascending (oldest first), 'desc' for
     * descending (newest first).
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Keyword(s) to search within the reply content. Optional.
     * Case-insensitive, partial matches allowed.
     */
    search?: string | undefined;

    /**
     * Filter replies to only those authored by a specific discussion board
     * member (by id, UUID). Optional.
     */
    author_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter replies to only those authored by a specific discussion board
     * admin (by id, UUID). Optional.
     */
    author_admin_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter replies created at or after this timestamp. Optional. ISO 8601
     * format.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter replies created at or before this timestamp. Optional. ISO
     * 8601 format.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Create-request DTO for posting a new reply in the discussion board. Used
   * when an authenticated member or admin wishes to contribute a reply to an
   * existing topic.
   *
   * Corresponds to the discussion_board_replies table's content field;
   * topic_id and author identification are derived from the authenticated
   * context and request path or session, and are not directly included in the
   * request body. The structure enforces all length and business validation
   * rules as specified in the relevant business documents and the Prisma
   * schema. Ensures safe posting practices by excluding all
   * non-user-controlled fields, actor IDs, and system-managed timestamps.
   * Secure by design, allowing business logic enforcement for anti-abuse,
   * content standards, and thread consistency.
   */
  export type ICreate = {
    /**
     * Main body/content of the reply to be posted. Input text by the member
     * or admin being added to a conversation thread.
     *
     * Length constraints: minimum 3 characters, maximum 2000 characters.
     * Field must comply with system validation policies (no banned content,
     * must not be empty or whitespace, and acceptable character sets).
     * Required for every create operation.
     */
    content: string & tags.MinLength<3> & tags.MaxLength<2000>;
  };

  /**
   * Update DTO for discussion board replies, corresponding to updates in the
   * 'discussion_board_replies' Prisma model.
   *
   * This type allows modification of reply content only. It does not permit
   * changing reply ownership, parent topic association, or timestamps
   * directly (except as updated automatically by the system).
   *
   * All fields are optional and support partial update (patching), following
   * the Partial<T> pattern for updates in RESTful APIs. System- and
   * relationship-managed fields cannot be changed by this type.
   *
   * No security or system fields (like author IDs, topic ID, created_at,
   * updated_at, etc.) are updatable via this type. Only content editing is
   * permitted, and business validation is required for length and prohibited
   * content. All updates are audit-traced by the backend using the
   * 'updated_at' timestamp.
   */
  export type IUpdate = {
    /**
     * Editable content/body of the reply, representing the text shown
     * publicly in the discussion thread. This is the only updatable field
     * when modifying replies. Must conform to business rules: between 3 and
     * 2000 characters, containing no prohibited or banned content. Special
     * formatting, if any, is handled outside this DTO. Only non-empty,
     * meaningful, and sanitized strings may be submitted. Changes are
     * subject to moderation and audit policies.
     */
    content?: string | undefined;
  };

  /**
   * Summary representation of a discussion board reply for use in
   * high-performance browsing, listings, and search result pages.
   *
   * Maps directly to the discussion_board_replies table in the business
   * database schema. Only public, safe-to-display fields are included;
   * passwords and internal system data are excluded by design. Reply
   * authorship can be attributed to either a member or an adminâ€”one and only
   * one is present per reply, conveyed by author_member_id or
   * author_admin_id. Timestamps support thread ordering and presence of
   * content supports text preview and search highlighting.
   *
   * This summary view is used for array listings (e.g.,
   * IPageIDiscussionBoardReply.ISummary) and API responses focused on
   * efficiency. For full details (including deep author info or moderation
   * history), use the comprehensive reply entity. Documentation and all
   * validation derive from the discussion_board_replies Prisma schema
   * specification.
   */
  export type ISummary = {
    /**
     * Unique identifier for the reply in the discussion. This property
     * corresponds to the primary key 'id' in the discussion_board_replies
     * table in the Prisma schema. Each reply on the board, whether posted
     * by a member or admin, is assigned a unique UUID upon creation to
     * ensure precise record keeping and facilitate reliable lookups. The
     * UUID format guarantees global uniqueness, which is critical for
     * distributed or federated system integration and deep-linking to
     * specific reply content.
     *
     * This identifier is used by the system to reference the reply
     * throughout all discussion operations, including displaying reply
     * chains under topics, replying to specific replies, and supporting
     * thread navigation. The system enforces UUID integrity through
     * validation at both database and application layers.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier for the parent discussion topic to which this reply
     * belongs. Directly references the 'topic_id' foreign key in the
     * discussion_board_replies table, which must match a valid
     * discussion_board_topics.id.
     *
     * This property is critical for organizing and retrieving replies under
     * their associated topic. Display and search functions rely on topic
     * linkage for rendering threaded discussions and for cascading deletes
     * when a topic is removed.
     *
     * Strictly enforced as a valid UUID to ensure referential integrity.
     * Replies cannot exist without a valid parent topic.
     */
    topic_id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the member who authored this reply. Represents a
     * reference to the discussion_board_members.id primary key. Only one of
     * 'author_member_id' or 'author_admin_id' will be set for a given reply
     * as enforced by system logic; the other will be null.
     *
     * This field is set when a standard user posts a reply. For replies
     * created by admins, this field is null and 'author_admin_id' is
     * populated. The dual-author model supports audit trails and permission
     * checks for reply lifecycle events.
     *
     * If null, indicates the reply was authored by an admin, not a member.
     */
    author_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Unique identifier of the admin who authored this reply, if any.
     * Represents a reference to discussion_board_admins.id. Mutually
     * exclusive with 'author_member_id'; only one will be present.
     *
     * Admin-authored replies have this field set, allowing for elevated
     * permissions and system actions such as moderation notifications,
     * admin interventions in discussions, or logging administrative
     * engagement. If null, the reply was authored by a member.
     *
     * Critical for distinguishing between regular and privileged actors in
     * discussion threads.
     */
    author_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Reply content string as submitted by the author. Enforces minimum and
     * maximum length constraints (business rules: minimum 3, maximum 2000
     * characters) per requirements documented in the
     * discussion_board_replies table and business documentation.
     *
     * This property holds the substantive contribution of the reply,
     * rendered as plain text for inclusion in the topic thread. All
     * user-search, keyword filtering, and topic context analysis is based
     * on this body field. The content undergoes sanitation and validation
     * to block prohibited content, ensure compliance, and maintain system
     * safety.
     *
     * Must not contain only whitespace or special characters. Empty-body
     * replies are explicitly disallowed as per business rules.
     */
    content: string;

    /**
     * Timestamp specifying when the reply was created in ISO 8601 date-time
     * format. Derived from the 'created_at' column in
     * discussion_board_replies; automatically populated by the system on
     * creation.
     *
     * Important for chronological rendering of replies within topics, sort
     * order, and time-based analytics. Also forms the foundation for
     * immutable audit trails and reply age enforcement (e.g., rate
     * limiting, topic closing).
     *
     * Timestamps are always in UTC to maintain consistency across
     * distributed systems. This field is required and present in all
     * replies.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for the last time the reply content was modified. Directly
     * tied to the 'updated_at' column in the discussion_board_replies
     * schema. Used for tracking reply edits, supporting edit histories,
     * audit compliance, and informing users of recent content changes.
     *
     * Similar to 'created_at', this field is always recorded in UTC using
     * standard ISO 8601 formatting. The value matches 'created_at' if no
     * edits have occurred. Variation between these two fields indicates
     * user or admin-initiated modifications.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
