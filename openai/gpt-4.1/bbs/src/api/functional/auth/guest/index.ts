import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardGuest } from "../../../structures/IDiscussionBoardGuest";

/**
 * Register a temporary guest session for unauthenticated user
 * (discussion_board_guests table).
 *
 * This endpoint allows a new guest session to be created by provisioning an
 * entry in the discussion_board_guests table. The primary purpose is to track
 * anonymous session or device activity with no credential requirement.
 *
 * Implementation leverages the anonymous_token field for device/session
 * distinction and stores only minimal, non-personal session identifiers. The
 * endpoint does not require or accept a password or PII. Unique anonymous_token
 * constraint is enforced at the database layer.
 *
 * Guest sessions are used for browser/device analytics, A/B testing, or future
 * personalization but do not enable posting or replying. If the anonymous_token
 * already exists and is not soft-deleted, the session may be resumed without
 * creating a duplicate.
 *
 * Security is basic: rate limits or abuse detection may restrict excessive
 * calls.
 *
 * Related operation: /auth/guest/refresh extends the validity of the guest
 * session token for longer tracking. Post and reply operations are forbidden
 * for this role.
 *
 * @param props.connection
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(connection: IConnection): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Response = IDiscussionBoardGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IDiscussionBoardGuest.IAuthorized =>
    typia.random<IDiscussionBoardGuest.IAuthorized>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Refresh a guest session using the anonymous_token (discussion_board_guests
 * table).
 *
 * Refreshes a guest session using their anonymous_token
 * (discussion_board_guests). This extends active session validity or updates
 * analytics for guests browsing the board without authentication.
 *
 * Under the hood, the endpoint updates the updated_at timestamp and may rotate
 * the anonymous_token if desired for privacy. No credential management or PII
 * is associated with this operation.
 *
 * Guest refresh is crucial for session continuity on the discussion board and
 * enables enhanced analytics, personalization, and future engagement
 * opportunities for guests (without posting ability).
 *
 * Security is ensured by checking that the anonymous_token exists and has not
 * been soft-deleted (deleted_at null). If validation fails, the session is
 * denied extension.
 *
 * Related: Used in parallel with /auth/guest/join; not related to member or
 * admin authentication. Logout simply consists of discarding the
 * anonymous_token client-side.
 *
 * If soft-deletion is performed in the future, the same anonymous_token cannot
 * be re-activated; a new session must be created via join.
 *
 * @param props.connection
 * @param props.body Guest session refresh payload; must include previously
 *   issued anonymous_token.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Guest session refresh payload; must include previously issued
     * anonymous_token.
     */
    body: IDiscussionBoardGuest.IRefresh;
  };
  export type Body = IDiscussionBoardGuest.IRefresh;
  export type Response = IDiscussionBoardGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): IDiscussionBoardGuest.IAuthorized =>
    typia.random<IDiscussionBoardGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
