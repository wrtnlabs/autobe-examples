import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAdmin } from "../../../structures/IDiscussionBoardAdmin";

/**
 * Registers a new discussion board admin in the discussion_board_admins table
 * and issues JWT tokens (IDiscussionBoardAdmin.IAuthorized).
 *
 * The purpose of this API is to allow the creation of new administrator
 * accounts for the discussion board, providing privileged access for future
 * administration and moderation. It writes to the discussion_board_admins
 * Prisma DB table, requiring unique email, username, and securely hashed
 * password (password_hash), while setting email_verified to false until after
 * email verification workflow. The operation also sets
 * registration_completed_at, created_at, and updated_at according to onboarding
 * and audit requirements. Security is critical: only permitted fields are
 * exposed and returned; the password must be hashed before saving; duplicate
 * emails/usernames are prevented and properly handled by unique constraints.
 * Upon successful completion, the system issues JWT tokens encapsulated in the
 * IDiscussionBoardAdmin.IAuthorized DTO, containing access and refresh tokens
 * as well as minimal admin profile data for session management. This operation
 * works in concert with login and refresh operations, and requires email
 * verification before an admin may sign in fully. Error handling covers
 * duplicate entries, weak passwords, or validation issues, as defined in schema
 * and requirements. Do not expose sensitive password details in responses.
 *
 * @param props.connection
 * @param props.body Information required for admin registration: email,
 *   username, password (to be hashed), etc. Follows schema:
 *   IDiscussionBoardAdmin.ICreate.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Information required for admin registration: email, username,
     * password (to be hashed), etc. Follows schema:
     * IDiscussionBoardAdmin.ICreate.
     */
    body: IDiscussionBoardAdmin.ICreate;
  };
  export type Body = IDiscussionBoardAdmin.ICreate;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticates a discussion board admin and issues access/refresh JWT tokens
 * (IDiscussionBoardAdmin.IAuthorized).
 *
 * This API operation allows a registered administrator to log in to the
 * discussion board by verifying their email and password. It reads from the
 * discussion_board_admins table, ensuring that credentials match the unique
 * email and the securely stored password_hash, and that email_verified is true
 * and deleted_at is NULL. On success, it generates JWT tokens encapsulated in
 * the IDiscussionBoardAdmin.IAuthorized DTO for session management, conforming
 * to security best practices as described in the schema. Login attempts for
 * non-existent accounts, unverified email addresses, or incorrect credentials
 * are safely rejected and loggable for audit and failed login tracking. This
 * operation is essential to the admin authentication workflow and closely tied
 * to registration and token refresh endpoints. No sensitive password data is
 * ever returned.
 *
 * @param props.connection
 * @param props.body Admin login credentials: email and password (to be hashed
 *   and checked). Follows schema: IDiscussionBoardAdmin.ILogin.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Admin login credentials: email and password (to be hashed and
     * checked). Follows schema: IDiscussionBoardAdmin.ILogin.
     */
    body: IDiscussionBoardAdmin.ILogin;
  };
  export type Body = IDiscussionBoardAdmin.ILogin;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refreshes JWT access/refresh tokens for an authenticated admin
 * (IDiscussionBoardAdmin.IAuthorized).
 *
 * This API operation allows a previously authenticated admin to refresh their
 * JWT session tokens without re-entering a password, provided they have a valid
 * refresh token. It validates the supplied refresh token against current admin
 * records in discussion_board_admins (deleted_at must be NULL, account not
 * soft-deleted), and issues new tokens conforming to security and business
 * policy (30-minute access token/30-day refresh window). Result is a new
 * IDiscussionBoardAdmin.IAuthorized DTO for continued access. Failed or expired
 * refresh tokens result in error responses; all refresh actions are logged for
 * audit. Integrates with join and login flows in the overall authentication
 * tree.
 *
 * @param props.connection
 * @param props.body Payload containing necessary refresh token or relevant
 *   information. Follows schema: IDiscussionBoardAdmin.IRefresh.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Payload containing necessary refresh token or relevant information.
     * Follows schema: IDiscussionBoardAdmin.IRefresh.
     */
    body: IDiscussionBoardAdmin.IRefresh;
  };
  export type Body = IDiscussionBoardAdmin.IRefresh;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
