import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardReply } from "../../../../structures/IDiscussionBoardReply";
import { IPageIDiscussionBoardReply } from "../../../../structures/IPageIDiscussionBoardReply";

/**
 * Get a paginated, searchable list of replies for a specific topic from the
 * discussion_board_replies table.
 *
 * This operation fetches a paginated, optionally filtered and sorted list of
 * replies for a specific topic. Operating on the discussion_board_replies
 * table, it uses the parent topic's UUID to scope the search, with advanced
 * query capabilities specified in the request body using the
 * IDiscussionBoardReply.IRequest schema. Guests, members, and admins can read
 * all replies.
 *
 * Search criteria might include filtering by author (member or admin), keyword
 * match in content, creation time window, and sorting by date, as enabled by
 * the schema. Results are returned as a paginated structure leveraging the
 * IPageIDiscussionBoardReply.ISummary response type, providing summary details
 * suitable for high-throughput browsing scenarios.
 *
 * Access is intentionally open (empty authorizationRoles array), reflecting
 * business rules that public discussion visibility is a core feature. Error
 * handling covers non-existent topics, empty result sets (returning an empty
 * list), and invalid query parameters. The operation is designed for
 * integration in browsing, search, and topic detail views, ensuring inclusivity
 * and performance across all user roles.
 *
 * @param props.connection
 * @param props.topicId Unique identifier (UUID) of the parent discussion topic
 *   for which to retrieve replies.
 * @param props.body Search, filter, sort, and pagination criteria for listing
 *   replies to a given topic.
 * @path /discussionBoard/topics/:topicId/replies
 * @accessor api.functional.discussionBoard.topics.replies.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the parent discussion topic for which to
     * retrieve replies.
     */
    topicId: string & tags.Format<"uuid">;

    /**
     * Search, filter, sort, and pagination criteria for listing replies to
     * a given topic.
     */
    body: IDiscussionBoardReply.IRequest;
  };
  export type Body = IDiscussionBoardReply.IRequest;
  export type Response = IPageIDiscussionBoardReply.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/topics/:topicId/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/topics/${encodeURIComponent(props.topicId ?? "null")}/replies`;
  export const random = (): IPageIDiscussionBoardReply.ISummary =>
    typia.random<IPageIDiscussionBoardReply.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific reply to a topic (discussion_board_replies
 * table).
 *
 * Fetch and display a single reply belonging to a specific topic on the
 * discussion board. All users, including guests, can access this endpoint to
 * view the content, author, and timestamps for the reply.
 *
 * The reply is identified by both the parent topicId and the replyId. The
 * operation ensures that the reply exists, belongs to the specified topic, and
 * is not soft-deleted. If the reply does not exist or is not associated with
 * the given topic, the operation returns an error indicating not found. All
 * author information returned is limited to display names or pseudonymized
 * identifiers per privacy rules.
 *
 * This read-only endpoint supports transparent access for community members and
 * visitors, and helps power deep-linking to particular replies for reference or
 * shareability. Error responses are handled gracefully, with user-friendly
 * messages for not-found or deleted resources. This is a high-traffic endpoint
 * within transparent public discussion access.
 *
 * @param props.connection
 * @param props.topicId Unique identifier of the parent topic the reply belongs
 *   to.
 * @param props.replyId Unique identifier of the reply to retrieve.
 * @path /discussionBoard/topics/:topicId/replies/:replyId
 * @accessor api.functional.discussionBoard.topics.replies.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent topic the reply belongs to. */
    topicId: string & tags.Format<"uuid">;

    /** Unique identifier of the reply to retrieve. */
    replyId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardReply;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/topics/:topicId/replies/:replyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/topics/${encodeURIComponent(props.topicId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): IDiscussionBoardReply =>
    typia.random<IDiscussionBoardReply>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.param("replyId")(() => typia.assert(props.replyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
