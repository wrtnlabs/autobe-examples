import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardReply } from "../../../../../structures/IDiscussionBoardReply";

/**
 * Create a new reply to a topic (discussion_board_replies table).
 *
 * Allow logged-in members or admins to post a reply to a given topic. The
 * parent topic is identified by topicId and must exist. The endpoint receives
 * content for the reply and, on passing validation (body length, business
 * rules), creates the new reply in association with the correct author.
 *
 * The operation verifies the authentication status and role of the user. Guests
 * are not allowed to use this endpoint; action is denied with an appropriate
 * authentication-required message if a guest attempts access. Business
 * validation rejects submissions violating spam, duplicate, or prohibited
 * content policies. If the reply is successfully created, it is immediately
 * available for other users to view in the topic thread. The response includes
 * the reply's content, author, associated topic, and timestamps.
 *
 * Edge cases, such as replying to a non-existent or closed topic, result in
 * error responses. Input validation failures return actionable error messages
 * stating the problem. Reply rate-limiting is also enforced per business
 * constraints.
 *
 * @param props.connection
 * @param props.topicId Unique identifier of the topic to which the reply will
 *   be posted.
 * @param props.body Content and minimal information required to create a reply
 *   to a topic. Must meet business validation rules.
 * @path /discussionBoard/admin/topics/:topicId/replies
 * @accessor api.functional.discussionBoard.admin.topics.replies.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the topic to which the reply will be posted. */
    topicId: string & tags.Format<"uuid">;

    /**
     * Content and minimal information required to create a reply to a
     * topic. Must meet business validation rules.
     */
    body: IDiscussionBoardReply.ICreate;
  };
  export type Body = IDiscussionBoardReply.ICreate;
  export type Response = IDiscussionBoardReply;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/topics/:topicId/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/topics/${encodeURIComponent(props.topicId ?? "null")}/replies`;
  export const random = (): IDiscussionBoardReply =>
    typia.random<IDiscussionBoardReply>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update reply content in a topic (discussion_board_replies table).
 *
 * Update an existing reply belonging to a topic on the discussion board. This
 * allows authenticated members or admins to edit reply content as long as they
 * are the original author (or have admin privilege). The reply is identified by
 * both the topicId (for topic context) and replyId (for reply selection). Only
 * content editing is permitted; authorship and topic linkage remain unchanged.
 *
 * Security considerations require checks that prevent users from editing
 * others' replies unless the user is an admin. All updates are tracked by
 * updating the updated_at timestamp and optionally recording moderation
 * activity. Content validation enforces minimum and maximum character lengths
 * and business rules concerning language moderation or prohibited content.
 *
 * In the context of business logic, this operation is tightly coupled with the
 * reply and topic relationship and interacts with the audit trail for
 * compliance. Any error in authorization (e.g., non-author updating) or missing
 * path parameter will result in a clear error. Related APIs include reply
 * creation and deletion endpoints, which also use the same identifiers in path
 * parameters.
 *
 * Proper error handling ensures that only valid, authenticated users can update
 * replies and prevents accidental or malicious content alteration. All changes
 * are immediately reflected to all users viewing the topic discussion thread.
 *
 * @param props.connection
 * @param props.topicId Unique identifier of the topic to which the reply
 *   belongs
 * @param props.replyId Unique identifier of the reply to be updated within the
 *   specified topic
 * @param props.body Fields for updating the reply content
 * @path /discussionBoard/admin/topics/:topicId/replies/:replyId
 * @accessor api.functional.discussionBoard.admin.topics.replies.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the topic to which the reply belongs */
    topicId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the reply to be updated within the specified
     * topic
     */
    replyId: string & tags.Format<"uuid">;

    /** Fields for updating the reply content */
    body: IDiscussionBoardReply.IUpdate;
  };
  export type Body = IDiscussionBoardReply.IUpdate;
  export type Response = IDiscussionBoardReply;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/topics/:topicId/replies/:replyId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/topics/${encodeURIComponent(props.topicId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): IDiscussionBoardReply =>
    typia.random<IDiscussionBoardReply>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.param("replyId")(() => typia.assert(props.replyId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a reply from a topic (discussion_board_replies table).
 *
 * Permanently remove an existing reply from the specified topic, identified by
 * both topicId and replyId. Only authenticated users who authored the reply or
 * are admins may perform this operation. Hard deletion is performed as the
 * reply table lacks a soft delete (deleted_at) field; once removed, the reply
 * cannot be recovered.
 *
 * Access control is enforced: members may delete their own replies, admins may
 * delete any reply. All deletions are auditable for compliance. Deletion does
 * not affect parent topics but immediately removes the reply from all discourse
 * views.
 *
 * Attempting to delete a reply without proper authorization, with
 * missing/invalid parameters, or targeting a non-existent reply will result in
 * an error explaining the reason. Related endpoints allow reply creation and
 * editing, but only this operation handles full removal of reply data from the
 * database.
 *
 * @param props.connection
 * @param props.topicId Unique identifier of the topic to which the reply
 *   belongs
 * @param props.replyId Unique identifier of the reply to be deleted within the
 *   specified topic
 * @path /discussionBoard/admin/topics/:topicId/replies/:replyId
 * @accessor api.functional.discussionBoard.admin.topics.replies.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the topic to which the reply belongs */
    topicId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the reply to be deleted within the specified
     * topic
     */
    replyId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/topics/:topicId/replies/:replyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/topics/${encodeURIComponent(props.topicId ?? "null")}/replies/${encodeURIComponent(props.replyId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.param("replyId")(() => typia.assert(props.replyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
