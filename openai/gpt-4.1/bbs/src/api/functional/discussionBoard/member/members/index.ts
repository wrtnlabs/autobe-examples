import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardMember } from "../../../../structures/IDiscussionBoardMember";

/**
 * Update an existing discussion board member (discussion_board_members table)
 * record by memberId.
 *
 * This API allows a discussion board member or an admin to update a member's
 * details. The primary use case is for users to update their own profile
 * information or for admins to update any member's account for management
 * purposes. The operation enforces email and username uniqueness, following the
 * database index constraints. Email changes require subsequent verification,
 * and password changes must use a hashed representation, not plain text. The
 * operation validates all input fields according to business rules: emails must
 * be valid and unique, usernames must not clash with existing users, and
 * passwords must meet established length and complexity rules. The system will
 * reject attempts to set inappropriate values or to update with information
 * that would violate business logic.
 *
 * Security considerations dictate that only the owning member (authenticated
 * via session/JWT) or an administrator may update a member account. Attempts by
 * other members or guests will result in an appropriate authorization failure
 * message. Updated_at is always set to the present time on any update, enabling
 * audit tracing. Soft-deleted accounts (where deleted_at is set) cannot be
 * updated and return an error if attempted.
 *
 * If a member's email is updated, their email_verified status will be reset,
 * and a new verification process must be completed. Admins may update all
 * non-credential fields directly but must handle credential resets according to
 * policy. Invalid updates—such as duplicate email/username or a prohibited
 * password—result in clear error messages with actionable guidance. This
 * endpoint helps members maintain control of their personal information while
 * ensuring system integrity.
 *
 * @param props.connection
 * @param props.memberId Unique identifier for the discussion board member to be
 *   updated.
 * @param props.body Fields required to update an existing member account,
 *   following business rules for uniqueness, non-emptiness, and hashed password
 *   requirements.
 * @path /discussionBoard/member/members/:memberId
 * @accessor api.functional.discussionBoard.member.members.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the discussion board member to be updated. */
    memberId: string & tags.Format<"uuid">;

    /**
     * Fields required to update an existing member account, following
     * business rules for uniqueness, non-emptiness, and hashed password
     * requirements.
     */
    body: IDiscussionBoardMember.IUpdate;
  };
  export type Body = IDiscussionBoardMember.IUpdate;
  export type Response = IDiscussionBoardMember;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/members/:memberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): IDiscussionBoardMember =>
    typia.random<IDiscussionBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft delete) a discussion board member (discussion_board_members
 * table) account by setting deleted_at, identified by memberId.
 *
 * This API allows a member or admin to delete a discussion board member account
 * using a unique memberId. Instead of a hard delete, it marks the account's
 * deleted_at field with the current timestamp (soft delete), supporting future
 * recovery and audit requirements. Deleting an account disables further logins
 * for that member, prevents any authoring of topics or replies, and removes
 * access to personal account settings. Posts and replies authored by the member
 * remain visible unless additional moderation policies require anonymization or
 * removal. Authorization checks ensure that only the member themselves,
 * authenticated via session/JWT, or an admin may perform this deletion. The
 * operation cannot be performed on already soft-deleted accounts and will
 * return an error if attempted. This design preserves discussion continuity and
 * ensures that system audit trails reflect all account changes as mandated by
 * business and compliance rules.
 *
 * Security is enforced by verifying the requesting user's identity and role.
 * Members can only delete their own accounts, while admins can delete any
 * member's account. Attempts to delete another member's account by non-admins
 * will fail with an explicit permission denied message. Deleted accounts are
 * non-recoverable without administrative intervention. If an account is already
 * marked as deleted, a clear error is returned. There is no response body for
 * this operation; success is indicated via standard HTTP status.
 *
 * @param props.connection
 * @param props.memberId Unique identifier for the discussion board member to
 *   delete.
 * @path /discussionBoard/member/members/:memberId
 * @accessor api.functional.discussionBoard.member.members.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the discussion board member to delete. */
    memberId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/member/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
