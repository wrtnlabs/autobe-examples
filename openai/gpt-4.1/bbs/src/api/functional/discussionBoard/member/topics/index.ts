import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardTopic } from "../../../../structures/IDiscussionBoardTopic";
export * as replies from "./replies/index";

/**
 * Create a new discussion topic (discussion_board_topics table).
 *
 * This API operation enables members or admins to create a new discussion
 * topic, serving as the primary means of starting conversations or debates on
 * economic and political issues. The topic consists of a subject (between 5 and
 * 120 characters) and body/content (between 10 and 4000 characters). Either the
 * member or admin author's identifier is required, and the system enforces that
 * only one author type can be assigned per topic. Validation rules, such as
 * duplicate prevention, rate limiting, and banned content checks, are performed
 * according to business policies.
 *
 * After successful creation, the topic becomes immediately visible to all users
 * (guests, members, admins), appearing at the top of topic listings sorted by
 * recency. Rate limits are enforced to prevent spam (e.g., 5 topics per user
 * per hour). Guests attempting to use this endpoint will be denied. Input
 * sanitation and error handling ensure safe creation and clear user feedback on
 * validation failures. This operation is directly linked to the
 * 'discussion_board_topics' entity and maintains relationships to the author's
 * member or admin record as per schema.
 *
 * @param props.connection
 * @param props.body New discussion topic information: subject, content, and
 *   author identification (as member or admin).
 * @path /discussionBoard/member/topics
 * @accessor api.functional.discussionBoard.member.topics.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * New discussion topic information: subject, content, and author
     * identification (as member or admin).
     */
    body: IDiscussionBoardTopic.ICreate;
  };
  export type Body = IDiscussionBoardTopic.ICreate;
  export type Response = IDiscussionBoardTopic;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/member/topics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/member/topics";
  export const random = (): IDiscussionBoardTopic =>
    typia.random<IDiscussionBoardTopic>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing discussion topic (discussion_board_topics table).
 *
 * This API operation enables a member, admin, or the original author to update
 * the subject (title) and/or content (body) of an existing discussion topic.
 * The operation references the 'discussion_board_topics' database table and
 * requires the topic's unique identifier (topicId) as a path parameter. Updates
 * are validated to ensure subject and content meet length constraints (subject:
 * 5-120 characters, content: 10-4000 characters), do not violate
 * duplication/business rules, and have no prohibited content. Ownership checks
 * ensure only the topic's author or an admin can edit the topic; other users
 * receive a permission error.
 *
 * Upon successful update, the system saves the current timestamp as the new
 * 'updated_at' value, maintaining full edit history compliance. The response
 * includes the latest state of the topic. Input sanitation and validation are
 * strictly enforced. Attempted edits by guests or unauthorized users are denied
 * with an appropriate error message.
 *
 * @param props.connection
 * @param props.topicId Unique identifier of the topic to update
 * @param props.body Fields to update in the topic (subject/content); must
 *   comply with length and content rules.
 * @path /discussionBoard/member/topics/:topicId
 * @accessor api.functional.discussionBoard.member.topics.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the topic to update */
    topicId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the topic (subject/content); must comply with
     * length and content rules.
     */
    body: IDiscussionBoardTopic.IUpdate;
  };
  export type Body = IDiscussionBoardTopic.IUpdate;
  export type Response = IDiscussionBoardTopic;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/topics/:topicId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/topics/${encodeURIComponent(props.topicId ?? "null")}`;
  export const random = (): IDiscussionBoardTopic =>
    typia.random<IDiscussionBoardTopic>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a discussion topic and all its replies from the
 * discussion_board_topics table.
 *
 * This operation provides the capability to permanently delete a discussion
 * topic from the system database. According to the Prisma schema, the operation
 * directly manipulates the discussion_board_topics table, using the unique
 * topic ID (UUID) for precise identification. It is designed to enforce access
 * control, validating whether the requesting user is either the original author
 * (member or admin) or possesses admin privileges.
 *
 * Upon invocation, the system checks the requester's authorization based on
 * login status and account role. Members and admins can erase topics they
 * authored; admins may also remove any topic for moderation or compliance.
 *
 * The hard delete cascades to all linked discussion_board_replies via the
 * Prisma relation, ensuring no orphaned replies are left. The operation is
 * essential for user-requested removals, legal compliance, or post-moderation.
 * No soft-delete field is present, thus the action is not reversible.
 * Associated business rules—such as handling reply deletion and audit
 * logging—must be enforced in implementation logic.
 *
 * Error handling must be robust: attempts to delete non-owned or
 * already-removed topics should return a clear permission denied or not found
 * error, with explanatory messages to the client while not leaking sensitive
 * details.
 *
 * @param props.connection
 * @param props.topicId Unique identifier (UUID) of the topic to delete.
 * @path /discussionBoard/member/topics/:topicId
 * @accessor api.functional.discussionBoard.member.topics.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the topic to delete. */
    topicId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/member/topics/:topicId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/topics/${encodeURIComponent(props.topicId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
