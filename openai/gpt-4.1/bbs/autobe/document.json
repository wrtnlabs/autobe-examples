{"operations":[{"specification":"Create a registration endpoint for guests of the discussion board system. This operation allows unauthenticated visitors to register as a guest, tracking their session using an anonymous_token. The guest entity is backed by the 'discussion_board_guests' table, which includes the following relevant fields: id (PK), anonymous_token (randomly generated for session/device tracking), created_at (timestamp of first guest record creation), updated_at (last session update), and deleted_at (soft deletion marker, null when active) as per the Prisma schema.\n\nThis API is responsible for provisioning a temporary guest account for tracking session or device activity, without collecting personal credentials. No login or authentication is involved for guests. The response returns an authorization structure (anonymous_token and guest id) allowing the client to store and use the identifier to continue browsing sessions. No personal information is accepted or returned. If a guest with the same anonymous_token exists and is not soft-deleted, the system may re-use it for session continuity.\n\nSecurity: Guests do not authenticate, but a token is used to enable personalization or session tracking. Deletion of a guest record may be soft (deleted_at set) for privacy compliance in the future, as per business requirements. Only basic anti-abuse logic applies (e.g., rate limits per IP). This operation does NOT create a member or admin.\n\nRole integration: Only unauthenticated visitors use this endpoint. Related operations: guest token refresh. Does not overlap with member or admin registration.\n\nValidation: Anonymous tokens must be unique (see anonymous_token unique constraint).\n\nError Handling: Provides clear business error if session creation fails or if limit/rate exceeded.\n\nRelated API: /auth/guest/refresh is available for temporary token extension.","authorizationType":"join","description":"This endpoint allows a new guest session to be created by provisioning an entry in the discussion_board_guests table. The primary purpose is to track anonymous session or device activity with no credential requirement.\n\nImplementation leverages the anonymous_token field for device/session distinction and stores only minimal, non-personal session identifiers. The endpoint does not require or accept a password or PII. Unique anonymous_token constraint is enforced at the database layer.\n\nGuest sessions are used for browser/device analytics, A/B testing, or future personalization but do not enable posting or replying. If the anonymous_token already exists and is not soft-deleted, the session may be resumed without creating a duplicate.\n\nSecurity is basic: rate limits or abuse detection may restrict excessive calls.\n\nRelated operation: /auth/guest/refresh extends the validity of the guest session token for longer tracking. Post and reply operations are forbidden for this role.","summary":"Register a temporary guest session for unauthenticated user (discussion_board_guests table).","parameters":[],"requestBody":null,"responseBody":{"description":"Guest session details with anonymous_token for client-side storage and tracking.","typeName":"IDiscussionBoardGuest.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"Create a token/session refresh endpoint for existing guest users on the discussion board system. This operation enables previously registered guests to refresh their anonymous_token-based session by validating the provided anonymous_token. The API is backed by the 'discussion_board_guests' table, which includes: id (PK), anonymous_token (unique identifier for session/device), created_at (initial session creation), updated_at (last session update/refresh), and deleted_at (soft deletion; null when active).\n\nRequest: The guest client must provide the existing anonymous_token issued at join; the system will validate that the record exists and is not soft-deleted. Upon success, the API refreshes the updated_at timestamp (and may optionally rotate the token for enhanced privacy or security).\n\nSecurity: Ensures only active (non-deleted) guest sessions can be refreshed. Invalid or expired tokens result in error. No personal credentials or identity required.\n\nRole integration: Only unauthenticated guest sessions use this endpoint. This is not a login or password-based refresh. Overlaps only with guest session join.\n\nValidation: The anonymous_token is required in the request, must match an active guest, and must comply with unique/index constraints.\n\nError Handling: Provides clear business error if the token is invalid, expired, or corresponds to a soft-deleted guest. Handles abuse/rate limits.\n\nRelated API: /auth/guest/join for initial registration of guest session.","authorizationType":"refresh","description":"Refreshes a guest session using their anonymous_token (discussion_board_guests). This extends active session validity or updates analytics for guests browsing the board without authentication.\n\nUnder the hood, the endpoint updates the updated_at timestamp and may rotate the anonymous_token if desired for privacy. No credential management or PII is associated with this operation.\n\nGuest refresh is crucial for session continuity on the discussion board and enables enhanced analytics, personalization, and future engagement opportunities for guests (without posting ability).\n\nSecurity is ensured by checking that the anonymous_token exists and has not been soft-deleted (deleted_at null). If validation fails, the session is denied extension.\n\nRelated: Used in parallel with /auth/guest/join; not related to member or admin authentication. Logout simply consists of discarding the anonymous_token client-side.\n\nIf soft-deletion is performed in the future, the same anonymous_token cannot be re-activated; a new session must be created via join.","summary":"Refresh a guest session using the anonymous_token (discussion_board_guests table).","parameters":[],"requestBody":{"description":"Guest session refresh payload; must include previously issued anonymous_token.","typeName":"IDiscussionBoardGuest.IRefresh"},"responseBody":{"description":"Refreshed guest session info with potentially updated anonymous_token details.","typeName":"IDiscussionBoardGuest.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"This operation enables new users to register as 'members' of the economic/political discussion board using their email, username, and password. Upon successful submission, the system stores the email, hashed password, and username in the 'discussion_board_members' table. Email verification is required for account completion, as indicated by the 'email_verified' boolean and 'registration_completed_at' fields. The purpose of this operation is to onboard users who wish to post topics or replies, while requiring unique, verified emails and usernames per business rules. Security is ensured by storing only hashed passwords and confirming registration via the 'email_verified' field. Soft deletion is supported as shown by 'deleted_at', though not directly used in registration. This operation forms the entry point for authenticated participation by creating a new member entry.","authorizationType":"join","description":"This API operation allows a guest to register as a member by providing a unique email address, a display username, and a password. Only fields actually present in the 'discussion_board_members' table are accepted: 'email', 'username', and 'password_hash' (which is computed and stored securely). The user must verify their email; until then, the 'email_verified' flag is false, and account activation is not complete. This operation supports initial account creation, but does not finalize email verification or session token issuance.\n\nOnly users with unique email and username values may register; duplicate attempts are prevented using database constraints. No moderation or admin approval is enforced at registration for members. Upon registration, audit fields 'created_at' and 'registration_completed_at' capture creation time, while 'deleted_at' is unused at this phase. All authentication logic, including password hashing and email validation, must reference these schema fields only.\n\nSecurity: Passwords are hashed (never stored in plaintext), and email/username must conform to uniqueness and format requirements. The member cannot log in until email verification is completed. This operation does not grant posting rights until account is verified.\n\nThe operation is mandatory for users wishing to create topics or replies; guests may not register multiple times with the same email/username. Failed registration attempts provide error messages based on actual DB constraint violations.\n\nThis endpoint is always used before login or other authentication steps. It does not generate JWT tokens until email is verified.","summary":"Register a new member (discussion_board_members) account for posting topics or replies.","parameters":[],"requestBody":{"description":"Registration information containing email, username, and password for new member account creation.","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"Authorized session and member account information upon successful registration and email verification.","typeName":"IDiscussionBoardMember.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/member/join","method":"post"},{"specification":"This operation enables existing members to authenticate (login) by submitting their registered email and password. The API validates credentials against values in the 'discussion_board_members' table: email (case-insensitive match), and password (hashed and compared to 'password_hash' field). Upon successful authentication, the operation checks 'email_verified' status; only verified accounts can proceed. On success, a new session JWT is issued, referencing the member's 'id', and permissions appropriate to the 'member' role. Failure to authenticate (invalid email, wrong password, unverified account) results in an appropriate error with no session issued. Security and account recovery adhere to password and lockout business rules. Passwords are stored only in hashed form. The operation is essential for enabling participation as a member (posting topics or replies).","authorizationType":"login","description":"This endpoint processes login attempts for registered members. Input is matched solely against schema fields: 'email' and 'password_hash'. The password submitted by the user is securely hashed before comparison. Authentication fails if either a matching email is not found, the hashed password does not match, or 'email_verified' is not true. Only after passing these conditions does the user receive a session and associated authorization tokens.\n\nOn success, the system generates and returns a new JWT token referencing the member's 'id', role ('member'), and appropriate permissions for posting and interaction on the board. Failed attempts do not leak user existence: all error messages are generic for invalid credentials or unverified accounts. Account lockout on repeated failures would reference only 'email' and lockout business logic, not implemented directly in this table.\n\nRegistration, email verification, and password recovery/lockout are handled via separate flows. This login operation is required before performing any other member-only actions. Audit fields such as 'created_at', 'updated_at', and 'deleted_at' are not used directly in this authentication step.","summary":"Authenticate as a member ('discussion_board_members') and obtain an access JWT for posting/replying.","parameters":[],"requestBody":{"description":"Login form with member email and password for authentication.","typeName":"IDiscussionBoardMember.ILogin"},"responseBody":{"description":"Authorization payload including JWT, member ID, and role/permissions for authenticated session.","typeName":"IDiscussionBoardMember.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/member/login","method":"post"},{"specification":"This operation enables a member with a valid refresh token to renew their access (JWT) session. On request, the API confirms the token is both present and valid, then looks up the corresponding member in 'discussion_board_members' by 'id' (payload in token). The system checks 'deleted_at' and 'email_verified' to ensure the member is still active and eligible for session renewal. If so, a new access JWT is issued with ID, role, and permissions. If not, session refresh is denied. The new token inherits permissions reflecting current membership. Should the token or member be invalid, security fallback prevents session extension. This operation provides seamless long-lived session continuation within the 30-day business threshold. Audit fields are not directly referenced in this process.","authorizationType":"refresh","description":"This endpoint allows a member with a valid refresh token to renew their authenticated session, using only data present in the access/refresh payload (typically 'id'). It looks up the member in 'discussion_board_members' and verifies the account is active ('deleted_at' is null), and that the email has been verified ('email_verified' is true). If all checks pass, a new JWT is issued for ongoing participation.\n\nThe API does not use or reference any fields not present in the actual schema: it relies on 'id', 'deleted_at', and 'email_verified' as available. Expired, revoked, or invalid tokens are rejected with generic error messages. The operation is required for seamless posting and reply functionality during long sessions.\n\nNo session event/audit logging fields are present in the member schema, so history is handled outside this operation. This step is mandatory before continuing any protected operations (create, update, delete topics/replies) when the access token nears expiry.","summary":"Refresh an authenticated member ('discussion_board_members') session and extend access token.","parameters":[],"requestBody":{"description":"Refresh token request referencing existing member session for renewal.","typeName":"IDiscussionBoardMember.IRefresh"},"responseBody":{"description":"New authorized session (access JWT) for the member role, permitting continued posting/replying.","typeName":"IDiscussionBoardMember.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/member/refresh","method":"post"},{"specification":"This operation registers a new admin user in the economic/political discussion board system. It creates a new record in the discussion_board_admins table using the required fields: email, username, password_hash (to be stored after securely hashing the plaintext password in the backend service), and sets email_verified initially to false. The registration_completed_at timestamp is set once email verification is completed. Additional fields for audit and traceability, such as created_at and updated_at, are set automatically upon creation. The operation also enforces uniqueness for email and username based on schema constraints. Upon successful registration, the system issues a JWT-based authorized session to the admin, following the business requirements for token lifetime and session handling. This operation does not allow setting admin status for others; accounts are created as self-signup or through a privileged workflow. All required onboarding security and audit workflow requirements are described in the schema documentation. The response contains authentication tokens following IDiscussionBoardAdmin.IAuthorized DTO conventions.","authorizationType":"join","description":"The purpose of this API is to allow the creation of new administrator accounts for the discussion board, providing privileged access for future administration and moderation. It writes to the discussion_board_admins Prisma DB table, requiring unique email, username, and securely hashed password (password_hash), while setting email_verified to false until after email verification workflow. The operation also sets registration_completed_at, created_at, and updated_at according to onboarding and audit requirements. Security is critical: only permitted fields are exposed and returned; the password must be hashed before saving; duplicate emails/usernames are prevented and properly handled by unique constraints. Upon successful completion, the system issues JWT tokens encapsulated in the IDiscussionBoardAdmin.IAuthorized DTO, containing access and refresh tokens as well as minimal admin profile data for session management. This operation works in concert with login and refresh operations, and requires email verification before an admin may sign in fully. Error handling covers duplicate entries, weak passwords, or validation issues, as defined in schema and requirements. Do not expose sensitive password details in responses.","summary":"Registers a new discussion board admin in the discussion_board_admins table and issues JWT tokens (IDiscussionBoardAdmin.IAuthorized).","parameters":[],"requestBody":{"description":"Information required for admin registration: email, username, password (to be hashed), etc. Follows schema: IDiscussionBoardAdmin.ICreate.","typeName":"IDiscussionBoardAdmin.ICreate"},"responseBody":{"description":"Authenticated admin session tokens and profile information after successful registration (IDiscussionBoardAdmin.IAuthorized).","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"This operation authenticates a discussion board administrator using their registered email and password, validating credentials against the discussion_board_admins table. The password submitted by the admin is securely compared (hashed) with the stored password_hash. Only admins with email_verified set to true and non-deleted (deleted_at IS NULL) accounts are allowed to log in. If credentials and status are valid, new session tokens (JWT) are generated and provided in the response, following the duration and refresh policy described in the requirements. The response DTO is IDiscussionBoardAdmin.IAuthorized, containing access and refresh tokens for subsequent role-authenticated operations. On authentication failure (invalid credentials, unverified email, or soft-deleted account), a clear and secure error response is returned. This operation directly supports the admin sign-in process and is used along with registration and token refresh in the overall authentication strategy.","authorizationType":"login","description":"This API operation allows a registered administrator to log in to the discussion board by verifying their email and password. It reads from the discussion_board_admins table, ensuring that credentials match the unique email and the securely stored password_hash, and that email_verified is true and deleted_at is NULL. On success, it generates JWT tokens encapsulated in the IDiscussionBoardAdmin.IAuthorized DTO for session management, conforming to security best practices as described in the schema. Login attempts for non-existent accounts, unverified email addresses, or incorrect credentials are safely rejected and loggable for audit and failed login tracking. This operation is essential to the admin authentication workflow and closely tied to registration and token refresh endpoints. No sensitive password data is ever returned.","summary":"Authenticates a discussion board admin and issues access/refresh JWT tokens (IDiscussionBoardAdmin.IAuthorized).","parameters":[],"requestBody":{"description":"Admin login credentials: email and password (to be hashed and checked). Follows schema: IDiscussionBoardAdmin.ILogin.","typeName":"IDiscussionBoardAdmin.ILogin"},"responseBody":{"description":"Admin session access/refresh tokens and profile information after successful authentication (IDiscussionBoardAdmin.IAuthorized).","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"This operation refreshes JWT session tokens for an authenticated discussion board administrator. By verifying a valid refresh token issued earlier (typically sent in the Authorization header or refresh token body), the system checks the admin's identity against the discussion_board_admins table, confirms the account is still active (deleted_at IS NULL), and re-issues new session tokens with updated validity, as per requirements for 30-minute access tokens and up to 30-day refresh window. The response type, IDiscussionBoardAdmin.IAuthorized, includes fresh access and refresh tokens and minimal admin profile details for continued session access. This endpoint forms part of the continuous authentication and session renewal process described in the business and security documentation, ensuring that the admin need not re-authenticate within the allowed refresh period. Invalid or expired refresh tokens are properly handled with secure error responses. Session state updates (e.g., last login, updated_at) are performed for audit compliance as needed.","authorizationType":"refresh","description":"This API operation allows a previously authenticated admin to refresh their JWT session tokens without re-entering a password, provided they have a valid refresh token. It validates the supplied refresh token against current admin records in discussion_board_admins (deleted_at must be NULL, account not soft-deleted), and issues new tokens conforming to security and business policy (30-minute access token/30-day refresh window). Result is a new IDiscussionBoardAdmin.IAuthorized DTO for continued access. Failed or expired refresh tokens result in error responses; all refresh actions are logged for audit. Integrates with join and login flows in the overall authentication tree.","summary":"Refreshes JWT access/refresh tokens for an authenticated admin (IDiscussionBoardAdmin.IAuthorized).","parameters":[],"requestBody":{"description":"Payload containing necessary refresh token or relevant information. Follows schema: IDiscussionBoardAdmin.IRefresh.","typeName":"IDiscussionBoardAdmin.IRefresh"},"responseBody":{"description":"Admin session access/refresh tokens and profile after successful token renewal (IDiscussionBoardAdmin.IAuthorized).","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation searches and retrieves a paginated list of discussion board members (registered users) with support for filtering and sorting criteria. It operates on the 'discussion_board_members' table in the Prisma schema. Members may be searched by email, username, registration/completion timestamps, or other indexed properties. It supports pagination for large numbers of members, and may be used by administrators for user management or by system components for member discovery features.","description":"Retrieve a paginated and optionally filtered list of registered members from the discussion board. This operation enables searching by criteria such as email address, username, registration date, and verification status. It also supports pagination and sorting to handle large datasets efficiently.\n\nAdministrators typically use this operation for user management and oversight, but it can also provide member browsing features if needed for the forum UI. Filtering is enforced according to available search fields as defined on the 'discussion_board_members' table: 'email', 'username', 'email_verified', and 'registration_completed_at'. Results are paginated to prevent excessive load and improve usability.\n\nOnly admins are authorized to list all members, as regular users should not have access to private member data except their own. Any filtering or search parameters must align with the data fields actually present in the schema. If no matches are found, an empty result set is returned. Errors in search criteria yield detailed validation messages to promote correct usage.","summary":"Search and retrieve a filtered, paginated list of discussion board members (admins only) from the 'discussion_board_members' table.","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sorting parameters for finding discussion board members.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated list of member summary records matching the provided filter and search criteria.","typeName":"IPageIDiscussionBoardMember.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/discussionBoard/admin/members","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the detailed information for a specific discussion board member by their unique identifier. It accesses the 'discussion_board_members' table in the Prisma schema and returns all publicly-available fields including email, username, registration status, and audit fields. Only administrators may use this operation to view another member's data; regular members should use a separate 'me' endpoint for self-profile data.","description":"Fetch the complete details of a single registered member using their system-assigned unique ID. This operation is suitable for administrative use cases, such as managing accounts or troubleshooting user issues, and not for public member listings.\n\nThe 'memberId' path parameter directly matches the 'id' column of the 'discussion_board_members' table and must be provided as a UUID string. The operation returns all columns except sensitive authentication fields (e.g., password_hash), following business privacy rules. It can be used in conjunction with the member list/index operation for deeper member inspection.\n\nOnly administrators may use this endpoint; regular users are not permitted to view the profile details of other accounts. If the supplied memberId does not match any record, an error with a clear message is returned. Any soft-deleted member is either excluded or clearly indicated based on implementation.","summary":"Retrieve detailed profile information of a specific discussion board member by unique ID (admins only) from the 'discussion_board_members' table.","parameters":[{"name":"memberId","description":"Unique identifier of the discussion board member to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full member profile details excluding sensitive authentication fields.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["admin"],"name":"at","path":"/discussionBoard/admin/members/{memberId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"A member must be created so that their unique memberId is available for retrieving their profile by ID. This POST operation creates a new discussion board member and returns the identifier required by the GET operation."}]},{"specification":"This operation updates an existing discussion board member account, identified by their unique memberId. It operates on the discussion_board_members table defined in the Prisma schema. The endpoint allows authenticated users to update fields such as email, username, or password. Email and username must remain unique. Passwords must be provided as secure hashes, never in plain text. Email verification status can only be manipulated via the appropriate email confirmation workflow. Business validation ensures that only the account holder or an admin may modify member data, and edits are tracked for audit purposes through the updated_at column. This operation supports basic user profile updates and recovery (such as password resets), enforcing constraints regarding uniqueness, minimum lengths, and prohibited content as described in business requirements. Admins may also update any member's account information for management purposes. The request body IDiscussionBoardMember.IUpdate must precisely reflect updatable fields as defined in the Prisma model, and response returns the fully updated member entity.","description":"This API allows a discussion board member or an admin to update a member's details. The primary use case is for users to update their own profile information or for admins to update any member's account for management purposes. The operation enforces email and username uniqueness, following the database index constraints. Email changes require subsequent verification, and password changes must use a hashed representation, not plain text. The operation validates all input fields according to business rules: emails must be valid and unique, usernames must not clash with existing users, and passwords must meet established length and complexity rules. The system will reject attempts to set inappropriate values or to update with information that would violate business logic.\n\nSecurity considerations dictate that only the owning member (authenticated via session/JWT) or an administrator may update a member account. Attempts by other members or guests will result in an appropriate authorization failure message. Updated_at is always set to the present time on any update, enabling audit tracing. Soft-deleted accounts (where deleted_at is set) cannot be updated and return an error if attempted.\n\nIf a member's email is updated, their email_verified status will be reset, and a new verification process must be completed. Admins may update all non-credential fields directly but must handle credential resets according to policy. Invalid updates—such as duplicate email/username or a prohibited password—result in clear error messages with actionable guidance. This endpoint helps members maintain control of their personal information while ensuring system integrity.","summary":"Update an existing discussion board member (discussion_board_members table) record by memberId.","parameters":[{"name":"memberId","description":"Unique identifier for the discussion board member to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to update an existing member account, following business rules for uniqueness, non-emptiness, and hashed password requirements.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"The fully updated discussion board member entity after applying changes.","typeName":"IDiscussionBoardMember"},"authorizationType":null,"authorizationRole":"member","path":"/discussionBoard/member/members/{memberId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"A member entity must exist before it can be updated. Topic creation as a member implies existence of a member."}]},{"specification":"This operation updates an existing discussion board member account, identified by their unique memberId. It operates on the discussion_board_members table defined in the Prisma schema. The endpoint allows authenticated users to update fields such as email, username, or password. Email and username must remain unique. Passwords must be provided as secure hashes, never in plain text. Email verification status can only be manipulated via the appropriate email confirmation workflow. Business validation ensures that only the account holder or an admin may modify member data, and edits are tracked for audit purposes through the updated_at column. This operation supports basic user profile updates and recovery (such as password resets), enforcing constraints regarding uniqueness, minimum lengths, and prohibited content as described in business requirements. Admins may also update any member's account information for management purposes. The request body IDiscussionBoardMember.IUpdate must precisely reflect updatable fields as defined in the Prisma model, and response returns the fully updated member entity.","description":"This API allows a discussion board member or an admin to update a member's details. The primary use case is for users to update their own profile information or for admins to update any member's account for management purposes. The operation enforces email and username uniqueness, following the database index constraints. Email changes require subsequent verification, and password changes must use a hashed representation, not plain text. The operation validates all input fields according to business rules: emails must be valid and unique, usernames must not clash with existing users, and passwords must meet established length and complexity rules. The system will reject attempts to set inappropriate values or to update with information that would violate business logic.\n\nSecurity considerations dictate that only the owning member (authenticated via session/JWT) or an administrator may update a member account. Attempts by other members or guests will result in an appropriate authorization failure message. Updated_at is always set to the present time on any update, enabling audit tracing. Soft-deleted accounts (where deleted_at is set) cannot be updated and return an error if attempted.\n\nIf a member's email is updated, their email_verified status will be reset, and a new verification process must be completed. Admins may update all non-credential fields directly but must handle credential resets according to policy. Invalid updates—such as duplicate email/username or a prohibited password—result in clear error messages with actionable guidance. This endpoint helps members maintain control of their personal information while ensuring system integrity.","summary":"Update an existing discussion board member (discussion_board_members table) record by memberId.","parameters":[{"name":"memberId","description":"Unique identifier for the discussion board member to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to update an existing member account, following business rules for uniqueness, non-emptiness, and hashed password requirements.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"The fully updated discussion board member entity after applying changes.","typeName":"IDiscussionBoardMember"},"authorizationType":null,"authorizationRole":"admin","path":"/discussionBoard/admin/members/{memberId}","method":"put","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"A member entity must exist before admin can update the member. Creation of a topic as a member implies existence of a member."}]},{"specification":"This operation permanently deletes (hard delete) a discussion board member account identified by their memberId. It operates on the discussion_board_members table in the Prisma schema. The operation sets the deleted_at field of the member record, marking it as deleted (soft delete) but not physically removing the record, thus supporting audit and compliance requirements. Only admins or the member themselves may perform this action. Deletion disables login and prevents all future actions for the account, but associated posts and replies remain in the system for discussion continuity. Business rules require that account deletes are irreversible, and an account cannot be deleted if already soft-deleted. Any attempts to delete another member’s account by a non-admin will be blocked.","description":"This API allows a member or admin to delete a discussion board member account using a unique memberId. Instead of a hard delete, it marks the account's deleted_at field with the current timestamp (soft delete), supporting future recovery and audit requirements. Deleting an account disables further logins for that member, prevents any authoring of topics or replies, and removes access to personal account settings. Posts and replies authored by the member remain visible unless additional moderation policies require anonymization or removal. Authorization checks ensure that only the member themselves, authenticated via session/JWT, or an admin may perform this deletion. The operation cannot be performed on already soft-deleted accounts and will return an error if attempted. This design preserves discussion continuity and ensures that system audit trails reflect all account changes as mandated by business and compliance rules.\n\nSecurity is enforced by verifying the requesting user's identity and role. Members can only delete their own accounts, while admins can delete any member's account. Attempts to delete another member's account by non-admins will fail with an explicit permission denied message. Deleted accounts are non-recoverable without administrative intervention. If an account is already marked as deleted, a clear error is returned. There is no response body for this operation; success is indicated via standard HTTP status.","summary":"Delete (soft delete) a discussion board member (discussion_board_members table) account by setting deleted_at, identified by memberId.","parameters":[{"name":"memberId","description":"Unique identifier for the discussion board member to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","path":"/discussionBoard/member/members/{memberId}","method":"delete","name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Member account must exist before it can be deleted. Use the create operation for discussion_board_members, which in this API is via topic creation with valid authentication (although the precise `/members` create endpoint is unavailable, account existence is implied by prerequisite authentication."}]},{"specification":"This operation permanently deletes (hard delete) a discussion board member account identified by their memberId. It operates on the discussion_board_members table in the Prisma schema. The operation sets the deleted_at field of the member record, marking it as deleted (soft delete) but not physically removing the record, thus supporting audit and compliance requirements. Only admins or the member themselves may perform this action. Deletion disables login and prevents all future actions for the account, but associated posts and replies remain in the system for discussion continuity. Business rules require that account deletes are irreversible, and an account cannot be deleted if already soft-deleted. Any attempts to delete another member’s account by a non-admin will be blocked.","description":"This API allows a member or admin to delete a discussion board member account using a unique memberId. Instead of a hard delete, it marks the account's deleted_at field with the current timestamp (soft delete), supporting future recovery and audit requirements. Deleting an account disables further logins for that member, prevents any authoring of topics or replies, and removes access to personal account settings. Posts and replies authored by the member remain visible unless additional moderation policies require anonymization or removal. Authorization checks ensure that only the member themselves, authenticated via session/JWT, or an admin may perform this deletion. The operation cannot be performed on already soft-deleted accounts and will return an error if attempted. This design preserves discussion continuity and ensures that system audit trails reflect all account changes as mandated by business and compliance rules.\n\nSecurity is enforced by verifying the requesting user's identity and role. Members can only delete their own accounts, while admins can delete any member's account. Attempts to delete another member's account by non-admins will fail with an explicit permission denied message. Deleted accounts are non-recoverable without administrative intervention. If an account is already marked as deleted, a clear error is returned. There is no response body for this operation; success is indicated via standard HTTP status.","summary":"Delete (soft delete) a discussion board member (discussion_board_members table) account by setting deleted_at, identified by memberId.","parameters":[{"name":"memberId","description":"Unique identifier for the discussion board member to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/discussionBoard/admin/members/{memberId}","method":"delete","name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Member account must exist before it can be deleted. Use the create operation for discussion_board_members, which in this API is via topic creation with valid authentication (although the precise `/members` create endpoint is unavailable, account existence is implied by prerequisite authentication."}]},{"specification":"This operation allows an authorized administrator to search and retrieve a paginated, filtered list of administrator accounts for the economic/political discussion board system. It is mapped to the discussion_board_admins table as defined in the Prisma schema. The search criteria may include admin email, username, verification status, registration date, and other metadata, and supports pagination and sorting for effective management of admin accounts.","description":"Retrieves a paginated and filtered list of administrator accounts (discussion_board_admins) to support management and oversight of privileged users.\n\nAdministrators are special accounts with elevated rights (user management, system moderation), and can login and perform privileged functions beyond normal members. Each admin has a unique email, username, hashed password, and verification status, along with timestamps for registration, last update, and possible soft-deletion.\n\nSecurity and permissions: This operation must only be accessible to currently authenticated admins, as it exposes privileged account data. The response omits sensitive password hashes and only includes fields necessary for admin oversight.\n\nFlexible filtering and sorting allows admins to quickly locate accounts by specific criteria such as creation date or email. Error handling covers invalid parameters or unauthorized attempts, preventing exposure of sensitive admin data. Responses include pagination metadata for user-friendly UI navigation.\n\nThis operation is part of the core admin management flow and is typically used together with detail retrieval (GET /admins/{adminId}), creation, modification, and soft/hard deletion APIs for administrative accounts.","summary":"Search and retrieve a filtered, paginated list of discussion board administrators (discussion_board_admins table).","parameters":[],"requestBody":{"description":"Criteria for searching administrators, including filters and pagination settings.","typeName":"IDiscussionBoardAdmin.IRequest"},"responseBody":{"description":"Paginated list of administrator account summaries that match the query.","typeName":"IPageIDiscussionBoardAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/discussionBoard/admin/admins","method":"patch","prerequisites":[]},{"specification":"This operation retrieves the detailed information of a single administrator account by its unique identifier from the discussion_board_admins table. The API is used to show full profile, permissions state, and activity information for a specific administrator in the economic/political discussion board system.","description":"Fetches all public and administrative metadata for a specified administrator account (discussion_board_admins) identified by adminId.\n\nAdmins have unique email addresses, usernames, password hashes (not returned), verification statuses, and timestamps for creation, registration completion, and possible soft-deletion. This detailed view supports auditing, profile inspection, or administrative action tracing.\n\nOnly admins are allowed to execute this operation due to the sensitivity of account data. Security considerations include ensuring the adminId parameter is validated as a UUID, verifying permissions, and safely omitting confidential fields such as password hashes in the response.\n\nThis operation is critical for managing privileged accounts in the discussion board, facilitating review, edit, or (if supported) deletion and recovery functionality. Errors such as invalid adminId or missing records return appropriate error responses, ensuring data security.","summary":"Retrieve detailed information for a specific administrator account (discussion_board_admins table) by adminId.","parameters":[{"name":"adminId","description":"Unique identifier of the administrator account to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the administrator account requested.","typeName":"IDiscussionBoardAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/discussionBoard/admin/admins/{adminId}","method":"get","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/topics","method":"post"},"description":"An admin must be created before their detailed information can be retrieved by adminId."}]},{"specification":"This operation allows an administrator to update their profile information in the discussion board system. It references the discussion_board_admins table in the Prisma schema, which stores information about admin accounts, including unique identifiers, email, username, hashed password, and verification status. Only administrators' own records or those managed through admin-level privilege can be updated via this endpoint.\n\nThe operation supports editing the admin's email (which must remain unique), username (also unique), and optionally updating the password hash and verification status. It is essential to enforce validation rules for email and username uniqueness, as well as require proper password hashing before storing new values. All changes are timestamped, supporting audit trails and compliance requirements.\n\nPermission to perform this operation is limited to users with the \"admin\" role. Attempts by other roles to access this endpoint must be denied with a clear and informative error message. This aligns with the business requirement that only administrators may manage admin user records, including profile, credentials, and access status.\n\nError conditions include invalid input format, duplicate email or username, failure to meet password requirements, or attempts by unauthorized roles. The operation should provide detailed error messages in accordance with business validation logic.","description":"This API endpoint enables administrators to update the profile information for a specific admin account in the discussion board.\n\nThe operation directly maps to the discussion_board_admins table, allowing privileged modification of admin information such as email address, display username, password hash (securely hashed), and verification/completion status. Each update is recorded with audit-relevant timestamps for compliance and traceability.\n\nSecurity and validation are critical. Only authenticated admin users can access this endpoint; attempts to access by non-admins are explicitly denied. Input fields must be validated: email and username are unique and required, password_hash must be securely processed before storage, and changes to verification fields must be business-authorized. Input and field constraints must match those specified in the schema, with clear validation errors communicated to the user for any invalid update requests.\n\nIf either email or username is already in use by another admin, the operation should return a descriptive conflict error. For password changes, strong password policies and secure hashing are enforced outside this API but must be consistently documented as system requirements. All successful updates are timestamped, and the updated admin profile is returned in the response.","summary":"Update an administrator profile in the discussion board (discussion_board_admins table).","parameters":[{"name":"adminId","description":"Unique identifier of the admin account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the admin profile (email, username, password hash, and verification status) following required schema constraints.","typeName":"IDiscussionBoardAdmins.IUpdate"},"responseBody":{"description":"The updated administrator profile as stored in the discussion_board_admins table.","typeName":"IDiscussionBoardAdmins"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/discussionBoard/admin/admins/{adminId}","method":"put","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/topics","method":"post"},"description":"An admin entity (adminId) must exist before its profile can be updated. Creating a topic requires a valid adminId; thus, posting a topic as an admin ensures that the admin account exists in the system before an update can be attempted."}]},{"specification":"This operation permanently deletes an administrator account from the discussion_board_admins table in the discussion board platform. It is designed for use by privileged admin users only and supports organizational requirements for user lifecycle management, access control, and compliance.\n\nThe operation targets a specific administrator using their unique identifier (adminId) and marks the record as deleted via the deleted_at timestamp (soft-delete approach), as per the Prisma schema. Actual removal or anonymization of audit trails and activity owned by the admin is not performed here and must be handled by separate business processes if required.\n\nSecurity is paramount for this operation. Only users with \"admin\" role can invoke this endpoint—non-admin users are explicitly forbidden. The system should prevent deletion of the last super-admin, if the role structure is extended, to guarantee continued administrative oversight.\n\nAttempting to delete a nonexistent adminId or one already deleted returns a not found or appropriate error response. Successful operations must timestamp the deleted_at field without erasing the row, preserving audit and compliance information. Error handling must clearly inform the user of permission or existence issues, and changes should be fully logged for compliance.","description":"This API endpoint allows an admin user to perform a soft delete (set the deleted_at timestamp) on an administrator account, as defined in the discussion_board_admins Prisma schema table.\n\nThe targeted adminId must correspond to an existing, active admin record; otherwise, the system returns a not found error. Soft-deletion preserves the integrity of audit trails and historical administrative actions, in line with compliance requirements.\n\nOnly users authenticated with the admin role are allowed to access this endpoint. Authorization must be verified before processing, with all unauthorized or insufficient privilege attempts receiving a clear, secure denial response.\n\nOnce soft-deleted, the admin account is excluded from standard admin operations and authentication but can be restored or audited by super-admin workflows if such are implemented in the future. This operation never permanently erases records or their associated system activity.","summary":"Soft delete an administrator account (discussion_board_admins table) for privileged admin user lifecycle management.","parameters":[{"name":"adminId","description":"Unique identifier of the admin account to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/discussionBoard/admin/admins/{adminId}","method":"delete","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/topics","method":"post"},"description":"An admin entity (adminId) must exist before it can be deleted. Posting a topic as an admin makes sure an admin account (adminId) is present in the system before the delete operation is attempted."}]},{"specification":"This operation retrieves a paginated list of discussion board topics, allowing users to browse or search for topics related to economics and politics. It operates on the discussion_board_topics table, supporting advanced filtering, search by keyword or author, and sorting by recency or relevance. Both guests and authenticated users can use this endpoint to explore discussions with minimal friction. This endpoint aligns with the system's open-access browsing model and supports efficient information retrieval based on user-specified criteria.","description":"Retrieve a list of discussion topics from the discussion_board_topics table, supporting keyword search, sorting by date or relevance, and pagination. Users can search by topic subject, content, or author, and the returned data includes essential fields for rapid browsing and search interface display.\n\nThe operation is available to all user roles, including guests, without requiring authentication. Sensitive user information is filtered out, exposing only display names, topic subjects, timestamps, and summary content. Pagination strategies prevent loading delays when many topics exist, while robust indexing in the underlying schema ensures search performance.\n\nValidation addresses search query length, pagination limits, and boundary conditions such as out-of-range page numbers. If no topics match the search, the response clearly indicates no results. Security checks ensure only public data is returned, and all inputs are sanitized to prevent abuse or injection.\n\nThis endpoint supports seamless integration with public discussion landing pages, search interfaces, and infinite-scroll browsing. It has no dependencies on other API operations, requiring only optional search/query parameters in the request body.","summary":"Search and retrieve a paginated list of discussion board topics (discussion_board_topics table) for browsing or keyword search.","parameters":[],"requestBody":{"description":"Request parameters for searching, filtering, and paginating the discussion topics list.","typeName":"IDiscussionBoardTopic.IRequest"},"responseBody":{"description":"Paginated results of discussion topics matching query and search filters.","typeName":"IPageIDiscussionBoardTopic.ISummary"},"authorizationRoles":[],"name":"index","path":"/discussionBoard/topics","method":"patch","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information for a specific discussion board topic, including all associated replies. It operates on the discussion_board_topics table and returns the full topic content, author information, and a chronological list of replies sourced from the discussion_board_replies table. Users can view the full discussion thread for any topic using its unique topicId. This endpoint is designed for open public inspection of community discussions with no authentication required, reflecting the platform's open-access policy.","description":"Fetch full details of a specific topic by its unique topicId from the discussion_board_topics table, including subject, content, author display name, timestamps, and all public replies. Each reply includes the reply content, reply author (member or admin), and respective timestamps, supporting fluid engagement and reading for both guests and authenticated users.\n\nThe endpoint enforces strict parameter validation, ensuring a valid UUID topicId is provided. If the topic does not exist, has been deleted, or the id is invalid, the operation returns a clear not found error. Replies are always presented in ascending chronological order to match discussion thread reading conventions.\n\nAll roles (guests, members, admins) may access this endpoint without authentication. Sensitive author information (such as emails) is never disclosed; only safe display data is included. This endpoint is integral to the topic view page and reply workflows, and it has no dependency on prior endpoint calls beyond needing a valid topicId.","summary":"Retrieve full information and replies for a specific discussion board topic (discussion_board_topics table) by topicId.","parameters":[{"name":"topicId","description":"Unique identifier for the target topic to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete topic information with all associated replies for rendering a full discussion thread.","typeName":"IDiscussionBoardTopic"},"authorizationRoles":[],"name":"at","path":"/discussionBoard/topics/{topicId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"A topic must be created before it can be retrieved by topicId."}]},{"specification":"This operation allows authenticated members or admins to create new discussion topics on the board. The endpoint is associated with the 'discussion_board_topics' table in the Prisma schema, which stores economic and political discussion threads. The topic must have a subject (title) and content (body) conforming to length and validation rules. The author is identified by their member or admin account, and the topic is publicly visible upon creation.","path":"/discussionBoard/member/topics","method":"post","summary":"Create a new discussion topic (discussion_board_topics table)","description":"This API operation enables members or admins to create a new discussion topic, serving as the primary means of starting conversations or debates on economic and political issues. The topic consists of a subject (between 5 and 120 characters) and body/content (between 10 and 4000 characters). Either the member or admin author's identifier is required, and the system enforces that only one author type can be assigned per topic. Validation rules, such as duplicate prevention, rate limiting, and banned content checks, are performed according to business policies.\n\nAfter successful creation, the topic becomes immediately visible to all users (guests, members, admins), appearing at the top of topic listings sorted by recency. Rate limits are enforced to prevent spam (e.g., 5 topics per user per hour). Guests attempting to use this endpoint will be denied. Input sanitation and error handling ensure safe creation and clear user feedback on validation failures. This operation is directly linked to the 'discussion_board_topics' entity and maintains relationships to the author's member or admin record as per schema.","parameters":[],"requestBody":{"description":"New discussion topic information: subject, content, and author identification (as member or admin).","typeName":"IDiscussionBoardTopic.ICreate"},"responseBody":{"description":"Detailed record of the newly created discussion topic as stored in the system.","typeName":"IDiscussionBoardTopic"},"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[]},{"specification":"This operation allows authenticated members or admins to create new discussion topics on the board. The endpoint is associated with the 'discussion_board_topics' table in the Prisma schema, which stores economic and political discussion threads. The topic must have a subject (title) and content (body) conforming to length and validation rules. The author is identified by their member or admin account, and the topic is publicly visible upon creation.","path":"/discussionBoard/admin/topics","method":"post","summary":"Create a new discussion topic (discussion_board_topics table)","description":"This API operation enables members or admins to create a new discussion topic, serving as the primary means of starting conversations or debates on economic and political issues. The topic consists of a subject (between 5 and 120 characters) and body/content (between 10 and 4000 characters). Either the member or admin author's identifier is required, and the system enforces that only one author type can be assigned per topic. Validation rules, such as duplicate prevention, rate limiting, and banned content checks, are performed according to business policies.\n\nAfter successful creation, the topic becomes immediately visible to all users (guests, members, admins), appearing at the top of topic listings sorted by recency. Rate limits are enforced to prevent spam (e.g., 5 topics per user per hour). Guests attempting to use this endpoint will be denied. Input sanitation and error handling ensure safe creation and clear user feedback on validation failures. This operation is directly linked to the 'discussion_board_topics' entity and maintains relationships to the author's member or admin record as per schema.","parameters":[],"requestBody":{"description":"New discussion topic information: subject, content, and author identification (as member or admin).","typeName":"IDiscussionBoardTopic.ICreate"},"responseBody":{"description":"Detailed record of the newly created discussion topic as stored in the system.","typeName":"IDiscussionBoardTopic"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[]},{"specification":"This operation allows the original author (member or admin) or an administrator to update a discussion topic. It directly interacts with the 'discussion_board_topics' table in the Prisma schema. The update may include modifications to the subject or content of the topic, subject to business validation constraints such as string length, duplicate/prevention checks, and anti-abuse policies. Only authenticated users with proper authorization can update a topic.","path":"/discussionBoard/member/topics/{topicId}","method":"put","summary":"Update an existing discussion topic (discussion_board_topics table)","description":"This API operation enables a member, admin, or the original author to update the subject (title) and/or content (body) of an existing discussion topic. The operation references the 'discussion_board_topics' database table and requires the topic's unique identifier (topicId) as a path parameter. Updates are validated to ensure subject and content meet length constraints (subject: 5-120 characters, content: 10-4000 characters), do not violate duplication/business rules, and have no prohibited content. Ownership checks ensure only the topic's author or an admin can edit the topic; other users receive a permission error.\n\nUpon successful update, the system saves the current timestamp as the new 'updated_at' value, maintaining full edit history compliance. The response includes the latest state of the topic. Input sanitation and validation are strictly enforced. Attempted edits by guests or unauthorized users are denied with an appropriate error message.","parameters":[{"name":"topicId","description":"Unique identifier of the topic to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the topic (subject/content); must comply with length and content rules.","typeName":"IDiscussionBoardTopic.IUpdate"},"responseBody":{"description":"The updated record of the discussion topic with all current field values.","typeName":"IDiscussionBoardTopic"},"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"A discussion topic must exist before it can be updated by its author (member). The POST /discussionBoard/member/topics operation creates the topic and provides the topicId used in the update operation."}]},{"specification":"This operation allows the original author (member or admin) or an administrator to update a discussion topic. It directly interacts with the 'discussion_board_topics' table in the Prisma schema. The update may include modifications to the subject or content of the topic, subject to business validation constraints such as string length, duplicate/prevention checks, and anti-abuse policies. Only authenticated users with proper authorization can update a topic.","path":"/discussionBoard/admin/topics/{topicId}","method":"put","summary":"Update an existing discussion topic (discussion_board_topics table)","description":"This API operation enables a member, admin, or the original author to update the subject (title) and/or content (body) of an existing discussion topic. The operation references the 'discussion_board_topics' database table and requires the topic's unique identifier (topicId) as a path parameter. Updates are validated to ensure subject and content meet length constraints (subject: 5-120 characters, content: 10-4000 characters), do not violate duplication/business rules, and have no prohibited content. Ownership checks ensure only the topic's author or an admin can edit the topic; other users receive a permission error.\n\nUpon successful update, the system saves the current timestamp as the new 'updated_at' value, maintaining full edit history compliance. The response includes the latest state of the topic. Input sanitation and validation are strictly enforced. Attempted edits by guests or unauthorized users are denied with an appropriate error message.","parameters":[{"name":"topicId","description":"Unique identifier of the topic to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the topic (subject/content); must comply with length and content rules.","typeName":"IDiscussionBoardTopic.IUpdate"},"responseBody":{"description":"The updated record of the discussion topic with all current field values.","typeName":"IDiscussionBoardTopic"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/topics","method":"post"},"description":"A discussion topic must exist before it can be updated by its author (admin). The POST /discussionBoard/admin/topics operation creates the topic and provides the topicId used in the update operation."}]},{"specification":"This operation permanently removes a single discussion topic from the discussion_board_topics table. It is intended for use by authenticated members or admins who have authored the topic, or by system administrators with appropriate rights. The operation ensures that only users with proper ownership or administrative privileges can perform a deletion. Topics are identified by their unique UUID. Since the schema does not include a soft delete (no deleted_at column in topics table), this operation implements a hard delete, meaning all associated replies will also be cascaded and removed from the system, maintaining referential integrity as per the Prisma schema onDelete: Cascade relation. Deletion is irreversible, and all content and relationships will be eliminated, ensuring secure removal of sensitive content when requested or when required by business rules.","description":"This operation provides the capability to permanently delete a discussion topic from the system database. According to the Prisma schema, the operation directly manipulates the discussion_board_topics table, using the unique topic ID (UUID) for precise identification. It is designed to enforce access control, validating whether the requesting user is either the original author (member or admin) or possesses admin privileges.\n\nUpon invocation, the system checks the requester's authorization based on login status and account role. Members and admins can erase topics they authored; admins may also remove any topic for moderation or compliance.\n\nThe hard delete cascades to all linked discussion_board_replies via the Prisma relation, ensuring no orphaned replies are left. The operation is essential for user-requested removals, legal compliance, or post-moderation. No soft-delete field is present, thus the action is not reversible. Associated business rules—such as handling reply deletion and audit logging—must be enforced in implementation logic.\n\nError handling must be robust: attempts to delete non-owned or already-removed topics should return a clear permission denied or not found error, with explanatory messages to the client while not leaking sensitive details.","path":"/discussionBoard/member/topics/{topicId}","method":"delete","summary":"Permanently remove a discussion topic and all its replies from the discussion_board_topics table.","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the topic to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","admin"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before it can be deleted. The topic is created by posting to this endpoint, which generates the topicId required for deletion."}]},{"specification":"This operation permanently removes a single discussion topic from the discussion_board_topics table. It is intended for use by authenticated members or admins who have authored the topic, or by system administrators with appropriate rights. The operation ensures that only users with proper ownership or administrative privileges can perform a deletion. Topics are identified by their unique UUID. Since the schema does not include a soft delete (no deleted_at column in topics table), this operation implements a hard delete, meaning all associated replies will also be cascaded and removed from the system, maintaining referential integrity as per the Prisma schema onDelete: Cascade relation. Deletion is irreversible, and all content and relationships will be eliminated, ensuring secure removal of sensitive content when requested or when required by business rules.","description":"This operation provides the capability to permanently delete a discussion topic from the system database. According to the Prisma schema, the operation directly manipulates the discussion_board_topics table, using the unique topic ID (UUID) for precise identification. It is designed to enforce access control, validating whether the requesting user is either the original author (member or admin) or possesses admin privileges.\n\nUpon invocation, the system checks the requester's authorization based on login status and account role. Members and admins can erase topics they authored; admins may also remove any topic for moderation or compliance.\n\nThe hard delete cascades to all linked discussion_board_replies via the Prisma relation, ensuring no orphaned replies are left. The operation is essential for user-requested removals, legal compliance, or post-moderation. No soft-delete field is present, thus the action is not reversible. Associated business rules—such as handling reply deletion and audit logging—must be enforced in implementation logic.\n\nError handling must be robust: attempts to delete non-owned or already-removed topics should return a clear permission denied or not found error, with explanatory messages to the client while not leaking sensitive details.","path":"/discussionBoard/admin/topics/{topicId}","method":"delete","summary":"Permanently remove a discussion topic and all its replies from the discussion_board_topics table.","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the topic to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before it can be deleted. The topic is created by posting to this endpoint, which generates the topicId required for deletion."}]},{"specification":"This operation retrieves a paginated list of replies for a specific discussion topic from the discussion_board_replies table, supporting advanced search, filtering, and sorting. The endpoint enables users—including guests, members, and admins—to browse, search, and read all replies associated with the given topic. Pagination and flexible querying ensure scalability and usability regardless of thread size. Only the parent topic's unique ID is required as a path parameter, and the request body allows for extensible searching and ordering.","description":"This operation fetches a paginated, optionally filtered and sorted list of replies for a specific topic. Operating on the discussion_board_replies table, it uses the parent topic's UUID to scope the search, with advanced query capabilities specified in the request body using the IDiscussionBoardReply.IRequest schema. Guests, members, and admins can read all replies.\n\nSearch criteria might include filtering by author (member or admin), keyword match in content, creation time window, and sorting by date, as enabled by the schema. Results are returned as a paginated structure leveraging the IPageIDiscussionBoardReply.ISummary response type, providing summary details suitable for high-throughput browsing scenarios.\n\nAccess is intentionally open (empty authorizationRoles array), reflecting business rules that public discussion visibility is a core feature. Error handling covers non-existent topics, empty result sets (returning an empty list), and invalid query parameters. The operation is designed for integration in browsing, search, and topic detail views, ensuring inclusivity and performance across all user roles.","path":"/discussionBoard/topics/{topicId}/replies","method":"patch","summary":"Get a paginated, searchable list of replies for a specific topic from the discussion_board_replies table.","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the parent discussion topic for which to retrieve replies.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, sort, and pagination criteria for listing replies to a given topic.","typeName":"IDiscussionBoardReply.IRequest"},"responseBody":{"description":"Paginated summary list of discussion board replies matching the search for this topic.","typeName":"IPageIDiscussionBoardReply.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"The topic must exist before replies can be listed; thus, a topic must be created before its replies can be paginated, searched, or displayed."}]},{"specification":"This operation retrieves the detail of a specific reply to a discussion board topic. It interacts with the discussion_board_replies table to fetch complete information for a reply given its unique replyId within a topic. The operation is designed for public read access, allowing both guests and authenticated users to view the full details of individual replies, including the author (member or admin), content, timestamps, and the topic association. This facilitates transparent, accessible discussion browsing, and aligns with the business rule that all discussions and replies are open to public viewing. The operation enforces that the reply must belong to the specified topicId, ensuring correct resource association and data integrity.","description":"Fetch and display a single reply belonging to a specific topic on the discussion board. All users, including guests, can access this endpoint to view the content, author, and timestamps for the reply.\n\nThe reply is identified by both the parent topicId and the replyId. The operation ensures that the reply exists, belongs to the specified topic, and is not soft-deleted. If the reply does not exist or is not associated with the given topic, the operation returns an error indicating not found. All author information returned is limited to display names or pseudonymized identifiers per privacy rules.\n\nThis read-only endpoint supports transparent access for community members and visitors, and helps power deep-linking to particular replies for reference or shareability. Error responses are handled gracefully, with user-friendly messages for not-found or deleted resources. This is a high-traffic endpoint within transparent public discussion access.","summary":"Retrieve details of a specific reply to a topic (discussion_board_replies table).","parameters":[{"name":"topicId","description":"Unique identifier of the parent topic the reply belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete information about a single reply, including content, author details, timestamps, and its association to the parent topic.","typeName":"IDiscussionBoardReply"},"authorizationRoles":[],"name":"at","path":"/discussionBoard/topics/{topicId}/replies/{replyId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"The topic must be created before a reply's details can be retrieved, since replies are associated with an existing topic."},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"The specific reply must be created before its detail can be retrieved. This ensures the reply exists for the given topic."}]},{"specification":"This operation creates a new reply attached to a specific discussion board topic. It operates on the discussion_board_replies table, inserting a new reply entity linked to the given topicId. Only authenticated users (members or admins) are allowed to post replies. The operation enforces constraints such as authentication, reply body length, and ensures that the parent topic exists. Essential fields such as content and author association are required; upon creation, the new reply is persisted in the database, associated with both the topic and the authenticated user (either a member or admin). The response includes the complete details of the created reply. Rate limiting and content validation rules (minimum 3, max 2000 chars, no banned content) are enforced by business logic.","description":"Allow logged-in members or admins to post a reply to a given topic. The parent topic is identified by topicId and must exist. The endpoint receives content for the reply and, on passing validation (body length, business rules), creates the new reply in association with the correct author.\n\nThe operation verifies the authentication status and role of the user. Guests are not allowed to use this endpoint; action is denied with an appropriate authentication-required message if a guest attempts access. Business validation rejects submissions violating spam, duplicate, or prohibited content policies. If the reply is successfully created, it is immediately available for other users to view in the topic thread. The response includes the reply's content, author, associated topic, and timestamps.\n\nEdge cases, such as replying to a non-existent or closed topic, result in error responses. Input validation failures return actionable error messages stating the problem. Reply rate-limiting is also enforced per business constraints.","summary":"Create a new reply to a topic (discussion_board_replies table).","parameters":[{"name":"topicId","description":"Unique identifier of the topic to which the reply will be posted.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Content and minimal information required to create a reply to a topic. Must meet business validation rules.","typeName":"IDiscussionBoardReply.ICreate"},"responseBody":{"description":"The reply entity as created, with author, content, timestamps, and topic association.","typeName":"IDiscussionBoardReply"},"authorizationRoles":["member","admin"],"name":"create","path":"/discussionBoard/member/topics/{topicId}/replies","method":"post","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"Discussion topic must exist before a reply can be created for it."}]},{"specification":"This operation creates a new reply attached to a specific discussion board topic. It operates on the discussion_board_replies table, inserting a new reply entity linked to the given topicId. Only authenticated users (members or admins) are allowed to post replies. The operation enforces constraints such as authentication, reply body length, and ensures that the parent topic exists. Essential fields such as content and author association are required; upon creation, the new reply is persisted in the database, associated with both the topic and the authenticated user (either a member or admin). The response includes the complete details of the created reply. Rate limiting and content validation rules (minimum 3, max 2000 chars, no banned content) are enforced by business logic.","description":"Allow logged-in members or admins to post a reply to a given topic. The parent topic is identified by topicId and must exist. The endpoint receives content for the reply and, on passing validation (body length, business rules), creates the new reply in association with the correct author.\n\nThe operation verifies the authentication status and role of the user. Guests are not allowed to use this endpoint; action is denied with an appropriate authentication-required message if a guest attempts access. Business validation rejects submissions violating spam, duplicate, or prohibited content policies. If the reply is successfully created, it is immediately available for other users to view in the topic thread. The response includes the reply's content, author, associated topic, and timestamps.\n\nEdge cases, such as replying to a non-existent or closed topic, result in error responses. Input validation failures return actionable error messages stating the problem. Reply rate-limiting is also enforced per business constraints.","summary":"Create a new reply to a topic (discussion_board_replies table).","parameters":[{"name":"topicId","description":"Unique identifier of the topic to which the reply will be posted.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Content and minimal information required to create a reply to a topic. Must meet business validation rules.","typeName":"IDiscussionBoardReply.ICreate"},"responseBody":{"description":"The reply entity as created, with author, content, timestamps, and topic association.","typeName":"IDiscussionBoardReply"},"authorizationRoles":["member","admin"],"name":"create","path":"/discussionBoard/admin/topics/{topicId}/replies","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/topics","method":"post"},"description":"Discussion topic must exist before a reply can be created for it."}]},{"specification":"This operation updates an existing reply within a specific topic in the discussion board. It is associated with the discussion_board_replies table in the Prisma schema. The operation requires both the topicId and replyId as path parameters to uniquely identify the reply to be updated. Authenticated members and admins can perform this update, subject to business rules: only the original author (member or admin) may update their own reply unless the requester is an admin. Validation will enforce content limits (3–2000 characters) and reject forbidden content. The operation references the DiscussionBoardReplies model for the update and maintains audit compliance for updates via updated_at timestamp. This endpoint supports updating reply content, but not reassignment of authorship or topic linkage.","path":"/discussionBoard/member/topics/{topicId}/replies/{replyId}","method":"put","summary":"Update reply content in a topic (discussion_board_replies table)","description":"Update an existing reply belonging to a topic on the discussion board. This allows authenticated members or admins to edit reply content as long as they are the original author (or have admin privilege). The reply is identified by both the topicId (for topic context) and replyId (for reply selection). Only content editing is permitted; authorship and topic linkage remain unchanged.\n\nSecurity considerations require checks that prevent users from editing others' replies unless the user is an admin. All updates are tracked by updating the updated_at timestamp and optionally recording moderation activity. Content validation enforces minimum and maximum character lengths and business rules concerning language moderation or prohibited content.\n\nIn the context of business logic, this operation is tightly coupled with the reply and topic relationship and interacts with the audit trail for compliance. Any error in authorization (e.g., non-author updating) or missing path parameter will result in a clear error. Related APIs include reply creation and deletion endpoints, which also use the same identifiers in path parameters.\n\nProper error handling ensures that only valid, authenticated users can update replies and prevents accidental or malicious content alteration. All changes are immediately reflected to all users viewing the topic discussion thread.","parameters":[{"name":"topicId","description":"Unique identifier of the topic to which the reply belongs","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to be updated within the specified topic","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the reply content","typeName":"IDiscussionBoardReply.IUpdate"},"responseBody":{"description":"The updated reply including author, topic link, and metadata","typeName":"IDiscussionBoardReply"},"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"The topic must exist before a reply within it can be updated."},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"The reply must be created before it can be updated."}]},{"specification":"This operation updates an existing reply within a specific topic in the discussion board. It is associated with the discussion_board_replies table in the Prisma schema. The operation requires both the topicId and replyId as path parameters to uniquely identify the reply to be updated. Authenticated members and admins can perform this update, subject to business rules: only the original author (member or admin) may update their own reply unless the requester is an admin. Validation will enforce content limits (3–2000 characters) and reject forbidden content. The operation references the DiscussionBoardReplies model for the update and maintains audit compliance for updates via updated_at timestamp. This endpoint supports updating reply content, but not reassignment of authorship or topic linkage.","path":"/discussionBoard/admin/topics/{topicId}/replies/{replyId}","method":"put","summary":"Update reply content in a topic (discussion_board_replies table)","description":"Update an existing reply belonging to a topic on the discussion board. This allows authenticated members or admins to edit reply content as long as they are the original author (or have admin privilege). The reply is identified by both the topicId (for topic context) and replyId (for reply selection). Only content editing is permitted; authorship and topic linkage remain unchanged.\n\nSecurity considerations require checks that prevent users from editing others' replies unless the user is an admin. All updates are tracked by updating the updated_at timestamp and optionally recording moderation activity. Content validation enforces minimum and maximum character lengths and business rules concerning language moderation or prohibited content.\n\nIn the context of business logic, this operation is tightly coupled with the reply and topic relationship and interacts with the audit trail for compliance. Any error in authorization (e.g., non-author updating) or missing path parameter will result in a clear error. Related APIs include reply creation and deletion endpoints, which also use the same identifiers in path parameters.\n\nProper error handling ensures that only valid, authenticated users can update replies and prevents accidental or malicious content alteration. All changes are immediately reflected to all users viewing the topic discussion thread.","parameters":[{"name":"topicId","description":"Unique identifier of the topic to which the reply belongs","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to be updated within the specified topic","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the reply content","typeName":"IDiscussionBoardReply.IUpdate"},"responseBody":{"description":"The updated reply including author, topic link, and metadata","typeName":"IDiscussionBoardReply"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/topics","method":"post"},"description":"The topic must exist before a reply within it can be updated."},{"endpoint":{"path":"/discussionBoard/admin/topics/{topicId}/replies","method":"post"},"description":"The reply must be created before it can be updated."}]},{"specification":"This operation permanently removes a reply from a specific topic in the discussion board, targeting the discussion_board_replies table in the Prisma schema. Deletion requires both the topicId and replyId as path parameters for precise targeting. Only the original author (member or admin) or a privileged admin may erase a reply. As the discussion_board_replies schema does not use soft delete fields, this is a hard delete—data is removed from the database and cannot be recovered. Business logic enforces authorization, ensuring members cannot delete others' replies, and all actions are tracked for audit purposes. Cascading deletes will not affect the parent topic but will remove the reply from discourse view immediately.","path":"/discussionBoard/member/topics/{topicId}/replies/{replyId}","method":"delete","summary":"Permanently delete a reply from a topic (discussion_board_replies table)","description":"Permanently remove an existing reply from the specified topic, identified by both topicId and replyId. Only authenticated users who authored the reply or are admins may perform this operation. Hard deletion is performed as the reply table lacks a soft delete (deleted_at) field; once removed, the reply cannot be recovered.\n\nAccess control is enforced: members may delete their own replies, admins may delete any reply. All deletions are auditable for compliance. Deletion does not affect parent topics but immediately removes the reply from all discourse views.\n\nAttempting to delete a reply without proper authorization, with missing/invalid parameters, or targeting a non-existent reply will result in an error explaining the reason. Related endpoints allow reply creation and editing, but only this operation handles full removal of reply data from the database.","parameters":[{"name":"topicId","description":"Unique identifier of the topic to which the reply belongs","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to be deleted within the specified topic","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/member/topics","method":"post"},"description":"The topic must exist before a reply can be deleted from it. Use this operation to create the required topic first."},{"endpoint":{"path":"/discussionBoard/member/topics/{topicId}/replies","method":"post"},"description":"The reply must exist before it can be deleted. Use this operation to create the required reply under the topic first."}]},{"specification":"This operation permanently removes a reply from a specific topic in the discussion board, targeting the discussion_board_replies table in the Prisma schema. Deletion requires both the topicId and replyId as path parameters for precise targeting. Only the original author (member or admin) or a privileged admin may erase a reply. As the discussion_board_replies schema does not use soft delete fields, this is a hard delete—data is removed from the database and cannot be recovered. Business logic enforces authorization, ensuring members cannot delete others' replies, and all actions are tracked for audit purposes. Cascading deletes will not affect the parent topic but will remove the reply from discourse view immediately.","path":"/discussionBoard/admin/topics/{topicId}/replies/{replyId}","method":"delete","summary":"Permanently delete a reply from a topic (discussion_board_replies table)","description":"Permanently remove an existing reply from the specified topic, identified by both topicId and replyId. Only authenticated users who authored the reply or are admins may perform this operation. Hard deletion is performed as the reply table lacks a soft delete (deleted_at) field; once removed, the reply cannot be recovered.\n\nAccess control is enforced: members may delete their own replies, admins may delete any reply. All deletions are auditable for compliance. Deletion does not affect parent topics but immediately removes the reply from all discourse views.\n\nAttempting to delete a reply without proper authorization, with missing/invalid parameters, or targeting a non-existent reply will result in an error explaining the reason. Related endpoints allow reply creation and editing, but only this operation handles full removal of reply data from the database.","parameters":[{"name":"topicId","description":"Unique identifier of the topic to which the reply belongs","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Unique identifier of the reply to be deleted within the specified topic","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/discussionBoard/admin/topics","method":"post"},"description":"The topic must exist before a reply can be deleted from it. Use this operation to create the required topic first."},{"endpoint":{"path":"/discussionBoard/admin/topics/{topicId}/replies","method":"post"},"description":"The reply must exist before it can be deleted. Use this operation to create the required reply under the topic first."}]}],"components":{"authorization":[{"name":"guest","description":"A visitor who can browse and search public topics and replies but cannot post or interact. No authentication required.","kind":"guest"},{"name":"member","description":"An authenticated user who can create topics, post replies, search and browse all public discussion content.","kind":"member"},{"name":"admin","description":"Administrator with elevated permissions, able to manage users and moderate content as needed (optional, but good for possible future moderation).","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIDiscussionBoardMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardTopic.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopic.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussionBoardReply.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReply.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IDiscussionBoardGuest.IAuthorized":{"type":"object","description":"Authorization schema for a registered guest entity in the discussion board system.\n\nThis schema represents the authorization/session token issuance for a guest session as backed by the discussion_board_guests table in the database. It contains only non-personal, anonymous session tracking data, with no credential or identity information. The anonymous_token field enables session continuity, while the id field acts as a unique identifier. This type is meant to be used as the response structure for guest session creation and refresh endpoints, facilitating device or browser-level personalization without requiring login or exposing any sensitive or credentialed data.\n\nThere is no correspondence to a JWT or membership level with this authorization type; it is always limited to basic analytics and tracking use only.","x-autobe-prisma-schema":"discussion_board_guests","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the guest record in the discussion_board_guests table.\n\nMaps directly to `id` in the database, which is the primary key (UUID). Serves as the permanent record for device/session tracking until soft deletion (deleted_at) occurs.\n\nThis value is required and should be stored for the duration of a guest session."},"anonymous_token":{"type":"string","description":"Random anonymous token issued to the guest for persistent session/device tracking.\n\nThis value corresponds to the unique constraint on anonymous_token in the discussion_board_guests table, facilitating deduplication and enabling the resumption of sessions if the same browser/device presents this token in the future. This is NOT PII and is generated to provide minimal session continuity without user authentication."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","anonymous_token","token"]},"IDiscussionBoardGuest.IRefresh":{"type":"object","description":"Session refresh request schema for guest sessions in the discussion board system.\n\nThis schema defines the requirements for a guest session refresh request, as implemented by the /auth/guest/refresh endpoint. The only required field is anonymous_token, which is the same unique string issued at session creation. The operation uses this value to locate the active guest in the discussion_board_guests table and refresh session validity. No personal or additional credential data are required or accepted in this schema; there is no password, email, or identity information.\n\nIf a session is not found or is soft-deleted, the refresh operation fails and returns a business error indicating the session is invalid or expired.","properties":{"anonymous_token":{"type":"string","description":"The anonymous token previously issued to the guest session to be refreshed.\n\nThis value must match the anonymous_token column in the discussion_board_guests database table. It serves as the only method of identifying the session in question and must adhere to the unique token format expected at creation. Required for any session refresh, and must be kept secure by the client to avoid orphaned or expired sessions."}},"required":["anonymous_token"]},"IDiscussionBoardMember.ICreate":{"type":"object","x-autobe-prisma-schema":"discussion_board_members","properties":{"email":{"type":"string","format":"email","description":"Member's unique business email address for account registration and login, as stored in the 'discussion_board_members' table. Required for verification and communication. Must adhere to unique constraint."},"username":{"type":"string","description":"Display name selected by the member for use throughout the system. Must be unique, non-empty, and used for identifying user actions on topics and replies."},"password":{"type":"string","format":"password","description":"The plain-text password submitted during user registration (never stored directly). The system hashes this value and saves only the result in the 'password_hash' field. Must meet minimum length and complexity business policy but is not persisted in this raw state."}},"required":["email","username","password"],"description":"Schema for member account registration request. Used during user signup to collect email, username, and plain password. All fields are required according to business policy defined in the requirements and must satisfy uniqueness and validity constraints as enforced by the discussion_board_members table."},"IDiscussionBoardMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the member, corresponding to the 'id' field in the 'discussion_board_members' table."},"email":{"type":"string","format":"email","description":"Member's unique business email address, used for both login and communication.\n\nMust be a valid, deliverable email address, validated through registration and verification flows. Only one active member may share any given email."},"username":{"type":"string","description":"Public display username for this member, used in posts and visible in all discussion topics and replies.\n\nMust be unique, satisfy naming requirements (e.g., length, content), and is required at signup. Helps users distinguish between participants without exposing private information."},"email_verified":{"type":"boolean","description":"Indicates whether this member's email has been fully verified via out-of-band confirmation workflow.\n\nRemains false until the member responds to the system-generated verification process (usually via link sent to email). Controls access to posting and replying features."},"registration_completed_at":{"type":"string","format":"date-time","description":"Timestamp of completed registration including successful email verification.\n\nInitial value is set when user registration and verification flow is finished, establishing membership in the system for audit, search, or reporting applications."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this member record was initially created in the system.\n\nReflects database insert moment, enabling audit trails, reporting, and sort/order logic."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent update to this member record.\n\nSet whenever the user performs a profile or credential update, supporting audit and business reporting operations."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of soft deletion for member (if applicable).\n\nNull by default; set only when the account is deleted (soft delete) to enforce audit/compliance. Used to distinguish between active and removed users."},{"type":"null"}],"description":"Nullable. Timestamp of soft deletion for member. Supports audit/compliance controls and enables recoverability."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","username","email_verified","registration_completed_at","created_at","updated_at","token"],"description":"Schema for a successful member authentication or registration response, containing the member's unique id and an authorization token. Used upon successful account registration or login for session establishment. Mirrors the pattern described in the requirements for authenticated operations."},"IDiscussionBoardMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The member's unique email address for login authentication on the discussion board system. Must be a valid email and corresponds to the email field in the 'discussion_board_members' Prisma table."},"password":{"type":"string","minLength":8,"description":"The plain text password entered by the user for authentication. This will be checked via secure hashing against the stored password_hash. Do not return this field in any response. Business logic: Minimum 8 characters as per password policy."}},"required":["email","password"],"description":"Request body schema for logging in as a discussion board member. Contains the required credentials as defined in the business authentication rules: email (must be unique and verified) and password (minimum eight characters, checked via hashing). This type is used only as input for the /auth/member/login operation and never returned in any response. All fields must match the underlying 'discussion_board_members' Prisma model regarding allowable values."},"IDiscussionBoardMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The JWT refresh token issued to the authenticated member during a prior successful authentication. This token is required to renew the member's access session. It must be valid, unexpired, and provided exactly as received from the prior authorization response. Failure to provide a valid token will result in refresh denial."}},"required":["refresh_token"],"description":"Request body schema for refreshing an authenticated member's access token. Only the existing valid refresh_token, retrieved from a previous /auth/member/login or /auth/member/join operation, should be included. Used for session continuation and must align with token management business logic. No user credential information is sent in this payload."},"IDiscussionBoardAdmin.ICreate":{"type":"object","x-autobe-prisma-schema":"discussion_board_admins","properties":{"email":{"type":"string","format":"email","description":"Unique email address chosen for administrator login to the discussion board system. This must be a valid business or admin-relevant contact, as enforced by upstream validation logic. Email addresses are required to be unique among all administrator accounts (see the unique constraint in the discussion_board_admins Prisma schema). Email verification workflow is required before the account is considered fully active. Must follow email format and is subject to anti-abuse business rules.\n\nThis field is not permitted to be used by members or guests, and responses containing email should only return information relevant to the authenticated admin. Never expose this field in public context or to unauthorized users."},"username":{"type":"string","description":"Display name selected by the admin during registration. This field is used for identification in admin-generated events, profile displays, and auditing. Usernames are required to be unique system-wide (enforced by a unique constraint in the discussion_board_admins Prisma schema) and must conform to platform-defined content and length constraints.\n\nBusiness rules may prohibit certain reserved or offensive terms in usernames and enforce minimum/maximum length. Username is intended for internal visibility and privileged operations, not for public display outside privileged contexts."},"password":{"type":"string","format":"password","description":"Plain text password provided by the admin for secure authentication. This value is never stored or returned in any API response; it is supplied at registration, then securely hashed before storage (resulting in 'password_hash' in the discussion_board_admins table). The password must meet minimum length and complexity requirements (e.g., at least 8 characters, include both letters and numbers).\n\nThis property is required only at creation, not for profile edits or updates. Never accept 'password_hash' from the client; backend processes handle hashing using approved cryptographic functions. This field is not returned in responses and must be transmitted over a secure transport (TLS/SSL) to mitigate risk."}},"required":["email","username","password"],"description":"Payload for registering a new discussion_board_admins entity. Admins provide their email address, a unique display username, and a plain text password (which is hashed and stored internally as password_hash). Passwords are validated for complexity and never stored in plain text.\n\nEmail and username uniqueness are strictly enforced. Only authorized registration routes may use this structure, and response handling must ensure that passwords and hashes are never leaked beyond secure, backend-controlled logic. The admin account remains inactive until email verification is complete. This DTO is used exclusively for account creation and MAY NOT be reused for admin updates."},"IDiscussionBoardAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the administrator in the discussion_board_admins table. Used for all admin lookup, session tracking, and audit trails.\n\nThis value is assigned at account creation and is system-wide unique. It appears in authentication payloads and is necessary for all subsequent privileged operations."},"email":{"type":"string","format":"email","description":"Email address of the authenticated administrator. Used for session context, account management, and notification. Do not expose in front-end public contexts beyond what is allowed for privileged admin workflows."},"username":{"type":"string","description":"Display name of the administrator for authenticated context and management. Used in privileged UI and audit trail interfaces."},"email_verified":{"type":"boolean","description":"Indicates email verification status for the administrator.\n\nTrue if the admin has completed email confirmation; false if registration or update has not yet been verified. Must be checked before login/session activation. Data comes from the 'email_verified' Prisma column."},"registration_completed_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the admin completed registration and email verification.\n\nThis ISO-8601 UTC timestamp records when onboarding was finalized for the admin. Used for auditing and analytics. Maps to 'registration_completed_at' in the schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for initial admin account creation.\n\nRecords when the admin was first onboarded to the system. Provided in UTC ISO-8601 format from 'created_at' in the admin schema."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for latest update to the admin record.\n\nIndicates when any admin profile or security-related field was most recently changed. Populated from the 'updated_at' field in the database."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when the admin account was soft-deleted, if at all.\n\nNull if the account is active. If set, the admin is disabled and excluded from all access and management workflows, preserving audit history and access logs. Sourced from the 'deleted_at' column."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","username","email_verified","registration_completed_at","created_at","updated_at","token"],"description":"Authorization and session details for an administrative account following successful authentication (registration, login, or refresh). This DTO contains secure tokens for ongoing requests as well as basic profile information (email, username, id) corresponding to the discussion_board_admins record.\n\nAll operations returning this structure must comply with privacy and token handling business rules, as described in system and security requirements. Never include password or hash fields in this DTO."},"IDiscussionBoardAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address used for admin authentication. This is a unique business email as per system requirements. It must be a valid and registered address for the administrator account. Case-insensitive matching is used. Referenced from the discussion_board_admins table, 'email' column."},"password":{"type":"string","description":"Plain text password used for login authentication. This will never be stored in cleartext: the backend application hashes this value and compares it against the password_hash field in the discussion_board_admins table. Must comply with business password requirements and strong password policy."}},"required":["email","password"],"description":"Admin login request for the economic/political discussion board.\n\nThis type represents the payload for admin authentication and login. It contains only the minimal set of fields required for credential verification: email and password. Email is a unique, verified identifier for administrator accounts; password must be provided in plain text and is hashed in the backend prior to credential checking. No additional data is accepted during login. All fields are essential for performing authentication, and any omission results in validation failure. This type aligns with security and business requirements for administrator access controls. Used in /auth/admin/login endpoint."},"IDiscussionBoardAdmin.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"A JWT refresh token issued during a prior successful admin authentication. Required for session renewal; must not be expired, revoked, or malformed. This field must be provided exactly as set in the previous IDiscussionBoardAdmin.IAuthorized response. Used for extending the admin's login session in strict compliance with business and security requirements."}},"required":["refreshToken"],"description":"Admin session refresh request for the economic/political discussion board.\n\nThis type represents the payload for renewing administrator authentication. Admins must provide their previously issued JWT refresh token in order to obtain new session tokens. No additional fields or credentials are required; only the exact refresh token string is accepted. This ensures passwordless session extension and adheres to established security controls for administrator privilege renewal. Used in /auth/admin/refresh endpoint."},"IDiscussionBoardMember.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for paginated listing of member records.\n\nMust be a positive integer (minimum 1) for paginated access to the member dataset. Default is 1 if omitted. Used for server-side paging controls. Does not support zero or negative values.","example":1},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of member records per page in the paginated response.\n\nLimits the quantity of records returned in each paginated member listing request to prevent excessive result sets. Defaults to a system-determined value (such as 20 or 50) if omitted. Must be within the allowed min/max for the business policy."},"search":{"type":"string","description":"A keyword or phrase for fuzzy searching member records by email or username.\n\nSupports full-text or partial string matching within the member directory, as permitted by business rules. Input string is sanitized and may support case-insensitive, partial, or combined matching features."},"email":{"type":"string","format":"email","description":"Exact email address filter for finding specific member accounts.\n\nReturns only members whose registered email matches the input. Must conform to standard email patterning as accepted in member registration. Useful for administrative lookups."},"username":{"type":"string","description":"Exact username filter for searching by user login/display names.\n\nFilters member records whose unique usernames exactly match the requested value. Username values must be unique system-wide, per schema constraint."},"email_verified":{"type":"boolean","description":"Filters results to only those members whose 'email_verified' flag matches the requested value.\n\nUsed to distinguish between verified vs. unverified member accounts, supporting business onboarding and eligibility logic."},"registration_completed_before":{"type":"string","format":"date-time","description":"Upper-bound filter for registration completed timestamp.\n\nReturns only member records whose registration_completed_at is before or at the specified ISO8601 datetime. Enables time-windowed queries for business reporting or user management."},"registration_completed_after":{"type":"string","format":"date-time","description":"Lower-bound filter for registration completed timestamp.\n\nReturns only member records whose registration_completed_at is after the specified ISO8601 datetime. Supports querying accounts completed in a specific window."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sorts member result set by the selected sortable field.\n\nOnly these four fields are allowed for ordering, reflecting business rules and indexed columns. Default is 'created_at' if omitted."},{"const":"registration_completed_at","description":"Sorts member result set by the selected sortable field.\n\nOnly these four fields are allowed for ordering, reflecting business rules and indexed columns. Default is 'created_at' if omitted."},{"const":"username","description":"Sorts member result set by the selected sortable field.\n\nOnly these four fields are allowed for ordering, reflecting business rules and indexed columns. Default is 'created_at' if omitted."},{"const":"email","description":"Sorts member result set by the selected sortable field.\n\nOnly these four fields are allowed for ordering, reflecting business rules and indexed columns. Default is 'created_at' if omitted."}],"description":"Sorts member result set by the selected sortable field.\n\nOnly these four fields are allowed for ordering, reflecting business rules and indexed columns. Default is 'created_at' if omitted."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order direction for sorted listing of member results.\n\nAccepts only 'asc' (ascending) or 'desc' (descending). Default may be system or endpoint-specific."},{"const":"desc","description":"Sort order direction for sorted listing of member results.\n\nAccepts only 'asc' (ascending) or 'desc' (descending). Default may be system or endpoint-specific."}],"description":"Sort order direction for sorted listing of member results.\n\nAccepts only 'asc' (ascending) or 'desc' (descending). Default may be system or endpoint-specific."}},"required":[],"description":"Query parameters for searching, filtering, sorting, and paginating discussion board member (user) accounts.\n\nAllows filtering on key attributes (email, username, verification status, registration period), fuzzy search, paging, and order-of-results for administrative or system listing of user records.\n\nSupported filters correspond strictly to existing columns in the discussion_board_members table according to the schema and business constraints."},"IDiscussionBoardMember":{"type":"object","x-autobe-prisma-schema":"discussion_board_members","properties":{"id":{"type":"string","format":"uuid","description":"Primary system identifier for this member account (UUID string).\n\nUnique across the entire user table and employed as the default entity reference in relationships (topic authorship, replies, etc.) Ensures global referential integrity."},"email":{"type":"string","format":"email","description":"Member's unique business email address, used for both login and communication.\n\nMust be a valid, deliverable email address, validated through registration and verification flows. Only one active member may share any given email."},"username":{"type":"string","description":"Public display username for this member, used in posts and visible in all discussion topics and replies.\n\nMust be unique, satisfy naming requirements (e.g., length, content), and is required at signup. Helps users distinguish between participants without exposing private information."},"email_verified":{"type":"boolean","description":"Indicates whether this member's email has been fully verified via out-of-band confirmation workflow.\n\nRemains false until the member responds to the system-generated verification process (usually via link sent to email). Controls access to posting and replying features."},"registration_completed_at":{"type":"string","format":"date-time","description":"Timestamp of completed registration including successful email verification.\n\nInitial value is set when user registration and verification flow is finished, establishing membership in the system for audit, search, or reporting applications."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this member record was initially created in the system.\n\nReflects database insert moment, enabling audit trails, reporting, and sort/order logic."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent update to this member record.\n\nSet whenever the user performs a profile or credential update, supporting audit and business reporting operations."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of soft deletion for member (if applicable).\n\nNull by default; set only when the account is deleted (soft delete) to enforce audit/compliance. Used to distinguish between active and removed users."},{"type":"null"}],"description":"Nullable. Timestamp of soft deletion for member. Supports audit/compliance controls and enables recoverability."}},"required":["id","email","username","email_verified","registration_completed_at","created_at","updated_at"],"description":"Detailed member (user) entity in the discussion board system as represented in the discussion_board_members table.\n\nIncludes identity (id, username, email), verification status, registration and update timestamps, and nullable soft-delete marker as present in the underlying database.\n\nSensitive authentication credentials (such as password_hash) are intentionally omitted for security and business compliance. This object is used for admin control panels, member profile review, and serves as a canonical user reference throughout the discussion board platform."},"IDiscussionBoardMember.IUpdate":{"type":"object","x-autobe-prisma-schema":"discussion_board_members","properties":{"email":{"type":"string","format":"email","description":"Updated email address for the member. Must be unique within the members table.\n\nWhen a new value is provided, the system will reset email_verified to false and require email verification before enabling posting privileges. See discussion_board_members.email in the schema."},"username":{"type":"string","description":"Updated display username for the member. Must be unique. Used for display and mention within the forum. If changed, must be unique per discussion_board_members.username constraint."},"email_verified":{"type":"boolean","description":"Indicates if the member's email is verified. Should only be changed by the verification completion process. Direct manipulation is not usually allowed on update endpoints."},"registration_completed_at":{"type":"string","format":"date-time","description":"Timestamp when email verification and onboarding is complete. Typically set by the system, not updatable via API, but included for completeness."}},"required":[],"description":"Partial update object for discussion_board_members, supporting update of email and username for member administration. No system-managed, immutable, or computed fields can be directly set by normal users (id, created_at, updated_at, deleted_at excluded). Most fields are optional, and only provided fields will be modified. Uniqueness and validation rules for email and username are enforced at the database layer. When email is changed, verification/enrollment policies apply.\n\nReference: discussion_board_members table in schema. All properties must have a direct mapping to schema fields. System timestamps are server-managed and usually excluded from direct update, but are included here for completeness and admin maintenance."},"IDiscussionBoardAdmin.IRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin email address (exact or partial match for search). Can be used to filter records to specific admin accounts within the discussion_board_admins table."},"username":{"type":"string","description":"Display username for admin account. Used for searching or filtering administrator records."},"email_verified":{"type":"boolean","description":"Optional filter on email verification status. When set to true or false, restricts results to only those with matching status."},"registration_completed_at_start":{"type":"string","format":"date-time","description":"Optional search parameter: limit results to administrators registered/verified after this timestamp."},"registration_completed_at_end":{"type":"string","format":"date-time","description":"Optional search parameter: limit results to administrators registered/verified before this timestamp."},"page":{"type":"integer","format":"int32","description":"Requested results page number for pagination, starting at 1. Defaults to the first page if not specified."},"limit":{"type":"integer","format":"int32","description":"Number of administrator records to return per page, for capped pagination. Maximum and default values depend on server configuration."},"sort_by":{"oneOf":[{"const":"email","description":"Sorting criteria for returned admin records. One of: email, username, registration_completed_at, created_at."},{"const":"username","description":"Sorting criteria for returned admin records. One of: email, username, registration_completed_at, created_at."},{"const":"registration_completed_at","description":"Sorting criteria for returned admin records. One of: email, username, registration_completed_at, created_at."},{"const":"created_at","description":"Sorting criteria for returned admin records. One of: email, username, registration_completed_at, created_at."}],"description":"Sorting criteria for returned admin records. One of: email, username, registration_completed_at, created_at."},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting direction for the query results; 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sorting direction for the query results; 'asc' for ascending, 'desc' for descending."}],"description":"Sorting direction for the query results; 'asc' for ascending, 'desc' for descending."}},"required":[],"description":"Search and filter parameters for admin user accounts in discussion_board_admins. Includes filters by email, username, verification status, registration/confirmation timestamps.\n\nPagination and sorting supported by page/limit and sort_by/sort_order properties. All filters reference actual columns in the Prisma model and support full-table admin management as required for administrative business operations.\n\nReference: discussion_board_admins schema. Only properties that directly map to table columns or generally accepted query practices are included."},"IDiscussionBoardAdmin":{"type":"object","x-autobe-prisma-schema":"discussion_board_admins","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the administrator account.\n\nThis value is the universally unique identifier (UUID) for this admin as assigned by the database. It is mandatory for all references and operations involving administrator entities. Extracted from the 'id' column in the discussion_board_admins table."},"email":{"type":"string","format":"email","description":"Email address of the administrator.\n\nThe email is used for login authentication and admin-related communication. It must be unique among all admins and is validated for business/organizational domains and correctness during registration. Corresponds to the 'email' column in the discussion_board_admins Prisma table."},"username":{"type":"string","description":"Display username for the administrator.\n\nThe username is selected by the admin for visibility in audit logs, admin events, and management actions. Uniqueness is enforced at the database level. Maps directly to the 'username' field in discussion_board_admins."},"email_verified":{"type":"boolean","description":"Indicates email verification status for the administrator.\n\nTrue if the admin has completed email confirmation; false if registration or update has not yet been verified. Must be checked before login/session activation. Data comes from the 'email_verified' Prisma column."},"registration_completed_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the admin completed registration and email verification.\n\nThis ISO-8601 UTC timestamp records when onboarding was finalized for the admin. Used for auditing and analytics. Maps to 'registration_completed_at' in the schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for initial admin account creation.\n\nRecords when the admin was first onboarded to the system. Provided in UTC ISO-8601 format from 'created_at' in the admin schema."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for latest update to the admin record.\n\nIndicates when any admin profile or security-related field was most recently changed. Populated from the 'updated_at' field in the database."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when the admin account was soft-deleted, if at all.\n\nNull if the account is active. If set, the admin is disabled and excluded from all access and management workflows, preserving audit history and access logs. Sourced from the 'deleted_at' column."}},"required":["id","email","username","email_verified","registration_completed_at","created_at","updated_at"],"description":"Administrator account data for the economic/political discussion board system.\n\nContains all public and administrative metadata for a given admin account as sourced directly from the discussion_board_admins Prisma schema. Sensitive fields such as password hashes are omitted per security best practices. This type is referenced for profile displays, management, and audit views of admin entities in the API."},"IDiscussionBoardAdmins.IUpdate":{"type":"object","x-autobe-prisma-schema":"discussion_board_admins","properties":{"email":{"type":"string","format":"email","description":"New email address for the admin, if being changed.\n\nThis field is subject to business validation rules for uniqueness and correct organizational domain. It updates the 'email' column; changes reset email_verified."},"username":{"type":"string","description":"New display username for the admin profile.\n\nMust conform to uniqueness and business constraints defined in the schema. Corresponds to the 'username' column."}},"required":[],"description":"Fields allowed to update for an administrator account in the discussion board system, as per the discussion_board_admins Prisma schema.\n\nPermitted fields for editing an admin profile are strictly limited to email and username. Updating system-managed, secret, or audit fields is forbidden for regular update flows. Sensitive authentication credentials (e.g., password) can only be set/changed through dedicated password reset/verification operations. Email changes will require new verification; attempts to update fields not present in the database or not safely user-editable will fail validation. This update DTO enforces compliance and safe mutation of only defined admin entity columns."},"IDiscussionBoardAdmins":{"type":"object","x-autobe-prisma-schema":"discussion_board_admins","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nThis field uniquely identifies each admin record in the discussion_board_admins table. It is a UUID generated by the database, ensuring global uniqueness for all admin users.\n\nUsed for all relationship references and audit tracking, but never to be set by API calls directly."},"email":{"type":"string","description":"Unique email address for administrator login and communication. Must be business-verified as part of privileged account control.\n\nThis is used for authentication/contact, and must comply with system uniqueness constraints."},"username":{"type":"string","description":"Display name selected by admin, used for displaying the identity of admin actions and audit events.\n\nMust be unique platform-wide among admin accounts."},"email_verified":{"type":"boolean","description":"Boolean flag indicating whether the administrator account has been confirmed via a verification link or equivalent email validation process. This field is only set after the email verification step is complete."},"registration_completed_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account has successfully completed verification and is enabled for privileged access.\n\nServes as the moment the admin can begin executing privileged actions. Provided in ISO 8601 format as a string."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for account creation and audit trail establishment for onboarded admins."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the most recent administrative account update, such as profile changes or security resets. Important for tracking changes and audit."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft-deletion of the admin account. Null if the account is active. Only set when the account is flagged as deleted, not removed from the table.\n\nUsed to support audit, compliance, and possible administrative review workflows."}},"required":["id","email","username","email_verified","registration_completed_at","created_at","updated_at","deleted_at"],"description":"Administrator entity type.\n\nThis schema models system administrators for the economic/political discussion board, as stored in the discussion_board_admins Prisma DB table. It encapsulates all audit, authentication, and profile fields, strictly following the table's structure.\n\nAdmins have unique authority and serve for privileged management, requiring secure handling and compliance with business data policies. Sensitive credentials (e.g., password_hash) are intentionally not included. All system operations impacting admin records use these fields for read/display/update. This type is never returned to normal members or guests."},"IDiscussionBoardTopic.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Keyword(s) to search against topic subjects or content. Applied as case-insensitive, index-accelerated search using trigram operations. Allows users to find topics by relevant keywords or phrases."},"author_member_id":{"type":"string","format":"uuid","description":"Restrict the search to topics authored by a specific member. Accepts a UUID corresponding to a member's record. If provided, overrides general search."},"author_admin_id":{"type":"string","format":"uuid","description":"Restrict the search to topics authored by a specific admin. Accepts a UUID. Mutually exclusive with author_member_id; only one should be used at a time."},"after":{"type":"string","format":"date-time","description":"ISO 8601 date-time. Returns only topics created after this timestamp.\n\nSupports forward pagination or creation window selection in search requests."},"before":{"type":"string","format":"date-time","description":"ISO 8601 date-time. Returns only topics created before this timestamp.\n\nSupports backward pagination or historical slicing of the topic list."},"sort_by":{"oneOf":[{"const":"created_at","description":"Specifies which field to sort results by. Only columns indexed in the schema are permitted: either created_at or updated_at."},{"const":"updated_at","description":"Specifies which field to sort results by. Only columns indexed in the schema are permitted: either created_at or updated_at."}],"description":"Specifies which field to sort results by. Only columns indexed in the schema are permitted: either created_at or updated_at."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction for the requested sort field. 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort direction for the requested sort field. 'asc' for ascending, 'desc' for descending."}],"description":"Sort direction for the requested sort field. 'asc' for ascending, 'desc' for descending."},"page":{"type":"integer","description":"Page number for paginated topic results. Starts at 1. Used in combination with limit."},"limit":{"type":"integer","description":"Number of topics per page for pagination. Maximum values and sensible defaults controlled by business rules."}},"required":[],"description":"Request parameters for topic list/search operation.\n\nProvides comprehensive support for keyword search, author filtering (by member or admin), date windows, pagination, and fielded sorting when retrieving discussion_board_topics records for browsing and search.\n\nThese request parameters strictly correspond to columns actually present in the Prisma DB schema. Input validation must enforce type, value, and mutual exclusivity where necessary. Designed for high-traffic search and browse interfaces."},"IDiscussionBoardTopic":{"type":"object","x-autobe-prisma-schema":"discussion_board_topics","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the discussion topic record. This uniquely identifies the topic across the system and is used as a reference in replies and links. See discussion_board_topics.id in the Prisma schema."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier for the member author of this topic (discussion_board_members.id). Set when a standard member creates the topic. Only one of author_member_id or author_admin_id will be present for a given topic. Reference: discussion_board_topics.author_member_id in Prisma schema."},"author_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier for the admin author of this topic (discussion_board_admins.id). Set when an administrator creates the topic. Only one of author_member_id or author_admin_id will be present for a given topic. Reference: discussion_board_topics.author_admin_id in Prisma schema."},"subject":{"type":"string","description":"Subject or title of the topic. Required, minimum 5, maximum 120 characters. Used for quick identification and list display in the forum. See discussion_board_topics.subject in Prisma schema."},"content":{"type":"string","description":"Main body text of the topic post. Required, minimum 10, maximum 4000 characters. Includes the initial question, argument, or opinion for the discussion. See discussion_board_topics.content in Prisma schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the topic was created in the discussion board. Recorded in UTC according to the system's audit requirements. See discussion_board_topics.created_at in Prisma schema."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the most recent edit or update to the topic. Increases transparency and supports audit need for modifications. See discussion_board_topics.updated_at in Prisma schema."},"discussion_board_replies":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReply"},"description":"Array of reply entities associated with this topic. Each item is a reply record as defined by discussion_board_replies table. Relation: discussion_board_topics.discussion_board_replies in Prisma schema."}},"required":["id","subject","content","created_at","updated_at"],"description":"Discussion board topic entity for economic/political board. Represents the main forum thread with subject, content, author, and timestamps. Each topic is created by either a member or admin, not a guest. Directly references replies posted to this topic. See discussion_board_topics table and ERD/Prisma schema for all field and relationship descriptions.\n\n- Only one of author_member_id or author_admin_id is set for each topic depending on creator role. Guests cannot author topics.\n- 'discussion_board_replies' provides the thread of replies in order."},"IDiscussionBoardTopic.ICreate":{"type":"object","x-autobe-prisma-schema":"discussion_board_topics","properties":{"subject":{"type":"string","description":"Subject or title for the new topic. Required, minimum 5 and maximum 120 characters. See discussion_board_topics.subject in Prisma schema."},"content":{"type":"string","description":"Main body of the new topic post. Required, must be at least 10 and no more than 4000 characters. See discussion_board_topics.content in Prisma schema."}},"required":["subject","content"],"description":"DTO schema for creating a new discussion board topic (POST). Only member or admin may use this type; guests are not permitted. Only includes business fields that must be supplied by the user during topic creation. See discussion_board_topics table in Prisma schema. System sets author and timestamps automatically."},"IDiscussionBoardReply":{"type":"object","x-autobe-prisma-schema":"discussion_board_replies","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the reply entity, uniquely identifying this reply record in the system.\n\nGenerated as a UUID according to the discussion_board_replies Prisma table. Used throughout the discussion board system to reference replies, enforce uniqueness, and support relational integrity. Not user-supplied and always present."},"topic_id":{"type":"string","format":"uuid","description":"Foreign key referencing the discussion_board_topics table, indicating which topic this reply belongs to.\n\nMandatory for every reply. A reply cannot exist without linking to a valid topic. This ensures conversation threads remain attached to their respective parent topics. Maps to the topic's primary key. Cannot be updated after creation."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Foreign key to the discussion_board_members table, representing the author of the reply when posted by a member. Nullable to support admin authors. Only one author_*_id may be non-null."},{"type":"null","description":"If the reply was authored by an admin, this field is null."}],"description":"Foreign key referencing the member author of the reply, when applicable. Must be either a valid UUID of an existing member or null if the author is an admin. Exactly one of author_member_id or author_admin_id is non-null."},"author_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Foreign key to the discussion_board_admins table, representing the author of the reply when posted by an admin. Nullable to support member authors. Only one author_*_id may be non-null."},{"type":"null","description":"If the reply was authored by a member, this field is null."}],"description":"Foreign key referencing the admin author of the reply, when applicable. Must be either a valid UUID of an existing admin or null if the author is a member. Exactly one of author_member_id or author_admin_id is non-null."},"content":{"type":"string","minLength":3,"maxLength":2000,"description":"Main body/content of the reply. Text contributed by the member or admin to the discussion thread, supporting business policies on safe and effective communication.\n\nLength constraints: minimum 3 characters, maximum 2000 characters. Subject to business validation for language, banned content, and permitted character sets. Must not be empty or consist solely of whitespace."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the reply was created. Populated automatically by the system at creation time.\n\nReflects the original posting time and is used for chronological ordering of replies within a topic. Immutable after creation, matches the Prisma schema 'created_at' column."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the most recent update to the reply. Updated automatically by the system whenever the reply's content is edited.\n\nUsed for audit trail, consistency, and business validation purposes. Matches the Prisma schema 'updated_at' column."}},"required":["id","topic_id","content","created_at","updated_at"],"description":"Reply entity for the discussion board system, representing an individual post within a topic thread.\n\nEach reply must belong to a valid topic (topic_id), be authored by a member or admin (author_member_id or author_admin_id), and include validated content. All replies support timestamps for creation and last update in strict adherence to the discussion_board_replies Prisma model. Foreign key references to member or admin authors enable audit trails and support future moderation or compliance policies. No sensitive information such as password hashes is ever included. Descriptions and field requirements directly reflect the annotated Prisma schema, with all constraints enforced. Replies are read-only for guests and may only be posted or edited by authenticated members or admins. The object is the main communication primitive for threaded conversations on the platform."},"IDiscussionBoardTopic.IUpdate":{"type":"object","description":"Update payload for an existing discussion board topic.\n\nThis schema is used for submission of updates to a topic's subject (title) and/or content (body) by its author (member or admin) or by an administrator. The available fields correspond exactly to the mutable properties in the `discussion_board_topics` table: 'subject' and 'content'. Business validation rules enforce subject length (5-120 characters) and content length (10-4000 characters). All properties are optional in this type so the endpoint can support partial updates (PATCH semantics).\n\nThis DTO does not allow changing topic authorship or timestamps directly; those are system-managed fields. Any unspecified field will remain unchanged. Use of this type should strictly follow the access control outlined in requirements (only topic authors or admins may update topics). All updates will refresh the `updated_at` timestamp in the underlying model.\n\n@prisma discussion_board_topics\n@author AutoBE","x-autobe-prisma-schema":"discussion_board_topics","properties":{"subject":{"type":"string","minLength":5,"maxLength":120,"description":"Subject or title of the discussion topic. Minimum 5, maximum 120 characters. Optional for update, but if supplied, will replace the previous title. Must not be empty or contain forbidden language."},"content":{"type":"string","minLength":10,"maxLength":4000,"description":"Main body/content of the topic. Minimum 10, maximum 4000 characters. Optional for update, but if present, will replace the previous content. Must be valid according to business and moderation rules."}},"required":[]},"IDiscussionBoardReply.IRequest":{"type":"object","description":"Query and filter parameters for retrieving a paginated list of replies attached to a discussion board topic.\n\nThis schema supports pagination, searching, and sorting for replies as part of the topic's threaded discussion. Primarily used in requests to endpoints that list replies for a particular topic, this type allows specifying the page, limit, order, date/time filters, as well as search keywords within reply content. All fields are optional and may be used flexibly to enable efficient browsing or targeted discovery in long-running discussion threads.\n\n@prisma discussion_board_replies\n@author AutoBE","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based index). Defaults to first page if not specified."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of replies per page. Defaults to system standard (e.g., 20), and cannot exceed 100."},"sort":{"oneOf":[{"const":"created_at","description":"Field to sort replies by: either 'created_at' (default, newest first) or 'updated_at'."},{"const":"updated_at","description":"Field to sort replies by: either 'created_at' (default, newest first) or 'updated_at'."}],"description":"Field to sort replies by: either 'created_at' (default, newest first) or 'updated_at'."},"order":{"oneOf":[{"const":"asc","description":"Ordering direction: 'asc' for ascending (oldest first), 'desc' for descending (newest first)."},{"const":"desc","description":"Ordering direction: 'asc' for ascending (oldest first), 'desc' for descending (newest first)."}],"description":"Ordering direction: 'asc' for ascending (oldest first), 'desc' for descending (newest first)."},"search":{"type":"string","description":"Keyword(s) to search within the reply content. Optional. Case-insensitive, partial matches allowed."},"author_member_id":{"type":"string","format":"uuid","description":"Filter replies to only those authored by a specific discussion board member (by id, UUID). Optional."},"author_admin_id":{"type":"string","format":"uuid","description":"Filter replies to only those authored by a specific discussion board admin (by id, UUID). Optional."},"created_from":{"type":"string","format":"date-time","description":"Filter replies created at or after this timestamp. Optional. ISO 8601 format."},"created_to":{"type":"string","format":"date-time","description":"Filter replies created at or before this timestamp. Optional. ISO 8601 format."}},"required":[]},"IDiscussionBoardReply.ICreate":{"type":"object","x-autobe-prisma-schema":"discussion_board_replies","properties":{"content":{"type":"string","minLength":3,"maxLength":2000,"description":"Main body/content of the reply to be posted. Input text by the member or admin being added to a conversation thread.\n\nLength constraints: minimum 3 characters, maximum 2000 characters. Field must comply with system validation policies (no banned content, must not be empty or whitespace, and acceptable character sets). Required for every create operation."}},"required":["content"],"description":"Create-request DTO for posting a new reply in the discussion board. Used when an authenticated member or admin wishes to contribute a reply to an existing topic.\n\nCorresponds to the discussion_board_replies table's content field; topic_id and author identification are derived from the authenticated context and request path or session, and are not directly included in the request body. The structure enforces all length and business validation rules as specified in the relevant business documents and the Prisma schema. Ensures safe posting practices by excluding all non-user-controlled fields, actor IDs, and system-managed timestamps. Secure by design, allowing business logic enforcement for anti-abuse, content standards, and thread consistency."},"IDiscussionBoardReply.IUpdate":{"type":"object","description":"Update DTO for discussion board replies, corresponding to updates in the 'discussion_board_replies' Prisma model.\n\nThis type allows modification of reply content only. It does not permit changing reply ownership, parent topic association, or timestamps directly (except as updated automatically by the system).\n\nAll fields are optional and support partial update (patching), following the Partial<T> pattern for updates in RESTful APIs. System- and relationship-managed fields cannot be changed by this type.\n\nNo security or system fields (like author IDs, topic ID, created_at, updated_at, etc.) are updatable via this type. Only content editing is permitted, and business validation is required for length and prohibited content. All updates are audit-traced by the backend using the 'updated_at' timestamp.","x-autobe-prisma-schema":"discussion_board_replies","properties":{"content":{"type":"string","description":"Editable content/body of the reply, representing the text shown publicly in the discussion thread. This is the only updatable field when modifying replies. Must conform to business rules: between 3 and 2000 characters, containing no prohibited or banned content. Special formatting, if any, is handled outside this DTO. Only non-empty, meaningful, and sanitized strings may be submitted. Changes are subject to moderation and audit policies."}},"required":[]},"IDiscussionBoardMember.ISummary":{"type":"object","description":"Summary DTO for discussion board members, derived from the 'discussion_board_members' Prisma model and intended for use in list, search, or lightweight display scenarios where full member detail is unnecessary.\n\nContains only safe, public-facing fields for minimal exposure (e.g., for admin list queries, public member references). Does not include sensitive authentication info (such as password_hash), personally identifiable information (except email when appropriate), or audit/compliance details. Use in paginated results or overview lists where privacy must be balanced with membership visibility.\n\nThe required ID field enables unique reference; username is for display; email may be included if business rules allow. All fields must exist in the Prisma schema and should not introduce phantom or computed fields that aren't supported by the schema.","x-autobe-prisma-schema":"discussion_board_members","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the member as stored in the 'discussion_board_members' table. Used for selection, reference, and association throughout the system. Maps to the 'id' primary key in Prisma."},"username":{"type":"string","description":"Member's display name as shown in all public and admin interfaces, which must be unique within the system. Subject to business naming policies and provided at registration; used for attribution of posts and replies. Maps to 'username' field in Prisma."},"email":{"type":"string","description":"(Optional, when exposed) The member's unique email address, as stored in the 'email' field. Used for admin search or display, but not commonly revealed to the public. Subject to privacy rules/restrictions; when present, must match registration email."}},"required":["id","username"]},"IDiscussionBoardAdmin.ISummary":{"type":"object","x-autobe-prisma-schema":"discussion_board_admins","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the administrator account. Primary Key as per the Prisma 'discussion_board_admins' model.\n\nUsed for reference, administration, and audit tracking throughout the system. Always a UUID string, generated on creation and never altered after onboarding."},"email":{"type":"string","description":"Unique business email address for administrator login and system communication. Corresponds to the 'email' field in the Prisma schema, and must be unique among admin accounts.\n\nUsed both for contact and as the primary login credential. Actual value is hidden from public endpoints, but available within admin summaries for privileged management purposes."},"username":{"type":"string","description":"Display name chosen by admin, unique within the system. Used for identifying admin actions, audit records, and all profile references.\n\nEnforced by the 'username' unique constraint in the database. Names are used both for authentication context and visible administrative actions."},"email_verified":{"type":"boolean","description":"Indicates whether the administrator's email address has been successfully verified through the registration/confirmation flow. Maps to the 'email_verified' boolean in the 'discussion_board_admins' schema.\n\nOnly verified accounts are enabled for login and privileged actions. Admin onboarding is incomplete until this is true."},"registration_completed_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) when the administrator account has been fully registered and verified. Sourced from the 'registration_completed_at' field in the schema.\n\nUsed for onboarding analytics, compliance, and as a milestone for admin activation. Not set until verification workflow completes."}},"required":["id","email","username","email_verified","registration_completed_at"],"description":"Summary information for a discussion board administrator, suitable for administrative listings and fast lookup screens.\n\nIncludes all non-sensitive, identifying metadata required for role management, audit, and general oversight. Sensitive fields such as password hashes and session tokens are excluded by design. This summary directly references the 'discussion_board_admins' Prisma table and is used in paginated admin listing responses, search, and internal management UIs. Designed for efficiency and clarity in administrator directories and management consoles."},"IDiscussionBoardTopic.ISummary":{"type":"object","x-autobe-prisma-schema":"discussion_board_topics","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the discussion topic. Primary key in the 'discussion_board_topics' Prisma model.\n\nRequired for referencing, editing, deleting, or displaying topic details across the board. Always an immutable UUID string."},"subject":{"type":"string","description":"Subject or title of the discussion topic. Corresponds to the 'subject' field in the 'discussion_board_topics' schema. Required, between 5 and 120 characters per business validation.\n\nDisplayed as the main headline on topic listings, landing pages, and search results."},"author_member_id":{"type":"string","format":"uuid","description":"(When author is a member) The unique identifier (UUID) of the member who authored this topic. Sourced from 'author_member_id' in the database and nullable only if authored by an admin.\n\nUsed for linking topics to member profiles, permissions checks, and author attributions in summary/listing contexts. Null when 'author_admin_id' is populated."},"author_admin_id":{"type":"string","format":"uuid","description":"(When author is an admin) The unique identifier (UUID) of the admin who authored this topic. Sourced from 'author_admin_id' in the database and nullable except when authored by an admin.\n\nAllows privilege escalation and audit trails in topic curation. Null when 'author_member_id' is populated."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) indicating when the topic was created. Reflects the 'created_at' field in the Prisma schema.\n\nUsed for sorting, display recency, and management workflows throughout the discussion board. Immutable after creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) indicating the most recent update to the topic. Corresponds to 'updated_at' in the schema, and is updated each time the topic's subject or content is modified.\n\nDisplayed in listings for activity heatmaps or freshness scores, and used for audit/timeline features."}},"required":["id","subject","created_at","updated_at"],"description":"Summary DTO for a discussion topic, optimized for fast listing, search, and browsing interfaces.\n\nIncludes identifying information, title/subject, author references (member or admin), and key timestamps. This summary is returned in paginated listings, feeds, and search results, where full topic content and nested replies are unnecessary for performance and usability. Core properties exactly match fields available in the 'discussion_board_topics' table. Use for lightweight exploration and user-friendly navigation within the economic/political discussion board."},"IDiscussionBoardReply.ISummary":{"type":"object","x-autobe-prisma-schema":"discussion_board_replies","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the reply in the discussion. This property corresponds to the primary key 'id' in the discussion_board_replies table in the Prisma schema. Each reply on the board, whether posted by a member or admin, is assigned a unique UUID upon creation to ensure precise record keeping and facilitate reliable lookups. The UUID format guarantees global uniqueness, which is critical for distributed or federated system integration and deep-linking to specific reply content.\n\nThis identifier is used by the system to reference the reply throughout all discussion operations, including displaying reply chains under topics, replying to specific replies, and supporting thread navigation. The system enforces UUID integrity through validation at both database and application layers."},"topic_id":{"type":"string","format":"uuid","description":"Identifier for the parent discussion topic to which this reply belongs. Directly references the 'topic_id' foreign key in the discussion_board_replies table, which must match a valid discussion_board_topics.id.\n\nThis property is critical for organizing and retrieving replies under their associated topic. Display and search functions rely on topic linkage for rendering threaded discussions and for cascading deletes when a topic is removed.\n\nStrictly enforced as a valid UUID to ensure referential integrity. Replies cannot exist without a valid parent topic."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the member who authored this reply. Represents a reference to the discussion_board_members.id primary key. Only one of 'author_member_id' or 'author_admin_id' will be set for a given reply as enforced by system logic; the other will be null.\n\nThis field is set when a standard user posts a reply. For replies created by admins, this field is null and 'author_admin_id' is populated. The dual-author model supports audit trails and permission checks for reply lifecycle events.\n\nIf null, indicates the reply was authored by an admin, not a member."},"author_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the admin who authored this reply, if any. Represents a reference to discussion_board_admins.id. Mutually exclusive with 'author_member_id'; only one will be present.\n\nAdmin-authored replies have this field set, allowing for elevated permissions and system actions such as moderation notifications, admin interventions in discussions, or logging administrative engagement. If null, the reply was authored by a member.\n\nCritical for distinguishing between regular and privileged actors in discussion threads."},"content":{"type":"string","description":"Reply content string as submitted by the author. Enforces minimum and maximum length constraints (business rules: minimum 3, maximum 2000 characters) per requirements documented in the discussion_board_replies table and business documentation.\n\nThis property holds the substantive contribution of the reply, rendered as plain text for inclusion in the topic thread. All user-search, keyword filtering, and topic context analysis is based on this body field. The content undergoes sanitation and validation to block prohibited content, ensure compliance, and maintain system safety.\n\nMust not contain only whitespace or special characters. Empty-body replies are explicitly disallowed as per business rules."},"created_at":{"type":"string","format":"date-time","description":"Timestamp specifying when the reply was created in ISO 8601 date-time format. Derived from the 'created_at' column in discussion_board_replies; automatically populated by the system on creation.\n\nImportant for chronological rendering of replies within topics, sort order, and time-based analytics. Also forms the foundation for immutable audit trails and reply age enforcement (e.g., rate limiting, topic closing).\n\nTimestamps are always in UTC to maintain consistency across distributed systems. This field is required and present in all replies."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last time the reply content was modified. Directly tied to the 'updated_at' column in the discussion_board_replies schema. Used for tracking reply edits, supporting edit histories, audit compliance, and informing users of recent content changes.\n\nSimilar to 'created_at', this field is always recorded in UTC using standard ISO 8601 formatting. The value matches 'created_at' if no edits have occurred. Variation between these two fields indicates user or admin-initiated modifications."}},"required":["id","topic_id","content","created_at","updated_at"],"description":"Summary representation of a discussion board reply for use in high-performance browsing, listings, and search result pages.\n\nMaps directly to the discussion_board_replies table in the business database schema. Only public, safe-to-display fields are included; passwords and internal system data are excluded by design. Reply authorship can be attributed to either a member or an admin—one and only one is present per reply, conveyed by author_member_id or author_admin_id. Timestamps support thread ordering and presence of content supports text preview and search highlighting.\n\nThis summary view is used for array listings (e.g., IPageIDiscussionBoardReply.ISummary) and API responses focused on efficiency. For full details (including deep author info or moderation history), use the comprehensive reply entity. Documentation and all validation derive from the discussion_board_replies Prisma schema specification."}}}}